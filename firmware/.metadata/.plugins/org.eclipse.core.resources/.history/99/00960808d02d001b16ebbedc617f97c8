#include "main.h"
#include "cmsis_os.h"

/* Constants */
const uint32_t task1Freq = 2; // [Hz]

/* Function Prototypes */
void startTask1(void * argument);

osThreadId_t task1Handle;
const struct osThreadAttr_t task1Attributes = {
	.name = "task1",
	.priority = (osPriority_t) osPriorityNormal,
	.stack_size = 128 * 4
};

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);

	return 1;
}

void startTask1(void * argument) {
	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
		uint32_t osTickFreq = osKernelGetTickFreq();
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		osDelayUntil(osTickCount + task1Freq * osTickFreq);
	}
}


