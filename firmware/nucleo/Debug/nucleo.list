
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9e8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d3c  0800dbc8  0800dbc8  0001dbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f904  0800f904  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f90c  0800f90c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f90c  0800f90c  0001f90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f910  0800f910  0001f910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800f914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  200001e0  0800faf4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200008a8  0800faf4  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f61  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b0  00000000  00000000  00041171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00046328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00047bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aea6  00000000  00000000  00049228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ad1  00000000  00000000  000740ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec46b  00000000  00000000  00094b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0018100a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007778  00000000  00000000  001810cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000016e  00000000  00000000  00188844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800dbb0 	.word	0x0800dbb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800dbb0 	.word	0x0800dbb0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <_ZN7EncoderC1Ev+0x2c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f04f 0200 	mov.w	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	0800ecf4 	.word	0x0800ecf4

08000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffdd 	bl	8000efc <_ZN7EncoderC1Ev>
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	829a      	strh	r2, [r3, #20]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	619a      	str	r2, [r3, #24]
{

}
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	0800ece4 	.word	0x0800ece4

08000f70 <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f8f1 	bl	8001160 <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 8000f86:	b590      	push	{r4, r7, lr}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 8000f8e:	687c      	ldr	r4, [r7, #4]
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f8a9 	bl	80010e8 <_ZN7AS5048A10ReadAngle_Ev>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f000 f9ec 	bl	800137c <_ZN7Encoder9set_angleEf>
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}

08000fac <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
	// Efficient method for calculating parity: https://www.geeksforgeeks.org/finding-the-parity-of-a-number-efficiently/
	val = val<<1; // mask off 16th bit (MSb)
 8000fb8:	887b      	ldrh	r3, [r7, #2]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	807b      	strh	r3, [r7, #2]
	uint8_t x = val ^ (val>>8);
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	887b      	ldrh	r3, [r7, #2]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4053      	eors	r3, r2
 8000fcc:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>4);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	4053      	eors	r3, r2
 8000fd8:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>2);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	4053      	eors	r3, r2
 8000fe4:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>1);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	4053      	eors	r3, r2
 8000ff0:	73fb      	strb	r3, [r7, #15]
	return x&0b1 ? 1 : 0; // present parity bit to make integer has even parity
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
//	uint8_t par = 0;
//	for (uint8_t shift = 0; shift < 15; shift++) {
//		par ^= ((val >> shift) & 0x1);
//	}
//	return par;
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800101c:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	039b      	lsls	r3, r3, #14
 8001022:	b21b      	sxth	r3, r3
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	b21a      	sxth	r2, r3
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffb7 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 800103e:	4603      	mov	r3, r0
 8001040:	03db      	lsls	r3, r3, #15
 8001042:	b21a      	sxth	r2, r3
 8001044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	81fb      	strh	r3, [r7, #14]
	return pack;
 800104e:	89fb      	ldrh	r3, [r7, #14]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800106a:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff9b 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 8001076:	4603      	mov	r3, r0
 8001078:	03db      	lsls	r3, r3, #15
 800107a:	b21a      	sxth	r2, r3
 800107c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	81fb      	strh	r3, [r7, #14]
	return pack;
 8001086:	89fb      	ldrh	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	0b9b      	lsrs	r3, r3, #14
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <_ZN7AS5048A20ParseReceivedPacket_Et+0x20>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	e017      	b.n	80010e0 <_ZN7AS5048A20ParseReceivedPacket_Et+0x50>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4619      	mov	r1, r3
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff79 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	0bdb      	lsrs	r3, r3, #15
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	429a      	cmp	r2, r3
 80010c6:	bf14      	ite	ne
 80010c8:	2301      	movne	r3, #1
 80010ca:	2300      	moveq	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d002      	beq.n	80010d8 <_ZN7AS5048A20ParseReceivedPacket_Et+0x48>
		// parity bit is incorrect
		return PARSE_ERR;
 80010d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d6:	e003      	b.n	80010e0 <_ZN7AS5048A20ParseReceivedPacket_Et+0x50>
	}
	return (packet & (0xFFFF >> 2));
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010de:	b29b      	uxth	r3, r3
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ff85 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 80010fc:	4603      	mov	r3, r0
 80010fe:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001100:	89fb      	ldrh	r3, [r7, #14]
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f84f 	bl	80011a8 <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800110a:	2100      	movs	r1, #0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffa3 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 8001112:	4603      	mov	r3, r0
 8001114:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	4619      	mov	r1, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f86f 	bl	80011fe <_ZN7AS5048A21SPITransmitReceive16_Et>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ffb3 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 800112a:	4603      	mov	r3, r0
 800112c:	817b      	strh	r3, [r7, #10]
	return static_cast<float>(raw_angle_val) * 360.0f / static_cast<float>(DATA_MAX);
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001138:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001158 <_ZN7AS5048A10ReadAngle_Ev+0x70>
 800113c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001140:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800115c <_ZN7AS5048A10ReadAngle_Ev+0x74>
 8001144:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001148:	eef0 7a66 	vmov.f32	s15, s13
}
 800114c:	eeb0 0a67 	vmov.f32	s0, s15
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	43b40000 	.word	0x43b40000
 800115c:	467ffc00 	.word	0x467ffc00

08001160 <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 8001168:	2201      	movs	r2, #1
 800116a:	2101      	movs	r1, #1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff4a 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001172:	4603      	mov	r3, r0
 8001174:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f814 	bl	80011a8 <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001180:	2100      	movs	r1, #0
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff68 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 8001188:	4603      	mov	r3, r0
 800118a:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 800118c:	89bb      	ldrh	r3, [r7, #12]
 800118e:	4619      	mov	r1, r3
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f834 	bl	80011fe <_ZN7AS5048A21SPITransmitReceive16_Et>
 8001196:	4603      	mov	r3, r0
 8001198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800119c:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 800119e:	897b      	ldrh	r3, [r7, #10]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6918      	ldr	r0, [r3, #16]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	8a9b      	ldrh	r3, [r3, #20]
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	f005 f9f0 	bl	80065b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68d8      	ldr	r0, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	2202      	movs	r2, #2
 80011e2:	f006 fc68 	bl	8007ab6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6918      	ldr	r0, [r3, #16]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	8a9b      	ldrh	r3, [r3, #20]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f005 f9df 	bl	80065b4 <HAL_GPIO_WritePin>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af02      	add	r7, sp, #8
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	b29b      	uxth	r3, r3
 8001210:	b2db      	uxtb	r3, r3
 8001212:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6918      	ldr	r0, [r3, #16]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	8a9b      	ldrh	r3, [r3, #20]
 8001222:	2200      	movs	r2, #0
 8001224:	4619      	mov	r1, r3
 8001226:	f005 f9c5 	bl	80065b4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68d8      	ldr	r0, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f107 0208 	add.w	r2, r7, #8
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	f006 fda8 	bl	8007d92 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6918      	ldr	r0, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8a9b      	ldrh	r3, [r3, #20]
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	f005 f9b1 	bl	80065b4 <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 8001256:	7a3b      	ldrb	r3, [r7, #8]
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21a      	sxth	r2, r3
 800125c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 8001266:	7a7b      	ldrb	r3, [r7, #9]
 8001268:	b29a      	uxth	r2, r3
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	4313      	orrs	r3, r2
 800126e:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001270:	89fb      	ldrh	r3, [r7, #14]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	ed87 0a01 	vstr	s0, [r7, #4]
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	fefb 7a67 	vrintm.f32	s15, s15
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0f * floor(raw_angle / 360.0f);
 80012a8:	edd7 7a00 	vldr	s15, [r7]
 80012ac:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001304 <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012b4:	eeb0 0a47 	vmov.f32	s0, s14
 80012b8:	f7ff ffdf 	bl	800127a <_ZSt5floorf>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001304 <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c8:	ed97 7a00 	vldr	s14, [r7]
 80012cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d0:	edc7 7a03 	vstr	s15, [r7, #12]
	if (wrapped_angle < 0.0f) {
 80012d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d507      	bpl.n	80012f2 <_ZN7Encoder10WrapAngle_Ef+0x56>
		wrapped_angle += 360.0f;
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001304 <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ee:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	43b40000 	.word	0x43b40000

08001308 <_ZN7Encoder14set_zero_angleEv>:

/**
 * @brief Sets the current absolute encoder angle (degrees) as the zero position.
 */
void Encoder::set_zero_angle() {
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	zero_angle_ = angle_;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	605a      	str	r2, [r3, #4]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 8001330:	ed97 0a00 	vldr	s0, [r7]
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ffb1 	bl	800129c <_ZN7Encoder10WrapAngle_Ef>
 800133a:	eef0 7a40 	vmov.f32	s15, s0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	ed93 7a02 	vldr	s14, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff97 	bl	800129c <_ZN7Encoder10WrapAngle_Ef>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 8001388:	ed97 0a00 	vldr	s0, [r7]
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff85 	bl	800129c <_ZN7Encoder10WrapAngle_Ef>
 8001392:	eef0 7a40 	vmov.f32	s15, s0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>:
 * is being transferred to a buffer via DMA.
 * @param[in] adc_counts_u_in Reference pointing to location in ADC buffer for phase U current.
 * @param[in] adc_counts_v_in Reference pointing to location in ADC buffer for phase V current.
 * @param[in] adc_counts_w_in Reference pointing to location in ADC buffer for phase W current.
 */
void CurrentSensor::LinkToADC(volatile uint16_t* adc_counts_u_in, volatile uint16_t* adc_counts_v_in, volatile uint16_t* adc_counts_w_in) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
	adc_counts_u_ = adc_counts_u_in;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	61da      	str	r2, [r3, #28]
	adc_counts_v_ = adc_counts_v_in;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	621a      	str	r2, [r3, #32]
	adc_counts_w_ = adc_counts_w_in;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZN13CurrentSensor12ReadCurrentsEv>:

void CurrentSensor::ReadCurrents() {
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	i_u = (static_cast<float>(*adc_counts_u_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	899b      	ldrh	r3, [r3, #12]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80013fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edd3 7a05 	vldr	s15, [r3, #20]
 8001408:	ee77 6a67 	vsub.f32	s13, s14, s15
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	edc3 7a00 	vstr	s15, [r3]
	i_v = (static_cast<float>(*adc_counts_v_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	899b      	ldrh	r3, [r3, #12]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	ed93 7a06 	vldr	s14, [r3, #24]
 8001456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a01 	vstr	s15, [r3, #4]
	i_w = (static_cast<float>(*adc_counts_w_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	b29b      	uxth	r3, r3
 8001468:	ee07 3a90 	vmov	s15, r3
 800146c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edd3 7a04 	vldr	s15, [r3, #16]
 8001486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001490:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	ed93 7a06 	vldr	s14, [r3, #24]
 800149a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <_ZN5Motor9GetConfigEv>:
 */

#include "motor.hh"
#include "foc_utils.hh"

Motor::MotorConfig_t Motor::GetConfig() {
 80014b0:	b4b0      	push	{r4, r5, r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	return config_;
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4614      	mov	r4, r2
 80014c0:	461d      	mov	r5, r3
 80014c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014c6:	682b      	ldr	r3, [r5, #0]
 80014c8:	6023      	str	r3, [r4, #0]
}
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bcb0      	pop	{r4, r5, r7}
 80014d2:	4770      	bx	lr

080014d4 <_ZN5Motor4InitEv>:

void Motor::Init() {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	// Initialize all the lil bits
	enc_->Init();
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4610      	mov	r0, r2
 80014ea:	4798      	blx	r3
	//	enc_.set_zero_angle(); // startup position is the zero position
	driver_->Init(); // start driver PWM
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 f978 	bl	80017e6 <_ZN11MotorDriver4InitEv>
	last_update_micros_ = GetTickMicros();
 80014f6:	f000 fd31 	bl	8001f5c <_Z13GetTickMicrosv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	631a      	str	r2, [r3, #48]	; 0x30

	// initialization sequence for motor will go here

}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <_ZN5Motor10SetCurrentEfff>:
 * @brief Set target phase currents, set motor to current control mode.
 * @param[in] i_u Target current for phase U, in Amps.
 * @param[in] i_v Target current for phase V, in Amps.
 * @param[in] i_w Target current for phase W, in Amps.
 */
void Motor::SetCurrent(float i_u, float i_v, float i_w) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	ed87 0a02 	vstr	s0, [r7, #8]
 8001514:	edc7 0a01 	vstr	s1, [r7, #4]
 8001518:	ed87 1a00 	vstr	s2, [r7]
	mode_ = CURRENT_CONTROL;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	751a      	strb	r2, [r3, #20]
	// Simple open loop control with voltage setpoints.
	v_u_cmd_ = i_u * config_.phase_resistance;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	ed93 7a01 	vldr	s14, [r3, #4]
 8001528:	edd7 7a02 	vldr	s15, [r7, #8]
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	v_v_cmd_ = i_v * config_.phase_resistance;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	ed93 7a01 	vldr	s14, [r3, #4]
 800153c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	v_w_cmd_ = i_w * config_.phase_resistance;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001550:	edd7 7a00 	vldr	s15, [r7]
 8001554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_ZN5Motor9SetTorqueEf>:
/**
 * @brief Set target quadrature current magnitude (torque) and set motor to torque
 * control mode.
 * @param[in] i_q Target quadrature current, in Amps.
 */
void Motor::SetTorque(float i_q) {
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	ed87 0a00 	vstr	s0, [r7]
	mode_ = TORQUE_CONTROL;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	751a      	strb	r2, [r3, #20]
	i_q_cmd_ = CONSTRAIN(i_q, -config_.current_limit, config_.current_limit);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001582:	eef1 7a67 	vneg.f32	s15, s15
 8001586:	ed97 7a00 	vldr	s14, [r7]
 800158a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	d505      	bpl.n	80015a0 <_ZN5Motor9SetTorqueEf+0x36>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	edd3 7a03 	vldr	s15, [r3, #12]
 800159a:	eef1 7a67 	vneg.f32	s15, s15
 800159e:	e00f      	b.n	80015c0 <_ZN5Motor9SetTorqueEf+0x56>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015a6:	ed97 7a00 	vldr	s14, [r7]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	dd03      	ble.n	80015bc <_ZN5Motor9SetTorqueEf+0x52>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80015ba:	e001      	b.n	80015c0 <_ZN5Motor9SetTorqueEf+0x56>
 80015bc:	edd7 7a00 	vldr	s15, [r7]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_ZN5Motor6UpdateEb>:
/**
 * @brief Runs the motor control loop. Slow / blocking functions can be optionally
 * run using a separate, slower control loop with a lower frequency.
 * @param[in] fast_only Run slow updates in a separate loop.
 */
void Motor::Update(bool fast_only) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
	uint32_t curr_time_micros = GetTickMicros();
 80015e0:	f000 fcbc 	bl	8001f5c <_Z13GetTickMicrosv>
 80015e4:	60f8      	str	r0, [r7, #12]
	float ms_since_last_update = (static_cast<float>(curr_time_micros - last_update_micros_)) / 1000.0f;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f6:	eddf 6a59 	vldr	s13, [pc, #356]	; 800175c <_ZN5Motor6UpdateEb+0x188>
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	edc7 7a02 	vstr	s15, [r7, #8]

	if (!fast_only) {
 8001602:	78fb      	ldrb	r3, [r7, #3]
 8001604:	f083 0301 	eor.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d002      	beq.n	8001614 <_ZN5Motor6UpdateEb+0x40>
		SlowUpdate();
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f8a6 	bl	8001760 <_ZN5Motor10SlowUpdateEv>
	}

	// Read the current sensors
	csense_->ReadCurrents();
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fed9 	bl	80013d0 <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_meas_ = csense_->i_u;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c
	i_v_meas_ = csense_->i_v;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	661a      	str	r2, [r3, #96]	; 0x60
	i_w_meas_ = csense_->i_w;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	665a      	str	r2, [r3, #100]	; 0x64

	switch(mode_) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7d1b      	ldrb	r3, [r3, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d061      	beq.n	8001708 <_ZN5Motor6UpdateEb+0x134>
 8001644:	2b00      	cmp	r3, #0
 8001646:	f2c0 8082 	blt.w	800174e <_ZN5Motor6UpdateEb+0x17a>
 800164a:	3b01      	subs	r3, #1
 800164c:	2b02      	cmp	r3, #2
 800164e:	d87e      	bhi.n	800174e <_ZN5Motor6UpdateEb+0x17a>
		// Set velocity to control position.
	case VELOCITY_CONTROL:
		// Set torque to control velocity.
	case TORQUE_CONTROL:
		// Use DQZ transform to transform measured phase currents into rotating reference frame.
		TransFwdDQZ(
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
				theta_meas_, i_u_meas_, i_v_meas_, i_w_meas_, // params in
				i_d_meas_, i_q_meas_, i_z_meas_); // params out
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3358      	adds	r3, #88	; 0x58
		TransFwdDQZ(
 8001678:	461a      	mov	r2, r3
 800167a:	eef0 1a46 	vmov.f32	s3, s12
 800167e:	eeb0 1a66 	vmov.f32	s2, s13
 8001682:	eef0 0a47 	vmov.f32	s1, s14
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	f000 fccb 	bl	8002024 <_Z11TransFwdDQZffffRfS_S_>

		// Set voltages in rotating reference frame to control currents in rotating reference frame.
		v_d_cmd_ = 0.0f; // TODO: add PID controller for i_d error for true FOC control.
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	669a      	str	r2, [r3, #104]	; 0x68
		v_q_cmd_ = pid_torque_->Update(i_q_cmd_ - i_q_meas_, ms_since_last_update);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80016a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016aa:	edd7 0a02 	vldr	s1, [r7, #8]
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	4610      	mov	r0, r2
 80016b4:	f000 fb30 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		v_z_cmd_ = 0;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	671a      	str	r2, [r3, #112]	; 0x70

		// Convert rotating reference frame voltages back into stator voltages.
		TransRevDQZ(
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
				theta_meas_, v_d_cmd_, v_q_cmd_, v_z_cmd_, // params in
				v_u_cmd_, v_v_cmd_, v_w_cmd_); // params out
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	337c      	adds	r3, #124	; 0x7c
		TransRevDQZ(
 80016f2:	461a      	mov	r2, r3
 80016f4:	eef0 1a46 	vmov.f32	s3, s12
 80016f8:	eeb0 1a66 	vmov.f32	s2, s13
 80016fc:	eef0 0a47 	vmov.f32	s1, s14
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	f000 fd34 	bl	8002170 <_Z11TransRevDQZffffRfS_S_>

	case CURRENT_CONTROL:
		// Set voltage (duty cycle) to control current.
		// Open-loop PWM duty cycle control.
		driver_->SetDutyCycle(
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699a      	ldr	r2, [r3, #24]
			v_u_cmd_ / config_.power_supply_voltage,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 8001718:	eec7 6a27 	vdiv.f32	s13, s14, s15
			v_v_cmd_ / config_.power_supply_voltage,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 8001728:	ee87 6a27 	vdiv.f32	s12, s14, s15
			v_w_cmd_ / config_.power_supply_voltage);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 8001738:	eec7 5a27 	vdiv.f32	s11, s14, s15
 800173c:	eeb0 1a65 	vmov.f32	s2, s11
 8001740:	eef0 0a46 	vmov.f32	s1, s12
 8001744:	eeb0 0a66 	vmov.f32	s0, s13
 8001748:	4610      	mov	r0, r2
 800174a:	f000 f884 	bl	8001856 <_ZN11MotorDriver12SetDutyCycleEfff>
	}

	// Save as a snack for later.
	last_update_micros_ = curr_time_micros;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	631a      	str	r2, [r3, #48]	; 0x30

}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	447a0000 	.word	0x447a0000

08001760 <_ZN5Motor10SlowUpdateEv>:

/**
 * @brief Control loop for slower / blocking functions. Can be executed separately to keep the
 * main control loop running fast.
 */
void Motor::SlowUpdate() {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	// Read the encoder
	enc_->Update();
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3304      	adds	r3, #4
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4610      	mov	r0, r2
 8001778:	4798      	blx	r3
	theta_meas_ = NormalizeAngle(ElectricalAngle(enc_->get_angle(), config_.num_poles));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fde4 	bl	800134c <_ZN7Encoder9get_angleEv>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f000 fd91 	bl	80022b8 <_Z15ElectricalAngleft>
 8001796:	eef0 7a40 	vmov.f32	s15, s0
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f000 fda3 	bl	80022e8 <_Z14NormalizeAnglef>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>:
void MotorDriver::LinkToPWM(
	TIM_HandleTypeDef * timer,
	uint32_t timer_u_channel_id,
	uint32_t timer_v_channel_id,
	uint32_t timer_w_channel_id)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	timer_ = timer;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	619a      	str	r2, [r3, #24]
	timer_u_channel_id_ = timer_u_channel_id;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	61da      	str	r2, [r3, #28]
	timer_v_channel_id_ = timer_v_channel_id;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	621a      	str	r2, [r3, #32]
	timer_w_channel_id_ = timer_w_channel_id;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017da:	bf00      	nop
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <_ZN11MotorDriver4InitEv>:

/**
 * @brief Start PWM timers.
 */
void MotorDriver::Init() {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_, timer_u_channel_id_); // get the party started
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699a      	ldr	r2, [r3, #24]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	4619      	mov	r1, r3
 80017f8:	4610      	mov	r0, r2
 80017fa:	f006 ffcf 	bl	800879c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_u_channel_id_); // get the (complementary) party started
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f008 f93f 	bl	8009a8c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_v_channel_id_); // get the party started
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	699a      	ldr	r2, [r3, #24]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4619      	mov	r1, r3
 8001818:	4610      	mov	r0, r2
 800181a:	f006 ffbf 	bl	800879c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_v_channel_id_); // get the (complementary) party started
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699a      	ldr	r2, [r3, #24]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f008 f92f 	bl	8009a8c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_w_channel_id_); // get the party started
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699a      	ldr	r2, [r3, #24]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	4619      	mov	r1, r3
 8001838:	4610      	mov	r0, r2
 800183a:	f006 ffaf 	bl	800879c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_w_channel_id_); // get the (complementary) party started
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699a      	ldr	r2, [r3, #24]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4610      	mov	r0, r2
 800184a:	f008 f91f 	bl	8009a8c <HAL_TIMEx_PWMN_Start>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_ZN11MotorDriver12SetDutyCycleEfff>:

/**
 *
 */
void MotorDriver::SetDutyCycle(float duty_u, float duty_v, float duty_w) {
 8001856:	b480      	push	{r7}
 8001858:	b085      	sub	sp, #20
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001862:	edc7 0a01 	vstr	s1, [r7, #4]
 8001866:	ed87 1a00 	vstr	s2, [r7]
	duty_u_ = CONSTRAIN(duty_u, duty_min_, duty_max_);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001870:	ed97 7a02 	vldr	s14, [r7, #8]
 8001874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	d502      	bpl.n	8001884 <_ZN11MotorDriver12SetDutyCycleEfff+0x2e>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	e00d      	b.n	80018a0 <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	edd3 7a03 	vldr	s15, [r3, #12]
 800188a:	ed97 7a02 	vldr	s14, [r7, #8]
 800188e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	dd02      	ble.n	800189e <_ZN11MotorDriver12SetDutyCycleEfff+0x48>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	e000      	b.n	80018a0 <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	6013      	str	r3, [r2, #0]
	duty_v_ = CONSTRAIN(duty_v, duty_min_, duty_max_);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80018aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	d502      	bpl.n	80018be <_ZN11MotorDriver12SetDutyCycleEfff+0x68>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	e00d      	b.n	80018da <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80018c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd02      	ble.n	80018d8 <_ZN11MotorDriver12SetDutyCycleEfff+0x82>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	e000      	b.n	80018da <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	6053      	str	r3, [r2, #4]
	duty_w_ = CONSTRAIN(duty_w, duty_min_, duty_max_);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e4:	ed97 7a00 	vldr	s14, [r7]
 80018e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f0:	d502      	bpl.n	80018f8 <_ZN11MotorDriver12SetDutyCycleEfff+0xa2>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	e00d      	b.n	8001914 <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80018fe:	ed97 7a00 	vldr	s14, [r7]
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dd02      	ble.n	8001912 <_ZN11MotorDriver12SetDutyCycleEfff+0xbc>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	e000      	b.n	8001914 <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6093      	str	r3, [r2, #8]

	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_u_channel_id_, static_cast<uint16_t>(duty_u_ * pulse_max_));
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d114      	bne.n	800194a <_ZN11MotorDriver12SetDutyCycleEfff+0xf4>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	8a9b      	ldrh	r3, [r3, #20]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
 8001948:	e077      	b.n	8001a3a <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	2b04      	cmp	r3, #4
 8001950:	d114      	bne.n	800197c <_ZN11MotorDriver12SetDutyCycleEfff+0x126>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	ed93 7a00 	vldr	s14, [r3]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8a9b      	ldrh	r3, [r3, #20]
 800195c:	ee07 3a90 	vmov	s15, r3
 8001960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800196c:	ee17 3a90 	vmov	r3, s15
 8001970:	b29a      	uxth	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
 800197a:	e05e      	b.n	8001a3a <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d114      	bne.n	80019ae <_ZN11MotorDriver12SetDutyCycleEfff+0x158>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8a9b      	ldrh	r3, [r3, #20]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800199e:	ee17 3a90 	vmov	r3, s15
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80019ac:	e045      	b.n	8001a3a <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b0c      	cmp	r3, #12
 80019b4:	d114      	bne.n	80019e0 <_ZN11MotorDriver12SetDutyCycleEfff+0x18a>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	ed93 7a00 	vldr	s14, [r3]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8a9b      	ldrh	r3, [r3, #20]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d0:	ee17 3a90 	vmov	r3, s15
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40
 80019de:	e02c      	b.n	8001a3a <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d114      	bne.n	8001a12 <_ZN11MotorDriver12SetDutyCycleEfff+0x1bc>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8a9b      	ldrh	r3, [r3, #20]
 80019f2:	ee07 3a90 	vmov	s15, r3
 80019f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a02:	ee17 3a90 	vmov	r3, s15
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a10:	e013      	b.n	8001a3a <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8a9b      	ldrh	r3, [r3, #20]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2c:	ee17 3a90 	vmov	r3, s15
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_v_channel_id_, static_cast<uint16_t>(duty_v_ * pulse_max_));
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d114      	bne.n	8001a6c <_ZN11MotorDriver12SetDutyCycleEfff+0x216>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8a9b      	ldrh	r3, [r3, #20]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5c:	ee17 3a90 	vmov	r3, s15
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
 8001a6a:	e077      	b.n	8001b5c <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d114      	bne.n	8001a9e <_ZN11MotorDriver12SetDutyCycleEfff+0x248>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8a9b      	ldrh	r3, [r3, #20]
 8001a7e:	ee07 3a90 	vmov	s15, r3
 8001a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a8e:	ee17 3a90 	vmov	r3, s15
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001a9c:	e05e      	b.n	8001b5c <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d114      	bne.n	8001ad0 <_ZN11MotorDriver12SetDutyCycleEfff+0x27a>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8a9b      	ldrh	r3, [r3, #20]
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac0:	ee17 3a90 	vmov	r3, s15
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ace:	e045      	b.n	8001b5c <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d114      	bne.n	8001b02 <_ZN11MotorDriver12SetDutyCycleEfff+0x2ac>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8a9b      	ldrh	r3, [r3, #20]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af2:	ee17 3a90 	vmov	r3, s15
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
 8001b00:	e02c      	b.n	8001b5c <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d114      	bne.n	8001b34 <_ZN11MotorDriver12SetDutyCycleEfff+0x2de>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8a9b      	ldrh	r3, [r3, #20]
 8001b14:	ee07 3a90 	vmov	s15, r3
 8001b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 3a90 	vmov	r3, s15
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	659a      	str	r2, [r3, #88]	; 0x58
 8001b32:	e013      	b.n	8001b5c <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8a9b      	ldrh	r3, [r3, #20]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b4e:	ee17 3a90 	vmov	r3, s15
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d114      	bne.n	8001b8e <_ZN11MotorDriver12SetDutyCycleEfff+0x338>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8a9b      	ldrh	r3, [r3, #20]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7e:	ee17 3a90 	vmov	r3, s15
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b8c:	e077      	b.n	8001c7e <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d114      	bne.n	8001bc0 <_ZN11MotorDriver12SetDutyCycleEfff+0x36a>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8a9b      	ldrh	r3, [r3, #20]
 8001ba0:	ee07 3a90 	vmov	s15, r3
 8001ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb0:	ee17 3a90 	vmov	r3, s15
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bbe:	e05e      	b.n	8001c7e <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d114      	bne.n	8001bf2 <_ZN11MotorDriver12SetDutyCycleEfff+0x39c>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8a9b      	ldrh	r3, [r3, #20]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001bf0:	e045      	b.n	8001c7e <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d114      	bne.n	8001c24 <_ZN11MotorDriver12SetDutyCycleEfff+0x3ce>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8a9b      	ldrh	r3, [r3, #20]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c14:	ee17 3a90 	vmov	r3, s15
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c22:	e02c      	b.n	8001c7e <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d114      	bne.n	8001c56 <_ZN11MotorDriver12SetDutyCycleEfff+0x400>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8a9b      	ldrh	r3, [r3, #20]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c46:	ee17 3a90 	vmov	r3, s15
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001c54:	e013      	b.n	8001c7e <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8a9b      	ldrh	r3, [r3, #20]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c70:	ee17 3a90 	vmov	r3, s15
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_ZN13PIDControllerC1Efffff>:
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] ramp_in Maximum ramp (derivative) of output.
 * @param[in] limit_in Maximum value of output.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, float ramp_in = 0.0f, float limit_in = kDefaultLimit)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6178      	str	r0, [r7, #20]
 8001c94:	ed87 0a04 	vstr	s0, [r7, #16]
 8001c98:	edc7 0a03 	vstr	s1, [r7, #12]
 8001c9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ca0:	edc7 1a01 	vstr	s3, [r7, #4]
 8001ca4:	ed87 2a00 	vstr	s4, [r7]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	609a      	str	r2, [r3, #8]
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
 8001cba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	db01      	blt.n	8001ccc <_ZN13PIDControllerC1Efffff+0x40>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	e001      	b.n	8001cd0 <_ZN13PIDControllerC1Efffff+0x44>
 8001ccc:	f04f 0300 	mov.w	r3, #0
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	60d3      	str	r3, [r2, #12]
 8001cd4:	edd7 7a00 	vldr	s15, [r7]
 8001cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	dd01      	ble.n	8001ce6 <_ZN13PIDControllerC1Efffff+0x5a>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	e000      	b.n	8001ce8 <_ZN13PIDControllerC1Efffff+0x5c>
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <_ZN13PIDControllerC1Efffff+0x88>)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	6113      	str	r3, [r2, #16]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	4618      	mov	r0, r3
 8001d08:	371c      	adds	r7, #28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	447a0000 	.word	0x447a0000

08001d18 <_ZN13PIDController6UpdateEff>:
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 * @retval Calculated output response of PID controller.
 */
float PIDController::Update(float error, float ms_since_last_update) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	; 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d24:	edc7 0a01 	vstr	s1, [r7, #4]
	if (ms_since_last_update <= 0.0f) {
 8001d28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	d802      	bhi.n	8001d3c <_ZN13PIDController6UpdateEff+0x24>
		return 0; // only allow updates with positive time steps (avoid errors for i, d)
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e0dc      	b.n	8001ef6 <_ZN13PIDController6UpdateEff+0x1de>
	}

	float p = k_p * error;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4a:	edc7 7a06 	vstr	s15, [r7, #24]
	float i = i_error_ + k_i * ((error + prev_error_)*ms_since_last_update/2); // Tustin's method (trapezoidal integration)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	ed93 7a05 	vldr	s14, [r3, #20]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	ed93 6a07 	vldr	s12, [r3, #28]
 8001d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d70:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d80:	edc7 7a05 	vstr	s15, [r7, #20]
	i = CONSTRAIN(i, -limit, limit); // integral anti-windup
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d8a:	eef1 7a67 	vneg.f32	s15, s15
 8001d8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d505      	bpl.n	8001da8 <_ZN13PIDController6UpdateEff+0x90>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da2:	eef1 7a67 	vneg.f32	s15, s15
 8001da6:	e00f      	b.n	8001dc8 <_ZN13PIDController6UpdateEff+0xb0>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd03      	ble.n	8001dc4 <_ZN13PIDController6UpdateEff+0xac>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dc2:	e001      	b.n	8001dc8 <_ZN13PIDController6UpdateEff+0xb0>
 8001dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dc8:	edc7 7a05 	vstr	s15, [r7, #20]
	float d = k_d * (error - prev_error_) / ms_since_last_update;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dd8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ddc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001de0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001de4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	edc7 7a04 	vstr	s15, [r7, #16]

	float output = CONSTRAIN(p + i + d, -limit, limit); // sum and constrain output
 8001df0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001df4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e0a:	eef1 7a67 	vneg.f32	s15, s15
 8001e0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d505      	bpl.n	8001e24 <_ZN13PIDController6UpdateEff+0x10c>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e1e:	eef1 7a67 	vneg.f32	s15, s15
 8001e22:	e01f      	b.n	8001e64 <_ZN13PIDController6UpdateEff+0x14c>
 8001e24:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e46:	dd03      	ble.n	8001e50 <_ZN13PIDController6UpdateEff+0x138>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e4e:	e009      	b.n	8001e64 <_ZN13PIDController6UpdateEff+0x14c>
 8001e50:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e64:	edc7 7a07 	vstr	s15, [r7, #28]

	if (ramp > 0.0f) { // output ramp is defined
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	dd34      	ble.n	8001ee2 <_ZN13PIDController6UpdateEff+0x1ca>
		if (output - prev_output_ > ramp) {
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	dd0a      	ble.n	8001eac <_ZN13PIDController6UpdateEff+0x194>
			output = prev_output_ + ramp; // rail to positive ramp
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea6:	edc7 7a07 	vstr	s15, [r7, #28]
 8001eaa:	e01a      	b.n	8001ee2 <_ZN13PIDController6UpdateEff+0x1ca>
		} else if (output - prev_output_ < -ramp) {
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	edd3 7a06 	vldr	s15, [r3, #24]
 8001eb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001eb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ec0:	eef1 7a67 	vneg.f32	s15, s15
 8001ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d509      	bpl.n	8001ee2 <_ZN13PIDController6UpdateEff+0x1ca>
			output = prev_output_ - ramp; // rail to negative ramp
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ede:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	// save stuff for next round
	prev_error_ = error;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	61da      	str	r2, [r3, #28]
	prev_output_ = output;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	619a      	str	r2, [r3, #24]
	i_error_ = i;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	615a      	str	r2, [r3, #20]

	return output;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
}
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eeb0 0a67 	vmov.f32	s0, s15
 8001efe:	3724      	adds	r7, #36	; 0x24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	i_error_ = 0;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
	prev_error_ = 0;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
	prev_output_ = 0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f3e:	edc7 0a00 	vstr	s1, [r7]
 8001f42:	edd7 0a00 	vldr	s1, [r7]
 8001f46:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f4a:	f008 ffb7 	bl	800aebc <fmodf>
 8001f4e:	eef0 7a40 	vmov.f32	s15, s0
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <_Z13GetTickMicrosv>:

/**
 * @brief Utility function that returns the current time in microseconds.
 * @retval Current uptime, in microseconds.
 */
uint32_t GetTickMicros() {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	return HAL_GetTick() * 1000 - SysTick->VAL / ((SysTick->LOAD + 1) / 1000);
 8001f60:	f003 f8b0 	bl	80050c4 <HAL_GetTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f6a:	fb03 f202 	mul.w	r2, r3, r2
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_Z13GetTickMicrosv+0x30>)
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <_Z13GetTickMicrosv+0x30>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <_Z13GetTickMicrosv+0x34>)
 8001f7a:	fba0 0303 	umull	r0, r3, r0, r3
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f84:	1ad3      	subs	r3, r2, r3
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <_Z8DegToRadf>:
/**
 * @brief Helper function that converts an angle in degrees to an angle in radians.
 * @param[in] Angle value in degrees.
 * @retval Angle value in radians.
 */
float DegToRad(float deg) {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	return deg / 360.0f * 2.0f * PI;
 8001f9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001fa2:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001fc4 <_Z8DegToRadf+0x30>
 8001fa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001faa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fae:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fc8 <_Z8DegToRadf+0x34>
 8001fb2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	43b40000 	.word	0x43b40000
 8001fc8:	40490fdb 	.word	0x40490fdb

08001fcc <_Z4sindf>:
/**
 * @brief Returns the sine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Sine of theta.
 */
float sind(float theta) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_sin_f32(DegToRad(theta));
 8001fd6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fda:	f7ff ffdb 	bl	8001f94 <_Z8DegToRadf>
 8001fde:	eef0 7a40 	vmov.f32	s15, s0
 8001fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe6:	f008 feb7 	bl	800ad58 <arm_sin_f32>
 8001fea:	eef0 7a40 	vmov.f32	s15, s0
}
 8001fee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <_Z4cosdf>:
/**
 * @brief Returns thecosine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Cosine of theta.
 */
float cosd(float theta) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_cos_f32(DegToRad(theta));
 8002002:	ed97 0a01 	vldr	s0, [r7, #4]
 8002006:	f7ff ffc5 	bl	8001f94 <_Z8DegToRadf>
 800200a:	eef0 7a40 	vmov.f32	s15, s0
 800200e:	eeb0 0a67 	vmov.f32	s0, s15
 8002012:	f008 fee5 	bl	800ade0 <arm_cos_f32>
 8002016:	eef0 7a40 	vmov.f32	s15, s0
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_Z11TransFwdDQZffffRfS_S_>:
 * @param[out] i_z Zero current magnitude in rotating reference frame.
 */
void TransFwdDQZ(
		float theta, float i_u, float i_v, float i_w,
		float& i_d, float& i_q, float& i_z)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	ed2d 8b02 	vpush	{d8}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002032:	edc7 0a06 	vstr	s1, [r7, #24]
 8002036:	ed87 1a05 	vstr	s2, [r7, #20]
 800203a:	edc7 1a04 	vstr	s3, [r7, #16]
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
	i_d = sqrtf(2.0f/3.0f) * (cosd(theta)*i_u + cosd(theta-120.0f)*i_v + cosd(theta+120.0f)*i_w);
 8002044:	ed97 0a07 	vldr	s0, [r7, #28]
 8002048:	f7ff ffd6 	bl	8001ff8 <_Z4cosdf>
 800204c:	eeb0 7a40 	vmov.f32	s14, s0
 8002050:	edd7 7a06 	vldr	s15, [r7, #24]
 8002054:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002058:	edd7 7a07 	vldr	s15, [r7, #28]
 800205c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002164 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8002060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	f7ff ffc6 	bl	8001ff8 <_Z4cosdf>
 800206c:	eeb0 7a40 	vmov.f32	s14, s0
 8002070:	edd7 7a05 	vldr	s15, [r7, #20]
 8002074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002078:	ee38 8a27 	vadd.f32	s16, s16, s15
 800207c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002080:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002164 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8002084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002088:	eeb0 0a67 	vmov.f32	s0, s15
 800208c:	f7ff ffb4 	bl	8001ff8 <_Z4cosdf>
 8002090:	eeb0 7a40 	vmov.f32	s14, s0
 8002094:	edd7 7a04 	vldr	s15, [r7, #16]
 8002098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209c:	ee78 7a27 	vadd.f32	s15, s16, s15
 80020a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002168 <_Z11TransFwdDQZffffRfS_S_+0x144>
 80020a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	edc3 7a00 	vstr	s15, [r3]
	i_q = sqrtf(2.0f/3.0f) * (-sind(theta)*i_u - sind(theta-120.0f)*i_v - sind(theta+120.0f)*i_w);
 80020ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80020b2:	f7ff ff8b 	bl	8001fcc <_Z4sindf>
 80020b6:	eef0 7a40 	vmov.f32	s15, s0
 80020ba:	eeb1 7a67 	vneg.f32	s14, s15
 80020be:	edd7 7a06 	vldr	s15, [r7, #24]
 80020c2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80020c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002164 <_Z11TransFwdDQZffffRfS_S_+0x140>
 80020ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020d2:	eeb0 0a67 	vmov.f32	s0, s15
 80020d6:	f7ff ff79 	bl	8001fcc <_Z4sindf>
 80020da:	eeb0 7a40 	vmov.f32	s14, s0
 80020de:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80020ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002164 <_Z11TransFwdDQZffffRfS_S_+0x140>
 80020f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	f7ff ff67 	bl	8001fcc <_Z4sindf>
 80020fe:	eeb0 7a40 	vmov.f32	s14, s0
 8002102:	edd7 7a04 	vldr	s15, [r7, #16]
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800210e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002168 <_Z11TransFwdDQZffffRfS_S_+0x144>
 8002112:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	edc3 7a00 	vstr	s15, [r3]
	i_z = sqrtf(2.0f/3.0f) * (sqrtf(2.0f)/2.0f*i_u + sqrtf(2.0f)/2.0f*i_v + sqrtf(2.0f)/2.0f*i_w);
 800211c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002120:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800216c <_Z11TransFwdDQZffffRfS_S_+0x148>
 8002124:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002128:	edd7 7a05 	vldr	s15, [r7, #20]
 800212c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800216c <_Z11TransFwdDQZffffRfS_S_+0x148>
 8002130:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002134:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002138:	edd7 7a04 	vldr	s15, [r7, #16]
 800213c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800216c <_Z11TransFwdDQZffffRfS_S_+0x148>
 8002140:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002168 <_Z11TransFwdDQZffffRfS_S_+0x144>
 800214c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a00 	vstr	s15, [r3]
}
 8002156:	bf00      	nop
 8002158:	3720      	adds	r7, #32
 800215a:	46bd      	mov	sp, r7
 800215c:	ecbd 8b02 	vpop	{d8}
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	42f00000 	.word	0x42f00000
 8002168:	3f5105ec 	.word	0x3f5105ec
 800216c:	3f3504f3 	.word	0x3f3504f3

08002170 <_Z11TransRevDQZffffRfS_S_>:
 * @param[out] i_w Current in Z direction in XYZ reference frame.
 */
void TransRevDQZ(
		float theta, float i_d, float i_q, float i_z,
		float& i_u, float& i_v, float& i_w)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	ed2d 8b02 	vpush	{d8}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	ed87 0a07 	vstr	s0, [r7, #28]
 800217e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002182:	ed87 1a05 	vstr	s2, [r7, #20]
 8002186:	edc7 1a04 	vstr	s3, [r7, #16]
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
	i_u = sqrtf(2.0f/3.0f) * (cosd(theta)*i_d - sind(theta)*i_q + sqrtf(2.0f)/2.0f*i_z);
 8002190:	ed97 0a07 	vldr	s0, [r7, #28]
 8002194:	f7ff ff30 	bl	8001ff8 <_Z4cosdf>
 8002198:	eeb0 7a40 	vmov.f32	s14, s0
 800219c:	edd7 7a06 	vldr	s15, [r7, #24]
 80021a0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80021a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80021a8:	f7ff ff10 	bl	8001fcc <_Z4sindf>
 80021ac:	eeb0 7a40 	vmov.f32	s14, s0
 80021b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	ee38 7a67 	vsub.f32	s14, s16, s15
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80022ac <_Z11TransRevDQZffffRfS_S_+0x13c>
 80021c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021cc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80022b0 <_Z11TransRevDQZffffRfS_S_+0x140>
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	edc3 7a00 	vstr	s15, [r3]
	i_v = sqrtf(2.0f/3.0f) * (cosd(theta-120.0f)*i_d - sind(theta-120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 80021da:	edd7 7a07 	vldr	s15, [r7, #28]
 80021de:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80022b4 <_Z11TransRevDQZffffRfS_S_+0x144>
 80021e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ea:	f7ff ff05 	bl	8001ff8 <_Z4cosdf>
 80021ee:	eeb0 7a40 	vmov.f32	s14, s0
 80021f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80021f6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80021fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80021fe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80022b4 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	f7ff fedf 	bl	8001fcc <_Z4sindf>
 800220e:	eeb0 7a40 	vmov.f32	s14, s0
 8002212:	edd7 7a05 	vldr	s15, [r7, #20]
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	ee38 7a67 	vsub.f32	s14, s16, s15
 800221e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002222:	eddf 6a22 	vldr	s13, [pc, #136]	; 80022ac <_Z11TransRevDQZffffRfS_S_+0x13c>
 8002226:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80022b0 <_Z11TransRevDQZffffRfS_S_+0x140>
 8002232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	edc3 7a00 	vstr	s15, [r3]
	i_w = sqrtf(2.0f/3.0f) * (cosd(theta+120.0f)*i_d - sind(theta+120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 800223c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002240:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80022b4 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002244:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002248:	eeb0 0a67 	vmov.f32	s0, s15
 800224c:	f7ff fed4 	bl	8001ff8 <_Z4cosdf>
 8002250:	eeb0 7a40 	vmov.f32	s14, s0
 8002254:	edd7 7a06 	vldr	s15, [r7, #24]
 8002258:	ee27 8a27 	vmul.f32	s16, s14, s15
 800225c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002260:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80022b4 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	f7ff feae 	bl	8001fcc <_Z4sindf>
 8002270:	eeb0 7a40 	vmov.f32	s14, s0
 8002274:	edd7 7a05 	vldr	s15, [r7, #20]
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002280:	edd7 7a04 	vldr	s15, [r7, #16]
 8002284:	eddf 6a09 	vldr	s13, [pc, #36]	; 80022ac <_Z11TransRevDQZffffRfS_S_+0x13c>
 8002288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800228c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002290:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80022b0 <_Z11TransRevDQZffffRfS_S_+0x140>
 8002294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	edc3 7a00 	vstr	s15, [r3]
}
 800229e:	bf00      	nop
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	ecbd 8b02 	vpop	{d8}
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	3f3504f3 	.word	0x3f3504f3
 80022b0:	3f5105ec 	.word	0x3f5105ec
 80022b4:	42f00000 	.word	0x42f00000

080022b8 <_Z15ElectricalAngleft>:
 * represents 360 degrees * num poles rotation of the electrical angle.
 * @param[in] shaft_angle Shaft angle, in degrees.
 * @param[in] num_pole_pairs Number of pole pairs in the motor.
 * @retval Electrical angle, in degrees.
 */
float ElectricalAngle(float shaft_angle, uint16_t num_pole_pairs) {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	ed87 0a01 	vstr	s0, [r7, #4]
 80022c2:	4603      	mov	r3, r0
 80022c4:	807b      	strh	r3, [r7, #2]
	return shaft_angle * static_cast<float>(num_pole_pairs);
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80022d8:	eeb0 0a67 	vmov.f32	s0, s15
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <_Z14NormalizeAnglef>:
/**
 * @brief Normalizes the value of an angle in degrees to between 0-360 degrees.
 * @param[in] angle Angle to be normalized, in degrees.
 * @retval Normalized angle value between 0 and 360 degrees.
 */
float NormalizeAngle(float angle) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	ed87 0a01 	vstr	s0, [r7, #4]
	float normalized_angle = fmod(angle, 360.0f);
 80022f2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800232c <_Z14NormalizeAnglef+0x44>
 80022f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80022fa:	f7ff fe1b 	bl	8001f34 <_ZSt4fmodff>
 80022fe:	ed87 0a03 	vstr	s0, [r7, #12]
	return normalized_angle > 0 ? normalized_angle : normalized_angle + 360.0f;
 8002302:	edd7 7a03 	vldr	s15, [r7, #12]
 8002306:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230e:	dd02      	ble.n	8002316 <_Z14NormalizeAnglef+0x2e>
 8002310:	edd7 7a03 	vldr	s15, [r7, #12]
 8002314:	e005      	b.n	8002322 <_Z14NormalizeAnglef+0x3a>
 8002316:	edd7 7a03 	vldr	s15, [r7, #12]
 800231a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800232c <_Z14NormalizeAnglef+0x44>
 800231e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002322:	eeb0 0a67 	vmov.f32	s0, s15
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	43b40000 	.word	0x43b40000

08002330 <_ZN13CurrentSensorC1Etfff>:
	float i_u{0}; // [A] current measured by current sensor
	float i_v{0};
	float i_w{0};

	// Consturctor
	CurrentSensor(
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6178      	str	r0, [r7, #20]
 8002338:	460b      	mov	r3, r1
 800233a:	ed87 0a03 	vstr	s0, [r7, #12]
 800233e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002342:	ed87 1a01 	vstr	s2, [r7, #4]
 8002346:	827b      	strh	r3, [r7, #18]
		float adc_offset_volts_in,
		float adc_gain_in)
		: adc_max_counts_(adc_max_counts_in)
		, adc_max_volts_(adc_max_volts_in)
		, adc_offset_volts_(adc_offset_volts_in)
		, adc_gain_(adc_gain_in){};
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	8a7a      	ldrh	r2, [r7, #18]
 8002364:	819a      	strh	r2, [r3, #12]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	; 0x24
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <_ZN11MotorDriverC1Efft>:

	/**
	 * @brief MotorDriver constructor.
	 * @param[in] duty_max_in Float containing maximum allowable duty cycle.
	 */
	MotorDriver(float duty_max_in, float duty_min_in, uint16_t pulse_max_in)
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80023a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
		: duty_max_(duty_max_in)
		, duty_min_(duty_min_in)
		, pulse_max_(pulse_max_in){};
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	829a      	strh	r2, [r3, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>:
	/**
	 * @brief Constructor for Motor object.
	 * @param[in] driver MotorDriver for motor.
	 * @param[in] enc Absolute position encoder for motor.
	 */
	Motor(
 80023fc:	b084      	sub	sp, #16
 80023fe:	b4b0      	push	{r4, r5, r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	f107 001c 	add.w	r0, r7, #28
 800240a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		PIDController * pid_torque)
		: config_(config)
		, driver_(driver)
		, enc_(enc)
		, csense_(csense)
		, pid_torque_(pid_torque) {};
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	461d      	mov	r5, r3
 8002412:	f107 041c 	add.w	r4, r7, #28
 8002416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	602b      	str	r3, [r5, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	751a      	strb	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002428:	619a      	str	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800242e:	61da      	str	r2, [r3, #28]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002434:	621a      	str	r2, [r3, #32]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	629a      	str	r2, [r3, #40]	; 0x28
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	62da      	str	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	649a      	str	r2, [r3, #72]	; 0x48
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	651a      	str	r2, [r3, #80]	; 0x50
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	655a      	str	r2, [r3, #84]	; 0x54
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	659a      	str	r2, [r3, #88]	; 0x58
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	661a      	str	r2, [r3, #96]	; 0x60
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	665a      	str	r2, [r3, #100]	; 0x64
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	669a      	str	r2, [r3, #104]	; 0x68
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	671a      	str	r2, [r3, #112]	; 0x70
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	675a      	str	r2, [r3, #116]	; 0x74
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	679a      	str	r2, [r3, #120]	; 0x78
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bcb0      	pop	{r4, r5, r7}
 80024f0:	b004      	add	sp, #16
 80024f2:	4770      	bx	lr

080024f4 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b0a2      	sub	sp, #136	; 0x88
 80024f8:	af06      	add	r7, sp, #24
	Motor::MotorConfig_t config = {
 80024fa:	4b84      	ldr	r3, [pc, #528]	; (800270c <main_run+0x218>)
 80024fc:	463c      	mov	r4, r7
 80024fe:	461d      	mov	r5, r3
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	6023      	str	r3, [r4, #0]
		0.0f, // [nH] phase_inductance (unused)
		4.0f, // [A] current_limit
		DEFAULT_POWER_SUPPLY_VOLTAGE // [V] power_suply_voltage
	};

	const float kDutyMax = 0.95;
 8002508:	4b81      	ldr	r3, [pc, #516]	; (8002710 <main_run+0x21c>)
 800250a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const float kDutyMin = 0.05f;
 800250c:	4b81      	ldr	r3, [pc, #516]	; (8002714 <main_run+0x220>)
 800250e:	66bb      	str	r3, [r7, #104]	; 0x68
	const uint16_t kPulseMax = 10000;
 8002510:	f242 7310 	movw	r3, #10000	; 0x2710
 8002514:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	MotorDriver * driver = new MotorDriver(kDutyMax, kDutyMin, kPulseMax);
 8002518:	2028      	movs	r0, #40	; 0x28
 800251a:	f008 fca1 	bl	800ae60 <_Znwj>
 800251e:	4603      	mov	r3, r0
 8002520:	461c      	mov	r4, r3
 8002522:	f242 7110 	movw	r1, #10000	; 0x2710
 8002526:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8002718 <main_run+0x224>
 800252a:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800271c <main_run+0x228>
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff ff32 	bl	8002398 <_ZN11MotorDriverC1Efft>
 8002534:	663c      	str	r4, [r7, #96]	; 0x60
	driver->LinkToPWM(half_bridge_pwm_timer, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 8002536:	4b7a      	ldr	r3, [pc, #488]	; (8002720 <main_run+0x22c>)
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	2308      	movs	r3, #8
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2304      	movs	r3, #4
 8002540:	2200      	movs	r2, #0
 8002542:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002544:	f7ff f936 	bl	80017b4 <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>

	Encoder * enc = new AS5048A(encoder_hspi, ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin);
 8002548:	201c      	movs	r0, #28
 800254a:	f008 fc89 	bl	800ae60 <_Znwj>
 800254e:	4603      	mov	r3, r0
 8002550:	461c      	mov	r4, r3
 8002552:	4b74      	ldr	r3, [pc, #464]	; (8002724 <main_run+0x230>)
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2310      	movs	r3, #16
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <main_run+0x234>)
 8002560:	4620      	mov	r0, r4
 8002562:	f7fe fce3 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>
 8002566:	65fc      	str	r4, [r7, #92]	; 0x5c

	const float kADCMaxCounts = 0xFFF; // 12-bit ADC
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <main_run+0x238>)
 800256a:	65bb      	str	r3, [r7, #88]	; 0x58
	const float kADCMaxVolts = 3.3f; // VDD rail of MCU
 800256c:	4b70      	ldr	r3, [pc, #448]	; (8002730 <main_run+0x23c>)
 800256e:	657b      	str	r3, [r7, #84]	; 0x54
	const float kADCOffsetVolts = 1.56f; // IHM16M1 datasheet
 8002570:	4b70      	ldr	r3, [pc, #448]	; (8002734 <main_run+0x240>)
 8002572:	653b      	str	r3, [r7, #80]	; 0x50
	const float kADCGain = 1.53f * 0.33f;
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <main_run+0x244>)
 8002576:	64fb      	str	r3, [r7, #76]	; 0x4c
	CurrentSensor * csense = new CurrentSensor(kADCMaxCounts, kADCMaxVolts, kADCOffsetVolts, kADCGain);
 8002578:	2028      	movs	r0, #40	; 0x28
 800257a:	f008 fc71 	bl	800ae60 <_Znwj>
 800257e:	4603      	mov	r3, r0
 8002580:	461c      	mov	r4, r3
 8002582:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800273c <main_run+0x248>
 8002586:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8002740 <main_run+0x24c>
 800258a:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002744 <main_run+0x250>
 800258e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002592:	4620      	mov	r0, r4
 8002594:	f7ff fecc 	bl	8002330 <_ZN13CurrentSensorC1Etfff>
 8002598:	64bc      	str	r4, [r7, #72]	; 0x48
	csense->LinkToADC(&(curr_sense_adc_buf[0]), &(curr_sense_adc_buf[1]), &(curr_sense_adc_buf[2]));
 800259a:	4b6b      	ldr	r3, [pc, #428]	; (8002748 <main_run+0x254>)
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <main_run+0x258>)
 800259e:	496c      	ldr	r1, [pc, #432]	; (8002750 <main_run+0x25c>)
 80025a0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80025a2:	f7fe feff 	bl	80013a4 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	const float kMaxPhaseVoltage = CONSTRAIN(DEFAULT_POWER_SUPPLY_VOLTAGE, 0.0f, config.current_limit * config.phase_resistance);
 80025a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80025aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80025b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	d506      	bpl.n	80025ce <main_run+0xda>
 80025c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80025c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025cc:	e001      	b.n	80025d2 <main_run+0xde>
 80025ce:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80025d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	PIDController * pid_torque = new PIDController(DEFAULT_PID_CURR_P, DEFAULT_PID_CURR_I, DEFAULT_PID_CURR_D, DEFAULT_PID_CURR_RAMP, kMaxPhaseVoltage);
 80025d6:	2020      	movs	r0, #32
 80025d8:	f008 fc42 	bl	800ae60 <_Znwj>
 80025dc:	4603      	mov	r3, r0
 80025de:	461c      	mov	r4, r3
 80025e0:	ed97 2a11 	vldr	s4, [r7, #68]	; 0x44
 80025e4:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8002754 <main_run+0x260>
 80025e8:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80025ec:	eddf 0a59 	vldr	s1, [pc, #356]	; 8002754 <main_run+0x260>
 80025f0:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7ff fb49 	bl	8001c8c <_ZN13PIDControllerC1Efffff>
 80025fa:	643c      	str	r4, [r7, #64]	; 0x40

	motor = new Motor(config, driver, enc, csense, pid_torque);
 80025fc:	f107 0414 	add.w	r4, r7, #20
 8002600:	463d      	mov	r5, r7
 8002602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002606:	682b      	ldr	r3, [r5, #0]
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	2080      	movs	r0, #128	; 0x80
 800260c:	f008 fc28 	bl	800ae60 <_Znwj>
 8002610:	4603      	mov	r3, r0
 8002612:	461c      	mov	r4, r3
 8002614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002616:	9305      	str	r3, [sp, #20]
 8002618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261a:	9304      	str	r3, [sp, #16]
 800261c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800261e:	9303      	str	r3, [sp, #12]
 8002620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	466a      	mov	r2, sp
 8002626:	f107 0320 	add.w	r3, r7, #32
 800262a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800262e:	e882 0003 	stmia.w	r2, {r0, r1}
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fedf 	bl	80023fc <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>
 800263e:	4b46      	ldr	r3, [pc, #280]	; (8002758 <main_run+0x264>)
 8002640:	601c      	str	r4, [r3, #0]
	motor->Init();
 8002642:	4b45      	ldr	r3, [pc, #276]	; (8002758 <main_run+0x264>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe ff44 	bl	80014d4 <_ZN5Motor4InitEv>
	HAL_TIM_Base_Start_IT(half_bridge_pwm_timer); // start interrupts for TIM1 Update, which will trigger the motor updates
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <main_run+0x22c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f005 ff69 	bl	8008528 <HAL_TIM_Base_Start_IT>

#ifdef RUN_TESTS
	RunAllTests();
 8002656:	f000 f893 	bl	8002780 <_Z11RunAllTestsv>
#endif


	float homing_current = motor->GetConfig().current_limit;
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <main_run+0x264>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe ff23 	bl	80014b0 <_ZN5Motor9GetConfigEv>
 800266a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266c:	63fb      	str	r3, [r7, #60]	; 0x3c
	motor->SetCurrent(homing_current, -homing_current/2.0f, -homing_current/2.0f);
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <main_run+0x264>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002676:	eef1 7a67 	vneg.f32	s15, s15
 800267a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800267e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002682:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002686:	eef1 7a67 	vneg.f32	s15, s15
 800268a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800268e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8002692:	eeb0 1a66 	vmov.f32	s2, s13
 8002696:	eef0 0a47 	vmov.f32	s1, s14
 800269a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff32 	bl	8001508 <_ZN5Motor10SetCurrentEfff>
	motor->Update();
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <main_run+0x264>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2100      	movs	r1, #0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ff92 	bl	80015d4 <_ZN5Motor6UpdateEb>
	HAL_Delay(1000); // Let motor settle. Should line up so that all i_d=current_limit, i_q=0
 80026b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b4:	f002 fd12 	bl	80050dc <HAL_Delay>
	motor->Update(); // for debug viewing
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <main_run+0x264>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe ff88 	bl	80015d4 <_ZN5Motor6UpdateEb>
	enc->set_zero_angle();
 80026c4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80026c6:	f7fe fe1f 	bl	8001308 <_ZN7Encoder14set_zero_angleEv>

//	motor->SetTorque(-10);

	while(1) {
		motor->SetTorque(homing_current * (curr_sense_adc_buf[kUserPotADCBufIndex]-static_cast<float>(kADCMaxCounts)/2.0f)/(static_cast<float>(kADCMaxCounts)/2.0f));
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <main_run+0x264>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <main_run+0x25c>)
 80026d0:	88d2      	ldrh	r2, [r2, #6]
 80026d2:	b292      	uxth	r2, r2
 80026d4:	ee07 2a90 	vmov	s15, r2
 80026d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026dc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800275c <main_run+0x268>
 80026e0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80026e4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80026e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800275c <main_run+0x268>
 80026f0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026f4:	eeb0 0a47 	vmov.f32	s0, s14
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe ff36 	bl	800156a <_ZN5Motor9SetTorqueEf>
		motor->Update(); // perform fast and slow update
 80026fe:	4b16      	ldr	r3, [pc, #88]	; (8002758 <main_run+0x264>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe ff65 	bl	80015d4 <_ZN5Motor6UpdateEb>
		motor->SetTorque(homing_current * (curr_sense_adc_buf[kUserPotADCBufIndex]-static_cast<float>(kADCMaxCounts)/2.0f)/(static_cast<float>(kADCMaxCounts)/2.0f));
 800270a:	e7de      	b.n	80026ca <main_run+0x1d6>
 800270c:	0800dbc8 	.word	0x0800dbc8
 8002710:	3f733333 	.word	0x3f733333
 8002714:	3d4ccccd 	.word	0x3d4ccccd
 8002718:	3d4ccccd 	.word	0x3d4ccccd
 800271c:	3f733333 	.word	0x3f733333
 8002720:	20000888 	.word	0x20000888
 8002724:	2000087c 	.word	0x2000087c
 8002728:	40020000 	.word	0x40020000
 800272c:	457ff000 	.word	0x457ff000
 8002730:	40533333 	.word	0x40533333
 8002734:	3fc7ae14 	.word	0x3fc7ae14
 8002738:	3f014121 	.word	0x3f014121
 800273c:	3f014121 	.word	0x3f014121
 8002740:	3fc7ae14 	.word	0x3fc7ae14
 8002744:	40533333 	.word	0x40533333
 8002748:	20000884 	.word	0x20000884
 800274c:	20000882 	.word	0x20000882
 8002750:	20000880 	.word	0x20000880
 8002754:	00000000 	.word	0x00000000
 8002758:	200001fc 	.word	0x200001fc
 800275c:	44fff000 	.word	0x44fff000

08002760 <ADCConvCpltCallback>:
	}

	return 1;
}

void ADCConvCpltCallback() {
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	4804      	ldr	r0, [pc, #16]	; (800277c <ADCConvCpltCallback+0x1c>)
 800276a:	f003 ff23 	bl	80065b4 <HAL_GPIO_WritePin>
//	motor->Update(true);
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2140      	movs	r1, #64	; 0x40
 8002772:	4802      	ldr	r0, [pc, #8]	; (800277c <ADCConvCpltCallback+0x1c>)
 8002774:	f003 ff1e 	bl	80065b4 <HAL_GPIO_WritePin>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021800 	.word	0x40021800

08002780 <_Z11RunAllTestsv>:

#ifdef RUN_TESTS
void RunAllTests() {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	TestEncoderAll();
 8002784:	f000 fc74 	bl	8003070 <_Z14TestEncoderAllv>
	TestPIDControllerAll();
 8002788:	f001 fbd6 	bl	8003f38 <_Z20TestPIDControllerAllv>
	TestCurrentSensorAll();
 800278c:	f000 f98e 	bl	8002aac <_Z20TestCurrentSensorAllv>
	TestMotorDriverAll();
 8002790:	f000 fff2 	bl	8003778 <_Z18TestMotorDriverAllv>
	TestFOCUtilsAll();
 8002794:	f000 ff92 	bl	80036bc <_Z15TestFOCUtilsAllv>
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <_Z18CurrentsAreCorrect13CurrentSensorfff>:
 */

#include "test_framework.hh"
#include "test_current_sensor.hh"

bool CurrentsAreCorrect(CurrentSensor current_sensor, float i_u_expect, float i_v_expect, float i_w_expect) {
 800279c:	b084      	sub	sp, #16
 800279e:	b5b0      	push	{r4, r5, r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af02      	add	r7, sp, #8
 80027a4:	f107 0420 	add.w	r4, r7, #32
 80027a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80027ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80027b0:	edc7 0a02 	vstr	s1, [r7, #8]
 80027b4:	ed87 1a01 	vstr	s2, [r7, #4]
	if (current_sensor.i_u != i_u_expect) {
 80027b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80027bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80027c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d013      	beq.n	80027f2 <_Z18CurrentsAreCorrect13CurrentSensorfff+0x56>
		T_FAIL_PRINT("Incorrect phase U current: expected %f but got %f.\r\n", i_u_expect, current_sensor.i_u);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	4604      	mov	r4, r0
 80027d2:	460d      	mov	r5, r1
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fede 	bl	8000598 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9cd 2300 	strd	r2, r3, [sp]
 80027e4:	4622      	mov	r2, r4
 80027e6:	462b      	mov	r3, r5
 80027e8:	4823      	ldr	r0, [pc, #140]	; (8002878 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xdc>)
 80027ea:	f009 f995 	bl	800bb18 <iprintf>
		return false;
 80027ee:	2300      	movs	r3, #0
 80027f0:	e03a      	b.n	8002868 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_v != i_v_expect) {
 80027f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80027fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80027fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002802:	d013      	beq.n	800282c <_Z18CurrentsAreCorrect13CurrentSensorfff+0x90>
		T_FAIL_PRINT("Incorrect phase V current: expected %f but got %f.\r\n", i_v_expect, current_sensor.i_v);
 8002804:	68b8      	ldr	r0, [r7, #8]
 8002806:	f7fd fec7 	bl	8000598 <__aeabi_f2d>
 800280a:	4604      	mov	r4, r0
 800280c:	460d      	mov	r5, r1
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fec1 	bl	8000598 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9cd 2300 	strd	r2, r3, [sp]
 800281e:	4622      	mov	r2, r4
 8002820:	462b      	mov	r3, r5
 8002822:	4816      	ldr	r0, [pc, #88]	; (800287c <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe0>)
 8002824:	f009 f978 	bl	800bb18 <iprintf>
		return false;
 8002828:	2300      	movs	r3, #0
 800282a:	e01d      	b.n	8002868 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_w != i_w_expect) {
 800282c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002830:	ed97 7a01 	vldr	s14, [r7, #4]
 8002834:	eeb4 7a67 	vcmp.f32	s14, s15
 8002838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283c:	d013      	beq.n	8002866 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xca>
		T_FAIL_PRINT("Incorrect phase W current: expected %f but got %f.\r\n", i_w_expect, current_sensor.i_w);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7fd feaa 	bl	8000598 <__aeabi_f2d>
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fea4 	bl	8000598 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	e9cd 2300 	strd	r2, r3, [sp]
 8002858:	4622      	mov	r2, r4
 800285a:	462b      	mov	r3, r5
 800285c:	4808      	ldr	r0, [pc, #32]	; (8002880 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe4>)
 800285e:	f009 f95b 	bl	800bb18 <iprintf>
		return false;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	}
	return true;
 8002866:	2301      	movs	r3, #1
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002872:	b004      	add	sp, #16
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	0800dbdc 	.word	0x0800dbdc
 800287c:	0800dc2c 	.word	0x0800dc2c
 8002880:	0800dc7c 	.word	0x0800dc7c

08002884 <_Z24TestCurrentSensorCurrentv>:

bool TestCurrentSensorCurrent() {
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b09a      	sub	sp, #104	; 0x68
 8002888:	af06      	add	r7, sp, #24
	TEST_PRINT("Simulate Current through Current Sensor.\r\n");
 800288a:	4881      	ldr	r0, [pc, #516]	; (8002a90 <_Z24TestCurrentSensorCurrentv+0x20c>)
 800288c:	f009 f9ca 	bl	800bc24 <puts>
	uint16_t csense_adc_counts[3] = {0};
 8002890:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	809a      	strh	r2, [r3, #4]

	uint16_t adc_max_counts = 0xFFF;
 800289a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	float adc_max_volts = 3.3f;
 80028a2:	4b7c      	ldr	r3, [pc, #496]	; (8002a94 <_Z24TestCurrentSensorCurrentv+0x210>)
 80028a4:	64bb      	str	r3, [r7, #72]	; 0x48
	float adc_offset = 1.56f;
 80028a6:	4b7c      	ldr	r3, [pc, #496]	; (8002a98 <_Z24TestCurrentSensorCurrentv+0x214>)
 80028a8:	647b      	str	r3, [r7, #68]	; 0x44
	float adc_gain = 0.33f;
 80028aa:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <_Z24TestCurrentSensorCurrentv+0x218>)
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
	CurrentSensor current_sensor(adc_max_counts, adc_max_volts, adc_offset, adc_gain);
 80028ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80028b8:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80028bc:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fd34 	bl	8002330 <_ZN13CurrentSensorC1Etfff>
	current_sensor.LinkToADC(&(csense_adc_counts[0]), &(csense_adc_counts[1]), &(csense_adc_counts[2]));
 80028c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028cc:	1d1c      	adds	r4, r3, #4
 80028ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d2:	1c9a      	adds	r2, r3, #2
 80028d4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80028d8:	1d38      	adds	r0, r7, #4
 80028da:	4623      	mov	r3, r4
 80028dc:	f7fe fd62 	bl	80013a4 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	T_TEST_PRINT("Current sense ADC counts at 0.\r\n");
 80028e0:	486f      	ldr	r0, [pc, #444]	; (8002aa0 <_Z24TestCurrentSensorCurrentv+0x21c>)
 80028e2:	f009 f99f 	bl	800bc24 <puts>
	current_sensor.ReadCurrents();
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fd71 	bl	80013d0 <_ZN13CurrentSensor12ReadCurrentsEv>
	float i_u_expect = -adc_offset / adc_gain * 1000;
 80028ee:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028f2:	eef1 6a67 	vneg.f32	s13, s15
 80028f6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fe:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002906:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float i_v_expect = -adc_offset / adc_gain * 1000;
 800290a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800290e:	eef1 6a67 	vneg.f32	s13, s15
 8002912:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 800291e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002922:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float i_w_expect = -adc_offset / adc_gain * 1000;
 8002926:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800292a:	eef1 6a67 	vneg.f32	s13, s15
 800292e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002936:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 800293a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002942:	466d      	mov	r5, sp
 8002944:	f107 0414 	add.w	r4, r7, #20
 8002948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800294a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800294c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002950:	e885 0003 	stmia.w	r5, {r0, r1}
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002958:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 800295c:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002960:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002964:	f7ff ff1a 	bl	800279c <_Z18CurrentsAreCorrect13CurrentSensorfff>
 8002968:	4603      	mov	r3, r0
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <_Z24TestCurrentSensorCurrentv+0xf4>
		return false;
 8002974:	2300      	movs	r3, #0
 8002976:	e087      	b.n	8002a88 <_Z24TestCurrentSensorCurrentv+0x204>
	}

	T_TEST_PRINT("Current sense ADC counts at random values.\r\n");
 8002978:	484b      	ldr	r0, [pc, #300]	; (8002aa8 <_Z24TestCurrentSensorCurrentv+0x224>)
 800297a:	f009 f953 	bl	800bc24 <puts>
	csense_adc_counts[0] = 156;
 800297e:	239c      	movs	r3, #156	; 0x9c
 8002980:	85bb      	strh	r3, [r7, #44]	; 0x2c
	csense_adc_counts[1] = 0xFFF;
 8002982:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002986:	85fb      	strh	r3, [r7, #46]	; 0x2e
	csense_adc_counts[2] = 2934;
 8002988:	f640 3376 	movw	r3, #2934	; 0xb76
 800298c:	863b      	strh	r3, [r7, #48]	; 0x30
	current_sensor.ReadCurrents();
 800298e:	1d3b      	adds	r3, r7, #4
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fd1d 	bl	80013d0 <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_expect = (static_cast<float>(csense_adc_counts[0]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029c0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 80029cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	i_v_expect = (static_cast<float>(csense_adc_counts[1]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 80029d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80029f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80029fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029fe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	i_w_expect = (static_cast<float>(csense_adc_counts[2]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002a12:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a20:	ee07 3a90 	vmov	s15, r3
 8002a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a44:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002aa4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002a50:	466d      	mov	r5, sp
 8002a52:	f107 0414 	add.w	r4, r7, #20
 8002a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a66:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002a6a:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002a6e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002a72:	f7ff fe93 	bl	800279c <_Z18CurrentsAreCorrect13CurrentSensorfff>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <_Z24TestCurrentSensorCurrentv+0x202>
		return false;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <_Z24TestCurrentSensorCurrentv+0x204>
	}
	return true;
 8002a86:	2301      	movs	r3, #1
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3750      	adds	r7, #80	; 0x50
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a90:	0800dccc 	.word	0x0800dccc
 8002a94:	40533333 	.word	0x40533333
 8002a98:	3fc7ae14 	.word	0x3fc7ae14
 8002a9c:	3ea8f5c3 	.word	0x3ea8f5c3
 8002aa0:	0800dd08 	.word	0x0800dd08
 8002aa4:	447a0000 	.word	0x447a0000
 8002aa8:	0800dd3c 	.word	0x0800dd3c

08002aac <_Z20TestCurrentSensorAllv>:

void TestCurrentSensorAll() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
	bool csense_passed = true;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test CurrentSensor Class");
 8002ab6:	490e      	ldr	r1, [pc, #56]	; (8002af0 <_Z20TestCurrentSensorAllv+0x44>)
 8002ab8:	480e      	ldr	r0, [pc, #56]	; (8002af4 <_Z20TestCurrentSensorAllv+0x48>)
 8002aba:	f009 f82d 	bl	800bb18 <iprintf>
	csense_passed &= TestCurrentSensorCurrent();
 8002abe:	f7ff fee1 	bl	8002884 <_Z24TestCurrentSensorCurrentv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	71fb      	strb	r3, [r7, #7]
	if (csense_passed) {
 8002ad4:	79fb      	ldrb	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <_Z20TestCurrentSensorAllv+0x36>
		PASS_PRINT("CurrentSensor Class\r\n");
 8002ada:	4807      	ldr	r0, [pc, #28]	; (8002af8 <_Z20TestCurrentSensorAllv+0x4c>)
 8002adc:	f009 f8a2 	bl	800bc24 <puts>
	} else {
		FAIL_PRINT("CurrentSensor Class\r\n");
	}
}
 8002ae0:	e002      	b.n	8002ae8 <_Z20TestCurrentSensorAllv+0x3c>
		FAIL_PRINT("CurrentSensor Class\r\n");
 8002ae2:	4806      	ldr	r0, [pc, #24]	; (8002afc <_Z20TestCurrentSensorAllv+0x50>)
 8002ae4:	f009 f89e 	bl	800bc24 <puts>
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	0800dd7c 	.word	0x0800dd7c
 8002af4:	0800dd98 	.word	0x0800dd98
 8002af8:	0800ddac 	.word	0x0800ddac
 8002afc:	0800ddd8 	.word	0x0800ddd8

08002b00 <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	; 0x30
 8002b04:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 8002b06:	4816      	ldr	r0, [pc, #88]	; (8002b60 <_Z17TestEncoderCreatev+0x60>)
 8002b08:	f009 f88c 	bl	800bc24 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	4638      	mov	r0, r7
 8002b1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	6a3a      	ldr	r2, [r7, #32]
 8002b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b26:	f7fe fa01 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe fc0d 	bl	800134c <_ZN7Encoder9get_angleEv>
 8002b32:	eef0 7a40 	vmov.f32	s15, s0
 8002b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3a:	ee17 3a90 	vmov	r3, s15
 8002b3e:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 8002b40:	8bbb      	ldrh	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d007      	beq.n	8002b56 <_Z17TestEncoderCreatev+0x56>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8002b46:	8bbb      	ldrh	r3, [r7, #28]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <_Z17TestEncoderCreatev+0x64>)
 8002b4e:	f008 ffe3 	bl	800bb18 <iprintf>
		return false;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <_Z17TestEncoderCreatev+0x58>
	}

	return true;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3728      	adds	r7, #40	; 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	0800de04 	.word	0x0800de04
 8002b64:	0800de24 	.word	0x0800de24

08002b68 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b08e      	sub	sp, #56	; 0x38
 8002b6c:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 8002b6e:	4839      	ldr	r0, [pc, #228]	; (8002c54 <_Z15TestEncoderZerov+0xec>)
 8002b70:	f009 f858 	bl	800bc24 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b82:	4638      	mov	r0, r7
 8002b84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b88:	9200      	str	r2, [sp, #0]
 8002b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b8e:	f7fe f9cd 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 8002b92:	4831      	ldr	r0, [pc, #196]	; (8002c58 <_Z15TestEncoderZerov+0xf0>)
 8002b94:	f009 f846 	bl	800bc24 <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 8002b98:	463b      	mov	r3, r7
 8002b9a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002c5c <_Z15TestEncoderZerov+0xf4>
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fbc0 	bl	8001324 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fbd0 	bl	800134c <_ZN7Encoder9get_angleEv>
 8002bac:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	; (8002c60 <_Z15TestEncoderZerov+0xf8>)
 8002bb2:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002bb4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bb8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bbc:	eeb4 7a67 	vcmp.f32	s14, s15
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d012      	beq.n	8002bec <_Z15TestEncoderZerov+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002bc6:	69f8      	ldr	r0, [r7, #28]
 8002bc8:	f7fd fce6 	bl	8000598 <__aeabi_f2d>
 8002bcc:	4604      	mov	r4, r0
 8002bce:	460d      	mov	r5, r1
 8002bd0:	6a38      	ldr	r0, [r7, #32]
 8002bd2:	f7fd fce1 	bl	8000598 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	e9cd 2300 	strd	r2, r3, [sp]
 8002bde:	4622      	mov	r2, r4
 8002be0:	462b      	mov	r3, r5
 8002be2:	4820      	ldr	r0, [pc, #128]	; (8002c64 <_Z15TestEncoderZerov+0xfc>)
 8002be4:	f008 ff98 	bl	800bb18 <iprintf>
		return false;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e02e      	b.n	8002c4a <_Z15TestEncoderZerov+0xe2>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <_Z15TestEncoderZerov+0x100>)
 8002bee:	f009 f819 	bl	800bc24 <puts>
	enc.set_zero_angle(3600);
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002c6c <_Z15TestEncoderZerov+0x104>
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fb93 	bl	8001324 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8002bfe:	463b      	mov	r3, r7
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fba3 	bl	800134c <_ZN7Encoder9get_angleEv>
 8002c06:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002c10:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c14:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c18:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c20:	d012      	beq.n	8002c48 <_Z15TestEncoderZerov+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002c22:	69f8      	ldr	r0, [r7, #28]
 8002c24:	f7fd fcb8 	bl	8000598 <__aeabi_f2d>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	460d      	mov	r5, r1
 8002c2c:	6a38      	ldr	r0, [r7, #32]
 8002c2e:	f7fd fcb3 	bl	8000598 <__aeabi_f2d>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	e9cd 2300 	strd	r2, r3, [sp]
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	462b      	mov	r3, r5
 8002c3e:	4809      	ldr	r0, [pc, #36]	; (8002c64 <_Z15TestEncoderZerov+0xfc>)
 8002c40:	f008 ff6a 	bl	800bb18 <iprintf>
		return false;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <_Z15TestEncoderZerov+0xe2>
	}

	return true;
 8002c48:	2301      	movs	r3, #1
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3730      	adds	r7, #48	; 0x30
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bdb0      	pop	{r4, r5, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	0800de80 	.word	0x0800de80
 8002c58:	0800dea0 	.word	0x0800dea0
 8002c5c:	425c0000 	.word	0x425c0000
 8002c60:	43988000 	.word	0x43988000
 8002c64:	0800ded0 	.word	0x0800ded0
 8002c68:	0800df14 	.word	0x0800df14
 8002c6c:	45610000 	.word	0x45610000

08002c70 <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b08e      	sub	sp, #56	; 0x38
 8002c74:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 8002c76:	4838      	ldr	r0, [pc, #224]	; (8002d58 <_Z16TestEncoderAnglev+0xe8>)
 8002c78:	f008 ffd4 	bl	800bc24 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002c88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c8a:	4638      	mov	r0, r7
 8002c8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c90:	9200      	str	r2, [sp, #0]
 8002c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c96:	f7fe f949 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 8002c9a:	4830      	ldr	r0, [pc, #192]	; (8002d5c <_Z16TestEncoderAnglev+0xec>)
 8002c9c:	f008 ffc2 	bl	800bc24 <puts>
	enc.set_angle(450.5);
 8002ca0:	463b      	mov	r3, r7
 8002ca2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002d60 <_Z16TestEncoderAnglev+0xf0>
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe fb68 	bl	800137c <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 8002cac:	463b      	mov	r3, r7
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fb4c 	bl	800134c <_ZN7Encoder9get_angleEv>
 8002cb4:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <_Z16TestEncoderAnglev+0xf4>)
 8002cba:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002cbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cc4:	eeb4 7a67 	vcmp.f32	s14, s15
 8002cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ccc:	d012      	beq.n	8002cf4 <_Z16TestEncoderAnglev+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002cce:	69f8      	ldr	r0, [r7, #28]
 8002cd0:	f7fd fc62 	bl	8000598 <__aeabi_f2d>
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	460d      	mov	r5, r1
 8002cd8:	6a38      	ldr	r0, [r7, #32]
 8002cda:	f7fd fc5d 	bl	8000598 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	e9cd 2300 	strd	r2, r3, [sp]
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	462b      	mov	r3, r5
 8002cea:	481f      	ldr	r0, [pc, #124]	; (8002d68 <_Z16TestEncoderAnglev+0xf8>)
 8002cec:	f008 ff14 	bl	800bb18 <iprintf>
		return false;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e02d      	b.n	8002d50 <_Z16TestEncoderAnglev+0xe0>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 8002cf4:	481d      	ldr	r0, [pc, #116]	; (8002d6c <_Z16TestEncoderAnglev+0xfc>)
 8002cf6:	f008 ff95 	bl	800bc24 <puts>
	enc.set_angle(-500.9);
 8002cfa:	463b      	mov	r3, r7
 8002cfc:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002d70 <_Z16TestEncoderAnglev+0x100>
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fb3b 	bl	800137c <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 8002d06:	463b      	mov	r3, r7
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fb1f 	bl	800134c <_ZN7Encoder9get_angleEv>
 8002d0e:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <_Z16TestEncoderAnglev+0x104>)
 8002d14:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002d16:	ed97 7a08 	vldr	s14, [r7, #32]
 8002d1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	d012      	beq.n	8002d4e <_Z16TestEncoderAnglev+0xde>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002d28:	69f8      	ldr	r0, [r7, #28]
 8002d2a:	f7fd fc35 	bl	8000598 <__aeabi_f2d>
 8002d2e:	4604      	mov	r4, r0
 8002d30:	460d      	mov	r5, r1
 8002d32:	6a38      	ldr	r0, [r7, #32]
 8002d34:	f7fd fc30 	bl	8000598 <__aeabi_f2d>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	e9cd 2300 	strd	r2, r3, [sp]
 8002d40:	4622      	mov	r2, r4
 8002d42:	462b      	mov	r3, r5
 8002d44:	4808      	ldr	r0, [pc, #32]	; (8002d68 <_Z16TestEncoderAnglev+0xf8>)
 8002d46:	f008 fee7 	bl	800bb18 <iprintf>
		return false;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	e000      	b.n	8002d50 <_Z16TestEncoderAnglev+0xe0>
	}

	return true;
 8002d4e:	2301      	movs	r3, #1
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}
 8002d58:	0800df4c 	.word	0x0800df4c
 8002d5c:	0800df70 	.word	0x0800df70
 8002d60:	43e14000 	.word	0x43e14000
 8002d64:	42b50000 	.word	0x42b50000
 8002d68:	0800ded0 	.word	0x0800ded0
 8002d6c:	0800df98 	.word	0x0800df98
 8002d70:	c3fa7333 	.word	0xc3fa7333
 8002d74:	435b199a 	.word	0x435b199a

08002d78 <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08c      	sub	sp, #48	; 0x30
 8002d7c:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 8002d7e:	483c      	ldr	r0, [pc, #240]	; (8002e70 <_Z17TestAS5048AParityv+0xf8>)
 8002d80:	f008 ff50 	bl	800bc24 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002d90:	8bfb      	ldrh	r3, [r7, #30]
 8002d92:	4638      	mov	r0, r7
 8002d94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	6a3a      	ldr	r2, [r7, #32]
 8002d9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d9e:	f7fe f8c5 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 8002da2:	4834      	ldr	r0, [pc, #208]	; (8002e74 <_Z17TestAS5048AParityv+0xfc>)
 8002da4:	f008 ff3e 	bl	800bc24 <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 8002da8:	463b      	mov	r3, r7
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe f8fd 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 8002db2:	4603      	mov	r3, r0
 8002db4:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002dba:	7f7a      	ldrb	r2, [r7, #29]
 8002dbc:	7f3b      	ldrb	r3, [r7, #28]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d007      	beq.n	8002dd2 <_Z17TestAS5048AParityv+0x5a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002dc2:	7f3b      	ldrb	r3, [r7, #28]
 8002dc4:	7f7a      	ldrb	r2, [r7, #29]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	482b      	ldr	r0, [pc, #172]	; (8002e78 <_Z17TestAS5048AParityv+0x100>)
 8002dca:	f008 fea5 	bl	800bb18 <iprintf>
		return false;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e04a      	b.n	8002e68 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 8002dd2:	482a      	ldr	r0, [pc, #168]	; (8002e7c <_Z17TestAS5048AParityv+0x104>)
 8002dd4:	f008 ff26 	bl	800bc24 <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fe f8e5 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 8002de2:	4603      	mov	r3, r0
 8002de4:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002dea:	7f7a      	ldrb	r2, [r7, #29]
 8002dec:	7f3b      	ldrb	r3, [r7, #28]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d007      	beq.n	8002e02 <_Z17TestAS5048AParityv+0x8a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002df2:	7f3b      	ldrb	r3, [r7, #28]
 8002df4:	7f7a      	ldrb	r2, [r7, #29]
 8002df6:	4619      	mov	r1, r3
 8002df8:	481f      	ldr	r0, [pc, #124]	; (8002e78 <_Z17TestAS5048AParityv+0x100>)
 8002dfa:	f008 fe8d 	bl	800bb18 <iprintf>
		return false;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e032      	b.n	8002e68 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 8002e02:	481f      	ldr	r0, [pc, #124]	; (8002e80 <_Z17TestAS5048AParityv+0x108>)
 8002e04:	f008 ff0e 	bl	800bc24 <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8002e08:	463b      	mov	r3, r7
 8002e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fe f8cc 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 8002e14:	4603      	mov	r3, r0
 8002e16:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002e1c:	7f7a      	ldrb	r2, [r7, #29]
 8002e1e:	7f3b      	ldrb	r3, [r7, #28]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d007      	beq.n	8002e34 <_Z17TestAS5048AParityv+0xbc>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002e24:	7f3b      	ldrb	r3, [r7, #28]
 8002e26:	7f7a      	ldrb	r2, [r7, #29]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4813      	ldr	r0, [pc, #76]	; (8002e78 <_Z17TestAS5048AParityv+0x100>)
 8002e2c:	f008 fe74 	bl	800bb18 <iprintf>
		return false;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e019      	b.n	8002e68 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 8002e34:	4813      	ldr	r0, [pc, #76]	; (8002e84 <_Z17TestAS5048AParityv+0x10c>)
 8002e36:	f008 fef5 	bl	800bc24 <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe f8b3 	bl	8000fac <_ZN7AS5048A15CalcEvenParity_Et>
 8002e46:	4603      	mov	r3, r0
 8002e48:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002e4e:	7f7a      	ldrb	r2, [r7, #29]
 8002e50:	7f3b      	ldrb	r3, [r7, #28]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d007      	beq.n	8002e66 <_Z17TestAS5048AParityv+0xee>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002e56:	7f3b      	ldrb	r3, [r7, #28]
 8002e58:	7f7a      	ldrb	r2, [r7, #29]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <_Z17TestAS5048AParityv+0x100>)
 8002e5e:	f008 fe5b 	bl	800bb18 <iprintf>
		return false;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <_Z17TestAS5048AParityv+0xf0>
	}

	return true;
 8002e66:	2301      	movs	r3, #1
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	0800dfc0 	.word	0x0800dfc0
 8002e74:	0800dff0 	.word	0x0800dff0
 8002e78:	0800e018 	.word	0x0800e018
 8002e7c:	0800e060 	.word	0x0800e060
 8002e80:	0800e088 	.word	0x0800e088
 8002e84:	0800e0b8 	.word	0x0800e0b8

08002e88 <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08e      	sub	sp, #56	; 0x38
 8002e8c:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 8002e8e:	486d      	ldr	r0, [pc, #436]	; (8003044 <_Z18TestAS5048APacketsv+0x1bc>)
 8002e90:	f008 fec8 	bl	800bc24 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ea8:	9200      	str	r2, [sp, #0]
 8002eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eae:	f7fe f83d 	bl	8000f2c <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 8002eb2:	4865      	ldr	r0, [pc, #404]	; (8003048 <_Z18TestAS5048APacketsv+0x1c0>)
 8002eb4:	f008 feb6 	bl	800bc24 <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 8002eb8:	463b      	mov	r3, r7
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe f8a0 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 8002eca:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 8002ece:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d007      	beq.n	8002ee8 <_Z18TestAS5048APacketsv+0x60>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002ed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002eda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	485b      	ldr	r0, [pc, #364]	; (800304c <_Z18TestAS5048APacketsv+0x1c4>)
 8002ee0:	f008 fe1a 	bl	800bb18 <iprintf>
		return false;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e0a9      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8002ee8:	4859      	ldr	r0, [pc, #356]	; (8003050 <_Z18TestAS5048APacketsv+0x1c8>)
 8002eea:	f008 fe9b 	bl	800bc24 <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 8002eee:	463b      	mov	r3, r7
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fe f885 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8002efc:	4603      	mov	r3, r0
 8002efe:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8002f00:	f643 63ef 	movw	r3, #16111	; 0x3eef
 8002f04:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002f06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d007      	beq.n	8002f1e <_Z18TestAS5048APacketsv+0x96>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f12:	4619      	mov	r1, r3
 8002f14:	484d      	ldr	r0, [pc, #308]	; (800304c <_Z18TestAS5048APacketsv+0x1c4>)
 8002f16:	f008 fdff 	bl	800bb18 <iprintf>
		return false;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e08e      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 8002f1e:	484d      	ldr	r0, [pc, #308]	; (8003054 <_Z18TestAS5048APacketsv+0x1cc>)
 8002f20:	f008 fe80 	bl	800bc24 <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 8002f24:	463b      	mov	r3, r7
 8002f26:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f894 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 8002f30:	4603      	mov	r3, r0
 8002f32:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 8002f34:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002f38:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002f3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d007      	beq.n	8002f52 <_Z18TestAS5048APacketsv+0xca>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002f42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f46:	4619      	mov	r1, r3
 8002f48:	4843      	ldr	r0, [pc, #268]	; (8003058 <_Z18TestAS5048APacketsv+0x1d0>)
 8002f4a:	f008 fde5 	bl	800bb18 <iprintf>
		return false;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e074      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8002f52:	4842      	ldr	r0, [pc, #264]	; (800305c <_Z18TestAS5048APacketsv+0x1d4>)
 8002f54:	f008 fe66 	bl	800bc24 <puts>
	uint16_t received_pack = 0b1001111010101101;
 8002f58:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002f5c:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 8002f5e:	8c3a      	ldrh	r2, [r7, #32]
 8002f60:	463b      	mov	r3, r7
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe f893 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 8002f6e:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002f72:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002f74:	8bfa      	ldrh	r2, [r7, #30]
 8002f76:	8bbb      	ldrh	r3, [r7, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d007      	beq.n	8002f8c <_Z18TestAS5048APacketsv+0x104>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002f7c:	8bbb      	ldrh	r3, [r7, #28]
 8002f7e:	8bfa      	ldrh	r2, [r7, #30]
 8002f80:	4619      	mov	r1, r3
 8002f82:	4837      	ldr	r0, [pc, #220]	; (8003060 <_Z18TestAS5048APacketsv+0x1d8>)
 8002f84:	f008 fdc8 	bl	800bb18 <iprintf>
		return false;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e057      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 8002f8c:	4835      	ldr	r0, [pc, #212]	; (8003064 <_Z18TestAS5048APacketsv+0x1dc>)
 8002f8e:	f008 fe49 	bl	800bc24 <puts>
	received_pack = 0b0001111010101101;
 8002f92:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002f96:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002f98:	8c3a      	ldrh	r2, [r7, #32]
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f876 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fac:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002fae:	8bfa      	ldrh	r2, [r7, #30]
 8002fb0:	8bbb      	ldrh	r3, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d007      	beq.n	8002fc6 <_Z18TestAS5048APacketsv+0x13e>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002fb6:	8bbb      	ldrh	r3, [r7, #28]
 8002fb8:	8bfa      	ldrh	r2, [r7, #30]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4828      	ldr	r0, [pc, #160]	; (8003060 <_Z18TestAS5048APacketsv+0x1d8>)
 8002fbe:	f008 fdab 	bl	800bb18 <iprintf>
		return false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e03a      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 8002fc6:	4828      	ldr	r0, [pc, #160]	; (8003068 <_Z18TestAS5048APacketsv+0x1e0>)
 8002fc8:	f008 fe2c 	bl	800bc24 <puts>
	received_pack = 0b0101111010101101;
 8002fcc:	f645 63ad 	movw	r3, #24237	; 0x5ead
 8002fd0:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002fd2:	8c3a      	ldrh	r2, [r7, #32]
 8002fd4:	463b      	mov	r3, r7
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe f859 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002fe2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fe6:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002fe8:	8bfa      	ldrh	r2, [r7, #30]
 8002fea:	8bbb      	ldrh	r3, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d007      	beq.n	8003000 <_Z18TestAS5048APacketsv+0x178>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002ff0:	8bbb      	ldrh	r3, [r7, #28]
 8002ff2:	8bfa      	ldrh	r2, [r7, #30]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	481a      	ldr	r0, [pc, #104]	; (8003060 <_Z18TestAS5048APacketsv+0x1d8>)
 8002ff8:	f008 fd8e 	bl	800bb18 <iprintf>
		return false;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e01d      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 8003000:	481a      	ldr	r0, [pc, #104]	; (800306c <_Z18TestAS5048APacketsv+0x1e4>)
 8003002:	f008 fe0f 	bl	800bc24 <puts>
	received_pack = 0b1101111010101101;
 8003006:	f64d 63ad 	movw	r3, #57005	; 0xdead
 800300a:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 800300c:	8c3a      	ldrh	r2, [r7, #32]
 800300e:	463b      	mov	r3, r7
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe f83c 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8003018:	4603      	mov	r3, r0
 800301a:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 800301c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003020:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8003022:	8bfa      	ldrh	r2, [r7, #30]
 8003024:	8bbb      	ldrh	r3, [r7, #28]
 8003026:	429a      	cmp	r2, r3
 8003028:	d007      	beq.n	800303a <_Z18TestAS5048APacketsv+0x1b2>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 800302a:	8bbb      	ldrh	r3, [r7, #28]
 800302c:	8bfa      	ldrh	r2, [r7, #30]
 800302e:	4619      	mov	r1, r3
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <_Z18TestAS5048APacketsv+0x1d8>)
 8003032:	f008 fd71 	bl	800bb18 <iprintf>
		return false;
 8003036:	2300      	movs	r3, #0
 8003038:	e000      	b.n	800303c <_Z18TestAS5048APacketsv+0x1b4>
	}

	return true;
 800303a:	2301      	movs	r3, #1
}
 800303c:	4618      	mov	r0, r3
 800303e:	3730      	adds	r7, #48	; 0x30
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	0800e0ec 	.word	0x0800e0ec
 8003048:	0800e120 	.word	0x0800e120
 800304c:	0800e154 	.word	0x0800e154
 8003050:	0800e1a4 	.word	0x0800e1a4
 8003054:	0800e1d8 	.word	0x0800e1d8
 8003058:	0800e204 	.word	0x0800e204
 800305c:	0800e250 	.word	0x0800e250
 8003060:	0800e288 	.word	0x0800e288
 8003064:	0800e2cc 	.word	0x0800e2cc
 8003068:	0800e308 	.word	0x0800e308
 800306c:	0800e340 	.word	0x0800e340

08003070 <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 8003076:	2301      	movs	r3, #1
 8003078:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 800307a:	492c      	ldr	r1, [pc, #176]	; (800312c <_Z14TestEncoderAllv+0xbc>)
 800307c:	482c      	ldr	r0, [pc, #176]	; (8003130 <_Z14TestEncoderAllv+0xc0>)
 800307e:	f008 fd4b 	bl	800bb18 <iprintf>
	enc_passed &= TestEncoderCreate();
 8003082:	f7ff fd3d 	bl	8002b00 <_Z17TestEncoderCreatev>
 8003086:	4603      	mov	r3, r0
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 8003098:	f7ff fd66 	bl	8002b68 <_Z15TestEncoderZerov>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf14      	ite	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	2300      	moveq	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 80030ae:	f7ff fddf 	bl	8002c70 <_Z16TestEncoderAnglev>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 80030ca:	481a      	ldr	r0, [pc, #104]	; (8003134 <_Z14TestEncoderAllv+0xc4>)
 80030cc:	f008 fdaa 	bl	800bc24 <puts>
 80030d0:	e002      	b.n	80030d8 <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 80030d2:	4819      	ldr	r0, [pc, #100]	; (8003138 <_Z14TestEncoderAllv+0xc8>)
 80030d4:	f008 fda6 	bl	800bc24 <puts>
	}

	L_PRINT("Test AS5048A Class");
 80030d8:	4918      	ldr	r1, [pc, #96]	; (800313c <_Z14TestEncoderAllv+0xcc>)
 80030da:	4815      	ldr	r0, [pc, #84]	; (8003130 <_Z14TestEncoderAllv+0xc0>)
 80030dc:	f008 fd1c 	bl	800bb18 <iprintf>
	bool as5048a_passed = true;
 80030e0:	2301      	movs	r3, #1
 80030e2:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 80030e4:	f7ff fe48 	bl	8002d78 <_Z17TestAS5048AParityv>
 80030e8:	4603      	mov	r3, r0
 80030ea:	461a      	mov	r2, r3
 80030ec:	79bb      	ldrb	r3, [r7, #6]
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 80030fa:	f7ff fec5 	bl	8002e88 <_Z18TestAS5048APacketsv>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	79bb      	ldrb	r3, [r7, #6]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	bf14      	ite	ne
 800310a:	2301      	movne	r3, #1
 800310c:	2300      	moveq	r3, #0
 800310e:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8003110:	79bb      	ldrb	r3, [r7, #6]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 8003116:	480a      	ldr	r0, [pc, #40]	; (8003140 <_Z14TestEncoderAllv+0xd0>)
 8003118:	f008 fd84 	bl	800bc24 <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 800311c:	e002      	b.n	8003124 <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 800311e:	4809      	ldr	r0, [pc, #36]	; (8003144 <_Z14TestEncoderAllv+0xd4>)
 8003120:	f008 fd80 	bl	800bc24 <puts>
}
 8003124:	bf00      	nop
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	0800e384 	.word	0x0800e384
 8003130:	0800e398 	.word	0x0800e398
 8003134:	0800e3ac 	.word	0x0800e3ac
 8003138:	0800e3d4 	.word	0x0800e3d4
 800313c:	0800e3fc 	.word	0x0800e3fc
 8003140:	0800e410 	.word	0x0800e410
 8003144:	0800e438 	.word	0x0800e438

08003148 <_Z10MatchThreeffffff>:
#include "test_foc_utils.hh"
#include "foc_utils.hh"

#define ERROR_MARGIN 0.1

bool MatchThree(float a, float b, float c, float expect_a, float expect_b, float expect_c) {
 8003148:	b5b0      	push	{r4, r5, r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003152:	edc7 0a04 	vstr	s1, [r7, #16]
 8003156:	ed87 1a03 	vstr	s2, [r7, #12]
 800315a:	edc7 1a02 	vstr	s3, [r7, #8]
 800315e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003162:	edc7 2a00 	vstr	s5, [r7]
	bool all_match = true;
 8003166:	2301      	movs	r3, #1
 8003168:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(a, expect_a, ERROR_MARGIN);
 800316a:	7ffc      	ldrb	r4, [r7, #31]
 800316c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003170:	edd7 7a02 	vldr	s15, [r7, #8]
 8003174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	dd17      	ble.n	80031ae <_Z10MatchThreeffffff+0x66>
 800317e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003182:	edd7 7a02 	vldr	s15, [r7, #8]
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	ee17 0a90 	vmov	r0, s15
 800318e:	f7fd fa03 	bl	8000598 <__aeabi_f2d>
 8003192:	2301      	movs	r3, #1
 8003194:	461d      	mov	r5, r3
 8003196:	a356      	add	r3, pc, #344	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f7fd fcc6 	bl	8000b2c <__aeabi_dcmplt>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <_Z10MatchThreeffffff+0x62>
 80031a6:	2300      	movs	r3, #0
 80031a8:	461d      	mov	r5, r3
 80031aa:	b2eb      	uxtb	r3, r5
 80031ac:	e016      	b.n	80031dc <_Z10MatchThreeffffff+0x94>
 80031ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80031b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ba:	ee17 0a90 	vmov	r0, s15
 80031be:	f7fd f9eb 	bl	8000598 <__aeabi_f2d>
 80031c2:	2301      	movs	r3, #1
 80031c4:	461d      	mov	r5, r3
 80031c6:	a34a      	add	r3, pc, #296	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fd fcae 	bl	8000b2c <__aeabi_dcmplt>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <_Z10MatchThreeffffff+0x92>
 80031d6:	2300      	movs	r3, #0
 80031d8:	461d      	mov	r5, r3
 80031da:	b2eb      	uxtb	r3, r5
 80031dc:	4023      	ands	r3, r4
 80031de:	2b00      	cmp	r3, #0
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(b, expect_b, ERROR_MARGIN);
 80031e8:	7ffc      	ldrb	r4, [r7, #31]
 80031ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80031ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd17      	ble.n	800322c <_Z10MatchThreeffffff+0xe4>
 80031fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8003200:	edd7 7a01 	vldr	s15, [r7, #4]
 8003204:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003208:	ee17 0a90 	vmov	r0, s15
 800320c:	f7fd f9c4 	bl	8000598 <__aeabi_f2d>
 8003210:	2301      	movs	r3, #1
 8003212:	461d      	mov	r5, r3
 8003214:	a336      	add	r3, pc, #216	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd fc87 	bl	8000b2c <__aeabi_dcmplt>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <_Z10MatchThreeffffff+0xe0>
 8003224:	2300      	movs	r3, #0
 8003226:	461d      	mov	r5, r3
 8003228:	b2eb      	uxtb	r3, r5
 800322a:	e016      	b.n	800325a <_Z10MatchThreeffffff+0x112>
 800322c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003230:	edd7 7a04 	vldr	s15, [r7, #16]
 8003234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003238:	ee17 0a90 	vmov	r0, s15
 800323c:	f7fd f9ac 	bl	8000598 <__aeabi_f2d>
 8003240:	2301      	movs	r3, #1
 8003242:	461d      	mov	r5, r3
 8003244:	a32a      	add	r3, pc, #168	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 8003246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324a:	f7fd fc6f 	bl	8000b2c <__aeabi_dcmplt>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <_Z10MatchThreeffffff+0x110>
 8003254:	2300      	movs	r3, #0
 8003256:	461d      	mov	r5, r3
 8003258:	b2eb      	uxtb	r3, r5
 800325a:	4023      	ands	r3, r4
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(c, expect_c, ERROR_MARGIN);
 8003266:	7ffc      	ldrb	r4, [r7, #31]
 8003268:	ed97 7a03 	vldr	s14, [r7, #12]
 800326c:	edd7 7a00 	vldr	s15, [r7]
 8003270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003278:	dd17      	ble.n	80032aa <_Z10MatchThreeffffff+0x162>
 800327a:	ed97 7a03 	vldr	s14, [r7, #12]
 800327e:	edd7 7a00 	vldr	s15, [r7]
 8003282:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003286:	ee17 0a90 	vmov	r0, s15
 800328a:	f7fd f985 	bl	8000598 <__aeabi_f2d>
 800328e:	2301      	movs	r3, #1
 8003290:	461d      	mov	r5, r3
 8003292:	a317      	add	r3, pc, #92	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f7fd fc48 	bl	8000b2c <__aeabi_dcmplt>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <_Z10MatchThreeffffff+0x15e>
 80032a2:	2300      	movs	r3, #0
 80032a4:	461d      	mov	r5, r3
 80032a6:	b2eb      	uxtb	r3, r5
 80032a8:	e016      	b.n	80032d8 <_Z10MatchThreeffffff+0x190>
 80032aa:	ed97 7a00 	vldr	s14, [r7]
 80032ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	ee17 0a90 	vmov	r0, s15
 80032ba:	f7fd f96d 	bl	8000598 <__aeabi_f2d>
 80032be:	2301      	movs	r3, #1
 80032c0:	461d      	mov	r5, r3
 80032c2:	a30b      	add	r3, pc, #44	; (adr r3, 80032f0 <_Z10MatchThreeffffff+0x1a8>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	f7fd fc30 	bl	8000b2c <__aeabi_dcmplt>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <_Z10MatchThreeffffff+0x18e>
 80032d2:	2300      	movs	r3, #0
 80032d4:	461d      	mov	r5, r3
 80032d6:	b2eb      	uxtb	r3, r5
 80032d8:	4023      	ands	r3, r4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	77fb      	strb	r3, [r7, #31]

	return all_match;
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bdb0      	pop	{r4, r5, r7, pc}
 80032ee:	bf00      	nop
 80032f0:	9999999a 	.word	0x9999999a
 80032f4:	3fb99999 	.word	0x3fb99999

080032f8 <_Z16TestTransFwddDQZv>:

bool TestTransFwddDQZ() {
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b098      	sub	sp, #96	; 0x60
 80032fe:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward DQZ\r\n");
 8003300:	4841      	ldr	r0, [pc, #260]	; (8003408 <_Z16TestTransFwddDQZv+0x110>)
 8003302:	f008 fc8f 	bl	800bc24 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 8003306:	4841      	ldr	r0, [pc, #260]	; (800340c <_Z16TestTransFwddDQZv+0x114>)
 8003308:	f008 fc8c 	bl	800bc24 <puts>

	float theta = 123.0f;
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <_Z16TestTransFwddDQZv+0x118>)
 800330e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	61bb      	str	r3, [r7, #24]
	float i_q = 0.0f;
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
	float i_z = 0.0f;
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	613b      	str	r3, [r7, #16]

	float i_u = 1.0f;
 8003322:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003326:	633b      	str	r3, [r7, #48]	; 0x30
	float i_v = 2.0f;
 8003328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_w = 3.0f;
 800332e:	4b39      	ldr	r3, [pc, #228]	; (8003414 <_Z16TestTransFwddDQZv+0x11c>)
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28


	float expect_i_d =  0.074014f;
 8003332:	4b39      	ldr	r3, [pc, #228]	; (8003418 <_Z16TestTransFwddDQZv+0x120>)
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_q =  1.412275f;
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <_Z16TestTransFwddDQZv+0x124>)
 8003338:	623b      	str	r3, [r7, #32]
	float expect_i_z =  3.464102f;
 800333a:	4b39      	ldr	r3, [pc, #228]	; (8003420 <_Z16TestTransFwddDQZv+0x128>)
 800333c:	61fb      	str	r3, [r7, #28]

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 800333e:	f107 0210 	add.w	r2, r7, #16
 8003342:	f107 0114 	add.w	r1, r7, #20
 8003346:	f107 0318 	add.w	r3, r7, #24
 800334a:	4618      	mov	r0, r3
 800334c:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003350:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003354:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003358:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800335c:	f7fe fe62 	bl	8002024 <_Z11TransFwdDQZffffRfS_S_>

	if (!MatchThree(i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z)) {
 8003360:	edd7 7a06 	vldr	s15, [r7, #24]
 8003364:	ed97 7a05 	vldr	s14, [r7, #20]
 8003368:	edd7 6a04 	vldr	s13, [r7, #16]
 800336c:	edd7 2a07 	vldr	s5, [r7, #28]
 8003370:	ed97 2a08 	vldr	s4, [r7, #32]
 8003374:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 8003378:	eeb0 1a66 	vmov.f32	s2, s13
 800337c:	eef0 0a47 	vmov.f32	s1, s14
 8003380:	eeb0 0a67 	vmov.f32	s0, s15
 8003384:	f7ff fee0 	bl	8003148 <_Z10MatchThreeffffff>
 8003388:	4603      	mov	r3, r0
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d033      	beq.n	80033fc <_Z16TestTransFwddDQZv+0x104>
		TT_FAIL_PRINT("DQZ currents do not match.\r\n\t\tReceived: i_d = %f i_q = %f i_z = %f\r\n\t\tExpected: i_d = %f i_q = %f i_z = %f\r\n",
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd f8fe 	bl	8000598 <__aeabi_f2d>
 800339c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8f8 	bl	8000598 <__aeabi_f2d>
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fd f8f2 	bl	8000598 <__aeabi_f2d>
 80033b4:	4680      	mov	r8, r0
 80033b6:	4689      	mov	r9, r1
 80033b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033ba:	f7fd f8ed 	bl	8000598 <__aeabi_f2d>
 80033be:	4682      	mov	sl, r0
 80033c0:	468b      	mov	fp, r1
 80033c2:	6a38      	ldr	r0, [r7, #32]
 80033c4:	f7fd f8e8 	bl	8000598 <__aeabi_f2d>
 80033c8:	e9c7 0100 	strd	r0, r1, [r7]
 80033cc:	69f8      	ldr	r0, [r7, #28]
 80033ce:	f7fd f8e3 	bl	8000598 <__aeabi_f2d>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80033da:	ed97 7b00 	vldr	d7, [r7]
 80033de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80033e2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80033e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80033ea:	e9cd 4500 	strd	r4, r5, [sp]
 80033ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <_Z16TestTransFwddDQZv+0x12c>)
 80033f4:	f008 fb90 	bl	800bb18 <iprintf>
				i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z);
		return false;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <_Z16TestTransFwddDQZv+0x106>
	}

	return true;
 80033fc:	2301      	movs	r3, #1
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3738      	adds	r7, #56	; 0x38
 8003402:	46bd      	mov	sp, r7
 8003404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003408:	0800e460 	.word	0x0800e460
 800340c:	0800e47c 	.word	0x0800e47c
 8003410:	42f60000 	.word	0x42f60000
 8003414:	40400000 	.word	0x40400000
 8003418:	3d9794a7 	.word	0x3d9794a7
 800341c:	3fb4c56d 	.word	0x3fb4c56d
 8003420:	405db3d9 	.word	0x405db3d9
 8003424:	0800e4a8 	.word	0x0800e4a8

08003428 <_Z15TestTransRevDQZv>:

bool TestTransRevDQZ() {
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b098      	sub	sp, #96	; 0x60
 800342e:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Reverse DQZ\r\n");
 8003430:	4841      	ldr	r0, [pc, #260]	; (8003538 <_Z15TestTransRevDQZv+0x110>)
 8003432:	f008 fbf7 	bl	800bc24 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 8003436:	4841      	ldr	r0, [pc, #260]	; (800353c <_Z15TestTransRevDQZv+0x114>)
 8003438:	f008 fbf4 	bl	800bc24 <puts>

	float theta = 123.0f;
 800343c:	4b40      	ldr	r3, [pc, #256]	; (8003540 <_Z15TestTransRevDQZv+0x118>)
 800343e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_u = 0.0f;
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
	float i_v = 0.0f;
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
	float i_w = 0.0f;
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	613b      	str	r3, [r7, #16]

	float i_d = 1.0f;
 8003452:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003456:	633b      	str	r3, [r7, #48]	; 0x30
	float i_q = 2.0f;
 8003458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_z = 3.0f;
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <_Z15TestTransRevDQZv+0x11c>)
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28

	float expect_i_u =  -0.082188;
 8003462:	4b39      	ldr	r3, [pc, #228]	; (8003548 <_Z15TestTransRevDQZv+0x120>)
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_v =  2.461964;
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <_Z15TestTransRevDQZv+0x124>)
 8003468:	623b      	str	r3, [r7, #32]
	float expect_i_w =  2.816377;
 800346a:	4b39      	ldr	r3, [pc, #228]	; (8003550 <_Z15TestTransRevDQZv+0x128>)
 800346c:	61fb      	str	r3, [r7, #28]

	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 800346e:	f107 0210 	add.w	r2, r7, #16
 8003472:	f107 0114 	add.w	r1, r7, #20
 8003476:	f107 0318 	add.w	r3, r7, #24
 800347a:	4618      	mov	r0, r3
 800347c:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003480:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003484:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003488:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800348c:	f7fe fe70 	bl	8002170 <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 8003490:	edd7 7a06 	vldr	s15, [r7, #24]
 8003494:	ed97 7a05 	vldr	s14, [r7, #20]
 8003498:	edd7 6a04 	vldr	s13, [r7, #16]
 800349c:	edd7 2a07 	vldr	s5, [r7, #28]
 80034a0:	ed97 2a08 	vldr	s4, [r7, #32]
 80034a4:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80034a8:	eeb0 1a66 	vmov.f32	s2, s13
 80034ac:	eef0 0a47 	vmov.f32	s1, s14
 80034b0:	eeb0 0a67 	vmov.f32	s0, s15
 80034b4:	f7ff fe48 	bl	8003148 <_Z10MatchThreeffffff>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f083 0301 	eor.w	r3, r3, #1
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d033      	beq.n	800352c <_Z15TestTransRevDQZv+0x104>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd f866 	bl	8000598 <__aeabi_f2d>
 80034cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f860 	bl	8000598 <__aeabi_f2d>
 80034d8:	4604      	mov	r4, r0
 80034da:	460d      	mov	r5, r1
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f85a 	bl	8000598 <__aeabi_f2d>
 80034e4:	4680      	mov	r8, r0
 80034e6:	4689      	mov	r9, r1
 80034e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034ea:	f7fd f855 	bl	8000598 <__aeabi_f2d>
 80034ee:	4682      	mov	sl, r0
 80034f0:	468b      	mov	fp, r1
 80034f2:	6a38      	ldr	r0, [r7, #32]
 80034f4:	f7fd f850 	bl	8000598 <__aeabi_f2d>
 80034f8:	e9c7 0100 	strd	r0, r1, [r7]
 80034fc:	69f8      	ldr	r0, [r7, #28]
 80034fe:	f7fd f84b 	bl	8000598 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800350a:	ed97 7b00 	vldr	d7, [r7]
 800350e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003512:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003516:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800351a:	e9cd 4500 	strd	r4, r5, [sp]
 800351e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003522:	480c      	ldr	r0, [pc, #48]	; (8003554 <_Z15TestTransRevDQZv+0x12c>)
 8003524:	f008 faf8 	bl	800bb18 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <_Z15TestTransRevDQZv+0x106>
	}

	return true;
 800352c:	2301      	movs	r3, #1
}
 800352e:	4618      	mov	r0, r3
 8003530:	3738      	adds	r7, #56	; 0x38
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003538:	0800e530 	.word	0x0800e530
 800353c:	0800e47c 	.word	0x0800e47c
 8003540:	42f60000 	.word	0x42f60000
 8003544:	40400000 	.word	0x40400000
 8003548:	bda8522f 	.word	0xbda8522f
 800354c:	401d90d1 	.word	0x401d90d1
 8003550:	40343f85 	.word	0x40343f85
 8003554:	0800e54c 	.word	0x0800e54c

08003558 <_Z18TestTransFwdRevDQZv>:

bool TestTransFwdRevDQZ() {
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b098      	sub	sp, #96	; 0x60
 800355e:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward then Reverse DQZ\r\n");
 8003560:	484f      	ldr	r0, [pc, #316]	; (80036a0 <_Z18TestTransFwdRevDQZv+0x148>)
 8003562:	f008 fb5f 	bl	800bc24 <puts>

	T_TEST_PRINT("Random values.\r\n");
 8003566:	484f      	ldr	r0, [pc, #316]	; (80036a4 <_Z18TestTransFwdRevDQZv+0x14c>)
 8003568:	f008 fb5c 	bl	800bc24 <puts>

	float theta = 123.0f;
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <_Z18TestTransFwdRevDQZv+0x150>)
 800356e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
	float i_q = 0.0f;
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	623b      	str	r3, [r7, #32]
	float i_z = 0.0f;
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	61fb      	str	r3, [r7, #28]

	float i_u = 5.878f;
 8003582:	4b4a      	ldr	r3, [pc, #296]	; (80036ac <_Z18TestTransFwdRevDQZv+0x154>)
 8003584:	61bb      	str	r3, [r7, #24]
	float i_v = -1234.5f;
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <_Z18TestTransFwdRevDQZv+0x158>)
 8003588:	617b      	str	r3, [r7, #20]
	float i_w = 68.547f;
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <_Z18TestTransFwdRevDQZv+0x15c>)
 800358c:	613b      	str	r3, [r7, #16]

	float expect_i_u =  i_u;
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
	float expect_i_v =  i_v;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
	float expect_i_w =  i_w;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	62bb      	str	r3, [r7, #40]	; 0x28

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 800359a:	edd7 7a06 	vldr	s15, [r7, #24]
 800359e:	ed97 7a05 	vldr	s14, [r7, #20]
 80035a2:	edd7 6a04 	vldr	s13, [r7, #16]
 80035a6:	f107 021c 	add.w	r2, r7, #28
 80035aa:	f107 0120 	add.w	r1, r7, #32
 80035ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b2:	4618      	mov	r0, r3
 80035b4:	eef0 1a66 	vmov.f32	s3, s13
 80035b8:	eeb0 1a47 	vmov.f32	s2, s14
 80035bc:	eef0 0a67 	vmov.f32	s1, s15
 80035c0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80035c4:	f7fe fd2e 	bl	8002024 <_Z11TransFwdDQZffffRfS_S_>
	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 80035c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80035cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80035d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d4:	f107 0210 	add.w	r2, r7, #16
 80035d8:	f107 0114 	add.w	r1, r7, #20
 80035dc:	f107 0318 	add.w	r3, r7, #24
 80035e0:	4618      	mov	r0, r3
 80035e2:	eef0 1a66 	vmov.f32	s3, s13
 80035e6:	eeb0 1a47 	vmov.f32	s2, s14
 80035ea:	eef0 0a67 	vmov.f32	s1, s15
 80035ee:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80035f2:	f7fe fdbd 	bl	8002170 <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 80035f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80035fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80035fe:	edd7 6a04 	vldr	s13, [r7, #16]
 8003602:	edd7 2a0a 	vldr	s5, [r7, #40]	; 0x28
 8003606:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 800360a:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 800360e:	eeb0 1a66 	vmov.f32	s2, s13
 8003612:	eef0 0a47 	vmov.f32	s1, s14
 8003616:	eeb0 0a67 	vmov.f32	s0, s15
 800361a:	f7ff fd95 	bl	8003148 <_Z10MatchThreeffffff>
 800361e:	4603      	mov	r3, r0
 8003620:	f083 0301 	eor.w	r3, r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d033      	beq.n	8003692 <_Z18TestTransFwdRevDQZv+0x13a>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ffb3 	bl	8000598 <__aeabi_f2d>
 8003632:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ffad 	bl	8000598 <__aeabi_f2d>
 800363e:	4604      	mov	r4, r0
 8003640:	460d      	mov	r5, r1
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc ffa7 	bl	8000598 <__aeabi_f2d>
 800364a:	4680      	mov	r8, r0
 800364c:	4689      	mov	r9, r1
 800364e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003650:	f7fc ffa2 	bl	8000598 <__aeabi_f2d>
 8003654:	4682      	mov	sl, r0
 8003656:	468b      	mov	fp, r1
 8003658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800365a:	f7fc ff9d 	bl	8000598 <__aeabi_f2d>
 800365e:	e9c7 0100 	strd	r0, r1, [r7]
 8003662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003664:	f7fc ff98 	bl	8000598 <__aeabi_f2d>
 8003668:	4602      	mov	r2, r0
 800366a:	460b      	mov	r3, r1
 800366c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003670:	ed97 7b00 	vldr	d7, [r7]
 8003674:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003678:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800367c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003680:	e9cd 4500 	strd	r4, r5, [sp]
 8003684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <_Z18TestTransFwdRevDQZv+0x160>)
 800368a:	f008 fa45 	bl	800bb18 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <_Z18TestTransFwdRevDQZv+0x13c>
	}

	return true;
 8003692:	2301      	movs	r3, #1
}
 8003694:	4618      	mov	r0, r3
 8003696:	3738      	adds	r7, #56	; 0x38
 8003698:	46bd      	mov	sp, r7
 800369a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800369e:	bf00      	nop
 80036a0:	0800e5d4 	.word	0x0800e5d4
 80036a4:	0800e600 	.word	0x0800e600
 80036a8:	42f60000 	.word	0x42f60000
 80036ac:	40bc1893 	.word	0x40bc1893
 80036b0:	c49a5000 	.word	0xc49a5000
 80036b4:	42891810 	.word	0x42891810
 80036b8:	0800e54c 	.word	0x0800e54c

080036bc <_Z15TestFOCUtilsAllv>:

void TestFOCUtilsAll() {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
	L_PRINT("FOC Utils");
 80036c2:	491a      	ldr	r1, [pc, #104]	; (800372c <_Z15TestFOCUtilsAllv+0x70>)
 80036c4:	481a      	ldr	r0, [pc, #104]	; (8003730 <_Z15TestFOCUtilsAllv+0x74>)
 80036c6:	f008 fa27 	bl	800bb18 <iprintf>
	bool utils_ok = true;
 80036ca:	2301      	movs	r3, #1
 80036cc:	71fb      	strb	r3, [r7, #7]

	utils_ok &= TestTransFwddDQZ();
 80036ce:	f7ff fe13 	bl	80032f8 <_Z16TestTransFwddDQZv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4013      	ands	r3, r2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransRevDQZ();
 80036e4:	f7ff fea0 	bl	8003428 <_Z15TestTransRevDQZv>
 80036e8:	4603      	mov	r3, r0
 80036ea:	461a      	mov	r2, r3
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	bf14      	ite	ne
 80036f4:	2301      	movne	r3, #1
 80036f6:	2300      	moveq	r3, #0
 80036f8:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransFwdRevDQZ();
 80036fa:	f7ff ff2d 	bl	8003558 <_Z18TestTransFwdRevDQZv>
 80036fe:	4603      	mov	r3, r0
 8003700:	461a      	mov	r2, r3
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	71fb      	strb	r3, [r7, #7]

	if (utils_ok) {
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <_Z15TestFOCUtilsAllv+0x62>
		PASS_PRINT("FOC Utils\r\n");
 8003716:	4807      	ldr	r0, [pc, #28]	; (8003734 <_Z15TestFOCUtilsAllv+0x78>)
 8003718:	f008 fa84 	bl	800bc24 <puts>
	} else {
		FAIL_PRINT("FOC Utils\r\n");
	}
}
 800371c:	e002      	b.n	8003724 <_Z15TestFOCUtilsAllv+0x68>
		FAIL_PRINT("FOC Utils\r\n");
 800371e:	4806      	ldr	r0, [pc, #24]	; (8003738 <_Z15TestFOCUtilsAllv+0x7c>)
 8003720:	f008 fa80 	bl	800bc24 <puts>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	0800e624 	.word	0x0800e624
 8003730:	0800e630 	.word	0x0800e630
 8003734:	0800e644 	.word	0x0800e644
 8003738:	0800e668 	.word	0x0800e668

0800373c <_Z21TestMotorDriverCreatev>:

#include "test_framework.hh"
#include "test_motor_driver.hh"
#include "motor_driver.hh"

bool TestMotorDriverCreate() {
 800373c:	b580      	push	{r7, lr}
 800373e:	b08e      	sub	sp, #56	; 0x38
 8003740:	af00      	add	r7, sp, #0
	float duty_cycle_max = 0.95;
 8003742:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <_Z21TestMotorDriverCreatev+0x34>)
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
	float duty_cycle_min = 0.05;
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <_Z21TestMotorDriverCreatev+0x38>)
 8003748:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t pulse_max_in = 0xFFFF;
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	MotorDriver md(duty_cycle_max, duty_cycle_min, pulse_max_in);
 8003750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	4611      	mov	r1, r2
 8003756:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 800375a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800375e:	4618      	mov	r0, r3
 8003760:	f7fe fe1a 	bl	8002398 <_ZN11MotorDriverC1Efft>
	return true;
 8003764:	2301      	movs	r3, #1
}
 8003766:	4618      	mov	r0, r3
 8003768:	3738      	adds	r7, #56	; 0x38
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	3f733333 	.word	0x3f733333
 8003774:	3d4ccccd 	.word	0x3d4ccccd

08003778 <_Z18TestMotorDriverAllv>:

void TestMotorDriverAll() {
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
	L_PRINT("MotorDriver Class");
 800377e:	490f      	ldr	r1, [pc, #60]	; (80037bc <_Z18TestMotorDriverAllv+0x44>)
 8003780:	480f      	ldr	r0, [pc, #60]	; (80037c0 <_Z18TestMotorDriverAllv+0x48>)
 8003782:	f008 f9c9 	bl	800bb18 <iprintf>
	bool md_ok = true;
 8003786:	2301      	movs	r3, #1
 8003788:	71fb      	strb	r3, [r7, #7]
	md_ok &= TestMotorDriverCreate();
 800378a:	f7ff ffd7 	bl	800373c <_Z21TestMotorDriverCreatev>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	71fb      	strb	r3, [r7, #7]
	if (md_ok) {
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <_Z18TestMotorDriverAllv+0x36>
		PASS_PRINT("MotorDriver Class\r\n");
 80037a6:	4807      	ldr	r0, [pc, #28]	; (80037c4 <_Z18TestMotorDriverAllv+0x4c>)
 80037a8:	f008 fa3c 	bl	800bc24 <puts>
	} else {
		FAIL_PRINT("MotorDriver Class\r\n");
	}

}
 80037ac:	e002      	b.n	80037b4 <_Z18TestMotorDriverAllv+0x3c>
		FAIL_PRINT("MotorDriver Class\r\n");
 80037ae:	4806      	ldr	r0, [pc, #24]	; (80037c8 <_Z18TestMotorDriverAllv+0x50>)
 80037b0:	f008 fa38 	bl	800bc24 <puts>
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800e68c 	.word	0x0800e68c
 80037c0:	0800e6a0 	.word	0x0800e6a0
 80037c4:	0800e6b4 	.word	0x0800e6b4
 80037c8:	0800e6e0 	.word	0x0800e6e0

080037cc <_Z23TestPIDControllerCreatev>:
#include "pid_controller.hh"
#include "foc_utils.hh"

const float kErrorMargin = 0.01;

bool TestPIDControllerCreate() {
 80037cc:	b5b0      	push	{r4, r5, r7, lr}
 80037ce:	b090      	sub	sp, #64	; 0x40
 80037d0:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 80037d2:	485a      	ldr	r0, [pc, #360]	; (800393c <_Z23TestPIDControllerCreatev+0x170>)
 80037d4:	f008 fa26 	bl	800bc24 <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 80037d8:	4859      	ldr	r0, [pc, #356]	; (8003940 <_Z23TestPIDControllerCreatev+0x174>)
 80037da:	f008 fa23 	bl	800bc24 <puts>
	float k_p = 1.2;
 80037de:	4b59      	ldr	r3, [pc, #356]	; (8003944 <_Z23TestPIDControllerCreatev+0x178>)
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
	float k_i = 3.4;
 80037e2:	4b59      	ldr	r3, [pc, #356]	; (8003948 <_Z23TestPIDControllerCreatev+0x17c>)
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
	float k_d = 5.6;
 80037e6:	4b59      	ldr	r3, [pc, #356]	; (800394c <_Z23TestPIDControllerCreatev+0x180>)
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ramp = 5.1;
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <_Z23TestPIDControllerCreatev+0x184>)
 80037ec:	62bb      	str	r3, [r7, #40]	; 0x28
	float limit = 2.2;
 80037ee:	4b59      	ldr	r3, [pc, #356]	; (8003954 <_Z23TestPIDControllerCreatev+0x188>)
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController pid(k_p, k_i, k_d, ramp, limit);
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 80037f8:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 80037fc:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003800:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003804:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fa3f 	bl	8001c8c <_ZN13PIDControllerC1Efffff>

	if (pid.k_p != k_p) {
 800380e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003812:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003816:	eeb4 7a67 	vcmp.f32	s14, s15
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	d013      	beq.n	8003848 <_Z23TestPIDControllerCreatev+0x7c>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8003820:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003822:	f7fc feb9 	bl	8000598 <__aeabi_f2d>
 8003826:	4604      	mov	r4, r0
 8003828:	460d      	mov	r5, r1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc feb3 	bl	8000598 <__aeabi_f2d>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	e9cd 2300 	strd	r2, r3, [sp]
 800383a:	4622      	mov	r2, r4
 800383c:	462b      	mov	r3, r5
 800383e:	4846      	ldr	r0, [pc, #280]	; (8003958 <_Z23TestPIDControllerCreatev+0x18c>)
 8003840:	f008 f96a 	bl	800bb18 <iprintf>
		return false;
 8003844:	2300      	movs	r3, #0
 8003846:	e074      	b.n	8003932 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_i != k_i) {
 8003848:	edd7 7a02 	vldr	s15, [r7, #8]
 800384c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003850:	eeb4 7a67 	vcmp.f32	s14, s15
 8003854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003858:	d013      	beq.n	8003882 <_Z23TestPIDControllerCreatev+0xb6>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 800385a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800385c:	f7fc fe9c 	bl	8000598 <__aeabi_f2d>
 8003860:	4604      	mov	r4, r0
 8003862:	460d      	mov	r5, r1
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fe96 	bl	8000598 <__aeabi_f2d>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	e9cd 2300 	strd	r2, r3, [sp]
 8003874:	4622      	mov	r2, r4
 8003876:	462b      	mov	r3, r5
 8003878:	4838      	ldr	r0, [pc, #224]	; (800395c <_Z23TestPIDControllerCreatev+0x190>)
 800387a:	f008 f94d 	bl	800bb18 <iprintf>
		return false;
 800387e:	2300      	movs	r3, #0
 8003880:	e057      	b.n	8003932 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_d != k_d) {
 8003882:	edd7 7a03 	vldr	s15, [r7, #12]
 8003886:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800388a:	eeb4 7a67 	vcmp.f32	s14, s15
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d013      	beq.n	80038bc <_Z23TestPIDControllerCreatev+0xf0>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 8003894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003896:	f7fc fe7f 	bl	8000598 <__aeabi_f2d>
 800389a:	4604      	mov	r4, r0
 800389c:	460d      	mov	r5, r1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fe79 	bl	8000598 <__aeabi_f2d>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	e9cd 2300 	strd	r2, r3, [sp]
 80038ae:	4622      	mov	r2, r4
 80038b0:	462b      	mov	r3, r5
 80038b2:	482b      	ldr	r0, [pc, #172]	; (8003960 <_Z23TestPIDControllerCreatev+0x194>)
 80038b4:	f008 f930 	bl	800bb18 <iprintf>
		return false;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e03a      	b.n	8003932 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.ramp != ramp) {
 80038bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80038c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80038c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038cc:	d013      	beq.n	80038f6 <_Z23TestPIDControllerCreatev+0x12a>
		T_FAIL_PRINT("Incorrect ramp, constructed with %f but got %f.\r\n", ramp, pid.ramp);
 80038ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d0:	f7fc fe62 	bl	8000598 <__aeabi_f2d>
 80038d4:	4604      	mov	r4, r0
 80038d6:	460d      	mov	r5, r1
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe5c 	bl	8000598 <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	e9cd 2300 	strd	r2, r3, [sp]
 80038e8:	4622      	mov	r2, r4
 80038ea:	462b      	mov	r3, r5
 80038ec:	481d      	ldr	r0, [pc, #116]	; (8003964 <_Z23TestPIDControllerCreatev+0x198>)
 80038ee:	f008 f913 	bl	800bb18 <iprintf>
		return false;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e01d      	b.n	8003932 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.limit != limit) {
 80038f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8003902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003906:	d013      	beq.n	8003930 <_Z23TestPIDControllerCreatev+0x164>
		T_FAIL_PRINT("Incorrect limit, constructed with %f but got %f.\r\n", limit, pid.limit);
 8003908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800390a:	f7fc fe45 	bl	8000598 <__aeabi_f2d>
 800390e:	4604      	mov	r4, r0
 8003910:	460d      	mov	r5, r1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4618      	mov	r0, r3
 8003916:	f7fc fe3f 	bl	8000598 <__aeabi_f2d>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	e9cd 2300 	strd	r2, r3, [sp]
 8003922:	4622      	mov	r2, r4
 8003924:	462b      	mov	r3, r5
 8003926:	4810      	ldr	r0, [pc, #64]	; (8003968 <_Z23TestPIDControllerCreatev+0x19c>)
 8003928:	f008 f8f6 	bl	800bb18 <iprintf>
		return false;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <_Z23TestPIDControllerCreatev+0x166>
}

	return true;
 8003930:	2301      	movs	r3, #1
}
 8003932:	4618      	mov	r0, r3
 8003934:	3738      	adds	r7, #56	; 0x38
 8003936:	46bd      	mov	sp, r7
 8003938:	bdb0      	pop	{r4, r5, r7, pc}
 800393a:	bf00      	nop
 800393c:	0800e70c 	.word	0x0800e70c
 8003940:	0800e734 	.word	0x0800e734
 8003944:	3f99999a 	.word	0x3f99999a
 8003948:	4059999a 	.word	0x4059999a
 800394c:	40b33333 	.word	0x40b33333
 8003950:	40a33333 	.word	0x40a33333
 8003954:	400ccccd 	.word	0x400ccccd
 8003958:	0800e764 	.word	0x0800e764
 800395c:	0800e7b0 	.word	0x0800e7b0
 8003960:	0800e7fc 	.word	0x0800e7fc
 8003964:	0800e848 	.word	0x0800e848
 8003968:	0800e894 	.word	0x0800e894

0800396c <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b092      	sub	sp, #72	; 0x48
 8003970:	af02      	add	r7, sp, #8
	float state = 0;
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
	float target = 0;
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	63bb      	str	r3, [r7, #56]	; 0x38
	float output = 0;
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	637b      	str	r3, [r7, #52]	; 0x34

	float ramp = 0;
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
	float limit = 0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c

	TEST_PRINT("Test PID Controller Response.\r\n");
 8003990:	48b7      	ldr	r0, [pc, #732]	; (8003c70 <_Z25TestPIDControllerResponsev+0x304>)
 8003992:	f008 f947 	bl	800bc24 <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 8003996:	48b7      	ldr	r0, [pc, #732]	; (8003c74 <_Z25TestPIDControllerResponsev+0x308>)
 8003998:	f008 f944 	bl	800bc24 <puts>
	PIDController pid = PIDController(0, 0, 0, ramp, limit);
 800399c:	1d3b      	adds	r3, r7, #4
 800399e:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 80039a2:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 80039a6:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8003c78 <_Z25TestPIDControllerResponsev+0x30c>
 80039aa:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8003c78 <_Z25TestPIDControllerResponsev+0x30c>
 80039ae:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003c78 <_Z25TestPIDControllerResponsev+0x30c>
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f96a 	bl	8001c8c <_ZN13PIDControllerC1Efffff>
	output = pid.Update(0.0f, 10.0f);
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80039be:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8003c78 <_Z25TestPIDControllerResponsev+0x30c>
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe f9a8 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 80039c8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	if (output != 0) {
 80039cc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	d00f      	beq.n	80039fa <_Z25TestPIDControllerResponsev+0x8e>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, output);
 80039da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039dc:	f7fc fddc 	bl	8000598 <__aeabi_f2d>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	e9cd 2300 	strd	r2, r3, [sp]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	48a2      	ldr	r0, [pc, #648]	; (8003c7c <_Z25TestPIDControllerResponsev+0x310>)
 80039f2:	f008 f891 	bl	800bb18 <iprintf>
		return false;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e282      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 80039fa:	48a1      	ldr	r0, [pc, #644]	; (8003c80 <_Z25TestPIDControllerResponsev+0x314>)
 80039fc:	f008 f912 	bl	800bc24 <puts>
	state = 1.0;
 8003a00:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a04:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 2.0;
 8003a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
	pid.k_p = 5.0;
 8003a0c:	4b9d      	ldr	r3, [pc, #628]	; (8003c84 <_Z25TestPIDControllerResponsev+0x318>)
 8003a0e:	607b      	str	r3, [r7, #4]
	output = pid.Update(state - target, 10.5);
 8003a10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	eef2 0a05 	vmov.f32	s1, #37	; 0x41280000  10.5
 8003a22:	eeb0 0a67 	vmov.f32	s0, s15
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe f976 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003a2c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float expect_output = (1.0 - 2.0) * 5.0;
 8003a30:	4b95      	ldr	r3, [pc, #596]	; (8003c88 <_Z25TestPIDControllerResponsev+0x31c>)
 8003a32:	62bb      	str	r3, [r7, #40]	; 0x28
	if (output != expect_output) {
 8003a34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a3c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a44:	d012      	beq.n	8003a6c <_Z25TestPIDControllerResponsev+0x100>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 8003a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a48:	f7fc fda6 	bl	8000598 <__aeabi_f2d>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	460d      	mov	r5, r1
 8003a50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a52:	f7fc fda1 	bl	8000598 <__aeabi_f2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a5e:	4622      	mov	r2, r4
 8003a60:	462b      	mov	r3, r5
 8003a62:	488a      	ldr	r0, [pc, #552]	; (8003c8c <_Z25TestPIDControllerResponsev+0x320>)
 8003a64:	f008 f858 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e249      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 8003a6c:	4888      	ldr	r0, [pc, #544]	; (8003c90 <_Z25TestPIDControllerResponsev+0x324>)
 8003a6e:	f008 f8d9 	bl	800bc24 <puts>
	float prev_error = state - target;
 8003a72:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a76:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid.k_p = 0;
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
	pid.k_i = 3;
 8003a88:	4b82      	ldr	r3, [pc, #520]	; (8003c94 <_Z25TestPIDControllerResponsev+0x328>)
 8003a8a:	60bb      	str	r3, [r7, #8]
	target = 98.5;
 8003a8c:	4b82      	ldr	r3, [pc, #520]	; (8003c98 <_Z25TestPIDControllerResponsev+0x32c>)
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 70;
 8003a90:	4b82      	ldr	r3, [pc, #520]	; (8003c9c <_Z25TestPIDControllerResponsev+0x330>)
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 10.7);
 8003a94:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a98:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa0:	1d3b      	adds	r3, r7, #4
 8003aa2:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8003ca0 <_Z25TestPIDControllerResponsev+0x334>
 8003aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe f934 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003ab0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = pid.k_i * (prev_error + (state - target)) * 10.7f / 2.0f;
 8003ab4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ab8:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003abc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ac0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ac4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003ca0 <_Z25TestPIDControllerResponsev+0x334>
 8003ad4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ad8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003adc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003ae4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003ae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	dd13      	ble.n	8003b1e <_Z25TestPIDControllerResponsev+0x1b2>
 8003af6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003afa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b02:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003ca4 <_Z25TestPIDControllerResponsev+0x338>
 8003b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b0e:	bf4c      	ite	mi
 8003b10:	2301      	movmi	r3, #1
 8003b12:	2300      	movpl	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f083 0301 	eor.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e012      	b.n	8003b44 <_Z25TestPIDControllerResponsev+0x1d8>
 8003b1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b2a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ca4 <_Z25TestPIDControllerResponsev+0x338>
 8003b2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b36:	bf4c      	ite	mi
 8003b38:	2301      	movmi	r3, #1
 8003b3a:	2300      	movpl	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f083 0301 	eor.w	r3, r3, #1
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <_Z25TestPIDControllerResponsev+0x202>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 8003b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b4a:	f7fc fd25 	bl	8000598 <__aeabi_f2d>
 8003b4e:	4604      	mov	r4, r0
 8003b50:	460d      	mov	r5, r1
 8003b52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b54:	f7fc fd20 	bl	8000598 <__aeabi_f2d>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b60:	4622      	mov	r2, r4
 8003b62:	462b      	mov	r3, r5
 8003b64:	4850      	ldr	r0, [pc, #320]	; (8003ca8 <_Z25TestPIDControllerResponsev+0x33c>)
 8003b66:	f007 ffd7 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e1c8      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 8003b6e:	484f      	ldr	r0, [pc, #316]	; (8003cac <_Z25TestPIDControllerResponsev+0x340>)
 8003b70:	f008 f858 	bl	800bc24 <puts>
	prev_error = state - target;
 8003b74:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b78:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	target = 2;
 8003b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 5;
 8003b8a:	4b3e      	ldr	r3, [pc, #248]	; (8003c84 <_Z25TestPIDControllerResponsev+0x318>)
 8003b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 11.9);
 8003b8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003cb0 <_Z25TestPIDControllerResponsev+0x344>
 8003ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe f8b7 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003baa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output += pid.k_i * (prev_error + (state - target)) * 11.9f / 2.0f;
 8003bae:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bb2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003bb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003bba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003bbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003cb0 <_Z25TestPIDControllerResponsev+0x344>
 8003bce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bd2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003be2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003be6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf6:	dd13      	ble.n	8003c20 <_Z25TestPIDControllerResponsev+0x2b4>
 8003bf8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c04:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003ca4 <_Z25TestPIDControllerResponsev+0x338>
 8003c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	bf4c      	ite	mi
 8003c12:	2301      	movmi	r3, #1
 8003c14:	2300      	movpl	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f083 0301 	eor.w	r3, r3, #1
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	e012      	b.n	8003c46 <_Z25TestPIDControllerResponsev+0x2da>
 8003c20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c2c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003ca4 <_Z25TestPIDControllerResponsev+0x338>
 8003c30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c38:	bf4c      	ite	mi
 8003c3a:	2301      	movmi	r3, #1
 8003c3c:	2300      	movpl	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f083 0301 	eor.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d036      	beq.n	8003cb8 <_Z25TestPIDControllerResponsev+0x34c>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 8003c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c4c:	f7fc fca4 	bl	8000598 <__aeabi_f2d>
 8003c50:	4604      	mov	r4, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c56:	f7fc fc9f 	bl	8000598 <__aeabi_f2d>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8003c62:	4622      	mov	r2, r4
 8003c64:	462b      	mov	r3, r5
 8003c66:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <_Z25TestPIDControllerResponsev+0x348>)
 8003c68:	f007 ff56 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e147      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
 8003c70:	0800e8e0 	.word	0x0800e8e0
 8003c74:	0800e910 	.word	0x0800e910
 8003c78:	00000000 	.word	0x00000000
 8003c7c:	0800e950 	.word	0x0800e950
 8003c80:	0800e9a4 	.word	0x0800e9a4
 8003c84:	40a00000 	.word	0x40a00000
 8003c88:	c0a00000 	.word	0xc0a00000
 8003c8c:	0800e9c4 	.word	0x0800e9c4
 8003c90:	0800ea14 	.word	0x0800ea14
 8003c94:	40400000 	.word	0x40400000
 8003c98:	42c50000 	.word	0x42c50000
 8003c9c:	428c0000 	.word	0x428c0000
 8003ca0:	412b3333 	.word	0x412b3333
 8003ca4:	3c23d70a 	.word	0x3c23d70a
 8003ca8:	0800ea34 	.word	0x0800ea34
 8003cac:	0800ea84 	.word	0x0800ea84
 8003cb0:	413e6666 	.word	0x413e6666
 8003cb4:	0800eaa4 	.word	0x0800eaa4
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 8003cb8:	4893      	ldr	r0, [pc, #588]	; (8003f08 <_Z25TestPIDControllerResponsev+0x59c>)
 8003cba:	f007 ffb3 	bl	800bc24 <puts>
	pid.Reset();
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f921 	bl	8001f08 <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	607b      	str	r3, [r7, #4]
	pid.k_i = 0;
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
	pid.k_d = 0;
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
	output = pid.Update(5.0, 1.2);
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8003f0c <_Z25TestPIDControllerResponsev+0x5a0>
 8003cde:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe f818 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003ce8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003cf2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	dd13      	ble.n	8003d2c <_Z25TestPIDControllerResponsev+0x3c0>
 8003d04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d10:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003d14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1c:	bf4c      	ite	mi
 8003d1e:	2301      	movmi	r3, #1
 8003d20:	2300      	movpl	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	f083 0301 	eor.w	r3, r3, #1
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	e012      	b.n	8003d52 <_Z25TestPIDControllerResponsev+0x3e6>
 8003d2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d38:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	bf4c      	ite	mi
 8003d46:	2301      	movmi	r3, #1
 8003d48:	2300      	movpl	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <_Z25TestPIDControllerResponsev+0x410>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 8003d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d58:	f7fc fc1e 	bl	8000598 <__aeabi_f2d>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	460d      	mov	r5, r1
 8003d60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d62:	f7fc fc19 	bl	8000598 <__aeabi_f2d>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d6e:	4622      	mov	r2, r4
 8003d70:	462b      	mov	r3, r5
 8003d72:	4868      	ldr	r0, [pc, #416]	; (8003f14 <_Z25TestPIDControllerResponsev+0x5a8>)
 8003d74:	f007 fed0 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e0c1      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 8003d7c:	4866      	ldr	r0, [pc, #408]	; (8003f18 <_Z25TestPIDControllerResponsev+0x5ac>)
 8003d7e:	f007 ff51 	bl	800bc24 <puts>
	state = 0;
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 0;
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8003d8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003d92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	1d3b      	adds	r3, r7, #4
 8003d9c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fd ffb7 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003daa:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003db4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003db8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc4:	dd13      	ble.n	8003dee <_Z25TestPIDControllerResponsev+0x482>
 8003dc6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003dca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dd2:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dde:	bf4c      	ite	mi
 8003de0:	2301      	movmi	r3, #1
 8003de2:	2300      	movpl	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	e012      	b.n	8003e14 <_Z25TestPIDControllerResponsev+0x4a8>
 8003dee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003df2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfa:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003dfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	bf4c      	ite	mi
 8003e08:	2301      	movmi	r3, #1
 8003e0a:	2300      	movpl	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f083 0301 	eor.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <_Z25TestPIDControllerResponsev+0x4d2>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 8003e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e1a:	f7fc fbbd 	bl	8000598 <__aeabi_f2d>
 8003e1e:	4604      	mov	r4, r0
 8003e20:	460d      	mov	r5, r1
 8003e22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e24:	f7fc fbb8 	bl	8000598 <__aeabi_f2d>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	e9cd 2300 	strd	r2, r3, [sp]
 8003e30:	4622      	mov	r2, r4
 8003e32:	462b      	mov	r3, r5
 8003e34:	4839      	ldr	r0, [pc, #228]	; (8003f1c <_Z25TestPIDControllerResponsev+0x5b0>)
 8003e36:	f007 fe6f 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	e060      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 8003e3e:	4838      	ldr	r0, [pc, #224]	; (8003f20 <_Z25TestPIDControllerResponsev+0x5b4>)
 8003e40:	f007 fef0 	bl	800bc24 <puts>
	pid.k_d = 13.5;
 8003e44:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <_Z25TestPIDControllerResponsev+0x5b8>)
 8003e46:	60fb      	str	r3, [r7, #12]
	state = -487.3;
 8003e48:	4b37      	ldr	r3, [pc, #220]	; (8003f28 <_Z25TestPIDControllerResponsev+0x5bc>)
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 22;
 8003e4c:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <_Z25TestPIDControllerResponsev+0x5c0>)
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8003e50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003e54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e5c:	1d3b      	adds	r3, r7, #4
 8003e5e:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003e62:	eeb0 0a67 	vmov.f32	s0, s15
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fd ff56 	bl	8001d18 <_ZN13PIDController6UpdateEff>
 8003e6c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = (-487.3 - 22) * 13.5 / 10;
 8003e70:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <_Z25TestPIDControllerResponsev+0x5c4>)
 8003e72:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003e74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e84:	dd13      	ble.n	8003eae <_Z25TestPIDControllerResponsev+0x542>
 8003e86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003e96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	bf4c      	ite	mi
 8003ea0:	2301      	movmi	r3, #1
 8003ea2:	2300      	movpl	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	f083 0301 	eor.w	r3, r3, #1
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	e012      	b.n	8003ed4 <_Z25TestPIDControllerResponsev+0x568>
 8003eae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003eb2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003f10 <_Z25TestPIDControllerResponsev+0x5a4>
 8003ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec6:	bf4c      	ite	mi
 8003ec8:	2301      	movmi	r3, #1
 8003eca:	2300      	movpl	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f083 0301 	eor.w	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d012      	beq.n	8003efe <_Z25TestPIDControllerResponsev+0x592>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 8003ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eda:	f7fc fb5d 	bl	8000598 <__aeabi_f2d>
 8003ede:	4604      	mov	r4, r0
 8003ee0:	460d      	mov	r5, r1
 8003ee2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ee4:	f7fc fb58 	bl	8000598 <__aeabi_f2d>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	e9cd 2300 	strd	r2, r3, [sp]
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	480f      	ldr	r0, [pc, #60]	; (8003f34 <_Z25TestPIDControllerResponsev+0x5c8>)
 8003ef6:	f007 fe0f 	bl	800bb18 <iprintf>
				expect_output, output);
		return false;
 8003efa:	2300      	movs	r3, #0
 8003efc:	e000      	b.n	8003f00 <_Z25TestPIDControllerResponsev+0x594>
	}

	// TODO: test ramp and limit

	return true;
 8003efe:	2301      	movs	r3, #1
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3740      	adds	r7, #64	; 0x40
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bdb0      	pop	{r4, r5, r7, pc}
 8003f08:	0800eaf4 	.word	0x0800eaf4
 8003f0c:	3f99999a 	.word	0x3f99999a
 8003f10:	3c23d70a 	.word	0x3c23d70a
 8003f14:	0800eb18 	.word	0x0800eb18
 8003f18:	0800eb68 	.word	0x0800eb68
 8003f1c:	0800eb8c 	.word	0x0800eb8c
 8003f20:	0800ebdc 	.word	0x0800ebdc
 8003f24:	41580000 	.word	0x41580000
 8003f28:	c3f3a666 	.word	0xc3f3a666
 8003f2c:	41b00000 	.word	0x41b00000
 8003f30:	c42be385 	.word	0xc42be385
 8003f34:	0800ebfc 	.word	0x0800ebfc

08003f38 <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 8003f3e:	4915      	ldr	r1, [pc, #84]	; (8003f94 <_Z20TestPIDControllerAllv+0x5c>)
 8003f40:	4815      	ldr	r0, [pc, #84]	; (8003f98 <_Z20TestPIDControllerAllv+0x60>)
 8003f42:	f007 fde9 	bl	800bb18 <iprintf>
	bool pid_passed = true;
 8003f46:	2301      	movs	r3, #1
 8003f48:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 8003f4a:	f7ff fc3f 	bl	80037cc <_Z23TestPIDControllerCreatev>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	461a      	mov	r2, r3
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	bf14      	ite	ne
 8003f5a:	2301      	movne	r3, #1
 8003f5c:	2300      	moveq	r3, #0
 8003f5e:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 8003f60:	f7ff fd04 	bl	800396c <_Z25TestPIDControllerResponsev>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bf14      	ite	ne
 8003f70:	2301      	movne	r3, #1
 8003f72:	2300      	moveq	r3, #0
 8003f74:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 8003f7c:	4807      	ldr	r0, [pc, #28]	; (8003f9c <_Z20TestPIDControllerAllv+0x64>)
 8003f7e:	f007 fe51 	bl	800bc24 <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 8003f82:	e002      	b.n	8003f8a <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 8003f84:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <_Z20TestPIDControllerAllv+0x68>)
 8003f86:	f007 fe4d 	bl	800bc24 <puts>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800ec4c 	.word	0x0800ec4c
 8003f98:	0800ec68 	.word	0x0800ec68
 8003f9c:	0800ec7c 	.word	0x0800ec7c
 8003fa0:	0800ecac 	.word	0x0800ecac

08003fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
	dbprint_uart = &huart3;
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <main+0x68>)
 8003faa:	4a19      	ldr	r2, [pc, #100]	; (8004010 <main+0x6c>)
 8003fac:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <main+0x70>)
 8003fb0:	4a19      	ldr	r2, [pc, #100]	; (8004018 <main+0x74>)
 8003fb2:	601a      	str	r2, [r3, #0]
	half_bridge_pwm_timer = &htim1;
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <main+0x78>)
 8003fb6:	4a1a      	ldr	r2, [pc, #104]	; (8004020 <main+0x7c>)
 8003fb8:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fba:	f001 f832 	bl	8005022 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003fbe:	f000 f837 	bl	8004030 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fc2:	f000 fb7f 	bl	80046c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003fc6:	f000 fb5f 	bl	8004688 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003fca:	f000 faff 	bl	80045cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003fce:	f000 fb2d 	bl	800462c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8003fd2:	f000 f917 	bl	8004204 <MX_SPI5_Init>
  MX_ADC1_Init();
 8003fd6:	f000 f899 	bl	800410c <MX_ADC1_Init>
  MX_TIM4_Init();
 8003fda:	f000 fa81 	bl	80044e0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003fde:	f000 f94f 	bl	8004280 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003fe2:	f000 fa11 	bl	8004408 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	2110      	movs	r1, #16
 8003fea:	480e      	ldr	r0, [pc, #56]	; (8004024 <main+0x80>)
 8003fec:	f002 fae2 	bl	80065b4 <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curr_sense_adc_buf, ADC_BUF_LEN) != HAL_OK) {
 8003ff0:	2204      	movs	r2, #4
 8003ff2:	490d      	ldr	r1, [pc, #52]	; (8004028 <main+0x84>)
 8003ff4:	480d      	ldr	r0, [pc, #52]	; (800402c <main+0x88>)
 8003ff6:	f001 f8d9 	bl	80051ac <HAL_ADC_Start_DMA>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <main+0x60>
  	  Error_Handler();
 8004000:	f000 fc46 	bl	8004890 <Error_Handler>
  }

  main_run();
 8004004:	f7fe fa76 	bl	80024f4 <main_run>

  while (1)
 8004008:	e7fe      	b.n	8004008 <main+0x64>
 800400a:	bf00      	nop
 800400c:	20000878 	.word	0x20000878
 8004010:	200003f0 	.word	0x200003f0
 8004014:	2000087c 	.word	0x2000087c
 8004018:	200002a8 	.word	0x200002a8
 800401c:	20000888 	.word	0x20000888
 8004020:	2000030c 	.word	0x2000030c
 8004024:	40020000 	.word	0x40020000
 8004028:	20000880 	.word	0x20000880
 800402c:	20000200 	.word	0x20000200

08004030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b094      	sub	sp, #80	; 0x50
 8004034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004036:	f107 0320 	add.w	r3, r7, #32
 800403a:	2230      	movs	r2, #48	; 0x30
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f007 f818 	bl	800b074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004054:	f002 fc10 	bl	8006878 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004058:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <SystemClock_Config+0xd4>)
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	4a29      	ldr	r2, [pc, #164]	; (8004104 <SystemClock_Config+0xd4>)
 800405e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004062:	6413      	str	r3, [r2, #64]	; 0x40
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <SystemClock_Config+0xd4>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <SystemClock_Config+0xd8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <SystemClock_Config+0xd8>)
 8004076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <SystemClock_Config+0xd8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004084:	607b      	str	r3, [r7, #4]
 8004086:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004088:	2301      	movs	r3, #1
 800408a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800408c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004092:	2302      	movs	r3, #2
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800409c:	2304      	movs	r3, #4
 800409e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80040a0:	23d8      	movs	r3, #216	; 0xd8
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040a4:	2302      	movs	r3, #2
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80040a8:	2309      	movs	r3, #9
 80040aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040ac:	f107 0320 	add.w	r3, r7, #32
 80040b0:	4618      	mov	r0, r3
 80040b2:	f002 fc41 	bl	8006938 <HAL_RCC_OscConfig>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80040bc:	f000 fbe8 	bl	8004890 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040c0:	f002 fbea 	bl	8006898 <HAL_PWREx_EnableOverDrive>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80040ca:	f000 fbe1 	bl	8004890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040ce:	230f      	movs	r3, #15
 80040d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040d2:	2302      	movs	r3, #2
 80040d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80040e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80040e6:	f107 030c 	add.w	r3, r7, #12
 80040ea:	2107      	movs	r1, #7
 80040ec:	4618      	mov	r0, r3
 80040ee:	f002 fec7 	bl	8006e80 <HAL_RCC_ClockConfig>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80040f8:	f000 fbca 	bl	8004890 <Error_Handler>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3750      	adds	r7, #80	; 0x50
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40023800 	.word	0x40023800
 8004108:	40007000 	.word	0x40007000

0800410c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004112:	463b      	mov	r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004120:	4a37      	ldr	r2, [pc, #220]	; (8004200 <MX_ADC1_Init+0xf4>)
 8004122:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004124:	4b35      	ldr	r3, [pc, #212]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004126:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800412a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <MX_ADC1_Init+0xf0>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004132:	4b32      	ldr	r3, [pc, #200]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004134:	2201      	movs	r2, #1
 8004136:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <MX_ADC1_Init+0xf0>)
 800413a:	2200      	movs	r2, #0
 800413c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800413e:	4b2f      	ldr	r3, [pc, #188]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004146:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800414e:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004150:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004156:	4b29      	ldr	r3, [pc, #164]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004158:	2200      	movs	r2, #0
 800415a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <MX_ADC1_Init+0xf0>)
 800415e:	2204      	movs	r2, #4
 8004160:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004162:	4b26      	ldr	r3, [pc, #152]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <MX_ADC1_Init+0xf0>)
 800416c:	2200      	movs	r2, #0
 800416e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004170:	4822      	ldr	r0, [pc, #136]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004172:	f000 ffd7 	bl	8005124 <HAL_ADC_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800417c:	f000 fb88 	bl	8004890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004180:	2301      	movs	r3, #1
 8004182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004184:	2301      	movs	r3, #1
 8004186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8004188:	2303      	movs	r3, #3
 800418a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800418c:	463b      	mov	r3, r7
 800418e:	4619      	mov	r1, r3
 8004190:	481a      	ldr	r0, [pc, #104]	; (80041fc <MX_ADC1_Init+0xf0>)
 8004192:	f001 f923 	bl	80053dc <HAL_ADC_ConfigChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800419c:	f000 fb78 	bl	8004890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80041a0:	2309      	movs	r3, #9
 80041a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80041a4:	2302      	movs	r3, #2
 80041a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041a8:	463b      	mov	r3, r7
 80041aa:	4619      	mov	r1, r3
 80041ac:	4813      	ldr	r0, [pc, #76]	; (80041fc <MX_ADC1_Init+0xf0>)
 80041ae:	f001 f915 	bl	80053dc <HAL_ADC_ConfigChannel>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80041b8:	f000 fb6a 	bl	8004890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80041bc:	2308      	movs	r3, #8
 80041be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80041c0:	2303      	movs	r3, #3
 80041c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041c4:	463b      	mov	r3, r7
 80041c6:	4619      	mov	r1, r3
 80041c8:	480c      	ldr	r0, [pc, #48]	; (80041fc <MX_ADC1_Init+0xf0>)
 80041ca:	f001 f907 	bl	80053dc <HAL_ADC_ConfigChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80041d4:	f000 fb5c 	bl	8004890 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80041d8:	230c      	movs	r3, #12
 80041da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80041dc:	2304      	movs	r3, #4
 80041de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80041e0:	463b      	mov	r3, r7
 80041e2:	4619      	mov	r1, r3
 80041e4:	4805      	ldr	r0, [pc, #20]	; (80041fc <MX_ADC1_Init+0xf0>)
 80041e6:	f001 f8f9 	bl	80053dc <HAL_ADC_ConfigChannel>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80041f0:	f000 fb4e 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20000200 	.word	0x20000200
 8004200:	40012000 	.word	0x40012000

08004204 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8004208:	4b1b      	ldr	r3, [pc, #108]	; (8004278 <MX_SPI5_Init+0x74>)
 800420a:	4a1c      	ldr	r2, [pc, #112]	; (800427c <MX_SPI5_Init+0x78>)
 800420c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <MX_SPI5_Init+0x74>)
 8004210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004214:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <MX_SPI5_Init+0x74>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800421c:	4b16      	ldr	r3, [pc, #88]	; (8004278 <MX_SPI5_Init+0x74>)
 800421e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004222:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <MX_SPI5_Init+0x74>)
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <MX_SPI5_Init+0x74>)
 800422c:	2201      	movs	r2, #1
 800422e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <MX_SPI5_Init+0x74>)
 8004232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004236:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <MX_SPI5_Init+0x74>)
 800423a:	2218      	movs	r2, #24
 800423c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <MX_SPI5_Init+0x74>)
 8004240:	2200      	movs	r2, #0
 8004242:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <MX_SPI5_Init+0x74>)
 8004246:	2200      	movs	r2, #0
 8004248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <MX_SPI5_Init+0x74>)
 800424c:	2200      	movs	r2, #0
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <MX_SPI5_Init+0x74>)
 8004252:	2207      	movs	r2, #7
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <MX_SPI5_Init+0x74>)
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <MX_SPI5_Init+0x74>)
 800425e:	2200      	movs	r2, #0
 8004260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <MX_SPI5_Init+0x74>)
 8004264:	f003 fb7c 	bl	8007960 <HAL_SPI_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800426e:	f000 fb0f 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200002a8 	.word	0x200002a8
 800427c:	40015000 	.word	0x40015000

08004280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b09a      	sub	sp, #104	; 0x68
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004286:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004294:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
 80042b0:	615a      	str	r2, [r3, #20]
 80042b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	222c      	movs	r2, #44	; 0x2c
 80042b8:	2100      	movs	r1, #0
 80042ba:	4618      	mov	r0, r3
 80042bc:	f006 feda 	bl	800b074 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042c0:	4b4f      	ldr	r3, [pc, #316]	; (8004400 <MX_TIM1_Init+0x180>)
 80042c2:	4a50      	ldr	r2, [pc, #320]	; (8004404 <MX_TIM1_Init+0x184>)
 80042c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042c6:	4b4e      	ldr	r3, [pc, #312]	; (8004400 <MX_TIM1_Init+0x180>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042cc:	4b4c      	ldr	r3, [pc, #304]	; (8004400 <MX_TIM1_Init+0x180>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80042d2:	4b4b      	ldr	r3, [pc, #300]	; (8004400 <MX_TIM1_Init+0x180>)
 80042d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80042d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042da:	4b49      	ldr	r3, [pc, #292]	; (8004400 <MX_TIM1_Init+0x180>)
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042e0:	4b47      	ldr	r3, [pc, #284]	; (8004400 <MX_TIM1_Init+0x180>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <MX_TIM1_Init+0x180>)
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80042ec:	4844      	ldr	r0, [pc, #272]	; (8004400 <MX_TIM1_Init+0x180>)
 80042ee:	f004 f8c3 	bl	8008478 <HAL_TIM_Base_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80042f8:	f000 faca 	bl	8004890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004300:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004306:	4619      	mov	r1, r3
 8004308:	483d      	ldr	r0, [pc, #244]	; (8004400 <MX_TIM1_Init+0x180>)
 800430a:	f004 fe41 	bl	8008f90 <HAL_TIM_ConfigClockSource>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004314:	f000 fabc 	bl	8004890 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004318:	4839      	ldr	r0, [pc, #228]	; (8004400 <MX_TIM1_Init+0x180>)
 800431a:	f004 f9de 	bl	80086da <HAL_TIM_PWM_Init>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004324:	f000 fab4 	bl	8004890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004328:	2320      	movs	r3, #32
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800432c:	2300      	movs	r3, #0
 800432e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004330:	2300      	movs	r3, #0
 8004332:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004334:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004338:	4619      	mov	r1, r3
 800433a:	4831      	ldr	r0, [pc, #196]	; (8004400 <MX_TIM1_Init+0x180>)
 800433c:	f005 fc68 	bl	8009c10 <HAL_TIMEx_MasterConfigSynchronization>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004346:	f000 faa3 	bl	8004890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800434a:	2370      	movs	r3, #112	; 0x70
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004352:	2300      	movs	r3, #0
 8004354:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004356:	2300      	movs	r3, #0
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800435a:	2300      	movs	r3, #0
 800435c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800435e:	2300      	movs	r3, #0
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004362:	2300      	movs	r3, #0
 8004364:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800436a:	2200      	movs	r2, #0
 800436c:	4619      	mov	r1, r3
 800436e:	4824      	ldr	r0, [pc, #144]	; (8004400 <MX_TIM1_Init+0x180>)
 8004370:	f004 fcfe 	bl	8008d70 <HAL_TIM_PWM_ConfigChannel>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800437a:	f000 fa89 	bl	8004890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800437e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004382:	2204      	movs	r2, #4
 8004384:	4619      	mov	r1, r3
 8004386:	481e      	ldr	r0, [pc, #120]	; (8004400 <MX_TIM1_Init+0x180>)
 8004388:	f004 fcf2 	bl	8008d70 <HAL_TIM_PWM_ConfigChannel>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004392:	f000 fa7d 	bl	8004890 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004396:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800439a:	2208      	movs	r2, #8
 800439c:	4619      	mov	r1, r3
 800439e:	4818      	ldr	r0, [pc, #96]	; (8004400 <MX_TIM1_Init+0x180>)
 80043a0:	f004 fce6 	bl	8008d70 <HAL_TIM_PWM_ConfigChannel>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80043aa:	f000 fa71 	bl	8004890 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 80043ba:	234b      	movs	r3, #75	; 0x4b
 80043bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80043cc:	2300      	movs	r3, #0
 80043ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80043d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043da:	2300      	movs	r3, #0
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4807      	ldr	r0, [pc, #28]	; (8004400 <MX_TIM1_Init+0x180>)
 80043e4:	f005 fca2 	bl	8009d2c <HAL_TIMEx_ConfigBreakDeadTime>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80043ee:	f000 fa4f 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80043f2:	4803      	ldr	r0, [pc, #12]	; (8004400 <MX_TIM1_Init+0x180>)
 80043f4:	f000 fbb0 	bl	8004b58 <HAL_TIM_MspPostInit>

}
 80043f8:	bf00      	nop
 80043fa:	3768      	adds	r7, #104	; 0x68
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	2000030c 	.word	0x2000030c
 8004404:	40010000 	.word	0x40010000

08004408 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	; 0x30
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800440e:	f107 0320 	add.w	r3, r7, #32
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	605a      	str	r2, [r3, #4]
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800441c:	f107 030c 	add.w	r3, r7, #12
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800442c:	463b      	mov	r3, r7
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <MX_TIM2_Init+0xd4>)
 8004438:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800443c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800443e:	4b27      	ldr	r3, [pc, #156]	; (80044dc <MX_TIM2_Init+0xd4>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004444:	4b25      	ldr	r3, [pc, #148]	; (80044dc <MX_TIM2_Init+0xd4>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 800444a:	4b24      	ldr	r3, [pc, #144]	; (80044dc <MX_TIM2_Init+0xd4>)
 800444c:	2296      	movs	r2, #150	; 0x96
 800444e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004450:	4b22      	ldr	r3, [pc, #136]	; (80044dc <MX_TIM2_Init+0xd4>)
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <MX_TIM2_Init+0xd4>)
 8004458:	2200      	movs	r2, #0
 800445a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800445c:	481f      	ldr	r0, [pc, #124]	; (80044dc <MX_TIM2_Init+0xd4>)
 800445e:	f004 f80b 	bl	8008478 <HAL_TIM_Base_Init>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8004468:	f000 fa12 	bl	8004890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800446c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004470:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004472:	f107 0320 	add.w	r3, r7, #32
 8004476:	4619      	mov	r1, r3
 8004478:	4818      	ldr	r0, [pc, #96]	; (80044dc <MX_TIM2_Init+0xd4>)
 800447a:	f004 fd89 	bl	8008f90 <HAL_TIM_ConfigClockSource>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004484:	f000 fa04 	bl	8004890 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8004488:	2108      	movs	r1, #8
 800448a:	4814      	ldr	r0, [pc, #80]	; (80044dc <MX_TIM2_Init+0xd4>)
 800448c:	f004 fa80 	bl	8008990 <HAL_TIM_OnePulse_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004496:	f000 f9fb 	bl	8004890 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800449a:	2306      	movs	r3, #6
 800449c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80044a2:	f107 030c 	add.w	r3, r7, #12
 80044a6:	4619      	mov	r1, r3
 80044a8:	480c      	ldr	r0, [pc, #48]	; (80044dc <MX_TIM2_Init+0xd4>)
 80044aa:	f004 fe37 	bl	800911c <HAL_TIM_SlaveConfigSynchro>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80044b4:	f000 f9ec 	bl	8004890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044b8:	2320      	movs	r3, #32
 80044ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044c0:	463b      	mov	r3, r7
 80044c2:	4619      	mov	r1, r3
 80044c4:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_TIM2_Init+0xd4>)
 80044c6:	f005 fba3 	bl	8009c10 <HAL_TIMEx_MasterConfigSynchronization>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80044d0:	f000 f9de 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044d4:	bf00      	nop
 80044d6:	3730      	adds	r7, #48	; 0x30
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000358 	.word	0x20000358

080044e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	605a      	str	r2, [r3, #4]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f4:	f107 031c 	add.w	r3, r7, #28
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004500:	463b      	mov	r3, r7
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	609a      	str	r2, [r3, #8]
 800450a:	60da      	str	r2, [r3, #12]
 800450c:	611a      	str	r2, [r3, #16]
 800450e:	615a      	str	r2, [r3, #20]
 8004510:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004512:	4b2c      	ldr	r3, [pc, #176]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <MX_TIM4_Init+0xe8>)
 8004516:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 8004518:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <MX_TIM4_Init+0xe4>)
 800451a:	f245 4260 	movw	r2, #21600	; 0x5460
 800451e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800452e:	4b25      	ldr	r3, [pc, #148]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800453a:	4822      	ldr	r0, [pc, #136]	; (80045c4 <MX_TIM4_Init+0xe4>)
 800453c:	f003 ff9c 	bl	8008478 <HAL_TIM_Base_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8004546:	f000 f9a3 	bl	8004890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800454a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004554:	4619      	mov	r1, r3
 8004556:	481b      	ldr	r0, [pc, #108]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004558:	f004 fd1a 	bl	8008f90 <HAL_TIM_ConfigClockSource>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8004562:	f000 f995 	bl	8004890 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004566:	4817      	ldr	r0, [pc, #92]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004568:	f004 f856 	bl	8008618 <HAL_TIM_OC_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8004572:	f000 f98d 	bl	8004890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004576:	2320      	movs	r3, #32
 8004578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800457e:	f107 031c 	add.w	r3, r7, #28
 8004582:	4619      	mov	r1, r3
 8004584:	480f      	ldr	r0, [pc, #60]	; (80045c4 <MX_TIM4_Init+0xe4>)
 8004586:	f005 fb43 	bl	8009c10 <HAL_TIMEx_MasterConfigSynchronization>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8004590:	f000 f97e 	bl	8004890 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004594:	2300      	movs	r3, #0
 8004596:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800459c:	2300      	movs	r3, #0
 800459e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80045a4:	463b      	mov	r3, r7
 80045a6:	220c      	movs	r2, #12
 80045a8:	4619      	mov	r1, r3
 80045aa:	4806      	ldr	r0, [pc, #24]	; (80045c4 <MX_TIM4_Init+0xe4>)
 80045ac:	f004 fb6a 	bl	8008c84 <HAL_TIM_OC_ConfigChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80045b6:	f000 f96b 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045ba:	bf00      	nop
 80045bc:	3738      	adds	r7, #56	; 0x38
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	200003a4 	.word	0x200003a4
 80045c8:	40000800 	.word	0x40000800

080045cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045d0:	4b14      	ldr	r3, [pc, #80]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045d2:	4a15      	ldr	r2, [pc, #84]	; (8004628 <MX_USART3_UART_Init+0x5c>)
 80045d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045de:	4b11      	ldr	r3, [pc, #68]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045e4:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045ea:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045f2:	220c      	movs	r2, #12
 80045f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <MX_USART3_UART_Init+0x58>)
 80045fe:	2200      	movs	r2, #0
 8004600:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <MX_USART3_UART_Init+0x58>)
 8004604:	2200      	movs	r2, #0
 8004606:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004608:	4b06      	ldr	r3, [pc, #24]	; (8004624 <MX_USART3_UART_Init+0x58>)
 800460a:	2200      	movs	r2, #0
 800460c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800460e:	4805      	ldr	r0, [pc, #20]	; (8004624 <MX_USART3_UART_Init+0x58>)
 8004610:	f005 fc4d 	bl	8009eae <HAL_UART_Init>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800461a:	f000 f939 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200003f0 	.word	0x200003f0
 8004628:	40004800 	.word	0x40004800

0800462c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004630:	4b14      	ldr	r3, [pc, #80]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004632:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004636:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004638:	4b12      	ldr	r3, [pc, #72]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800463a:	2206      	movs	r2, #6
 800463c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004646:	2202      	movs	r2, #2
 8004648:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800464a:	4b0e      	ldr	r3, [pc, #56]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800464c:	2200      	movs	r2, #0
 800464e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004652:	2200      	movs	r2, #0
 8004654:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004658:	2200      	movs	r2, #0
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800465e:	2200      	movs	r2, #0
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004664:	2200      	movs	r2, #0
 8004666:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004668:	4b06      	ldr	r3, [pc, #24]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800466e:	4805      	ldr	r0, [pc, #20]	; (8004684 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004670:	f001 ffb9 	bl	80065e6 <HAL_PCD_Init>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800467a:	f000 f909 	bl	8004890 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000474 	.word	0x20000474

08004688 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <MX_DMA_Init+0x38>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a0b      	ldr	r2, [pc, #44]	; (80046c0 <MX_DMA_Init+0x38>)
 8004694:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <MX_DMA_Init+0x38>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2038      	movs	r0, #56	; 0x38
 80046ac:	f001 fa37 	bl	8005b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80046b0:	2038      	movs	r0, #56	; 0x38
 80046b2:	f001 fa50 	bl	8005b56 <HAL_NVIC_EnableIRQ>

}
 80046b6:	bf00      	nop
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40023800 	.word	0x40023800

080046c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ca:	f107 031c 	add.w	r3, r7, #28
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	605a      	str	r2, [r3, #4]
 80046d4:	609a      	str	r2, [r3, #8]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046da:	4b55      	ldr	r3, [pc, #340]	; (8004830 <MX_GPIO_Init+0x16c>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4a54      	ldr	r2, [pc, #336]	; (8004830 <MX_GPIO_Init+0x16c>)
 80046e0:	f043 0304 	orr.w	r3, r3, #4
 80046e4:	6313      	str	r3, [r2, #48]	; 0x30
 80046e6:	4b52      	ldr	r3, [pc, #328]	; (8004830 <MX_GPIO_Init+0x16c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	61bb      	str	r3, [r7, #24]
 80046f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80046f2:	4b4f      	ldr	r3, [pc, #316]	; (8004830 <MX_GPIO_Init+0x16c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a4e      	ldr	r2, [pc, #312]	; (8004830 <MX_GPIO_Init+0x16c>)
 80046f8:	f043 0320 	orr.w	r3, r3, #32
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b4c      	ldr	r3, [pc, #304]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800470a:	4b49      	ldr	r3, [pc, #292]	; (8004830 <MX_GPIO_Init+0x16c>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	4a48      	ldr	r2, [pc, #288]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004714:	6313      	str	r3, [r2, #48]	; 0x30
 8004716:	4b46      	ldr	r3, [pc, #280]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471e:	613b      	str	r3, [r7, #16]
 8004720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004722:	4b43      	ldr	r3, [pc, #268]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	4a42      	ldr	r2, [pc, #264]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6313      	str	r3, [r2, #48]	; 0x30
 800472e:	4b40      	ldr	r3, [pc, #256]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800473a:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <MX_GPIO_Init+0x16c>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b3a      	ldr	r3, [pc, #232]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a36      	ldr	r2, [pc, #216]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004758:	f043 0308 	orr.w	r3, r3, #8
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b34      	ldr	r3, [pc, #208]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800476a:	4b31      	ldr	r3, [pc, #196]	; (8004830 <MX_GPIO_Init+0x16c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a30      	ldr	r2, [pc, #192]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <MX_GPIO_Init+0x16c>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 8004782:	2200      	movs	r2, #0
 8004784:	2110      	movs	r1, #16
 8004786:	482b      	ldr	r0, [pc, #172]	; (8004834 <MX_GPIO_Init+0x170>)
 8004788:	f001 ff14 	bl	80065b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800478c:	2200      	movs	r2, #0
 800478e:	2140      	movs	r1, #64	; 0x40
 8004790:	4829      	ldr	r0, [pc, #164]	; (8004838 <MX_GPIO_Init+0x174>)
 8004792:	f001 ff0f 	bl	80065b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004796:	2200      	movs	r2, #0
 8004798:	2180      	movs	r1, #128	; 0x80
 800479a:	4828      	ldr	r0, [pc, #160]	; (800483c <MX_GPIO_Init+0x178>)
 800479c:	f001 ff0a 	bl	80065b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80047a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047a6:	4b26      	ldr	r3, [pc, #152]	; (8004840 <MX_GPIO_Init+0x17c>)
 80047a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80047ae:	f107 031c 	add.w	r3, r7, #28
 80047b2:	4619      	mov	r1, r3
 80047b4:	4823      	ldr	r0, [pc, #140]	; (8004844 <MX_GPIO_Init+0x180>)
 80047b6:	f001 fd61 	bl	800627c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_POT_Pin */
  GPIO_InitStruct.Pin = USER_POT_Pin;
 80047ba:	2304      	movs	r3, #4
 80047bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047be:	2303      	movs	r3, #3
 80047c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_POT_GPIO_Port, &GPIO_InitStruct);
 80047c6:	f107 031c 	add.w	r3, r7, #28
 80047ca:	4619      	mov	r1, r3
 80047cc:	481d      	ldr	r0, [pc, #116]	; (8004844 <MX_GPIO_Init+0x180>)
 80047ce:	f001 fd55 	bl	800627c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 80047d2:	2310      	movs	r3, #16
 80047d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d6:	2301      	movs	r3, #1
 80047d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047de:	2302      	movs	r3, #2
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80047e2:	f107 031c 	add.w	r3, r7, #28
 80047e6:	4619      	mov	r1, r3
 80047e8:	4812      	ldr	r0, [pc, #72]	; (8004834 <MX_GPIO_Init+0x170>)
 80047ea:	f001 fd47 	bl	800627c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80047ee:	2340      	movs	r3, #64	; 0x40
 80047f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f2:	2301      	movs	r3, #1
 80047f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047fe:	f107 031c 	add.w	r3, r7, #28
 8004802:	4619      	mov	r1, r3
 8004804:	480c      	ldr	r0, [pc, #48]	; (8004838 <MX_GPIO_Init+0x174>)
 8004806:	f001 fd39 	bl	800627c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480e:	2301      	movs	r3, #1
 8004810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004816:	2300      	movs	r3, #0
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800481a:	f107 031c 	add.w	r3, r7, #28
 800481e:	4619      	mov	r1, r3
 8004820:	4806      	ldr	r0, [pc, #24]	; (800483c <MX_GPIO_Init+0x178>)
 8004822:	f001 fd2b 	bl	800627c <HAL_GPIO_Init>

}
 8004826:	bf00      	nop
 8004828:	3730      	adds	r7, #48	; 0x30
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	40020000 	.word	0x40020000
 8004838:	40021800 	.word	0x40021800
 800483c:	40020400 	.word	0x40020400
 8004840:	10110000 	.word	0x10110000
 8004844:	40020800 	.word	0x40020800

08004848 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <__io_putchar+0x24>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	1d39      	adds	r1, r7, #4
 8004856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800485a:	2201      	movs	r2, #1
 800485c:	f005 fb75 	bl	8009f4a <HAL_UART_Transmit>

  return ch;
 8004860:	687b      	ldr	r3, [r7, #4]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000878 	.word	0x20000878

08004870 <HAL_TIM_PeriodElapsedCallback>:
//  /* This is called after the conversion is completed */
////  printf("hay\r\n");
//	ADCConvCpltCallback();
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a04      	ldr	r2, [pc, #16]	; (800488c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_TIM_PeriodElapsedCallback+0x14>
		ADCConvCpltCallback(); // probably wanna leave a few cycles here to let the DMA do its work!
 8004880:	f7fd ff6e 	bl	8002760 <ADCConvCpltCallback>
	}
}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	2000030c 	.word	0x2000030c

08004890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004894:	b672      	cpsid	i
}
 8004896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004898:	e7fe      	b.n	8004898 <Error_Handler+0x8>
	...

0800489c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <HAL_MspInit+0x44>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <HAL_MspInit+0x44>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <HAL_MspInit+0x44>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_MspInit+0x44>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	4a08      	ldr	r2, [pc, #32]	; (80048e0 <HAL_MspInit+0x44>)
 80048c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048c4:	6453      	str	r3, [r2, #68]	; 0x44
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_MspInit+0x44>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800

080048e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a46      	ldr	r2, [pc, #280]	; (8004a1c <HAL_ADC_MspInit+0x138>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f040 8085 	bne.w	8004a12 <HAL_ADC_MspInit+0x12e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004908:	4b45      	ldr	r3, [pc, #276]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800490e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004912:	6453      	str	r3, [r2, #68]	; 0x44
 8004914:	4b42      	ldr	r3, [pc, #264]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004920:	4b3f      	ldr	r3, [pc, #252]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	4a3e      	ldr	r2, [pc, #248]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004926:	f043 0304 	orr.w	r3, r3, #4
 800492a:	6313      	str	r3, [r2, #48]	; 0x30
 800492c:	4b3c      	ldr	r3, [pc, #240]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800492e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004938:	4b39      	ldr	r3, [pc, #228]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	4a38      	ldr	r2, [pc, #224]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6313      	str	r3, [r2, #48]	; 0x30
 8004944:	4b36      	ldr	r3, [pc, #216]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004950:	4b33      	ldr	r3, [pc, #204]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	4a32      	ldr	r2, [pc, #200]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	6313      	str	r3, [r2, #48]	; 0x30
 800495c:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_ADC_MspInit+0x13c>)
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = USER_POT_Pin;
 8004968:	2304      	movs	r3, #4
 800496a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800496c:	2303      	movs	r3, #3
 800496e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USER_POT_GPIO_Port, &GPIO_InitStruct);
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	4619      	mov	r1, r3
 800497a:	482a      	ldr	r0, [pc, #168]	; (8004a24 <HAL_ADC_MspInit+0x140>)
 800497c:	f001 fc7e 	bl	800627c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_U_Pin;
 8004980:	2302      	movs	r3, #2
 8004982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004984:	2303      	movs	r3, #3
 8004986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CURR_FB_U_GPIO_Port, &GPIO_InitStruct);
 800498c:	f107 031c 	add.w	r3, r7, #28
 8004990:	4619      	mov	r1, r3
 8004992:	4825      	ldr	r0, [pc, #148]	; (8004a28 <HAL_ADC_MspInit+0x144>)
 8004994:	f001 fc72 	bl	800627c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_W_Pin|CURR_FB_V_Pin;
 8004998:	2303      	movs	r3, #3
 800499a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800499c:	2303      	movs	r3, #3
 800499e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a4:	f107 031c 	add.w	r3, r7, #28
 80049a8:	4619      	mov	r1, r3
 80049aa:	4820      	ldr	r0, [pc, #128]	; (8004a2c <HAL_ADC_MspInit+0x148>)
 80049ac:	f001 fc66 	bl	800627c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80049b0:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049b2:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_ADC_MspInit+0x150>)
 80049b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049be:	2200      	movs	r2, #0
 80049c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c2:	4b1b      	ldr	r3, [pc, #108]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049d8:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80049de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80049e8:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049f6:	480e      	ldr	r0, [pc, #56]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 80049f8:	f001 f8c8 	bl	8005b8c <HAL_DMA_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8004a02:	f7ff ff45 	bl	8004890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0c:	4a08      	ldr	r2, [pc, #32]	; (8004a30 <HAL_ADC_MspInit+0x14c>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004a12:	bf00      	nop
 8004a14:	3730      	adds	r7, #48	; 0x30
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40012000 	.word	0x40012000
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40020800 	.word	0x40020800
 8004a28:	40020000 	.word	0x40020000
 8004a2c:	40020400 	.word	0x40020400
 8004a30:	20000248 	.word	0x20000248
 8004a34:	40026410 	.word	0x40026410

08004a38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <HAL_SPI_MspInit+0x7c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d128      	bne.n	8004aac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004a5a:	4b17      	ldr	r3, [pc, #92]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	4a16      	ldr	r2, [pc, #88]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a64:	6453      	str	r3, [r2, #68]	; 0x44
 8004a66:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6e:	613b      	str	r3, [r7, #16]
 8004a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4a10      	ldr	r2, [pc, #64]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a78:	f043 0320 	orr.w	r3, r3, #32
 8004a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <HAL_SPI_MspInit+0x80>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8004a8a:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8004a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a90:	2302      	movs	r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004a9c:	2305      	movs	r3, #5
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004aa0:	f107 0314 	add.w	r3, r7, #20
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4805      	ldr	r0, [pc, #20]	; (8004abc <HAL_SPI_MspInit+0x84>)
 8004aa8:	f001 fbe8 	bl	800627c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004aac:	bf00      	nop
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40015000 	.word	0x40015000
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	40021400 	.word	0x40021400

08004ac0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_TIM_Base_MspInit+0x8c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d114      	bne.n	8004afc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004ad8:	f043 0301 	orr.w	r3, r3, #1
 8004adc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ade:	4b1c      	ldr	r3, [pc, #112]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	2019      	movs	r0, #25
 8004af0:	f001 f815 	bl	8005b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004af4:	2019      	movs	r0, #25
 8004af6:	f001 f82e 	bl	8005b56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004afa:	e022      	b.n	8004b42 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d10c      	bne.n	8004b20 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
}
 8004b1e:	e010      	b.n	8004b42 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0b      	ldr	r2, [pc, #44]	; (8004b54 <HAL_TIM_Base_MspInit+0x94>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d10b      	bne.n	8004b42 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b06      	ldr	r3, [pc, #24]	; (8004b50 <HAL_TIM_Base_MspInit+0x90>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	bf00      	nop
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40010000 	.word	0x40010000
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <HAL_TIM_MspPostInit+0xa0>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d139      	bne.n	8004bee <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7a:	4b20      	ldr	r3, [pc, #128]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004b80:	f043 0302 	orr.w	r3, r3, #2
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004b98:	f043 0301 	orr.w	r3, r3, #1
 8004b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9e:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <HAL_TIM_MspPostInit+0xa4>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin|ENW_Pin;
 8004baa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bc0:	f107 0314 	add.w	r3, r7, #20
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	480e      	ldr	r0, [pc, #56]	; (8004c00 <HAL_TIM_MspPostInit+0xa8>)
 8004bc8:	f001 fb58 	bl	800627c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 8004bcc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bde:	2301      	movs	r3, #1
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4806      	ldr	r0, [pc, #24]	; (8004c04 <HAL_TIM_MspPostInit+0xac>)
 8004bea:	f001 fb47 	bl	800627c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bee:	bf00      	nop
 8004bf0:	3728      	adds	r7, #40	; 0x28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40010000 	.word	0x40010000
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	40020400 	.word	0x40020400
 8004c04:	40020000 	.word	0x40020000

08004c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0aa      	sub	sp, #168	; 0xa8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	609a      	str	r2, [r3, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
 8004c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	2280      	movs	r2, #128	; 0x80
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f006 fa23 	bl	800b074 <memset>
  if(huart->Instance==USART3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_UART_MspInit+0xb4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d13c      	bne.n	8004cb2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c3c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 fb40 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004c52:	f7ff fe1d 	bl	8004890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c60:	6413      	str	r3, [r2, #64]	; 0x40
 8004c62:	4b17      	ldr	r3, [pc, #92]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6a:	613b      	str	r3, [r7, #16]
 8004c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c6e:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c74:	f043 0308 	orr.w	r3, r3, #8
 8004c78:	6313      	str	r3, [r2, #48]	; 0x30
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <HAL_UART_MspInit+0xb8>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ca0:	2307      	movs	r3, #7
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ca6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004caa:	4619      	mov	r1, r3
 8004cac:	4805      	ldr	r0, [pc, #20]	; (8004cc4 <HAL_UART_MspInit+0xbc>)
 8004cae:	f001 fae5 	bl	800627c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004cb2:	bf00      	nop
 8004cb4:	37a8      	adds	r7, #168	; 0xa8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	40004800 	.word	0x40004800
 8004cc0:	40023800 	.word	0x40023800
 8004cc4:	40020c00 	.word	0x40020c00

08004cc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b0aa      	sub	sp, #168	; 0xa8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cd0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f006 f9c3 	bl	800b074 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf6:	d149      	bne.n	8004d8c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cfc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f002 fadf 	bl	80072cc <HAL_RCCEx_PeriphCLKConfig>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8004d14:	f7ff fdbc 	bl	8004890 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d18:	4b1e      	ldr	r3, [pc, #120]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d1e:	f043 0301 	orr.w	r3, r3, #1
 8004d22:	6313      	str	r3, [r2, #48]	; 0x30
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8004d30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d44:	2303      	movs	r3, #3
 8004d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004d4a:	230a      	movs	r3, #10
 8004d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d50:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004d54:	4619      	mov	r1, r3
 8004d56:	4810      	ldr	r0, [pc, #64]	; (8004d98 <HAL_PCD_MspInit+0xd0>)
 8004d58:	f001 fa90 	bl	800627c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004d5c:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	4a0c      	ldr	r2, [pc, #48]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d66:	6353      	str	r3, [r2, #52]	; 0x34
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d78:	4a06      	ldr	r2, [pc, #24]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d80:	4b04      	ldr	r3, [pc, #16]	; (8004d94 <HAL_PCD_MspInit+0xcc>)
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004d8c:	bf00      	nop
 8004d8e:	37a8      	adds	r7, #168	; 0xa8
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020000 	.word	0x40020000

08004d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <NMI_Handler+0x4>

08004da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004da6:	e7fe      	b.n	8004da6 <HardFault_Handler+0x4>

08004da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dac:	e7fe      	b.n	8004dac <MemManage_Handler+0x4>

08004dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004db2:	e7fe      	b.n	8004db2 <BusFault_Handler+0x4>

08004db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004db8:	e7fe      	b.n	8004db8 <UsageFault_Handler+0x4>

08004dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004de8:	f000 f958 	bl	800509c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004df6:	f003 fe25 	bl	8008a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	2000030c 	.word	0x2000030c

08004e04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <DMA2_Stream0_IRQHandler+0x10>)
 8004e0a:	f000 ffcd 	bl	8005da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000248 	.word	0x20000248

08004e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0
	return 1;
 8004e1c:	2301      	movs	r3, #1
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <_kill>:

int _kill(int pid, int sig)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e32:	f006 f8ed 	bl	800b010 <__errno>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2216      	movs	r2, #22
 8004e3a:	601a      	str	r2, [r3, #0]
	return -1;
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <_exit>:

void _exit (int status)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e50:	f04f 31ff 	mov.w	r1, #4294967295
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff ffe7 	bl	8004e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e5a:	e7fe      	b.n	8004e5a <_exit+0x12>

08004e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e00a      	b.n	8004e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e6e:	f3af 8000 	nop.w
 8004e72:	4601      	mov	r1, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	60ba      	str	r2, [r7, #8]
 8004e7a:	b2ca      	uxtb	r2, r1
 8004e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3301      	adds	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	dbf0      	blt.n	8004e6e <_read+0x12>
	}

return len;
 8004e8c:	687b      	ldr	r3, [r7, #4]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	60f8      	str	r0, [r7, #12]
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	e009      	b.n	8004ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	60ba      	str	r2, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff fcc9 	bl	8004848 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dbf1      	blt.n	8004ea8 <_write+0x12>
	}
	return len;
 8004ec4:	687b      	ldr	r3, [r7, #4]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_close>:

int _close(int file)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <_isatty>:

int _isatty(int file)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8004f0e:	2301      	movs	r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	return 0;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
	...

08004f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <_sbrk+0x5c>)
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <_sbrk+0x60>)
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f4c:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <_sbrk+0x64>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <_sbrk+0x64>)
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <_sbrk+0x68>)
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <_sbrk+0x64>)
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4413      	add	r3, r2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d207      	bcs.n	8004f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f68:	f006 f852 	bl	800b010 <__errno>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	220c      	movs	r2, #12
 8004f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
 8004f76:	e009      	b.n	8004f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <_sbrk+0x64>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_sbrk+0x64>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	4a05      	ldr	r2, [pc, #20]	; (8004f9c <_sbrk+0x64>)
 8004f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3718      	adds	r7, #24
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20040000 	.word	0x20040000
 8004f98:	00000800 	.word	0x00000800
 8004f9c:	2000088c 	.word	0x2000088c
 8004fa0:	200008a8 	.word	0x200008a8

08004fa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fa8:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <SystemInit+0x28>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <SystemInit+0x28>)
 8004fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <SystemInit+0x28>)
 8004fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004fd6:	e003      	b.n	8004fe0 <LoopCopyDataInit>

08004fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004fde:	3104      	adds	r1, #4

08004fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004fe0:	480b      	ldr	r0, [pc, #44]	; (8005010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004fe8:	d3f6      	bcc.n	8004fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004fec:	e002      	b.n	8004ff4 <LoopFillZerobss>

08004fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ff0:	f842 3b04 	str.w	r3, [r2], #4

08004ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ff8:	d3f9      	bcc.n	8004fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ffa:	f7ff ffd3 	bl	8004fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ffe:	f006 f80d 	bl	800b01c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005002:	f7fe ffcf 	bl	8003fa4 <main>
  bx  lr    
 8005006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005008:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800500c:	0800f914 	.word	0x0800f914
  ldr  r0, =_sdata
 8005010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005014:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8005018:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800501c:	200008a8 	.word	0x200008a8

08005020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005020:	e7fe      	b.n	8005020 <ADC_IRQHandler>

08005022 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005026:	2003      	movs	r0, #3
 8005028:	f000 fd6e 	bl	8005b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800502c:	2000      	movs	r0, #0
 800502e:	f000 f805 	bl	800503c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005032:	f7ff fc33 	bl	800489c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005044:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_InitTick+0x54>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_InitTick+0x58>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	4619      	mov	r1, r3
 800504e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005052:	fbb3 f3f1 	udiv	r3, r3, r1
 8005056:	fbb2 f3f3 	udiv	r3, r2, r3
 800505a:	4618      	mov	r0, r3
 800505c:	f000 fd89 	bl	8005b72 <HAL_SYSTICK_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e00e      	b.n	8005088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b0f      	cmp	r3, #15
 800506e:	d80a      	bhi.n	8005086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005070:	2200      	movs	r2, #0
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	f000 fd51 	bl	8005b1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800507c:	4a06      	ldr	r2, [pc, #24]	; (8005098 <HAL_InitTick+0x5c>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	20000000 	.word	0x20000000
 8005094:	20000008 	.word	0x20000008
 8005098:	20000004 	.word	0x20000004

0800509c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <HAL_IncTick+0x20>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b06      	ldr	r3, [pc, #24]	; (80050c0 <HAL_IncTick+0x24>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4413      	add	r3, r2
 80050ac:	4a04      	ldr	r2, [pc, #16]	; (80050c0 <HAL_IncTick+0x24>)
 80050ae:	6013      	str	r3, [r2, #0]
}
 80050b0:	bf00      	nop
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000008 	.word	0x20000008
 80050c0:	20000890 	.word	0x20000890

080050c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return uwTick;
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_GetTick+0x14>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000890 	.word	0x20000890

080050dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050e4:	f7ff ffee 	bl	80050c4 <HAL_GetTick>
 80050e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d005      	beq.n	8005102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_Delay+0x44>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005102:	bf00      	nop
 8005104:	f7ff ffde 	bl	80050c4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	429a      	cmp	r2, r3
 8005112:	d8f7      	bhi.n	8005104 <HAL_Delay+0x28>
  {
  }
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20000008 	.word	0x20000008

08005124 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e031      	b.n	800519e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fbce 	bl	80048e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b00      	cmp	r3, #0
 8005160:	d116      	bne.n	8005190 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <HAL_ADC_Init+0x84>)
 8005168:	4013      	ands	r3, r2
 800516a:	f043 0202 	orr.w	r2, r3, #2
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa7c 	bl	8005670 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f023 0303 	bic.w	r3, r3, #3
 8005186:	f043 0201 	orr.w	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40
 800518e:	e001      	b.n	8005194 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	ffffeefd 	.word	0xffffeefd

080051ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_ADC_Start_DMA+0x1e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0d4      	b.n	8005374 <HAL_ADC_Start_DMA+0x1c8>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d018      	beq.n	8005212 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80051f0:	4b62      	ldr	r3, [pc, #392]	; (800537c <HAL_ADC_Start_DMA+0x1d0>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a62      	ldr	r2, [pc, #392]	; (8005380 <HAL_ADC_Start_DMA+0x1d4>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	0c9a      	lsrs	r2, r3, #18
 80051fc:	4613      	mov	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4413      	add	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005204:	e002      	b.n	800520c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3b01      	subs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f9      	bne.n	8005206 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	f040 809c 	bne.w	800535a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005226:	4b57      	ldr	r3, [pc, #348]	; (8005384 <HAL_ADC_Start_DMA+0x1d8>)
 8005228:	4013      	ands	r3, r2
 800522a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005248:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525c:	d106      	bne.n	800526c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f023 0206 	bic.w	r2, r3, #6
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
 800526a:	e002      	b.n	8005272 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527e:	4a42      	ldr	r2, [pc, #264]	; (8005388 <HAL_ADC_Start_DMA+0x1dc>)
 8005280:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	4a41      	ldr	r2, [pc, #260]	; (800538c <HAL_ADC_Start_DMA+0x1e0>)
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	4a40      	ldr	r2, [pc, #256]	; (8005390 <HAL_ADC_Start_DMA+0x1e4>)
 8005290:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800529a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80052aa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ba:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	334c      	adds	r3, #76	; 0x4c
 80052c6:	4619      	mov	r1, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f000 fd0c 	bl	8005ce8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80052d0:	4b30      	ldr	r3, [pc, #192]	; (8005394 <HAL_ADC_Start_DMA+0x1e8>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10f      	bne.n	80052fc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d143      	bne.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052f8:	609a      	str	r2, [r3, #8]
 80052fa:	e03a      	b.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a25      	ldr	r2, [pc, #148]	; (8005398 <HAL_ADC_Start_DMA+0x1ec>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d10e      	bne.n	8005324 <HAL_ADC_Start_DMA+0x178>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d107      	bne.n	8005324 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005322:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_ADC_Start_DMA+0x1e8>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 0310 	and.w	r3, r3, #16
 800532c:	2b00      	cmp	r3, #0
 800532e:	d120      	bne.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <HAL_ADC_Start_DMA+0x1f0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d11b      	bne.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d114      	bne.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689a      	ldr	r2, [r3, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	e00b      	b.n	8005372 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0210 	orr.w	r2, r3, #16
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	f043 0201 	orr.w	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20000000 	.word	0x20000000
 8005380:	431bde83 	.word	0x431bde83
 8005384:	fffff8fe 	.word	0xfffff8fe
 8005388:	08005865 	.word	0x08005865
 800538c:	0800591f 	.word	0x0800591f
 8005390:	0800593b 	.word	0x0800593b
 8005394:	40012300 	.word	0x40012300
 8005398:	40012000 	.word	0x40012000
 800539c:	40012200 	.word	0x40012200

080053a0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_ADC_ConfigChannel+0x1c>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e12a      	b.n	800564e <HAL_ADC_ConfigChannel+0x272>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b09      	cmp	r3, #9
 8005406:	d93a      	bls.n	800547e <HAL_ADC_ConfigChannel+0xa2>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005410:	d035      	beq.n	800547e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68d9      	ldr	r1, [r3, #12]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b29b      	uxth	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	4613      	mov	r3, r2
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	4413      	add	r3, r2
 8005426:	3b1e      	subs	r3, #30
 8005428:	2207      	movs	r2, #7
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43da      	mvns	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	400a      	ands	r2, r1
 8005436:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a87      	ldr	r2, [pc, #540]	; (800565c <HAL_ADC_ConfigChannel+0x280>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d10a      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68d9      	ldr	r1, [r3, #12]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	061a      	lsls	r2, r3, #24
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005456:	e035      	b.n	80054c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68d9      	ldr	r1, [r3, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	b29b      	uxth	r3, r3
 8005468:	4618      	mov	r0, r3
 800546a:	4603      	mov	r3, r0
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4403      	add	r3, r0
 8005470:	3b1e      	subs	r3, #30
 8005472:	409a      	lsls	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800547c:	e022      	b.n	80054c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6919      	ldr	r1, [r3, #16]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	2207      	movs	r2, #7
 8005494:	fa02 f303 	lsl.w	r3, r2, r3
 8005498:	43da      	mvns	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	400a      	ands	r2, r1
 80054a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6919      	ldr	r1, [r3, #16]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	4618      	mov	r0, r3
 80054b4:	4603      	mov	r3, r0
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4403      	add	r3, r0
 80054ba:	409a      	lsls	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	2b06      	cmp	r3, #6
 80054ca:	d824      	bhi.n	8005516 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	3b05      	subs	r3, #5
 80054de:	221f      	movs	r2, #31
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43da      	mvns	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	400a      	ands	r2, r1
 80054ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4618      	mov	r0, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	3b05      	subs	r3, #5
 8005508:	fa00 f203 	lsl.w	r2, r0, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	635a      	str	r2, [r3, #52]	; 0x34
 8005514:	e04c      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d824      	bhi.n	8005568 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	3b23      	subs	r3, #35	; 0x23
 8005530:	221f      	movs	r2, #31
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	400a      	ands	r2, r1
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	4618      	mov	r0, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	3b23      	subs	r3, #35	; 0x23
 800555a:	fa00 f203 	lsl.w	r2, r0, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
 8005566:	e023      	b.n	80055b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	3b41      	subs	r3, #65	; 0x41
 800557a:	221f      	movs	r2, #31
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43da      	mvns	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	400a      	ands	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	b29b      	uxth	r3, r3
 8005596:	4618      	mov	r0, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	3b41      	subs	r3, #65	; 0x41
 80055a4:	fa00 f203 	lsl.w	r2, r0, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	; (8005660 <HAL_ADC_ConfigChannel+0x284>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d10a      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x1f4>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c2:	d105      	bne.n	80055d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80055c4:	4b27      	ldr	r3, [pc, #156]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a26      	ldr	r2, [pc, #152]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 80055ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_ADC_ConfigChannel+0x284>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d109      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x212>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b12      	cmp	r3, #18
 80055e0:	d105      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a1f      	ldr	r2, [pc, #124]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 80055e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_ADC_ConfigChannel+0x284>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d125      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x268>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a17      	ldr	r2, [pc, #92]	; (800565c <HAL_ADC_ConfigChannel+0x280>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d003      	beq.n	800560a <HAL_ADC_ConfigChannel+0x22e>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b11      	cmp	r3, #17
 8005608:	d11c      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800560a:	4b16      	ldr	r3, [pc, #88]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4a15      	ldr	r2, [pc, #84]	; (8005664 <HAL_ADC_ConfigChannel+0x288>)
 8005610:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005614:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <HAL_ADC_ConfigChannel+0x280>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d111      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005620:	4b11      	ldr	r3, [pc, #68]	; (8005668 <HAL_ADC_ConfigChannel+0x28c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a11      	ldr	r2, [pc, #68]	; (800566c <HAL_ADC_ConfigChannel+0x290>)
 8005626:	fba2 2303 	umull	r2, r3, r2, r3
 800562a:	0c9a      	lsrs	r2, r3, #18
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005636:	e002      	b.n	800563e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3b01      	subs	r3, #1
 800563c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f9      	bne.n	8005638 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	10000012 	.word	0x10000012
 8005660:	40012000 	.word	0x40012000
 8005664:	40012300 	.word	0x40012300
 8005668:	20000000 	.word	0x20000000
 800566c:	431bde83 	.word	0x431bde83

08005670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005678:	4b78      	ldr	r3, [pc, #480]	; (800585c <ADC_Init+0x1ec>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4a77      	ldr	r2, [pc, #476]	; (800585c <ADC_Init+0x1ec>)
 800567e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005682:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005684:	4b75      	ldr	r3, [pc, #468]	; (800585c <ADC_Init+0x1ec>)
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	4973      	ldr	r1, [pc, #460]	; (800585c <ADC_Init+0x1ec>)
 800568e:	4313      	orrs	r3, r2
 8005690:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	021a      	lsls	r2, r3, #8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6899      	ldr	r1, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	4a58      	ldr	r2, [pc, #352]	; (8005860 <ADC_Init+0x1f0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005712:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6899      	ldr	r1, [r3, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	609a      	str	r2, [r3, #8]
 8005748:	e00f      	b.n	800576a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005768:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 0202 	bic.w	r2, r2, #2
 8005778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6899      	ldr	r1, [r3, #8]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	005a      	lsls	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6859      	ldr	r1, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	3b01      	subs	r3, #1
 80057c4:	035a      	lsls	r2, r3, #13
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e007      	b.n	80057e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	051a      	lsls	r2, r3, #20
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005814:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005822:	025a      	lsls	r2, r3, #9
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800583a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6899      	ldr	r1, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	029a      	lsls	r2, r3, #10
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40012300 	.word	0x40012300
 8005860:	0f000001 	.word	0x0f000001

08005864 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005876:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13c      	bne.n	80058f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d12b      	bne.n	80058f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800589c:	2b00      	cmp	r3, #0
 800589e:	d127      	bne.n	80058f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d006      	beq.n	80058bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d119      	bne.n	80058f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0220 	bic.w	r2, r2, #32
 80058ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	f043 0201 	orr.w	r2, r3, #1
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f7ff fd55 	bl	80053a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058f6:	e00e      	b.n	8005916 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff fd5f 	bl	80053c8 <HAL_ADC_ErrorCallback>
}
 800590a:	e004      	b.n	8005916 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
}
 8005916:	bf00      	nop
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f7ff fd41 	bl	80053b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	f043 0204 	orr.w	r2, r3, #4
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f7ff fd34 	bl	80053c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005960:	bf00      	nop
 8005962:	3710      	adds	r7, #16
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005978:	4b0b      	ldr	r3, [pc, #44]	; (80059a8 <__NVIC_SetPriorityGrouping+0x40>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005984:	4013      	ands	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005990:	4b06      	ldr	r3, [pc, #24]	; (80059ac <__NVIC_SetPriorityGrouping+0x44>)
 8005992:	4313      	orrs	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005996:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <__NVIC_SetPriorityGrouping+0x40>)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	60d3      	str	r3, [r2, #12]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00
 80059ac:	05fa0000 	.word	0x05fa0000

080059b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b4:	4b04      	ldr	r3, [pc, #16]	; (80059c8 <__NVIC_GetPriorityGrouping+0x18>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	f003 0307 	and.w	r3, r3, #7
}
 80059be:	4618      	mov	r0, r3
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	db0b      	blt.n	80059f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	f003 021f 	and.w	r2, r3, #31
 80059e4:	4907      	ldr	r1, [pc, #28]	; (8005a04 <__NVIC_EnableIRQ+0x38>)
 80059e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2001      	movs	r0, #1
 80059ee:	fa00 f202 	lsl.w	r2, r0, r2
 80059f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	e000e100 	.word	0xe000e100

08005a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	6039      	str	r1, [r7, #0]
 8005a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	db0a      	blt.n	8005a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	490c      	ldr	r1, [pc, #48]	; (8005a54 <__NVIC_SetPriority+0x4c>)
 8005a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a26:	0112      	lsls	r2, r2, #4
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a30:	e00a      	b.n	8005a48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4908      	ldr	r1, [pc, #32]	; (8005a58 <__NVIC_SetPriority+0x50>)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	0112      	lsls	r2, r2, #4
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	440b      	add	r3, r1
 8005a46:	761a      	strb	r2, [r3, #24]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	e000e100 	.word	0xe000e100
 8005a58:	e000ed00 	.word	0xe000ed00

08005a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b089      	sub	sp, #36	; 0x24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f1c3 0307 	rsb	r3, r3, #7
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	bf28      	it	cs
 8005a7a:	2304      	movcs	r3, #4
 8005a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3304      	adds	r3, #4
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	d902      	bls.n	8005a8c <NVIC_EncodePriority+0x30>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3b03      	subs	r3, #3
 8005a8a:	e000      	b.n	8005a8e <NVIC_EncodePriority+0x32>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a90:	f04f 32ff 	mov.w	r2, #4294967295
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43da      	mvns	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	43d9      	mvns	r1, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab4:	4313      	orrs	r3, r2
         );
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3724      	adds	r7, #36	; 0x24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ad4:	d301      	bcc.n	8005ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e00f      	b.n	8005afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <SysTick_Config+0x40>)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ae2:	210f      	movs	r1, #15
 8005ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae8:	f7ff ff8e 	bl	8005a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <SysTick_Config+0x40>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005af2:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <SysTick_Config+0x40>)
 8005af4:	2207      	movs	r2, #7
 8005af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	e000e010 	.word	0xe000e010

08005b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ff29 	bl	8005968 <__NVIC_SetPriorityGrouping>
}
 8005b16:	bf00      	nop
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	4603      	mov	r3, r0
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	607a      	str	r2, [r7, #4]
 8005b2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b30:	f7ff ff3e 	bl	80059b0 <__NVIC_GetPriorityGrouping>
 8005b34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	6978      	ldr	r0, [r7, #20]
 8005b3c:	f7ff ff8e 	bl	8005a5c <NVIC_EncodePriority>
 8005b40:	4602      	mov	r2, r0
 8005b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b46:	4611      	mov	r1, r2
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff ff5d 	bl	8005a08 <__NVIC_SetPriority>
}
 8005b4e:	bf00      	nop
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b082      	sub	sp, #8
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff ff31 	bl	80059cc <__NVIC_EnableIRQ>
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff ffa2 	bl	8005ac4 <SysTick_Config>
 8005b80:	4603      	mov	r3, r0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005b98:	f7ff fa94 	bl	80050c4 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e099      	b.n	8005cdc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bc8:	e00f      	b.n	8005bea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bca:	f7ff fa7b 	bl	80050c4 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b05      	cmp	r3, #5
 8005bd6:	d908      	bls.n	8005bea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2203      	movs	r2, #3
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e078      	b.n	8005cdc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e8      	bne.n	8005bca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <HAL_DMA_Init+0x158>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d107      	bne.n	8005c54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f023 0307 	bic.w	r3, r3, #7
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d117      	bne.n	8005cae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fa77 	bl	8006184 <DMA_CheckFifoParam>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2240      	movs	r2, #64	; 0x40
 8005ca0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005caa:	2301      	movs	r3, #1
 8005cac:	e016      	b.n	8005cdc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa2e 	bl	8006118 <DMA_CalcBaseAndBitshift>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc4:	223f      	movs	r2, #63	; 0x3f
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	e010803f 	.word	0xe010803f

08005ce8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_DMA_Start_IT+0x26>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e048      	b.n	8005da0 <HAL_DMA_Start_IT+0xb8>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d137      	bne.n	8005d92 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68b9      	ldr	r1, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 f9c0 	bl	80060bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d40:	223f      	movs	r2, #63	; 0x3f
 8005d42:	409a      	lsls	r2, r3
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0216 	orr.w	r2, r2, #22
 8005d56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d66:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0208 	orr.w	r2, r2, #8
 8005d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e005      	b.n	8005d9e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005db4:	4b8e      	ldr	r3, [pc, #568]	; (8005ff0 <HAL_DMA_IRQHandler+0x248>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a8e      	ldr	r2, [pc, #568]	; (8005ff4 <HAL_DMA_IRQHandler+0x24c>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0a9b      	lsrs	r3, r3, #10
 8005dc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd2:	2208      	movs	r2, #8
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d01a      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d013      	beq.n	8005e14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 0204 	bic.w	r2, r2, #4
 8005dfa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	2208      	movs	r2, #8
 8005e02:	409a      	lsls	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0c:	f043 0201 	orr.w	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e18:	2201      	movs	r2, #1
 8005e1a:	409a      	lsls	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e36:	2201      	movs	r2, #1
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4e:	2204      	movs	r2, #4
 8005e50:	409a      	lsls	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00b      	beq.n	8005e80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6c:	2204      	movs	r2, #4
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e84:	2210      	movs	r2, #16
 8005e86:	409a      	lsls	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d043      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d03c      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d018      	beq.n	8005eea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d108      	bne.n	8005ed8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d024      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
 8005ed6:	e01f      	b.n	8005f18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d01b      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	4798      	blx	r3
 8005ee8:	e016      	b.n	8005f18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d107      	bne.n	8005f08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0208 	bic.w	r2, r2, #8
 8005f06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 808f 	beq.w	8006048 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8087 	beq.w	8006048 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3e:	2220      	movs	r2, #32
 8005f40:	409a      	lsls	r2, r3
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d136      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0216 	bic.w	r2, r2, #22
 8005f60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	695a      	ldr	r2, [r3, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d103      	bne.n	8005f82 <HAL_DMA_IRQHandler+0x1da>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0208 	bic.w	r2, r2, #8
 8005f90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	223f      	movs	r2, #63	; 0x3f
 8005f98:	409a      	lsls	r2, r3
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d07e      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
        }
        return;
 8005fbe:	e079      	b.n	80060b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01d      	beq.n	800600a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d10d      	bne.n	8005ff8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d031      	beq.n	8006048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	4798      	blx	r3
 8005fec:	e02c      	b.n	8006048 <HAL_DMA_IRQHandler+0x2a0>
 8005fee:	bf00      	nop
 8005ff0:	20000000 	.word	0x20000000
 8005ff4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d023      	beq.n	8006048 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	4798      	blx	r3
 8006008:	e01e      	b.n	8006048 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10f      	bne.n	8006038 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 0210 	bic.w	r2, r2, #16
 8006026:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	2b00      	cmp	r3, #0
 800604e:	d032      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d022      	beq.n	80060a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2205      	movs	r2, #5
 8006060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0201 	bic.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	3301      	adds	r3, #1
 8006078:	60bb      	str	r3, [r7, #8]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	429a      	cmp	r2, r3
 800607e:	d307      	bcc.n	8006090 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1f2      	bne.n	8006074 <HAL_DMA_IRQHandler+0x2cc>
 800608e:	e000      	b.n	8006092 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006090:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d005      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
 80060b2:	e000      	b.n	80060b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80060b4:	bf00      	nop
    }
  }
}
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	2b40      	cmp	r3, #64	; 0x40
 80060e8:	d108      	bne.n	80060fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060fa:	e007      	b.n	800610c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	60da      	str	r2, [r3, #12]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	3b10      	subs	r3, #16
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <DMA_CalcBaseAndBitshift+0x60>)
 800612a:	fba2 2303 	umull	r2, r3, r2, r3
 800612e:	091b      	lsrs	r3, r3, #4
 8006130:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006132:	4a12      	ldr	r2, [pc, #72]	; (800617c <DMA_CalcBaseAndBitshift+0x64>)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b03      	cmp	r3, #3
 8006144:	d908      	bls.n	8006158 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	461a      	mov	r2, r3
 800614c:	4b0c      	ldr	r3, [pc, #48]	; (8006180 <DMA_CalcBaseAndBitshift+0x68>)
 800614e:	4013      	ands	r3, r2
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	659a      	str	r2, [r3, #88]	; 0x58
 8006156:	e006      	b.n	8006166 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	4b08      	ldr	r3, [pc, #32]	; (8006180 <DMA_CalcBaseAndBitshift+0x68>)
 8006160:	4013      	ands	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	aaaaaaab 	.word	0xaaaaaaab
 800617c:	0800ed14 	.word	0x0800ed14
 8006180:	fffffc00 	.word	0xfffffc00

08006184 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d11f      	bne.n	80061de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d856      	bhi.n	8006252 <DMA_CheckFifoParam+0xce>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <DMA_CheckFifoParam+0x28>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061cf 	.word	0x080061cf
 80061b4:	080061bd 	.word	0x080061bd
 80061b8:	08006253 	.word	0x08006253
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d046      	beq.n	8006256 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061cc:	e043      	b.n	8006256 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061d6:	d140      	bne.n	800625a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061dc:	e03d      	b.n	800625a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e6:	d121      	bne.n	800622c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d837      	bhi.n	800625e <DMA_CheckFifoParam+0xda>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <DMA_CheckFifoParam+0x70>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006205 	.word	0x08006205
 80061f8:	0800620b 	.word	0x0800620b
 80061fc:	08006205 	.word	0x08006205
 8006200:	0800621d 	.word	0x0800621d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	73fb      	strb	r3, [r7, #15]
      break;
 8006208:	e030      	b.n	800626c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d025      	beq.n	8006262 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621a:	e022      	b.n	8006262 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006224:	d11f      	bne.n	8006266 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800622a:	e01c      	b.n	8006266 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b02      	cmp	r3, #2
 8006230:	d903      	bls.n	800623a <DMA_CheckFifoParam+0xb6>
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d003      	beq.n	8006240 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006238:	e018      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	73fb      	strb	r3, [r7, #15]
      break;
 800623e:	e015      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00e      	beq.n	800626a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	73fb      	strb	r3, [r7, #15]
      break;
 8006250:	e00b      	b.n	800626a <DMA_CheckFifoParam+0xe6>
      break;
 8006252:	bf00      	nop
 8006254:	e00a      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;
 8006256:	bf00      	nop
 8006258:	e008      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;
 800625a:	bf00      	nop
 800625c:	e006      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;
 800625e:	bf00      	nop
 8006260:	e004      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;   
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <DMA_CheckFifoParam+0xe8>
      break;
 800626a:	bf00      	nop
    }
  } 
  
  return status; 
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800627c:	b480      	push	{r7}
 800627e:	b089      	sub	sp, #36	; 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006286:	2300      	movs	r3, #0
 8006288:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e169      	b.n	8006570 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800629c:	2201      	movs	r2, #1
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4013      	ands	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f040 8158 	bne.w	800656a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d00b      	beq.n	80062da <HAL_GPIO_Init+0x5e>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d007      	beq.n	80062da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80062ce:	2b11      	cmp	r3, #17
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b12      	cmp	r3, #18
 80062d8:	d130      	bne.n	800633c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	2203      	movs	r2, #3
 80062e6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ea:	43db      	mvns	r3, r3
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	4013      	ands	r3, r2
 80062f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	fa02 f303 	lsl.w	r3, r2, r3
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	4313      	orrs	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006310:	2201      	movs	r2, #1
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	43db      	mvns	r3, r3
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	091b      	lsrs	r3, r3, #4
 8006326:	f003 0201 	and.w	r2, r3, #1
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4313      	orrs	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	2203      	movs	r2, #3
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	689a      	ldr	r2, [r3, #8]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	4313      	orrs	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d003      	beq.n	800637c <HAL_GPIO_Init+0x100>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b12      	cmp	r3, #18
 800637a:	d123      	bne.n	80063c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	08da      	lsrs	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3208      	adds	r2, #8
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	220f      	movs	r2, #15
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	08da      	lsrs	r2, r3, #3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3208      	adds	r2, #8
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2203      	movs	r2, #3
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0203 	and.w	r2, r3, #3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80b2 	beq.w	800656a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006406:	4b60      	ldr	r3, [pc, #384]	; (8006588 <HAL_GPIO_Init+0x30c>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640a:	4a5f      	ldr	r2, [pc, #380]	; (8006588 <HAL_GPIO_Init+0x30c>)
 800640c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006410:	6453      	str	r3, [r2, #68]	; 0x44
 8006412:	4b5d      	ldr	r3, [pc, #372]	; (8006588 <HAL_GPIO_Init+0x30c>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800641e:	4a5b      	ldr	r2, [pc, #364]	; (800658c <HAL_GPIO_Init+0x310>)
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	089b      	lsrs	r3, r3, #2
 8006424:	3302      	adds	r3, #2
 8006426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f003 0303 	and.w	r3, r3, #3
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	220f      	movs	r2, #15
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	43db      	mvns	r3, r3
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4013      	ands	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a52      	ldr	r2, [pc, #328]	; (8006590 <HAL_GPIO_Init+0x314>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d02b      	beq.n	80064a2 <HAL_GPIO_Init+0x226>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a51      	ldr	r2, [pc, #324]	; (8006594 <HAL_GPIO_Init+0x318>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d025      	beq.n	800649e <HAL_GPIO_Init+0x222>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a50      	ldr	r2, [pc, #320]	; (8006598 <HAL_GPIO_Init+0x31c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01f      	beq.n	800649a <HAL_GPIO_Init+0x21e>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a4f      	ldr	r2, [pc, #316]	; (800659c <HAL_GPIO_Init+0x320>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d019      	beq.n	8006496 <HAL_GPIO_Init+0x21a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a4e      	ldr	r2, [pc, #312]	; (80065a0 <HAL_GPIO_Init+0x324>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d013      	beq.n	8006492 <HAL_GPIO_Init+0x216>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a4d      	ldr	r2, [pc, #308]	; (80065a4 <HAL_GPIO_Init+0x328>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00d      	beq.n	800648e <HAL_GPIO_Init+0x212>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a4c      	ldr	r2, [pc, #304]	; (80065a8 <HAL_GPIO_Init+0x32c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <HAL_GPIO_Init+0x20e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <HAL_GPIO_Init+0x330>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <HAL_GPIO_Init+0x20a>
 8006482:	2307      	movs	r3, #7
 8006484:	e00e      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 8006486:	2308      	movs	r3, #8
 8006488:	e00c      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 800648a:	2306      	movs	r3, #6
 800648c:	e00a      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 800648e:	2305      	movs	r3, #5
 8006490:	e008      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 8006492:	2304      	movs	r3, #4
 8006494:	e006      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 8006496:	2303      	movs	r3, #3
 8006498:	e004      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 800649a:	2302      	movs	r3, #2
 800649c:	e002      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <HAL_GPIO_Init+0x228>
 80064a2:	2300      	movs	r3, #0
 80064a4:	69fa      	ldr	r2, [r7, #28]
 80064a6:	f002 0203 	and.w	r2, r2, #3
 80064aa:	0092      	lsls	r2, r2, #2
 80064ac:	4093      	lsls	r3, r2
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80064b4:	4935      	ldr	r1, [pc, #212]	; (800658c <HAL_GPIO_Init+0x310>)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	3302      	adds	r3, #2
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064c2:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <HAL_GPIO_Init+0x334>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	43db      	mvns	r3, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4013      	ands	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064e6:	4a32      	ldr	r2, [pc, #200]	; (80065b0 <HAL_GPIO_Init+0x334>)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <HAL_GPIO_Init+0x334>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006510:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <HAL_GPIO_Init+0x334>)
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006516:	4b26      	ldr	r3, [pc, #152]	; (80065b0 <HAL_GPIO_Init+0x334>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	43db      	mvns	r3, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4013      	ands	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <HAL_GPIO_Init+0x334>)
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006540:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <HAL_GPIO_Init+0x334>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006564:	4a12      	ldr	r2, [pc, #72]	; (80065b0 <HAL_GPIO_Init+0x334>)
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	3301      	adds	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	f67f ae92 	bls.w	800629c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	3724      	adds	r7, #36	; 0x24
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40023800 	.word	0x40023800
 800658c:	40013800 	.word	0x40013800
 8006590:	40020000 	.word	0x40020000
 8006594:	40020400 	.word	0x40020400
 8006598:	40020800 	.word	0x40020800
 800659c:	40020c00 	.word	0x40020c00
 80065a0:	40021000 	.word	0x40021000
 80065a4:	40021400 	.word	0x40021400
 80065a8:	40021800 	.word	0x40021800
 80065ac:	40021c00 	.word	0x40021c00
 80065b0:	40013c00 	.word	0x40013c00

080065b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
 80065c0:	4613      	mov	r3, r2
 80065c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065c4:	787b      	ldrb	r3, [r7, #1]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ca:	887a      	ldrh	r2, [r7, #2]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80065d0:	e003      	b.n	80065da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80065d2:	887b      	ldrh	r3, [r7, #2]
 80065d4:	041a      	lsls	r2, r3, #16
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	619a      	str	r2, [r3, #24]
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065e8:	b08f      	sub	sp, #60	; 0x3c
 80065ea:	af0a      	add	r7, sp, #40	; 0x28
 80065ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e116      	b.n	8006826 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fe fb58 	bl	8004cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2203      	movs	r2, #3
 800661c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f004 f92e 	bl	800a898 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	603b      	str	r3, [r7, #0]
 8006642:	687e      	ldr	r6, [r7, #4]
 8006644:	466d      	mov	r5, sp
 8006646:	f106 0410 	add.w	r4, r6, #16
 800664a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800664e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006656:	e885 0003 	stmia.w	r5, {r0, r1}
 800665a:	1d33      	adds	r3, r6, #4
 800665c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800665e:	6838      	ldr	r0, [r7, #0]
 8006660:	f004 f8bc 	bl	800a7dc <USB_CoreInit>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e0d7      	b.n	8006826 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f004 f91c 	bl	800a8ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	e04a      	b.n	800671e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006688:	7bfa      	ldrb	r2, [r7, #15]
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	333d      	adds	r3, #61	; 0x3d
 8006698:	2201      	movs	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800669c:	7bfa      	ldrb	r2, [r7, #15]
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	333c      	adds	r3, #60	; 0x3c
 80066ac:	7bfa      	ldrb	r2, [r7, #15]
 80066ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066b0:	7bfa      	ldrb	r2, [r7, #15]
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	b298      	uxth	r0, r3
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	3342      	adds	r3, #66	; 0x42
 80066c4:	4602      	mov	r2, r0
 80066c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066c8:	7bfa      	ldrb	r2, [r7, #15]
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	4613      	mov	r3, r2
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	333f      	adds	r3, #63	; 0x3f
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	3344      	adds	r3, #68	; 0x44
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066f0:	7bfa      	ldrb	r2, [r7, #15]
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	4613      	mov	r3, r2
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	1a9b      	subs	r3, r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	440b      	add	r3, r1
 80066fe:	3348      	adds	r3, #72	; 0x48
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006704:	7bfa      	ldrb	r2, [r7, #15]
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	4613      	mov	r3, r2
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	1a9b      	subs	r3, r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	440b      	add	r3, r1
 8006712:	3350      	adds	r3, #80	; 0x50
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	3301      	adds	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d3af      	bcc.n	8006688 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006728:	2300      	movs	r3, #0
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e044      	b.n	80067b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800672e:	7bfa      	ldrb	r2, [r7, #15]
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	1a9b      	subs	r3, r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	440b      	add	r3, r1
 800673c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006744:	7bfa      	ldrb	r2, [r7, #15]
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800675a:	7bfa      	ldrb	r2, [r7, #15]
 800675c:	6879      	ldr	r1, [r7, #4]
 800675e:	4613      	mov	r3, r2
 8006760:	00db      	lsls	r3, r3, #3
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	440b      	add	r3, r1
 8006768:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006770:	7bfa      	ldrb	r2, [r7, #15]
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006786:	7bfa      	ldrb	r2, [r7, #15]
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800679c:	7bfa      	ldrb	r2, [r7, #15]
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	440b      	add	r3, r1
 80067aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	3301      	adds	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	7bfa      	ldrb	r2, [r7, #15]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d3b5      	bcc.n	800672e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	687e      	ldr	r6, [r7, #4]
 80067ca:	466d      	mov	r5, sp
 80067cc:	f106 0410 	add.w	r4, r6, #16
 80067d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80067e0:	1d33      	adds	r3, r6, #4
 80067e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067e4:	6838      	ldr	r0, [r7, #0]
 80067e6:	f004 f893 	bl	800a910 <USB_DevInit>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d005      	beq.n	80067fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e014      	b.n	8006826 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b01      	cmp	r3, #1
 8006812:	d102      	bne.n	800681a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f80b 	bl	8006830 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f004 fa45 	bl	800acae <USB_DevDisconnect>

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006830 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685e:	4b05      	ldr	r3, [pc, #20]	; (8006874 <HAL_PCDEx_ActivateLPM+0x44>)
 8006860:	4313      	orrs	r3, r2
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	10000003 	.word	0x10000003

08006878 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800687c:	4b05      	ldr	r3, [pc, #20]	; (8006894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40007000 	.word	0x40007000

08006898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800689e:	2300      	movs	r3, #0
 80068a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80068a2:	4b23      	ldr	r3, [pc, #140]	; (8006930 <HAL_PWREx_EnableOverDrive+0x98>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a22      	ldr	r2, [pc, #136]	; (8006930 <HAL_PWREx_EnableOverDrive+0x98>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b20      	ldr	r3, [pc, #128]	; (8006930 <HAL_PWREx_EnableOverDrive+0x98>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80068ba:	4b1e      	ldr	r3, [pc, #120]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068c6:	f7fe fbfd 	bl	80050c4 <HAL_GetTick>
 80068ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068cc:	e009      	b.n	80068e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068ce:	f7fe fbf9 	bl	80050c4 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068dc:	d901      	bls.n	80068e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e022      	b.n	8006928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068e2:	4b14      	ldr	r3, [pc, #80]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ee:	d1ee      	bne.n	80068ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0f      	ldr	r2, [pc, #60]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068fc:	f7fe fbe2 	bl	80050c4 <HAL_GetTick>
 8006900:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006902:	e009      	b.n	8006918 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006904:	f7fe fbde 	bl	80050c4 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006912:	d901      	bls.n	8006918 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e007      	b.n	8006928 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <HAL_PWREx_EnableOverDrive+0x9c>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006920:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006924:	d1ee      	bne.n	8006904 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40023800 	.word	0x40023800
 8006934:	40007000 	.word	0x40007000

08006938 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006940:	2300      	movs	r3, #0
 8006942:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e291      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8087 	beq.w	8006a6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800695c:	4b96      	ldr	r3, [pc, #600]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 030c 	and.w	r3, r3, #12
 8006964:	2b04      	cmp	r3, #4
 8006966:	d00c      	beq.n	8006982 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006968:	4b93      	ldr	r3, [pc, #588]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f003 030c 	and.w	r3, r3, #12
 8006970:	2b08      	cmp	r3, #8
 8006972:	d112      	bne.n	800699a <HAL_RCC_OscConfig+0x62>
 8006974:	4b90      	ldr	r3, [pc, #576]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800697c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006980:	d10b      	bne.n	800699a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006982:	4b8d      	ldr	r3, [pc, #564]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d06c      	beq.n	8006a68 <HAL_RCC_OscConfig+0x130>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d168      	bne.n	8006a68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e26b      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a2:	d106      	bne.n	80069b2 <HAL_RCC_OscConfig+0x7a>
 80069a4:	4b84      	ldr	r3, [pc, #528]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a83      	ldr	r2, [pc, #524]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e02e      	b.n	8006a10 <HAL_RCC_OscConfig+0xd8>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCC_OscConfig+0x9c>
 80069ba:	4b7f      	ldr	r3, [pc, #508]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a7e      	ldr	r2, [pc, #504]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	4b7c      	ldr	r3, [pc, #496]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a7b      	ldr	r2, [pc, #492]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e01d      	b.n	8006a10 <HAL_RCC_OscConfig+0xd8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069dc:	d10c      	bne.n	80069f8 <HAL_RCC_OscConfig+0xc0>
 80069de:	4b76      	ldr	r3, [pc, #472]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a75      	ldr	r2, [pc, #468]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069e8:	6013      	str	r3, [r2, #0]
 80069ea:	4b73      	ldr	r3, [pc, #460]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a72      	ldr	r2, [pc, #456]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	e00b      	b.n	8006a10 <HAL_RCC_OscConfig+0xd8>
 80069f8:	4b6f      	ldr	r3, [pc, #444]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a6e      	ldr	r2, [pc, #440]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 80069fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a02:	6013      	str	r3, [r2, #0]
 8006a04:	4b6c      	ldr	r3, [pc, #432]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a6b      	ldr	r2, [pc, #428]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d013      	beq.n	8006a40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a18:	f7fe fb54 	bl	80050c4 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a20:	f7fe fb50 	bl	80050c4 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e21f      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a32:	4b61      	ldr	r3, [pc, #388]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d0f0      	beq.n	8006a20 <HAL_RCC_OscConfig+0xe8>
 8006a3e:	e014      	b.n	8006a6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fe fb40 	bl	80050c4 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a48:	f7fe fb3c 	bl	80050c4 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e20b      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a5a:	4b57      	ldr	r3, [pc, #348]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x110>
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d069      	beq.n	8006b4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a76:	4b50      	ldr	r3, [pc, #320]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a82:	4b4d      	ldr	r3, [pc, #308]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d11c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x190>
 8006a8e:	4b4a      	ldr	r3, [pc, #296]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d116      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a9a:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x17a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d001      	beq.n	8006ab2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e1df      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab2:	4b41      	ldr	r3, [pc, #260]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	493d      	ldr	r1, [pc, #244]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ac6:	e040      	b.n	8006b4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ad0:	4b39      	ldr	r3, [pc, #228]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a38      	ldr	r2, [pc, #224]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fe faf2 	bl	80050c4 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ae4:	f7fe faee 	bl	80050c4 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e1bd      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006af6:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0302 	and.w	r3, r3, #2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	4b2d      	ldr	r3, [pc, #180]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4929      	ldr	r1, [pc, #164]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
 8006b16:	e018      	b.n	8006b4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b18:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fe face 	bl	80050c4 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fe faca 	bl	80050c4 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e199      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b3e:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d038      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d019      	beq.n	8006b92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b5e:	4b16      	ldr	r3, [pc, #88]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b62:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b6a:	f7fe faab 	bl	80050c4 <HAL_GetTick>
 8006b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b70:	e008      	b.n	8006b84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b72:	f7fe faa7 	bl	80050c4 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e176      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b84:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0f0      	beq.n	8006b72 <HAL_RCC_OscConfig+0x23a>
 8006b90:	e01a      	b.n	8006bc8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b96:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <HAL_RCC_OscConfig+0x280>)
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9e:	f7fe fa91 	bl	80050c4 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ba4:	e00a      	b.n	8006bbc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba6:	f7fe fa8d 	bl	80050c4 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d903      	bls.n	8006bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e15c      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
 8006bb8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bbc:	4b91      	ldr	r3, [pc, #580]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ee      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80a4 	beq.w	8006d1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd6:	4b8b      	ldr	r3, [pc, #556]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10d      	bne.n	8006bfe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be2:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	4a87      	ldr	r2, [pc, #540]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bec:	6413      	str	r3, [r2, #64]	; 0x40
 8006bee:	4b85      	ldr	r3, [pc, #532]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bfe:	4b82      	ldr	r3, [pc, #520]	; (8006e08 <HAL_RCC_OscConfig+0x4d0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d118      	bne.n	8006c3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c0a:	4b7f      	ldr	r3, [pc, #508]	; (8006e08 <HAL_RCC_OscConfig+0x4d0>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a7e      	ldr	r2, [pc, #504]	; (8006e08 <HAL_RCC_OscConfig+0x4d0>)
 8006c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c16:	f7fe fa55 	bl	80050c4 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1e:	f7fe fa51 	bl	80050c4 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b64      	cmp	r3, #100	; 0x64
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e120      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c30:	4b75      	ldr	r3, [pc, #468]	; (8006e08 <HAL_RCC_OscConfig+0x4d0>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d106      	bne.n	8006c52 <HAL_RCC_OscConfig+0x31a>
 8006c44:	4b6f      	ldr	r3, [pc, #444]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c48:	4a6e      	ldr	r2, [pc, #440]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c50:	e02d      	b.n	8006cae <HAL_RCC_OscConfig+0x376>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10c      	bne.n	8006c74 <HAL_RCC_OscConfig+0x33c>
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c60:	f023 0301 	bic.w	r3, r3, #1
 8006c64:	6713      	str	r3, [r2, #112]	; 0x70
 8006c66:	4b67      	ldr	r3, [pc, #412]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6a:	4a66      	ldr	r2, [pc, #408]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	6713      	str	r3, [r2, #112]	; 0x70
 8006c72:	e01c      	b.n	8006cae <HAL_RCC_OscConfig+0x376>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	2b05      	cmp	r3, #5
 8006c7a:	d10c      	bne.n	8006c96 <HAL_RCC_OscConfig+0x35e>
 8006c7c:	4b61      	ldr	r3, [pc, #388]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	4a60      	ldr	r2, [pc, #384]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c82:	f043 0304 	orr.w	r3, r3, #4
 8006c86:	6713      	str	r3, [r2, #112]	; 0x70
 8006c88:	4b5e      	ldr	r3, [pc, #376]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8c:	4a5d      	ldr	r2, [pc, #372]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	f043 0301 	orr.w	r3, r3, #1
 8006c92:	6713      	str	r3, [r2, #112]	; 0x70
 8006c94:	e00b      	b.n	8006cae <HAL_RCC_OscConfig+0x376>
 8006c96:	4b5b      	ldr	r3, [pc, #364]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a5a      	ldr	r2, [pc, #360]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	4b58      	ldr	r3, [pc, #352]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a57      	ldr	r2, [pc, #348]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	f023 0304 	bic.w	r3, r3, #4
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d015      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb6:	f7fe fa05 	bl	80050c4 <HAL_GetTick>
 8006cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	e00a      	b.n	8006cd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cbe:	f7fe fa01 	bl	80050c4 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d901      	bls.n	8006cd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e0ce      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	4b4b      	ldr	r3, [pc, #300]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ee      	beq.n	8006cbe <HAL_RCC_OscConfig+0x386>
 8006ce0:	e014      	b.n	8006d0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce2:	f7fe f9ef 	bl	80050c4 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006ce8:	e00a      	b.n	8006d00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cea:	f7fe f9eb 	bl	80050c4 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e0b8      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d00:	4b40      	ldr	r3, [pc, #256]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1ee      	bne.n	8006cea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d105      	bne.n	8006d1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d12:	4b3c      	ldr	r3, [pc, #240]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d16:	4a3b      	ldr	r2, [pc, #236]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 80a4 	beq.w	8006e70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d28:	4b36      	ldr	r3, [pc, #216]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 030c 	and.w	r3, r3, #12
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d06b      	beq.n	8006e0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d149      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3c:	4b31      	ldr	r3, [pc, #196]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a30      	ldr	r2, [pc, #192]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d48:	f7fe f9bc 	bl	80050c4 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d50:	f7fe f9b8 	bl	80050c4 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e087      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d62:	4b28      	ldr	r3, [pc, #160]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	69da      	ldr	r2, [r3, #28]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	019b      	lsls	r3, r3, #6
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	3b01      	subs	r3, #1
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	061b      	lsls	r3, r3, #24
 8006d92:	4313      	orrs	r3, r2
 8006d94:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d9c:	4b19      	ldr	r3, [pc, #100]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006da8:	f7fe f98c 	bl	80050c4 <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dae:	e008      	b.n	8006dc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db0:	f7fe f988 	bl	80050c4 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e057      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f0      	beq.n	8006db0 <HAL_RCC_OscConfig+0x478>
 8006dce:	e04f      	b.n	8006e70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a0b      	ldr	r2, [pc, #44]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ddc:	f7fe f972 	bl	80050c4 <HAL_GetTick>
 8006de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de4:	f7fe f96e 	bl	80050c4 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e03d      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df6:	4b03      	ldr	r3, [pc, #12]	; (8006e04 <HAL_RCC_OscConfig+0x4cc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1f0      	bne.n	8006de4 <HAL_RCC_OscConfig+0x4ac>
 8006e02:	e035      	b.n	8006e70 <HAL_RCC_OscConfig+0x538>
 8006e04:	40023800 	.word	0x40023800
 8006e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e0c:	4b1b      	ldr	r3, [pc, #108]	; (8006e7c <HAL_RCC_OscConfig+0x544>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d028      	beq.n	8006e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d121      	bne.n	8006e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d11a      	bne.n	8006e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d111      	bne.n	8006e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	085b      	lsrs	r3, r3, #1
 8006e54:	3b01      	subs	r3, #1
 8006e56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d107      	bne.n	8006e6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d001      	beq.n	8006e70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800

08006e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e0d0      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e98:	4b6a      	ldr	r3, [pc, #424]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d910      	bls.n	8006ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b67      	ldr	r3, [pc, #412]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f023 020f 	bic.w	r2, r3, #15
 8006eae:	4965      	ldr	r1, [pc, #404]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb6:	4b63      	ldr	r3, [pc, #396]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 030f 	and.w	r3, r3, #15
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d001      	beq.n	8006ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0b8      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d020      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee0:	4b59      	ldr	r3, [pc, #356]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	4a58      	ldr	r2, [pc, #352]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ef8:	4b53      	ldr	r3, [pc, #332]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	4a52      	ldr	r2, [pc, #328]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f04:	4b50      	ldr	r3, [pc, #320]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	494d      	ldr	r1, [pc, #308]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d040      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d107      	bne.n	8006f3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2a:	4b47      	ldr	r3, [pc, #284]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d115      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e07f      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d107      	bne.n	8006f52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f42:	4b41      	ldr	r3, [pc, #260]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d109      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e073      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f52:	4b3d      	ldr	r3, [pc, #244]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e06b      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f62:	4b39      	ldr	r3, [pc, #228]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f023 0203 	bic.w	r2, r3, #3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	4936      	ldr	r1, [pc, #216]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f74:	f7fe f8a6 	bl	80050c4 <HAL_GetTick>
 8006f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7a:	e00a      	b.n	8006f92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f7c:	f7fe f8a2 	bl	80050c4 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e053      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f92:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 020c 	and.w	r2, r3, #12
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d1eb      	bne.n	8006f7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 030f 	and.w	r3, r3, #15
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d210      	bcs.n	8006fd4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b24      	ldr	r3, [pc, #144]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f023 020f 	bic.w	r2, r3, #15
 8006fba:	4922      	ldr	r1, [pc, #136]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc2:	4b20      	ldr	r3, [pc, #128]	; (8007044 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d001      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e032      	b.n	800703a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe0:	4b19      	ldr	r3, [pc, #100]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4916      	ldr	r1, [pc, #88]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d009      	beq.n	8007012 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ffe:	4b12      	ldr	r3, [pc, #72]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	490e      	ldr	r1, [pc, #56]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 800700e:	4313      	orrs	r3, r2
 8007010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007012:	f000 f821 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 8007016:	4602      	mov	r2, r0
 8007018:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <HAL_RCC_ClockConfig+0x1c8>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	091b      	lsrs	r3, r3, #4
 800701e:	f003 030f 	and.w	r3, r3, #15
 8007022:	490a      	ldr	r1, [pc, #40]	; (800704c <HAL_RCC_ClockConfig+0x1cc>)
 8007024:	5ccb      	ldrb	r3, [r1, r3]
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <HAL_RCC_ClockConfig+0x1d0>)
 800702c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800702e:	4b09      	ldr	r3, [pc, #36]	; (8007054 <HAL_RCC_ClockConfig+0x1d4>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7fe f802 	bl	800503c <HAL_InitTick>

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40023c00 	.word	0x40023c00
 8007048:	40023800 	.word	0x40023800
 800704c:	0800ecfc 	.word	0x0800ecfc
 8007050:	20000000 	.word	0x20000000
 8007054:	20000004 	.word	0x20000004

08007058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800705c:	b094      	sub	sp, #80	; 0x50
 800705e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	647b      	str	r3, [r7, #68]	; 0x44
 8007064:	2300      	movs	r3, #0
 8007066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007068:	2300      	movs	r3, #0
 800706a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007070:	4b79      	ldr	r3, [pc, #484]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 030c 	and.w	r3, r3, #12
 8007078:	2b08      	cmp	r3, #8
 800707a:	d00d      	beq.n	8007098 <HAL_RCC_GetSysClockFreq+0x40>
 800707c:	2b08      	cmp	r3, #8
 800707e:	f200 80e1 	bhi.w	8007244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <HAL_RCC_GetSysClockFreq+0x34>
 8007086:	2b04      	cmp	r3, #4
 8007088:	d003      	beq.n	8007092 <HAL_RCC_GetSysClockFreq+0x3a>
 800708a:	e0db      	b.n	8007244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800708c:	4b73      	ldr	r3, [pc, #460]	; (800725c <HAL_RCC_GetSysClockFreq+0x204>)
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007090:	e0db      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007092:	4b73      	ldr	r3, [pc, #460]	; (8007260 <HAL_RCC_GetSysClockFreq+0x208>)
 8007094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007096:	e0d8      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007098:	4b6f      	ldr	r3, [pc, #444]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070a2:	4b6d      	ldr	r3, [pc, #436]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d063      	beq.n	8007176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070ae:	4b6a      	ldr	r3, [pc, #424]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	099b      	lsrs	r3, r3, #6
 80070b4:	2200      	movs	r2, #0
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	633b      	str	r3, [r7, #48]	; 0x30
 80070c2:	2300      	movs	r3, #0
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34
 80070c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070ca:	4622      	mov	r2, r4
 80070cc:	462b      	mov	r3, r5
 80070ce:	f04f 0000 	mov.w	r0, #0
 80070d2:	f04f 0100 	mov.w	r1, #0
 80070d6:	0159      	lsls	r1, r3, #5
 80070d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070dc:	0150      	lsls	r0, r2, #5
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4621      	mov	r1, r4
 80070e4:	1a51      	subs	r1, r2, r1
 80070e6:	6139      	str	r1, [r7, #16]
 80070e8:	4629      	mov	r1, r5
 80070ea:	eb63 0301 	sbc.w	r3, r3, r1
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	f04f 0200 	mov.w	r2, #0
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070fc:	4659      	mov	r1, fp
 80070fe:	018b      	lsls	r3, r1, #6
 8007100:	4651      	mov	r1, sl
 8007102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007106:	4651      	mov	r1, sl
 8007108:	018a      	lsls	r2, r1, #6
 800710a:	4651      	mov	r1, sl
 800710c:	ebb2 0801 	subs.w	r8, r2, r1
 8007110:	4659      	mov	r1, fp
 8007112:	eb63 0901 	sbc.w	r9, r3, r1
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800712a:	4690      	mov	r8, r2
 800712c:	4699      	mov	r9, r3
 800712e:	4623      	mov	r3, r4
 8007130:	eb18 0303 	adds.w	r3, r8, r3
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	462b      	mov	r3, r5
 8007138:	eb49 0303 	adc.w	r3, r9, r3
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800714a:	4629      	mov	r1, r5
 800714c:	024b      	lsls	r3, r1, #9
 800714e:	4621      	mov	r1, r4
 8007150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007154:	4621      	mov	r1, r4
 8007156:	024a      	lsls	r2, r1, #9
 8007158:	4610      	mov	r0, r2
 800715a:	4619      	mov	r1, r3
 800715c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800715e:	2200      	movs	r2, #0
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
 8007162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007168:	f7f9 fd46 	bl	8000bf8 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4613      	mov	r3, r2
 8007172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007174:	e058      	b.n	8007228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007176:	4b38      	ldr	r3, [pc, #224]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	099b      	lsrs	r3, r3, #6
 800717c:	2200      	movs	r2, #0
 800717e:	4618      	mov	r0, r3
 8007180:	4611      	mov	r1, r2
 8007182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007186:	623b      	str	r3, [r7, #32]
 8007188:	2300      	movs	r3, #0
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
 800718c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007190:	4642      	mov	r2, r8
 8007192:	464b      	mov	r3, r9
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f04f 0100 	mov.w	r1, #0
 800719c:	0159      	lsls	r1, r3, #5
 800719e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071a2:	0150      	lsls	r0, r2, #5
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	4641      	mov	r1, r8
 80071aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80071ae:	4649      	mov	r1, r9
 80071b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071c8:	ebb2 040a 	subs.w	r4, r2, sl
 80071cc:	eb63 050b 	sbc.w	r5, r3, fp
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	00eb      	lsls	r3, r5, #3
 80071da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071de:	00e2      	lsls	r2, r4, #3
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	4643      	mov	r3, r8
 80071e6:	18e3      	adds	r3, r4, r3
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	464b      	mov	r3, r9
 80071ec:	eb45 0303 	adc.w	r3, r5, r3
 80071f0:	607b      	str	r3, [r7, #4]
 80071f2:	f04f 0200 	mov.w	r2, #0
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071fe:	4629      	mov	r1, r5
 8007200:	028b      	lsls	r3, r1, #10
 8007202:	4621      	mov	r1, r4
 8007204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007208:	4621      	mov	r1, r4
 800720a:	028a      	lsls	r2, r1, #10
 800720c:	4610      	mov	r0, r2
 800720e:	4619      	mov	r1, r3
 8007210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007212:	2200      	movs	r2, #0
 8007214:	61bb      	str	r3, [r7, #24]
 8007216:	61fa      	str	r2, [r7, #28]
 8007218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800721c:	f7f9 fcec 	bl	8000bf8 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4613      	mov	r3, r2
 8007226:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_RCC_GetSysClockFreq+0x200>)
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	3301      	adds	r3, #1
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800723a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007242:	e002      	b.n	800724a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007244:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_RCC_GetSysClockFreq+0x204>)
 8007246:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800724a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800724c:	4618      	mov	r0, r3
 800724e:	3750      	adds	r7, #80	; 0x50
 8007250:	46bd      	mov	sp, r7
 8007252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007256:	bf00      	nop
 8007258:	40023800 	.word	0x40023800
 800725c:	00f42400 	.word	0x00f42400
 8007260:	007a1200 	.word	0x007a1200

08007264 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007264:	b480      	push	{r7}
 8007266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007268:	4b03      	ldr	r3, [pc, #12]	; (8007278 <HAL_RCC_GetHCLKFreq+0x14>)
 800726a:	681b      	ldr	r3, [r3, #0]
}
 800726c:	4618      	mov	r0, r3
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	20000000 	.word	0x20000000

0800727c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007280:	f7ff fff0 	bl	8007264 <HAL_RCC_GetHCLKFreq>
 8007284:	4602      	mov	r2, r0
 8007286:	4b05      	ldr	r3, [pc, #20]	; (800729c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	0a9b      	lsrs	r3, r3, #10
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	4903      	ldr	r1, [pc, #12]	; (80072a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007292:	5ccb      	ldrb	r3, [r1, r3]
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007298:	4618      	mov	r0, r3
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40023800 	.word	0x40023800
 80072a0:	0800ed0c 	.word	0x0800ed0c

080072a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072a8:	f7ff ffdc 	bl	8007264 <HAL_RCC_GetHCLKFreq>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	0b5b      	lsrs	r3, r3, #13
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	4903      	ldr	r1, [pc, #12]	; (80072c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ba:	5ccb      	ldrb	r3, [r1, r3]
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	40023800 	.word	0x40023800
 80072c8:	0800ed0c 	.word	0x0800ed0c

080072cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b088      	sub	sp, #32
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d012      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072f0:	4b65      	ldr	r3, [pc, #404]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4a64      	ldr	r2, [pc, #400]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80072fa:	6093      	str	r3, [r2, #8]
 80072fc:	4b62      	ldr	r3, [pc, #392]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	4960      	ldr	r1, [pc, #384]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007306:	4313      	orrs	r3, r2
 8007308:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8007312:	2301      	movs	r3, #1
 8007314:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d017      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007322:	4b59      	ldr	r3, [pc, #356]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	4955      	ldr	r1, [pc, #340]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007340:	d101      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8007342:	2301      	movs	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d017      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800735e:	4b4a      	ldr	r3, [pc, #296]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	4946      	ldr	r1, [pc, #280]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800738a:	2301      	movs	r3, #1
 800738c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 808b 	beq.w	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800739c:	4b3a      	ldr	r3, [pc, #232]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	4a39      	ldr	r2, [pc, #228]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a6:	6413      	str	r3, [r2, #64]	; 0x40
 80073a8:	4b37      	ldr	r3, [pc, #220]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073b4:	4b35      	ldr	r3, [pc, #212]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a34      	ldr	r2, [pc, #208]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c0:	f7fd fe80 	bl	80050c4 <HAL_GetTick>
 80073c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073c8:	f7fd fe7c 	bl	80050c4 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b64      	cmp	r3, #100	; 0x64
 80073d4:	d901      	bls.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e2bc      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073da:	4b2c      	ldr	r3, [pc, #176]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0f0      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073e6:	4b28      	ldr	r3, [pc, #160]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d035      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	429a      	cmp	r2, r3
 8007402:	d02e      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007404:	4b20      	ldr	r3, [pc, #128]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800740c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800740e:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007412:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007418:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741e:	4a1a      	ldr	r2, [pc, #104]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b01      	cmp	r3, #1
 8007436:	d114      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007438:	f7fd fe44 	bl	80050c4 <HAL_GetTick>
 800743c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800743e:	e00a      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007440:	f7fd fe40 	bl	80050c4 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f241 3288 	movw	r2, #5000	; 0x1388
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e27e      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0ee      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800746e:	d111      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800747e:	400b      	ands	r3, r1
 8007480:	4901      	ldr	r1, [pc, #4]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
 8007486:	e00b      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007488:	40023800 	.word	0x40023800
 800748c:	40007000 	.word	0x40007000
 8007490:	0ffffcff 	.word	0x0ffffcff
 8007494:	4ba4      	ldr	r3, [pc, #656]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4aa3      	ldr	r2, [pc, #652]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800749a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800749e:	6093      	str	r3, [r2, #8]
 80074a0:	4ba1      	ldr	r3, [pc, #644]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ac:	499e      	ldr	r1, [pc, #632]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d010      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074be:	4b9a      	ldr	r3, [pc, #616]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074c4:	4a98      	ldr	r2, [pc, #608]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80074ce:	4b96      	ldr	r3, [pc, #600]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d8:	4993      	ldr	r1, [pc, #588]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074ec:	4b8e      	ldr	r3, [pc, #568]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074fa:	498b      	ldr	r1, [pc, #556]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800750e:	4b86      	ldr	r3, [pc, #536]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800751c:	4982      	ldr	r1, [pc, #520]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007530:	4b7d      	ldr	r3, [pc, #500]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800753e:	497a      	ldr	r1, [pc, #488]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007552:	4b75      	ldr	r3, [pc, #468]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007558:	f023 0203 	bic.w	r2, r3, #3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007560:	4971      	ldr	r1, [pc, #452]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007574:	4b6c      	ldr	r3, [pc, #432]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757a:	f023 020c 	bic.w	r2, r3, #12
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	4969      	ldr	r1, [pc, #420]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007596:	4b64      	ldr	r3, [pc, #400]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	4960      	ldr	r1, [pc, #384]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075b8:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c6:	4958      	ldr	r1, [pc, #352]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075da:	4b53      	ldr	r3, [pc, #332]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e8:	494f      	ldr	r1, [pc, #316]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80075fc:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80075fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760a:	4947      	ldr	r1, [pc, #284]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800761e:	4b42      	ldr	r3, [pc, #264]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	493e      	ldr	r1, [pc, #248]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007640:	4b39      	ldr	r3, [pc, #228]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764e:	4936      	ldr	r1, [pc, #216]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d011      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007662:	4b31      	ldr	r3, [pc, #196]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007668:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007670:	492d      	ldr	r1, [pc, #180]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007680:	d101      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007682:	2301      	movs	r3, #1
 8007684:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007692:	4b25      	ldr	r3, [pc, #148]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007698:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076a0:	4921      	ldr	r1, [pc, #132]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00a      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c2:	4919      	ldr	r1, [pc, #100]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80076d6:	4b14      	ldr	r3, [pc, #80]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076dc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076e4:	4910      	ldr	r1, [pc, #64]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d006      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 809d 	beq.w	800783a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007700:	4b09      	ldr	r3, [pc, #36]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a08      	ldr	r2, [pc, #32]	; (8007728 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007706:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800770a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770c:	f7fd fcda 	bl	80050c4 <HAL_GetTick>
 8007710:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007712:	e00b      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007714:	f7fd fcd6 	bl	80050c4 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b64      	cmp	r3, #100	; 0x64
 8007720:	d904      	bls.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e116      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007726:	bf00      	nop
 8007728:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800772c:	4b8b      	ldr	r3, [pc, #556]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1ed      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d113      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800774c:	4b83      	ldr	r3, [pc, #524]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800774e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007752:	0e1b      	lsrs	r3, r3, #24
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	019a      	lsls	r2, r3, #6
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	061b      	lsls	r3, r3, #24
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	071b      	lsls	r3, r3, #28
 800776c:	497b      	ldr	r1, [pc, #492]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d004      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007788:	d00a      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007792:	2b00      	cmp	r3, #0
 8007794:	d024      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800779e:	d11f      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077a0:	4b6e      	ldr	r3, [pc, #440]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a6:	0f1b      	lsrs	r3, r3, #28
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	019a      	lsls	r2, r3, #6
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	061b      	lsls	r3, r3, #24
 80077ba:	431a      	orrs	r2, r3
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	071b      	lsls	r3, r3, #28
 80077c0:	4966      	ldr	r1, [pc, #408]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077c8:	4b64      	ldr	r3, [pc, #400]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ce:	f023 021f 	bic.w	r2, r3, #31
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	4960      	ldr	r1, [pc, #384]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00d      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	019a      	lsls	r2, r3, #6
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	061b      	lsls	r3, r3, #24
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	071b      	lsls	r3, r3, #28
 8007800:	4956      	ldr	r1, [pc, #344]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007808:	4b54      	ldr	r3, [pc, #336]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a53      	ldr	r2, [pc, #332]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800780e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007814:	f7fd fc56 	bl	80050c4 <HAL_GetTick>
 8007818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800781a:	e008      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800781c:	f7fd fc52 	bl	80050c4 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b64      	cmp	r3, #100	; 0x64
 8007828:	d901      	bls.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e092      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800782e:	4b4b      	ldr	r3, [pc, #300]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 8088 	bne.w	8007952 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007842:	4b46      	ldr	r3, [pc, #280]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a45      	ldr	r2, [pc, #276]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800784c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784e:	f7fd fc39 	bl	80050c4 <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007854:	e008      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007856:	f7fd fc35 	bl	80050c4 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b64      	cmp	r3, #100	; 0x64
 8007862:	d901      	bls.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e075      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007868:	4b3c      	ldr	r3, [pc, #240]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007874:	d0ef      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007886:	2b00      	cmp	r3, #0
 8007888:	d009      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007892:	2b00      	cmp	r3, #0
 8007894:	d024      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789a:	2b00      	cmp	r3, #0
 800789c:	d120      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800789e:	4b2f      	ldr	r3, [pc, #188]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	019a      	lsls	r2, r3, #6
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	061b      	lsls	r3, r3, #24
 80078be:	4927      	ldr	r1, [pc, #156]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078c6:	4b25      	ldr	r3, [pc, #148]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	4920      	ldr	r1, [pc, #128]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d018      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x652>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078f4:	d113      	bne.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078f6:	4b19      	ldr	r3, [pc, #100]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80078f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fc:	0e1b      	lsrs	r3, r3, #24
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	019a      	lsls	r2, r3, #6
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	431a      	orrs	r2, r3
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	4911      	ldr	r1, [pc, #68]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800791e:	4b0f      	ldr	r3, [pc, #60]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a0e      	ldr	r2, [pc, #56]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800792a:	f7fd fbcb 	bl	80050c4 <HAL_GetTick>
 800792e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007930:	e008      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007932:	f7fd fbc7 	bl	80050c4 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b64      	cmp	r3, #100	; 0x64
 800793e:	d901      	bls.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e007      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800794c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007950:	d1ef      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3720      	adds	r7, #32
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	40023800 	.word	0x40023800

08007960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e09d      	b.n	8007aae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d108      	bne.n	800798c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007982:	d009      	beq.n	8007998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	61da      	str	r2, [r3, #28]
 800798a:	e005      	b.n	8007998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fd f840 	bl	8004a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079d8:	d902      	bls.n	80079e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	e002      	b.n	80079e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80079e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80079ee:	d007      	beq.n	8007a00 <HAL_SPI_Init+0xa0>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079f8:	d002      	beq.n	8007a00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	431a      	orrs	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	ea42 0103 	orr.w	r1, r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	0c1b      	lsrs	r3, r3, #16
 8007a5c:	f003 0204 	and.w	r2, r3, #4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	f003 0310 	and.w	r3, r3, #16
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6e:	f003 0308 	and.w	r3, r3, #8
 8007a72:	431a      	orrs	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a7c:	ea42 0103 	orr.w	r1, r2, r3
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69da      	ldr	r2, [r3, #28]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b088      	sub	sp, #32
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	60f8      	str	r0, [r7, #12]
 8007abe:	60b9      	str	r1, [r7, #8]
 8007ac0:	603b      	str	r3, [r7, #0]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_SPI_Transmit+0x22>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e158      	b.n	8007d8a <HAL_SPI_Transmit+0x2d4>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ae0:	f7fd faf0 	bl	80050c4 <HAL_GetTick>
 8007ae4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d002      	beq.n	8007afc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007af6:	2302      	movs	r3, #2
 8007af8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007afa:	e13d      	b.n	8007d78 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d002      	beq.n	8007b08 <HAL_SPI_Transmit+0x52>
 8007b02:	88fb      	ldrh	r3, [r7, #6]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b0c:	e134      	b.n	8007d78 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2203      	movs	r2, #3
 8007b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	88fa      	ldrh	r2, [r7, #6]
 8007b2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b58:	d10f      	bne.n	8007b7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b40      	cmp	r3, #64	; 0x40
 8007b86:	d007      	beq.n	8007b98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ba0:	d94b      	bls.n	8007c3a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_SPI_Transmit+0xfa>
 8007baa:	8afb      	ldrh	r3, [r7, #22]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d13e      	bne.n	8007c2e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	881a      	ldrh	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	1c9a      	adds	r2, r3, #2
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bd4:	e02b      	b.n	8007c2e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d112      	bne.n	8007c0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	1c9a      	adds	r2, r3, #2
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c08:	e011      	b.n	8007c2e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c0a:	f7fd fa5b 	bl	80050c4 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	683a      	ldr	r2, [r7, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d803      	bhi.n	8007c22 <HAL_SPI_Transmit+0x16c>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c20:	d102      	bne.n	8007c28 <HAL_SPI_Transmit+0x172>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c2c:	e0a4      	b.n	8007d78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1ce      	bne.n	8007bd6 <HAL_SPI_Transmit+0x120>
 8007c38:	e07c      	b.n	8007d34 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d002      	beq.n	8007c48 <HAL_SPI_Transmit+0x192>
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d170      	bne.n	8007d2a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d912      	bls.n	8007c78 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b02      	subs	r3, #2
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c76:	e058      	b.n	8007d2a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	330c      	adds	r3, #12
 8007c82:	7812      	ldrb	r2, [r2, #0]
 8007c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007c9e:	e044      	b.n	8007d2a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0302 	and.w	r3, r3, #2
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d12b      	bne.n	8007d06 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d912      	bls.n	8007cde <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cbc:	881a      	ldrh	r2, [r3, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	1c9a      	adds	r2, r3, #2
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b02      	subs	r3, #2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007cdc:	e025      	b.n	8007d2a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d04:	e011      	b.n	8007d2a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d06:	f7fd f9dd 	bl	80050c4 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d803      	bhi.n	8007d1e <HAL_SPI_Transmit+0x268>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1c:	d102      	bne.n	8007d24 <HAL_SPI_Transmit+0x26e>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d28:	e026      	b.n	8007d78 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1b5      	bne.n	8007ca0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 fb57 	bl	80083ec <SPI_EndRxTxTransaction>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2220      	movs	r2, #32
 8007d48:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	613b      	str	r3, [r7, #16]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	613b      	str	r3, [r7, #16]
 8007d66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	77fb      	strb	r3, [r7, #31]
 8007d74:	e000      	b.n	8007d78 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007d76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b08a      	sub	sp, #40	; 0x28
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
 8007d9e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007da0:	2301      	movs	r3, #1
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_SPI_TransmitReceive+0x26>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e1fb      	b.n	80081b0 <HAL_SPI_TransmitReceive+0x41e>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dc0:	f7fd f980 	bl	80050c4 <HAL_GetTick>
 8007dc4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dcc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007dd4:	887b      	ldrh	r3, [r7, #2]
 8007dd6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ddc:	7efb      	ldrb	r3, [r7, #27]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d00e      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x6e>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007de8:	d106      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d102      	bne.n	8007df8 <HAL_SPI_TransmitReceive+0x66>
 8007df2:	7efb      	ldrb	r3, [r7, #27]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d003      	beq.n	8007e00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007dfe:	e1cd      	b.n	800819c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d005      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x80>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d002      	beq.n	8007e12 <HAL_SPI_TransmitReceive+0x80>
 8007e0c:	887b      	ldrh	r3, [r7, #2]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007e18:	e1c0      	b.n	800819c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	d003      	beq.n	8007e2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2205      	movs	r2, #5
 8007e2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	887a      	ldrh	r2, [r7, #2]
 8007e3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	887a      	ldrh	r2, [r7, #2]
 8007e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	887a      	ldrh	r2, [r7, #2]
 8007e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	887a      	ldrh	r2, [r7, #2]
 8007e5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2200      	movs	r2, #0
 8007e66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e70:	d802      	bhi.n	8007e78 <HAL_SPI_TransmitReceive+0xe6>
 8007e72:	8a3b      	ldrh	r3, [r7, #16]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d908      	bls.n	8007e8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	e007      	b.n	8007e9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea4:	2b40      	cmp	r3, #64	; 0x40
 8007ea6:	d007      	beq.n	8007eb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007eb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ec0:	d97c      	bls.n	8007fbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d002      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x13e>
 8007eca:	8a7b      	ldrh	r3, [r7, #18]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d169      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	881a      	ldrh	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b01      	subs	r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef4:	e056      	b.n	8007fa4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d11b      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x1aa>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d016      	beq.n	8007f3c <HAL_SPI_TransmitReceive+0x1aa>
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d113      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	881a      	ldrh	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f24:	1c9a      	adds	r2, r3, #2
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d11c      	bne.n	8007f84 <HAL_SPI_TransmitReceive+0x1f2>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d016      	beq.n	8007f84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68da      	ldr	r2, [r3, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	b292      	uxth	r2, r2
 8007f62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f68:	1c9a      	adds	r2, r3, #2
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	3b01      	subs	r3, #1
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f80:	2301      	movs	r3, #1
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f84:	f7fd f89e 	bl	80050c4 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d807      	bhi.n	8007fa4 <HAL_SPI_TransmitReceive+0x212>
 8007f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9a:	d003      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007fa2:	e0fb      	b.n	800819c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1a3      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x164>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d19d      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x164>
 8007fba:	e0df      	b.n	800817c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_SPI_TransmitReceive+0x23a>
 8007fc4:	8a7b      	ldrh	r3, [r7, #18]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	f040 80cb 	bne.w	8008162 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d912      	bls.n	8007ffc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	881a      	ldrh	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe6:	1c9a      	adds	r2, r3, #2
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	3b02      	subs	r3, #2
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ffa:	e0b2      	b.n	8008162 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	330c      	adds	r3, #12
 8008006:	7812      	ldrb	r2, [r2, #0]
 8008008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008022:	e09e      	b.n	8008162 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b02      	cmp	r3, #2
 8008030:	d134      	bne.n	800809c <HAL_SPI_TransmitReceive+0x30a>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d02f      	beq.n	800809c <HAL_SPI_TransmitReceive+0x30a>
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	2b01      	cmp	r3, #1
 8008040:	d12c      	bne.n	800809c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008046:	b29b      	uxth	r3, r3
 8008048:	2b01      	cmp	r3, #1
 800804a:	d912      	bls.n	8008072 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	881a      	ldrh	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	1c9a      	adds	r2, r3, #2
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008066:	b29b      	uxth	r3, r3
 8008068:	3b02      	subs	r3, #2
 800806a:	b29a      	uxth	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008070:	e012      	b.n	8008098 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	330c      	adds	r3, #12
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800808e:	b29b      	uxth	r3, r3
 8008090:	3b01      	subs	r3, #1
 8008092:	b29a      	uxth	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d148      	bne.n	800813c <HAL_SPI_TransmitReceive+0x3aa>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d042      	beq.n	800813c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080bc:	b29b      	uxth	r3, r3
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d923      	bls.n	800810a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	b292      	uxth	r2, r2
 80080ce:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	1c9a      	adds	r2, r3, #2
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	3b02      	subs	r3, #2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d81f      	bhi.n	8008138 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008106:	605a      	str	r2, [r3, #4]
 8008108:	e016      	b.n	8008138 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f103 020c 	add.w	r2, r3, #12
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008138:	2301      	movs	r3, #1
 800813a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800813c:	f7fc ffc2 	bl	80050c4 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008148:	429a      	cmp	r2, r3
 800814a:	d803      	bhi.n	8008154 <HAL_SPI_TransmitReceive+0x3c2>
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008152:	d102      	bne.n	800815a <HAL_SPI_TransmitReceive+0x3c8>
 8008154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008156:	2b00      	cmp	r3, #0
 8008158:	d103      	bne.n	8008162 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008160:	e01c      	b.n	800819c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	f47f af5b 	bne.w	8008024 <HAL_SPI_TransmitReceive+0x292>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	f47f af54 	bne.w	8008024 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f933 	bl	80083ec <SPI_EndRxTxTransaction>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2220      	movs	r2, #32
 8008196:	661a      	str	r2, [r3, #96]	; 0x60
 8008198:	e000      	b.n	800819c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800819a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80081ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3728      	adds	r7, #40	; 0x28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081c8:	f7fc ff7c 	bl	80050c4 <HAL_GetTick>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	1a9b      	subs	r3, r3, r2
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	4413      	add	r3, r2
 80081d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081d8:	f7fc ff74 	bl	80050c4 <HAL_GetTick>
 80081dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081de:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	015b      	lsls	r3, r3, #5
 80081e4:	0d1b      	lsrs	r3, r3, #20
 80081e6:	69fa      	ldr	r2, [r7, #28]
 80081e8:	fb02 f303 	mul.w	r3, r2, r3
 80081ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081ee:	e054      	b.n	800829a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f6:	d050      	beq.n	800829a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081f8:	f7fc ff64 	bl	80050c4 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	69fa      	ldr	r2, [r7, #28]
 8008204:	429a      	cmp	r2, r3
 8008206:	d902      	bls.n	800820e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d13d      	bne.n	800828a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800821c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008226:	d111      	bne.n	800824c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008230:	d004      	beq.n	800823c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800823a:	d107      	bne.n	800824c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800824a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008254:	d10f      	bne.n	8008276 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008274:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e017      	b.n	80082ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3b01      	subs	r3, #1
 8008298:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4013      	ands	r3, r2
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	bf0c      	ite	eq
 80082aa:	2301      	moveq	r3, #1
 80082ac:	2300      	movne	r3, #0
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d19b      	bne.n	80081f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3720      	adds	r7, #32
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000000 	.word	0x20000000

080082c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80082d6:	f7fc fef5 	bl	80050c4 <HAL_GetTick>
 80082da:	4602      	mov	r2, r0
 80082dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	4413      	add	r3, r2
 80082e4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80082e6:	f7fc feed 	bl	80050c4 <HAL_GetTick>
 80082ea:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80082ec:	4b3e      	ldr	r3, [pc, #248]	; (80083e8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	00da      	lsls	r2, r3, #3
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	0d1b      	lsrs	r3, r3, #20
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008304:	e062      	b.n	80083cc <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800830c:	d109      	bne.n	8008322 <SPI_WaitFifoStateUntilTimeout+0x5a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d106      	bne.n	8008322 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	330c      	adds	r3, #12
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	b2db      	uxtb	r3, r3
 800831e:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008320:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d050      	beq.n	80083cc <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800832a:	f7fc fecb 	bl	80050c4 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	69fa      	ldr	r2, [r7, #28]
 8008336:	429a      	cmp	r2, r3
 8008338:	d902      	bls.n	8008340 <SPI_WaitFifoStateUntilTimeout+0x78>
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d13d      	bne.n	80083bc <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800834e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008358:	d111      	bne.n	800837e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008362:	d004      	beq.n	800836e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836c:	d107      	bne.n	800837e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800837c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008386:	d10f      	bne.n	80083a8 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80083b8:	2303      	movs	r3, #3
 80083ba:	e010      	b.n	80083de <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4013      	ands	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d194      	bne.n	8008306 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000000 	.word	0x20000000

080083ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2200      	movs	r2, #0
 8008400:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f7ff ff5f 	bl	80082c8 <SPI_WaitFifoStateUntilTimeout>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d007      	beq.n	8008420 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008414:	f043 0220 	orr.w	r2, r3, #32
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e027      	b.n	8008470 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fec4 	bl	80081b8 <SPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d007      	beq.n	8008446 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e014      	b.n	8008470 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2200      	movs	r2, #0
 800844e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f7ff ff38 	bl	80082c8 <SPI_WaitFifoStateUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008462:	f043 0220 	orr.w	r2, r3, #32
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e000      	b.n	8008470 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e049      	b.n	800851e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7fc fb0e 	bl	8004ac0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4619      	mov	r1, r3
 80084b6:	4610      	mov	r0, r2
 80084b8:	f000 fe9a 	bl	80091f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	d001      	beq.n	8008540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e054      	b.n	80085ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a26      	ldr	r2, [pc, #152]	; (80085f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d022      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800856a:	d01d      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a22      	ldr	r2, [pc, #136]	; (80085fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d018      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a21      	ldr	r2, [pc, #132]	; (8008600 <HAL_TIM_Base_Start_IT+0xd8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a1f      	ldr	r2, [pc, #124]	; (8008604 <HAL_TIM_Base_Start_IT+0xdc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d00e      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <HAL_TIM_Base_Start_IT+0xe0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d009      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a1c      	ldr	r2, [pc, #112]	; (800860c <HAL_TIM_Base_Start_IT+0xe4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d004      	beq.n	80085a8 <HAL_TIM_Base_Start_IT+0x80>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a1b      	ldr	r2, [pc, #108]	; (8008610 <HAL_TIM_Base_Start_IT+0xe8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d115      	bne.n	80085d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	4b19      	ldr	r3, [pc, #100]	; (8008614 <HAL_TIM_Base_Start_IT+0xec>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2b06      	cmp	r3, #6
 80085b8:	d015      	beq.n	80085e6 <HAL_TIM_Base_Start_IT+0xbe>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085c0:	d011      	beq.n	80085e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f042 0201 	orr.w	r2, r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d2:	e008      	b.n	80085e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 0201 	orr.w	r2, r2, #1
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e000      	b.n	80085e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085e8:	2300      	movs	r3, #0
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40010400 	.word	0x40010400
 800860c:	40014000 	.word	0x40014000
 8008610:	40001800 	.word	0x40001800
 8008614:	00010007 	.word	0x00010007

08008618 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e049      	b.n	80086be <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f841 	bl	80086c6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f000 fdca 	bl	80091f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b082      	sub	sp, #8
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086e8:	2301      	movs	r3, #1
 80086ea:	e049      	b.n	8008780 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d106      	bne.n	8008706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f841 	bl	8008788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2202      	movs	r2, #2
 800870a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f000 fd69 	bl	80091f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2201      	movs	r2, #1
 8008762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3708      	adds	r7, #8
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d109      	bne.n	80087c0 <HAL_TIM_PWM_Start+0x24>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	bf14      	ite	ne
 80087b8:	2301      	movne	r3, #1
 80087ba:	2300      	moveq	r3, #0
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	e03c      	b.n	800883a <HAL_TIM_PWM_Start+0x9e>
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d109      	bne.n	80087da <HAL_TIM_PWM_Start+0x3e>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	bf14      	ite	ne
 80087d2:	2301      	movne	r3, #1
 80087d4:	2300      	moveq	r3, #0
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	e02f      	b.n	800883a <HAL_TIM_PWM_Start+0x9e>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b08      	cmp	r3, #8
 80087de:	d109      	bne.n	80087f4 <HAL_TIM_PWM_Start+0x58>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	bf14      	ite	ne
 80087ec:	2301      	movne	r3, #1
 80087ee:	2300      	moveq	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	e022      	b.n	800883a <HAL_TIM_PWM_Start+0x9e>
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b0c      	cmp	r3, #12
 80087f8:	d109      	bne.n	800880e <HAL_TIM_PWM_Start+0x72>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	bf14      	ite	ne
 8008806:	2301      	movne	r3, #1
 8008808:	2300      	moveq	r3, #0
 800880a:	b2db      	uxtb	r3, r3
 800880c:	e015      	b.n	800883a <HAL_TIM_PWM_Start+0x9e>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b10      	cmp	r3, #16
 8008812:	d109      	bne.n	8008828 <HAL_TIM_PWM_Start+0x8c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	e008      	b.n	800883a <HAL_TIM_PWM_Start+0x9e>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b01      	cmp	r3, #1
 8008832:	bf14      	ite	ne
 8008834:	2301      	movne	r3, #1
 8008836:	2300      	moveq	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e092      	b.n	8008968 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d104      	bne.n	8008852 <HAL_TIM_PWM_Start+0xb6>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008850:	e023      	b.n	800889a <HAL_TIM_PWM_Start+0xfe>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b04      	cmp	r3, #4
 8008856:	d104      	bne.n	8008862 <HAL_TIM_PWM_Start+0xc6>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008860:	e01b      	b.n	800889a <HAL_TIM_PWM_Start+0xfe>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b08      	cmp	r3, #8
 8008866:	d104      	bne.n	8008872 <HAL_TIM_PWM_Start+0xd6>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008870:	e013      	b.n	800889a <HAL_TIM_PWM_Start+0xfe>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b0c      	cmp	r3, #12
 8008876:	d104      	bne.n	8008882 <HAL_TIM_PWM_Start+0xe6>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008880:	e00b      	b.n	800889a <HAL_TIM_PWM_Start+0xfe>
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b10      	cmp	r3, #16
 8008886:	d104      	bne.n	8008892 <HAL_TIM_PWM_Start+0xf6>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2202      	movs	r2, #2
 800888c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008890:	e003      	b.n	800889a <HAL_TIM_PWM_Start+0xfe>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2202      	movs	r2, #2
 8008896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2201      	movs	r2, #1
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f001 f8cc 	bl	8009a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a30      	ldr	r2, [pc, #192]	; (8008970 <HAL_TIM_PWM_Start+0x1d4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <HAL_TIM_PWM_Start+0x120>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a2f      	ldr	r2, [pc, #188]	; (8008974 <HAL_TIM_PWM_Start+0x1d8>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d101      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x124>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <HAL_TIM_PWM_Start+0x126>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a25      	ldr	r2, [pc, #148]	; (8008970 <HAL_TIM_PWM_Start+0x1d4>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d022      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e8:	d01d      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a22      	ldr	r2, [pc, #136]	; (8008978 <HAL_TIM_PWM_Start+0x1dc>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d018      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a20      	ldr	r2, [pc, #128]	; (800897c <HAL_TIM_PWM_Start+0x1e0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d013      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a1f      	ldr	r2, [pc, #124]	; (8008980 <HAL_TIM_PWM_Start+0x1e4>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d00e      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a19      	ldr	r2, [pc, #100]	; (8008974 <HAL_TIM_PWM_Start+0x1d8>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d009      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a1b      	ldr	r2, [pc, #108]	; (8008984 <HAL_TIM_PWM_Start+0x1e8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d004      	beq.n	8008926 <HAL_TIM_PWM_Start+0x18a>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a19      	ldr	r2, [pc, #100]	; (8008988 <HAL_TIM_PWM_Start+0x1ec>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d115      	bne.n	8008952 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	4b17      	ldr	r3, [pc, #92]	; (800898c <HAL_TIM_PWM_Start+0x1f0>)
 800892e:	4013      	ands	r3, r2
 8008930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2b06      	cmp	r3, #6
 8008936:	d015      	beq.n	8008964 <HAL_TIM_PWM_Start+0x1c8>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893e:	d011      	beq.n	8008964 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f042 0201 	orr.w	r2, r2, #1
 800894e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008950:	e008      	b.n	8008964 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0201 	orr.w	r2, r2, #1
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e000      	b.n	8008966 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008964:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	40010000 	.word	0x40010000
 8008974:	40010400 	.word	0x40010400
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800
 8008980:	40000c00 	.word	0x40000c00
 8008984:	40014000 	.word	0x40014000
 8008988:	40001800 	.word	0x40001800
 800898c:	00010007 	.word	0x00010007

08008990 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e041      	b.n	8008a28 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f839 	bl	8008a30 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2202      	movs	r2, #2
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f000 fc0d 	bl	80091f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0208 	bic.w	r2, r2, #8
 80089e4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0302 	and.w	r3, r3, #2
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d122      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0302 	and.w	r3, r3, #2
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d11b      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0202 	mvn.w	r2, #2
 8008a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f003 0303 	and.w	r3, r3, #3
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fb94 	bl	80091b4 <HAL_TIM_IC_CaptureCallback>
 8008a8c:	e005      	b.n	8008a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fb86 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fb97 	bl	80091c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0304 	and.w	r3, r3, #4
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d122      	bne.n	8008af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d11b      	bne.n	8008af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0204 	mvn.w	r2, #4
 8008ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2202      	movs	r2, #2
 8008aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	699b      	ldr	r3, [r3, #24]
 8008ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fb6a 	bl	80091b4 <HAL_TIM_IC_CaptureCallback>
 8008ae0:	e005      	b.n	8008aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fb5c 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fb6d 	bl	80091c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b08      	cmp	r3, #8
 8008b00:	d122      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d11b      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0208 	mvn.w	r2, #8
 8008b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f003 0303 	and.w	r3, r3, #3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fb40 	bl	80091b4 <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb32 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fb43 	bl	80091c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0310 	and.w	r3, r3, #16
 8008b52:	2b10      	cmp	r3, #16
 8008b54:	d122      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b10      	cmp	r3, #16
 8008b62:	d11b      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0210 	mvn.w	r2, #16
 8008b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2208      	movs	r2, #8
 8008b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69db      	ldr	r3, [r3, #28]
 8008b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb16 	bl	80091b4 <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fb08 	bl	80091a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fb19 	bl	80091c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d10e      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d107      	bne.n	8008bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0201 	mvn.w	r2, #1
 8008bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fb fe54 	bl	8004870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd2:	2b80      	cmp	r3, #128	; 0x80
 8008bd4:	d10e      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008be0:	2b80      	cmp	r3, #128	; 0x80
 8008be2:	d107      	bne.n	8008bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f001 f924 	bl	8009e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c02:	d10e      	bne.n	8008c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0e:	2b80      	cmp	r3, #128	; 0x80
 8008c10:	d107      	bne.n	8008c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 f917 	bl	8009e50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2c:	2b40      	cmp	r3, #64	; 0x40
 8008c2e:	d10e      	bne.n	8008c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3a:	2b40      	cmp	r3, #64	; 0x40
 8008c3c:	d107      	bne.n	8008c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fac7 	bl	80091dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	691b      	ldr	r3, [r3, #16]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b20      	cmp	r3, #32
 8008c5a:	d10e      	bne.n	8008c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b20      	cmp	r3, #32
 8008c68:	d107      	bne.n	8008c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f06f 0220 	mvn.w	r2, #32
 8008c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f8d7 	bl	8009e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d101      	bne.n	8008c9e <HAL_TIM_OC_ConfigChannel+0x1a>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e064      	b.n	8008d68 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2201      	movs	r2, #1
 8008ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2b14      	cmp	r3, #20
 8008caa:	d857      	bhi.n	8008d5c <HAL_TIM_OC_ConfigChannel+0xd8>
 8008cac:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb2:	bf00      	nop
 8008cb4:	08008d09 	.word	0x08008d09
 8008cb8:	08008d5d 	.word	0x08008d5d
 8008cbc:	08008d5d 	.word	0x08008d5d
 8008cc0:	08008d5d 	.word	0x08008d5d
 8008cc4:	08008d17 	.word	0x08008d17
 8008cc8:	08008d5d 	.word	0x08008d5d
 8008ccc:	08008d5d 	.word	0x08008d5d
 8008cd0:	08008d5d 	.word	0x08008d5d
 8008cd4:	08008d25 	.word	0x08008d25
 8008cd8:	08008d5d 	.word	0x08008d5d
 8008cdc:	08008d5d 	.word	0x08008d5d
 8008ce0:	08008d5d 	.word	0x08008d5d
 8008ce4:	08008d33 	.word	0x08008d33
 8008ce8:	08008d5d 	.word	0x08008d5d
 8008cec:	08008d5d 	.word	0x08008d5d
 8008cf0:	08008d5d 	.word	0x08008d5d
 8008cf4:	08008d41 	.word	0x08008d41
 8008cf8:	08008d5d 	.word	0x08008d5d
 8008cfc:	08008d5d 	.word	0x08008d5d
 8008d00:	08008d5d 	.word	0x08008d5d
 8008d04:	08008d4f 	.word	0x08008d4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fb0e 	bl	8009330 <TIM_OC1_SetConfig>
      break;
 8008d14:	e023      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68b9      	ldr	r1, [r7, #8]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 fb79 	bl	8009414 <TIM_OC2_SetConfig>
      break;
 8008d22:	e01c      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fbea 	bl	8009504 <TIM_OC3_SetConfig>
      break;
 8008d30:	e015      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fc59 	bl	80095f0 <TIM_OC4_SetConfig>
      break;
 8008d3e:	e00e      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68b9      	ldr	r1, [r7, #8]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fcaa 	bl	80096a0 <TIM_OC5_SetConfig>
      break;
 8008d4c:	e007      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 fcf5 	bl	8009744 <TIM_OC6_SetConfig>
      break;
 8008d5a:	e000      	b.n	8008d5e <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008d5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d101      	bne.n	8008d8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008d86:	2302      	movs	r3, #2
 8008d88:	e0fd      	b.n	8008f86 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b14      	cmp	r3, #20
 8008d96:	f200 80f0 	bhi.w	8008f7a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008df5 	.word	0x08008df5
 8008da4:	08008f7b 	.word	0x08008f7b
 8008da8:	08008f7b 	.word	0x08008f7b
 8008dac:	08008f7b 	.word	0x08008f7b
 8008db0:	08008e35 	.word	0x08008e35
 8008db4:	08008f7b 	.word	0x08008f7b
 8008db8:	08008f7b 	.word	0x08008f7b
 8008dbc:	08008f7b 	.word	0x08008f7b
 8008dc0:	08008e77 	.word	0x08008e77
 8008dc4:	08008f7b 	.word	0x08008f7b
 8008dc8:	08008f7b 	.word	0x08008f7b
 8008dcc:	08008f7b 	.word	0x08008f7b
 8008dd0:	08008eb7 	.word	0x08008eb7
 8008dd4:	08008f7b 	.word	0x08008f7b
 8008dd8:	08008f7b 	.word	0x08008f7b
 8008ddc:	08008f7b 	.word	0x08008f7b
 8008de0:	08008ef9 	.word	0x08008ef9
 8008de4:	08008f7b 	.word	0x08008f7b
 8008de8:	08008f7b 	.word	0x08008f7b
 8008dec:	08008f7b 	.word	0x08008f7b
 8008df0:	08008f39 	.word	0x08008f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fa98 	bl	8009330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0208 	orr.w	r2, r2, #8
 8008e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0204 	bic.w	r2, r2, #4
 8008e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6999      	ldr	r1, [r3, #24]
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	691a      	ldr	r2, [r3, #16]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	619a      	str	r2, [r3, #24]
      break;
 8008e32:	e0a3      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68b9      	ldr	r1, [r7, #8]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 faea 	bl	8009414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	699a      	ldr	r2, [r3, #24]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6999      	ldr	r1, [r3, #24]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	021a      	lsls	r2, r3, #8
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	619a      	str	r2, [r3, #24]
      break;
 8008e74:	e082      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fb41 	bl	8009504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f042 0208 	orr.w	r2, r2, #8
 8008e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69da      	ldr	r2, [r3, #28]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f022 0204 	bic.w	r2, r2, #4
 8008ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	69d9      	ldr	r1, [r3, #28]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	61da      	str	r2, [r3, #28]
      break;
 8008eb4:	e062      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f000 fb97 	bl	80095f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69da      	ldr	r2, [r3, #28]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	69d9      	ldr	r1, [r3, #28]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	021a      	lsls	r2, r3, #8
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	61da      	str	r2, [r3, #28]
      break;
 8008ef6:	e041      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68b9      	ldr	r1, [r7, #8]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 fbce 	bl	80096a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0208 	orr.w	r2, r2, #8
 8008f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0204 	bic.w	r2, r2, #4
 8008f22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	430a      	orrs	r2, r1
 8008f34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f36:	e021      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68b9      	ldr	r1, [r7, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f000 fc00 	bl	8009744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
 8008f6e:	021a      	lsls	r2, r3, #8
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008f78:	e000      	b.n	8008f7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008f7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop

08008f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_TIM_ConfigClockSource+0x18>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e0b3      	b.n	8009110 <HAL_TIM_ConfigClockSource+0x180>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4b55      	ldr	r3, [pc, #340]	; (8009118 <HAL_TIM_ConfigClockSource+0x188>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe0:	d03e      	beq.n	8009060 <HAL_TIM_ConfigClockSource+0xd0>
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fe6:	f200 8087 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fee:	f000 8085 	beq.w	80090fc <HAL_TIM_ConfigClockSource+0x16c>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff6:	d87f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8008ff8:	2b70      	cmp	r3, #112	; 0x70
 8008ffa:	d01a      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0xa2>
 8008ffc:	2b70      	cmp	r3, #112	; 0x70
 8008ffe:	d87b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009000:	2b60      	cmp	r3, #96	; 0x60
 8009002:	d050      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x116>
 8009004:	2b60      	cmp	r3, #96	; 0x60
 8009006:	d877      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009008:	2b50      	cmp	r3, #80	; 0x50
 800900a:	d03c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0xf6>
 800900c:	2b50      	cmp	r3, #80	; 0x50
 800900e:	d873      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009010:	2b40      	cmp	r3, #64	; 0x40
 8009012:	d058      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x136>
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d86f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009018:	2b30      	cmp	r3, #48	; 0x30
 800901a:	d064      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x156>
 800901c:	2b30      	cmp	r3, #48	; 0x30
 800901e:	d86b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009020:	2b20      	cmp	r3, #32
 8009022:	d060      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x156>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d867      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05c      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x156>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d05a      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009030:	e062      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6899      	ldr	r1, [r3, #8]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f000 fcdd 	bl	8009a00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009054:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	609a      	str	r2, [r3, #8]
      break;
 800905e:	e04e      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f000 fcc6 	bl	8009a00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009082:	609a      	str	r2, [r3, #8]
      break;
 8009084:	e03b      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	461a      	mov	r2, r3
 8009094:	f000 fc3a 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2150      	movs	r1, #80	; 0x50
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fc93 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 80090a4:	e02b      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f000 fc59 	bl	800996a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2160      	movs	r1, #96	; 0x60
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fc83 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 80090c4:	e01b      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f000 fc1a 	bl	800990c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2140      	movs	r1, #64	; 0x40
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fc73 	bl	80099ca <TIM_ITRx_SetConfig>
      break;
 80090e4:	e00b      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 fc6a 	bl	80099ca <TIM_ITRx_SetConfig>
        break;
 80090f6:	e002      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090f8:	bf00      	nop
 80090fa:	e000      	b.n	80090fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80090fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	fffeff88 	.word	0xfffeff88

0800911c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009130:	2302      	movs	r3, #2
 8009132:	e031      	b.n	8009198 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fb50 	bl	80097ec <TIM_SlaveTimer_SetConfig>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2201      	movs	r2, #1
 8009156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e018      	b.n	8009198 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009174:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68da      	ldr	r2, [r3, #12]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009184:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2201      	movs	r2, #1
 800918a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091d0:	bf00      	nop
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e4:	bf00      	nop
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a40      	ldr	r2, [pc, #256]	; (8009304 <TIM_Base_SetConfig+0x114>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d013      	beq.n	8009230 <TIM_Base_SetConfig+0x40>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800920e:	d00f      	beq.n	8009230 <TIM_Base_SetConfig+0x40>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a3d      	ldr	r2, [pc, #244]	; (8009308 <TIM_Base_SetConfig+0x118>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d00b      	beq.n	8009230 <TIM_Base_SetConfig+0x40>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a3c      	ldr	r2, [pc, #240]	; (800930c <TIM_Base_SetConfig+0x11c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d007      	beq.n	8009230 <TIM_Base_SetConfig+0x40>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a3b      	ldr	r2, [pc, #236]	; (8009310 <TIM_Base_SetConfig+0x120>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d003      	beq.n	8009230 <TIM_Base_SetConfig+0x40>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a3a      	ldr	r2, [pc, #232]	; (8009314 <TIM_Base_SetConfig+0x124>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d108      	bne.n	8009242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a2f      	ldr	r2, [pc, #188]	; (8009304 <TIM_Base_SetConfig+0x114>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d02b      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009250:	d027      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a2c      	ldr	r2, [pc, #176]	; (8009308 <TIM_Base_SetConfig+0x118>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d023      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a2b      	ldr	r2, [pc, #172]	; (800930c <TIM_Base_SetConfig+0x11c>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d01f      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a2a      	ldr	r2, [pc, #168]	; (8009310 <TIM_Base_SetConfig+0x120>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d01b      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a29      	ldr	r2, [pc, #164]	; (8009314 <TIM_Base_SetConfig+0x124>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d017      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a28      	ldr	r2, [pc, #160]	; (8009318 <TIM_Base_SetConfig+0x128>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d013      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a27      	ldr	r2, [pc, #156]	; (800931c <TIM_Base_SetConfig+0x12c>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d00f      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a26      	ldr	r2, [pc, #152]	; (8009320 <TIM_Base_SetConfig+0x130>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00b      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a25      	ldr	r2, [pc, #148]	; (8009324 <TIM_Base_SetConfig+0x134>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d007      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a24      	ldr	r2, [pc, #144]	; (8009328 <TIM_Base_SetConfig+0x138>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d003      	beq.n	80092a2 <TIM_Base_SetConfig+0xb2>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a23      	ldr	r2, [pc, #140]	; (800932c <TIM_Base_SetConfig+0x13c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d108      	bne.n	80092b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a0a      	ldr	r2, [pc, #40]	; (8009304 <TIM_Base_SetConfig+0x114>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d003      	beq.n	80092e8 <TIM_Base_SetConfig+0xf8>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a0c      	ldr	r2, [pc, #48]	; (8009314 <TIM_Base_SetConfig+0x124>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d103      	bne.n	80092f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	691a      	ldr	r2, [r3, #16]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	615a      	str	r2, [r3, #20]
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40010000 	.word	0x40010000
 8009308:	40000400 	.word	0x40000400
 800930c:	40000800 	.word	0x40000800
 8009310:	40000c00 	.word	0x40000c00
 8009314:	40010400 	.word	0x40010400
 8009318:	40014000 	.word	0x40014000
 800931c:	40014400 	.word	0x40014400
 8009320:	40014800 	.word	0x40014800
 8009324:	40001800 	.word	0x40001800
 8009328:	40001c00 	.word	0x40001c00
 800932c:	40002000 	.word	0x40002000

08009330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	f023 0201 	bic.w	r2, r3, #1
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4b2b      	ldr	r3, [pc, #172]	; (8009408 <TIM_OC1_SetConfig+0xd8>)
 800935c:	4013      	ands	r3, r2
 800935e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0303 	bic.w	r3, r3, #3
 8009366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f023 0302 	bic.w	r3, r3, #2
 8009378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a21      	ldr	r2, [pc, #132]	; (800940c <TIM_OC1_SetConfig+0xdc>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_OC1_SetConfig+0x64>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a20      	ldr	r2, [pc, #128]	; (8009410 <TIM_OC1_SetConfig+0xe0>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d10c      	bne.n	80093ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f023 0308 	bic.w	r3, r3, #8
 800939a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f023 0304 	bic.w	r3, r3, #4
 80093ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a16      	ldr	r2, [pc, #88]	; (800940c <TIM_OC1_SetConfig+0xdc>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d003      	beq.n	80093be <TIM_OC1_SetConfig+0x8e>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a15      	ldr	r2, [pc, #84]	; (8009410 <TIM_OC1_SetConfig+0xe0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d111      	bne.n	80093e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	621a      	str	r2, [r3, #32]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	fffeff8f 	.word	0xfffeff8f
 800940c:	40010000 	.word	0x40010000
 8009410:	40010400 	.word	0x40010400

08009414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0210 	bic.w	r2, r3, #16
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4b2e      	ldr	r3, [pc, #184]	; (80094f8 <TIM_OC2_SetConfig+0xe4>)
 8009440:	4013      	ands	r3, r2
 8009442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800944a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	68fa      	ldr	r2, [r7, #12]
 8009454:	4313      	orrs	r3, r2
 8009456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f023 0320 	bic.w	r3, r3, #32
 800945e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a23      	ldr	r2, [pc, #140]	; (80094fc <TIM_OC2_SetConfig+0xe8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d003      	beq.n	800947c <TIM_OC2_SetConfig+0x68>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a22      	ldr	r2, [pc, #136]	; (8009500 <TIM_OC2_SetConfig+0xec>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d10d      	bne.n	8009498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009496:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a18      	ldr	r2, [pc, #96]	; (80094fc <TIM_OC2_SetConfig+0xe8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d003      	beq.n	80094a8 <TIM_OC2_SetConfig+0x94>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a17      	ldr	r2, [pc, #92]	; (8009500 <TIM_OC2_SetConfig+0xec>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d113      	bne.n	80094d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	693a      	ldr	r2, [r7, #16]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	68fa      	ldr	r2, [r7, #12]
 80094da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	621a      	str	r2, [r3, #32]
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	feff8fff 	.word	0xfeff8fff
 80094fc:	40010000 	.word	0x40010000
 8009500:	40010400 	.word	0x40010400

08009504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69db      	ldr	r3, [r3, #28]
 800952a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	4b2d      	ldr	r3, [pc, #180]	; (80095e4 <TIM_OC3_SetConfig+0xe0>)
 8009530:	4013      	ands	r3, r2
 8009532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4313      	orrs	r3, r2
 8009544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800954c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a22      	ldr	r2, [pc, #136]	; (80095e8 <TIM_OC3_SetConfig+0xe4>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_OC3_SetConfig+0x66>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a21      	ldr	r2, [pc, #132]	; (80095ec <TIM_OC3_SetConfig+0xe8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d10d      	bne.n	8009586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	4313      	orrs	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a17      	ldr	r2, [pc, #92]	; (80095e8 <TIM_OC3_SetConfig+0xe4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_OC3_SetConfig+0x92>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a16      	ldr	r2, [pc, #88]	; (80095ec <TIM_OC3_SetConfig+0xe8>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d113      	bne.n	80095be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800959c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	621a      	str	r2, [r3, #32]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	fffeff8f 	.word	0xfffeff8f
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40010400 	.word	0x40010400

080095f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b087      	sub	sp, #28
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a1b      	ldr	r3, [r3, #32]
 80095fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a1b      	ldr	r3, [r3, #32]
 800960a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <TIM_OC4_SetConfig+0xa4>)
 800961c:	4013      	ands	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	021b      	lsls	r3, r3, #8
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800963a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	031b      	lsls	r3, r3, #12
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	4313      	orrs	r3, r2
 8009646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a13      	ldr	r2, [pc, #76]	; (8009698 <TIM_OC4_SetConfig+0xa8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_OC4_SetConfig+0x68>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a12      	ldr	r2, [pc, #72]	; (800969c <TIM_OC4_SetConfig+0xac>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d109      	bne.n	800966c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	019b      	lsls	r3, r3, #6
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	4313      	orrs	r3, r2
 800966a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	697a      	ldr	r2, [r7, #20]
 8009670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	621a      	str	r2, [r3, #32]
}
 8009686:	bf00      	nop
 8009688:	371c      	adds	r7, #28
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	feff8fff 	.word	0xfeff8fff
 8009698:	40010000 	.word	0x40010000
 800969c:	40010400 	.word	0x40010400

080096a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4b1b      	ldr	r3, [pc, #108]	; (8009738 <TIM_OC5_SetConfig+0x98>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	693a      	ldr	r2, [r7, #16]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a12      	ldr	r2, [pc, #72]	; (800973c <TIM_OC5_SetConfig+0x9c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_OC5_SetConfig+0x5e>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a11      	ldr	r2, [pc, #68]	; (8009740 <TIM_OC5_SetConfig+0xa0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d109      	bne.n	8009712 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	021b      	lsls	r3, r3, #8
 800970c:	697a      	ldr	r2, [r7, #20]
 800970e:	4313      	orrs	r3, r2
 8009710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	697a      	ldr	r2, [r7, #20]
 8009716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	621a      	str	r2, [r3, #32]
}
 800972c:	bf00      	nop
 800972e:	371c      	adds	r7, #28
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	fffeff8f 	.word	0xfffeff8f
 800973c:	40010000 	.word	0x40010000
 8009740:	40010400 	.word	0x40010400

08009744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	4b1c      	ldr	r3, [pc, #112]	; (80097e0 <TIM_OC6_SetConfig+0x9c>)
 8009770:	4013      	ands	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	021b      	lsls	r3, r3, #8
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	051b      	lsls	r3, r3, #20
 800978e:	693a      	ldr	r2, [r7, #16]
 8009790:	4313      	orrs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a13      	ldr	r2, [pc, #76]	; (80097e4 <TIM_OC6_SetConfig+0xa0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d003      	beq.n	80097a4 <TIM_OC6_SetConfig+0x60>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a12      	ldr	r2, [pc, #72]	; (80097e8 <TIM_OC6_SetConfig+0xa4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d109      	bne.n	80097b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	029b      	lsls	r3, r3, #10
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	feff8fff 	.word	0xfeff8fff
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40010400 	.word	0x40010400

080097ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009804:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	4313      	orrs	r3, r2
 800980e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009810:	697a      	ldr	r2, [r7, #20]
 8009812:	4b3d      	ldr	r3, [pc, #244]	; (8009908 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009814:	4013      	ands	r3, r2
 8009816:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	4313      	orrs	r3, r2
 8009820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	697a      	ldr	r2, [r7, #20]
 8009828:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b70      	cmp	r3, #112	; 0x70
 8009830:	d01a      	beq.n	8009868 <TIM_SlaveTimer_SetConfig+0x7c>
 8009832:	2b70      	cmp	r3, #112	; 0x70
 8009834:	d860      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009836:	2b60      	cmp	r3, #96	; 0x60
 8009838:	d054      	beq.n	80098e4 <TIM_SlaveTimer_SetConfig+0xf8>
 800983a:	2b60      	cmp	r3, #96	; 0x60
 800983c:	d85c      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800983e:	2b50      	cmp	r3, #80	; 0x50
 8009840:	d046      	beq.n	80098d0 <TIM_SlaveTimer_SetConfig+0xe4>
 8009842:	2b50      	cmp	r3, #80	; 0x50
 8009844:	d858      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d019      	beq.n	800987e <TIM_SlaveTimer_SetConfig+0x92>
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d854      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800984e:	2b30      	cmp	r3, #48	; 0x30
 8009850:	d054      	beq.n	80098fc <TIM_SlaveTimer_SetConfig+0x110>
 8009852:	2b30      	cmp	r3, #48	; 0x30
 8009854:	d850      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 8009856:	2b20      	cmp	r3, #32
 8009858:	d050      	beq.n	80098fc <TIM_SlaveTimer_SetConfig+0x110>
 800985a:	2b20      	cmp	r3, #32
 800985c:	d84c      	bhi.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d04c      	beq.n	80098fc <TIM_SlaveTimer_SetConfig+0x110>
 8009862:	2b10      	cmp	r3, #16
 8009864:	d04a      	beq.n	80098fc <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009866:	e047      	b.n	80098f8 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6818      	ldr	r0, [r3, #0]
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68d9      	ldr	r1, [r3, #12]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	689a      	ldr	r2, [r3, #8]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f000 f8c2 	bl	8009a00 <TIM_ETR_SetConfig>
      break;
 800987c:	e03f      	b.n	80098fe <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b05      	cmp	r3, #5
 8009884:	d101      	bne.n	800988a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e03a      	b.n	8009900 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6a1a      	ldr	r2, [r3, #32]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	621a      	str	r2, [r3, #32]
      break;
 80098ce:	e016      	b.n	80098fe <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	6899      	ldr	r1, [r3, #8]
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	461a      	mov	r2, r3
 80098de:	f000 f815 	bl	800990c <TIM_TI1_ConfigInputStage>
      break;
 80098e2:	e00c      	b.n	80098fe <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6818      	ldr	r0, [r3, #0]
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	6899      	ldr	r1, [r3, #8]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	461a      	mov	r2, r3
 80098f2:	f000 f83a 	bl	800996a <TIM_TI2_ConfigInputStage>
      break;
 80098f6:	e002      	b.n	80098fe <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80098f8:	bf00      	nop
 80098fa:	e000      	b.n	80098fe <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80098fc:	bf00      	nop
  }
  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	fffefff8 	.word	0xfffefff8

0800990c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f023 030a 	bic.w	r3, r3, #10
 8009948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	621a      	str	r2, [r3, #32]
}
 800995e:	bf00      	nop
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800996a:	b480      	push	{r7}
 800996c:	b087      	sub	sp, #28
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a1b      	ldr	r3, [r3, #32]
 800997a:	f023 0210 	bic.w	r2, r3, #16
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	031b      	lsls	r3, r3, #12
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	693a      	ldr	r2, [r7, #16]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b085      	sub	sp, #20
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099e2:	683a      	ldr	r2, [r7, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f043 0307 	orr.w	r3, r3, #7
 80099ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	021a      	lsls	r2, r3, #8
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	609a      	str	r2, [r3, #8]
}
 8009a34:	bf00      	nop
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f003 031f 	and.w	r3, r3, #31
 8009a52:	2201      	movs	r2, #1
 8009a54:	fa02 f303 	lsl.w	r3, r2, r3
 8009a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	43db      	mvns	r3, r3
 8009a62:	401a      	ands	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6a1a      	ldr	r2, [r3, #32]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f003 031f 	and.w	r3, r3, #31
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	fa01 f303 	lsl.w	r3, r1, r3
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	621a      	str	r2, [r3, #32]
}
 8009a7e:	bf00      	nop
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
	...

08009a8c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d109      	bne.n	8009ab0 <HAL_TIMEx_PWMN_Start+0x24>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	e022      	b.n	8009af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d109      	bne.n	8009aca <HAL_TIMEx_PWMN_Start+0x3e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	bf14      	ite	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	2300      	moveq	r3, #0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	e015      	b.n	8009af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d109      	bne.n	8009ae4 <HAL_TIMEx_PWMN_Start+0x58>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	bf14      	ite	ne
 8009adc:	2301      	movne	r3, #1
 8009ade:	2300      	moveq	r3, #0
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	e008      	b.n	8009af6 <HAL_TIMEx_PWMN_Start+0x6a>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	bf14      	ite	ne
 8009af0:	2301      	movne	r3, #1
 8009af2:	2300      	moveq	r3, #0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e073      	b.n	8009be6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d104      	bne.n	8009b0e <HAL_TIMEx_PWMN_Start+0x82>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2202      	movs	r2, #2
 8009b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b0c:	e013      	b.n	8009b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	2b04      	cmp	r3, #4
 8009b12:	d104      	bne.n	8009b1e <HAL_TIMEx_PWMN_Start+0x92>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b1c:	e00b      	b.n	8009b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d104      	bne.n	8009b2e <HAL_TIMEx_PWMN_Start+0xa2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b2c:	e003      	b.n	8009b36 <HAL_TIMEx_PWMN_Start+0xaa>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2202      	movs	r2, #2
 8009b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2204      	movs	r2, #4
 8009b3c:	6839      	ldr	r1, [r7, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f990 	bl	8009e64 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b52:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a25      	ldr	r2, [pc, #148]	; (8009bf0 <HAL_TIMEx_PWMN_Start+0x164>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d022      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b66:	d01d      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a21      	ldr	r2, [pc, #132]	; (8009bf4 <HAL_TIMEx_PWMN_Start+0x168>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d018      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a20      	ldr	r2, [pc, #128]	; (8009bf8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d013      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a1e      	ldr	r2, [pc, #120]	; (8009bfc <HAL_TIMEx_PWMN_Start+0x170>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d00e      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a1d      	ldr	r2, [pc, #116]	; (8009c00 <HAL_TIMEx_PWMN_Start+0x174>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d009      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <HAL_TIMEx_PWMN_Start+0x178>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d004      	beq.n	8009ba4 <HAL_TIMEx_PWMN_Start+0x118>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1a      	ldr	r2, [pc, #104]	; (8009c08 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d115      	bne.n	8009bd0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <HAL_TIMEx_PWMN_Start+0x180>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b06      	cmp	r3, #6
 8009bb4:	d015      	beq.n	8009be2 <HAL_TIMEx_PWMN_Start+0x156>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbc:	d011      	beq.n	8009be2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bce:	e008      	b.n	8009be2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f042 0201 	orr.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]
 8009be0:	e000      	b.n	8009be4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	40010000 	.word	0x40010000
 8009bf4:	40000400 	.word	0x40000400
 8009bf8:	40000800 	.word	0x40000800
 8009bfc:	40000c00 	.word	0x40000c00
 8009c00:	40010400 	.word	0x40010400
 8009c04:	40014000 	.word	0x40014000
 8009c08:	40001800 	.word	0x40001800
 8009c0c:	00010007 	.word	0x00010007

08009c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d101      	bne.n	8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c24:	2302      	movs	r3, #2
 8009c26:	e06d      	b.n	8009d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a30      	ldr	r2, [pc, #192]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d004      	beq.n	8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a2f      	ldr	r2, [pc, #188]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d108      	bne.n	8009c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a20      	ldr	r2, [pc, #128]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d022      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c9a:	d01d      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1d      	ldr	r2, [pc, #116]	; (8009d18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d018      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a1c      	ldr	r2, [pc, #112]	; (8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d013      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a1a      	ldr	r2, [pc, #104]	; (8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d00e      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d009      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d004      	beq.n	8009cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a15      	ldr	r2, [pc, #84]	; (8009d28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d10c      	bne.n	8009cf2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	40010000 	.word	0x40010000
 8009d14:	40010400 	.word	0x40010400
 8009d18:	40000400 	.word	0x40000400
 8009d1c:	40000800 	.word	0x40000800
 8009d20:	40000c00 	.word	0x40000c00
 8009d24:	40014000 	.word	0x40014000
 8009d28:	40001800 	.word	0x40001800

08009d2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e065      	b.n	8009e14 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	4313      	orrs	r3, r2
 8009da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	041b      	lsls	r3, r3, #16
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a16      	ldr	r2, [pc, #88]	; (8009e20 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d004      	beq.n	8009dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a14      	ldr	r2, [pc, #80]	; (8009e24 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d115      	bne.n	8009e02 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de0:	051b      	lsls	r3, r3, #20
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr
 8009e20:	40010000 	.word	0x40010000
 8009e24:	40010400 	.word	0x40010400

08009e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	f003 031f 	and.w	r3, r3, #31
 8009e76:	2204      	movs	r2, #4
 8009e78:	fa02 f303 	lsl.w	r3, r2, r3
 8009e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1a      	ldr	r2, [r3, #32]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	43db      	mvns	r3, r3
 8009e86:	401a      	ands	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6a1a      	ldr	r2, [r3, #32]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f003 031f 	and.w	r3, r3, #31
 8009e96:	6879      	ldr	r1, [r7, #4]
 8009e98:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	621a      	str	r2, [r3, #32]
}
 8009ea2:	bf00      	nop
 8009ea4:	371c      	adds	r7, #28
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b082      	sub	sp, #8
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e040      	b.n	8009f42 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d106      	bne.n	8009ed6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7fa fe99 	bl	8004c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2224      	movs	r2, #36	; 0x24
 8009eda:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0201 	bic.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 f8bf 	bl	800a070 <UART_SetConfig>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e022      	b.n	8009f42 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d002      	beq.n	8009f0a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 fb17 	bl	800a538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f042 0201 	orr.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb9e 	bl	800a67c <UART_CheckIdleState>
 8009f40:	4603      	mov	r3, r0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b08a      	sub	sp, #40	; 0x28
 8009f4e:	af02      	add	r7, sp, #8
 8009f50:	60f8      	str	r0, [r7, #12]
 8009f52:	60b9      	str	r1, [r7, #8]
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	4613      	mov	r3, r2
 8009f58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f5e:	2b20      	cmp	r3, #32
 8009f60:	f040 8081 	bne.w	800a066 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d002      	beq.n	8009f70 <HAL_UART_Transmit+0x26>
 8009f6a:	88fb      	ldrh	r3, [r7, #6]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e079      	b.n	800a068 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UART_Transmit+0x38>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e072      	b.n	800a068 <HAL_UART_Transmit+0x11e>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2221      	movs	r2, #33	; 0x21
 8009f96:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f98:	f7fb f894 	bl	80050c4 <HAL_GetTick>
 8009f9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	88fa      	ldrh	r2, [r7, #6]
 8009fa2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	88fa      	ldrh	r2, [r7, #6]
 8009faa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb6:	d108      	bne.n	8009fca <HAL_UART_Transmit+0x80>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d104      	bne.n	8009fca <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e003      	b.n	8009fd2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009fda:	e02c      	b.n	800a036 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2180      	movs	r1, #128	; 0x80
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fb7b 	bl	800a6e2 <UART_WaitOnFlagUntilTimeout>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e038      	b.n	800a068 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10b      	bne.n	800a014 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	461a      	mov	r2, r3
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a00a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	3302      	adds	r3, #2
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e007      	b.n	800a024 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3301      	adds	r3, #1
 800a022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1cc      	bne.n	8009fdc <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	2200      	movs	r2, #0
 800a04a:	2140      	movs	r1, #64	; 0x40
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 fb48 	bl	800a6e2 <UART_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e005      	b.n	800a068 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2220      	movs	r2, #32
 800a060:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	e000      	b.n	800a068 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a066:	2302      	movs	r3, #2
  }
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b088      	sub	sp, #32
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	431a      	orrs	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	431a      	orrs	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	69db      	ldr	r3, [r3, #28]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	4ba6      	ldr	r3, [pc, #664]	; (800a334 <UART_SetConfig+0x2c4>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	6812      	ldr	r2, [r2, #0]
 800a0a2:	6979      	ldr	r1, [r7, #20]
 800a0a4:	430b      	orrs	r3, r1
 800a0a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6a1b      	ldr	r3, [r3, #32]
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	689b      	ldr	r3, [r3, #8]
 800a0d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a94      	ldr	r2, [pc, #592]	; (800a338 <UART_SetConfig+0x2c8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d120      	bne.n	800a12e <UART_SetConfig+0xbe>
 800a0ec:	4b93      	ldr	r3, [pc, #588]	; (800a33c <UART_SetConfig+0x2cc>)
 800a0ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d816      	bhi.n	800a128 <UART_SetConfig+0xb8>
 800a0fa:	a201      	add	r2, pc, #4	; (adr r2, 800a100 <UART_SetConfig+0x90>)
 800a0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a11d 	.word	0x0800a11d
 800a108:	0800a117 	.word	0x0800a117
 800a10c:	0800a123 	.word	0x0800a123
 800a110:	2301      	movs	r3, #1
 800a112:	77fb      	strb	r3, [r7, #31]
 800a114:	e150      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a116:	2302      	movs	r3, #2
 800a118:	77fb      	strb	r3, [r7, #31]
 800a11a:	e14d      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a11c:	2304      	movs	r3, #4
 800a11e:	77fb      	strb	r3, [r7, #31]
 800a120:	e14a      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a122:	2308      	movs	r3, #8
 800a124:	77fb      	strb	r3, [r7, #31]
 800a126:	e147      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a128:	2310      	movs	r3, #16
 800a12a:	77fb      	strb	r3, [r7, #31]
 800a12c:	e144      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a83      	ldr	r2, [pc, #524]	; (800a340 <UART_SetConfig+0x2d0>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d132      	bne.n	800a19e <UART_SetConfig+0x12e>
 800a138:	4b80      	ldr	r3, [pc, #512]	; (800a33c <UART_SetConfig+0x2cc>)
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13e:	f003 030c 	and.w	r3, r3, #12
 800a142:	2b0c      	cmp	r3, #12
 800a144:	d828      	bhi.n	800a198 <UART_SetConfig+0x128>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <UART_SetConfig+0xdc>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a181 	.word	0x0800a181
 800a150:	0800a199 	.word	0x0800a199
 800a154:	0800a199 	.word	0x0800a199
 800a158:	0800a199 	.word	0x0800a199
 800a15c:	0800a18d 	.word	0x0800a18d
 800a160:	0800a199 	.word	0x0800a199
 800a164:	0800a199 	.word	0x0800a199
 800a168:	0800a199 	.word	0x0800a199
 800a16c:	0800a187 	.word	0x0800a187
 800a170:	0800a199 	.word	0x0800a199
 800a174:	0800a199 	.word	0x0800a199
 800a178:	0800a199 	.word	0x0800a199
 800a17c:	0800a193 	.word	0x0800a193
 800a180:	2300      	movs	r3, #0
 800a182:	77fb      	strb	r3, [r7, #31]
 800a184:	e118      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a186:	2302      	movs	r3, #2
 800a188:	77fb      	strb	r3, [r7, #31]
 800a18a:	e115      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a18c:	2304      	movs	r3, #4
 800a18e:	77fb      	strb	r3, [r7, #31]
 800a190:	e112      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a192:	2308      	movs	r3, #8
 800a194:	77fb      	strb	r3, [r7, #31]
 800a196:	e10f      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a198:	2310      	movs	r3, #16
 800a19a:	77fb      	strb	r3, [r7, #31]
 800a19c:	e10c      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a68      	ldr	r2, [pc, #416]	; (800a344 <UART_SetConfig+0x2d4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d120      	bne.n	800a1ea <UART_SetConfig+0x17a>
 800a1a8:	4b64      	ldr	r3, [pc, #400]	; (800a33c <UART_SetConfig+0x2cc>)
 800a1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1b2:	2b30      	cmp	r3, #48	; 0x30
 800a1b4:	d013      	beq.n	800a1de <UART_SetConfig+0x16e>
 800a1b6:	2b30      	cmp	r3, #48	; 0x30
 800a1b8:	d814      	bhi.n	800a1e4 <UART_SetConfig+0x174>
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d009      	beq.n	800a1d2 <UART_SetConfig+0x162>
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	d810      	bhi.n	800a1e4 <UART_SetConfig+0x174>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <UART_SetConfig+0x15c>
 800a1c6:	2b10      	cmp	r3, #16
 800a1c8:	d006      	beq.n	800a1d8 <UART_SetConfig+0x168>
 800a1ca:	e00b      	b.n	800a1e4 <UART_SetConfig+0x174>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	77fb      	strb	r3, [r7, #31]
 800a1d0:	e0f2      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	77fb      	strb	r3, [r7, #31]
 800a1d6:	e0ef      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a1d8:	2304      	movs	r3, #4
 800a1da:	77fb      	strb	r3, [r7, #31]
 800a1dc:	e0ec      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a1de:	2308      	movs	r3, #8
 800a1e0:	77fb      	strb	r3, [r7, #31]
 800a1e2:	e0e9      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a1e4:	2310      	movs	r3, #16
 800a1e6:	77fb      	strb	r3, [r7, #31]
 800a1e8:	e0e6      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a56      	ldr	r2, [pc, #344]	; (800a348 <UART_SetConfig+0x2d8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d120      	bne.n	800a236 <UART_SetConfig+0x1c6>
 800a1f4:	4b51      	ldr	r3, [pc, #324]	; (800a33c <UART_SetConfig+0x2cc>)
 800a1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a1fe:	2bc0      	cmp	r3, #192	; 0xc0
 800a200:	d013      	beq.n	800a22a <UART_SetConfig+0x1ba>
 800a202:	2bc0      	cmp	r3, #192	; 0xc0
 800a204:	d814      	bhi.n	800a230 <UART_SetConfig+0x1c0>
 800a206:	2b80      	cmp	r3, #128	; 0x80
 800a208:	d009      	beq.n	800a21e <UART_SetConfig+0x1ae>
 800a20a:	2b80      	cmp	r3, #128	; 0x80
 800a20c:	d810      	bhi.n	800a230 <UART_SetConfig+0x1c0>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <UART_SetConfig+0x1a8>
 800a212:	2b40      	cmp	r3, #64	; 0x40
 800a214:	d006      	beq.n	800a224 <UART_SetConfig+0x1b4>
 800a216:	e00b      	b.n	800a230 <UART_SetConfig+0x1c0>
 800a218:	2300      	movs	r3, #0
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e0cc      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a21e:	2302      	movs	r3, #2
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e0c9      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a224:	2304      	movs	r3, #4
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e0c6      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a22a:	2308      	movs	r3, #8
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e0c3      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e0c0      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a44      	ldr	r2, [pc, #272]	; (800a34c <UART_SetConfig+0x2dc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d125      	bne.n	800a28c <UART_SetConfig+0x21c>
 800a240:	4b3e      	ldr	r3, [pc, #248]	; (800a33c <UART_SetConfig+0x2cc>)
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a24a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a24e:	d017      	beq.n	800a280 <UART_SetConfig+0x210>
 800a250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a254:	d817      	bhi.n	800a286 <UART_SetConfig+0x216>
 800a256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a25a:	d00b      	beq.n	800a274 <UART_SetConfig+0x204>
 800a25c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a260:	d811      	bhi.n	800a286 <UART_SetConfig+0x216>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <UART_SetConfig+0x1fe>
 800a266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a26a:	d006      	beq.n	800a27a <UART_SetConfig+0x20a>
 800a26c:	e00b      	b.n	800a286 <UART_SetConfig+0x216>
 800a26e:	2300      	movs	r3, #0
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e0a1      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a274:	2302      	movs	r3, #2
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	e09e      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a27a:	2304      	movs	r3, #4
 800a27c:	77fb      	strb	r3, [r7, #31]
 800a27e:	e09b      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a280:	2308      	movs	r3, #8
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e098      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a286:	2310      	movs	r3, #16
 800a288:	77fb      	strb	r3, [r7, #31]
 800a28a:	e095      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a2f      	ldr	r2, [pc, #188]	; (800a350 <UART_SetConfig+0x2e0>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d125      	bne.n	800a2e2 <UART_SetConfig+0x272>
 800a296:	4b29      	ldr	r3, [pc, #164]	; (800a33c <UART_SetConfig+0x2cc>)
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2a4:	d017      	beq.n	800a2d6 <UART_SetConfig+0x266>
 800a2a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2aa:	d817      	bhi.n	800a2dc <UART_SetConfig+0x26c>
 800a2ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b0:	d00b      	beq.n	800a2ca <UART_SetConfig+0x25a>
 800a2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2b6:	d811      	bhi.n	800a2dc <UART_SetConfig+0x26c>
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <UART_SetConfig+0x254>
 800a2bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2c0:	d006      	beq.n	800a2d0 <UART_SetConfig+0x260>
 800a2c2:	e00b      	b.n	800a2dc <UART_SetConfig+0x26c>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	77fb      	strb	r3, [r7, #31]
 800a2c8:	e076      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	77fb      	strb	r3, [r7, #31]
 800a2ce:	e073      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a2d0:	2304      	movs	r3, #4
 800a2d2:	77fb      	strb	r3, [r7, #31]
 800a2d4:	e070      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	77fb      	strb	r3, [r7, #31]
 800a2da:	e06d      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a2dc:	2310      	movs	r3, #16
 800a2de:	77fb      	strb	r3, [r7, #31]
 800a2e0:	e06a      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a1b      	ldr	r2, [pc, #108]	; (800a354 <UART_SetConfig+0x2e4>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d138      	bne.n	800a35e <UART_SetConfig+0x2ee>
 800a2ec:	4b13      	ldr	r3, [pc, #76]	; (800a33c <UART_SetConfig+0x2cc>)
 800a2ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a2f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2fa:	d017      	beq.n	800a32c <UART_SetConfig+0x2bc>
 800a2fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a300:	d82a      	bhi.n	800a358 <UART_SetConfig+0x2e8>
 800a302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a306:	d00b      	beq.n	800a320 <UART_SetConfig+0x2b0>
 800a308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a30c:	d824      	bhi.n	800a358 <UART_SetConfig+0x2e8>
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <UART_SetConfig+0x2aa>
 800a312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a316:	d006      	beq.n	800a326 <UART_SetConfig+0x2b6>
 800a318:	e01e      	b.n	800a358 <UART_SetConfig+0x2e8>
 800a31a:	2300      	movs	r3, #0
 800a31c:	77fb      	strb	r3, [r7, #31]
 800a31e:	e04b      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a320:	2302      	movs	r3, #2
 800a322:	77fb      	strb	r3, [r7, #31]
 800a324:	e048      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a326:	2304      	movs	r3, #4
 800a328:	77fb      	strb	r3, [r7, #31]
 800a32a:	e045      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a32c:	2308      	movs	r3, #8
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e042      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a332:	bf00      	nop
 800a334:	efff69f3 	.word	0xefff69f3
 800a338:	40011000 	.word	0x40011000
 800a33c:	40023800 	.word	0x40023800
 800a340:	40004400 	.word	0x40004400
 800a344:	40004800 	.word	0x40004800
 800a348:	40004c00 	.word	0x40004c00
 800a34c:	40005000 	.word	0x40005000
 800a350:	40011400 	.word	0x40011400
 800a354:	40007800 	.word	0x40007800
 800a358:	2310      	movs	r3, #16
 800a35a:	77fb      	strb	r3, [r7, #31]
 800a35c:	e02c      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a72      	ldr	r2, [pc, #456]	; (800a52c <UART_SetConfig+0x4bc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d125      	bne.n	800a3b4 <UART_SetConfig+0x344>
 800a368:	4b71      	ldr	r3, [pc, #452]	; (800a530 <UART_SetConfig+0x4c0>)
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a372:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a376:	d017      	beq.n	800a3a8 <UART_SetConfig+0x338>
 800a378:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a37c:	d817      	bhi.n	800a3ae <UART_SetConfig+0x33e>
 800a37e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a382:	d00b      	beq.n	800a39c <UART_SetConfig+0x32c>
 800a384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a388:	d811      	bhi.n	800a3ae <UART_SetConfig+0x33e>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <UART_SetConfig+0x326>
 800a38e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a392:	d006      	beq.n	800a3a2 <UART_SetConfig+0x332>
 800a394:	e00b      	b.n	800a3ae <UART_SetConfig+0x33e>
 800a396:	2300      	movs	r3, #0
 800a398:	77fb      	strb	r3, [r7, #31]
 800a39a:	e00d      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a39c:	2302      	movs	r3, #2
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e00a      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a3a2:	2304      	movs	r3, #4
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e007      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e004      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e001      	b.n	800a3b8 <UART_SetConfig+0x348>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c0:	d15c      	bne.n	800a47c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 800a3c2:	7ffb      	ldrb	r3, [r7, #31]
 800a3c4:	2b08      	cmp	r3, #8
 800a3c6:	d828      	bhi.n	800a41a <UART_SetConfig+0x3aa>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <UART_SetConfig+0x360>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a3f5 	.word	0x0800a3f5
 800a3d4:	0800a3fd 	.word	0x0800a3fd
 800a3d8:	0800a405 	.word	0x0800a405
 800a3dc:	0800a41b 	.word	0x0800a41b
 800a3e0:	0800a40b 	.word	0x0800a40b
 800a3e4:	0800a41b 	.word	0x0800a41b
 800a3e8:	0800a41b 	.word	0x0800a41b
 800a3ec:	0800a41b 	.word	0x0800a41b
 800a3f0:	0800a413 	.word	0x0800a413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3f4:	f7fc ff42 	bl	800727c <HAL_RCC_GetPCLK1Freq>
 800a3f8:	61b8      	str	r0, [r7, #24]
        break;
 800a3fa:	e013      	b.n	800a424 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3fc:	f7fc ff52 	bl	80072a4 <HAL_RCC_GetPCLK2Freq>
 800a400:	61b8      	str	r0, [r7, #24]
        break;
 800a402:	e00f      	b.n	800a424 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a404:	4b4b      	ldr	r3, [pc, #300]	; (800a534 <UART_SetConfig+0x4c4>)
 800a406:	61bb      	str	r3, [r7, #24]
        break;
 800a408:	e00c      	b.n	800a424 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a40a:	f7fc fe25 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 800a40e:	61b8      	str	r0, [r7, #24]
        break;
 800a410:	e008      	b.n	800a424 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a416:	61bb      	str	r3, [r7, #24]
        break;
 800a418:	e004      	b.n	800a424 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	77bb      	strb	r3, [r7, #30]
        break;
 800a422:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d074      	beq.n	800a514 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	005a      	lsls	r2, r3, #1
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	085b      	lsrs	r3, r3, #1
 800a434:	441a      	add	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d916      	bls.n	800a476 <UART_SetConfig+0x406>
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a44e:	d212      	bcs.n	800a476 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f023 030f 	bic.w	r3, r3, #15
 800a458:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	b29a      	uxth	r2, r3
 800a466:	89fb      	ldrh	r3, [r7, #14]
 800a468:	4313      	orrs	r3, r2
 800a46a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	89fa      	ldrh	r2, [r7, #14]
 800a472:	60da      	str	r2, [r3, #12]
 800a474:	e04e      	b.n	800a514 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	77bb      	strb	r3, [r7, #30]
 800a47a:	e04b      	b.n	800a514 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a47c:	7ffb      	ldrb	r3, [r7, #31]
 800a47e:	2b08      	cmp	r3, #8
 800a480:	d827      	bhi.n	800a4d2 <UART_SetConfig+0x462>
 800a482:	a201      	add	r2, pc, #4	; (adr r2, 800a488 <UART_SetConfig+0x418>)
 800a484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a488:	0800a4ad 	.word	0x0800a4ad
 800a48c:	0800a4b5 	.word	0x0800a4b5
 800a490:	0800a4bd 	.word	0x0800a4bd
 800a494:	0800a4d3 	.word	0x0800a4d3
 800a498:	0800a4c3 	.word	0x0800a4c3
 800a49c:	0800a4d3 	.word	0x0800a4d3
 800a4a0:	0800a4d3 	.word	0x0800a4d3
 800a4a4:	0800a4d3 	.word	0x0800a4d3
 800a4a8:	0800a4cb 	.word	0x0800a4cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4ac:	f7fc fee6 	bl	800727c <HAL_RCC_GetPCLK1Freq>
 800a4b0:	61b8      	str	r0, [r7, #24]
        break;
 800a4b2:	e013      	b.n	800a4dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4b4:	f7fc fef6 	bl	80072a4 <HAL_RCC_GetPCLK2Freq>
 800a4b8:	61b8      	str	r0, [r7, #24]
        break;
 800a4ba:	e00f      	b.n	800a4dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4bc:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <UART_SetConfig+0x4c4>)
 800a4be:	61bb      	str	r3, [r7, #24]
        break;
 800a4c0:	e00c      	b.n	800a4dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4c2:	f7fc fdc9 	bl	8007058 <HAL_RCC_GetSysClockFreq>
 800a4c6:	61b8      	str	r0, [r7, #24]
        break;
 800a4c8:	e008      	b.n	800a4dc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4ce:	61bb      	str	r3, [r7, #24]
        break;
 800a4d0:	e004      	b.n	800a4dc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	77bb      	strb	r3, [r7, #30]
        break;
 800a4da:	bf00      	nop
    }

    if (pclk != 0U)
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d018      	beq.n	800a514 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	085a      	lsrs	r2, r3, #1
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	441a      	add	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b0f      	cmp	r3, #15
 800a4fc:	d908      	bls.n	800a510 <UART_SetConfig+0x4a0>
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a504:	d204      	bcs.n	800a510 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	60da      	str	r2, [r3, #12]
 800a50e:	e001      	b.n	800a514 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a520:	7fbb      	ldrb	r3, [r7, #30]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	40007c00 	.word	0x40007c00
 800a530:	40023800 	.word	0x40023800
 800a534:	00f42400 	.word	0x00f42400

0800a538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00a      	beq.n	800a562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d00a      	beq.n	800a584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	430a      	orrs	r2, r1
 800a582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5aa:	f003 0308 	and.w	r3, r3, #8
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00a      	beq.n	800a5c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	430a      	orrs	r2, r1
 800a5c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	f003 0310 	and.w	r3, r3, #16
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00a      	beq.n	800a5ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	430a      	orrs	r2, r1
 800a5e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ee:	f003 0320 	and.w	r3, r3, #32
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00a      	beq.n	800a60c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	430a      	orrs	r2, r1
 800a60a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a614:	2b00      	cmp	r3, #0
 800a616:	d01a      	beq.n	800a64e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	430a      	orrs	r2, r1
 800a62c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a636:	d10a      	bne.n	800a64e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	430a      	orrs	r2, r1
 800a64c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	605a      	str	r2, [r3, #4]
  }
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af02      	add	r7, sp, #8
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a68c:	f7fa fd1a 	bl	80050c4 <HAL_GetTick>
 800a690:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0308 	and.w	r3, r3, #8
 800a69c:	2b08      	cmp	r3, #8
 800a69e:	d10e      	bne.n	800a6be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f817 	bl	800a6e2 <UART_WaitOnFlagUntilTimeout>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e00d      	b.n	800a6da <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2220      	movs	r2, #32
 800a6c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	60f8      	str	r0, [r7, #12]
 800a6ea:	60b9      	str	r1, [r7, #8]
 800a6ec:	603b      	str	r3, [r7, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f2:	e05e      	b.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d05a      	beq.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6fc:	f7fa fce2 	bl	80050c4 <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	69ba      	ldr	r2, [r7, #24]
 800a708:	429a      	cmp	r2, r3
 800a70a:	d302      	bcc.n	800a712 <UART_WaitOnFlagUntilTimeout+0x30>
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d11b      	bne.n	800a74a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a720:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0201 	bic.w	r2, r2, #1
 800a730:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2220      	movs	r2, #32
 800a736:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2220      	movs	r2, #32
 800a73c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e043      	b.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d02c      	beq.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	69db      	ldr	r3, [r3, #28]
 800a75e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a766:	d124      	bne.n	800a7b2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a780:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689a      	ldr	r2, [r3, #8]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0201 	bic.w	r2, r2, #1
 800a790:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	2220      	movs	r2, #32
 800a796:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2220      	movs	r2, #32
 800a79c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e00f      	b.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69da      	ldr	r2, [r3, #28]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	bf0c      	ite	eq
 800a7c2:	2301      	moveq	r3, #1
 800a7c4:	2300      	movne	r3, #0
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d091      	beq.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
	...

0800a7dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7dc:	b084      	sub	sp, #16
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	f107 001c 	add.w	r0, r7, #28
 800a7ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d126      	bne.n	800a842 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68da      	ldr	r2, [r3, #12]
 800a804:	4b23      	ldr	r3, [pc, #140]	; (800a894 <USB_CoreInit+0xb8>)
 800a806:	4013      	ands	r3, r2
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f043 0210 	orr.w	r2, r3, #16
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a826:	2b01      	cmp	r3, #1
 800a828:	d105      	bne.n	800a836 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fa5a 	bl	800acf0 <USB_CoreReset>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73fb      	strb	r3, [r7, #15]
 800a840:	e010      	b.n	800a864 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa4e 	bl	800acf0 <USB_CoreReset>
 800a854:	4603      	mov	r3, r0
 800a856:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10b      	bne.n	800a882 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f043 0206 	orr.w	r2, r3, #6
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f043 0220 	orr.w	r2, r3, #32
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a88e:	b004      	add	sp, #16
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	ffbdffbf 	.word	0xffbdffbf

0800a898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a898:	b480      	push	{r7}
 800a89a:	b083      	sub	sp, #12
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	f023 0201 	bic.w	r2, r3, #1
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b082      	sub	sp, #8
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a8d2:	78fb      	ldrb	r3, [r7, #3]
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d106      	bne.n	800a8e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	68db      	ldr	r3, [r3, #12]
 800a8dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	60da      	str	r2, [r3, #12]
 800a8e4:	e00b      	b.n	800a8fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d106      	bne.n	800a8fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	60da      	str	r2, [r3, #12]
 800a8f8:	e001      	b.n	800a8fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e003      	b.n	800a906 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a8fe:	2032      	movs	r0, #50	; 0x32
 800a900:	f7fa fbec 	bl	80050dc <HAL_Delay>

  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a910:	b084      	sub	sp, #16
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a91e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a92a:	2300      	movs	r3, #0
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	e009      	b.n	800a944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3340      	adds	r3, #64	; 0x40
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	3301      	adds	r3, #1
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b0e      	cmp	r3, #14
 800a948:	d9f2      	bls.n	800a930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11c      	bne.n	800a98a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95e:	f043 0302 	orr.w	r3, r3, #2
 800a962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e005      	b.n	800a996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a99c:	461a      	mov	r2, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	680b      	ldr	r3, [r1, #0]
 800a9b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d10c      	bne.n	800a9d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d104      	bne.n	800a9cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f959 	bl	800ac7c <USB_SetDevSpeed>
 800a9ca:	e018      	b.n	800a9fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f954 	bl	800ac7c <USB_SetDevSpeed>
 800a9d4:	e013      	b.n	800a9fe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	2b03      	cmp	r3, #3
 800a9da:	d10c      	bne.n	800a9f6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f949 	bl	800ac7c <USB_SetDevSpeed>
 800a9ea:	e008      	b.n	800a9fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f944 	bl	800ac7c <USB_SetDevSpeed>
 800a9f4:	e003      	b.n	800a9fe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9f6:	2103      	movs	r1, #3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 f93f 	bl	800ac7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9fe:	2110      	movs	r1, #16
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f8f3 	bl	800abec <USB_FlushTxFifo>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 f911 	bl	800ac38 <USB_FlushRxFifo>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d001      	beq.n	800aa20 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa26:	461a      	mov	r2, r3
 800aa28:	2300      	movs	r3, #0
 800aa2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	461a      	mov	r2, r3
 800aa34:	2300      	movs	r3, #0
 800aa36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa3e:	461a      	mov	r2, r3
 800aa40:	2300      	movs	r3, #0
 800aa42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	e043      	b.n	800aad2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa60:	d118      	bne.n	800aa94 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	461a      	mov	r2, r3
 800aa76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e013      	b.n	800aaa6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa90:	6013      	str	r3, [r2, #0]
 800aa92:	e008      	b.n	800aaa6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	015a      	lsls	r2, r3, #5
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	461a      	mov	r2, r3
 800aab4:	2300      	movs	r3, #0
 800aab6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	015a      	lsls	r2, r3, #5
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4413      	add	r3, r2
 800aac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aac4:	461a      	mov	r2, r3
 800aac6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	3301      	adds	r3, #1
 800aad0:	613b      	str	r3, [r7, #16]
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	693a      	ldr	r2, [r7, #16]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d3b7      	bcc.n	800aa4a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	e043      	b.n	800ab68 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aaf6:	d118      	bne.n	800ab2a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	e013      	b.n	800ab3c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	461a      	mov	r2, r3
 800ab22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	e008      	b.n	800ab3c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	461a      	mov	r2, r3
 800ab38:	2300      	movs	r3, #0
 800ab3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab48:	461a      	mov	r2, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	3301      	adds	r3, #1
 800ab66:	613b      	str	r3, [r7, #16]
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d3b7      	bcc.n	800aae0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	f043 0210 	orr.w	r2, r3, #16
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	699a      	ldr	r2, [r3, #24]
 800aba8:	4b0e      	ldr	r3, [pc, #56]	; (800abe4 <USB_DevInit+0x2d4>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d005      	beq.n	800abc2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	699b      	ldr	r3, [r3, #24]
 800abba:	f043 0208 	orr.w	r2, r3, #8
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800abc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d105      	bne.n	800abd4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699a      	ldr	r2, [r3, #24]
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <USB_DevInit+0x2d8>)
 800abce:	4313      	orrs	r3, r2
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abe0:	b004      	add	sp, #16
 800abe2:	4770      	bx	lr
 800abe4:	803c3800 	.word	0x803c3800
 800abe8:	40000004 	.word	0x40000004

0800abec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	019b      	lsls	r3, r3, #6
 800abfe:	f043 0220 	orr.w	r2, r3, #32
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	60fb      	str	r3, [r7, #12]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4a09      	ldr	r2, [pc, #36]	; (800ac34 <USB_FlushTxFifo+0x48>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d901      	bls.n	800ac18 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ac14:	2303      	movs	r3, #3
 800ac16:	e006      	b.n	800ac26 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	f003 0320 	and.w	r3, r3, #32
 800ac20:	2b20      	cmp	r3, #32
 800ac22:	d0f0      	beq.n	800ac06 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	00030d40 	.word	0x00030d40

0800ac38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2210      	movs	r2, #16
 800ac48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	60fb      	str	r3, [r7, #12]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4a09      	ldr	r2, [pc, #36]	; (800ac78 <USB_FlushRxFifo+0x40>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d901      	bls.n	800ac5c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e006      	b.n	800ac6a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f003 0310 	and.w	r3, r3, #16
 800ac64:	2b10      	cmp	r3, #16
 800ac66:	d0f0      	beq.n	800ac4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ac68:	2300      	movs	r3, #0
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	00030d40 	.word	0x00030d40

0800ac7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acdc:	f043 0302 	orr.w	r3, r3, #2
 800ace0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	3301      	adds	r3, #1
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	4a13      	ldr	r2, [pc, #76]	; (800ad54 <USB_CoreReset+0x64>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d901      	bls.n	800ad0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e01b      	b.n	800ad46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	daf2      	bge.n	800acfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad16:	2300      	movs	r3, #0
 800ad18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	f043 0201 	orr.w	r2, r3, #1
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4a09      	ldr	r2, [pc, #36]	; (800ad54 <USB_CoreReset+0x64>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d901      	bls.n	800ad38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	e006      	b.n	800ad46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d0f0      	beq.n	800ad26 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	00030d40 	.word	0x00030d40

0800ad58 <arm_sin_f32>:
 800ad58:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ad5c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800add4 <arm_sin_f32+0x7c>
 800ad60:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ad64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad68:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ad6c:	d42c      	bmi.n	800adc8 <arm_sin_f32+0x70>
 800ad6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad72:	eddf 6a19 	vldr	s13, [pc, #100]	; 800add8 <arm_sin_f32+0x80>
 800ad76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ad7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ad82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad86:	db01      	blt.n	800ad8c <arm_sin_f32+0x34>
 800ad88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad8c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ad90:	4a12      	ldr	r2, [pc, #72]	; (800addc <arm_sin_f32+0x84>)
 800ad92:	ee17 3a10 	vmov	r3, s14
 800ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee06 3a90 	vmov	s13, r3
 800ada2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ada6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800adaa:	ed91 0a00 	vldr	s0, [r1]
 800adae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adb2:	edd1 6a01 	vldr	s13, [r1, #4]
 800adb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800adba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800adbe:	ee27 0a00 	vmul.f32	s0, s14, s0
 800adc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800adc6:	4770      	bx	lr
 800adc8:	ee17 3a90 	vmov	r3, s15
 800adcc:	3b01      	subs	r3, #1
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	e7cc      	b.n	800ad6e <arm_sin_f32+0x16>
 800add4:	3e22f983 	.word	0x3e22f983
 800add8:	44000000 	.word	0x44000000
 800addc:	0800ed1c 	.word	0x0800ed1c

0800ade0 <arm_cos_f32>:
 800ade0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800ae54 <arm_cos_f32+0x74>
 800ade4:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800ade8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800adec:	ee30 0a07 	vadd.f32	s0, s0, s14
 800adf0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800adf4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800adf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfc:	d504      	bpl.n	800ae08 <arm_cos_f32+0x28>
 800adfe:	ee17 3a90 	vmov	r3, s15
 800ae02:	3b01      	subs	r3, #1
 800ae04:	ee07 3a90 	vmov	s15, r3
 800ae08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae0c:	eddf 6a12 	vldr	s13, [pc, #72]	; 800ae58 <arm_cos_f32+0x78>
 800ae10:	4a12      	ldr	r2, [pc, #72]	; (800ae5c <arm_cos_f32+0x7c>)
 800ae12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae1a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ae1e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ae22:	ee17 3a90 	vmov	r3, s15
 800ae26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2a:	ee07 3a90 	vmov	s15, r3
 800ae2e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	edd1 6a00 	vldr	s13, [r1]
 800ae3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ae3e:	ed91 0a01 	vldr	s0, [r1, #4]
 800ae42:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae46:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ae4a:	ee27 0a26 	vmul.f32	s0, s14, s13
 800ae4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ae52:	4770      	bx	lr
 800ae54:	3e22f983 	.word	0x3e22f983
 800ae58:	44000000 	.word	0x44000000
 800ae5c:	0800ed1c 	.word	0x0800ed1c

0800ae60 <_Znwj>:
 800ae60:	2801      	cmp	r0, #1
 800ae62:	bf38      	it	cc
 800ae64:	2001      	movcc	r0, #1
 800ae66:	b510      	push	{r4, lr}
 800ae68:	4604      	mov	r4, r0
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f000 f8fa 	bl	800b064 <malloc>
 800ae70:	b930      	cbnz	r0, 800ae80 <_Znwj+0x20>
 800ae72:	f000 f81b 	bl	800aeac <_ZSt15get_new_handlerv>
 800ae76:	b908      	cbnz	r0, 800ae7c <_Znwj+0x1c>
 800ae78:	f000 f8c2 	bl	800b000 <abort>
 800ae7c:	4780      	blx	r0
 800ae7e:	e7f4      	b.n	800ae6a <_Znwj+0xa>
 800ae80:	bd10      	pop	{r4, pc}

0800ae82 <__cxa_pure_virtual>:
 800ae82:	b508      	push	{r3, lr}
 800ae84:	f000 f80c 	bl	800aea0 <_ZSt9terminatev>

0800ae88 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ae88:	b508      	push	{r3, lr}
 800ae8a:	4780      	blx	r0
 800ae8c:	f000 f8b8 	bl	800b000 <abort>

0800ae90 <_ZSt13get_terminatev>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <_ZSt13get_terminatev+0xc>)
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	f3bf 8f5b 	dmb	ish
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	2000000c 	.word	0x2000000c

0800aea0 <_ZSt9terminatev>:
 800aea0:	b508      	push	{r3, lr}
 800aea2:	f7ff fff5 	bl	800ae90 <_ZSt13get_terminatev>
 800aea6:	f7ff ffef 	bl	800ae88 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800aeac <_ZSt15get_new_handlerv>:
 800aeac:	4b02      	ldr	r3, [pc, #8]	; (800aeb8 <_ZSt15get_new_handlerv+0xc>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	f3bf 8f5b 	dmb	ish
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	20000894 	.word	0x20000894

0800aebc <fmodf>:
 800aebc:	b508      	push	{r3, lr}
 800aebe:	ed2d 8b02 	vpush	{d8}
 800aec2:	eef0 8a40 	vmov.f32	s17, s0
 800aec6:	eeb0 8a60 	vmov.f32	s16, s1
 800aeca:	f000 f817 	bl	800aefc <__ieee754_fmodf>
 800aece:	eef4 8a48 	vcmp.f32	s17, s16
 800aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed6:	d60c      	bvs.n	800aef2 <fmodf+0x36>
 800aed8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800aef8 <fmodf+0x3c>
 800aedc:	eeb4 8a68 	vcmp.f32	s16, s17
 800aee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee4:	d105      	bne.n	800aef2 <fmodf+0x36>
 800aee6:	f000 f893 	bl	800b010 <__errno>
 800aeea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800aeee:	2321      	movs	r3, #33	; 0x21
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	ecbd 8b02 	vpop	{d8}
 800aef6:	bd08      	pop	{r3, pc}
 800aef8:	00000000 	.word	0x00000000

0800aefc <__ieee754_fmodf>:
 800aefc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefe:	ee10 5a90 	vmov	r5, s1
 800af02:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800af06:	d009      	beq.n	800af1c <__ieee754_fmodf+0x20>
 800af08:	ee10 2a10 	vmov	r2, s0
 800af0c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800af10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800af14:	da02      	bge.n	800af1c <__ieee754_fmodf+0x20>
 800af16:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af1a:	dd04      	ble.n	800af26 <__ieee754_fmodf+0x2a>
 800af1c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800af20:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800af24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af26:	42a3      	cmp	r3, r4
 800af28:	dbfc      	blt.n	800af24 <__ieee754_fmodf+0x28>
 800af2a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800af2e:	d105      	bne.n	800af3c <__ieee754_fmodf+0x40>
 800af30:	4b32      	ldr	r3, [pc, #200]	; (800affc <__ieee754_fmodf+0x100>)
 800af32:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800af36:	ed93 0a00 	vldr	s0, [r3]
 800af3a:	e7f3      	b.n	800af24 <__ieee754_fmodf+0x28>
 800af3c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800af40:	d13f      	bne.n	800afc2 <__ieee754_fmodf+0xc6>
 800af42:	0219      	lsls	r1, r3, #8
 800af44:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800af48:	2900      	cmp	r1, #0
 800af4a:	dc37      	bgt.n	800afbc <__ieee754_fmodf+0xc0>
 800af4c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800af50:	d13d      	bne.n	800afce <__ieee754_fmodf+0xd2>
 800af52:	0227      	lsls	r7, r4, #8
 800af54:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800af58:	2f00      	cmp	r7, #0
 800af5a:	da35      	bge.n	800afc8 <__ieee754_fmodf+0xcc>
 800af5c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800af60:	bfbb      	ittet	lt
 800af62:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800af66:	1a12      	sublt	r2, r2, r0
 800af68:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800af6c:	4093      	lsllt	r3, r2
 800af6e:	bfa8      	it	ge
 800af70:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800af74:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800af78:	bfb5      	itete	lt
 800af7a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800af7e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800af82:	1a52      	sublt	r2, r2, r1
 800af84:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800af88:	bfb8      	it	lt
 800af8a:	4094      	lsllt	r4, r2
 800af8c:	1a40      	subs	r0, r0, r1
 800af8e:	1b1a      	subs	r2, r3, r4
 800af90:	bb00      	cbnz	r0, 800afd4 <__ieee754_fmodf+0xd8>
 800af92:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800af96:	bf38      	it	cc
 800af98:	4613      	movcc	r3, r2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0c8      	beq.n	800af30 <__ieee754_fmodf+0x34>
 800af9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afa2:	db1f      	blt.n	800afe4 <__ieee754_fmodf+0xe8>
 800afa4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800afa8:	db1f      	blt.n	800afea <__ieee754_fmodf+0xee>
 800afaa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800afae:	317f      	adds	r1, #127	; 0x7f
 800afb0:	4333      	orrs	r3, r6
 800afb2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800afb6:	ee00 3a10 	vmov	s0, r3
 800afba:	e7b3      	b.n	800af24 <__ieee754_fmodf+0x28>
 800afbc:	3801      	subs	r0, #1
 800afbe:	0049      	lsls	r1, r1, #1
 800afc0:	e7c2      	b.n	800af48 <__ieee754_fmodf+0x4c>
 800afc2:	15d8      	asrs	r0, r3, #23
 800afc4:	387f      	subs	r0, #127	; 0x7f
 800afc6:	e7c1      	b.n	800af4c <__ieee754_fmodf+0x50>
 800afc8:	3901      	subs	r1, #1
 800afca:	007f      	lsls	r7, r7, #1
 800afcc:	e7c4      	b.n	800af58 <__ieee754_fmodf+0x5c>
 800afce:	15e1      	asrs	r1, r4, #23
 800afd0:	397f      	subs	r1, #127	; 0x7f
 800afd2:	e7c3      	b.n	800af5c <__ieee754_fmodf+0x60>
 800afd4:	2a00      	cmp	r2, #0
 800afd6:	da02      	bge.n	800afde <__ieee754_fmodf+0xe2>
 800afd8:	005b      	lsls	r3, r3, #1
 800afda:	3801      	subs	r0, #1
 800afdc:	e7d7      	b.n	800af8e <__ieee754_fmodf+0x92>
 800afde:	d0a7      	beq.n	800af30 <__ieee754_fmodf+0x34>
 800afe0:	0053      	lsls	r3, r2, #1
 800afe2:	e7fa      	b.n	800afda <__ieee754_fmodf+0xde>
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	3901      	subs	r1, #1
 800afe8:	e7d9      	b.n	800af9e <__ieee754_fmodf+0xa2>
 800afea:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800afee:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800aff2:	3182      	adds	r1, #130	; 0x82
 800aff4:	410b      	asrs	r3, r1
 800aff6:	4333      	orrs	r3, r6
 800aff8:	e7dd      	b.n	800afb6 <__ieee754_fmodf+0xba>
 800affa:	bf00      	nop
 800affc:	0800f520 	.word	0x0800f520

0800b000 <abort>:
 800b000:	b508      	push	{r3, lr}
 800b002:	2006      	movs	r0, #6
 800b004:	f000 fe4e 	bl	800bca4 <raise>
 800b008:	2001      	movs	r0, #1
 800b00a:	f7f9 ff1d 	bl	8004e48 <_exit>
	...

0800b010 <__errno>:
 800b010:	4b01      	ldr	r3, [pc, #4]	; (800b018 <__errno+0x8>)
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	20000010 	.word	0x20000010

0800b01c <__libc_init_array>:
 800b01c:	b570      	push	{r4, r5, r6, lr}
 800b01e:	4d0d      	ldr	r5, [pc, #52]	; (800b054 <__libc_init_array+0x38>)
 800b020:	4c0d      	ldr	r4, [pc, #52]	; (800b058 <__libc_init_array+0x3c>)
 800b022:	1b64      	subs	r4, r4, r5
 800b024:	10a4      	asrs	r4, r4, #2
 800b026:	2600      	movs	r6, #0
 800b028:	42a6      	cmp	r6, r4
 800b02a:	d109      	bne.n	800b040 <__libc_init_array+0x24>
 800b02c:	4d0b      	ldr	r5, [pc, #44]	; (800b05c <__libc_init_array+0x40>)
 800b02e:	4c0c      	ldr	r4, [pc, #48]	; (800b060 <__libc_init_array+0x44>)
 800b030:	f002 fdbe 	bl	800dbb0 <_init>
 800b034:	1b64      	subs	r4, r4, r5
 800b036:	10a4      	asrs	r4, r4, #2
 800b038:	2600      	movs	r6, #0
 800b03a:	42a6      	cmp	r6, r4
 800b03c:	d105      	bne.n	800b04a <__libc_init_array+0x2e>
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	f855 3b04 	ldr.w	r3, [r5], #4
 800b044:	4798      	blx	r3
 800b046:	3601      	adds	r6, #1
 800b048:	e7ee      	b.n	800b028 <__libc_init_array+0xc>
 800b04a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b04e:	4798      	blx	r3
 800b050:	3601      	adds	r6, #1
 800b052:	e7f2      	b.n	800b03a <__libc_init_array+0x1e>
 800b054:	0800f90c 	.word	0x0800f90c
 800b058:	0800f90c 	.word	0x0800f90c
 800b05c:	0800f90c 	.word	0x0800f90c
 800b060:	0800f910 	.word	0x0800f910

0800b064 <malloc>:
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <malloc+0xc>)
 800b066:	4601      	mov	r1, r0
 800b068:	6818      	ldr	r0, [r3, #0]
 800b06a:	f000 b877 	b.w	800b15c <_malloc_r>
 800b06e:	bf00      	nop
 800b070:	20000010 	.word	0x20000010

0800b074 <memset>:
 800b074:	4402      	add	r2, r0
 800b076:	4603      	mov	r3, r0
 800b078:	4293      	cmp	r3, r2
 800b07a:	d100      	bne.n	800b07e <memset+0xa>
 800b07c:	4770      	bx	lr
 800b07e:	f803 1b01 	strb.w	r1, [r3], #1
 800b082:	e7f9      	b.n	800b078 <memset+0x4>

0800b084 <_free_r>:
 800b084:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b086:	2900      	cmp	r1, #0
 800b088:	d044      	beq.n	800b114 <_free_r+0x90>
 800b08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b08e:	9001      	str	r0, [sp, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	f1a1 0404 	sub.w	r4, r1, #4
 800b096:	bfb8      	it	lt
 800b098:	18e4      	addlt	r4, r4, r3
 800b09a:	f001 ff8d 	bl	800cfb8 <__malloc_lock>
 800b09e:	4a1e      	ldr	r2, [pc, #120]	; (800b118 <_free_r+0x94>)
 800b0a0:	9801      	ldr	r0, [sp, #4]
 800b0a2:	6813      	ldr	r3, [r2, #0]
 800b0a4:	b933      	cbnz	r3, 800b0b4 <_free_r+0x30>
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	6014      	str	r4, [r2, #0]
 800b0aa:	b003      	add	sp, #12
 800b0ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0b0:	f001 bf88 	b.w	800cfc4 <__malloc_unlock>
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	d908      	bls.n	800b0ca <_free_r+0x46>
 800b0b8:	6825      	ldr	r5, [r4, #0]
 800b0ba:	1961      	adds	r1, r4, r5
 800b0bc:	428b      	cmp	r3, r1
 800b0be:	bf01      	itttt	eq
 800b0c0:	6819      	ldreq	r1, [r3, #0]
 800b0c2:	685b      	ldreq	r3, [r3, #4]
 800b0c4:	1949      	addeq	r1, r1, r5
 800b0c6:	6021      	streq	r1, [r4, #0]
 800b0c8:	e7ed      	b.n	800b0a6 <_free_r+0x22>
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	b10b      	cbz	r3, 800b0d4 <_free_r+0x50>
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d9fa      	bls.n	800b0ca <_free_r+0x46>
 800b0d4:	6811      	ldr	r1, [r2, #0]
 800b0d6:	1855      	adds	r5, r2, r1
 800b0d8:	42a5      	cmp	r5, r4
 800b0da:	d10b      	bne.n	800b0f4 <_free_r+0x70>
 800b0dc:	6824      	ldr	r4, [r4, #0]
 800b0de:	4421      	add	r1, r4
 800b0e0:	1854      	adds	r4, r2, r1
 800b0e2:	42a3      	cmp	r3, r4
 800b0e4:	6011      	str	r1, [r2, #0]
 800b0e6:	d1e0      	bne.n	800b0aa <_free_r+0x26>
 800b0e8:	681c      	ldr	r4, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	6053      	str	r3, [r2, #4]
 800b0ee:	4421      	add	r1, r4
 800b0f0:	6011      	str	r1, [r2, #0]
 800b0f2:	e7da      	b.n	800b0aa <_free_r+0x26>
 800b0f4:	d902      	bls.n	800b0fc <_free_r+0x78>
 800b0f6:	230c      	movs	r3, #12
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	e7d6      	b.n	800b0aa <_free_r+0x26>
 800b0fc:	6825      	ldr	r5, [r4, #0]
 800b0fe:	1961      	adds	r1, r4, r5
 800b100:	428b      	cmp	r3, r1
 800b102:	bf04      	itt	eq
 800b104:	6819      	ldreq	r1, [r3, #0]
 800b106:	685b      	ldreq	r3, [r3, #4]
 800b108:	6063      	str	r3, [r4, #4]
 800b10a:	bf04      	itt	eq
 800b10c:	1949      	addeq	r1, r1, r5
 800b10e:	6021      	streq	r1, [r4, #0]
 800b110:	6054      	str	r4, [r2, #4]
 800b112:	e7ca      	b.n	800b0aa <_free_r+0x26>
 800b114:	b003      	add	sp, #12
 800b116:	bd30      	pop	{r4, r5, pc}
 800b118:	20000898 	.word	0x20000898

0800b11c <sbrk_aligned>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4e0e      	ldr	r6, [pc, #56]	; (800b158 <sbrk_aligned+0x3c>)
 800b120:	460c      	mov	r4, r1
 800b122:	6831      	ldr	r1, [r6, #0]
 800b124:	4605      	mov	r5, r0
 800b126:	b911      	cbnz	r1, 800b12e <sbrk_aligned+0x12>
 800b128:	f000 fd84 	bl	800bc34 <_sbrk_r>
 800b12c:	6030      	str	r0, [r6, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 fd7f 	bl	800bc34 <_sbrk_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d00a      	beq.n	800b150 <sbrk_aligned+0x34>
 800b13a:	1cc4      	adds	r4, r0, #3
 800b13c:	f024 0403 	bic.w	r4, r4, #3
 800b140:	42a0      	cmp	r0, r4
 800b142:	d007      	beq.n	800b154 <sbrk_aligned+0x38>
 800b144:	1a21      	subs	r1, r4, r0
 800b146:	4628      	mov	r0, r5
 800b148:	f000 fd74 	bl	800bc34 <_sbrk_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d101      	bne.n	800b154 <sbrk_aligned+0x38>
 800b150:	f04f 34ff 	mov.w	r4, #4294967295
 800b154:	4620      	mov	r0, r4
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	2000089c 	.word	0x2000089c

0800b15c <_malloc_r>:
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	1ccd      	adds	r5, r1, #3
 800b162:	f025 0503 	bic.w	r5, r5, #3
 800b166:	3508      	adds	r5, #8
 800b168:	2d0c      	cmp	r5, #12
 800b16a:	bf38      	it	cc
 800b16c:	250c      	movcc	r5, #12
 800b16e:	2d00      	cmp	r5, #0
 800b170:	4607      	mov	r7, r0
 800b172:	db01      	blt.n	800b178 <_malloc_r+0x1c>
 800b174:	42a9      	cmp	r1, r5
 800b176:	d905      	bls.n	800b184 <_malloc_r+0x28>
 800b178:	230c      	movs	r3, #12
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	2600      	movs	r6, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	4e2e      	ldr	r6, [pc, #184]	; (800b240 <_malloc_r+0xe4>)
 800b186:	f001 ff17 	bl	800cfb8 <__malloc_lock>
 800b18a:	6833      	ldr	r3, [r6, #0]
 800b18c:	461c      	mov	r4, r3
 800b18e:	bb34      	cbnz	r4, 800b1de <_malloc_r+0x82>
 800b190:	4629      	mov	r1, r5
 800b192:	4638      	mov	r0, r7
 800b194:	f7ff ffc2 	bl	800b11c <sbrk_aligned>
 800b198:	1c43      	adds	r3, r0, #1
 800b19a:	4604      	mov	r4, r0
 800b19c:	d14d      	bne.n	800b23a <_malloc_r+0xde>
 800b19e:	6834      	ldr	r4, [r6, #0]
 800b1a0:	4626      	mov	r6, r4
 800b1a2:	2e00      	cmp	r6, #0
 800b1a4:	d140      	bne.n	800b228 <_malloc_r+0xcc>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	eb04 0803 	add.w	r8, r4, r3
 800b1b0:	f000 fd40 	bl	800bc34 <_sbrk_r>
 800b1b4:	4580      	cmp	r8, r0
 800b1b6:	d13a      	bne.n	800b22e <_malloc_r+0xd2>
 800b1b8:	6821      	ldr	r1, [r4, #0]
 800b1ba:	3503      	adds	r5, #3
 800b1bc:	1a6d      	subs	r5, r5, r1
 800b1be:	f025 0503 	bic.w	r5, r5, #3
 800b1c2:	3508      	adds	r5, #8
 800b1c4:	2d0c      	cmp	r5, #12
 800b1c6:	bf38      	it	cc
 800b1c8:	250c      	movcc	r5, #12
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	f7ff ffa5 	bl	800b11c <sbrk_aligned>
 800b1d2:	3001      	adds	r0, #1
 800b1d4:	d02b      	beq.n	800b22e <_malloc_r+0xd2>
 800b1d6:	6823      	ldr	r3, [r4, #0]
 800b1d8:	442b      	add	r3, r5
 800b1da:	6023      	str	r3, [r4, #0]
 800b1dc:	e00e      	b.n	800b1fc <_malloc_r+0xa0>
 800b1de:	6822      	ldr	r2, [r4, #0]
 800b1e0:	1b52      	subs	r2, r2, r5
 800b1e2:	d41e      	bmi.n	800b222 <_malloc_r+0xc6>
 800b1e4:	2a0b      	cmp	r2, #11
 800b1e6:	d916      	bls.n	800b216 <_malloc_r+0xba>
 800b1e8:	1961      	adds	r1, r4, r5
 800b1ea:	42a3      	cmp	r3, r4
 800b1ec:	6025      	str	r5, [r4, #0]
 800b1ee:	bf18      	it	ne
 800b1f0:	6059      	strne	r1, [r3, #4]
 800b1f2:	6863      	ldr	r3, [r4, #4]
 800b1f4:	bf08      	it	eq
 800b1f6:	6031      	streq	r1, [r6, #0]
 800b1f8:	5162      	str	r2, [r4, r5]
 800b1fa:	604b      	str	r3, [r1, #4]
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f104 060b 	add.w	r6, r4, #11
 800b202:	f001 fedf 	bl	800cfc4 <__malloc_unlock>
 800b206:	f026 0607 	bic.w	r6, r6, #7
 800b20a:	1d23      	adds	r3, r4, #4
 800b20c:	1af2      	subs	r2, r6, r3
 800b20e:	d0b6      	beq.n	800b17e <_malloc_r+0x22>
 800b210:	1b9b      	subs	r3, r3, r6
 800b212:	50a3      	str	r3, [r4, r2]
 800b214:	e7b3      	b.n	800b17e <_malloc_r+0x22>
 800b216:	6862      	ldr	r2, [r4, #4]
 800b218:	42a3      	cmp	r3, r4
 800b21a:	bf0c      	ite	eq
 800b21c:	6032      	streq	r2, [r6, #0]
 800b21e:	605a      	strne	r2, [r3, #4]
 800b220:	e7ec      	b.n	800b1fc <_malloc_r+0xa0>
 800b222:	4623      	mov	r3, r4
 800b224:	6864      	ldr	r4, [r4, #4]
 800b226:	e7b2      	b.n	800b18e <_malloc_r+0x32>
 800b228:	4634      	mov	r4, r6
 800b22a:	6876      	ldr	r6, [r6, #4]
 800b22c:	e7b9      	b.n	800b1a2 <_malloc_r+0x46>
 800b22e:	230c      	movs	r3, #12
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	4638      	mov	r0, r7
 800b234:	f001 fec6 	bl	800cfc4 <__malloc_unlock>
 800b238:	e7a1      	b.n	800b17e <_malloc_r+0x22>
 800b23a:	6025      	str	r5, [r4, #0]
 800b23c:	e7de      	b.n	800b1fc <_malloc_r+0xa0>
 800b23e:	bf00      	nop
 800b240:	20000898 	.word	0x20000898

0800b244 <__cvt>:
 800b244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b248:	ec55 4b10 	vmov	r4, r5, d0
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	460e      	mov	r6, r1
 800b250:	4619      	mov	r1, r3
 800b252:	462b      	mov	r3, r5
 800b254:	bfbb      	ittet	lt
 800b256:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b25a:	461d      	movlt	r5, r3
 800b25c:	2300      	movge	r3, #0
 800b25e:	232d      	movlt	r3, #45	; 0x2d
 800b260:	700b      	strb	r3, [r1, #0]
 800b262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b264:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b268:	4691      	mov	r9, r2
 800b26a:	f023 0820 	bic.w	r8, r3, #32
 800b26e:	bfbc      	itt	lt
 800b270:	4622      	movlt	r2, r4
 800b272:	4614      	movlt	r4, r2
 800b274:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b278:	d005      	beq.n	800b286 <__cvt+0x42>
 800b27a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b27e:	d100      	bne.n	800b282 <__cvt+0x3e>
 800b280:	3601      	adds	r6, #1
 800b282:	2102      	movs	r1, #2
 800b284:	e000      	b.n	800b288 <__cvt+0x44>
 800b286:	2103      	movs	r1, #3
 800b288:	ab03      	add	r3, sp, #12
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	ab02      	add	r3, sp, #8
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	ec45 4b10 	vmov	d0, r4, r5
 800b294:	4653      	mov	r3, sl
 800b296:	4632      	mov	r2, r6
 800b298:	f000 fe6e 	bl	800bf78 <_dtoa_r>
 800b29c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	d102      	bne.n	800b2aa <__cvt+0x66>
 800b2a4:	f019 0f01 	tst.w	r9, #1
 800b2a8:	d022      	beq.n	800b2f0 <__cvt+0xac>
 800b2aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b2ae:	eb07 0906 	add.w	r9, r7, r6
 800b2b2:	d110      	bne.n	800b2d6 <__cvt+0x92>
 800b2b4:	783b      	ldrb	r3, [r7, #0]
 800b2b6:	2b30      	cmp	r3, #48	; 0x30
 800b2b8:	d10a      	bne.n	800b2d0 <__cvt+0x8c>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4620      	mov	r0, r4
 800b2c0:	4629      	mov	r1, r5
 800b2c2:	f7f5 fc29 	bl	8000b18 <__aeabi_dcmpeq>
 800b2c6:	b918      	cbnz	r0, 800b2d0 <__cvt+0x8c>
 800b2c8:	f1c6 0601 	rsb	r6, r6, #1
 800b2cc:	f8ca 6000 	str.w	r6, [sl]
 800b2d0:	f8da 3000 	ldr.w	r3, [sl]
 800b2d4:	4499      	add	r9, r3
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7f5 fc1b 	bl	8000b18 <__aeabi_dcmpeq>
 800b2e2:	b108      	cbz	r0, 800b2e8 <__cvt+0xa4>
 800b2e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b2e8:	2230      	movs	r2, #48	; 0x30
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	454b      	cmp	r3, r9
 800b2ee:	d307      	bcc.n	800b300 <__cvt+0xbc>
 800b2f0:	9b03      	ldr	r3, [sp, #12]
 800b2f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2f4:	1bdb      	subs	r3, r3, r7
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	b004      	add	sp, #16
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	1c59      	adds	r1, r3, #1
 800b302:	9103      	str	r1, [sp, #12]
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	e7f0      	b.n	800b2ea <__cvt+0xa6>

0800b308 <__exponent>:
 800b308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b30a:	4603      	mov	r3, r0
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bfb8      	it	lt
 800b310:	4249      	neglt	r1, r1
 800b312:	f803 2b02 	strb.w	r2, [r3], #2
 800b316:	bfb4      	ite	lt
 800b318:	222d      	movlt	r2, #45	; 0x2d
 800b31a:	222b      	movge	r2, #43	; 0x2b
 800b31c:	2909      	cmp	r1, #9
 800b31e:	7042      	strb	r2, [r0, #1]
 800b320:	dd2a      	ble.n	800b378 <__exponent+0x70>
 800b322:	f10d 0407 	add.w	r4, sp, #7
 800b326:	46a4      	mov	ip, r4
 800b328:	270a      	movs	r7, #10
 800b32a:	46a6      	mov	lr, r4
 800b32c:	460a      	mov	r2, r1
 800b32e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b332:	fb07 1516 	mls	r5, r7, r6, r1
 800b336:	3530      	adds	r5, #48	; 0x30
 800b338:	2a63      	cmp	r2, #99	; 0x63
 800b33a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b33e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b342:	4631      	mov	r1, r6
 800b344:	dcf1      	bgt.n	800b32a <__exponent+0x22>
 800b346:	3130      	adds	r1, #48	; 0x30
 800b348:	f1ae 0502 	sub.w	r5, lr, #2
 800b34c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b350:	1c44      	adds	r4, r0, #1
 800b352:	4629      	mov	r1, r5
 800b354:	4561      	cmp	r1, ip
 800b356:	d30a      	bcc.n	800b36e <__exponent+0x66>
 800b358:	f10d 0209 	add.w	r2, sp, #9
 800b35c:	eba2 020e 	sub.w	r2, r2, lr
 800b360:	4565      	cmp	r5, ip
 800b362:	bf88      	it	hi
 800b364:	2200      	movhi	r2, #0
 800b366:	4413      	add	r3, r2
 800b368:	1a18      	subs	r0, r3, r0
 800b36a:	b003      	add	sp, #12
 800b36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b36e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b372:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b376:	e7ed      	b.n	800b354 <__exponent+0x4c>
 800b378:	2330      	movs	r3, #48	; 0x30
 800b37a:	3130      	adds	r1, #48	; 0x30
 800b37c:	7083      	strb	r3, [r0, #2]
 800b37e:	70c1      	strb	r1, [r0, #3]
 800b380:	1d03      	adds	r3, r0, #4
 800b382:	e7f1      	b.n	800b368 <__exponent+0x60>

0800b384 <_printf_float>:
 800b384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b388:	ed2d 8b02 	vpush	{d8}
 800b38c:	b08d      	sub	sp, #52	; 0x34
 800b38e:	460c      	mov	r4, r1
 800b390:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b394:	4616      	mov	r6, r2
 800b396:	461f      	mov	r7, r3
 800b398:	4605      	mov	r5, r0
 800b39a:	f001 fd93 	bl	800cec4 <_localeconv_r>
 800b39e:	f8d0 a000 	ldr.w	sl, [r0]
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	f7f4 ff3c 	bl	8000220 <strlen>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b3b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b3b8:	3307      	adds	r3, #7
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	f103 0208 	add.w	r2, r3, #8
 800b3c2:	f8c8 2000 	str.w	r2, [r8]
 800b3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b3ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b3d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b3d6:	9307      	str	r3, [sp, #28]
 800b3d8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b3dc:	ee08 0a10 	vmov	s16, r0
 800b3e0:	4b9f      	ldr	r3, [pc, #636]	; (800b660 <_printf_float+0x2dc>)
 800b3e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ea:	f7f5 fbc7 	bl	8000b7c <__aeabi_dcmpun>
 800b3ee:	bb88      	cbnz	r0, 800b454 <_printf_float+0xd0>
 800b3f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3f4:	4b9a      	ldr	r3, [pc, #616]	; (800b660 <_printf_float+0x2dc>)
 800b3f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fa:	f7f5 fba1 	bl	8000b40 <__aeabi_dcmple>
 800b3fe:	bb48      	cbnz	r0, 800b454 <_printf_float+0xd0>
 800b400:	2200      	movs	r2, #0
 800b402:	2300      	movs	r3, #0
 800b404:	4640      	mov	r0, r8
 800b406:	4649      	mov	r1, r9
 800b408:	f7f5 fb90 	bl	8000b2c <__aeabi_dcmplt>
 800b40c:	b110      	cbz	r0, 800b414 <_printf_float+0x90>
 800b40e:	232d      	movs	r3, #45	; 0x2d
 800b410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b414:	4b93      	ldr	r3, [pc, #588]	; (800b664 <_printf_float+0x2e0>)
 800b416:	4894      	ldr	r0, [pc, #592]	; (800b668 <_printf_float+0x2e4>)
 800b418:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b41c:	bf94      	ite	ls
 800b41e:	4698      	movls	r8, r3
 800b420:	4680      	movhi	r8, r0
 800b422:	2303      	movs	r3, #3
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	9b05      	ldr	r3, [sp, #20]
 800b428:	f023 0204 	bic.w	r2, r3, #4
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	f04f 0900 	mov.w	r9, #0
 800b432:	9700      	str	r7, [sp, #0]
 800b434:	4633      	mov	r3, r6
 800b436:	aa0b      	add	r2, sp, #44	; 0x2c
 800b438:	4621      	mov	r1, r4
 800b43a:	4628      	mov	r0, r5
 800b43c:	f000 f9d8 	bl	800b7f0 <_printf_common>
 800b440:	3001      	adds	r0, #1
 800b442:	f040 8090 	bne.w	800b566 <_printf_float+0x1e2>
 800b446:	f04f 30ff 	mov.w	r0, #4294967295
 800b44a:	b00d      	add	sp, #52	; 0x34
 800b44c:	ecbd 8b02 	vpop	{d8}
 800b450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b454:	4642      	mov	r2, r8
 800b456:	464b      	mov	r3, r9
 800b458:	4640      	mov	r0, r8
 800b45a:	4649      	mov	r1, r9
 800b45c:	f7f5 fb8e 	bl	8000b7c <__aeabi_dcmpun>
 800b460:	b140      	cbz	r0, 800b474 <_printf_float+0xf0>
 800b462:	464b      	mov	r3, r9
 800b464:	2b00      	cmp	r3, #0
 800b466:	bfbc      	itt	lt
 800b468:	232d      	movlt	r3, #45	; 0x2d
 800b46a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b46e:	487f      	ldr	r0, [pc, #508]	; (800b66c <_printf_float+0x2e8>)
 800b470:	4b7f      	ldr	r3, [pc, #508]	; (800b670 <_printf_float+0x2ec>)
 800b472:	e7d1      	b.n	800b418 <_printf_float+0x94>
 800b474:	6863      	ldr	r3, [r4, #4]
 800b476:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b47a:	9206      	str	r2, [sp, #24]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	d13f      	bne.n	800b500 <_printf_float+0x17c>
 800b480:	2306      	movs	r3, #6
 800b482:	6063      	str	r3, [r4, #4]
 800b484:	9b05      	ldr	r3, [sp, #20]
 800b486:	6861      	ldr	r1, [r4, #4]
 800b488:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b48c:	2300      	movs	r3, #0
 800b48e:	9303      	str	r3, [sp, #12]
 800b490:	ab0a      	add	r3, sp, #40	; 0x28
 800b492:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b496:	ab09      	add	r3, sp, #36	; 0x24
 800b498:	ec49 8b10 	vmov	d0, r8, r9
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	6022      	str	r2, [r4, #0]
 800b4a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7ff fecd 	bl	800b244 <__cvt>
 800b4aa:	9b06      	ldr	r3, [sp, #24]
 800b4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ae:	2b47      	cmp	r3, #71	; 0x47
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	d108      	bne.n	800b4c6 <_printf_float+0x142>
 800b4b4:	1cc8      	adds	r0, r1, #3
 800b4b6:	db02      	blt.n	800b4be <_printf_float+0x13a>
 800b4b8:	6863      	ldr	r3, [r4, #4]
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	dd41      	ble.n	800b542 <_printf_float+0x1be>
 800b4be:	f1ab 0b02 	sub.w	fp, fp, #2
 800b4c2:	fa5f fb8b 	uxtb.w	fp, fp
 800b4c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4ca:	d820      	bhi.n	800b50e <_printf_float+0x18a>
 800b4cc:	3901      	subs	r1, #1
 800b4ce:	465a      	mov	r2, fp
 800b4d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b4d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b4d6:	f7ff ff17 	bl	800b308 <__exponent>
 800b4da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4dc:	1813      	adds	r3, r2, r0
 800b4de:	2a01      	cmp	r2, #1
 800b4e0:	4681      	mov	r9, r0
 800b4e2:	6123      	str	r3, [r4, #16]
 800b4e4:	dc02      	bgt.n	800b4ec <_printf_float+0x168>
 800b4e6:	6822      	ldr	r2, [r4, #0]
 800b4e8:	07d2      	lsls	r2, r2, #31
 800b4ea:	d501      	bpl.n	800b4f0 <_printf_float+0x16c>
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	6123      	str	r3, [r4, #16]
 800b4f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d09c      	beq.n	800b432 <_printf_float+0xae>
 800b4f8:	232d      	movs	r3, #45	; 0x2d
 800b4fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4fe:	e798      	b.n	800b432 <_printf_float+0xae>
 800b500:	9a06      	ldr	r2, [sp, #24]
 800b502:	2a47      	cmp	r2, #71	; 0x47
 800b504:	d1be      	bne.n	800b484 <_printf_float+0x100>
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1bc      	bne.n	800b484 <_printf_float+0x100>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e7b9      	b.n	800b482 <_printf_float+0xfe>
 800b50e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b512:	d118      	bne.n	800b546 <_printf_float+0x1c2>
 800b514:	2900      	cmp	r1, #0
 800b516:	6863      	ldr	r3, [r4, #4]
 800b518:	dd0b      	ble.n	800b532 <_printf_float+0x1ae>
 800b51a:	6121      	str	r1, [r4, #16]
 800b51c:	b913      	cbnz	r3, 800b524 <_printf_float+0x1a0>
 800b51e:	6822      	ldr	r2, [r4, #0]
 800b520:	07d0      	lsls	r0, r2, #31
 800b522:	d502      	bpl.n	800b52a <_printf_float+0x1a6>
 800b524:	3301      	adds	r3, #1
 800b526:	440b      	add	r3, r1
 800b528:	6123      	str	r3, [r4, #16]
 800b52a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b52c:	f04f 0900 	mov.w	r9, #0
 800b530:	e7de      	b.n	800b4f0 <_printf_float+0x16c>
 800b532:	b913      	cbnz	r3, 800b53a <_printf_float+0x1b6>
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	07d2      	lsls	r2, r2, #31
 800b538:	d501      	bpl.n	800b53e <_printf_float+0x1ba>
 800b53a:	3302      	adds	r3, #2
 800b53c:	e7f4      	b.n	800b528 <_printf_float+0x1a4>
 800b53e:	2301      	movs	r3, #1
 800b540:	e7f2      	b.n	800b528 <_printf_float+0x1a4>
 800b542:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b548:	4299      	cmp	r1, r3
 800b54a:	db05      	blt.n	800b558 <_printf_float+0x1d4>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	6121      	str	r1, [r4, #16]
 800b550:	07d8      	lsls	r0, r3, #31
 800b552:	d5ea      	bpl.n	800b52a <_printf_float+0x1a6>
 800b554:	1c4b      	adds	r3, r1, #1
 800b556:	e7e7      	b.n	800b528 <_printf_float+0x1a4>
 800b558:	2900      	cmp	r1, #0
 800b55a:	bfd4      	ite	le
 800b55c:	f1c1 0202 	rsble	r2, r1, #2
 800b560:	2201      	movgt	r2, #1
 800b562:	4413      	add	r3, r2
 800b564:	e7e0      	b.n	800b528 <_printf_float+0x1a4>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	055a      	lsls	r2, r3, #21
 800b56a:	d407      	bmi.n	800b57c <_printf_float+0x1f8>
 800b56c:	6923      	ldr	r3, [r4, #16]
 800b56e:	4642      	mov	r2, r8
 800b570:	4631      	mov	r1, r6
 800b572:	4628      	mov	r0, r5
 800b574:	47b8      	blx	r7
 800b576:	3001      	adds	r0, #1
 800b578:	d12c      	bne.n	800b5d4 <_printf_float+0x250>
 800b57a:	e764      	b.n	800b446 <_printf_float+0xc2>
 800b57c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b580:	f240 80e0 	bls.w	800b744 <_printf_float+0x3c0>
 800b584:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b588:	2200      	movs	r2, #0
 800b58a:	2300      	movs	r3, #0
 800b58c:	f7f5 fac4 	bl	8000b18 <__aeabi_dcmpeq>
 800b590:	2800      	cmp	r0, #0
 800b592:	d034      	beq.n	800b5fe <_printf_float+0x27a>
 800b594:	4a37      	ldr	r2, [pc, #220]	; (800b674 <_printf_float+0x2f0>)
 800b596:	2301      	movs	r3, #1
 800b598:	4631      	mov	r1, r6
 800b59a:	4628      	mov	r0, r5
 800b59c:	47b8      	blx	r7
 800b59e:	3001      	adds	r0, #1
 800b5a0:	f43f af51 	beq.w	800b446 <_printf_float+0xc2>
 800b5a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	db02      	blt.n	800b5b2 <_printf_float+0x22e>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	07d8      	lsls	r0, r3, #31
 800b5b0:	d510      	bpl.n	800b5d4 <_printf_float+0x250>
 800b5b2:	ee18 3a10 	vmov	r3, s16
 800b5b6:	4652      	mov	r2, sl
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	47b8      	blx	r7
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f43f af41 	beq.w	800b446 <_printf_float+0xc2>
 800b5c4:	f04f 0800 	mov.w	r8, #0
 800b5c8:	f104 091a 	add.w	r9, r4, #26
 800b5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	4543      	cmp	r3, r8
 800b5d2:	dc09      	bgt.n	800b5e8 <_printf_float+0x264>
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	079b      	lsls	r3, r3, #30
 800b5d8:	f100 8105 	bmi.w	800b7e6 <_printf_float+0x462>
 800b5dc:	68e0      	ldr	r0, [r4, #12]
 800b5de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5e0:	4298      	cmp	r0, r3
 800b5e2:	bfb8      	it	lt
 800b5e4:	4618      	movlt	r0, r3
 800b5e6:	e730      	b.n	800b44a <_printf_float+0xc6>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	464a      	mov	r2, r9
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	47b8      	blx	r7
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	f43f af27 	beq.w	800b446 <_printf_float+0xc2>
 800b5f8:	f108 0801 	add.w	r8, r8, #1
 800b5fc:	e7e6      	b.n	800b5cc <_printf_float+0x248>
 800b5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b600:	2b00      	cmp	r3, #0
 800b602:	dc39      	bgt.n	800b678 <_printf_float+0x2f4>
 800b604:	4a1b      	ldr	r2, [pc, #108]	; (800b674 <_printf_float+0x2f0>)
 800b606:	2301      	movs	r3, #1
 800b608:	4631      	mov	r1, r6
 800b60a:	4628      	mov	r0, r5
 800b60c:	47b8      	blx	r7
 800b60e:	3001      	adds	r0, #1
 800b610:	f43f af19 	beq.w	800b446 <_printf_float+0xc2>
 800b614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b618:	4313      	orrs	r3, r2
 800b61a:	d102      	bne.n	800b622 <_printf_float+0x29e>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	07d9      	lsls	r1, r3, #31
 800b620:	d5d8      	bpl.n	800b5d4 <_printf_float+0x250>
 800b622:	ee18 3a10 	vmov	r3, s16
 800b626:	4652      	mov	r2, sl
 800b628:	4631      	mov	r1, r6
 800b62a:	4628      	mov	r0, r5
 800b62c:	47b8      	blx	r7
 800b62e:	3001      	adds	r0, #1
 800b630:	f43f af09 	beq.w	800b446 <_printf_float+0xc2>
 800b634:	f04f 0900 	mov.w	r9, #0
 800b638:	f104 0a1a 	add.w	sl, r4, #26
 800b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63e:	425b      	negs	r3, r3
 800b640:	454b      	cmp	r3, r9
 800b642:	dc01      	bgt.n	800b648 <_printf_float+0x2c4>
 800b644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b646:	e792      	b.n	800b56e <_printf_float+0x1ea>
 800b648:	2301      	movs	r3, #1
 800b64a:	4652      	mov	r2, sl
 800b64c:	4631      	mov	r1, r6
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	f43f aef7 	beq.w	800b446 <_printf_float+0xc2>
 800b658:	f109 0901 	add.w	r9, r9, #1
 800b65c:	e7ee      	b.n	800b63c <_printf_float+0x2b8>
 800b65e:	bf00      	nop
 800b660:	7fefffff 	.word	0x7fefffff
 800b664:	0800f52c 	.word	0x0800f52c
 800b668:	0800f530 	.word	0x0800f530
 800b66c:	0800f538 	.word	0x0800f538
 800b670:	0800f534 	.word	0x0800f534
 800b674:	0800f53c 	.word	0x0800f53c
 800b678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b67a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b67c:	429a      	cmp	r2, r3
 800b67e:	bfa8      	it	ge
 800b680:	461a      	movge	r2, r3
 800b682:	2a00      	cmp	r2, #0
 800b684:	4691      	mov	r9, r2
 800b686:	dc37      	bgt.n	800b6f8 <_printf_float+0x374>
 800b688:	f04f 0b00 	mov.w	fp, #0
 800b68c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b690:	f104 021a 	add.w	r2, r4, #26
 800b694:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b696:	9305      	str	r3, [sp, #20]
 800b698:	eba3 0309 	sub.w	r3, r3, r9
 800b69c:	455b      	cmp	r3, fp
 800b69e:	dc33      	bgt.n	800b708 <_printf_float+0x384>
 800b6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	db3b      	blt.n	800b720 <_printf_float+0x39c>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	07da      	lsls	r2, r3, #31
 800b6ac:	d438      	bmi.n	800b720 <_printf_float+0x39c>
 800b6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b0:	9a05      	ldr	r2, [sp, #20]
 800b6b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b6b4:	1a9a      	subs	r2, r3, r2
 800b6b6:	eba3 0901 	sub.w	r9, r3, r1
 800b6ba:	4591      	cmp	r9, r2
 800b6bc:	bfa8      	it	ge
 800b6be:	4691      	movge	r9, r2
 800b6c0:	f1b9 0f00 	cmp.w	r9, #0
 800b6c4:	dc35      	bgt.n	800b732 <_printf_float+0x3ae>
 800b6c6:	f04f 0800 	mov.w	r8, #0
 800b6ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b6ce:	f104 0a1a 	add.w	sl, r4, #26
 800b6d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6d6:	1a9b      	subs	r3, r3, r2
 800b6d8:	eba3 0309 	sub.w	r3, r3, r9
 800b6dc:	4543      	cmp	r3, r8
 800b6de:	f77f af79 	ble.w	800b5d4 <_printf_float+0x250>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	4631      	mov	r1, r6
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b8      	blx	r7
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	f43f aeaa 	beq.w	800b446 <_printf_float+0xc2>
 800b6f2:	f108 0801 	add.w	r8, r8, #1
 800b6f6:	e7ec      	b.n	800b6d2 <_printf_float+0x34e>
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4642      	mov	r2, r8
 800b6fe:	4628      	mov	r0, r5
 800b700:	47b8      	blx	r7
 800b702:	3001      	adds	r0, #1
 800b704:	d1c0      	bne.n	800b688 <_printf_float+0x304>
 800b706:	e69e      	b.n	800b446 <_printf_float+0xc2>
 800b708:	2301      	movs	r3, #1
 800b70a:	4631      	mov	r1, r6
 800b70c:	4628      	mov	r0, r5
 800b70e:	9205      	str	r2, [sp, #20]
 800b710:	47b8      	blx	r7
 800b712:	3001      	adds	r0, #1
 800b714:	f43f ae97 	beq.w	800b446 <_printf_float+0xc2>
 800b718:	9a05      	ldr	r2, [sp, #20]
 800b71a:	f10b 0b01 	add.w	fp, fp, #1
 800b71e:	e7b9      	b.n	800b694 <_printf_float+0x310>
 800b720:	ee18 3a10 	vmov	r3, s16
 800b724:	4652      	mov	r2, sl
 800b726:	4631      	mov	r1, r6
 800b728:	4628      	mov	r0, r5
 800b72a:	47b8      	blx	r7
 800b72c:	3001      	adds	r0, #1
 800b72e:	d1be      	bne.n	800b6ae <_printf_float+0x32a>
 800b730:	e689      	b.n	800b446 <_printf_float+0xc2>
 800b732:	9a05      	ldr	r2, [sp, #20]
 800b734:	464b      	mov	r3, r9
 800b736:	4442      	add	r2, r8
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	d1c1      	bne.n	800b6c6 <_printf_float+0x342>
 800b742:	e680      	b.n	800b446 <_printf_float+0xc2>
 800b744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b746:	2a01      	cmp	r2, #1
 800b748:	dc01      	bgt.n	800b74e <_printf_float+0x3ca>
 800b74a:	07db      	lsls	r3, r3, #31
 800b74c:	d538      	bpl.n	800b7c0 <_printf_float+0x43c>
 800b74e:	2301      	movs	r3, #1
 800b750:	4642      	mov	r2, r8
 800b752:	4631      	mov	r1, r6
 800b754:	4628      	mov	r0, r5
 800b756:	47b8      	blx	r7
 800b758:	3001      	adds	r0, #1
 800b75a:	f43f ae74 	beq.w	800b446 <_printf_float+0xc2>
 800b75e:	ee18 3a10 	vmov	r3, s16
 800b762:	4652      	mov	r2, sl
 800b764:	4631      	mov	r1, r6
 800b766:	4628      	mov	r0, r5
 800b768:	47b8      	blx	r7
 800b76a:	3001      	adds	r0, #1
 800b76c:	f43f ae6b 	beq.w	800b446 <_printf_float+0xc2>
 800b770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	f7f5 f9ce 	bl	8000b18 <__aeabi_dcmpeq>
 800b77c:	b9d8      	cbnz	r0, 800b7b6 <_printf_float+0x432>
 800b77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b780:	f108 0201 	add.w	r2, r8, #1
 800b784:	3b01      	subs	r3, #1
 800b786:	4631      	mov	r1, r6
 800b788:	4628      	mov	r0, r5
 800b78a:	47b8      	blx	r7
 800b78c:	3001      	adds	r0, #1
 800b78e:	d10e      	bne.n	800b7ae <_printf_float+0x42a>
 800b790:	e659      	b.n	800b446 <_printf_float+0xc2>
 800b792:	2301      	movs	r3, #1
 800b794:	4652      	mov	r2, sl
 800b796:	4631      	mov	r1, r6
 800b798:	4628      	mov	r0, r5
 800b79a:	47b8      	blx	r7
 800b79c:	3001      	adds	r0, #1
 800b79e:	f43f ae52 	beq.w	800b446 <_printf_float+0xc2>
 800b7a2:	f108 0801 	add.w	r8, r8, #1
 800b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	4543      	cmp	r3, r8
 800b7ac:	dcf1      	bgt.n	800b792 <_printf_float+0x40e>
 800b7ae:	464b      	mov	r3, r9
 800b7b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b7b4:	e6dc      	b.n	800b570 <_printf_float+0x1ec>
 800b7b6:	f04f 0800 	mov.w	r8, #0
 800b7ba:	f104 0a1a 	add.w	sl, r4, #26
 800b7be:	e7f2      	b.n	800b7a6 <_printf_float+0x422>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	4642      	mov	r2, r8
 800b7c4:	e7df      	b.n	800b786 <_printf_float+0x402>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	464a      	mov	r2, r9
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b8      	blx	r7
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	f43f ae38 	beq.w	800b446 <_printf_float+0xc2>
 800b7d6:	f108 0801 	add.w	r8, r8, #1
 800b7da:	68e3      	ldr	r3, [r4, #12]
 800b7dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7de:	1a5b      	subs	r3, r3, r1
 800b7e0:	4543      	cmp	r3, r8
 800b7e2:	dcf0      	bgt.n	800b7c6 <_printf_float+0x442>
 800b7e4:	e6fa      	b.n	800b5dc <_printf_float+0x258>
 800b7e6:	f04f 0800 	mov.w	r8, #0
 800b7ea:	f104 0919 	add.w	r9, r4, #25
 800b7ee:	e7f4      	b.n	800b7da <_printf_float+0x456>

0800b7f0 <_printf_common>:
 800b7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7f4:	4616      	mov	r6, r2
 800b7f6:	4699      	mov	r9, r3
 800b7f8:	688a      	ldr	r2, [r1, #8]
 800b7fa:	690b      	ldr	r3, [r1, #16]
 800b7fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b800:	4293      	cmp	r3, r2
 800b802:	bfb8      	it	lt
 800b804:	4613      	movlt	r3, r2
 800b806:	6033      	str	r3, [r6, #0]
 800b808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b80c:	4607      	mov	r7, r0
 800b80e:	460c      	mov	r4, r1
 800b810:	b10a      	cbz	r2, 800b816 <_printf_common+0x26>
 800b812:	3301      	adds	r3, #1
 800b814:	6033      	str	r3, [r6, #0]
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	0699      	lsls	r1, r3, #26
 800b81a:	bf42      	ittt	mi
 800b81c:	6833      	ldrmi	r3, [r6, #0]
 800b81e:	3302      	addmi	r3, #2
 800b820:	6033      	strmi	r3, [r6, #0]
 800b822:	6825      	ldr	r5, [r4, #0]
 800b824:	f015 0506 	ands.w	r5, r5, #6
 800b828:	d106      	bne.n	800b838 <_printf_common+0x48>
 800b82a:	f104 0a19 	add.w	sl, r4, #25
 800b82e:	68e3      	ldr	r3, [r4, #12]
 800b830:	6832      	ldr	r2, [r6, #0]
 800b832:	1a9b      	subs	r3, r3, r2
 800b834:	42ab      	cmp	r3, r5
 800b836:	dc26      	bgt.n	800b886 <_printf_common+0x96>
 800b838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b83c:	1e13      	subs	r3, r2, #0
 800b83e:	6822      	ldr	r2, [r4, #0]
 800b840:	bf18      	it	ne
 800b842:	2301      	movne	r3, #1
 800b844:	0692      	lsls	r2, r2, #26
 800b846:	d42b      	bmi.n	800b8a0 <_printf_common+0xb0>
 800b848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b84c:	4649      	mov	r1, r9
 800b84e:	4638      	mov	r0, r7
 800b850:	47c0      	blx	r8
 800b852:	3001      	adds	r0, #1
 800b854:	d01e      	beq.n	800b894 <_printf_common+0xa4>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	68e5      	ldr	r5, [r4, #12]
 800b85a:	6832      	ldr	r2, [r6, #0]
 800b85c:	f003 0306 	and.w	r3, r3, #6
 800b860:	2b04      	cmp	r3, #4
 800b862:	bf08      	it	eq
 800b864:	1aad      	subeq	r5, r5, r2
 800b866:	68a3      	ldr	r3, [r4, #8]
 800b868:	6922      	ldr	r2, [r4, #16]
 800b86a:	bf0c      	ite	eq
 800b86c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b870:	2500      	movne	r5, #0
 800b872:	4293      	cmp	r3, r2
 800b874:	bfc4      	itt	gt
 800b876:	1a9b      	subgt	r3, r3, r2
 800b878:	18ed      	addgt	r5, r5, r3
 800b87a:	2600      	movs	r6, #0
 800b87c:	341a      	adds	r4, #26
 800b87e:	42b5      	cmp	r5, r6
 800b880:	d11a      	bne.n	800b8b8 <_printf_common+0xc8>
 800b882:	2000      	movs	r0, #0
 800b884:	e008      	b.n	800b898 <_printf_common+0xa8>
 800b886:	2301      	movs	r3, #1
 800b888:	4652      	mov	r2, sl
 800b88a:	4649      	mov	r1, r9
 800b88c:	4638      	mov	r0, r7
 800b88e:	47c0      	blx	r8
 800b890:	3001      	adds	r0, #1
 800b892:	d103      	bne.n	800b89c <_printf_common+0xac>
 800b894:	f04f 30ff 	mov.w	r0, #4294967295
 800b898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89c:	3501      	adds	r5, #1
 800b89e:	e7c6      	b.n	800b82e <_printf_common+0x3e>
 800b8a0:	18e1      	adds	r1, r4, r3
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	2030      	movs	r0, #48	; 0x30
 800b8a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b8aa:	4422      	add	r2, r4
 800b8ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b8b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b8b4:	3302      	adds	r3, #2
 800b8b6:	e7c7      	b.n	800b848 <_printf_common+0x58>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	4622      	mov	r2, r4
 800b8bc:	4649      	mov	r1, r9
 800b8be:	4638      	mov	r0, r7
 800b8c0:	47c0      	blx	r8
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	d0e6      	beq.n	800b894 <_printf_common+0xa4>
 800b8c6:	3601      	adds	r6, #1
 800b8c8:	e7d9      	b.n	800b87e <_printf_common+0x8e>
	...

0800b8cc <_printf_i>:
 800b8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8d0:	7e0f      	ldrb	r7, [r1, #24]
 800b8d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b8d4:	2f78      	cmp	r7, #120	; 0x78
 800b8d6:	4691      	mov	r9, r2
 800b8d8:	4680      	mov	r8, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	469a      	mov	sl, r3
 800b8de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b8e2:	d807      	bhi.n	800b8f4 <_printf_i+0x28>
 800b8e4:	2f62      	cmp	r7, #98	; 0x62
 800b8e6:	d80a      	bhi.n	800b8fe <_printf_i+0x32>
 800b8e8:	2f00      	cmp	r7, #0
 800b8ea:	f000 80d8 	beq.w	800ba9e <_printf_i+0x1d2>
 800b8ee:	2f58      	cmp	r7, #88	; 0x58
 800b8f0:	f000 80a3 	beq.w	800ba3a <_printf_i+0x16e>
 800b8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b8fc:	e03a      	b.n	800b974 <_printf_i+0xa8>
 800b8fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b902:	2b15      	cmp	r3, #21
 800b904:	d8f6      	bhi.n	800b8f4 <_printf_i+0x28>
 800b906:	a101      	add	r1, pc, #4	; (adr r1, 800b90c <_printf_i+0x40>)
 800b908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b90c:	0800b965 	.word	0x0800b965
 800b910:	0800b979 	.word	0x0800b979
 800b914:	0800b8f5 	.word	0x0800b8f5
 800b918:	0800b8f5 	.word	0x0800b8f5
 800b91c:	0800b8f5 	.word	0x0800b8f5
 800b920:	0800b8f5 	.word	0x0800b8f5
 800b924:	0800b979 	.word	0x0800b979
 800b928:	0800b8f5 	.word	0x0800b8f5
 800b92c:	0800b8f5 	.word	0x0800b8f5
 800b930:	0800b8f5 	.word	0x0800b8f5
 800b934:	0800b8f5 	.word	0x0800b8f5
 800b938:	0800ba85 	.word	0x0800ba85
 800b93c:	0800b9a9 	.word	0x0800b9a9
 800b940:	0800ba67 	.word	0x0800ba67
 800b944:	0800b8f5 	.word	0x0800b8f5
 800b948:	0800b8f5 	.word	0x0800b8f5
 800b94c:	0800baa7 	.word	0x0800baa7
 800b950:	0800b8f5 	.word	0x0800b8f5
 800b954:	0800b9a9 	.word	0x0800b9a9
 800b958:	0800b8f5 	.word	0x0800b8f5
 800b95c:	0800b8f5 	.word	0x0800b8f5
 800b960:	0800ba6f 	.word	0x0800ba6f
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	1d1a      	adds	r2, r3, #4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	602a      	str	r2, [r5, #0]
 800b96c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b974:	2301      	movs	r3, #1
 800b976:	e0a3      	b.n	800bac0 <_printf_i+0x1f4>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	6829      	ldr	r1, [r5, #0]
 800b97c:	0606      	lsls	r6, r0, #24
 800b97e:	f101 0304 	add.w	r3, r1, #4
 800b982:	d50a      	bpl.n	800b99a <_printf_i+0xce>
 800b984:	680e      	ldr	r6, [r1, #0]
 800b986:	602b      	str	r3, [r5, #0]
 800b988:	2e00      	cmp	r6, #0
 800b98a:	da03      	bge.n	800b994 <_printf_i+0xc8>
 800b98c:	232d      	movs	r3, #45	; 0x2d
 800b98e:	4276      	negs	r6, r6
 800b990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b994:	485e      	ldr	r0, [pc, #376]	; (800bb10 <_printf_i+0x244>)
 800b996:	230a      	movs	r3, #10
 800b998:	e019      	b.n	800b9ce <_printf_i+0x102>
 800b99a:	680e      	ldr	r6, [r1, #0]
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b9a2:	bf18      	it	ne
 800b9a4:	b236      	sxthne	r6, r6
 800b9a6:	e7ef      	b.n	800b988 <_printf_i+0xbc>
 800b9a8:	682b      	ldr	r3, [r5, #0]
 800b9aa:	6820      	ldr	r0, [r4, #0]
 800b9ac:	1d19      	adds	r1, r3, #4
 800b9ae:	6029      	str	r1, [r5, #0]
 800b9b0:	0601      	lsls	r1, r0, #24
 800b9b2:	d501      	bpl.n	800b9b8 <_printf_i+0xec>
 800b9b4:	681e      	ldr	r6, [r3, #0]
 800b9b6:	e002      	b.n	800b9be <_printf_i+0xf2>
 800b9b8:	0646      	lsls	r6, r0, #25
 800b9ba:	d5fb      	bpl.n	800b9b4 <_printf_i+0xe8>
 800b9bc:	881e      	ldrh	r6, [r3, #0]
 800b9be:	4854      	ldr	r0, [pc, #336]	; (800bb10 <_printf_i+0x244>)
 800b9c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b9c2:	bf0c      	ite	eq
 800b9c4:	2308      	moveq	r3, #8
 800b9c6:	230a      	movne	r3, #10
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b9ce:	6865      	ldr	r5, [r4, #4]
 800b9d0:	60a5      	str	r5, [r4, #8]
 800b9d2:	2d00      	cmp	r5, #0
 800b9d4:	bfa2      	ittt	ge
 800b9d6:	6821      	ldrge	r1, [r4, #0]
 800b9d8:	f021 0104 	bicge.w	r1, r1, #4
 800b9dc:	6021      	strge	r1, [r4, #0]
 800b9de:	b90e      	cbnz	r6, 800b9e4 <_printf_i+0x118>
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	d04d      	beq.n	800ba80 <_printf_i+0x1b4>
 800b9e4:	4615      	mov	r5, r2
 800b9e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b9ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b9ee:	5dc7      	ldrb	r7, [r0, r7]
 800b9f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b9f4:	4637      	mov	r7, r6
 800b9f6:	42bb      	cmp	r3, r7
 800b9f8:	460e      	mov	r6, r1
 800b9fa:	d9f4      	bls.n	800b9e6 <_printf_i+0x11a>
 800b9fc:	2b08      	cmp	r3, #8
 800b9fe:	d10b      	bne.n	800ba18 <_printf_i+0x14c>
 800ba00:	6823      	ldr	r3, [r4, #0]
 800ba02:	07de      	lsls	r6, r3, #31
 800ba04:	d508      	bpl.n	800ba18 <_printf_i+0x14c>
 800ba06:	6923      	ldr	r3, [r4, #16]
 800ba08:	6861      	ldr	r1, [r4, #4]
 800ba0a:	4299      	cmp	r1, r3
 800ba0c:	bfde      	ittt	le
 800ba0e:	2330      	movle	r3, #48	; 0x30
 800ba10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ba14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ba18:	1b52      	subs	r2, r2, r5
 800ba1a:	6122      	str	r2, [r4, #16]
 800ba1c:	f8cd a000 	str.w	sl, [sp]
 800ba20:	464b      	mov	r3, r9
 800ba22:	aa03      	add	r2, sp, #12
 800ba24:	4621      	mov	r1, r4
 800ba26:	4640      	mov	r0, r8
 800ba28:	f7ff fee2 	bl	800b7f0 <_printf_common>
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	d14c      	bne.n	800baca <_printf_i+0x1fe>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	b004      	add	sp, #16
 800ba36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba3a:	4835      	ldr	r0, [pc, #212]	; (800bb10 <_printf_i+0x244>)
 800ba3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ba40:	6829      	ldr	r1, [r5, #0]
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ba48:	6029      	str	r1, [r5, #0]
 800ba4a:	061d      	lsls	r5, r3, #24
 800ba4c:	d514      	bpl.n	800ba78 <_printf_i+0x1ac>
 800ba4e:	07df      	lsls	r7, r3, #31
 800ba50:	bf44      	itt	mi
 800ba52:	f043 0320 	orrmi.w	r3, r3, #32
 800ba56:	6023      	strmi	r3, [r4, #0]
 800ba58:	b91e      	cbnz	r6, 800ba62 <_printf_i+0x196>
 800ba5a:	6823      	ldr	r3, [r4, #0]
 800ba5c:	f023 0320 	bic.w	r3, r3, #32
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	2310      	movs	r3, #16
 800ba64:	e7b0      	b.n	800b9c8 <_printf_i+0xfc>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	f043 0320 	orr.w	r3, r3, #32
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	2378      	movs	r3, #120	; 0x78
 800ba70:	4828      	ldr	r0, [pc, #160]	; (800bb14 <_printf_i+0x248>)
 800ba72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba76:	e7e3      	b.n	800ba40 <_printf_i+0x174>
 800ba78:	0659      	lsls	r1, r3, #25
 800ba7a:	bf48      	it	mi
 800ba7c:	b2b6      	uxthmi	r6, r6
 800ba7e:	e7e6      	b.n	800ba4e <_printf_i+0x182>
 800ba80:	4615      	mov	r5, r2
 800ba82:	e7bb      	b.n	800b9fc <_printf_i+0x130>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	6826      	ldr	r6, [r4, #0]
 800ba88:	6961      	ldr	r1, [r4, #20]
 800ba8a:	1d18      	adds	r0, r3, #4
 800ba8c:	6028      	str	r0, [r5, #0]
 800ba8e:	0635      	lsls	r5, r6, #24
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	d501      	bpl.n	800ba98 <_printf_i+0x1cc>
 800ba94:	6019      	str	r1, [r3, #0]
 800ba96:	e002      	b.n	800ba9e <_printf_i+0x1d2>
 800ba98:	0670      	lsls	r0, r6, #25
 800ba9a:	d5fb      	bpl.n	800ba94 <_printf_i+0x1c8>
 800ba9c:	8019      	strh	r1, [r3, #0]
 800ba9e:	2300      	movs	r3, #0
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	4615      	mov	r5, r2
 800baa4:	e7ba      	b.n	800ba1c <_printf_i+0x150>
 800baa6:	682b      	ldr	r3, [r5, #0]
 800baa8:	1d1a      	adds	r2, r3, #4
 800baaa:	602a      	str	r2, [r5, #0]
 800baac:	681d      	ldr	r5, [r3, #0]
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	2100      	movs	r1, #0
 800bab2:	4628      	mov	r0, r5
 800bab4:	f7f4 fbbc 	bl	8000230 <memchr>
 800bab8:	b108      	cbz	r0, 800babe <_printf_i+0x1f2>
 800baba:	1b40      	subs	r0, r0, r5
 800babc:	6060      	str	r0, [r4, #4]
 800babe:	6863      	ldr	r3, [r4, #4]
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	2300      	movs	r3, #0
 800bac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bac8:	e7a8      	b.n	800ba1c <_printf_i+0x150>
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	462a      	mov	r2, r5
 800bace:	4649      	mov	r1, r9
 800bad0:	4640      	mov	r0, r8
 800bad2:	47d0      	blx	sl
 800bad4:	3001      	adds	r0, #1
 800bad6:	d0ab      	beq.n	800ba30 <_printf_i+0x164>
 800bad8:	6823      	ldr	r3, [r4, #0]
 800bada:	079b      	lsls	r3, r3, #30
 800badc:	d413      	bmi.n	800bb06 <_printf_i+0x23a>
 800bade:	68e0      	ldr	r0, [r4, #12]
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	4298      	cmp	r0, r3
 800bae4:	bfb8      	it	lt
 800bae6:	4618      	movlt	r0, r3
 800bae8:	e7a4      	b.n	800ba34 <_printf_i+0x168>
 800baea:	2301      	movs	r3, #1
 800baec:	4632      	mov	r2, r6
 800baee:	4649      	mov	r1, r9
 800baf0:	4640      	mov	r0, r8
 800baf2:	47d0      	blx	sl
 800baf4:	3001      	adds	r0, #1
 800baf6:	d09b      	beq.n	800ba30 <_printf_i+0x164>
 800baf8:	3501      	adds	r5, #1
 800bafa:	68e3      	ldr	r3, [r4, #12]
 800bafc:	9903      	ldr	r1, [sp, #12]
 800bafe:	1a5b      	subs	r3, r3, r1
 800bb00:	42ab      	cmp	r3, r5
 800bb02:	dcf2      	bgt.n	800baea <_printf_i+0x21e>
 800bb04:	e7eb      	b.n	800bade <_printf_i+0x212>
 800bb06:	2500      	movs	r5, #0
 800bb08:	f104 0619 	add.w	r6, r4, #25
 800bb0c:	e7f5      	b.n	800bafa <_printf_i+0x22e>
 800bb0e:	bf00      	nop
 800bb10:	0800f53e 	.word	0x0800f53e
 800bb14:	0800f54f 	.word	0x0800f54f

0800bb18 <iprintf>:
 800bb18:	b40f      	push	{r0, r1, r2, r3}
 800bb1a:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <iprintf+0x2c>)
 800bb1c:	b513      	push	{r0, r1, r4, lr}
 800bb1e:	681c      	ldr	r4, [r3, #0]
 800bb20:	b124      	cbz	r4, 800bb2c <iprintf+0x14>
 800bb22:	69a3      	ldr	r3, [r4, #24]
 800bb24:	b913      	cbnz	r3, 800bb2c <iprintf+0x14>
 800bb26:	4620      	mov	r0, r4
 800bb28:	f001 f92e 	bl	800cd88 <__sinit>
 800bb2c:	ab05      	add	r3, sp, #20
 800bb2e:	9a04      	ldr	r2, [sp, #16]
 800bb30:	68a1      	ldr	r1, [r4, #8]
 800bb32:	9301      	str	r3, [sp, #4]
 800bb34:	4620      	mov	r0, r4
 800bb36:	f001 fe0f 	bl	800d758 <_vfiprintf_r>
 800bb3a:	b002      	add	sp, #8
 800bb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb40:	b004      	add	sp, #16
 800bb42:	4770      	bx	lr
 800bb44:	20000010 	.word	0x20000010

0800bb48 <_puts_r>:
 800bb48:	b570      	push	{r4, r5, r6, lr}
 800bb4a:	460e      	mov	r6, r1
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	b118      	cbz	r0, 800bb58 <_puts_r+0x10>
 800bb50:	6983      	ldr	r3, [r0, #24]
 800bb52:	b90b      	cbnz	r3, 800bb58 <_puts_r+0x10>
 800bb54:	f001 f918 	bl	800cd88 <__sinit>
 800bb58:	69ab      	ldr	r3, [r5, #24]
 800bb5a:	68ac      	ldr	r4, [r5, #8]
 800bb5c:	b913      	cbnz	r3, 800bb64 <_puts_r+0x1c>
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f001 f912 	bl	800cd88 <__sinit>
 800bb64:	4b2c      	ldr	r3, [pc, #176]	; (800bc18 <_puts_r+0xd0>)
 800bb66:	429c      	cmp	r4, r3
 800bb68:	d120      	bne.n	800bbac <_puts_r+0x64>
 800bb6a:	686c      	ldr	r4, [r5, #4]
 800bb6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb6e:	07db      	lsls	r3, r3, #31
 800bb70:	d405      	bmi.n	800bb7e <_puts_r+0x36>
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	0598      	lsls	r0, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_puts_r+0x36>
 800bb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb7a:	f001 f9a8 	bl	800cece <__retarget_lock_acquire_recursive>
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	0719      	lsls	r1, r3, #28
 800bb82:	d51d      	bpl.n	800bbc0 <_puts_r+0x78>
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	b1db      	cbz	r3, 800bbc0 <_puts_r+0x78>
 800bb88:	3e01      	subs	r6, #1
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bb90:	3b01      	subs	r3, #1
 800bb92:	60a3      	str	r3, [r4, #8]
 800bb94:	bb39      	cbnz	r1, 800bbe6 <_puts_r+0x9e>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	da38      	bge.n	800bc0c <_puts_r+0xc4>
 800bb9a:	4622      	mov	r2, r4
 800bb9c:	210a      	movs	r1, #10
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f000 f89c 	bl	800bcdc <__swbuf_r>
 800bba4:	3001      	adds	r0, #1
 800bba6:	d011      	beq.n	800bbcc <_puts_r+0x84>
 800bba8:	250a      	movs	r5, #10
 800bbaa:	e011      	b.n	800bbd0 <_puts_r+0x88>
 800bbac:	4b1b      	ldr	r3, [pc, #108]	; (800bc1c <_puts_r+0xd4>)
 800bbae:	429c      	cmp	r4, r3
 800bbb0:	d101      	bne.n	800bbb6 <_puts_r+0x6e>
 800bbb2:	68ac      	ldr	r4, [r5, #8]
 800bbb4:	e7da      	b.n	800bb6c <_puts_r+0x24>
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	; (800bc20 <_puts_r+0xd8>)
 800bbb8:	429c      	cmp	r4, r3
 800bbba:	bf08      	it	eq
 800bbbc:	68ec      	ldreq	r4, [r5, #12]
 800bbbe:	e7d5      	b.n	800bb6c <_puts_r+0x24>
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f000 f8dc 	bl	800bd80 <__swsetup_r>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d0dd      	beq.n	800bb88 <_puts_r+0x40>
 800bbcc:	f04f 35ff 	mov.w	r5, #4294967295
 800bbd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bbd2:	07da      	lsls	r2, r3, #31
 800bbd4:	d405      	bmi.n	800bbe2 <_puts_r+0x9a>
 800bbd6:	89a3      	ldrh	r3, [r4, #12]
 800bbd8:	059b      	lsls	r3, r3, #22
 800bbda:	d402      	bmi.n	800bbe2 <_puts_r+0x9a>
 800bbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbde:	f001 f977 	bl	800ced0 <__retarget_lock_release_recursive>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	bd70      	pop	{r4, r5, r6, pc}
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	da04      	bge.n	800bbf4 <_puts_r+0xac>
 800bbea:	69a2      	ldr	r2, [r4, #24]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	dc06      	bgt.n	800bbfe <_puts_r+0xb6>
 800bbf0:	290a      	cmp	r1, #10
 800bbf2:	d004      	beq.n	800bbfe <_puts_r+0xb6>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	6022      	str	r2, [r4, #0]
 800bbfa:	7019      	strb	r1, [r3, #0]
 800bbfc:	e7c5      	b.n	800bb8a <_puts_r+0x42>
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4628      	mov	r0, r5
 800bc02:	f000 f86b 	bl	800bcdc <__swbuf_r>
 800bc06:	3001      	adds	r0, #1
 800bc08:	d1bf      	bne.n	800bb8a <_puts_r+0x42>
 800bc0a:	e7df      	b.n	800bbcc <_puts_r+0x84>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	250a      	movs	r5, #10
 800bc10:	1c5a      	adds	r2, r3, #1
 800bc12:	6022      	str	r2, [r4, #0]
 800bc14:	701d      	strb	r5, [r3, #0]
 800bc16:	e7db      	b.n	800bbd0 <_puts_r+0x88>
 800bc18:	0800f610 	.word	0x0800f610
 800bc1c:	0800f630 	.word	0x0800f630
 800bc20:	0800f5f0 	.word	0x0800f5f0

0800bc24 <puts>:
 800bc24:	4b02      	ldr	r3, [pc, #8]	; (800bc30 <puts+0xc>)
 800bc26:	4601      	mov	r1, r0
 800bc28:	6818      	ldr	r0, [r3, #0]
 800bc2a:	f7ff bf8d 	b.w	800bb48 <_puts_r>
 800bc2e:	bf00      	nop
 800bc30:	20000010 	.word	0x20000010

0800bc34 <_sbrk_r>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	4d06      	ldr	r5, [pc, #24]	; (800bc50 <_sbrk_r+0x1c>)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	602b      	str	r3, [r5, #0]
 800bc40:	f7f9 f97a 	bl	8004f38 <_sbrk>
 800bc44:	1c43      	adds	r3, r0, #1
 800bc46:	d102      	bne.n	800bc4e <_sbrk_r+0x1a>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	b103      	cbz	r3, 800bc4e <_sbrk_r+0x1a>
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	200008a4 	.word	0x200008a4

0800bc54 <_raise_r>:
 800bc54:	291f      	cmp	r1, #31
 800bc56:	b538      	push	{r3, r4, r5, lr}
 800bc58:	4604      	mov	r4, r0
 800bc5a:	460d      	mov	r5, r1
 800bc5c:	d904      	bls.n	800bc68 <_raise_r+0x14>
 800bc5e:	2316      	movs	r3, #22
 800bc60:	6003      	str	r3, [r0, #0]
 800bc62:	f04f 30ff 	mov.w	r0, #4294967295
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc6a:	b112      	cbz	r2, 800bc72 <_raise_r+0x1e>
 800bc6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc70:	b94b      	cbnz	r3, 800bc86 <_raise_r+0x32>
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 f830 	bl	800bcd8 <_getpid_r>
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc82:	f000 b817 	b.w	800bcb4 <_kill_r>
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d00a      	beq.n	800bca0 <_raise_r+0x4c>
 800bc8a:	1c59      	adds	r1, r3, #1
 800bc8c:	d103      	bne.n	800bc96 <_raise_r+0x42>
 800bc8e:	2316      	movs	r3, #22
 800bc90:	6003      	str	r3, [r0, #0]
 800bc92:	2001      	movs	r0, #1
 800bc94:	e7e7      	b.n	800bc66 <_raise_r+0x12>
 800bc96:	2400      	movs	r4, #0
 800bc98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	4798      	blx	r3
 800bca0:	2000      	movs	r0, #0
 800bca2:	e7e0      	b.n	800bc66 <_raise_r+0x12>

0800bca4 <raise>:
 800bca4:	4b02      	ldr	r3, [pc, #8]	; (800bcb0 <raise+0xc>)
 800bca6:	4601      	mov	r1, r0
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	f7ff bfd3 	b.w	800bc54 <_raise_r>
 800bcae:	bf00      	nop
 800bcb0:	20000010 	.word	0x20000010

0800bcb4 <_kill_r>:
 800bcb4:	b538      	push	{r3, r4, r5, lr}
 800bcb6:	4d07      	ldr	r5, [pc, #28]	; (800bcd4 <_kill_r+0x20>)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4604      	mov	r4, r0
 800bcbc:	4608      	mov	r0, r1
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	f7f9 f8b1 	bl	8004e28 <_kill>
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	d102      	bne.n	800bcd0 <_kill_r+0x1c>
 800bcca:	682b      	ldr	r3, [r5, #0]
 800bccc:	b103      	cbz	r3, 800bcd0 <_kill_r+0x1c>
 800bcce:	6023      	str	r3, [r4, #0]
 800bcd0:	bd38      	pop	{r3, r4, r5, pc}
 800bcd2:	bf00      	nop
 800bcd4:	200008a4 	.word	0x200008a4

0800bcd8 <_getpid_r>:
 800bcd8:	f7f9 b89e 	b.w	8004e18 <_getpid>

0800bcdc <__swbuf_r>:
 800bcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcde:	460e      	mov	r6, r1
 800bce0:	4614      	mov	r4, r2
 800bce2:	4605      	mov	r5, r0
 800bce4:	b118      	cbz	r0, 800bcee <__swbuf_r+0x12>
 800bce6:	6983      	ldr	r3, [r0, #24]
 800bce8:	b90b      	cbnz	r3, 800bcee <__swbuf_r+0x12>
 800bcea:	f001 f84d 	bl	800cd88 <__sinit>
 800bcee:	4b21      	ldr	r3, [pc, #132]	; (800bd74 <__swbuf_r+0x98>)
 800bcf0:	429c      	cmp	r4, r3
 800bcf2:	d12b      	bne.n	800bd4c <__swbuf_r+0x70>
 800bcf4:	686c      	ldr	r4, [r5, #4]
 800bcf6:	69a3      	ldr	r3, [r4, #24]
 800bcf8:	60a3      	str	r3, [r4, #8]
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	071a      	lsls	r2, r3, #28
 800bcfe:	d52f      	bpl.n	800bd60 <__swbuf_r+0x84>
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	b36b      	cbz	r3, 800bd60 <__swbuf_r+0x84>
 800bd04:	6923      	ldr	r3, [r4, #16]
 800bd06:	6820      	ldr	r0, [r4, #0]
 800bd08:	1ac0      	subs	r0, r0, r3
 800bd0a:	6963      	ldr	r3, [r4, #20]
 800bd0c:	b2f6      	uxtb	r6, r6
 800bd0e:	4283      	cmp	r3, r0
 800bd10:	4637      	mov	r7, r6
 800bd12:	dc04      	bgt.n	800bd1e <__swbuf_r+0x42>
 800bd14:	4621      	mov	r1, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	f000 ffa2 	bl	800cc60 <_fflush_r>
 800bd1c:	bb30      	cbnz	r0, 800bd6c <__swbuf_r+0x90>
 800bd1e:	68a3      	ldr	r3, [r4, #8]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	60a3      	str	r3, [r4, #8]
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	1c5a      	adds	r2, r3, #1
 800bd28:	6022      	str	r2, [r4, #0]
 800bd2a:	701e      	strb	r6, [r3, #0]
 800bd2c:	6963      	ldr	r3, [r4, #20]
 800bd2e:	3001      	adds	r0, #1
 800bd30:	4283      	cmp	r3, r0
 800bd32:	d004      	beq.n	800bd3e <__swbuf_r+0x62>
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	07db      	lsls	r3, r3, #31
 800bd38:	d506      	bpl.n	800bd48 <__swbuf_r+0x6c>
 800bd3a:	2e0a      	cmp	r6, #10
 800bd3c:	d104      	bne.n	800bd48 <__swbuf_r+0x6c>
 800bd3e:	4621      	mov	r1, r4
 800bd40:	4628      	mov	r0, r5
 800bd42:	f000 ff8d 	bl	800cc60 <_fflush_r>
 800bd46:	b988      	cbnz	r0, 800bd6c <__swbuf_r+0x90>
 800bd48:	4638      	mov	r0, r7
 800bd4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd4c:	4b0a      	ldr	r3, [pc, #40]	; (800bd78 <__swbuf_r+0x9c>)
 800bd4e:	429c      	cmp	r4, r3
 800bd50:	d101      	bne.n	800bd56 <__swbuf_r+0x7a>
 800bd52:	68ac      	ldr	r4, [r5, #8]
 800bd54:	e7cf      	b.n	800bcf6 <__swbuf_r+0x1a>
 800bd56:	4b09      	ldr	r3, [pc, #36]	; (800bd7c <__swbuf_r+0xa0>)
 800bd58:	429c      	cmp	r4, r3
 800bd5a:	bf08      	it	eq
 800bd5c:	68ec      	ldreq	r4, [r5, #12]
 800bd5e:	e7ca      	b.n	800bcf6 <__swbuf_r+0x1a>
 800bd60:	4621      	mov	r1, r4
 800bd62:	4628      	mov	r0, r5
 800bd64:	f000 f80c 	bl	800bd80 <__swsetup_r>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0cb      	beq.n	800bd04 <__swbuf_r+0x28>
 800bd6c:	f04f 37ff 	mov.w	r7, #4294967295
 800bd70:	e7ea      	b.n	800bd48 <__swbuf_r+0x6c>
 800bd72:	bf00      	nop
 800bd74:	0800f610 	.word	0x0800f610
 800bd78:	0800f630 	.word	0x0800f630
 800bd7c:	0800f5f0 	.word	0x0800f5f0

0800bd80 <__swsetup_r>:
 800bd80:	4b32      	ldr	r3, [pc, #200]	; (800be4c <__swsetup_r+0xcc>)
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	681d      	ldr	r5, [r3, #0]
 800bd86:	4606      	mov	r6, r0
 800bd88:	460c      	mov	r4, r1
 800bd8a:	b125      	cbz	r5, 800bd96 <__swsetup_r+0x16>
 800bd8c:	69ab      	ldr	r3, [r5, #24]
 800bd8e:	b913      	cbnz	r3, 800bd96 <__swsetup_r+0x16>
 800bd90:	4628      	mov	r0, r5
 800bd92:	f000 fff9 	bl	800cd88 <__sinit>
 800bd96:	4b2e      	ldr	r3, [pc, #184]	; (800be50 <__swsetup_r+0xd0>)
 800bd98:	429c      	cmp	r4, r3
 800bd9a:	d10f      	bne.n	800bdbc <__swsetup_r+0x3c>
 800bd9c:	686c      	ldr	r4, [r5, #4]
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bda4:	0719      	lsls	r1, r3, #28
 800bda6:	d42c      	bmi.n	800be02 <__swsetup_r+0x82>
 800bda8:	06dd      	lsls	r5, r3, #27
 800bdaa:	d411      	bmi.n	800bdd0 <__swsetup_r+0x50>
 800bdac:	2309      	movs	r3, #9
 800bdae:	6033      	str	r3, [r6, #0]
 800bdb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	e03e      	b.n	800be3a <__swsetup_r+0xba>
 800bdbc:	4b25      	ldr	r3, [pc, #148]	; (800be54 <__swsetup_r+0xd4>)
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d101      	bne.n	800bdc6 <__swsetup_r+0x46>
 800bdc2:	68ac      	ldr	r4, [r5, #8]
 800bdc4:	e7eb      	b.n	800bd9e <__swsetup_r+0x1e>
 800bdc6:	4b24      	ldr	r3, [pc, #144]	; (800be58 <__swsetup_r+0xd8>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	bf08      	it	eq
 800bdcc:	68ec      	ldreq	r4, [r5, #12]
 800bdce:	e7e6      	b.n	800bd9e <__swsetup_r+0x1e>
 800bdd0:	0758      	lsls	r0, r3, #29
 800bdd2:	d512      	bpl.n	800bdfa <__swsetup_r+0x7a>
 800bdd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdd6:	b141      	cbz	r1, 800bdea <__swsetup_r+0x6a>
 800bdd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bddc:	4299      	cmp	r1, r3
 800bdde:	d002      	beq.n	800bde6 <__swsetup_r+0x66>
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff f94f 	bl	800b084 <_free_r>
 800bde6:	2300      	movs	r3, #0
 800bde8:	6363      	str	r3, [r4, #52]	; 0x34
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdf0:	81a3      	strh	r3, [r4, #12]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	6063      	str	r3, [r4, #4]
 800bdf6:	6923      	ldr	r3, [r4, #16]
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	f043 0308 	orr.w	r3, r3, #8
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	b94b      	cbnz	r3, 800be1a <__swsetup_r+0x9a>
 800be06:	89a3      	ldrh	r3, [r4, #12]
 800be08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be10:	d003      	beq.n	800be1a <__swsetup_r+0x9a>
 800be12:	4621      	mov	r1, r4
 800be14:	4630      	mov	r0, r6
 800be16:	f001 f881 	bl	800cf1c <__smakebuf_r>
 800be1a:	89a0      	ldrh	r0, [r4, #12]
 800be1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be20:	f010 0301 	ands.w	r3, r0, #1
 800be24:	d00a      	beq.n	800be3c <__swsetup_r+0xbc>
 800be26:	2300      	movs	r3, #0
 800be28:	60a3      	str	r3, [r4, #8]
 800be2a:	6963      	ldr	r3, [r4, #20]
 800be2c:	425b      	negs	r3, r3
 800be2e:	61a3      	str	r3, [r4, #24]
 800be30:	6923      	ldr	r3, [r4, #16]
 800be32:	b943      	cbnz	r3, 800be46 <__swsetup_r+0xc6>
 800be34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be38:	d1ba      	bne.n	800bdb0 <__swsetup_r+0x30>
 800be3a:	bd70      	pop	{r4, r5, r6, pc}
 800be3c:	0781      	lsls	r1, r0, #30
 800be3e:	bf58      	it	pl
 800be40:	6963      	ldrpl	r3, [r4, #20]
 800be42:	60a3      	str	r3, [r4, #8]
 800be44:	e7f4      	b.n	800be30 <__swsetup_r+0xb0>
 800be46:	2000      	movs	r0, #0
 800be48:	e7f7      	b.n	800be3a <__swsetup_r+0xba>
 800be4a:	bf00      	nop
 800be4c:	20000010 	.word	0x20000010
 800be50:	0800f610 	.word	0x0800f610
 800be54:	0800f630 	.word	0x0800f630
 800be58:	0800f5f0 	.word	0x0800f5f0

0800be5c <quorem>:
 800be5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be60:	6903      	ldr	r3, [r0, #16]
 800be62:	690c      	ldr	r4, [r1, #16]
 800be64:	42a3      	cmp	r3, r4
 800be66:	4607      	mov	r7, r0
 800be68:	f2c0 8081 	blt.w	800bf6e <quorem+0x112>
 800be6c:	3c01      	subs	r4, #1
 800be6e:	f101 0814 	add.w	r8, r1, #20
 800be72:	f100 0514 	add.w	r5, r0, #20
 800be76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be7a:	9301      	str	r3, [sp, #4]
 800be7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be84:	3301      	adds	r3, #1
 800be86:	429a      	cmp	r2, r3
 800be88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800be8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be90:	fbb2 f6f3 	udiv	r6, r2, r3
 800be94:	d331      	bcc.n	800befa <quorem+0x9e>
 800be96:	f04f 0e00 	mov.w	lr, #0
 800be9a:	4640      	mov	r0, r8
 800be9c:	46ac      	mov	ip, r5
 800be9e:	46f2      	mov	sl, lr
 800bea0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bea4:	b293      	uxth	r3, r2
 800bea6:	fb06 e303 	mla	r3, r6, r3, lr
 800beaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800beae:	b29b      	uxth	r3, r3
 800beb0:	ebaa 0303 	sub.w	r3, sl, r3
 800beb4:	f8dc a000 	ldr.w	sl, [ip]
 800beb8:	0c12      	lsrs	r2, r2, #16
 800beba:	fa13 f38a 	uxtah	r3, r3, sl
 800bebe:	fb06 e202 	mla	r2, r6, r2, lr
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	9b00      	ldr	r3, [sp, #0]
 800bec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800beca:	b292      	uxth	r2, r2
 800becc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bed4:	f8bd 3000 	ldrh.w	r3, [sp]
 800bed8:	4581      	cmp	r9, r0
 800beda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bede:	f84c 3b04 	str.w	r3, [ip], #4
 800bee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bee6:	d2db      	bcs.n	800bea0 <quorem+0x44>
 800bee8:	f855 300b 	ldr.w	r3, [r5, fp]
 800beec:	b92b      	cbnz	r3, 800befa <quorem+0x9e>
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	3b04      	subs	r3, #4
 800bef2:	429d      	cmp	r5, r3
 800bef4:	461a      	mov	r2, r3
 800bef6:	d32e      	bcc.n	800bf56 <quorem+0xfa>
 800bef8:	613c      	str	r4, [r7, #16]
 800befa:	4638      	mov	r0, r7
 800befc:	f001 faea 	bl	800d4d4 <__mcmp>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	db24      	blt.n	800bf4e <quorem+0xf2>
 800bf04:	3601      	adds	r6, #1
 800bf06:	4628      	mov	r0, r5
 800bf08:	f04f 0c00 	mov.w	ip, #0
 800bf0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bf10:	f8d0 e000 	ldr.w	lr, [r0]
 800bf14:	b293      	uxth	r3, r2
 800bf16:	ebac 0303 	sub.w	r3, ip, r3
 800bf1a:	0c12      	lsrs	r2, r2, #16
 800bf1c:	fa13 f38e 	uxtah	r3, r3, lr
 800bf20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bf24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf2e:	45c1      	cmp	r9, r8
 800bf30:	f840 3b04 	str.w	r3, [r0], #4
 800bf34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bf38:	d2e8      	bcs.n	800bf0c <quorem+0xb0>
 800bf3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf42:	b922      	cbnz	r2, 800bf4e <quorem+0xf2>
 800bf44:	3b04      	subs	r3, #4
 800bf46:	429d      	cmp	r5, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	d30a      	bcc.n	800bf62 <quorem+0x106>
 800bf4c:	613c      	str	r4, [r7, #16]
 800bf4e:	4630      	mov	r0, r6
 800bf50:	b003      	add	sp, #12
 800bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf56:	6812      	ldr	r2, [r2, #0]
 800bf58:	3b04      	subs	r3, #4
 800bf5a:	2a00      	cmp	r2, #0
 800bf5c:	d1cc      	bne.n	800bef8 <quorem+0x9c>
 800bf5e:	3c01      	subs	r4, #1
 800bf60:	e7c7      	b.n	800bef2 <quorem+0x96>
 800bf62:	6812      	ldr	r2, [r2, #0]
 800bf64:	3b04      	subs	r3, #4
 800bf66:	2a00      	cmp	r2, #0
 800bf68:	d1f0      	bne.n	800bf4c <quorem+0xf0>
 800bf6a:	3c01      	subs	r4, #1
 800bf6c:	e7eb      	b.n	800bf46 <quorem+0xea>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	e7ee      	b.n	800bf50 <quorem+0xf4>
 800bf72:	0000      	movs	r0, r0
 800bf74:	0000      	movs	r0, r0
	...

0800bf78 <_dtoa_r>:
 800bf78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7c:	ed2d 8b04 	vpush	{d8-d9}
 800bf80:	ec57 6b10 	vmov	r6, r7, d0
 800bf84:	b093      	sub	sp, #76	; 0x4c
 800bf86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bf88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bf8c:	9106      	str	r1, [sp, #24]
 800bf8e:	ee10 aa10 	vmov	sl, s0
 800bf92:	4604      	mov	r4, r0
 800bf94:	9209      	str	r2, [sp, #36]	; 0x24
 800bf96:	930c      	str	r3, [sp, #48]	; 0x30
 800bf98:	46bb      	mov	fp, r7
 800bf9a:	b975      	cbnz	r5, 800bfba <_dtoa_r+0x42>
 800bf9c:	2010      	movs	r0, #16
 800bf9e:	f7ff f861 	bl	800b064 <malloc>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	6260      	str	r0, [r4, #36]	; 0x24
 800bfa6:	b920      	cbnz	r0, 800bfb2 <_dtoa_r+0x3a>
 800bfa8:	4ba7      	ldr	r3, [pc, #668]	; (800c248 <_dtoa_r+0x2d0>)
 800bfaa:	21ea      	movs	r1, #234	; 0xea
 800bfac:	48a7      	ldr	r0, [pc, #668]	; (800c24c <_dtoa_r+0x2d4>)
 800bfae:	f001 fd59 	bl	800da64 <__assert_func>
 800bfb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bfb6:	6005      	str	r5, [r0, #0]
 800bfb8:	60c5      	str	r5, [r0, #12]
 800bfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfbc:	6819      	ldr	r1, [r3, #0]
 800bfbe:	b151      	cbz	r1, 800bfd6 <_dtoa_r+0x5e>
 800bfc0:	685a      	ldr	r2, [r3, #4]
 800bfc2:	604a      	str	r2, [r1, #4]
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	4093      	lsls	r3, r2
 800bfc8:	608b      	str	r3, [r1, #8]
 800bfca:	4620      	mov	r0, r4
 800bfcc:	f001 f840 	bl	800d050 <_Bfree>
 800bfd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	1e3b      	subs	r3, r7, #0
 800bfd8:	bfaa      	itet	ge
 800bfda:	2300      	movge	r3, #0
 800bfdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bfe0:	f8c8 3000 	strge.w	r3, [r8]
 800bfe4:	4b9a      	ldr	r3, [pc, #616]	; (800c250 <_dtoa_r+0x2d8>)
 800bfe6:	bfbc      	itt	lt
 800bfe8:	2201      	movlt	r2, #1
 800bfea:	f8c8 2000 	strlt.w	r2, [r8]
 800bfee:	ea33 030b 	bics.w	r3, r3, fp
 800bff2:	d11b      	bne.n	800c02c <_dtoa_r+0xb4>
 800bff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bff6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bffa:	6013      	str	r3, [r2, #0]
 800bffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c000:	4333      	orrs	r3, r6
 800c002:	f000 8592 	beq.w	800cb2a <_dtoa_r+0xbb2>
 800c006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c008:	b963      	cbnz	r3, 800c024 <_dtoa_r+0xac>
 800c00a:	4b92      	ldr	r3, [pc, #584]	; (800c254 <_dtoa_r+0x2dc>)
 800c00c:	e022      	b.n	800c054 <_dtoa_r+0xdc>
 800c00e:	4b92      	ldr	r3, [pc, #584]	; (800c258 <_dtoa_r+0x2e0>)
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	3308      	adds	r3, #8
 800c014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c016:	6013      	str	r3, [r2, #0]
 800c018:	9801      	ldr	r0, [sp, #4]
 800c01a:	b013      	add	sp, #76	; 0x4c
 800c01c:	ecbd 8b04 	vpop	{d8-d9}
 800c020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c024:	4b8b      	ldr	r3, [pc, #556]	; (800c254 <_dtoa_r+0x2dc>)
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	3303      	adds	r3, #3
 800c02a:	e7f3      	b.n	800c014 <_dtoa_r+0x9c>
 800c02c:	2200      	movs	r2, #0
 800c02e:	2300      	movs	r3, #0
 800c030:	4650      	mov	r0, sl
 800c032:	4659      	mov	r1, fp
 800c034:	f7f4 fd70 	bl	8000b18 <__aeabi_dcmpeq>
 800c038:	ec4b ab19 	vmov	d9, sl, fp
 800c03c:	4680      	mov	r8, r0
 800c03e:	b158      	cbz	r0, 800c058 <_dtoa_r+0xe0>
 800c040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c042:	2301      	movs	r3, #1
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 856b 	beq.w	800cb24 <_dtoa_r+0xbac>
 800c04e:	4883      	ldr	r0, [pc, #524]	; (800c25c <_dtoa_r+0x2e4>)
 800c050:	6018      	str	r0, [r3, #0]
 800c052:	1e43      	subs	r3, r0, #1
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	e7df      	b.n	800c018 <_dtoa_r+0xa0>
 800c058:	ec4b ab10 	vmov	d0, sl, fp
 800c05c:	aa10      	add	r2, sp, #64	; 0x40
 800c05e:	a911      	add	r1, sp, #68	; 0x44
 800c060:	4620      	mov	r0, r4
 800c062:	f001 fadd 	bl	800d620 <__d2b>
 800c066:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c06a:	ee08 0a10 	vmov	s16, r0
 800c06e:	2d00      	cmp	r5, #0
 800c070:	f000 8084 	beq.w	800c17c <_dtoa_r+0x204>
 800c074:	ee19 3a90 	vmov	r3, s19
 800c078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c07c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c080:	4656      	mov	r6, sl
 800c082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c08a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c08e:	4b74      	ldr	r3, [pc, #464]	; (800c260 <_dtoa_r+0x2e8>)
 800c090:	2200      	movs	r2, #0
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 f91f 	bl	80002d8 <__aeabi_dsub>
 800c09a:	a365      	add	r3, pc, #404	; (adr r3, 800c230 <_dtoa_r+0x2b8>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 fad2 	bl	8000648 <__aeabi_dmul>
 800c0a4:	a364      	add	r3, pc, #400	; (adr r3, 800c238 <_dtoa_r+0x2c0>)
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	f7f4 f917 	bl	80002dc <__adddf3>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	460f      	mov	r7, r1
 800c0b4:	f7f4 fa5e 	bl	8000574 <__aeabi_i2d>
 800c0b8:	a361      	add	r3, pc, #388	; (adr r3, 800c240 <_dtoa_r+0x2c8>)
 800c0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0be:	f7f4 fac3 	bl	8000648 <__aeabi_dmul>
 800c0c2:	4602      	mov	r2, r0
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	4630      	mov	r0, r6
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	f7f4 f907 	bl	80002dc <__adddf3>
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460f      	mov	r7, r1
 800c0d2:	f7f4 fd69 	bl	8000ba8 <__aeabi_d2iz>
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	9000      	str	r0, [sp, #0]
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4630      	mov	r0, r6
 800c0de:	4639      	mov	r1, r7
 800c0e0:	f7f4 fd24 	bl	8000b2c <__aeabi_dcmplt>
 800c0e4:	b150      	cbz	r0, 800c0fc <_dtoa_r+0x184>
 800c0e6:	9800      	ldr	r0, [sp, #0]
 800c0e8:	f7f4 fa44 	bl	8000574 <__aeabi_i2d>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f7f4 fd12 	bl	8000b18 <__aeabi_dcmpeq>
 800c0f4:	b910      	cbnz	r0, 800c0fc <_dtoa_r+0x184>
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	9b00      	ldr	r3, [sp, #0]
 800c0fe:	2b16      	cmp	r3, #22
 800c100:	d85a      	bhi.n	800c1b8 <_dtoa_r+0x240>
 800c102:	9a00      	ldr	r2, [sp, #0]
 800c104:	4b57      	ldr	r3, [pc, #348]	; (800c264 <_dtoa_r+0x2ec>)
 800c106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10e:	ec51 0b19 	vmov	r0, r1, d9
 800c112:	f7f4 fd0b 	bl	8000b2c <__aeabi_dcmplt>
 800c116:	2800      	cmp	r0, #0
 800c118:	d050      	beq.n	800c1bc <_dtoa_r+0x244>
 800c11a:	9b00      	ldr	r3, [sp, #0]
 800c11c:	3b01      	subs	r3, #1
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	2300      	movs	r3, #0
 800c122:	930b      	str	r3, [sp, #44]	; 0x2c
 800c124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c126:	1b5d      	subs	r5, r3, r5
 800c128:	1e6b      	subs	r3, r5, #1
 800c12a:	9305      	str	r3, [sp, #20]
 800c12c:	bf45      	ittet	mi
 800c12e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c132:	9304      	strmi	r3, [sp, #16]
 800c134:	2300      	movpl	r3, #0
 800c136:	2300      	movmi	r3, #0
 800c138:	bf4c      	ite	mi
 800c13a:	9305      	strmi	r3, [sp, #20]
 800c13c:	9304      	strpl	r3, [sp, #16]
 800c13e:	9b00      	ldr	r3, [sp, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	db3d      	blt.n	800c1c0 <_dtoa_r+0x248>
 800c144:	9b05      	ldr	r3, [sp, #20]
 800c146:	9a00      	ldr	r2, [sp, #0]
 800c148:	920a      	str	r2, [sp, #40]	; 0x28
 800c14a:	4413      	add	r3, r2
 800c14c:	9305      	str	r3, [sp, #20]
 800c14e:	2300      	movs	r3, #0
 800c150:	9307      	str	r3, [sp, #28]
 800c152:	9b06      	ldr	r3, [sp, #24]
 800c154:	2b09      	cmp	r3, #9
 800c156:	f200 8089 	bhi.w	800c26c <_dtoa_r+0x2f4>
 800c15a:	2b05      	cmp	r3, #5
 800c15c:	bfc4      	itt	gt
 800c15e:	3b04      	subgt	r3, #4
 800c160:	9306      	strgt	r3, [sp, #24]
 800c162:	9b06      	ldr	r3, [sp, #24]
 800c164:	f1a3 0302 	sub.w	r3, r3, #2
 800c168:	bfcc      	ite	gt
 800c16a:	2500      	movgt	r5, #0
 800c16c:	2501      	movle	r5, #1
 800c16e:	2b03      	cmp	r3, #3
 800c170:	f200 8087 	bhi.w	800c282 <_dtoa_r+0x30a>
 800c174:	e8df f003 	tbb	[pc, r3]
 800c178:	59383a2d 	.word	0x59383a2d
 800c17c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c180:	441d      	add	r5, r3
 800c182:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c186:	2b20      	cmp	r3, #32
 800c188:	bfc1      	itttt	gt
 800c18a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c18e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c192:	fa0b f303 	lslgt.w	r3, fp, r3
 800c196:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c19a:	bfda      	itte	le
 800c19c:	f1c3 0320 	rsble	r3, r3, #32
 800c1a0:	fa06 f003 	lslle.w	r0, r6, r3
 800c1a4:	4318      	orrgt	r0, r3
 800c1a6:	f7f4 f9d5 	bl	8000554 <__aeabi_ui2d>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	4606      	mov	r6, r0
 800c1ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c1b2:	3d01      	subs	r5, #1
 800c1b4:	930e      	str	r3, [sp, #56]	; 0x38
 800c1b6:	e76a      	b.n	800c08e <_dtoa_r+0x116>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e7b2      	b.n	800c122 <_dtoa_r+0x1aa>
 800c1bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1be:	e7b1      	b.n	800c124 <_dtoa_r+0x1ac>
 800c1c0:	9b04      	ldr	r3, [sp, #16]
 800c1c2:	9a00      	ldr	r2, [sp, #0]
 800c1c4:	1a9b      	subs	r3, r3, r2
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	4253      	negs	r3, r2
 800c1ca:	9307      	str	r3, [sp, #28]
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800c1d0:	e7bf      	b.n	800c152 <_dtoa_r+0x1da>
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	9308      	str	r3, [sp, #32]
 800c1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dc55      	bgt.n	800c288 <_dtoa_r+0x310>
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e6:	e00c      	b.n	800c202 <_dtoa_r+0x28a>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e7f3      	b.n	800c1d4 <_dtoa_r+0x25c>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1f0:	9308      	str	r3, [sp, #32]
 800c1f2:	9b00      	ldr	r3, [sp, #0]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	9303      	str	r3, [sp, #12]
 800c1fe:	bfb8      	it	lt
 800c200:	2301      	movlt	r3, #1
 800c202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c204:	2200      	movs	r2, #0
 800c206:	6042      	str	r2, [r0, #4]
 800c208:	2204      	movs	r2, #4
 800c20a:	f102 0614 	add.w	r6, r2, #20
 800c20e:	429e      	cmp	r6, r3
 800c210:	6841      	ldr	r1, [r0, #4]
 800c212:	d93d      	bls.n	800c290 <_dtoa_r+0x318>
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fedb 	bl	800cfd0 <_Balloc>
 800c21a:	9001      	str	r0, [sp, #4]
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d13b      	bne.n	800c298 <_dtoa_r+0x320>
 800c220:	4b11      	ldr	r3, [pc, #68]	; (800c268 <_dtoa_r+0x2f0>)
 800c222:	4602      	mov	r2, r0
 800c224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c228:	e6c0      	b.n	800bfac <_dtoa_r+0x34>
 800c22a:	2301      	movs	r3, #1
 800c22c:	e7df      	b.n	800c1ee <_dtoa_r+0x276>
 800c22e:	bf00      	nop
 800c230:	636f4361 	.word	0x636f4361
 800c234:	3fd287a7 	.word	0x3fd287a7
 800c238:	8b60c8b3 	.word	0x8b60c8b3
 800c23c:	3fc68a28 	.word	0x3fc68a28
 800c240:	509f79fb 	.word	0x509f79fb
 800c244:	3fd34413 	.word	0x3fd34413
 800c248:	0800f56d 	.word	0x0800f56d
 800c24c:	0800f584 	.word	0x0800f584
 800c250:	7ff00000 	.word	0x7ff00000
 800c254:	0800f569 	.word	0x0800f569
 800c258:	0800f560 	.word	0x0800f560
 800c25c:	0800f53d 	.word	0x0800f53d
 800c260:	3ff80000 	.word	0x3ff80000
 800c264:	0800f6d8 	.word	0x0800f6d8
 800c268:	0800f5df 	.word	0x0800f5df
 800c26c:	2501      	movs	r5, #1
 800c26e:	2300      	movs	r3, #0
 800c270:	9306      	str	r3, [sp, #24]
 800c272:	9508      	str	r5, [sp, #32]
 800c274:	f04f 33ff 	mov.w	r3, #4294967295
 800c278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c27c:	2200      	movs	r2, #0
 800c27e:	2312      	movs	r3, #18
 800c280:	e7b0      	b.n	800c1e4 <_dtoa_r+0x26c>
 800c282:	2301      	movs	r3, #1
 800c284:	9308      	str	r3, [sp, #32]
 800c286:	e7f5      	b.n	800c274 <_dtoa_r+0x2fc>
 800c288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c28a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c28e:	e7b8      	b.n	800c202 <_dtoa_r+0x28a>
 800c290:	3101      	adds	r1, #1
 800c292:	6041      	str	r1, [r0, #4]
 800c294:	0052      	lsls	r2, r2, #1
 800c296:	e7b8      	b.n	800c20a <_dtoa_r+0x292>
 800c298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c29a:	9a01      	ldr	r2, [sp, #4]
 800c29c:	601a      	str	r2, [r3, #0]
 800c29e:	9b03      	ldr	r3, [sp, #12]
 800c2a0:	2b0e      	cmp	r3, #14
 800c2a2:	f200 809d 	bhi.w	800c3e0 <_dtoa_r+0x468>
 800c2a6:	2d00      	cmp	r5, #0
 800c2a8:	f000 809a 	beq.w	800c3e0 <_dtoa_r+0x468>
 800c2ac:	9b00      	ldr	r3, [sp, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dd32      	ble.n	800c318 <_dtoa_r+0x3a0>
 800c2b2:	4ab7      	ldr	r2, [pc, #732]	; (800c590 <_dtoa_r+0x618>)
 800c2b4:	f003 030f 	and.w	r3, r3, #15
 800c2b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2c0:	9b00      	ldr	r3, [sp, #0]
 800c2c2:	05d8      	lsls	r0, r3, #23
 800c2c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c2c8:	d516      	bpl.n	800c2f8 <_dtoa_r+0x380>
 800c2ca:	4bb2      	ldr	r3, [pc, #712]	; (800c594 <_dtoa_r+0x61c>)
 800c2cc:	ec51 0b19 	vmov	r0, r1, d9
 800c2d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2d4:	f7f4 fae2 	bl	800089c <__aeabi_ddiv>
 800c2d8:	f007 070f 	and.w	r7, r7, #15
 800c2dc:	4682      	mov	sl, r0
 800c2de:	468b      	mov	fp, r1
 800c2e0:	2503      	movs	r5, #3
 800c2e2:	4eac      	ldr	r6, [pc, #688]	; (800c594 <_dtoa_r+0x61c>)
 800c2e4:	b957      	cbnz	r7, 800c2fc <_dtoa_r+0x384>
 800c2e6:	4642      	mov	r2, r8
 800c2e8:	464b      	mov	r3, r9
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	f7f4 fad5 	bl	800089c <__aeabi_ddiv>
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	468b      	mov	fp, r1
 800c2f6:	e028      	b.n	800c34a <_dtoa_r+0x3d2>
 800c2f8:	2502      	movs	r5, #2
 800c2fa:	e7f2      	b.n	800c2e2 <_dtoa_r+0x36a>
 800c2fc:	07f9      	lsls	r1, r7, #31
 800c2fe:	d508      	bpl.n	800c312 <_dtoa_r+0x39a>
 800c300:	4640      	mov	r0, r8
 800c302:	4649      	mov	r1, r9
 800c304:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c308:	f7f4 f99e 	bl	8000648 <__aeabi_dmul>
 800c30c:	3501      	adds	r5, #1
 800c30e:	4680      	mov	r8, r0
 800c310:	4689      	mov	r9, r1
 800c312:	107f      	asrs	r7, r7, #1
 800c314:	3608      	adds	r6, #8
 800c316:	e7e5      	b.n	800c2e4 <_dtoa_r+0x36c>
 800c318:	f000 809b 	beq.w	800c452 <_dtoa_r+0x4da>
 800c31c:	9b00      	ldr	r3, [sp, #0]
 800c31e:	4f9d      	ldr	r7, [pc, #628]	; (800c594 <_dtoa_r+0x61c>)
 800c320:	425e      	negs	r6, r3
 800c322:	4b9b      	ldr	r3, [pc, #620]	; (800c590 <_dtoa_r+0x618>)
 800c324:	f006 020f 	and.w	r2, r6, #15
 800c328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	ec51 0b19 	vmov	r0, r1, d9
 800c334:	f7f4 f988 	bl	8000648 <__aeabi_dmul>
 800c338:	1136      	asrs	r6, r6, #4
 800c33a:	4682      	mov	sl, r0
 800c33c:	468b      	mov	fp, r1
 800c33e:	2300      	movs	r3, #0
 800c340:	2502      	movs	r5, #2
 800c342:	2e00      	cmp	r6, #0
 800c344:	d17a      	bne.n	800c43c <_dtoa_r+0x4c4>
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1d3      	bne.n	800c2f2 <_dtoa_r+0x37a>
 800c34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 8082 	beq.w	800c456 <_dtoa_r+0x4de>
 800c352:	4b91      	ldr	r3, [pc, #580]	; (800c598 <_dtoa_r+0x620>)
 800c354:	2200      	movs	r2, #0
 800c356:	4650      	mov	r0, sl
 800c358:	4659      	mov	r1, fp
 800c35a:	f7f4 fbe7 	bl	8000b2c <__aeabi_dcmplt>
 800c35e:	2800      	cmp	r0, #0
 800c360:	d079      	beq.n	800c456 <_dtoa_r+0x4de>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d076      	beq.n	800c456 <_dtoa_r+0x4de>
 800c368:	9b02      	ldr	r3, [sp, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	dd36      	ble.n	800c3dc <_dtoa_r+0x464>
 800c36e:	9b00      	ldr	r3, [sp, #0]
 800c370:	4650      	mov	r0, sl
 800c372:	4659      	mov	r1, fp
 800c374:	1e5f      	subs	r7, r3, #1
 800c376:	2200      	movs	r2, #0
 800c378:	4b88      	ldr	r3, [pc, #544]	; (800c59c <_dtoa_r+0x624>)
 800c37a:	f7f4 f965 	bl	8000648 <__aeabi_dmul>
 800c37e:	9e02      	ldr	r6, [sp, #8]
 800c380:	4682      	mov	sl, r0
 800c382:	468b      	mov	fp, r1
 800c384:	3501      	adds	r5, #1
 800c386:	4628      	mov	r0, r5
 800c388:	f7f4 f8f4 	bl	8000574 <__aeabi_i2d>
 800c38c:	4652      	mov	r2, sl
 800c38e:	465b      	mov	r3, fp
 800c390:	f7f4 f95a 	bl	8000648 <__aeabi_dmul>
 800c394:	4b82      	ldr	r3, [pc, #520]	; (800c5a0 <_dtoa_r+0x628>)
 800c396:	2200      	movs	r2, #0
 800c398:	f7f3 ffa0 	bl	80002dc <__adddf3>
 800c39c:	46d0      	mov	r8, sl
 800c39e:	46d9      	mov	r9, fp
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c3a6:	2e00      	cmp	r6, #0
 800c3a8:	d158      	bne.n	800c45c <_dtoa_r+0x4e4>
 800c3aa:	4b7e      	ldr	r3, [pc, #504]	; (800c5a4 <_dtoa_r+0x62c>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	f7f3 ff91 	bl	80002d8 <__aeabi_dsub>
 800c3b6:	4652      	mov	r2, sl
 800c3b8:	465b      	mov	r3, fp
 800c3ba:	4680      	mov	r8, r0
 800c3bc:	4689      	mov	r9, r1
 800c3be:	f7f4 fbd3 	bl	8000b68 <__aeabi_dcmpgt>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	f040 8295 	bne.w	800c8f2 <_dtoa_r+0x97a>
 800c3c8:	4652      	mov	r2, sl
 800c3ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	f7f4 fbab 	bl	8000b2c <__aeabi_dcmplt>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f040 8289 	bne.w	800c8ee <_dtoa_r+0x976>
 800c3dc:	ec5b ab19 	vmov	sl, fp, d9
 800c3e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f2c0 8148 	blt.w	800c678 <_dtoa_r+0x700>
 800c3e8:	9a00      	ldr	r2, [sp, #0]
 800c3ea:	2a0e      	cmp	r2, #14
 800c3ec:	f300 8144 	bgt.w	800c678 <_dtoa_r+0x700>
 800c3f0:	4b67      	ldr	r3, [pc, #412]	; (800c590 <_dtoa_r+0x618>)
 800c3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f280 80d5 	bge.w	800c5ac <_dtoa_r+0x634>
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	f300 80d1 	bgt.w	800c5ac <_dtoa_r+0x634>
 800c40a:	f040 826f 	bne.w	800c8ec <_dtoa_r+0x974>
 800c40e:	4b65      	ldr	r3, [pc, #404]	; (800c5a4 <_dtoa_r+0x62c>)
 800c410:	2200      	movs	r2, #0
 800c412:	4640      	mov	r0, r8
 800c414:	4649      	mov	r1, r9
 800c416:	f7f4 f917 	bl	8000648 <__aeabi_dmul>
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	f7f4 fb99 	bl	8000b54 <__aeabi_dcmpge>
 800c422:	9e03      	ldr	r6, [sp, #12]
 800c424:	4637      	mov	r7, r6
 800c426:	2800      	cmp	r0, #0
 800c428:	f040 8245 	bne.w	800c8b6 <_dtoa_r+0x93e>
 800c42c:	9d01      	ldr	r5, [sp, #4]
 800c42e:	2331      	movs	r3, #49	; 0x31
 800c430:	f805 3b01 	strb.w	r3, [r5], #1
 800c434:	9b00      	ldr	r3, [sp, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	e240      	b.n	800c8be <_dtoa_r+0x946>
 800c43c:	07f2      	lsls	r2, r6, #31
 800c43e:	d505      	bpl.n	800c44c <_dtoa_r+0x4d4>
 800c440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c444:	f7f4 f900 	bl	8000648 <__aeabi_dmul>
 800c448:	3501      	adds	r5, #1
 800c44a:	2301      	movs	r3, #1
 800c44c:	1076      	asrs	r6, r6, #1
 800c44e:	3708      	adds	r7, #8
 800c450:	e777      	b.n	800c342 <_dtoa_r+0x3ca>
 800c452:	2502      	movs	r5, #2
 800c454:	e779      	b.n	800c34a <_dtoa_r+0x3d2>
 800c456:	9f00      	ldr	r7, [sp, #0]
 800c458:	9e03      	ldr	r6, [sp, #12]
 800c45a:	e794      	b.n	800c386 <_dtoa_r+0x40e>
 800c45c:	9901      	ldr	r1, [sp, #4]
 800c45e:	4b4c      	ldr	r3, [pc, #304]	; (800c590 <_dtoa_r+0x618>)
 800c460:	4431      	add	r1, r6
 800c462:	910d      	str	r1, [sp, #52]	; 0x34
 800c464:	9908      	ldr	r1, [sp, #32]
 800c466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c46a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c46e:	2900      	cmp	r1, #0
 800c470:	d043      	beq.n	800c4fa <_dtoa_r+0x582>
 800c472:	494d      	ldr	r1, [pc, #308]	; (800c5a8 <_dtoa_r+0x630>)
 800c474:	2000      	movs	r0, #0
 800c476:	f7f4 fa11 	bl	800089c <__aeabi_ddiv>
 800c47a:	4652      	mov	r2, sl
 800c47c:	465b      	mov	r3, fp
 800c47e:	f7f3 ff2b 	bl	80002d8 <__aeabi_dsub>
 800c482:	9d01      	ldr	r5, [sp, #4]
 800c484:	4682      	mov	sl, r0
 800c486:	468b      	mov	fp, r1
 800c488:	4649      	mov	r1, r9
 800c48a:	4640      	mov	r0, r8
 800c48c:	f7f4 fb8c 	bl	8000ba8 <__aeabi_d2iz>
 800c490:	4606      	mov	r6, r0
 800c492:	f7f4 f86f 	bl	8000574 <__aeabi_i2d>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4640      	mov	r0, r8
 800c49c:	4649      	mov	r1, r9
 800c49e:	f7f3 ff1b 	bl	80002d8 <__aeabi_dsub>
 800c4a2:	3630      	adds	r6, #48	; 0x30
 800c4a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c4a8:	4652      	mov	r2, sl
 800c4aa:	465b      	mov	r3, fp
 800c4ac:	4680      	mov	r8, r0
 800c4ae:	4689      	mov	r9, r1
 800c4b0:	f7f4 fb3c 	bl	8000b2c <__aeabi_dcmplt>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	d163      	bne.n	800c580 <_dtoa_r+0x608>
 800c4b8:	4642      	mov	r2, r8
 800c4ba:	464b      	mov	r3, r9
 800c4bc:	4936      	ldr	r1, [pc, #216]	; (800c598 <_dtoa_r+0x620>)
 800c4be:	2000      	movs	r0, #0
 800c4c0:	f7f3 ff0a 	bl	80002d8 <__aeabi_dsub>
 800c4c4:	4652      	mov	r2, sl
 800c4c6:	465b      	mov	r3, fp
 800c4c8:	f7f4 fb30 	bl	8000b2c <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f040 80b5 	bne.w	800c63c <_dtoa_r+0x6c4>
 800c4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4d4:	429d      	cmp	r5, r3
 800c4d6:	d081      	beq.n	800c3dc <_dtoa_r+0x464>
 800c4d8:	4b30      	ldr	r3, [pc, #192]	; (800c59c <_dtoa_r+0x624>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	4650      	mov	r0, sl
 800c4de:	4659      	mov	r1, fp
 800c4e0:	f7f4 f8b2 	bl	8000648 <__aeabi_dmul>
 800c4e4:	4b2d      	ldr	r3, [pc, #180]	; (800c59c <_dtoa_r+0x624>)
 800c4e6:	4682      	mov	sl, r0
 800c4e8:	468b      	mov	fp, r1
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	4649      	mov	r1, r9
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	f7f4 f8aa 	bl	8000648 <__aeabi_dmul>
 800c4f4:	4680      	mov	r8, r0
 800c4f6:	4689      	mov	r9, r1
 800c4f8:	e7c6      	b.n	800c488 <_dtoa_r+0x510>
 800c4fa:	4650      	mov	r0, sl
 800c4fc:	4659      	mov	r1, fp
 800c4fe:	f7f4 f8a3 	bl	8000648 <__aeabi_dmul>
 800c502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c504:	9d01      	ldr	r5, [sp, #4]
 800c506:	930f      	str	r3, [sp, #60]	; 0x3c
 800c508:	4682      	mov	sl, r0
 800c50a:	468b      	mov	fp, r1
 800c50c:	4649      	mov	r1, r9
 800c50e:	4640      	mov	r0, r8
 800c510:	f7f4 fb4a 	bl	8000ba8 <__aeabi_d2iz>
 800c514:	4606      	mov	r6, r0
 800c516:	f7f4 f82d 	bl	8000574 <__aeabi_i2d>
 800c51a:	3630      	adds	r6, #48	; 0x30
 800c51c:	4602      	mov	r2, r0
 800c51e:	460b      	mov	r3, r1
 800c520:	4640      	mov	r0, r8
 800c522:	4649      	mov	r1, r9
 800c524:	f7f3 fed8 	bl	80002d8 <__aeabi_dsub>
 800c528:	f805 6b01 	strb.w	r6, [r5], #1
 800c52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c52e:	429d      	cmp	r5, r3
 800c530:	4680      	mov	r8, r0
 800c532:	4689      	mov	r9, r1
 800c534:	f04f 0200 	mov.w	r2, #0
 800c538:	d124      	bne.n	800c584 <_dtoa_r+0x60c>
 800c53a:	4b1b      	ldr	r3, [pc, #108]	; (800c5a8 <_dtoa_r+0x630>)
 800c53c:	4650      	mov	r0, sl
 800c53e:	4659      	mov	r1, fp
 800c540:	f7f3 fecc 	bl	80002dc <__adddf3>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4640      	mov	r0, r8
 800c54a:	4649      	mov	r1, r9
 800c54c:	f7f4 fb0c 	bl	8000b68 <__aeabi_dcmpgt>
 800c550:	2800      	cmp	r0, #0
 800c552:	d173      	bne.n	800c63c <_dtoa_r+0x6c4>
 800c554:	4652      	mov	r2, sl
 800c556:	465b      	mov	r3, fp
 800c558:	4913      	ldr	r1, [pc, #76]	; (800c5a8 <_dtoa_r+0x630>)
 800c55a:	2000      	movs	r0, #0
 800c55c:	f7f3 febc 	bl	80002d8 <__aeabi_dsub>
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4640      	mov	r0, r8
 800c566:	4649      	mov	r1, r9
 800c568:	f7f4 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f43f af35 	beq.w	800c3dc <_dtoa_r+0x464>
 800c572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c574:	1e6b      	subs	r3, r5, #1
 800c576:	930f      	str	r3, [sp, #60]	; 0x3c
 800c578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c57c:	2b30      	cmp	r3, #48	; 0x30
 800c57e:	d0f8      	beq.n	800c572 <_dtoa_r+0x5fa>
 800c580:	9700      	str	r7, [sp, #0]
 800c582:	e049      	b.n	800c618 <_dtoa_r+0x6a0>
 800c584:	4b05      	ldr	r3, [pc, #20]	; (800c59c <_dtoa_r+0x624>)
 800c586:	f7f4 f85f 	bl	8000648 <__aeabi_dmul>
 800c58a:	4680      	mov	r8, r0
 800c58c:	4689      	mov	r9, r1
 800c58e:	e7bd      	b.n	800c50c <_dtoa_r+0x594>
 800c590:	0800f6d8 	.word	0x0800f6d8
 800c594:	0800f6b0 	.word	0x0800f6b0
 800c598:	3ff00000 	.word	0x3ff00000
 800c59c:	40240000 	.word	0x40240000
 800c5a0:	401c0000 	.word	0x401c0000
 800c5a4:	40140000 	.word	0x40140000
 800c5a8:	3fe00000 	.word	0x3fe00000
 800c5ac:	9d01      	ldr	r5, [sp, #4]
 800c5ae:	4656      	mov	r6, sl
 800c5b0:	465f      	mov	r7, fp
 800c5b2:	4642      	mov	r2, r8
 800c5b4:	464b      	mov	r3, r9
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	f7f4 f96f 	bl	800089c <__aeabi_ddiv>
 800c5be:	f7f4 faf3 	bl	8000ba8 <__aeabi_d2iz>
 800c5c2:	4682      	mov	sl, r0
 800c5c4:	f7f3 ffd6 	bl	8000574 <__aeabi_i2d>
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	464b      	mov	r3, r9
 800c5cc:	f7f4 f83c 	bl	8000648 <__aeabi_dmul>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	4639      	mov	r1, r7
 800c5d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c5dc:	f7f3 fe7c 	bl	80002d8 <__aeabi_dsub>
 800c5e0:	f805 6b01 	strb.w	r6, [r5], #1
 800c5e4:	9e01      	ldr	r6, [sp, #4]
 800c5e6:	9f03      	ldr	r7, [sp, #12]
 800c5e8:	1bae      	subs	r6, r5, r6
 800c5ea:	42b7      	cmp	r7, r6
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	d135      	bne.n	800c65e <_dtoa_r+0x6e6>
 800c5f2:	f7f3 fe73 	bl	80002dc <__adddf3>
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	464b      	mov	r3, r9
 800c5fa:	4606      	mov	r6, r0
 800c5fc:	460f      	mov	r7, r1
 800c5fe:	f7f4 fab3 	bl	8000b68 <__aeabi_dcmpgt>
 800c602:	b9d0      	cbnz	r0, 800c63a <_dtoa_r+0x6c2>
 800c604:	4642      	mov	r2, r8
 800c606:	464b      	mov	r3, r9
 800c608:	4630      	mov	r0, r6
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f4 fa84 	bl	8000b18 <__aeabi_dcmpeq>
 800c610:	b110      	cbz	r0, 800c618 <_dtoa_r+0x6a0>
 800c612:	f01a 0f01 	tst.w	sl, #1
 800c616:	d110      	bne.n	800c63a <_dtoa_r+0x6c2>
 800c618:	4620      	mov	r0, r4
 800c61a:	ee18 1a10 	vmov	r1, s16
 800c61e:	f000 fd17 	bl	800d050 <_Bfree>
 800c622:	2300      	movs	r3, #0
 800c624:	9800      	ldr	r0, [sp, #0]
 800c626:	702b      	strb	r3, [r5, #0]
 800c628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c62a:	3001      	adds	r0, #1
 800c62c:	6018      	str	r0, [r3, #0]
 800c62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c630:	2b00      	cmp	r3, #0
 800c632:	f43f acf1 	beq.w	800c018 <_dtoa_r+0xa0>
 800c636:	601d      	str	r5, [r3, #0]
 800c638:	e4ee      	b.n	800c018 <_dtoa_r+0xa0>
 800c63a:	9f00      	ldr	r7, [sp, #0]
 800c63c:	462b      	mov	r3, r5
 800c63e:	461d      	mov	r5, r3
 800c640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c644:	2a39      	cmp	r2, #57	; 0x39
 800c646:	d106      	bne.n	800c656 <_dtoa_r+0x6de>
 800c648:	9a01      	ldr	r2, [sp, #4]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d1f7      	bne.n	800c63e <_dtoa_r+0x6c6>
 800c64e:	9901      	ldr	r1, [sp, #4]
 800c650:	2230      	movs	r2, #48	; 0x30
 800c652:	3701      	adds	r7, #1
 800c654:	700a      	strb	r2, [r1, #0]
 800c656:	781a      	ldrb	r2, [r3, #0]
 800c658:	3201      	adds	r2, #1
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	e790      	b.n	800c580 <_dtoa_r+0x608>
 800c65e:	4ba6      	ldr	r3, [pc, #664]	; (800c8f8 <_dtoa_r+0x980>)
 800c660:	2200      	movs	r2, #0
 800c662:	f7f3 fff1 	bl	8000648 <__aeabi_dmul>
 800c666:	2200      	movs	r2, #0
 800c668:	2300      	movs	r3, #0
 800c66a:	4606      	mov	r6, r0
 800c66c:	460f      	mov	r7, r1
 800c66e:	f7f4 fa53 	bl	8000b18 <__aeabi_dcmpeq>
 800c672:	2800      	cmp	r0, #0
 800c674:	d09d      	beq.n	800c5b2 <_dtoa_r+0x63a>
 800c676:	e7cf      	b.n	800c618 <_dtoa_r+0x6a0>
 800c678:	9a08      	ldr	r2, [sp, #32]
 800c67a:	2a00      	cmp	r2, #0
 800c67c:	f000 80d7 	beq.w	800c82e <_dtoa_r+0x8b6>
 800c680:	9a06      	ldr	r2, [sp, #24]
 800c682:	2a01      	cmp	r2, #1
 800c684:	f300 80ba 	bgt.w	800c7fc <_dtoa_r+0x884>
 800c688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c68a:	2a00      	cmp	r2, #0
 800c68c:	f000 80b2 	beq.w	800c7f4 <_dtoa_r+0x87c>
 800c690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c694:	9e07      	ldr	r6, [sp, #28]
 800c696:	9d04      	ldr	r5, [sp, #16]
 800c698:	9a04      	ldr	r2, [sp, #16]
 800c69a:	441a      	add	r2, r3
 800c69c:	9204      	str	r2, [sp, #16]
 800c69e:	9a05      	ldr	r2, [sp, #20]
 800c6a0:	2101      	movs	r1, #1
 800c6a2:	441a      	add	r2, r3
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	9205      	str	r2, [sp, #20]
 800c6a8:	f000 fd8a 	bl	800d1c0 <__i2b>
 800c6ac:	4607      	mov	r7, r0
 800c6ae:	2d00      	cmp	r5, #0
 800c6b0:	dd0c      	ble.n	800c6cc <_dtoa_r+0x754>
 800c6b2:	9b05      	ldr	r3, [sp, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	dd09      	ble.n	800c6cc <_dtoa_r+0x754>
 800c6b8:	42ab      	cmp	r3, r5
 800c6ba:	9a04      	ldr	r2, [sp, #16]
 800c6bc:	bfa8      	it	ge
 800c6be:	462b      	movge	r3, r5
 800c6c0:	1ad2      	subs	r2, r2, r3
 800c6c2:	9204      	str	r2, [sp, #16]
 800c6c4:	9a05      	ldr	r2, [sp, #20]
 800c6c6:	1aed      	subs	r5, r5, r3
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	9b07      	ldr	r3, [sp, #28]
 800c6ce:	b31b      	cbz	r3, 800c718 <_dtoa_r+0x7a0>
 800c6d0:	9b08      	ldr	r3, [sp, #32]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f000 80af 	beq.w	800c836 <_dtoa_r+0x8be>
 800c6d8:	2e00      	cmp	r6, #0
 800c6da:	dd13      	ble.n	800c704 <_dtoa_r+0x78c>
 800c6dc:	4639      	mov	r1, r7
 800c6de:	4632      	mov	r2, r6
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f000 fe2d 	bl	800d340 <__pow5mult>
 800c6e6:	ee18 2a10 	vmov	r2, s16
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	4607      	mov	r7, r0
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f000 fd7c 	bl	800d1ec <__multiply>
 800c6f4:	ee18 1a10 	vmov	r1, s16
 800c6f8:	4680      	mov	r8, r0
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fca8 	bl	800d050 <_Bfree>
 800c700:	ee08 8a10 	vmov	s16, r8
 800c704:	9b07      	ldr	r3, [sp, #28]
 800c706:	1b9a      	subs	r2, r3, r6
 800c708:	d006      	beq.n	800c718 <_dtoa_r+0x7a0>
 800c70a:	ee18 1a10 	vmov	r1, s16
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 fe16 	bl	800d340 <__pow5mult>
 800c714:	ee08 0a10 	vmov	s16, r0
 800c718:	2101      	movs	r1, #1
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 fd50 	bl	800d1c0 <__i2b>
 800c720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c722:	2b00      	cmp	r3, #0
 800c724:	4606      	mov	r6, r0
 800c726:	f340 8088 	ble.w	800c83a <_dtoa_r+0x8c2>
 800c72a:	461a      	mov	r2, r3
 800c72c:	4601      	mov	r1, r0
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 fe06 	bl	800d340 <__pow5mult>
 800c734:	9b06      	ldr	r3, [sp, #24]
 800c736:	2b01      	cmp	r3, #1
 800c738:	4606      	mov	r6, r0
 800c73a:	f340 8081 	ble.w	800c840 <_dtoa_r+0x8c8>
 800c73e:	f04f 0800 	mov.w	r8, #0
 800c742:	6933      	ldr	r3, [r6, #16]
 800c744:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c748:	6918      	ldr	r0, [r3, #16]
 800c74a:	f000 fce9 	bl	800d120 <__hi0bits>
 800c74e:	f1c0 0020 	rsb	r0, r0, #32
 800c752:	9b05      	ldr	r3, [sp, #20]
 800c754:	4418      	add	r0, r3
 800c756:	f010 001f 	ands.w	r0, r0, #31
 800c75a:	f000 8092 	beq.w	800c882 <_dtoa_r+0x90a>
 800c75e:	f1c0 0320 	rsb	r3, r0, #32
 800c762:	2b04      	cmp	r3, #4
 800c764:	f340 808a 	ble.w	800c87c <_dtoa_r+0x904>
 800c768:	f1c0 001c 	rsb	r0, r0, #28
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	4403      	add	r3, r0
 800c770:	9304      	str	r3, [sp, #16]
 800c772:	9b05      	ldr	r3, [sp, #20]
 800c774:	4403      	add	r3, r0
 800c776:	4405      	add	r5, r0
 800c778:	9305      	str	r3, [sp, #20]
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	dd07      	ble.n	800c790 <_dtoa_r+0x818>
 800c780:	ee18 1a10 	vmov	r1, s16
 800c784:	461a      	mov	r2, r3
 800c786:	4620      	mov	r0, r4
 800c788:	f000 fe34 	bl	800d3f4 <__lshift>
 800c78c:	ee08 0a10 	vmov	s16, r0
 800c790:	9b05      	ldr	r3, [sp, #20]
 800c792:	2b00      	cmp	r3, #0
 800c794:	dd05      	ble.n	800c7a2 <_dtoa_r+0x82a>
 800c796:	4631      	mov	r1, r6
 800c798:	461a      	mov	r2, r3
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 fe2a 	bl	800d3f4 <__lshift>
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d06e      	beq.n	800c886 <_dtoa_r+0x90e>
 800c7a8:	ee18 0a10 	vmov	r0, s16
 800c7ac:	4631      	mov	r1, r6
 800c7ae:	f000 fe91 	bl	800d4d4 <__mcmp>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	da67      	bge.n	800c886 <_dtoa_r+0x90e>
 800c7b6:	9b00      	ldr	r3, [sp, #0]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	ee18 1a10 	vmov	r1, s16
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	220a      	movs	r2, #10
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f000 fc65 	bl	800d094 <__multadd>
 800c7ca:	9b08      	ldr	r3, [sp, #32]
 800c7cc:	ee08 0a10 	vmov	s16, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	f000 81b1 	beq.w	800cb38 <_dtoa_r+0xbc0>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	4639      	mov	r1, r7
 800c7da:	220a      	movs	r2, #10
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f000 fc59 	bl	800d094 <__multadd>
 800c7e2:	9b02      	ldr	r3, [sp, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	4607      	mov	r7, r0
 800c7e8:	f300 808e 	bgt.w	800c908 <_dtoa_r+0x990>
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	2b02      	cmp	r3, #2
 800c7f0:	dc51      	bgt.n	800c896 <_dtoa_r+0x91e>
 800c7f2:	e089      	b.n	800c908 <_dtoa_r+0x990>
 800c7f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c7fa:	e74b      	b.n	800c694 <_dtoa_r+0x71c>
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	1e5e      	subs	r6, r3, #1
 800c800:	9b07      	ldr	r3, [sp, #28]
 800c802:	42b3      	cmp	r3, r6
 800c804:	bfbf      	itttt	lt
 800c806:	9b07      	ldrlt	r3, [sp, #28]
 800c808:	9607      	strlt	r6, [sp, #28]
 800c80a:	1af2      	sublt	r2, r6, r3
 800c80c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c80e:	bfb6      	itet	lt
 800c810:	189b      	addlt	r3, r3, r2
 800c812:	1b9e      	subge	r6, r3, r6
 800c814:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	bfb8      	it	lt
 800c81a:	2600      	movlt	r6, #0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	bfb7      	itett	lt
 800c820:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c824:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c828:	1a9d      	sublt	r5, r3, r2
 800c82a:	2300      	movlt	r3, #0
 800c82c:	e734      	b.n	800c698 <_dtoa_r+0x720>
 800c82e:	9e07      	ldr	r6, [sp, #28]
 800c830:	9d04      	ldr	r5, [sp, #16]
 800c832:	9f08      	ldr	r7, [sp, #32]
 800c834:	e73b      	b.n	800c6ae <_dtoa_r+0x736>
 800c836:	9a07      	ldr	r2, [sp, #28]
 800c838:	e767      	b.n	800c70a <_dtoa_r+0x792>
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	dc18      	bgt.n	800c872 <_dtoa_r+0x8fa>
 800c840:	f1ba 0f00 	cmp.w	sl, #0
 800c844:	d115      	bne.n	800c872 <_dtoa_r+0x8fa>
 800c846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c84a:	b993      	cbnz	r3, 800c872 <_dtoa_r+0x8fa>
 800c84c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c850:	0d1b      	lsrs	r3, r3, #20
 800c852:	051b      	lsls	r3, r3, #20
 800c854:	b183      	cbz	r3, 800c878 <_dtoa_r+0x900>
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	3301      	adds	r3, #1
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	3301      	adds	r3, #1
 800c860:	9305      	str	r3, [sp, #20]
 800c862:	f04f 0801 	mov.w	r8, #1
 800c866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f47f af6a 	bne.w	800c742 <_dtoa_r+0x7ca>
 800c86e:	2001      	movs	r0, #1
 800c870:	e76f      	b.n	800c752 <_dtoa_r+0x7da>
 800c872:	f04f 0800 	mov.w	r8, #0
 800c876:	e7f6      	b.n	800c866 <_dtoa_r+0x8ee>
 800c878:	4698      	mov	r8, r3
 800c87a:	e7f4      	b.n	800c866 <_dtoa_r+0x8ee>
 800c87c:	f43f af7d 	beq.w	800c77a <_dtoa_r+0x802>
 800c880:	4618      	mov	r0, r3
 800c882:	301c      	adds	r0, #28
 800c884:	e772      	b.n	800c76c <_dtoa_r+0x7f4>
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	dc37      	bgt.n	800c8fc <_dtoa_r+0x984>
 800c88c:	9b06      	ldr	r3, [sp, #24]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	dd34      	ble.n	800c8fc <_dtoa_r+0x984>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	9302      	str	r3, [sp, #8]
 800c896:	9b02      	ldr	r3, [sp, #8]
 800c898:	b96b      	cbnz	r3, 800c8b6 <_dtoa_r+0x93e>
 800c89a:	4631      	mov	r1, r6
 800c89c:	2205      	movs	r2, #5
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f000 fbf8 	bl	800d094 <__multadd>
 800c8a4:	4601      	mov	r1, r0
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	ee18 0a10 	vmov	r0, s16
 800c8ac:	f000 fe12 	bl	800d4d4 <__mcmp>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	f73f adbb 	bgt.w	800c42c <_dtoa_r+0x4b4>
 800c8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b8:	9d01      	ldr	r5, [sp, #4]
 800c8ba:	43db      	mvns	r3, r3
 800c8bc:	9300      	str	r3, [sp, #0]
 800c8be:	f04f 0800 	mov.w	r8, #0
 800c8c2:	4631      	mov	r1, r6
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 fbc3 	bl	800d050 <_Bfree>
 800c8ca:	2f00      	cmp	r7, #0
 800c8cc:	f43f aea4 	beq.w	800c618 <_dtoa_r+0x6a0>
 800c8d0:	f1b8 0f00 	cmp.w	r8, #0
 800c8d4:	d005      	beq.n	800c8e2 <_dtoa_r+0x96a>
 800c8d6:	45b8      	cmp	r8, r7
 800c8d8:	d003      	beq.n	800c8e2 <_dtoa_r+0x96a>
 800c8da:	4641      	mov	r1, r8
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f000 fbb7 	bl	800d050 <_Bfree>
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	f000 fbb3 	bl	800d050 <_Bfree>
 800c8ea:	e695      	b.n	800c618 <_dtoa_r+0x6a0>
 800c8ec:	2600      	movs	r6, #0
 800c8ee:	4637      	mov	r7, r6
 800c8f0:	e7e1      	b.n	800c8b6 <_dtoa_r+0x93e>
 800c8f2:	9700      	str	r7, [sp, #0]
 800c8f4:	4637      	mov	r7, r6
 800c8f6:	e599      	b.n	800c42c <_dtoa_r+0x4b4>
 800c8f8:	40240000 	.word	0x40240000
 800c8fc:	9b08      	ldr	r3, [sp, #32]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f000 80ca 	beq.w	800ca98 <_dtoa_r+0xb20>
 800c904:	9b03      	ldr	r3, [sp, #12]
 800c906:	9302      	str	r3, [sp, #8]
 800c908:	2d00      	cmp	r5, #0
 800c90a:	dd05      	ble.n	800c918 <_dtoa_r+0x9a0>
 800c90c:	4639      	mov	r1, r7
 800c90e:	462a      	mov	r2, r5
 800c910:	4620      	mov	r0, r4
 800c912:	f000 fd6f 	bl	800d3f4 <__lshift>
 800c916:	4607      	mov	r7, r0
 800c918:	f1b8 0f00 	cmp.w	r8, #0
 800c91c:	d05b      	beq.n	800c9d6 <_dtoa_r+0xa5e>
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4620      	mov	r0, r4
 800c922:	f000 fb55 	bl	800cfd0 <_Balloc>
 800c926:	4605      	mov	r5, r0
 800c928:	b928      	cbnz	r0, 800c936 <_dtoa_r+0x9be>
 800c92a:	4b87      	ldr	r3, [pc, #540]	; (800cb48 <_dtoa_r+0xbd0>)
 800c92c:	4602      	mov	r2, r0
 800c92e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c932:	f7ff bb3b 	b.w	800bfac <_dtoa_r+0x34>
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	3202      	adds	r2, #2
 800c93a:	0092      	lsls	r2, r2, #2
 800c93c:	f107 010c 	add.w	r1, r7, #12
 800c940:	300c      	adds	r0, #12
 800c942:	f000 fb2b 	bl	800cf9c <memcpy>
 800c946:	2201      	movs	r2, #1
 800c948:	4629      	mov	r1, r5
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 fd52 	bl	800d3f4 <__lshift>
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	f103 0901 	add.w	r9, r3, #1
 800c956:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c95a:	4413      	add	r3, r2
 800c95c:	9305      	str	r3, [sp, #20]
 800c95e:	f00a 0301 	and.w	r3, sl, #1
 800c962:	46b8      	mov	r8, r7
 800c964:	9304      	str	r3, [sp, #16]
 800c966:	4607      	mov	r7, r0
 800c968:	4631      	mov	r1, r6
 800c96a:	ee18 0a10 	vmov	r0, s16
 800c96e:	f7ff fa75 	bl	800be5c <quorem>
 800c972:	4641      	mov	r1, r8
 800c974:	9002      	str	r0, [sp, #8]
 800c976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c97a:	ee18 0a10 	vmov	r0, s16
 800c97e:	f000 fda9 	bl	800d4d4 <__mcmp>
 800c982:	463a      	mov	r2, r7
 800c984:	9003      	str	r0, [sp, #12]
 800c986:	4631      	mov	r1, r6
 800c988:	4620      	mov	r0, r4
 800c98a:	f000 fdbf 	bl	800d50c <__mdiff>
 800c98e:	68c2      	ldr	r2, [r0, #12]
 800c990:	f109 3bff 	add.w	fp, r9, #4294967295
 800c994:	4605      	mov	r5, r0
 800c996:	bb02      	cbnz	r2, 800c9da <_dtoa_r+0xa62>
 800c998:	4601      	mov	r1, r0
 800c99a:	ee18 0a10 	vmov	r0, s16
 800c99e:	f000 fd99 	bl	800d4d4 <__mcmp>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	9207      	str	r2, [sp, #28]
 800c9aa:	f000 fb51 	bl	800d050 <_Bfree>
 800c9ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c9b2:	ea43 0102 	orr.w	r1, r3, r2
 800c9b6:	9b04      	ldr	r3, [sp, #16]
 800c9b8:	430b      	orrs	r3, r1
 800c9ba:	464d      	mov	r5, r9
 800c9bc:	d10f      	bne.n	800c9de <_dtoa_r+0xa66>
 800c9be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c9c2:	d02a      	beq.n	800ca1a <_dtoa_r+0xaa2>
 800c9c4:	9b03      	ldr	r3, [sp, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	dd02      	ble.n	800c9d0 <_dtoa_r+0xa58>
 800c9ca:	9b02      	ldr	r3, [sp, #8]
 800c9cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c9d0:	f88b a000 	strb.w	sl, [fp]
 800c9d4:	e775      	b.n	800c8c2 <_dtoa_r+0x94a>
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	e7ba      	b.n	800c950 <_dtoa_r+0x9d8>
 800c9da:	2201      	movs	r2, #1
 800c9dc:	e7e2      	b.n	800c9a4 <_dtoa_r+0xa2c>
 800c9de:	9b03      	ldr	r3, [sp, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	db04      	blt.n	800c9ee <_dtoa_r+0xa76>
 800c9e4:	9906      	ldr	r1, [sp, #24]
 800c9e6:	430b      	orrs	r3, r1
 800c9e8:	9904      	ldr	r1, [sp, #16]
 800c9ea:	430b      	orrs	r3, r1
 800c9ec:	d122      	bne.n	800ca34 <_dtoa_r+0xabc>
 800c9ee:	2a00      	cmp	r2, #0
 800c9f0:	ddee      	ble.n	800c9d0 <_dtoa_r+0xa58>
 800c9f2:	ee18 1a10 	vmov	r1, s16
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 fcfb 	bl	800d3f4 <__lshift>
 800c9fe:	4631      	mov	r1, r6
 800ca00:	ee08 0a10 	vmov	s16, r0
 800ca04:	f000 fd66 	bl	800d4d4 <__mcmp>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	dc03      	bgt.n	800ca14 <_dtoa_r+0xa9c>
 800ca0c:	d1e0      	bne.n	800c9d0 <_dtoa_r+0xa58>
 800ca0e:	f01a 0f01 	tst.w	sl, #1
 800ca12:	d0dd      	beq.n	800c9d0 <_dtoa_r+0xa58>
 800ca14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca18:	d1d7      	bne.n	800c9ca <_dtoa_r+0xa52>
 800ca1a:	2339      	movs	r3, #57	; 0x39
 800ca1c:	f88b 3000 	strb.w	r3, [fp]
 800ca20:	462b      	mov	r3, r5
 800ca22:	461d      	mov	r5, r3
 800ca24:	3b01      	subs	r3, #1
 800ca26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ca2a:	2a39      	cmp	r2, #57	; 0x39
 800ca2c:	d071      	beq.n	800cb12 <_dtoa_r+0xb9a>
 800ca2e:	3201      	adds	r2, #1
 800ca30:	701a      	strb	r2, [r3, #0]
 800ca32:	e746      	b.n	800c8c2 <_dtoa_r+0x94a>
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	dd07      	ble.n	800ca48 <_dtoa_r+0xad0>
 800ca38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca3c:	d0ed      	beq.n	800ca1a <_dtoa_r+0xaa2>
 800ca3e:	f10a 0301 	add.w	r3, sl, #1
 800ca42:	f88b 3000 	strb.w	r3, [fp]
 800ca46:	e73c      	b.n	800c8c2 <_dtoa_r+0x94a>
 800ca48:	9b05      	ldr	r3, [sp, #20]
 800ca4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ca4e:	4599      	cmp	r9, r3
 800ca50:	d047      	beq.n	800cae2 <_dtoa_r+0xb6a>
 800ca52:	ee18 1a10 	vmov	r1, s16
 800ca56:	2300      	movs	r3, #0
 800ca58:	220a      	movs	r2, #10
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f000 fb1a 	bl	800d094 <__multadd>
 800ca60:	45b8      	cmp	r8, r7
 800ca62:	ee08 0a10 	vmov	s16, r0
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	f04f 020a 	mov.w	r2, #10
 800ca6e:	4641      	mov	r1, r8
 800ca70:	4620      	mov	r0, r4
 800ca72:	d106      	bne.n	800ca82 <_dtoa_r+0xb0a>
 800ca74:	f000 fb0e 	bl	800d094 <__multadd>
 800ca78:	4680      	mov	r8, r0
 800ca7a:	4607      	mov	r7, r0
 800ca7c:	f109 0901 	add.w	r9, r9, #1
 800ca80:	e772      	b.n	800c968 <_dtoa_r+0x9f0>
 800ca82:	f000 fb07 	bl	800d094 <__multadd>
 800ca86:	4639      	mov	r1, r7
 800ca88:	4680      	mov	r8, r0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	220a      	movs	r2, #10
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f000 fb00 	bl	800d094 <__multadd>
 800ca94:	4607      	mov	r7, r0
 800ca96:	e7f1      	b.n	800ca7c <_dtoa_r+0xb04>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	9302      	str	r3, [sp, #8]
 800ca9c:	9d01      	ldr	r5, [sp, #4]
 800ca9e:	ee18 0a10 	vmov	r0, s16
 800caa2:	4631      	mov	r1, r6
 800caa4:	f7ff f9da 	bl	800be5c <quorem>
 800caa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800caac:	9b01      	ldr	r3, [sp, #4]
 800caae:	f805 ab01 	strb.w	sl, [r5], #1
 800cab2:	1aea      	subs	r2, r5, r3
 800cab4:	9b02      	ldr	r3, [sp, #8]
 800cab6:	4293      	cmp	r3, r2
 800cab8:	dd09      	ble.n	800cace <_dtoa_r+0xb56>
 800caba:	ee18 1a10 	vmov	r1, s16
 800cabe:	2300      	movs	r3, #0
 800cac0:	220a      	movs	r2, #10
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 fae6 	bl	800d094 <__multadd>
 800cac8:	ee08 0a10 	vmov	s16, r0
 800cacc:	e7e7      	b.n	800ca9e <_dtoa_r+0xb26>
 800cace:	9b02      	ldr	r3, [sp, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	bfc8      	it	gt
 800cad4:	461d      	movgt	r5, r3
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	bfd8      	it	le
 800cada:	2501      	movle	r5, #1
 800cadc:	441d      	add	r5, r3
 800cade:	f04f 0800 	mov.w	r8, #0
 800cae2:	ee18 1a10 	vmov	r1, s16
 800cae6:	2201      	movs	r2, #1
 800cae8:	4620      	mov	r0, r4
 800caea:	f000 fc83 	bl	800d3f4 <__lshift>
 800caee:	4631      	mov	r1, r6
 800caf0:	ee08 0a10 	vmov	s16, r0
 800caf4:	f000 fcee 	bl	800d4d4 <__mcmp>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	dc91      	bgt.n	800ca20 <_dtoa_r+0xaa8>
 800cafc:	d102      	bne.n	800cb04 <_dtoa_r+0xb8c>
 800cafe:	f01a 0f01 	tst.w	sl, #1
 800cb02:	d18d      	bne.n	800ca20 <_dtoa_r+0xaa8>
 800cb04:	462b      	mov	r3, r5
 800cb06:	461d      	mov	r5, r3
 800cb08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cb0c:	2a30      	cmp	r2, #48	; 0x30
 800cb0e:	d0fa      	beq.n	800cb06 <_dtoa_r+0xb8e>
 800cb10:	e6d7      	b.n	800c8c2 <_dtoa_r+0x94a>
 800cb12:	9a01      	ldr	r2, [sp, #4]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d184      	bne.n	800ca22 <_dtoa_r+0xaaa>
 800cb18:	9b00      	ldr	r3, [sp, #0]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	2331      	movs	r3, #49	; 0x31
 800cb20:	7013      	strb	r3, [r2, #0]
 800cb22:	e6ce      	b.n	800c8c2 <_dtoa_r+0x94a>
 800cb24:	4b09      	ldr	r3, [pc, #36]	; (800cb4c <_dtoa_r+0xbd4>)
 800cb26:	f7ff ba95 	b.w	800c054 <_dtoa_r+0xdc>
 800cb2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f47f aa6e 	bne.w	800c00e <_dtoa_r+0x96>
 800cb32:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <_dtoa_r+0xbd8>)
 800cb34:	f7ff ba8e 	b.w	800c054 <_dtoa_r+0xdc>
 800cb38:	9b02      	ldr	r3, [sp, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	dcae      	bgt.n	800ca9c <_dtoa_r+0xb24>
 800cb3e:	9b06      	ldr	r3, [sp, #24]
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	f73f aea8 	bgt.w	800c896 <_dtoa_r+0x91e>
 800cb46:	e7a9      	b.n	800ca9c <_dtoa_r+0xb24>
 800cb48:	0800f5df 	.word	0x0800f5df
 800cb4c:	0800f53c 	.word	0x0800f53c
 800cb50:	0800f560 	.word	0x0800f560

0800cb54 <__sflush_r>:
 800cb54:	898a      	ldrh	r2, [r1, #12]
 800cb56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	0710      	lsls	r0, r2, #28
 800cb5e:	460c      	mov	r4, r1
 800cb60:	d458      	bmi.n	800cc14 <__sflush_r+0xc0>
 800cb62:	684b      	ldr	r3, [r1, #4]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	dc05      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x20>
 800cb6e:	2000      	movs	r0, #0
 800cb70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d0f9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	d032      	beq.n	800cbec <__sflush_r+0x98>
 800cb86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	075a      	lsls	r2, r3, #29
 800cb8c:	d505      	bpl.n	800cb9a <__sflush_r+0x46>
 800cb8e:	6863      	ldr	r3, [r4, #4]
 800cb90:	1ac0      	subs	r0, r0, r3
 800cb92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb94:	b10b      	cbz	r3, 800cb9a <__sflush_r+0x46>
 800cb96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb98:	1ac0      	subs	r0, r0, r3
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cba0:	6a21      	ldr	r1, [r4, #32]
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b0      	blx	r6
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	d106      	bne.n	800cbba <__sflush_r+0x66>
 800cbac:	6829      	ldr	r1, [r5, #0]
 800cbae:	291d      	cmp	r1, #29
 800cbb0:	d82c      	bhi.n	800cc0c <__sflush_r+0xb8>
 800cbb2:	4a2a      	ldr	r2, [pc, #168]	; (800cc5c <__sflush_r+0x108>)
 800cbb4:	40ca      	lsrs	r2, r1
 800cbb6:	07d6      	lsls	r6, r2, #31
 800cbb8:	d528      	bpl.n	800cc0c <__sflush_r+0xb8>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6062      	str	r2, [r4, #4]
 800cbbe:	04d9      	lsls	r1, r3, #19
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	6022      	str	r2, [r4, #0]
 800cbc4:	d504      	bpl.n	800cbd0 <__sflush_r+0x7c>
 800cbc6:	1c42      	adds	r2, r0, #1
 800cbc8:	d101      	bne.n	800cbce <__sflush_r+0x7a>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	b903      	cbnz	r3, 800cbd0 <__sflush_r+0x7c>
 800cbce:	6560      	str	r0, [r4, #84]	; 0x54
 800cbd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbd2:	602f      	str	r7, [r5, #0]
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	d0ca      	beq.n	800cb6e <__sflush_r+0x1a>
 800cbd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbdc:	4299      	cmp	r1, r3
 800cbde:	d002      	beq.n	800cbe6 <__sflush_r+0x92>
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	f7fe fa4f 	bl	800b084 <_free_r>
 800cbe6:	2000      	movs	r0, #0
 800cbe8:	6360      	str	r0, [r4, #52]	; 0x34
 800cbea:	e7c1      	b.n	800cb70 <__sflush_r+0x1c>
 800cbec:	6a21      	ldr	r1, [r4, #32]
 800cbee:	2301      	movs	r3, #1
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	1c41      	adds	r1, r0, #1
 800cbf6:	d1c7      	bne.n	800cb88 <__sflush_r+0x34>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c4      	beq.n	800cb88 <__sflush_r+0x34>
 800cbfe:	2b1d      	cmp	r3, #29
 800cc00:	d001      	beq.n	800cc06 <__sflush_r+0xb2>
 800cc02:	2b16      	cmp	r3, #22
 800cc04:	d101      	bne.n	800cc0a <__sflush_r+0xb6>
 800cc06:	602f      	str	r7, [r5, #0]
 800cc08:	e7b1      	b.n	800cb6e <__sflush_r+0x1a>
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	e7ad      	b.n	800cb70 <__sflush_r+0x1c>
 800cc14:	690f      	ldr	r7, [r1, #16]
 800cc16:	2f00      	cmp	r7, #0
 800cc18:	d0a9      	beq.n	800cb6e <__sflush_r+0x1a>
 800cc1a:	0793      	lsls	r3, r2, #30
 800cc1c:	680e      	ldr	r6, [r1, #0]
 800cc1e:	bf08      	it	eq
 800cc20:	694b      	ldreq	r3, [r1, #20]
 800cc22:	600f      	str	r7, [r1, #0]
 800cc24:	bf18      	it	ne
 800cc26:	2300      	movne	r3, #0
 800cc28:	eba6 0807 	sub.w	r8, r6, r7
 800cc2c:	608b      	str	r3, [r1, #8]
 800cc2e:	f1b8 0f00 	cmp.w	r8, #0
 800cc32:	dd9c      	ble.n	800cb6e <__sflush_r+0x1a>
 800cc34:	6a21      	ldr	r1, [r4, #32]
 800cc36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc38:	4643      	mov	r3, r8
 800cc3a:	463a      	mov	r2, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	47b0      	blx	r6
 800cc40:	2800      	cmp	r0, #0
 800cc42:	dc06      	bgt.n	800cc52 <__sflush_r+0xfe>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc50:	e78e      	b.n	800cb70 <__sflush_r+0x1c>
 800cc52:	4407      	add	r7, r0
 800cc54:	eba8 0800 	sub.w	r8, r8, r0
 800cc58:	e7e9      	b.n	800cc2e <__sflush_r+0xda>
 800cc5a:	bf00      	nop
 800cc5c:	20400001 	.word	0x20400001

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6983      	ldr	r3, [r0, #24]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f000 f887 	bl	800cd88 <__sinit>
 800cc7a:	4b14      	ldr	r3, [pc, #80]	; (800cccc <_fflush_r+0x6c>)
 800cc7c:	429c      	cmp	r4, r3
 800cc7e:	d11b      	bne.n	800ccb8 <_fflush_r+0x58>
 800cc80:	686c      	ldr	r4, [r5, #4]
 800cc82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0ef      	beq.n	800cc6a <_fflush_r+0xa>
 800cc8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc8c:	07d0      	lsls	r0, r2, #31
 800cc8e:	d404      	bmi.n	800cc9a <_fflush_r+0x3a>
 800cc90:	0599      	lsls	r1, r3, #22
 800cc92:	d402      	bmi.n	800cc9a <_fflush_r+0x3a>
 800cc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc96:	f000 f91a 	bl	800cece <__retarget_lock_acquire_recursive>
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	f7ff ff59 	bl	800cb54 <__sflush_r>
 800cca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cca4:	07da      	lsls	r2, r3, #31
 800cca6:	4605      	mov	r5, r0
 800cca8:	d4e0      	bmi.n	800cc6c <_fflush_r+0xc>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	059b      	lsls	r3, r3, #22
 800ccae:	d4dd      	bmi.n	800cc6c <_fflush_r+0xc>
 800ccb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb2:	f000 f90d 	bl	800ced0 <__retarget_lock_release_recursive>
 800ccb6:	e7d9      	b.n	800cc6c <_fflush_r+0xc>
 800ccb8:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <_fflush_r+0x70>)
 800ccba:	429c      	cmp	r4, r3
 800ccbc:	d101      	bne.n	800ccc2 <_fflush_r+0x62>
 800ccbe:	68ac      	ldr	r4, [r5, #8]
 800ccc0:	e7df      	b.n	800cc82 <_fflush_r+0x22>
 800ccc2:	4b04      	ldr	r3, [pc, #16]	; (800ccd4 <_fflush_r+0x74>)
 800ccc4:	429c      	cmp	r4, r3
 800ccc6:	bf08      	it	eq
 800ccc8:	68ec      	ldreq	r4, [r5, #12]
 800ccca:	e7da      	b.n	800cc82 <_fflush_r+0x22>
 800cccc:	0800f610 	.word	0x0800f610
 800ccd0:	0800f630 	.word	0x0800f630
 800ccd4:	0800f5f0 	.word	0x0800f5f0

0800ccd8 <std>:
 800ccd8:	2300      	movs	r3, #0
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	e9c0 3300 	strd	r3, r3, [r0]
 800cce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cce6:	6083      	str	r3, [r0, #8]
 800cce8:	8181      	strh	r1, [r0, #12]
 800ccea:	6643      	str	r3, [r0, #100]	; 0x64
 800ccec:	81c2      	strh	r2, [r0, #14]
 800ccee:	6183      	str	r3, [r0, #24]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	305c      	adds	r0, #92	; 0x5c
 800ccf6:	f7fe f9bd 	bl	800b074 <memset>
 800ccfa:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <std+0x38>)
 800ccfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccfe:	4b05      	ldr	r3, [pc, #20]	; (800cd14 <std+0x3c>)
 800cd00:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd02:	4b05      	ldr	r3, [pc, #20]	; (800cd18 <std+0x40>)
 800cd04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <std+0x44>)
 800cd08:	6224      	str	r4, [r4, #32]
 800cd0a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800d9b9 	.word	0x0800d9b9
 800cd14:	0800d9db 	.word	0x0800d9db
 800cd18:	0800da13 	.word	0x0800da13
 800cd1c:	0800da37 	.word	0x0800da37

0800cd20 <_cleanup_r>:
 800cd20:	4901      	ldr	r1, [pc, #4]	; (800cd28 <_cleanup_r+0x8>)
 800cd22:	f000 b8af 	b.w	800ce84 <_fwalk_reent>
 800cd26:	bf00      	nop
 800cd28:	0800cc61 	.word	0x0800cc61

0800cd2c <__sfmoreglue>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	2268      	movs	r2, #104	; 0x68
 800cd30:	1e4d      	subs	r5, r1, #1
 800cd32:	4355      	muls	r5, r2
 800cd34:	460e      	mov	r6, r1
 800cd36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd3a:	f7fe fa0f 	bl	800b15c <_malloc_r>
 800cd3e:	4604      	mov	r4, r0
 800cd40:	b140      	cbz	r0, 800cd54 <__sfmoreglue+0x28>
 800cd42:	2100      	movs	r1, #0
 800cd44:	e9c0 1600 	strd	r1, r6, [r0]
 800cd48:	300c      	adds	r0, #12
 800cd4a:	60a0      	str	r0, [r4, #8]
 800cd4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd50:	f7fe f990 	bl	800b074 <memset>
 800cd54:	4620      	mov	r0, r4
 800cd56:	bd70      	pop	{r4, r5, r6, pc}

0800cd58 <__sfp_lock_acquire>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__sfp_lock_acquire+0x8>)
 800cd5a:	f000 b8b8 	b.w	800cece <__retarget_lock_acquire_recursive>
 800cd5e:	bf00      	nop
 800cd60:	200008a1 	.word	0x200008a1

0800cd64 <__sfp_lock_release>:
 800cd64:	4801      	ldr	r0, [pc, #4]	; (800cd6c <__sfp_lock_release+0x8>)
 800cd66:	f000 b8b3 	b.w	800ced0 <__retarget_lock_release_recursive>
 800cd6a:	bf00      	nop
 800cd6c:	200008a1 	.word	0x200008a1

0800cd70 <__sinit_lock_acquire>:
 800cd70:	4801      	ldr	r0, [pc, #4]	; (800cd78 <__sinit_lock_acquire+0x8>)
 800cd72:	f000 b8ac 	b.w	800cece <__retarget_lock_acquire_recursive>
 800cd76:	bf00      	nop
 800cd78:	200008a2 	.word	0x200008a2

0800cd7c <__sinit_lock_release>:
 800cd7c:	4801      	ldr	r0, [pc, #4]	; (800cd84 <__sinit_lock_release+0x8>)
 800cd7e:	f000 b8a7 	b.w	800ced0 <__retarget_lock_release_recursive>
 800cd82:	bf00      	nop
 800cd84:	200008a2 	.word	0x200008a2

0800cd88 <__sinit>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	f7ff fff0 	bl	800cd70 <__sinit_lock_acquire>
 800cd90:	69a3      	ldr	r3, [r4, #24]
 800cd92:	b11b      	cbz	r3, 800cd9c <__sinit+0x14>
 800cd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd98:	f7ff bff0 	b.w	800cd7c <__sinit_lock_release>
 800cd9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cda0:	6523      	str	r3, [r4, #80]	; 0x50
 800cda2:	4b13      	ldr	r3, [pc, #76]	; (800cdf0 <__sinit+0x68>)
 800cda4:	4a13      	ldr	r2, [pc, #76]	; (800cdf4 <__sinit+0x6c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cdaa:	42a3      	cmp	r3, r4
 800cdac:	bf04      	itt	eq
 800cdae:	2301      	moveq	r3, #1
 800cdb0:	61a3      	streq	r3, [r4, #24]
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f000 f820 	bl	800cdf8 <__sfp>
 800cdb8:	6060      	str	r0, [r4, #4]
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 f81c 	bl	800cdf8 <__sfp>
 800cdc0:	60a0      	str	r0, [r4, #8]
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f000 f818 	bl	800cdf8 <__sfp>
 800cdc8:	2200      	movs	r2, #0
 800cdca:	60e0      	str	r0, [r4, #12]
 800cdcc:	2104      	movs	r1, #4
 800cdce:	6860      	ldr	r0, [r4, #4]
 800cdd0:	f7ff ff82 	bl	800ccd8 <std>
 800cdd4:	68a0      	ldr	r0, [r4, #8]
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	2109      	movs	r1, #9
 800cdda:	f7ff ff7d 	bl	800ccd8 <std>
 800cdde:	68e0      	ldr	r0, [r4, #12]
 800cde0:	2202      	movs	r2, #2
 800cde2:	2112      	movs	r1, #18
 800cde4:	f7ff ff78 	bl	800ccd8 <std>
 800cde8:	2301      	movs	r3, #1
 800cdea:	61a3      	str	r3, [r4, #24]
 800cdec:	e7d2      	b.n	800cd94 <__sinit+0xc>
 800cdee:	bf00      	nop
 800cdf0:	0800f528 	.word	0x0800f528
 800cdf4:	0800cd21 	.word	0x0800cd21

0800cdf8 <__sfp>:
 800cdf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdfa:	4607      	mov	r7, r0
 800cdfc:	f7ff ffac 	bl	800cd58 <__sfp_lock_acquire>
 800ce00:	4b1e      	ldr	r3, [pc, #120]	; (800ce7c <__sfp+0x84>)
 800ce02:	681e      	ldr	r6, [r3, #0]
 800ce04:	69b3      	ldr	r3, [r6, #24]
 800ce06:	b913      	cbnz	r3, 800ce0e <__sfp+0x16>
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f7ff ffbd 	bl	800cd88 <__sinit>
 800ce0e:	3648      	adds	r6, #72	; 0x48
 800ce10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce14:	3b01      	subs	r3, #1
 800ce16:	d503      	bpl.n	800ce20 <__sfp+0x28>
 800ce18:	6833      	ldr	r3, [r6, #0]
 800ce1a:	b30b      	cbz	r3, 800ce60 <__sfp+0x68>
 800ce1c:	6836      	ldr	r6, [r6, #0]
 800ce1e:	e7f7      	b.n	800ce10 <__sfp+0x18>
 800ce20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce24:	b9d5      	cbnz	r5, 800ce5c <__sfp+0x64>
 800ce26:	4b16      	ldr	r3, [pc, #88]	; (800ce80 <__sfp+0x88>)
 800ce28:	60e3      	str	r3, [r4, #12]
 800ce2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce2e:	6665      	str	r5, [r4, #100]	; 0x64
 800ce30:	f000 f84c 	bl	800cecc <__retarget_lock_init_recursive>
 800ce34:	f7ff ff96 	bl	800cd64 <__sfp_lock_release>
 800ce38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce40:	6025      	str	r5, [r4, #0]
 800ce42:	61a5      	str	r5, [r4, #24]
 800ce44:	2208      	movs	r2, #8
 800ce46:	4629      	mov	r1, r5
 800ce48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce4c:	f7fe f912 	bl	800b074 <memset>
 800ce50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce58:	4620      	mov	r0, r4
 800ce5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce5c:	3468      	adds	r4, #104	; 0x68
 800ce5e:	e7d9      	b.n	800ce14 <__sfp+0x1c>
 800ce60:	2104      	movs	r1, #4
 800ce62:	4638      	mov	r0, r7
 800ce64:	f7ff ff62 	bl	800cd2c <__sfmoreglue>
 800ce68:	4604      	mov	r4, r0
 800ce6a:	6030      	str	r0, [r6, #0]
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d1d5      	bne.n	800ce1c <__sfp+0x24>
 800ce70:	f7ff ff78 	bl	800cd64 <__sfp_lock_release>
 800ce74:	230c      	movs	r3, #12
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	e7ee      	b.n	800ce58 <__sfp+0x60>
 800ce7a:	bf00      	nop
 800ce7c:	0800f528 	.word	0x0800f528
 800ce80:	ffff0001 	.word	0xffff0001

0800ce84 <_fwalk_reent>:
 800ce84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce88:	4606      	mov	r6, r0
 800ce8a:	4688      	mov	r8, r1
 800ce8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce90:	2700      	movs	r7, #0
 800ce92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce96:	f1b9 0901 	subs.w	r9, r9, #1
 800ce9a:	d505      	bpl.n	800cea8 <_fwalk_reent+0x24>
 800ce9c:	6824      	ldr	r4, [r4, #0]
 800ce9e:	2c00      	cmp	r4, #0
 800cea0:	d1f7      	bne.n	800ce92 <_fwalk_reent+0xe>
 800cea2:	4638      	mov	r0, r7
 800cea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea8:	89ab      	ldrh	r3, [r5, #12]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d907      	bls.n	800cebe <_fwalk_reent+0x3a>
 800ceae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	d003      	beq.n	800cebe <_fwalk_reent+0x3a>
 800ceb6:	4629      	mov	r1, r5
 800ceb8:	4630      	mov	r0, r6
 800ceba:	47c0      	blx	r8
 800cebc:	4307      	orrs	r7, r0
 800cebe:	3568      	adds	r5, #104	; 0x68
 800cec0:	e7e9      	b.n	800ce96 <_fwalk_reent+0x12>
	...

0800cec4 <_localeconv_r>:
 800cec4:	4800      	ldr	r0, [pc, #0]	; (800cec8 <_localeconv_r+0x4>)
 800cec6:	4770      	bx	lr
 800cec8:	20000164 	.word	0x20000164

0800cecc <__retarget_lock_init_recursive>:
 800cecc:	4770      	bx	lr

0800cece <__retarget_lock_acquire_recursive>:
 800cece:	4770      	bx	lr

0800ced0 <__retarget_lock_release_recursive>:
 800ced0:	4770      	bx	lr

0800ced2 <__swhatbuf_r>:
 800ced2:	b570      	push	{r4, r5, r6, lr}
 800ced4:	460e      	mov	r6, r1
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	2900      	cmp	r1, #0
 800cedc:	b096      	sub	sp, #88	; 0x58
 800cede:	4614      	mov	r4, r2
 800cee0:	461d      	mov	r5, r3
 800cee2:	da08      	bge.n	800cef6 <__swhatbuf_r+0x24>
 800cee4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cee8:	2200      	movs	r2, #0
 800ceea:	602a      	str	r2, [r5, #0]
 800ceec:	061a      	lsls	r2, r3, #24
 800ceee:	d410      	bmi.n	800cf12 <__swhatbuf_r+0x40>
 800cef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cef4:	e00e      	b.n	800cf14 <__swhatbuf_r+0x42>
 800cef6:	466a      	mov	r2, sp
 800cef8:	f000 fdf4 	bl	800dae4 <_fstat_r>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	dbf1      	blt.n	800cee4 <__swhatbuf_r+0x12>
 800cf00:	9a01      	ldr	r2, [sp, #4]
 800cf02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf0a:	425a      	negs	r2, r3
 800cf0c:	415a      	adcs	r2, r3
 800cf0e:	602a      	str	r2, [r5, #0]
 800cf10:	e7ee      	b.n	800cef0 <__swhatbuf_r+0x1e>
 800cf12:	2340      	movs	r3, #64	; 0x40
 800cf14:	2000      	movs	r0, #0
 800cf16:	6023      	str	r3, [r4, #0]
 800cf18:	b016      	add	sp, #88	; 0x58
 800cf1a:	bd70      	pop	{r4, r5, r6, pc}

0800cf1c <__smakebuf_r>:
 800cf1c:	898b      	ldrh	r3, [r1, #12]
 800cf1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf20:	079d      	lsls	r5, r3, #30
 800cf22:	4606      	mov	r6, r0
 800cf24:	460c      	mov	r4, r1
 800cf26:	d507      	bpl.n	800cf38 <__smakebuf_r+0x1c>
 800cf28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	6123      	str	r3, [r4, #16]
 800cf30:	2301      	movs	r3, #1
 800cf32:	6163      	str	r3, [r4, #20]
 800cf34:	b002      	add	sp, #8
 800cf36:	bd70      	pop	{r4, r5, r6, pc}
 800cf38:	ab01      	add	r3, sp, #4
 800cf3a:	466a      	mov	r2, sp
 800cf3c:	f7ff ffc9 	bl	800ced2 <__swhatbuf_r>
 800cf40:	9900      	ldr	r1, [sp, #0]
 800cf42:	4605      	mov	r5, r0
 800cf44:	4630      	mov	r0, r6
 800cf46:	f7fe f909 	bl	800b15c <_malloc_r>
 800cf4a:	b948      	cbnz	r0, 800cf60 <__smakebuf_r+0x44>
 800cf4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf50:	059a      	lsls	r2, r3, #22
 800cf52:	d4ef      	bmi.n	800cf34 <__smakebuf_r+0x18>
 800cf54:	f023 0303 	bic.w	r3, r3, #3
 800cf58:	f043 0302 	orr.w	r3, r3, #2
 800cf5c:	81a3      	strh	r3, [r4, #12]
 800cf5e:	e7e3      	b.n	800cf28 <__smakebuf_r+0xc>
 800cf60:	4b0d      	ldr	r3, [pc, #52]	; (800cf98 <__smakebuf_r+0x7c>)
 800cf62:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf64:	89a3      	ldrh	r3, [r4, #12]
 800cf66:	6020      	str	r0, [r4, #0]
 800cf68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	9b00      	ldr	r3, [sp, #0]
 800cf70:	6163      	str	r3, [r4, #20]
 800cf72:	9b01      	ldr	r3, [sp, #4]
 800cf74:	6120      	str	r0, [r4, #16]
 800cf76:	b15b      	cbz	r3, 800cf90 <__smakebuf_r+0x74>
 800cf78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 fdc3 	bl	800db08 <_isatty_r>
 800cf82:	b128      	cbz	r0, 800cf90 <__smakebuf_r+0x74>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	f043 0301 	orr.w	r3, r3, #1
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	89a0      	ldrh	r0, [r4, #12]
 800cf92:	4305      	orrs	r5, r0
 800cf94:	81a5      	strh	r5, [r4, #12]
 800cf96:	e7cd      	b.n	800cf34 <__smakebuf_r+0x18>
 800cf98:	0800cd21 	.word	0x0800cd21

0800cf9c <memcpy>:
 800cf9c:	440a      	add	r2, r1
 800cf9e:	4291      	cmp	r1, r2
 800cfa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfa4:	d100      	bne.n	800cfa8 <memcpy+0xc>
 800cfa6:	4770      	bx	lr
 800cfa8:	b510      	push	{r4, lr}
 800cfaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb2:	4291      	cmp	r1, r2
 800cfb4:	d1f9      	bne.n	800cfaa <memcpy+0xe>
 800cfb6:	bd10      	pop	{r4, pc}

0800cfb8 <__malloc_lock>:
 800cfb8:	4801      	ldr	r0, [pc, #4]	; (800cfc0 <__malloc_lock+0x8>)
 800cfba:	f7ff bf88 	b.w	800cece <__retarget_lock_acquire_recursive>
 800cfbe:	bf00      	nop
 800cfc0:	200008a0 	.word	0x200008a0

0800cfc4 <__malloc_unlock>:
 800cfc4:	4801      	ldr	r0, [pc, #4]	; (800cfcc <__malloc_unlock+0x8>)
 800cfc6:	f7ff bf83 	b.w	800ced0 <__retarget_lock_release_recursive>
 800cfca:	bf00      	nop
 800cfcc:	200008a0 	.word	0x200008a0

0800cfd0 <_Balloc>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	460d      	mov	r5, r1
 800cfd8:	b976      	cbnz	r6, 800cff8 <_Balloc+0x28>
 800cfda:	2010      	movs	r0, #16
 800cfdc:	f7fe f842 	bl	800b064 <malloc>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfe4:	b920      	cbnz	r0, 800cff0 <_Balloc+0x20>
 800cfe6:	4b18      	ldr	r3, [pc, #96]	; (800d048 <_Balloc+0x78>)
 800cfe8:	4818      	ldr	r0, [pc, #96]	; (800d04c <_Balloc+0x7c>)
 800cfea:	2166      	movs	r1, #102	; 0x66
 800cfec:	f000 fd3a 	bl	800da64 <__assert_func>
 800cff0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cff4:	6006      	str	r6, [r0, #0]
 800cff6:	60c6      	str	r6, [r0, #12]
 800cff8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cffa:	68f3      	ldr	r3, [r6, #12]
 800cffc:	b183      	cbz	r3, 800d020 <_Balloc+0x50>
 800cffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d006:	b9b8      	cbnz	r0, 800d038 <_Balloc+0x68>
 800d008:	2101      	movs	r1, #1
 800d00a:	fa01 f605 	lsl.w	r6, r1, r5
 800d00e:	1d72      	adds	r2, r6, #5
 800d010:	0092      	lsls	r2, r2, #2
 800d012:	4620      	mov	r0, r4
 800d014:	f000 fb60 	bl	800d6d8 <_calloc_r>
 800d018:	b160      	cbz	r0, 800d034 <_Balloc+0x64>
 800d01a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d01e:	e00e      	b.n	800d03e <_Balloc+0x6e>
 800d020:	2221      	movs	r2, #33	; 0x21
 800d022:	2104      	movs	r1, #4
 800d024:	4620      	mov	r0, r4
 800d026:	f000 fb57 	bl	800d6d8 <_calloc_r>
 800d02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d02c:	60f0      	str	r0, [r6, #12]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1e4      	bne.n	800cffe <_Balloc+0x2e>
 800d034:	2000      	movs	r0, #0
 800d036:	bd70      	pop	{r4, r5, r6, pc}
 800d038:	6802      	ldr	r2, [r0, #0]
 800d03a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d03e:	2300      	movs	r3, #0
 800d040:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d044:	e7f7      	b.n	800d036 <_Balloc+0x66>
 800d046:	bf00      	nop
 800d048:	0800f56d 	.word	0x0800f56d
 800d04c:	0800f650 	.word	0x0800f650

0800d050 <_Bfree>:
 800d050:	b570      	push	{r4, r5, r6, lr}
 800d052:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d054:	4605      	mov	r5, r0
 800d056:	460c      	mov	r4, r1
 800d058:	b976      	cbnz	r6, 800d078 <_Bfree+0x28>
 800d05a:	2010      	movs	r0, #16
 800d05c:	f7fe f802 	bl	800b064 <malloc>
 800d060:	4602      	mov	r2, r0
 800d062:	6268      	str	r0, [r5, #36]	; 0x24
 800d064:	b920      	cbnz	r0, 800d070 <_Bfree+0x20>
 800d066:	4b09      	ldr	r3, [pc, #36]	; (800d08c <_Bfree+0x3c>)
 800d068:	4809      	ldr	r0, [pc, #36]	; (800d090 <_Bfree+0x40>)
 800d06a:	218a      	movs	r1, #138	; 0x8a
 800d06c:	f000 fcfa 	bl	800da64 <__assert_func>
 800d070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d074:	6006      	str	r6, [r0, #0]
 800d076:	60c6      	str	r6, [r0, #12]
 800d078:	b13c      	cbz	r4, 800d08a <_Bfree+0x3a>
 800d07a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d07c:	6862      	ldr	r2, [r4, #4]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d084:	6021      	str	r1, [r4, #0]
 800d086:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d08a:	bd70      	pop	{r4, r5, r6, pc}
 800d08c:	0800f56d 	.word	0x0800f56d
 800d090:	0800f650 	.word	0x0800f650

0800d094 <__multadd>:
 800d094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d098:	690d      	ldr	r5, [r1, #16]
 800d09a:	4607      	mov	r7, r0
 800d09c:	460c      	mov	r4, r1
 800d09e:	461e      	mov	r6, r3
 800d0a0:	f101 0c14 	add.w	ip, r1, #20
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0aa:	b299      	uxth	r1, r3
 800d0ac:	fb02 6101 	mla	r1, r2, r1, r6
 800d0b0:	0c1e      	lsrs	r6, r3, #16
 800d0b2:	0c0b      	lsrs	r3, r1, #16
 800d0b4:	fb02 3306 	mla	r3, r2, r6, r3
 800d0b8:	b289      	uxth	r1, r1
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0c0:	4285      	cmp	r5, r0
 800d0c2:	f84c 1b04 	str.w	r1, [ip], #4
 800d0c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0ca:	dcec      	bgt.n	800d0a6 <__multadd+0x12>
 800d0cc:	b30e      	cbz	r6, 800d112 <__multadd+0x7e>
 800d0ce:	68a3      	ldr	r3, [r4, #8]
 800d0d0:	42ab      	cmp	r3, r5
 800d0d2:	dc19      	bgt.n	800d108 <__multadd+0x74>
 800d0d4:	6861      	ldr	r1, [r4, #4]
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	3101      	adds	r1, #1
 800d0da:	f7ff ff79 	bl	800cfd0 <_Balloc>
 800d0de:	4680      	mov	r8, r0
 800d0e0:	b928      	cbnz	r0, 800d0ee <__multadd+0x5a>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <__multadd+0x84>)
 800d0e6:	480d      	ldr	r0, [pc, #52]	; (800d11c <__multadd+0x88>)
 800d0e8:	21b5      	movs	r1, #181	; 0xb5
 800d0ea:	f000 fcbb 	bl	800da64 <__assert_func>
 800d0ee:	6922      	ldr	r2, [r4, #16]
 800d0f0:	3202      	adds	r2, #2
 800d0f2:	f104 010c 	add.w	r1, r4, #12
 800d0f6:	0092      	lsls	r2, r2, #2
 800d0f8:	300c      	adds	r0, #12
 800d0fa:	f7ff ff4f 	bl	800cf9c <memcpy>
 800d0fe:	4621      	mov	r1, r4
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff ffa5 	bl	800d050 <_Bfree>
 800d106:	4644      	mov	r4, r8
 800d108:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d10c:	3501      	adds	r5, #1
 800d10e:	615e      	str	r6, [r3, #20]
 800d110:	6125      	str	r5, [r4, #16]
 800d112:	4620      	mov	r0, r4
 800d114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d118:	0800f5df 	.word	0x0800f5df
 800d11c:	0800f650 	.word	0x0800f650

0800d120 <__hi0bits>:
 800d120:	0c03      	lsrs	r3, r0, #16
 800d122:	041b      	lsls	r3, r3, #16
 800d124:	b9d3      	cbnz	r3, 800d15c <__hi0bits+0x3c>
 800d126:	0400      	lsls	r0, r0, #16
 800d128:	2310      	movs	r3, #16
 800d12a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d12e:	bf04      	itt	eq
 800d130:	0200      	lsleq	r0, r0, #8
 800d132:	3308      	addeq	r3, #8
 800d134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d138:	bf04      	itt	eq
 800d13a:	0100      	lsleq	r0, r0, #4
 800d13c:	3304      	addeq	r3, #4
 800d13e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d142:	bf04      	itt	eq
 800d144:	0080      	lsleq	r0, r0, #2
 800d146:	3302      	addeq	r3, #2
 800d148:	2800      	cmp	r0, #0
 800d14a:	db05      	blt.n	800d158 <__hi0bits+0x38>
 800d14c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d150:	f103 0301 	add.w	r3, r3, #1
 800d154:	bf08      	it	eq
 800d156:	2320      	moveq	r3, #32
 800d158:	4618      	mov	r0, r3
 800d15a:	4770      	bx	lr
 800d15c:	2300      	movs	r3, #0
 800d15e:	e7e4      	b.n	800d12a <__hi0bits+0xa>

0800d160 <__lo0bits>:
 800d160:	6803      	ldr	r3, [r0, #0]
 800d162:	f013 0207 	ands.w	r2, r3, #7
 800d166:	4601      	mov	r1, r0
 800d168:	d00b      	beq.n	800d182 <__lo0bits+0x22>
 800d16a:	07da      	lsls	r2, r3, #31
 800d16c:	d423      	bmi.n	800d1b6 <__lo0bits+0x56>
 800d16e:	0798      	lsls	r0, r3, #30
 800d170:	bf49      	itett	mi
 800d172:	085b      	lsrmi	r3, r3, #1
 800d174:	089b      	lsrpl	r3, r3, #2
 800d176:	2001      	movmi	r0, #1
 800d178:	600b      	strmi	r3, [r1, #0]
 800d17a:	bf5c      	itt	pl
 800d17c:	600b      	strpl	r3, [r1, #0]
 800d17e:	2002      	movpl	r0, #2
 800d180:	4770      	bx	lr
 800d182:	b298      	uxth	r0, r3
 800d184:	b9a8      	cbnz	r0, 800d1b2 <__lo0bits+0x52>
 800d186:	0c1b      	lsrs	r3, r3, #16
 800d188:	2010      	movs	r0, #16
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	b90a      	cbnz	r2, 800d192 <__lo0bits+0x32>
 800d18e:	3008      	adds	r0, #8
 800d190:	0a1b      	lsrs	r3, r3, #8
 800d192:	071a      	lsls	r2, r3, #28
 800d194:	bf04      	itt	eq
 800d196:	091b      	lsreq	r3, r3, #4
 800d198:	3004      	addeq	r0, #4
 800d19a:	079a      	lsls	r2, r3, #30
 800d19c:	bf04      	itt	eq
 800d19e:	089b      	lsreq	r3, r3, #2
 800d1a0:	3002      	addeq	r0, #2
 800d1a2:	07da      	lsls	r2, r3, #31
 800d1a4:	d403      	bmi.n	800d1ae <__lo0bits+0x4e>
 800d1a6:	085b      	lsrs	r3, r3, #1
 800d1a8:	f100 0001 	add.w	r0, r0, #1
 800d1ac:	d005      	beq.n	800d1ba <__lo0bits+0x5a>
 800d1ae:	600b      	str	r3, [r1, #0]
 800d1b0:	4770      	bx	lr
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	e7e9      	b.n	800d18a <__lo0bits+0x2a>
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	4770      	bx	lr
 800d1ba:	2020      	movs	r0, #32
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <__i2b>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	f7ff ff03 	bl	800cfd0 <_Balloc>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	b928      	cbnz	r0, 800d1da <__i2b+0x1a>
 800d1ce:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <__i2b+0x24>)
 800d1d0:	4805      	ldr	r0, [pc, #20]	; (800d1e8 <__i2b+0x28>)
 800d1d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d1d6:	f000 fc45 	bl	800da64 <__assert_func>
 800d1da:	2301      	movs	r3, #1
 800d1dc:	6144      	str	r4, [r0, #20]
 800d1de:	6103      	str	r3, [r0, #16]
 800d1e0:	bd10      	pop	{r4, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0800f5df 	.word	0x0800f5df
 800d1e8:	0800f650 	.word	0x0800f650

0800d1ec <__multiply>:
 800d1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f0:	4691      	mov	r9, r2
 800d1f2:	690a      	ldr	r2, [r1, #16]
 800d1f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	bfb8      	it	lt
 800d1fc:	460b      	movlt	r3, r1
 800d1fe:	460c      	mov	r4, r1
 800d200:	bfbc      	itt	lt
 800d202:	464c      	movlt	r4, r9
 800d204:	4699      	movlt	r9, r3
 800d206:	6927      	ldr	r7, [r4, #16]
 800d208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d20c:	68a3      	ldr	r3, [r4, #8]
 800d20e:	6861      	ldr	r1, [r4, #4]
 800d210:	eb07 060a 	add.w	r6, r7, sl
 800d214:	42b3      	cmp	r3, r6
 800d216:	b085      	sub	sp, #20
 800d218:	bfb8      	it	lt
 800d21a:	3101      	addlt	r1, #1
 800d21c:	f7ff fed8 	bl	800cfd0 <_Balloc>
 800d220:	b930      	cbnz	r0, 800d230 <__multiply+0x44>
 800d222:	4602      	mov	r2, r0
 800d224:	4b44      	ldr	r3, [pc, #272]	; (800d338 <__multiply+0x14c>)
 800d226:	4845      	ldr	r0, [pc, #276]	; (800d33c <__multiply+0x150>)
 800d228:	f240 115d 	movw	r1, #349	; 0x15d
 800d22c:	f000 fc1a 	bl	800da64 <__assert_func>
 800d230:	f100 0514 	add.w	r5, r0, #20
 800d234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d238:	462b      	mov	r3, r5
 800d23a:	2200      	movs	r2, #0
 800d23c:	4543      	cmp	r3, r8
 800d23e:	d321      	bcc.n	800d284 <__multiply+0x98>
 800d240:	f104 0314 	add.w	r3, r4, #20
 800d244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d248:	f109 0314 	add.w	r3, r9, #20
 800d24c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d250:	9202      	str	r2, [sp, #8]
 800d252:	1b3a      	subs	r2, r7, r4
 800d254:	3a15      	subs	r2, #21
 800d256:	f022 0203 	bic.w	r2, r2, #3
 800d25a:	3204      	adds	r2, #4
 800d25c:	f104 0115 	add.w	r1, r4, #21
 800d260:	428f      	cmp	r7, r1
 800d262:	bf38      	it	cc
 800d264:	2204      	movcc	r2, #4
 800d266:	9201      	str	r2, [sp, #4]
 800d268:	9a02      	ldr	r2, [sp, #8]
 800d26a:	9303      	str	r3, [sp, #12]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d80c      	bhi.n	800d28a <__multiply+0x9e>
 800d270:	2e00      	cmp	r6, #0
 800d272:	dd03      	ble.n	800d27c <__multiply+0x90>
 800d274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d05a      	beq.n	800d332 <__multiply+0x146>
 800d27c:	6106      	str	r6, [r0, #16]
 800d27e:	b005      	add	sp, #20
 800d280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d284:	f843 2b04 	str.w	r2, [r3], #4
 800d288:	e7d8      	b.n	800d23c <__multiply+0x50>
 800d28a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d28e:	f1ba 0f00 	cmp.w	sl, #0
 800d292:	d024      	beq.n	800d2de <__multiply+0xf2>
 800d294:	f104 0e14 	add.w	lr, r4, #20
 800d298:	46a9      	mov	r9, r5
 800d29a:	f04f 0c00 	mov.w	ip, #0
 800d29e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2a2:	f8d9 1000 	ldr.w	r1, [r9]
 800d2a6:	fa1f fb82 	uxth.w	fp, r2
 800d2aa:	b289      	uxth	r1, r1
 800d2ac:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2b4:	f8d9 2000 	ldr.w	r2, [r9]
 800d2b8:	4461      	add	r1, ip
 800d2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2be:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2c6:	b289      	uxth	r1, r1
 800d2c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d2cc:	4577      	cmp	r7, lr
 800d2ce:	f849 1b04 	str.w	r1, [r9], #4
 800d2d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2d6:	d8e2      	bhi.n	800d29e <__multiply+0xb2>
 800d2d8:	9a01      	ldr	r2, [sp, #4]
 800d2da:	f845 c002 	str.w	ip, [r5, r2]
 800d2de:	9a03      	ldr	r2, [sp, #12]
 800d2e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d2e4:	3304      	adds	r3, #4
 800d2e6:	f1b9 0f00 	cmp.w	r9, #0
 800d2ea:	d020      	beq.n	800d32e <__multiply+0x142>
 800d2ec:	6829      	ldr	r1, [r5, #0]
 800d2ee:	f104 0c14 	add.w	ip, r4, #20
 800d2f2:	46ae      	mov	lr, r5
 800d2f4:	f04f 0a00 	mov.w	sl, #0
 800d2f8:	f8bc b000 	ldrh.w	fp, [ip]
 800d2fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d300:	fb09 220b 	mla	r2, r9, fp, r2
 800d304:	4492      	add	sl, r2
 800d306:	b289      	uxth	r1, r1
 800d308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d30c:	f84e 1b04 	str.w	r1, [lr], #4
 800d310:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d314:	f8be 1000 	ldrh.w	r1, [lr]
 800d318:	0c12      	lsrs	r2, r2, #16
 800d31a:	fb09 1102 	mla	r1, r9, r2, r1
 800d31e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d322:	4567      	cmp	r7, ip
 800d324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d328:	d8e6      	bhi.n	800d2f8 <__multiply+0x10c>
 800d32a:	9a01      	ldr	r2, [sp, #4]
 800d32c:	50a9      	str	r1, [r5, r2]
 800d32e:	3504      	adds	r5, #4
 800d330:	e79a      	b.n	800d268 <__multiply+0x7c>
 800d332:	3e01      	subs	r6, #1
 800d334:	e79c      	b.n	800d270 <__multiply+0x84>
 800d336:	bf00      	nop
 800d338:	0800f5df 	.word	0x0800f5df
 800d33c:	0800f650 	.word	0x0800f650

0800d340 <__pow5mult>:
 800d340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d344:	4615      	mov	r5, r2
 800d346:	f012 0203 	ands.w	r2, r2, #3
 800d34a:	4606      	mov	r6, r0
 800d34c:	460f      	mov	r7, r1
 800d34e:	d007      	beq.n	800d360 <__pow5mult+0x20>
 800d350:	4c25      	ldr	r4, [pc, #148]	; (800d3e8 <__pow5mult+0xa8>)
 800d352:	3a01      	subs	r2, #1
 800d354:	2300      	movs	r3, #0
 800d356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d35a:	f7ff fe9b 	bl	800d094 <__multadd>
 800d35e:	4607      	mov	r7, r0
 800d360:	10ad      	asrs	r5, r5, #2
 800d362:	d03d      	beq.n	800d3e0 <__pow5mult+0xa0>
 800d364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d366:	b97c      	cbnz	r4, 800d388 <__pow5mult+0x48>
 800d368:	2010      	movs	r0, #16
 800d36a:	f7fd fe7b 	bl	800b064 <malloc>
 800d36e:	4602      	mov	r2, r0
 800d370:	6270      	str	r0, [r6, #36]	; 0x24
 800d372:	b928      	cbnz	r0, 800d380 <__pow5mult+0x40>
 800d374:	4b1d      	ldr	r3, [pc, #116]	; (800d3ec <__pow5mult+0xac>)
 800d376:	481e      	ldr	r0, [pc, #120]	; (800d3f0 <__pow5mult+0xb0>)
 800d378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d37c:	f000 fb72 	bl	800da64 <__assert_func>
 800d380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d384:	6004      	str	r4, [r0, #0]
 800d386:	60c4      	str	r4, [r0, #12]
 800d388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d38c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d390:	b94c      	cbnz	r4, 800d3a6 <__pow5mult+0x66>
 800d392:	f240 2171 	movw	r1, #625	; 0x271
 800d396:	4630      	mov	r0, r6
 800d398:	f7ff ff12 	bl	800d1c0 <__i2b>
 800d39c:	2300      	movs	r3, #0
 800d39e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3a2:	4604      	mov	r4, r0
 800d3a4:	6003      	str	r3, [r0, #0]
 800d3a6:	f04f 0900 	mov.w	r9, #0
 800d3aa:	07eb      	lsls	r3, r5, #31
 800d3ac:	d50a      	bpl.n	800d3c4 <__pow5mult+0x84>
 800d3ae:	4639      	mov	r1, r7
 800d3b0:	4622      	mov	r2, r4
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f7ff ff1a 	bl	800d1ec <__multiply>
 800d3b8:	4639      	mov	r1, r7
 800d3ba:	4680      	mov	r8, r0
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f7ff fe47 	bl	800d050 <_Bfree>
 800d3c2:	4647      	mov	r7, r8
 800d3c4:	106d      	asrs	r5, r5, #1
 800d3c6:	d00b      	beq.n	800d3e0 <__pow5mult+0xa0>
 800d3c8:	6820      	ldr	r0, [r4, #0]
 800d3ca:	b938      	cbnz	r0, 800d3dc <__pow5mult+0x9c>
 800d3cc:	4622      	mov	r2, r4
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff ff0b 	bl	800d1ec <__multiply>
 800d3d6:	6020      	str	r0, [r4, #0]
 800d3d8:	f8c0 9000 	str.w	r9, [r0]
 800d3dc:	4604      	mov	r4, r0
 800d3de:	e7e4      	b.n	800d3aa <__pow5mult+0x6a>
 800d3e0:	4638      	mov	r0, r7
 800d3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3e6:	bf00      	nop
 800d3e8:	0800f7a0 	.word	0x0800f7a0
 800d3ec:	0800f56d 	.word	0x0800f56d
 800d3f0:	0800f650 	.word	0x0800f650

0800d3f4 <__lshift>:
 800d3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	6849      	ldr	r1, [r1, #4]
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d402:	68a3      	ldr	r3, [r4, #8]
 800d404:	4607      	mov	r7, r0
 800d406:	4691      	mov	r9, r2
 800d408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d40c:	f108 0601 	add.w	r6, r8, #1
 800d410:	42b3      	cmp	r3, r6
 800d412:	db0b      	blt.n	800d42c <__lshift+0x38>
 800d414:	4638      	mov	r0, r7
 800d416:	f7ff fddb 	bl	800cfd0 <_Balloc>
 800d41a:	4605      	mov	r5, r0
 800d41c:	b948      	cbnz	r0, 800d432 <__lshift+0x3e>
 800d41e:	4602      	mov	r2, r0
 800d420:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <__lshift+0xd8>)
 800d422:	482b      	ldr	r0, [pc, #172]	; (800d4d0 <__lshift+0xdc>)
 800d424:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d428:	f000 fb1c 	bl	800da64 <__assert_func>
 800d42c:	3101      	adds	r1, #1
 800d42e:	005b      	lsls	r3, r3, #1
 800d430:	e7ee      	b.n	800d410 <__lshift+0x1c>
 800d432:	2300      	movs	r3, #0
 800d434:	f100 0114 	add.w	r1, r0, #20
 800d438:	f100 0210 	add.w	r2, r0, #16
 800d43c:	4618      	mov	r0, r3
 800d43e:	4553      	cmp	r3, sl
 800d440:	db37      	blt.n	800d4b2 <__lshift+0xbe>
 800d442:	6920      	ldr	r0, [r4, #16]
 800d444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d448:	f104 0314 	add.w	r3, r4, #20
 800d44c:	f019 091f 	ands.w	r9, r9, #31
 800d450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d458:	d02f      	beq.n	800d4ba <__lshift+0xc6>
 800d45a:	f1c9 0e20 	rsb	lr, r9, #32
 800d45e:	468a      	mov	sl, r1
 800d460:	f04f 0c00 	mov.w	ip, #0
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	fa02 f209 	lsl.w	r2, r2, r9
 800d46a:	ea42 020c 	orr.w	r2, r2, ip
 800d46e:	f84a 2b04 	str.w	r2, [sl], #4
 800d472:	f853 2b04 	ldr.w	r2, [r3], #4
 800d476:	4298      	cmp	r0, r3
 800d478:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d47c:	d8f2      	bhi.n	800d464 <__lshift+0x70>
 800d47e:	1b03      	subs	r3, r0, r4
 800d480:	3b15      	subs	r3, #21
 800d482:	f023 0303 	bic.w	r3, r3, #3
 800d486:	3304      	adds	r3, #4
 800d488:	f104 0215 	add.w	r2, r4, #21
 800d48c:	4290      	cmp	r0, r2
 800d48e:	bf38      	it	cc
 800d490:	2304      	movcc	r3, #4
 800d492:	f841 c003 	str.w	ip, [r1, r3]
 800d496:	f1bc 0f00 	cmp.w	ip, #0
 800d49a:	d001      	beq.n	800d4a0 <__lshift+0xac>
 800d49c:	f108 0602 	add.w	r6, r8, #2
 800d4a0:	3e01      	subs	r6, #1
 800d4a2:	4638      	mov	r0, r7
 800d4a4:	612e      	str	r6, [r5, #16]
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	f7ff fdd2 	bl	800d050 <_Bfree>
 800d4ac:	4628      	mov	r0, r5
 800d4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	e7c1      	b.n	800d43e <__lshift+0x4a>
 800d4ba:	3904      	subs	r1, #4
 800d4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4c4:	4298      	cmp	r0, r3
 800d4c6:	d8f9      	bhi.n	800d4bc <__lshift+0xc8>
 800d4c8:	e7ea      	b.n	800d4a0 <__lshift+0xac>
 800d4ca:	bf00      	nop
 800d4cc:	0800f5df 	.word	0x0800f5df
 800d4d0:	0800f650 	.word	0x0800f650

0800d4d4 <__mcmp>:
 800d4d4:	b530      	push	{r4, r5, lr}
 800d4d6:	6902      	ldr	r2, [r0, #16]
 800d4d8:	690c      	ldr	r4, [r1, #16]
 800d4da:	1b12      	subs	r2, r2, r4
 800d4dc:	d10e      	bne.n	800d4fc <__mcmp+0x28>
 800d4de:	f100 0314 	add.w	r3, r0, #20
 800d4e2:	3114      	adds	r1, #20
 800d4e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d4e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d4ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4f4:	42a5      	cmp	r5, r4
 800d4f6:	d003      	beq.n	800d500 <__mcmp+0x2c>
 800d4f8:	d305      	bcc.n	800d506 <__mcmp+0x32>
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	bd30      	pop	{r4, r5, pc}
 800d500:	4283      	cmp	r3, r0
 800d502:	d3f3      	bcc.n	800d4ec <__mcmp+0x18>
 800d504:	e7fa      	b.n	800d4fc <__mcmp+0x28>
 800d506:	f04f 32ff 	mov.w	r2, #4294967295
 800d50a:	e7f7      	b.n	800d4fc <__mcmp+0x28>

0800d50c <__mdiff>:
 800d50c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d510:	460c      	mov	r4, r1
 800d512:	4606      	mov	r6, r0
 800d514:	4611      	mov	r1, r2
 800d516:	4620      	mov	r0, r4
 800d518:	4690      	mov	r8, r2
 800d51a:	f7ff ffdb 	bl	800d4d4 <__mcmp>
 800d51e:	1e05      	subs	r5, r0, #0
 800d520:	d110      	bne.n	800d544 <__mdiff+0x38>
 800d522:	4629      	mov	r1, r5
 800d524:	4630      	mov	r0, r6
 800d526:	f7ff fd53 	bl	800cfd0 <_Balloc>
 800d52a:	b930      	cbnz	r0, 800d53a <__mdiff+0x2e>
 800d52c:	4b3a      	ldr	r3, [pc, #232]	; (800d618 <__mdiff+0x10c>)
 800d52e:	4602      	mov	r2, r0
 800d530:	f240 2132 	movw	r1, #562	; 0x232
 800d534:	4839      	ldr	r0, [pc, #228]	; (800d61c <__mdiff+0x110>)
 800d536:	f000 fa95 	bl	800da64 <__assert_func>
 800d53a:	2301      	movs	r3, #1
 800d53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d544:	bfa4      	itt	ge
 800d546:	4643      	movge	r3, r8
 800d548:	46a0      	movge	r8, r4
 800d54a:	4630      	mov	r0, r6
 800d54c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d550:	bfa6      	itte	ge
 800d552:	461c      	movge	r4, r3
 800d554:	2500      	movge	r5, #0
 800d556:	2501      	movlt	r5, #1
 800d558:	f7ff fd3a 	bl	800cfd0 <_Balloc>
 800d55c:	b920      	cbnz	r0, 800d568 <__mdiff+0x5c>
 800d55e:	4b2e      	ldr	r3, [pc, #184]	; (800d618 <__mdiff+0x10c>)
 800d560:	4602      	mov	r2, r0
 800d562:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d566:	e7e5      	b.n	800d534 <__mdiff+0x28>
 800d568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d56c:	6926      	ldr	r6, [r4, #16]
 800d56e:	60c5      	str	r5, [r0, #12]
 800d570:	f104 0914 	add.w	r9, r4, #20
 800d574:	f108 0514 	add.w	r5, r8, #20
 800d578:	f100 0e14 	add.w	lr, r0, #20
 800d57c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d584:	f108 0210 	add.w	r2, r8, #16
 800d588:	46f2      	mov	sl, lr
 800d58a:	2100      	movs	r1, #0
 800d58c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d594:	fa1f f883 	uxth.w	r8, r3
 800d598:	fa11 f18b 	uxtah	r1, r1, fp
 800d59c:	0c1b      	lsrs	r3, r3, #16
 800d59e:	eba1 0808 	sub.w	r8, r1, r8
 800d5a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5aa:	fa1f f888 	uxth.w	r8, r8
 800d5ae:	1419      	asrs	r1, r3, #16
 800d5b0:	454e      	cmp	r6, r9
 800d5b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5b6:	f84a 3b04 	str.w	r3, [sl], #4
 800d5ba:	d8e7      	bhi.n	800d58c <__mdiff+0x80>
 800d5bc:	1b33      	subs	r3, r6, r4
 800d5be:	3b15      	subs	r3, #21
 800d5c0:	f023 0303 	bic.w	r3, r3, #3
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	3415      	adds	r4, #21
 800d5c8:	42a6      	cmp	r6, r4
 800d5ca:	bf38      	it	cc
 800d5cc:	2304      	movcc	r3, #4
 800d5ce:	441d      	add	r5, r3
 800d5d0:	4473      	add	r3, lr
 800d5d2:	469e      	mov	lr, r3
 800d5d4:	462e      	mov	r6, r5
 800d5d6:	4566      	cmp	r6, ip
 800d5d8:	d30e      	bcc.n	800d5f8 <__mdiff+0xec>
 800d5da:	f10c 0203 	add.w	r2, ip, #3
 800d5de:	1b52      	subs	r2, r2, r5
 800d5e0:	f022 0203 	bic.w	r2, r2, #3
 800d5e4:	3d03      	subs	r5, #3
 800d5e6:	45ac      	cmp	ip, r5
 800d5e8:	bf38      	it	cc
 800d5ea:	2200      	movcc	r2, #0
 800d5ec:	441a      	add	r2, r3
 800d5ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5f2:	b17b      	cbz	r3, 800d614 <__mdiff+0x108>
 800d5f4:	6107      	str	r7, [r0, #16]
 800d5f6:	e7a3      	b.n	800d540 <__mdiff+0x34>
 800d5f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800d5fc:	fa11 f288 	uxtah	r2, r1, r8
 800d600:	1414      	asrs	r4, r2, #16
 800d602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d606:	b292      	uxth	r2, r2
 800d608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d60c:	f84e 2b04 	str.w	r2, [lr], #4
 800d610:	1421      	asrs	r1, r4, #16
 800d612:	e7e0      	b.n	800d5d6 <__mdiff+0xca>
 800d614:	3f01      	subs	r7, #1
 800d616:	e7ea      	b.n	800d5ee <__mdiff+0xe2>
 800d618:	0800f5df 	.word	0x0800f5df
 800d61c:	0800f650 	.word	0x0800f650

0800d620 <__d2b>:
 800d620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d624:	4689      	mov	r9, r1
 800d626:	2101      	movs	r1, #1
 800d628:	ec57 6b10 	vmov	r6, r7, d0
 800d62c:	4690      	mov	r8, r2
 800d62e:	f7ff fccf 	bl	800cfd0 <_Balloc>
 800d632:	4604      	mov	r4, r0
 800d634:	b930      	cbnz	r0, 800d644 <__d2b+0x24>
 800d636:	4602      	mov	r2, r0
 800d638:	4b25      	ldr	r3, [pc, #148]	; (800d6d0 <__d2b+0xb0>)
 800d63a:	4826      	ldr	r0, [pc, #152]	; (800d6d4 <__d2b+0xb4>)
 800d63c:	f240 310a 	movw	r1, #778	; 0x30a
 800d640:	f000 fa10 	bl	800da64 <__assert_func>
 800d644:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d648:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d64c:	bb35      	cbnz	r5, 800d69c <__d2b+0x7c>
 800d64e:	2e00      	cmp	r6, #0
 800d650:	9301      	str	r3, [sp, #4]
 800d652:	d028      	beq.n	800d6a6 <__d2b+0x86>
 800d654:	4668      	mov	r0, sp
 800d656:	9600      	str	r6, [sp, #0]
 800d658:	f7ff fd82 	bl	800d160 <__lo0bits>
 800d65c:	9900      	ldr	r1, [sp, #0]
 800d65e:	b300      	cbz	r0, 800d6a2 <__d2b+0x82>
 800d660:	9a01      	ldr	r2, [sp, #4]
 800d662:	f1c0 0320 	rsb	r3, r0, #32
 800d666:	fa02 f303 	lsl.w	r3, r2, r3
 800d66a:	430b      	orrs	r3, r1
 800d66c:	40c2      	lsrs	r2, r0
 800d66e:	6163      	str	r3, [r4, #20]
 800d670:	9201      	str	r2, [sp, #4]
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	61a3      	str	r3, [r4, #24]
 800d676:	2b00      	cmp	r3, #0
 800d678:	bf14      	ite	ne
 800d67a:	2202      	movne	r2, #2
 800d67c:	2201      	moveq	r2, #1
 800d67e:	6122      	str	r2, [r4, #16]
 800d680:	b1d5      	cbz	r5, 800d6b8 <__d2b+0x98>
 800d682:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d686:	4405      	add	r5, r0
 800d688:	f8c9 5000 	str.w	r5, [r9]
 800d68c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d690:	f8c8 0000 	str.w	r0, [r8]
 800d694:	4620      	mov	r0, r4
 800d696:	b003      	add	sp, #12
 800d698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d69c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d6a0:	e7d5      	b.n	800d64e <__d2b+0x2e>
 800d6a2:	6161      	str	r1, [r4, #20]
 800d6a4:	e7e5      	b.n	800d672 <__d2b+0x52>
 800d6a6:	a801      	add	r0, sp, #4
 800d6a8:	f7ff fd5a 	bl	800d160 <__lo0bits>
 800d6ac:	9b01      	ldr	r3, [sp, #4]
 800d6ae:	6163      	str	r3, [r4, #20]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	6122      	str	r2, [r4, #16]
 800d6b4:	3020      	adds	r0, #32
 800d6b6:	e7e3      	b.n	800d680 <__d2b+0x60>
 800d6b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d6bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6c0:	f8c9 0000 	str.w	r0, [r9]
 800d6c4:	6918      	ldr	r0, [r3, #16]
 800d6c6:	f7ff fd2b 	bl	800d120 <__hi0bits>
 800d6ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d6ce:	e7df      	b.n	800d690 <__d2b+0x70>
 800d6d0:	0800f5df 	.word	0x0800f5df
 800d6d4:	0800f650 	.word	0x0800f650

0800d6d8 <_calloc_r>:
 800d6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d6da:	fba1 2402 	umull	r2, r4, r1, r2
 800d6de:	b94c      	cbnz	r4, 800d6f4 <_calloc_r+0x1c>
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	9201      	str	r2, [sp, #4]
 800d6e4:	f7fd fd3a 	bl	800b15c <_malloc_r>
 800d6e8:	9a01      	ldr	r2, [sp, #4]
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	b930      	cbnz	r0, 800d6fc <_calloc_r+0x24>
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	b003      	add	sp, #12
 800d6f2:	bd30      	pop	{r4, r5, pc}
 800d6f4:	220c      	movs	r2, #12
 800d6f6:	6002      	str	r2, [r0, #0]
 800d6f8:	2500      	movs	r5, #0
 800d6fa:	e7f8      	b.n	800d6ee <_calloc_r+0x16>
 800d6fc:	4621      	mov	r1, r4
 800d6fe:	f7fd fcb9 	bl	800b074 <memset>
 800d702:	e7f4      	b.n	800d6ee <_calloc_r+0x16>

0800d704 <__sfputc_r>:
 800d704:	6893      	ldr	r3, [r2, #8]
 800d706:	3b01      	subs	r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	b410      	push	{r4}
 800d70c:	6093      	str	r3, [r2, #8]
 800d70e:	da08      	bge.n	800d722 <__sfputc_r+0x1e>
 800d710:	6994      	ldr	r4, [r2, #24]
 800d712:	42a3      	cmp	r3, r4
 800d714:	db01      	blt.n	800d71a <__sfputc_r+0x16>
 800d716:	290a      	cmp	r1, #10
 800d718:	d103      	bne.n	800d722 <__sfputc_r+0x1e>
 800d71a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d71e:	f7fe badd 	b.w	800bcdc <__swbuf_r>
 800d722:	6813      	ldr	r3, [r2, #0]
 800d724:	1c58      	adds	r0, r3, #1
 800d726:	6010      	str	r0, [r2, #0]
 800d728:	7019      	strb	r1, [r3, #0]
 800d72a:	4608      	mov	r0, r1
 800d72c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d730:	4770      	bx	lr

0800d732 <__sfputs_r>:
 800d732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d734:	4606      	mov	r6, r0
 800d736:	460f      	mov	r7, r1
 800d738:	4614      	mov	r4, r2
 800d73a:	18d5      	adds	r5, r2, r3
 800d73c:	42ac      	cmp	r4, r5
 800d73e:	d101      	bne.n	800d744 <__sfputs_r+0x12>
 800d740:	2000      	movs	r0, #0
 800d742:	e007      	b.n	800d754 <__sfputs_r+0x22>
 800d744:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d748:	463a      	mov	r2, r7
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7ff ffda 	bl	800d704 <__sfputc_r>
 800d750:	1c43      	adds	r3, r0, #1
 800d752:	d1f3      	bne.n	800d73c <__sfputs_r+0xa>
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d758 <_vfiprintf_r>:
 800d758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d75c:	460d      	mov	r5, r1
 800d75e:	b09d      	sub	sp, #116	; 0x74
 800d760:	4614      	mov	r4, r2
 800d762:	4698      	mov	r8, r3
 800d764:	4606      	mov	r6, r0
 800d766:	b118      	cbz	r0, 800d770 <_vfiprintf_r+0x18>
 800d768:	6983      	ldr	r3, [r0, #24]
 800d76a:	b90b      	cbnz	r3, 800d770 <_vfiprintf_r+0x18>
 800d76c:	f7ff fb0c 	bl	800cd88 <__sinit>
 800d770:	4b89      	ldr	r3, [pc, #548]	; (800d998 <_vfiprintf_r+0x240>)
 800d772:	429d      	cmp	r5, r3
 800d774:	d11b      	bne.n	800d7ae <_vfiprintf_r+0x56>
 800d776:	6875      	ldr	r5, [r6, #4]
 800d778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d77a:	07d9      	lsls	r1, r3, #31
 800d77c:	d405      	bmi.n	800d78a <_vfiprintf_r+0x32>
 800d77e:	89ab      	ldrh	r3, [r5, #12]
 800d780:	059a      	lsls	r2, r3, #22
 800d782:	d402      	bmi.n	800d78a <_vfiprintf_r+0x32>
 800d784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d786:	f7ff fba2 	bl	800cece <__retarget_lock_acquire_recursive>
 800d78a:	89ab      	ldrh	r3, [r5, #12]
 800d78c:	071b      	lsls	r3, r3, #28
 800d78e:	d501      	bpl.n	800d794 <_vfiprintf_r+0x3c>
 800d790:	692b      	ldr	r3, [r5, #16]
 800d792:	b9eb      	cbnz	r3, 800d7d0 <_vfiprintf_r+0x78>
 800d794:	4629      	mov	r1, r5
 800d796:	4630      	mov	r0, r6
 800d798:	f7fe faf2 	bl	800bd80 <__swsetup_r>
 800d79c:	b1c0      	cbz	r0, 800d7d0 <_vfiprintf_r+0x78>
 800d79e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7a0:	07dc      	lsls	r4, r3, #31
 800d7a2:	d50e      	bpl.n	800d7c2 <_vfiprintf_r+0x6a>
 800d7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7a8:	b01d      	add	sp, #116	; 0x74
 800d7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ae:	4b7b      	ldr	r3, [pc, #492]	; (800d99c <_vfiprintf_r+0x244>)
 800d7b0:	429d      	cmp	r5, r3
 800d7b2:	d101      	bne.n	800d7b8 <_vfiprintf_r+0x60>
 800d7b4:	68b5      	ldr	r5, [r6, #8]
 800d7b6:	e7df      	b.n	800d778 <_vfiprintf_r+0x20>
 800d7b8:	4b79      	ldr	r3, [pc, #484]	; (800d9a0 <_vfiprintf_r+0x248>)
 800d7ba:	429d      	cmp	r5, r3
 800d7bc:	bf08      	it	eq
 800d7be:	68f5      	ldreq	r5, [r6, #12]
 800d7c0:	e7da      	b.n	800d778 <_vfiprintf_r+0x20>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	0598      	lsls	r0, r3, #22
 800d7c6:	d4ed      	bmi.n	800d7a4 <_vfiprintf_r+0x4c>
 800d7c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7ca:	f7ff fb81 	bl	800ced0 <__retarget_lock_release_recursive>
 800d7ce:	e7e9      	b.n	800d7a4 <_vfiprintf_r+0x4c>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7d4:	2320      	movs	r3, #32
 800d7d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7de:	2330      	movs	r3, #48	; 0x30
 800d7e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d9a4 <_vfiprintf_r+0x24c>
 800d7e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7e8:	f04f 0901 	mov.w	r9, #1
 800d7ec:	4623      	mov	r3, r4
 800d7ee:	469a      	mov	sl, r3
 800d7f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7f4:	b10a      	cbz	r2, 800d7fa <_vfiprintf_r+0xa2>
 800d7f6:	2a25      	cmp	r2, #37	; 0x25
 800d7f8:	d1f9      	bne.n	800d7ee <_vfiprintf_r+0x96>
 800d7fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d7fe:	d00b      	beq.n	800d818 <_vfiprintf_r+0xc0>
 800d800:	465b      	mov	r3, fp
 800d802:	4622      	mov	r2, r4
 800d804:	4629      	mov	r1, r5
 800d806:	4630      	mov	r0, r6
 800d808:	f7ff ff93 	bl	800d732 <__sfputs_r>
 800d80c:	3001      	adds	r0, #1
 800d80e:	f000 80aa 	beq.w	800d966 <_vfiprintf_r+0x20e>
 800d812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d814:	445a      	add	r2, fp
 800d816:	9209      	str	r2, [sp, #36]	; 0x24
 800d818:	f89a 3000 	ldrb.w	r3, [sl]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 80a2 	beq.w	800d966 <_vfiprintf_r+0x20e>
 800d822:	2300      	movs	r3, #0
 800d824:	f04f 32ff 	mov.w	r2, #4294967295
 800d828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d82c:	f10a 0a01 	add.w	sl, sl, #1
 800d830:	9304      	str	r3, [sp, #16]
 800d832:	9307      	str	r3, [sp, #28]
 800d834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d838:	931a      	str	r3, [sp, #104]	; 0x68
 800d83a:	4654      	mov	r4, sl
 800d83c:	2205      	movs	r2, #5
 800d83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d842:	4858      	ldr	r0, [pc, #352]	; (800d9a4 <_vfiprintf_r+0x24c>)
 800d844:	f7f2 fcf4 	bl	8000230 <memchr>
 800d848:	9a04      	ldr	r2, [sp, #16]
 800d84a:	b9d8      	cbnz	r0, 800d884 <_vfiprintf_r+0x12c>
 800d84c:	06d1      	lsls	r1, r2, #27
 800d84e:	bf44      	itt	mi
 800d850:	2320      	movmi	r3, #32
 800d852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d856:	0713      	lsls	r3, r2, #28
 800d858:	bf44      	itt	mi
 800d85a:	232b      	movmi	r3, #43	; 0x2b
 800d85c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d860:	f89a 3000 	ldrb.w	r3, [sl]
 800d864:	2b2a      	cmp	r3, #42	; 0x2a
 800d866:	d015      	beq.n	800d894 <_vfiprintf_r+0x13c>
 800d868:	9a07      	ldr	r2, [sp, #28]
 800d86a:	4654      	mov	r4, sl
 800d86c:	2000      	movs	r0, #0
 800d86e:	f04f 0c0a 	mov.w	ip, #10
 800d872:	4621      	mov	r1, r4
 800d874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d878:	3b30      	subs	r3, #48	; 0x30
 800d87a:	2b09      	cmp	r3, #9
 800d87c:	d94e      	bls.n	800d91c <_vfiprintf_r+0x1c4>
 800d87e:	b1b0      	cbz	r0, 800d8ae <_vfiprintf_r+0x156>
 800d880:	9207      	str	r2, [sp, #28]
 800d882:	e014      	b.n	800d8ae <_vfiprintf_r+0x156>
 800d884:	eba0 0308 	sub.w	r3, r0, r8
 800d888:	fa09 f303 	lsl.w	r3, r9, r3
 800d88c:	4313      	orrs	r3, r2
 800d88e:	9304      	str	r3, [sp, #16]
 800d890:	46a2      	mov	sl, r4
 800d892:	e7d2      	b.n	800d83a <_vfiprintf_r+0xe2>
 800d894:	9b03      	ldr	r3, [sp, #12]
 800d896:	1d19      	adds	r1, r3, #4
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	9103      	str	r1, [sp, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	bfbb      	ittet	lt
 800d8a0:	425b      	neglt	r3, r3
 800d8a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d8a6:	9307      	strge	r3, [sp, #28]
 800d8a8:	9307      	strlt	r3, [sp, #28]
 800d8aa:	bfb8      	it	lt
 800d8ac:	9204      	strlt	r2, [sp, #16]
 800d8ae:	7823      	ldrb	r3, [r4, #0]
 800d8b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d8b2:	d10c      	bne.n	800d8ce <_vfiprintf_r+0x176>
 800d8b4:	7863      	ldrb	r3, [r4, #1]
 800d8b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d8b8:	d135      	bne.n	800d926 <_vfiprintf_r+0x1ce>
 800d8ba:	9b03      	ldr	r3, [sp, #12]
 800d8bc:	1d1a      	adds	r2, r3, #4
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	9203      	str	r2, [sp, #12]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	bfb8      	it	lt
 800d8c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8ca:	3402      	adds	r4, #2
 800d8cc:	9305      	str	r3, [sp, #20]
 800d8ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d9b4 <_vfiprintf_r+0x25c>
 800d8d2:	7821      	ldrb	r1, [r4, #0]
 800d8d4:	2203      	movs	r2, #3
 800d8d6:	4650      	mov	r0, sl
 800d8d8:	f7f2 fcaa 	bl	8000230 <memchr>
 800d8dc:	b140      	cbz	r0, 800d8f0 <_vfiprintf_r+0x198>
 800d8de:	2340      	movs	r3, #64	; 0x40
 800d8e0:	eba0 000a 	sub.w	r0, r0, sl
 800d8e4:	fa03 f000 	lsl.w	r0, r3, r0
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	4303      	orrs	r3, r0
 800d8ec:	3401      	adds	r4, #1
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f4:	482c      	ldr	r0, [pc, #176]	; (800d9a8 <_vfiprintf_r+0x250>)
 800d8f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8fa:	2206      	movs	r2, #6
 800d8fc:	f7f2 fc98 	bl	8000230 <memchr>
 800d900:	2800      	cmp	r0, #0
 800d902:	d03f      	beq.n	800d984 <_vfiprintf_r+0x22c>
 800d904:	4b29      	ldr	r3, [pc, #164]	; (800d9ac <_vfiprintf_r+0x254>)
 800d906:	bb1b      	cbnz	r3, 800d950 <_vfiprintf_r+0x1f8>
 800d908:	9b03      	ldr	r3, [sp, #12]
 800d90a:	3307      	adds	r3, #7
 800d90c:	f023 0307 	bic.w	r3, r3, #7
 800d910:	3308      	adds	r3, #8
 800d912:	9303      	str	r3, [sp, #12]
 800d914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d916:	443b      	add	r3, r7
 800d918:	9309      	str	r3, [sp, #36]	; 0x24
 800d91a:	e767      	b.n	800d7ec <_vfiprintf_r+0x94>
 800d91c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d920:	460c      	mov	r4, r1
 800d922:	2001      	movs	r0, #1
 800d924:	e7a5      	b.n	800d872 <_vfiprintf_r+0x11a>
 800d926:	2300      	movs	r3, #0
 800d928:	3401      	adds	r4, #1
 800d92a:	9305      	str	r3, [sp, #20]
 800d92c:	4619      	mov	r1, r3
 800d92e:	f04f 0c0a 	mov.w	ip, #10
 800d932:	4620      	mov	r0, r4
 800d934:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d938:	3a30      	subs	r2, #48	; 0x30
 800d93a:	2a09      	cmp	r2, #9
 800d93c:	d903      	bls.n	800d946 <_vfiprintf_r+0x1ee>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0c5      	beq.n	800d8ce <_vfiprintf_r+0x176>
 800d942:	9105      	str	r1, [sp, #20]
 800d944:	e7c3      	b.n	800d8ce <_vfiprintf_r+0x176>
 800d946:	fb0c 2101 	mla	r1, ip, r1, r2
 800d94a:	4604      	mov	r4, r0
 800d94c:	2301      	movs	r3, #1
 800d94e:	e7f0      	b.n	800d932 <_vfiprintf_r+0x1da>
 800d950:	ab03      	add	r3, sp, #12
 800d952:	9300      	str	r3, [sp, #0]
 800d954:	462a      	mov	r2, r5
 800d956:	4b16      	ldr	r3, [pc, #88]	; (800d9b0 <_vfiprintf_r+0x258>)
 800d958:	a904      	add	r1, sp, #16
 800d95a:	4630      	mov	r0, r6
 800d95c:	f7fd fd12 	bl	800b384 <_printf_float>
 800d960:	4607      	mov	r7, r0
 800d962:	1c78      	adds	r0, r7, #1
 800d964:	d1d6      	bne.n	800d914 <_vfiprintf_r+0x1bc>
 800d966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d968:	07d9      	lsls	r1, r3, #31
 800d96a:	d405      	bmi.n	800d978 <_vfiprintf_r+0x220>
 800d96c:	89ab      	ldrh	r3, [r5, #12]
 800d96e:	059a      	lsls	r2, r3, #22
 800d970:	d402      	bmi.n	800d978 <_vfiprintf_r+0x220>
 800d972:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d974:	f7ff faac 	bl	800ced0 <__retarget_lock_release_recursive>
 800d978:	89ab      	ldrh	r3, [r5, #12]
 800d97a:	065b      	lsls	r3, r3, #25
 800d97c:	f53f af12 	bmi.w	800d7a4 <_vfiprintf_r+0x4c>
 800d980:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d982:	e711      	b.n	800d7a8 <_vfiprintf_r+0x50>
 800d984:	ab03      	add	r3, sp, #12
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	462a      	mov	r2, r5
 800d98a:	4b09      	ldr	r3, [pc, #36]	; (800d9b0 <_vfiprintf_r+0x258>)
 800d98c:	a904      	add	r1, sp, #16
 800d98e:	4630      	mov	r0, r6
 800d990:	f7fd ff9c 	bl	800b8cc <_printf_i>
 800d994:	e7e4      	b.n	800d960 <_vfiprintf_r+0x208>
 800d996:	bf00      	nop
 800d998:	0800f610 	.word	0x0800f610
 800d99c:	0800f630 	.word	0x0800f630
 800d9a0:	0800f5f0 	.word	0x0800f5f0
 800d9a4:	0800f7ac 	.word	0x0800f7ac
 800d9a8:	0800f7b6 	.word	0x0800f7b6
 800d9ac:	0800b385 	.word	0x0800b385
 800d9b0:	0800d733 	.word	0x0800d733
 800d9b4:	0800f7b2 	.word	0x0800f7b2

0800d9b8 <__sread>:
 800d9b8:	b510      	push	{r4, lr}
 800d9ba:	460c      	mov	r4, r1
 800d9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c0:	f000 f8d6 	bl	800db70 <_read_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	bfab      	itete	ge
 800d9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800d9cc:	181b      	addge	r3, r3, r0
 800d9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9d2:	bfac      	ite	ge
 800d9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9d6:	81a3      	strhlt	r3, [r4, #12]
 800d9d8:	bd10      	pop	{r4, pc}

0800d9da <__swrite>:
 800d9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9de:	461f      	mov	r7, r3
 800d9e0:	898b      	ldrh	r3, [r1, #12]
 800d9e2:	05db      	lsls	r3, r3, #23
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	4616      	mov	r6, r2
 800d9ea:	d505      	bpl.n	800d9f8 <__swrite+0x1e>
 800d9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f0:	2302      	movs	r3, #2
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f000 f898 	bl	800db28 <_lseek_r>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	4632      	mov	r2, r6
 800da06:	463b      	mov	r3, r7
 800da08:	4628      	mov	r0, r5
 800da0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0e:	f000 b817 	b.w	800da40 <_write_r>

0800da12 <__sseek>:
 800da12:	b510      	push	{r4, lr}
 800da14:	460c      	mov	r4, r1
 800da16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da1a:	f000 f885 	bl	800db28 <_lseek_r>
 800da1e:	1c43      	adds	r3, r0, #1
 800da20:	89a3      	ldrh	r3, [r4, #12]
 800da22:	bf15      	itete	ne
 800da24:	6560      	strne	r0, [r4, #84]	; 0x54
 800da26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da2e:	81a3      	strheq	r3, [r4, #12]
 800da30:	bf18      	it	ne
 800da32:	81a3      	strhne	r3, [r4, #12]
 800da34:	bd10      	pop	{r4, pc}

0800da36 <__sclose>:
 800da36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da3a:	f000 b831 	b.w	800daa0 <_close_r>
	...

0800da40 <_write_r>:
 800da40:	b538      	push	{r3, r4, r5, lr}
 800da42:	4d07      	ldr	r5, [pc, #28]	; (800da60 <_write_r+0x20>)
 800da44:	4604      	mov	r4, r0
 800da46:	4608      	mov	r0, r1
 800da48:	4611      	mov	r1, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	602a      	str	r2, [r5, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	f7f7 fa21 	bl	8004e96 <_write>
 800da54:	1c43      	adds	r3, r0, #1
 800da56:	d102      	bne.n	800da5e <_write_r+0x1e>
 800da58:	682b      	ldr	r3, [r5, #0]
 800da5a:	b103      	cbz	r3, 800da5e <_write_r+0x1e>
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	bd38      	pop	{r3, r4, r5, pc}
 800da60:	200008a4 	.word	0x200008a4

0800da64 <__assert_func>:
 800da64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da66:	4614      	mov	r4, r2
 800da68:	461a      	mov	r2, r3
 800da6a:	4b09      	ldr	r3, [pc, #36]	; (800da90 <__assert_func+0x2c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4605      	mov	r5, r0
 800da70:	68d8      	ldr	r0, [r3, #12]
 800da72:	b14c      	cbz	r4, 800da88 <__assert_func+0x24>
 800da74:	4b07      	ldr	r3, [pc, #28]	; (800da94 <__assert_func+0x30>)
 800da76:	9100      	str	r1, [sp, #0]
 800da78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da7c:	4906      	ldr	r1, [pc, #24]	; (800da98 <__assert_func+0x34>)
 800da7e:	462b      	mov	r3, r5
 800da80:	f000 f81e 	bl	800dac0 <fiprintf>
 800da84:	f7fd fabc 	bl	800b000 <abort>
 800da88:	4b04      	ldr	r3, [pc, #16]	; (800da9c <__assert_func+0x38>)
 800da8a:	461c      	mov	r4, r3
 800da8c:	e7f3      	b.n	800da76 <__assert_func+0x12>
 800da8e:	bf00      	nop
 800da90:	20000010 	.word	0x20000010
 800da94:	0800f7bd 	.word	0x0800f7bd
 800da98:	0800f7ca 	.word	0x0800f7ca
 800da9c:	0800f7f8 	.word	0x0800f7f8

0800daa0 <_close_r>:
 800daa0:	b538      	push	{r3, r4, r5, lr}
 800daa2:	4d06      	ldr	r5, [pc, #24]	; (800dabc <_close_r+0x1c>)
 800daa4:	2300      	movs	r3, #0
 800daa6:	4604      	mov	r4, r0
 800daa8:	4608      	mov	r0, r1
 800daaa:	602b      	str	r3, [r5, #0]
 800daac:	f7f7 fa0f 	bl	8004ece <_close>
 800dab0:	1c43      	adds	r3, r0, #1
 800dab2:	d102      	bne.n	800daba <_close_r+0x1a>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	b103      	cbz	r3, 800daba <_close_r+0x1a>
 800dab8:	6023      	str	r3, [r4, #0]
 800daba:	bd38      	pop	{r3, r4, r5, pc}
 800dabc:	200008a4 	.word	0x200008a4

0800dac0 <fiprintf>:
 800dac0:	b40e      	push	{r1, r2, r3}
 800dac2:	b503      	push	{r0, r1, lr}
 800dac4:	4601      	mov	r1, r0
 800dac6:	ab03      	add	r3, sp, #12
 800dac8:	4805      	ldr	r0, [pc, #20]	; (800dae0 <fiprintf+0x20>)
 800daca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dace:	6800      	ldr	r0, [r0, #0]
 800dad0:	9301      	str	r3, [sp, #4]
 800dad2:	f7ff fe41 	bl	800d758 <_vfiprintf_r>
 800dad6:	b002      	add	sp, #8
 800dad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dadc:	b003      	add	sp, #12
 800dade:	4770      	bx	lr
 800dae0:	20000010 	.word	0x20000010

0800dae4 <_fstat_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	4d07      	ldr	r5, [pc, #28]	; (800db04 <_fstat_r+0x20>)
 800dae8:	2300      	movs	r3, #0
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	4611      	mov	r1, r2
 800daf0:	602b      	str	r3, [r5, #0]
 800daf2:	f7f7 f9f8 	bl	8004ee6 <_fstat>
 800daf6:	1c43      	adds	r3, r0, #1
 800daf8:	d102      	bne.n	800db00 <_fstat_r+0x1c>
 800dafa:	682b      	ldr	r3, [r5, #0]
 800dafc:	b103      	cbz	r3, 800db00 <_fstat_r+0x1c>
 800dafe:	6023      	str	r3, [r4, #0]
 800db00:	bd38      	pop	{r3, r4, r5, pc}
 800db02:	bf00      	nop
 800db04:	200008a4 	.word	0x200008a4

0800db08 <_isatty_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	4d06      	ldr	r5, [pc, #24]	; (800db24 <_isatty_r+0x1c>)
 800db0c:	2300      	movs	r3, #0
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f7 f9f7 	bl	8004f06 <_isatty>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_isatty_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_isatty_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	200008a4 	.word	0x200008a4

0800db28 <_lseek_r>:
 800db28:	b538      	push	{r3, r4, r5, lr}
 800db2a:	4d07      	ldr	r5, [pc, #28]	; (800db48 <_lseek_r+0x20>)
 800db2c:	4604      	mov	r4, r0
 800db2e:	4608      	mov	r0, r1
 800db30:	4611      	mov	r1, r2
 800db32:	2200      	movs	r2, #0
 800db34:	602a      	str	r2, [r5, #0]
 800db36:	461a      	mov	r2, r3
 800db38:	f7f7 f9f0 	bl	8004f1c <_lseek>
 800db3c:	1c43      	adds	r3, r0, #1
 800db3e:	d102      	bne.n	800db46 <_lseek_r+0x1e>
 800db40:	682b      	ldr	r3, [r5, #0]
 800db42:	b103      	cbz	r3, 800db46 <_lseek_r+0x1e>
 800db44:	6023      	str	r3, [r4, #0]
 800db46:	bd38      	pop	{r3, r4, r5, pc}
 800db48:	200008a4 	.word	0x200008a4

0800db4c <__ascii_mbtowc>:
 800db4c:	b082      	sub	sp, #8
 800db4e:	b901      	cbnz	r1, 800db52 <__ascii_mbtowc+0x6>
 800db50:	a901      	add	r1, sp, #4
 800db52:	b142      	cbz	r2, 800db66 <__ascii_mbtowc+0x1a>
 800db54:	b14b      	cbz	r3, 800db6a <__ascii_mbtowc+0x1e>
 800db56:	7813      	ldrb	r3, [r2, #0]
 800db58:	600b      	str	r3, [r1, #0]
 800db5a:	7812      	ldrb	r2, [r2, #0]
 800db5c:	1e10      	subs	r0, r2, #0
 800db5e:	bf18      	it	ne
 800db60:	2001      	movne	r0, #1
 800db62:	b002      	add	sp, #8
 800db64:	4770      	bx	lr
 800db66:	4610      	mov	r0, r2
 800db68:	e7fb      	b.n	800db62 <__ascii_mbtowc+0x16>
 800db6a:	f06f 0001 	mvn.w	r0, #1
 800db6e:	e7f8      	b.n	800db62 <__ascii_mbtowc+0x16>

0800db70 <_read_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	; (800db90 <_read_r+0x20>)
 800db74:	4604      	mov	r4, r0
 800db76:	4608      	mov	r0, r1
 800db78:	4611      	mov	r1, r2
 800db7a:	2200      	movs	r2, #0
 800db7c:	602a      	str	r2, [r5, #0]
 800db7e:	461a      	mov	r2, r3
 800db80:	f7f7 f96c 	bl	8004e5c <_read>
 800db84:	1c43      	adds	r3, r0, #1
 800db86:	d102      	bne.n	800db8e <_read_r+0x1e>
 800db88:	682b      	ldr	r3, [r5, #0]
 800db8a:	b103      	cbz	r3, 800db8e <_read_r+0x1e>
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	bd38      	pop	{r3, r4, r5, pc}
 800db90:	200008a4 	.word	0x200008a4

0800db94 <__ascii_wctomb>:
 800db94:	b149      	cbz	r1, 800dbaa <__ascii_wctomb+0x16>
 800db96:	2aff      	cmp	r2, #255	; 0xff
 800db98:	bf85      	ittet	hi
 800db9a:	238a      	movhi	r3, #138	; 0x8a
 800db9c:	6003      	strhi	r3, [r0, #0]
 800db9e:	700a      	strbls	r2, [r1, #0]
 800dba0:	f04f 30ff 	movhi.w	r0, #4294967295
 800dba4:	bf98      	it	ls
 800dba6:	2001      	movls	r0, #1
 800dba8:	4770      	bx	lr
 800dbaa:	4608      	mov	r0, r1
 800dbac:	4770      	bx	lr
	...

0800dbb0 <_init>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	bf00      	nop
 800dbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	469e      	mov	lr, r3
 800dbba:	4770      	bx	lr

0800dbbc <_fini>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	bf00      	nop
 800dbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc2:	bc08      	pop	{r3}
 800dbc4:	469e      	mov	lr, r3
 800dbc6:	4770      	bx	lr
