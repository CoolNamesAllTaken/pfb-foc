
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d44  0800d9b8  0800d9b8  0001d9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6fc  0800f6fc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f6fc  0800f6fc  0001f6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f704  0800f704  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f704  0800f704  0001f704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f708  0800f708  0001f708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800f70c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  200001e4  0800f8f0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200008b4  0800f8f0  000208b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296c7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a8a  00000000  00000000  000498db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  0004f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00050bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b687  00000000  00000000  00052248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ad8  00000000  00000000  0007d8cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec771  00000000  00000000  0009e3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0018ab18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076f4  00000000  00000000  0018abdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000016e  00000000  00000000  001922d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d9a0 	.word	0x0800d9a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800d9a0 	.word	0x0800d9a0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	4a08      	ldr	r2, [pc, #32]	; (8000f1c <_ZN7EncoderC1Ev+0x2c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	0800eae4 	.word	0x0800eae4

08000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffdd 	bl	8000ef0 <_ZN7EncoderC1Ev>
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	829a      	strh	r2, [r3, #20]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	619a      	str	r2, [r3, #24]
{

}
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800ead4 	.word	0x0800ead4

08000f64 <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 f8f5 	bl	800115c <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 8000f82:	687c      	ldr	r4, [r7, #4]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f8ad 	bl	80010e4 <_ZN7AS5048A10ReadAngle_Ev>
 8000f8a:	eef0 7a40 	vmov.f32	s15, s0
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	4620      	mov	r0, r4
 8000f94:	f000 f9e0 	bl	8001358 <_ZN7Encoder9set_angleEf>
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd90      	pop	{r4, r7, pc}

08000fa0 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
	// Efficient method for calculating parity: https://www.geeksforgeeks.org/finding-the-parity-of-a-number-efficiently/
	val = val<<1; // mask off 16th bit (MSb)
 8000fac:	887b      	ldrh	r3, [r7, #2]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	807b      	strh	r3, [r7, #2]
	uint8_t x = val ^ (val>>8);
 8000fb2:	887b      	ldrh	r3, [r7, #2]
 8000fb4:	b25a      	sxtb	r2, r3
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	121b      	asrs	r3, r3, #8
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	4053      	eors	r3, r2
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>4);
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	111b      	asrs	r3, r3, #4
 8000fc6:	b25a      	sxtb	r2, r3
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>2);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	109b      	asrs	r3, r3, #2
 8000fd6:	b25a      	sxtb	r2, r3
 8000fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fdc:	4053      	eors	r3, r2
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	73fb      	strb	r3, [r7, #15]
	x = x^(x>>1);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	105b      	asrs	r3, r3, #1
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fec:	4053      	eors	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
	return x&0b1 ? 1 : 0; // present parity bit to make integer has even parity
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
//	uint8_t par = 0;
//	for (uint8_t shift = 0; shift < 15; shift++) {
//		par ^= ((val >> shift) & 0x1);
//	}
//	return par;
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	807b      	strh	r3, [r7, #2]
 8001012:	4613      	mov	r3, r2
 8001014:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800101c:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 800101e:	787b      	ldrb	r3, [r7, #1]
 8001020:	039b      	lsls	r3, r3, #14
 8001022:	b21b      	sxth	r3, r3
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	b21a      	sxth	r2, r3
 800102a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800102e:	4313      	orrs	r3, r2
 8001030:	b21b      	sxth	r3, r3
 8001032:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	4619      	mov	r1, r3
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffb1 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 800103e:	4603      	mov	r3, r0
 8001040:	03db      	lsls	r3, r3, #15
 8001042:	b21a      	sxth	r2, r3
 8001044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001048:	4313      	orrs	r3, r2
 800104a:	b21b      	sxth	r3, r3
 800104c:	81fb      	strh	r3, [r7, #14]
	return pack;
 800104e:	89fb      	ldrh	r3, [r7, #14]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800106a:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 800106c:	89fb      	ldrh	r3, [r7, #14]
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff95 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 8001076:	4603      	mov	r3, r0
 8001078:	03db      	lsls	r3, r3, #15
 800107a:	b21a      	sxth	r2, r3
 800107c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	81fb      	strh	r3, [r7, #14]
	return pack;
 8001086:	89fb      	ldrh	r3, [r7, #14]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	e016      	b.n	80010da <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff75 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	13db      	asrs	r3, r3, #15
 80010be:	429a      	cmp	r2, r3
 80010c0:	bf14      	ite	ne
 80010c2:	2301      	movne	r3, #1
 80010c4:	2300      	moveq	r3, #0
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d002      	beq.n	80010d2 <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 80010cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d0:	e003      	b.n	80010da <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010d8:	b29b      	uxth	r3, r3
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff87 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 80010f8:	4603      	mov	r3, r0
 80010fa:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4619      	mov	r1, r3
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 f84f 	bl	80011a4 <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001106:	2100      	movs	r1, #0
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ffa5 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 800110e:	4603      	mov	r3, r0
 8001110:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 8001112:	89bb      	ldrh	r3, [r7, #12]
 8001114:	4619      	mov	r1, r3
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f86e 	bl	80011f8 <_ZN7AS5048A21SPITransmitReceive16_Et>
 800111c:	4603      	mov	r3, r0
 800111e:	4619      	mov	r1, r3
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ffb5 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001126:	4603      	mov	r3, r0
 8001128:	817b      	strh	r3, [r7, #10]
	return static_cast<float>(raw_angle_val) * 360.0f / static_cast<float>(DATA_MAX);
 800112a:	897b      	ldrh	r3, [r7, #10]
 800112c:	ee07 3a90 	vmov	s15, r3
 8001130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001134:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001154 <_ZN7AS5048A10ReadAngle_Ev+0x70>
 8001138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001158 <_ZN7AS5048A10ReadAngle_Ev+0x74>
 8001140:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001144:	eef0 7a66 	vmov.f32	s15, s13
}
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	43b40000 	.word	0x43b40000
 8001158:	467ffc00 	.word	0x467ffc00

0800115c <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 8001164:	2201      	movs	r2, #1
 8001166:	2101      	movs	r1, #1
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff4c 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 800116e:	4603      	mov	r3, r0
 8001170:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 8001172:	89fb      	ldrh	r3, [r7, #14]
 8001174:	4619      	mov	r1, r3
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f814 	bl	80011a4 <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff6a 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 8001184:	4603      	mov	r3, r0
 8001186:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f833 	bl	80011f8 <_ZN7AS5048A21SPITransmitReceive16_Et>
 8001192:	4603      	mov	r3, r0
 8001194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001198:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 800119a:	897b      	ldrh	r3, [r7, #10]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	121b      	asrs	r3, r3, #8
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 80011b8:	887b      	ldrh	r3, [r7, #2]
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6918      	ldr	r0, [r3, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	8a9b      	ldrh	r3, [r3, #20]
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f005 f931 	bl	8006430 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68d8      	ldr	r0, [r3, #12]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	2202      	movs	r2, #2
 80011dc:	f006 fb9f 	bl	800791e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6918      	ldr	r0, [r3, #16]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	8a9b      	ldrh	r3, [r3, #20]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	f005 f920 	bl	8006430 <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b2db      	uxtb	r3, r3
 800120a:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6918      	ldr	r0, [r3, #16]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	8a9b      	ldrh	r3, [r3, #20]
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	f005 f907 	bl	8006430 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68d8      	ldr	r0, [r3, #12]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f107 0208 	add.w	r2, r7, #8
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	f006 fce0 	bl	8007bfa <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6918      	ldr	r0, [r3, #16]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	8a9b      	ldrh	r3, [r3, #20]
 8001242:	2201      	movs	r2, #1
 8001244:	4619      	mov	r1, r3
 8001246:	f005 f8f3 	bl	8006430 <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 800124e:	7a3b      	ldrb	r3, [r7, #8]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001258:	4313      	orrs	r3, r2
 800125a:	b21b      	sxth	r3, r3
 800125c:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 800125e:	7a7b      	ldrb	r3, [r7, #9]
 8001260:	b29a      	uxth	r2, r3
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4313      	orrs	r3, r2
 8001266:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001268:	89fb      	ldrh	r3, [r7, #14]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	ed87 0a01 	vstr	s0, [r7, #4]
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	fefb 7a67 	vrintm.f32	s15, s15
 8001284:	eeb0 0a67 	vmov.f32	s0, s15
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0f * floor(raw_angle / 360.0f);
 80012a0:	edd7 7a00 	vldr	s15, [r7]
 80012a4:	eddf 6a15 	vldr	s13, [pc, #84]	; 80012fc <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012ac:	eeb0 0a47 	vmov.f32	s0, s14
 80012b0:	f7ff ffdf 	bl	8001272 <_ZSt5floorf>
 80012b4:	eef0 7a40 	vmov.f32	s15, s0
 80012b8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012fc <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c0:	ed97 7a00 	vldr	s14, [r7]
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	edc7 7a03 	vstr	s15, [r7, #12]
	if (wrapped_angle < 0.0f) {
 80012cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d507      	bpl.n	80012ea <_ZN7Encoder10WrapAngle_Ef+0x56>
		wrapped_angle += 360.0f;
 80012da:	edd7 7a03 	vldr	s15, [r7, #12]
 80012de:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80012fc <_ZN7Encoder10WrapAngle_Ef+0x68>
 80012e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012e6:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ee07 3a90 	vmov	s15, r3
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	43b40000 	.word	0x43b40000

08001300 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 800130c:	ed97 0a00 	vldr	s0, [r7]
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ffbf 	bl	8001294 <_ZN7Encoder10WrapAngle_Ef>
 8001316:	eef0 7a40 	vmov.f32	s15, s0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	ed93 7a02 	vldr	s14, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a01 	vldr	s15, [r3, #4]
 800133c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ffa5 	bl	8001294 <_ZN7Encoder10WrapAngle_Ef>
 800134a:	eef0 7a40 	vmov.f32	s15, s0
}
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 8001364:	ed97 0a00 	vldr	s0, [r7]
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ff93 	bl	8001294 <_ZN7Encoder10WrapAngle_Ef>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>:
 * is being transferred to a buffer via DMA.
 * @param[in] adc_counts_u_in Reference pointing to location in ADC buffer for phase U current.
 * @param[in] adc_counts_v_in Reference pointing to location in ADC buffer for phase V current.
 * @param[in] adc_counts_w_in Reference pointing to location in ADC buffer for phase W current.
 */
void CurrentSensor::LinkToADC(volatile uint16_t* adc_counts_u_in, volatile uint16_t* adc_counts_v_in, volatile uint16_t* adc_counts_w_in) {
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	603b      	str	r3, [r7, #0]
	adc_counts_u_ = adc_counts_u_in;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	61da      	str	r2, [r3, #28]
	adc_counts_v_ = adc_counts_v_in;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	621a      	str	r2, [r3, #32]
	adc_counts_w_ = adc_counts_w_in;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZN13CurrentSensor12ReadCurrentsEv>:

void CurrentSensor::ReadCurrents() {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	i_u = (static_cast<float>(*adc_counts_u_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	899b      	ldrh	r3, [r3, #12]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80013da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80013e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	ed93 7a06 	vldr	s14, [r3, #24]
 80013ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edc3 7a00 	vstr	s15, [r3]
	i_v = (static_cast<float>(*adc_counts_v_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	b29b      	uxth	r3, r3
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	899b      	ldrh	r3, [r3, #12]
 800140c:	ee07 3a90 	vmov	s15, r3
 8001410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edd3 7a04 	vldr	s15, [r3, #16]
 800141e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edd3 7a05 	vldr	s15, [r3, #20]
 8001428:	ee77 6a67 	vsub.f32	s13, s14, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a01 	vstr	s15, [r3, #4]
	i_w = (static_cast<float>(*adc_counts_w_) / static_cast<float>(adc_max_counts_) * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	899b      	ldrh	r3, [r3, #12]
 8001450:	ee07 3a90 	vmov	s15, r3
 8001454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a05 	vldr	s15, [r3, #20]
 800146c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	ed93 7a06 	vldr	s14, [r3, #24]
 8001476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_ZN5Motor4InitEv>:
 */

#include "motor.hh"
#include "foc_utils.hh"

void Motor::Init() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	// Initialize all the lil bits
	enc_->Init();
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69db      	ldr	r3, [r3, #28]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4610      	mov	r0, r2
 80014a2:	4798      	blx	r3
	//	enc_.set_zero_angle(); // startup position is the zero position
	driver_->Init(); // start driver PWM
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f932 	bl	8001712 <_ZN11MotorDriver4InitEv>
	last_update_micros_ = GetTickMicros();
 80014ae:	f000 fceb 	bl	8001e88 <_Z13GetTickMicrosv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30

	// initialization sequence for motor will go here

}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN5Motor10SetCurrentEfff>:
 * @brief Set target phase currents, set motor to current control mode.
 * @param[in] i_u Target current for phase U, in Amps.
 * @param[in] i_v Target current for phase V, in Amps.
 * @param[in] i_w Target current for phase W, in Amps.
 */
void Motor::SetCurrent(float i_u, float i_v, float i_w) {
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80014cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80014d0:	ed87 1a00 	vstr	s2, [r7]
	mode_ = CURRENT_CONTROL;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	751a      	strb	r2, [r3, #20]
	// Simple open loop control with voltage setpoints.
	v_u_cmd_ = i_u * config_.phase_resistance;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	v_v_cmd_ = i_v * config_.phase_resistance;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80014f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	v_w_cmd_ = i_w * config_.phase_resistance;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a01 	vldr	s14, [r3, #4]
 8001508:	edd7 7a00 	vldr	s15, [r7]
 800150c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_ZN5Motor6UpdateEv>:
void Motor::SetPosition(float theta) {
	mode_ = POSITION_CONTROL;
	theta_cmd_ = theta;
}

void Motor::Update() {
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	uint32_t curr_time_micros = GetTickMicros();
 800152c:	f000 fcac 	bl	8001e88 <_Z13GetTickMicrosv>
 8001530:	60f8      	str	r0, [r7, #12]
	float ms_since_last_update = (static_cast<float>(curr_time_micros - last_update_micros_)) / 1000.0f;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001542:	eddf 6a66 	vldr	s13, [pc, #408]	; 80016dc <_ZN5Motor6UpdateEv+0x1b8>
 8001546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154a:	edc7 7a02 	vstr	s15, [r7, #8]

	// Read the encoder
	enc_->Update();
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69da      	ldr	r2, [r3, #28]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	3304      	adds	r3, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4610      	mov	r0, r2
 800155e:	4798      	blx	r3
	theta_meas_ = NormalizeAngle(ElectricalAngle(enc_->get_angle(), config_.num_pole_pairs));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fedf 	bl	8001328 <_ZN7Encoder9get_angleEv>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	f000 fe34 	bl	80021e4 <_Z15ElectricalAngleft>
 800157c:	eef0 7a40 	vmov.f32	s15, s0
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	f000 fe46 	bl	8002214 <_Z14NormalizeAnglef>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Read the current sensors
	csense_->ReadCurrents();
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff08 	bl	80013ac <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_meas_ = csense_->i_u;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
	i_v_meas_ = csense_->i_v;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	661a      	str	r2, [r3, #96]	; 0x60
	i_w_meas_ = csense_->i_w;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	665a      	str	r2, [r3, #100]	; 0x64

	switch(mode_) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7d1b      	ldrb	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d061      	beq.n	8001686 <_ZN5Motor6UpdateEv+0x162>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f2c0 8082 	blt.w	80016cc <_ZN5Motor6UpdateEv+0x1a8>
 80015c8:	3b01      	subs	r3, #1
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d87e      	bhi.n	80016cc <_ZN5Motor6UpdateEv+0x1a8>
		// Set velocity to control position.
	case VELOCITY_CONTROL:
		// Set torque to control velocity.
	case TORQUE_CONTROL:
		// Use DQZ transform to transform measured phase currents into rotating reference frame.
		TransFwdDQZ(theta_meas_, i_u_meas_, i_v_meas_, i_w_meas_, i_d_meas_, i_q_meas_, i_z_meas_);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3358      	adds	r3, #88	; 0x58
 80015f6:	461a      	mov	r2, r3
 80015f8:	eef0 1a46 	vmov.f32	s3, s12
 80015fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001600:	eef0 0a47 	vmov.f32	s1, s14
 8001604:	eeb0 0a67 	vmov.f32	s0, s15
 8001608:	f000 fca2 	bl	8001f50 <_Z11TransFwdDQZffffRfS_S_>

		// Set voltages in rotating reference frame to control currents in rotating reference frame.
		v_d_cmd_ = 0; // TODO: add PID controller for i_d error for true FOC control.
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	669a      	str	r2, [r3, #104]	; 0x68
		v_q_cmd_ = pid_torque_->Update(i_q_cmd_ - i_q_meas_, ms_since_last_update);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	edd7 0a02 	vldr	s1, [r7, #8]
 800162c:	eeb0 0a67 	vmov.f32	s0, s15
 8001630:	4610      	mov	r0, r2
 8001632:	f000 fb07 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		v_z_cmd_ = 0;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	671a      	str	r2, [r3, #112]	; 0x70

		// Convert rotating reference frame voltages back into stator voltages.
		TransRevDQZ(theta_meas_, v_d_cmd_, v_q_cmd_, v_z_cmd_, v_u_cmd_, v_v_cmd_, v_w_cmd_);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	337c      	adds	r3, #124	; 0x7c
 8001670:	461a      	mov	r2, r3
 8001672:	eef0 1a46 	vmov.f32	s3, s12
 8001676:	eeb0 1a66 	vmov.f32	s2, s13
 800167a:	eef0 0a47 	vmov.f32	s1, s14
 800167e:	eeb0 0a67 	vmov.f32	s0, s15
 8001682:	f000 fd0b 	bl	800209c <_Z11TransRevDQZffffRfS_S_>

	case CURRENT_CONTROL:
		// Set voltage (duty cycle) to control current.
		// Open-loop PWM duty cycle control.
		driver_->SetDutyCycle(
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	699a      	ldr	r2, [r3, #24]
			v_u_cmd_ / config_.power_supply_voltage,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 8001696:	eec7 6a27 	vdiv.f32	s13, s14, s15
			v_v_cmd_ / config_.power_supply_voltage,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 80016a6:	ee87 6a27 	vdiv.f32	s12, s14, s15
			v_w_cmd_ / config_.power_supply_voltage);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 80016b6:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80016ba:	eeb0 1a65 	vmov.f32	s2, s11
 80016be:	eef0 0a46 	vmov.f32	s1, s12
 80016c2:	eeb0 0a66 	vmov.f32	s0, s13
 80016c6:	4610      	mov	r0, r2
 80016c8:	f000 f85b 	bl	8001782 <_ZN11MotorDriver12SetDutyCycleEfff>
	}

	// Save as a snack for later.
	last_update_micros_ = curr_time_micros;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	631a      	str	r2, [r3, #48]	; 0x30

}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	447a0000 	.word	0x447a0000

080016e0 <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>:
void MotorDriver::LinkToPWM(
	TIM_HandleTypeDef * timer,
	uint32_t timer_u_channel_id,
	uint32_t timer_v_channel_id,
	uint32_t timer_w_channel_id)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	603b      	str	r3, [r7, #0]
	timer_ = timer;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	619a      	str	r2, [r3, #24]
	timer_u_channel_id_ = timer_u_channel_id;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	61da      	str	r2, [r3, #28]
	timer_v_channel_id_ = timer_v_channel_id;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	621a      	str	r2, [r3, #32]
	timer_w_channel_id_ = timer_w_channel_id;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001706:	bf00      	nop
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <_ZN11MotorDriver4InitEv>:

/**
 * @brief Start PWM timers.
 */
void MotorDriver::Init() {
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_, timer_u_channel_id_); // get the party started
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	699a      	ldr	r2, [r3, #24]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f006 ff6d 	bl	8008604 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_u_channel_id_); // get the (complementary) party started
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	699a      	ldr	r2, [r3, #24]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4619      	mov	r1, r3
 8001734:	4610      	mov	r0, r2
 8001736:	f008 f8dd 	bl	80098f4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_v_channel_id_); // get the party started
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4619      	mov	r1, r3
 8001744:	4610      	mov	r0, r2
 8001746:	f006 ff5d 	bl	8008604 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_v_channel_id_); // get the (complementary) party started
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699a      	ldr	r2, [r3, #24]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f008 f8cd 	bl	80098f4 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_w_channel_id_); // get the party started
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699a      	ldr	r2, [r3, #24]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	4610      	mov	r0, r2
 8001766:	f006 ff4d 	bl	8008604 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_w_channel_id_); // get the (complementary) party started
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699a      	ldr	r2, [r3, #24]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f008 f8bd 	bl	80098f4 <HAL_TIMEx_PWMN_Start>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_ZN11MotorDriver12SetDutyCycleEfff>:

/**
 *
 */
void MotorDriver::SetDutyCycle(float duty_u, float duty_v, float duty_w) {
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	ed87 0a02 	vstr	s0, [r7, #8]
 800178e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001792:	ed87 1a00 	vstr	s2, [r7]
	duty_u_ = CONSTRAIN(duty_u, duty_min_, duty_max_);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	edd3 7a04 	vldr	s15, [r3, #16]
 800179c:	ed97 7a02 	vldr	s14, [r7, #8]
 80017a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d502      	bpl.n	80017b0 <_ZN11MotorDriver12SetDutyCycleEfff+0x2e>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	e00d      	b.n	80017cc <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80017b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80017ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd02      	ble.n	80017ca <_ZN11MotorDriver12SetDutyCycleEfff+0x48>
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	e000      	b.n	80017cc <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	6013      	str	r3, [r2, #0]
	duty_v_ = CONSTRAIN(duty_v, duty_min_, duty_max_);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80017d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80017da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d502      	bpl.n	80017ea <_ZN11MotorDriver12SetDutyCycleEfff+0x68>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	e00d      	b.n	8001806 <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80017f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	dd02      	ble.n	8001804 <_ZN11MotorDriver12SetDutyCycleEfff+0x82>
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	e000      	b.n	8001806 <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	6053      	str	r3, [r2, #4]
	duty_w_ = CONSTRAIN(duty_w, duty_min_, duty_max_);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001810:	ed97 7a00 	vldr	s14, [r7]
 8001814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	d502      	bpl.n	8001824 <_ZN11MotorDriver12SetDutyCycleEfff+0xa2>
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	e00d      	b.n	8001840 <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	edd3 7a03 	vldr	s15, [r3, #12]
 800182a:	ed97 7a00 	vldr	s14, [r7]
 800182e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd02      	ble.n	800183e <_ZN11MotorDriver12SetDutyCycleEfff+0xbc>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	e000      	b.n	8001840 <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	6093      	str	r3, [r2, #8]

	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_u_channel_id_, static_cast<uint16_t>(duty_u_ * pulse_max_));
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d114      	bne.n	8001876 <_ZN11MotorDriver12SetDutyCycleEfff+0xf4>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	ed93 7a00 	vldr	s14, [r3]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8a9b      	ldrh	r3, [r3, #20]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001866:	ee17 3a90 	vmov	r3, s15
 800186a:	b29a      	uxth	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
 8001874:	e077      	b.n	8001966 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	2b04      	cmp	r3, #4
 800187c:	d114      	bne.n	80018a8 <_ZN11MotorDriver12SetDutyCycleEfff+0x126>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	ed93 7a00 	vldr	s14, [r3]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8a9b      	ldrh	r3, [r3, #20]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 3a90 	vmov	r3, s15
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
 80018a6:	e05e      	b.n	8001966 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b08      	cmp	r3, #8
 80018ae:	d114      	bne.n	80018da <_ZN11MotorDriver12SetDutyCycleEfff+0x158>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8a9b      	ldrh	r3, [r3, #20]
 80018ba:	ee07 3a90 	vmov	s15, r3
 80018be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ca:	ee17 3a90 	vmov	r3, s15
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80018d8:	e045      	b.n	8001966 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d114      	bne.n	800190c <_ZN11MotorDriver12SetDutyCycleEfff+0x18a>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8a9b      	ldrh	r3, [r3, #20]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fc:	ee17 3a90 	vmov	r3, s15
 8001900:	b29a      	uxth	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	e02c      	b.n	8001966 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b10      	cmp	r3, #16
 8001912:	d114      	bne.n	800193e <_ZN11MotorDriver12SetDutyCycleEfff+0x1bc>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8a9b      	ldrh	r3, [r3, #20]
 800191e:	ee07 3a90 	vmov	s15, r3
 8001922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800192e:	ee17 3a90 	vmov	r3, s15
 8001932:	b29a      	uxth	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	659a      	str	r2, [r3, #88]	; 0x58
 800193c:	e013      	b.n	8001966 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8a9b      	ldrh	r3, [r3, #20]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001958:	ee17 3a90 	vmov	r3, s15
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_v_channel_id_, static_cast<uint16_t>(duty_v_ * pulse_max_));
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d114      	bne.n	8001998 <_ZN11MotorDriver12SetDutyCycleEfff+0x216>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed93 7a01 	vldr	s14, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8a9b      	ldrh	r3, [r3, #20]
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001988:	ee17 3a90 	vmov	r3, s15
 800198c:	b29a      	uxth	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	635a      	str	r2, [r3, #52]	; 0x34
 8001996:	e077      	b.n	8001a88 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	2b04      	cmp	r3, #4
 800199e:	d114      	bne.n	80019ca <_ZN11MotorDriver12SetDutyCycleEfff+0x248>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8a9b      	ldrh	r3, [r3, #20]
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ba:	ee17 3a90 	vmov	r3, s15
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	639a      	str	r2, [r3, #56]	; 0x38
 80019c8:	e05e      	b.n	8001a88 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d114      	bne.n	80019fc <_ZN11MotorDriver12SetDutyCycleEfff+0x27a>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8a9b      	ldrh	r3, [r3, #20]
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ec:	ee17 3a90 	vmov	r3, s15
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80019fa:	e045      	b.n	8001a88 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d114      	bne.n	8001a2e <_ZN11MotorDriver12SetDutyCycleEfff+0x2ac>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8a9b      	ldrh	r3, [r3, #20]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a1e:	ee17 3a90 	vmov	r3, s15
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a2c:	e02c      	b.n	8001a88 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	2b10      	cmp	r3, #16
 8001a34:	d114      	bne.n	8001a60 <_ZN11MotorDriver12SetDutyCycleEfff+0x2de>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8a9b      	ldrh	r3, [r3, #20]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a50:	ee17 3a90 	vmov	r3, s15
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001a5e:	e013      	b.n	8001a88 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8a9b      	ldrh	r3, [r3, #20]
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d114      	bne.n	8001aba <_ZN11MotorDriver12SetDutyCycleEfff+0x338>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8a9b      	ldrh	r3, [r3, #20]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ab8:	e077      	b.n	8001baa <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d114      	bne.n	8001aec <_ZN11MotorDriver12SetDutyCycleEfff+0x36a>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8a9b      	ldrh	r3, [r3, #20]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001adc:	ee17 3a90 	vmov	r3, s15
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001aea:	e05e      	b.n	8001baa <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d114      	bne.n	8001b1e <_ZN11MotorDriver12SetDutyCycleEfff+0x39c>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8a9b      	ldrh	r3, [r3, #20]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0e:	ee17 3a90 	vmov	r3, s15
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b1c:	e045      	b.n	8001baa <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2b0c      	cmp	r3, #12
 8001b24:	d114      	bne.n	8001b50 <_ZN11MotorDriver12SetDutyCycleEfff+0x3ce>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8a9b      	ldrh	r3, [r3, #20]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b40:	ee17 3a90 	vmov	r3, s15
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b4e:	e02c      	b.n	8001baa <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d114      	bne.n	8001b82 <_ZN11MotorDriver12SetDutyCycleEfff+0x400>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	8a9b      	ldrh	r3, [r3, #20]
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b72:	ee17 3a90 	vmov	r3, s15
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001b80:	e013      	b.n	8001baa <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8a9b      	ldrh	r3, [r3, #20]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_ZN13PIDControllerC1Efffff>:
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] ramp_in Maximum ramp (derivative) of output.
 * @param[in] limit_in Maximum value of output.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, float ramp_in = 0.0f, float limit_in = kDefaultLimit)
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6178      	str	r0, [r7, #20]
 8001bc0:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bc4:	edc7 0a03 	vstr	s1, [r7, #12]
 8001bc8:	ed87 1a02 	vstr	s2, [r7, #8]
 8001bcc:	edc7 1a01 	vstr	s3, [r7, #4]
 8001bd0:	ed87 2a00 	vstr	s4, [r7]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	609a      	str	r2, [r3, #8]
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
 8001be6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	db01      	blt.n	8001bf8 <_ZN13PIDControllerC1Efffff+0x40>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	e001      	b.n	8001bfc <_ZN13PIDControllerC1Efffff+0x44>
 8001bf8:	f04f 0300 	mov.w	r3, #0
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	60d3      	str	r3, [r2, #12]
 8001c00:	edd7 7a00 	vldr	s15, [r7]
 8001c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0c:	dd01      	ble.n	8001c12 <_ZN13PIDControllerC1Efffff+0x5a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	e000      	b.n	8001c14 <_ZN13PIDControllerC1Efffff+0x5c>
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <_ZN13PIDControllerC1Efffff+0x88>)
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	6113      	str	r3, [r2, #16]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	61da      	str	r2, [r3, #28]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	4618      	mov	r0, r3
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	447a0000 	.word	0x447a0000

08001c44 <_ZN13PIDController6UpdateEff>:
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 * @retval Calculated output response of PID controller.
 */
float PIDController::Update(float error, float ms_since_last_update) {
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c50:	edc7 0a01 	vstr	s1, [r7, #4]
	if (ms_since_last_update <= 0.0f) {
 8001c54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d802      	bhi.n	8001c68 <_ZN13PIDController6UpdateEff+0x24>
		return 0; // only allow updates with positive time steps (avoid errors for i, d)
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e0dc      	b.n	8001e22 <_ZN13PIDController6UpdateEff+0x1de>
	}

	float p = k_p * error;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a06 	vstr	s15, [r7, #24]
	float i = i_error_ + k_i * ((error + prev_error_)*ms_since_last_update/2); // Tustin's method (trapezoidal integration)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 6a07 	vldr	s12, [r3, #28]
 8001c8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c90:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c9c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ca0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	edc7 7a05 	vstr	s15, [r7, #20]
	i = CONSTRAIN(i, -limit, limit); // integral anti-windup
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cb6:	eef1 7a67 	vneg.f32	s15, s15
 8001cba:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d505      	bpl.n	8001cd4 <_ZN13PIDController6UpdateEff+0x90>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cce:	eef1 7a67 	vneg.f32	s15, s15
 8001cd2:	e00f      	b.n	8001cf4 <_ZN13PIDController6UpdateEff+0xb0>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	dd03      	ble.n	8001cf0 <_ZN13PIDController6UpdateEff+0xac>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cee:	e001      	b.n	8001cf4 <_ZN13PIDController6UpdateEff+0xb0>
 8001cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf4:	edc7 7a05 	vstr	s15, [r7, #20]
	float d = k_d * (error - prev_error_) / ms_since_last_update;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d04:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d0c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d10:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d18:	edc7 7a04 	vstr	s15, [r7, #16]

	float output = CONSTRAIN(p + i + d, -limit, limit); // sum and constrain output
 8001d1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d28:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d36:	eef1 7a67 	vneg.f32	s15, s15
 8001d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d505      	bpl.n	8001d50 <_ZN13PIDController6UpdateEff+0x10c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d4a:	eef1 7a67 	vneg.f32	s15, s15
 8001d4e:	e01f      	b.n	8001d90 <_ZN13PIDController6UpdateEff+0x14c>
 8001d50:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	dd03      	ble.n	8001d7c <_ZN13PIDController6UpdateEff+0x138>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d7a:	e009      	b.n	8001d90 <_ZN13PIDController6UpdateEff+0x14c>
 8001d7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d90:	edc7 7a07 	vstr	s15, [r7, #28]

	if (ramp > 0.0f) { // output ramp is defined
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd34      	ble.n	8001e0e <_ZN13PIDController6UpdateEff+0x1ca>
		if (output - prev_output_ > ramp) {
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001daa:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001db8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dd0a      	ble.n	8001dd8 <_ZN13PIDController6UpdateEff+0x194>
			output = prev_output_ + ramp; // rail to positive ramp
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 7a06 	vldr	s14, [r3, #24]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	edc7 7a07 	vstr	s15, [r7, #28]
 8001dd6:	e01a      	b.n	8001e0e <_ZN13PIDController6UpdateEff+0x1ca>
		} else if (output - prev_output_ < -ramp) {
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	edd3 7a06 	vldr	s15, [r3, #24]
 8001dde:	ed97 7a07 	vldr	s14, [r7, #28]
 8001de2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	eef1 7a67 	vneg.f32	s15, s15
 8001df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d509      	bpl.n	8001e0e <_ZN13PIDController6UpdateEff+0x1ca>
			output = prev_output_ - ramp; // rail to negative ramp
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	ed93 7a06 	vldr	s14, [r3, #24]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	// save stuff for next round
	prev_error_ = error;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	61da      	str	r2, [r3, #28]
	prev_output_ = output;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	619a      	str	r2, [r3, #24]
	i_error_ = i;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	615a      	str	r2, [r3, #20]

	return output;
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	ee07 3a90 	vmov	s15, r3
}
 8001e26:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2a:	3724      	adds	r7, #36	; 0x24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	i_error_ = 0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	615a      	str	r2, [r3, #20]
	prev_error_ = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
	prev_output_ = 0;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e6a:	edc7 0a00 	vstr	s1, [r7]
 8001e6e:	edd7 0a00 	vldr	s1, [r7]
 8001e72:	ed97 0a01 	vldr	s0, [r7, #4]
 8001e76:	f008 ff53 	bl	800ad20 <fmodf>
 8001e7a:	eef0 7a40 	vmov.f32	s15, s0
 8001e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_Z13GetTickMicrosv>:

/**
 * @brief Utility function that returns the current time in microseconds.
 * @retval Current uptime, in microseconds.
 */
uint32_t GetTickMicros() {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	return HAL_GetTick() * 1000 - SysTick->VAL / ((SysTick->LOAD + 1) / 1000);
 8001e8c:	f003 f858 	bl	8004f40 <HAL_GetTick>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e96:	fb02 f203 	mul.w	r2, r2, r3
 8001e9a:	4b07      	ldr	r3, [pc, #28]	; (8001eb8 <_Z13GetTickMicrosv+0x30>)
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <_Z13GetTickMicrosv+0x30>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4805      	ldr	r0, [pc, #20]	; (8001ebc <_Z13GetTickMicrosv+0x34>)
 8001ea6:	fba0 0303 	umull	r0, r3, r0, r3
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eb0:	1ad3      	subs	r3, r2, r3
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <_Z8DegToRadf>:
/**
 * @brief Helper function that converts an angle in degrees to an angle in radians.
 * @param[in] Angle value in degrees.
 * @retval Angle value in radians.
 */
float DegToRad(float deg) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	ed87 0a01 	vstr	s0, [r7, #4]
	return deg / 360.0f * 2.0f * PI;
 8001eca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ece:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ef0 <_Z8DegToRadf+0x30>
 8001ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ef4 <_Z8DegToRadf+0x34>
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	43b40000 	.word	0x43b40000
 8001ef4:	40490fdb 	.word	0x40490fdb

08001ef8 <_Z4sindf>:
/**
 * @brief Returns the sine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Sine of theta.
 */
float sind(float theta) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_sin_f32(DegToRad(theta));
 8001f02:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f06:	f7ff ffdb 	bl	8001ec0 <_Z8DegToRadf>
 8001f0a:	eef0 7a40 	vmov.f32	s15, s0
 8001f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f12:	f008 fe53 	bl	800abbc <arm_sin_f32>
 8001f16:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <_Z4cosdf>:
/**
 * @brief Returns thecosine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Cosine of theta.
 */
float cosd(float theta) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_cos_f32(DegToRad(theta));
 8001f2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f32:	f7ff ffc5 	bl	8001ec0 <_Z8DegToRadf>
 8001f36:	eef0 7a40 	vmov.f32	s15, s0
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f008 fe81 	bl	800ac44 <arm_cos_f32>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
}
 8001f46:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <_Z11TransFwdDQZffffRfS_S_>:
 * @param[out] i_z Zero current magnitude in rotating reference frame.
 */
void TransFwdDQZ(
		float theta, float i_u, float i_v, float i_w,
		float& i_d, float& i_q, float& i_z)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	ed2d 8b02 	vpush	{d8}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	ed87 0a07 	vstr	s0, [r7, #28]
 8001f5e:	edc7 0a06 	vstr	s1, [r7, #24]
 8001f62:	ed87 1a05 	vstr	s2, [r7, #20]
 8001f66:	edc7 1a04 	vstr	s3, [r7, #16]
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	i_d = sqrtf(2.0f/3.0f) * (cosd(theta)*i_u + cosd(theta-120.0f)*i_v + cosd(theta+120.0f)*i_w);
 8001f70:	ed97 0a07 	vldr	s0, [r7, #28]
 8001f74:	f7ff ffd6 	bl	8001f24 <_Z4cosdf>
 8001f78:	eeb0 7a40 	vmov.f32	s14, s0
 8001f7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f80:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001f84:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f88:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002090 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8001f8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	f7ff ffc6 	bl	8001f24 <_Z4cosdf>
 8001f98:	eeb0 7a40 	vmov.f32	s14, s0
 8001f9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001fac:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002090 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8001fb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb8:	f7ff ffb4 	bl	8001f24 <_Z4cosdf>
 8001fbc:	eeb0 7a40 	vmov.f32	s14, s0
 8001fc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001fcc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002094 <_Z11TransFwdDQZffffRfS_S_+0x144>
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edc3 7a00 	vstr	s15, [r3]
	i_q = sqrtf(2.0f/3.0f) * (-sind(theta)*i_u - sind(theta-120.0f)*i_v - sind(theta+120.0f)*i_w);
 8001fda:	ed97 0a07 	vldr	s0, [r7, #28]
 8001fde:	f7ff ff8b 	bl	8001ef8 <_Z4sindf>
 8001fe2:	eef0 7a40 	vmov.f32	s15, s0
 8001fe6:	eeb1 7a67 	vneg.f32	s14, s15
 8001fea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fee:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001ff2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ff6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002090 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8001ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	f7ff ff79 	bl	8001ef8 <_Z4sindf>
 8002006:	eeb0 7a40 	vmov.f32	s14, s0
 800200a:	edd7 7a05 	vldr	s15, [r7, #20]
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	ee38 8a67 	vsub.f32	s16, s16, s15
 8002016:	edd7 7a07 	vldr	s15, [r7, #28]
 800201a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002090 <_Z11TransFwdDQZffffRfS_S_+0x140>
 800201e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002022:	eeb0 0a67 	vmov.f32	s0, s15
 8002026:	f7ff ff67 	bl	8001ef8 <_Z4sindf>
 800202a:	eeb0 7a40 	vmov.f32	s14, s0
 800202e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002036:	ee78 7a67 	vsub.f32	s15, s16, s15
 800203a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002094 <_Z11TransFwdDQZffffRfS_S_+0x144>
 800203e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	edc3 7a00 	vstr	s15, [r3]
	i_z = sqrtf(2.0f/3.0f) * (sqrtf(2.0f)/2.0f*i_u + sqrtf(2.0f)/2.0f*i_v + sqrtf(2.0f)/2.0f*i_w);
 8002048:	edd7 7a06 	vldr	s15, [r7, #24]
 800204c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002098 <_Z11TransFwdDQZffffRfS_S_+0x148>
 8002050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002054:	edd7 7a05 	vldr	s15, [r7, #20]
 8002058:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002098 <_Z11TransFwdDQZffffRfS_S_+0x148>
 800205c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002060:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002064:	edd7 7a04 	vldr	s15, [r7, #16]
 8002068:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002098 <_Z11TransFwdDQZffffRfS_S_+0x148>
 800206c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002074:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002094 <_Z11TransFwdDQZffffRfS_S_+0x144>
 8002078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edc3 7a00 	vstr	s15, [r3]
}
 8002082:	bf00      	nop
 8002084:	3720      	adds	r7, #32
 8002086:	46bd      	mov	sp, r7
 8002088:	ecbd 8b02 	vpop	{d8}
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	42f00000 	.word	0x42f00000
 8002094:	3f5105ec 	.word	0x3f5105ec
 8002098:	3f3504f3 	.word	0x3f3504f3

0800209c <_Z11TransRevDQZffffRfS_S_>:
 * @param[out] i_w Current in Z direction in XYZ reference frame.
 */
void TransRevDQZ(
		float theta, float i_d, float i_q, float i_z,
		float& i_u, float& i_v, float& i_w)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	ed2d 8b02 	vpush	{d8}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	ed87 0a07 	vstr	s0, [r7, #28]
 80020aa:	edc7 0a06 	vstr	s1, [r7, #24]
 80020ae:	ed87 1a05 	vstr	s2, [r7, #20]
 80020b2:	edc7 1a04 	vstr	s3, [r7, #16]
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
	i_u = sqrtf(2.0f/3.0f) * (cosd(theta)*i_d - sind(theta)*i_q + sqrtf(2.0f)/2.0f*i_z);
 80020bc:	ed97 0a07 	vldr	s0, [r7, #28]
 80020c0:	f7ff ff30 	bl	8001f24 <_Z4cosdf>
 80020c4:	eeb0 7a40 	vmov.f32	s14, s0
 80020c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020cc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80020d0:	ed97 0a07 	vldr	s0, [r7, #28]
 80020d4:	f7ff ff10 	bl	8001ef8 <_Z4sindf>
 80020d8:	eeb0 7a40 	vmov.f32	s14, s0
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	ee38 7a67 	vsub.f32	s14, s16, s15
 80020e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80020ec:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80021d8 <_Z11TransRevDQZffffRfS_S_+0x13c>
 80020f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80021dc <_Z11TransRevDQZffffRfS_S_+0x140>
 80020fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	edc3 7a00 	vstr	s15, [r3]
	i_v = sqrtf(2.0f/3.0f) * (cosd(theta-120.0f)*i_d - sind(theta-120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 8002106:	edd7 7a07 	vldr	s15, [r7, #28]
 800210a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80021e0 <_Z11TransRevDQZffffRfS_S_+0x144>
 800210e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002112:	eeb0 0a67 	vmov.f32	s0, s15
 8002116:	f7ff ff05 	bl	8001f24 <_Z4cosdf>
 800211a:	eeb0 7a40 	vmov.f32	s14, s0
 800211e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002122:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002126:	edd7 7a07 	vldr	s15, [r7, #28]
 800212a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80021e0 <_Z11TransRevDQZffffRfS_S_+0x144>
 800212e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002132:	eeb0 0a67 	vmov.f32	s0, s15
 8002136:	f7ff fedf 	bl	8001ef8 <_Z4sindf>
 800213a:	eeb0 7a40 	vmov.f32	s14, s0
 800213e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	ee38 7a67 	vsub.f32	s14, s16, s15
 800214a:	edd7 7a04 	vldr	s15, [r7, #16]
 800214e:	eddf 6a22 	vldr	s13, [pc, #136]	; 80021d8 <_Z11TransRevDQZffffRfS_S_+0x13c>
 8002152:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80021dc <_Z11TransRevDQZffffRfS_S_+0x140>
 800215e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	edc3 7a00 	vstr	s15, [r3]
	i_w = sqrtf(2.0f/3.0f) * (cosd(theta+120.0f)*i_d - sind(theta+120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 8002168:	edd7 7a07 	vldr	s15, [r7, #28]
 800216c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80021e0 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002174:	eeb0 0a67 	vmov.f32	s0, s15
 8002178:	f7ff fed4 	bl	8001f24 <_Z4cosdf>
 800217c:	eeb0 7a40 	vmov.f32	s14, s0
 8002180:	edd7 7a06 	vldr	s15, [r7, #24]
 8002184:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002188:	edd7 7a07 	vldr	s15, [r7, #28]
 800218c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80021e0 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002194:	eeb0 0a67 	vmov.f32	s0, s15
 8002198:	f7ff feae 	bl	8001ef8 <_Z4sindf>
 800219c:	eeb0 7a40 	vmov.f32	s14, s0
 80021a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	ee38 7a67 	vsub.f32	s14, s16, s15
 80021ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b0:	eddf 6a09 	vldr	s13, [pc, #36]	; 80021d8 <_Z11TransRevDQZffffRfS_S_+0x13c>
 80021b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021bc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021dc <_Z11TransRevDQZffffRfS_S_+0x140>
 80021c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edc3 7a00 	vstr	s15, [r3]
}
 80021ca:	bf00      	nop
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	ecbd 8b02 	vpop	{d8}
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	3f3504f3 	.word	0x3f3504f3
 80021dc:	3f5105ec 	.word	0x3f5105ec
 80021e0:	42f00000 	.word	0x42f00000

080021e4 <_Z15ElectricalAngleft>:
 * represents 360 degrees * num pole pairs rotation of the electrical angle.
 * @param[in] shaft_angle Shaft angle, in degrees.
 * @param[in] num_pole_pairs Number of pole pairs in the motor.
 * @retval Electrical angle, in degrees.
 */
float ElectricalAngle(float shaft_angle, uint16_t num_pole_pairs) {
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ee:	4603      	mov	r3, r0
 80021f0:	807b      	strh	r3, [r7, #2]
	return shaft_angle * static_cast<float>(num_pole_pairs);
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <_Z14NormalizeAnglef>:
/**
 * @brief Normalizes the value of an angle in degrees to between 0-360 degrees.
 * @param[in] angle Angle to be normalized, in degrees.
 * @retval Normalized angle value between 0 and 360 degrees.
 */
float NormalizeAngle(float angle) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	ed87 0a01 	vstr	s0, [r7, #4]
	float normalized_angle = fmod(angle, 360.0f);
 800221e:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002258 <_Z14NormalizeAnglef+0x44>
 8002222:	ed97 0a01 	vldr	s0, [r7, #4]
 8002226:	f7ff fe1b 	bl	8001e60 <_ZSt4fmodff>
 800222a:	ed87 0a03 	vstr	s0, [r7, #12]
	return normalized_angle > 0 ? normalized_angle : normalized_angle + 360.0f;
 800222e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002232:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223a:	dd02      	ble.n	8002242 <_Z14NormalizeAnglef+0x2e>
 800223c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002240:	e005      	b.n	800224e <_Z14NormalizeAnglef+0x3a>
 8002242:	edd7 7a03 	vldr	s15, [r7, #12]
 8002246:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002258 <_Z14NormalizeAnglef+0x44>
 800224a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	43b40000 	.word	0x43b40000

0800225c <_ZN13CurrentSensorC1Etfff>:
	float i_u{0}; // [A] current measured by current sensor
	float i_v{0};
	float i_w{0};

	// Consturctor
	CurrentSensor(
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6178      	str	r0, [r7, #20]
 8002264:	460b      	mov	r3, r1
 8002266:	ed87 0a03 	vstr	s0, [r7, #12]
 800226a:	edc7 0a02 	vstr	s1, [r7, #8]
 800226e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002272:	827b      	strh	r3, [r7, #18]
		float adc_offset_volts_in,
		float adc_gain_in)
		: adc_max_counts_(adc_max_counts_in)
		, adc_max_volts_(adc_max_volts_in)
		, adc_offset_volts_(adc_offset_volts_in)
		, adc_gain_(adc_gain_in){};
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	8a7a      	ldrh	r2, [r7, #18]
 8002290:	819a      	strh	r2, [r3, #12]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	611a      	str	r2, [r3, #16]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	615a      	str	r2, [r3, #20]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	619a      	str	r2, [r3, #24]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2200      	movs	r2, #0
 80022ae:	621a      	str	r2, [r3, #32]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2200      	movs	r2, #0
 80022b4:	625a      	str	r2, [r3, #36]	; 0x24
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_ZN11MotorDriverC1Efft>:

	/**
	 * @brief MotorDriver constructor.
	 * @param[in] duty_max_in Float containing maximum allowable duty cycle.
	 */
	MotorDriver(float duty_max_in, float duty_min_in, uint16_t pulse_max_in)
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80022d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
		: duty_max_(duty_max_in)
		, duty_min_(duty_min_in)
		, pulse_max_(pulse_max_in){};
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	829a      	strh	r2, [r3, #20]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>:
	/**
	 * @brief Constructor for Motor object.
	 * @param[in] driver MotorDriver for motor.
	 * @param[in] enc Absolute position encoder for motor.
	 */
	Motor(
 8002328:	b084      	sub	sp, #16
 800232a:	b4b0      	push	{r4, r5, r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	f107 001c 	add.w	r0, r7, #28
 8002336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		PIDController * pid_torque)
		: config_(config)
		, driver_(driver)
		, enc_(enc)
		, csense_(csense)
		, pid_torque_(pid_torque) {};
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	461d      	mov	r5, r3
 800233e:	f107 041c 	add.w	r4, r7, #28
 8002342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	602b      	str	r3, [r5, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	751a      	strb	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002354:	619a      	str	r2, [r3, #24]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800235a:	61da      	str	r2, [r3, #28]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002360:	621a      	str	r2, [r3, #32]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	635a      	str	r2, [r3, #52]	; 0x34
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	649a      	str	r2, [r3, #72]	; 0x48
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	659a      	str	r2, [r3, #88]	; 0x58
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	661a      	str	r2, [r3, #96]	; 0x60
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	665a      	str	r2, [r3, #100]	; 0x64
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	669a      	str	r2, [r3, #104]	; 0x68
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	671a      	str	r2, [r3, #112]	; 0x70
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	675a      	str	r2, [r3, #116]	; 0x74
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	679a      	str	r2, [r3, #120]	; 0x78
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	67da      	str	r2, [r3, #124]	; 0x7c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bcb0      	pop	{r4, r5, r7}
 800241c:	b004      	add	sp, #16
 800241e:	4770      	bx	lr

08002420 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b0a0      	sub	sp, #128	; 0x80
 8002424:	af06      	add	r7, sp, #24
	Motor::MotorConfig_t config = {
 8002426:	4b75      	ldr	r3, [pc, #468]	; (80025fc <main_run+0x1dc>)
 8002428:	1d3c      	adds	r4, r7, #4
 800242a:	461d      	mov	r5, r3
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	682b      	ldr	r3, [r5, #0]
 8002432:	6023      	str	r3, [r4, #0]
		0.0f, // [nH] phase_inductance (unused)
		2.0f, // [A] current_limit
		DEFAULT_POWER_SUPPLY_VOLTAGE // [V] power_suply_voltage
	};

	const float kDutyMax = 0.95;
 8002434:	4b72      	ldr	r3, [pc, #456]	; (8002600 <main_run+0x1e0>)
 8002436:	667b      	str	r3, [r7, #100]	; 0x64
	const float kDutyMin = 0.05f;
 8002438:	4b72      	ldr	r3, [pc, #456]	; (8002604 <main_run+0x1e4>)
 800243a:	663b      	str	r3, [r7, #96]	; 0x60
	const uint16_t kPulseMax = 10000;
 800243c:	f242 7310 	movw	r3, #10000	; 0x2710
 8002440:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	MotorDriver * driver = new MotorDriver(kDutyMax, kDutyMin, kPulseMax);
 8002444:	2028      	movs	r0, #40	; 0x28
 8002446:	f008 fc3d 	bl	800acc4 <_Znwj>
 800244a:	4603      	mov	r3, r0
 800244c:	461c      	mov	r4, r3
 800244e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002452:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8002608 <main_run+0x1e8>
 8002456:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800260c <main_run+0x1ec>
 800245a:	4620      	mov	r0, r4
 800245c:	f7ff ff32 	bl	80022c4 <_ZN11MotorDriverC1Efft>
 8002460:	65bc      	str	r4, [r7, #88]	; 0x58
	driver->LinkToPWM(half_bridge_pwm_timer, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 8002462:	4b6b      	ldr	r3, [pc, #428]	; (8002610 <main_run+0x1f0>)
 8002464:	6819      	ldr	r1, [r3, #0]
 8002466:	2308      	movs	r3, #8
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	2304      	movs	r3, #4
 800246c:	2200      	movs	r2, #0
 800246e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002470:	f7ff f936 	bl	80016e0 <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>

	Encoder * enc = new AS5048A(encoder_hspi, ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin);
 8002474:	201c      	movs	r0, #28
 8002476:	f008 fc25 	bl	800acc4 <_Znwj>
 800247a:	4603      	mov	r3, r0
 800247c:	461c      	mov	r4, r3
 800247e:	4b65      	ldr	r3, [pc, #404]	; (8002614 <main_run+0x1f4>)
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2310      	movs	r3, #16
 800248a:	4a63      	ldr	r2, [pc, #396]	; (8002618 <main_run+0x1f8>)
 800248c:	4620      	mov	r0, r4
 800248e:	f7fe fd47 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>
 8002492:	657c      	str	r4, [r7, #84]	; 0x54

	const float kADCMaxCounts = 0xFFF; // 12-bit ADC
 8002494:	4b61      	ldr	r3, [pc, #388]	; (800261c <main_run+0x1fc>)
 8002496:	653b      	str	r3, [r7, #80]	; 0x50
	const float kADCMaxVolts = 3.3f; // VDD rail of MCU
 8002498:	4b61      	ldr	r3, [pc, #388]	; (8002620 <main_run+0x200>)
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const float kADCOffsetVolts = 1.56f; // IHM16M1 datasheet
 800249c:	4b61      	ldr	r3, [pc, #388]	; (8002624 <main_run+0x204>)
 800249e:	64bb      	str	r3, [r7, #72]	; 0x48
	const float kADCGain = 1.53f * 0.33f;
 80024a0:	4b61      	ldr	r3, [pc, #388]	; (8002628 <main_run+0x208>)
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
	CurrentSensor * csense = new CurrentSensor(kADCMaxCounts, kADCMaxVolts, kADCOffsetVolts, kADCGain);
 80024a4:	2028      	movs	r0, #40	; 0x28
 80024a6:	f008 fc0d 	bl	800acc4 <_Znwj>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461c      	mov	r4, r3
 80024ae:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 800262c <main_run+0x20c>
 80024b2:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8002630 <main_run+0x210>
 80024b6:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8002634 <main_run+0x214>
 80024ba:	f640 71ff 	movw	r1, #4095	; 0xfff
 80024be:	4620      	mov	r0, r4
 80024c0:	f7ff fecc 	bl	800225c <_ZN13CurrentSensorC1Etfff>
 80024c4:	643c      	str	r4, [r7, #64]	; 0x40
	csense->LinkToADC(&(curr_sense_adc_buf[0]), &(curr_sense_adc_buf[1]), &(curr_sense_adc_buf[2]));
 80024c6:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <main_run+0x218>)
 80024c8:	4a5c      	ldr	r2, [pc, #368]	; (800263c <main_run+0x21c>)
 80024ca:	495d      	ldr	r1, [pc, #372]	; (8002640 <main_run+0x220>)
 80024cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80024ce:	f7fe ff57 	bl	8001380 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	const float kMaxPhaseVoltage = CONSTRAIN(DEFAULT_POWER_SUPPLY_VOLTAGE, 0.0f, config.current_limit * config.phase_resistance);
 80024d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80024d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80024e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	d506      	bpl.n	80024fa <main_run+0xda>
 80024ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80024f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f8:	e001      	b.n	80024fe <main_run+0xde>
 80024fa:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80024fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	PIDController * pid_torque = new PIDController(DEFAULT_PID_CURR_P, DEFAULT_PID_CURR_I, DEFAULT_PID_CURR_D, DEFAULT_PID_CURR_RAMP, kMaxPhaseVoltage);
 8002502:	2020      	movs	r0, #32
 8002504:	f008 fbde 	bl	800acc4 <_Znwj>
 8002508:	4603      	mov	r3, r0
 800250a:	461c      	mov	r4, r3
 800250c:	ed97 2a0f 	vldr	s4, [r7, #60]	; 0x3c
 8002510:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8002644 <main_run+0x224>
 8002514:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8002644 <main_run+0x224>
 8002518:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8002648 <main_run+0x228>
 800251c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff fb49 	bl	8001bb8 <_ZN13PIDControllerC1Efffff>
 8002526:	63bc      	str	r4, [r7, #56]	; 0x38

	motor = new Motor(config, driver, enc, csense, pid_torque);
 8002528:	f107 0418 	add.w	r4, r7, #24
 800252c:	1d3d      	adds	r5, r7, #4
 800252e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	6023      	str	r3, [r4, #0]
 8002536:	2080      	movs	r0, #128	; 0x80
 8002538:	f008 fbc4 	bl	800acc4 <_Znwj>
 800253c:	4603      	mov	r3, r0
 800253e:	461c      	mov	r4, r3
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	9305      	str	r3, [sp, #20]
 8002544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002546:	9304      	str	r3, [sp, #16]
 8002548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254a:	9303      	str	r3, [sp, #12]
 800254c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800254e:	9302      	str	r3, [sp, #8]
 8002550:	466a      	mov	r2, sp
 8002552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002556:	e893 0003 	ldmia.w	r3, {r0, r1}
 800255a:	e882 0003 	stmia.w	r2, {r0, r1}
 800255e:	f107 0318 	add.w	r3, r7, #24
 8002562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002564:	4620      	mov	r0, r4
 8002566:	f7ff fedf 	bl	8002328 <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>
 800256a:	4b38      	ldr	r3, [pc, #224]	; (800264c <main_run+0x22c>)
 800256c:	601c      	str	r4, [r3, #0]
	motor->Init();
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <main_run+0x22c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe ff8a 	bl	800148c <_ZN5Motor4InitEv>
	HAL_TIM_Base_Start_IT(half_bridge_pwm_timer); // start interrupts for TIM1 Update, which will trigger the motor updates
 8002578:	4b25      	ldr	r3, [pc, #148]	; (8002610 <main_run+0x1f0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f005 ff07 	bl	8008390 <HAL_TIM_Base_Start_IT>

#ifdef RUN_TESTS
	RunAllTests();
 8002582:	f000 f87f 	bl	8002684 <_Z11RunAllTestsv>
#endif

	// Currents to toggle between
	float theta = 0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
	float dtheta = 1;
 800258c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
	float max_current = 2.0; // [A]
 8002592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	482d      	ldr	r0, [pc, #180]	; (8002650 <main_run+0x230>)
 800259c:	f003 ff61 	bl	8006462 <HAL_GPIO_TogglePin>

		motor->SetCurrent(max_current, 0.0f, 0.0f);
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <main_run+0x22c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8002644 <main_run+0x224>
 80025a8:	eddf 0a26 	vldr	s1, [pc, #152]	; 8002644 <main_run+0x224>
 80025ac:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe ff85 	bl	80014c0 <_ZN5Motor10SetCurrentEfff>
		HAL_Delay(1000);
 80025b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ba:	f002 fccd 	bl	8004f58 <HAL_Delay>
//		osDelayUntil(osTickCount + osTickFreq / task1Freq);
		motor->SetCurrent(0.0f, max_current, 0.0f);
 80025be:	4b23      	ldr	r3, [pc, #140]	; (800264c <main_run+0x22c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002644 <main_run+0x224>
 80025c6:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 80025ca:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8002644 <main_run+0x224>
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe ff76 	bl	80014c0 <_ZN5Motor10SetCurrentEfff>
		HAL_Delay(1000);
 80025d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d8:	f002 fcbe 	bl	8004f58 <HAL_Delay>
//		osDelayUntil(osTickCount + osTickFreq / task1Freq);
		motor->SetCurrent(0.0f, 0.0f, max_current);
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <main_run+0x22c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80025e4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002644 <main_run+0x224>
 80025e8:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002644 <main_run+0x224>
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ff67 	bl	80014c0 <_ZN5Motor10SetCurrentEfff>
		HAL_Delay(1000);
 80025f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f6:	f002 fcaf 	bl	8004f58 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025fa:	e7cd      	b.n	8002598 <main_run+0x178>
 80025fc:	0800d9b8 	.word	0x0800d9b8
 8002600:	3f733333 	.word	0x3f733333
 8002604:	3d4ccccd 	.word	0x3d4ccccd
 8002608:	3d4ccccd 	.word	0x3d4ccccd
 800260c:	3f733333 	.word	0x3f733333
 8002610:	2000021c 	.word	0x2000021c
 8002614:	20000758 	.word	0x20000758
 8002618:	40020000 	.word	0x40020000
 800261c:	457ff000 	.word	0x457ff000
 8002620:	40533333 	.word	0x40533333
 8002624:	3fc7ae14 	.word	0x3fc7ae14
 8002628:	3f014121 	.word	0x3f014121
 800262c:	3f014121 	.word	0x3f014121
 8002630:	3fc7ae14 	.word	0x3fc7ae14
 8002634:	40533333 	.word	0x40533333
 8002638:	20000208 	.word	0x20000208
 800263c:	20000206 	.word	0x20000206
 8002640:	20000204 	.word	0x20000204
 8002644:	00000000 	.word	0x00000000
 8002648:	43960000 	.word	0x43960000
 800264c:	20000200 	.word	0x20000200
 8002650:	40020400 	.word	0x40020400

08002654 <ADCConvCpltCallback>:
	}

	return 1;
}

void ADCConvCpltCallback() {
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	4807      	ldr	r0, [pc, #28]	; (800267c <ADCConvCpltCallback+0x28>)
 800265e:	f003 fee7 	bl	8006430 <HAL_GPIO_WritePin>
	motor->Update();
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <ADCConvCpltCallback+0x2c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe ff5c 	bl	8001524 <_ZN5Motor6UpdateEv>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800266c:	2200      	movs	r2, #0
 800266e:	2140      	movs	r1, #64	; 0x40
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <ADCConvCpltCallback+0x28>)
 8002672:	f003 fedd 	bl	8006430 <HAL_GPIO_WritePin>
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021800 	.word	0x40021800
 8002680:	20000200 	.word	0x20000200

08002684 <_Z11RunAllTestsv>:

#ifdef RUN_TESTS
void RunAllTests() {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	TestEncoderAll();
 8002688:	f000 fc74 	bl	8002f74 <_Z14TestEncoderAllv>
	TestPIDControllerAll();
 800268c:	f001 fbd8 	bl	8003e40 <_Z20TestPIDControllerAllv>
	TestCurrentSensorAll();
 8002690:	f000 f98e 	bl	80029b0 <_Z20TestCurrentSensorAllv>
	TestMotorDriverAll();
 8002694:	f000 fff4 	bl	8003680 <_Z18TestMotorDriverAllv>
	TestFOCUtilsAll();
 8002698:	f000 ff94 	bl	80035c4 <_Z15TestFOCUtilsAllv>
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_Z18CurrentsAreCorrect13CurrentSensorfff>:
 */

#include "test_framework.hh"
#include "test_current_sensor.hh"

bool CurrentsAreCorrect(CurrentSensor current_sensor, float i_u_expect, float i_v_expect, float i_w_expect) {
 80026a0:	b084      	sub	sp, #16
 80026a2:	b5b0      	push	{r4, r5, r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af02      	add	r7, sp, #8
 80026a8:	f107 0420 	add.w	r4, r7, #32
 80026ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80026b0:	ed87 0a03 	vstr	s0, [r7, #12]
 80026b4:	edc7 0a02 	vstr	s1, [r7, #8]
 80026b8:	ed87 1a01 	vstr	s2, [r7, #4]
	if (current_sensor.i_u != i_u_expect) {
 80026bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80026c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80026c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80026c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026cc:	d013      	beq.n	80026f6 <_Z18CurrentsAreCorrect13CurrentSensorfff+0x56>
		T_FAIL_PRINT("Incorrect phase U current: expected %f but got %f.\r\n", i_u_expect, current_sensor.i_u);
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7fd ff62 	bl	8000598 <__aeabi_f2d>
 80026d4:	4604      	mov	r4, r0
 80026d6:	460d      	mov	r5, r1
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff5c 	bl	8000598 <__aeabi_f2d>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	e9cd 2300 	strd	r2, r3, [sp]
 80026e8:	4622      	mov	r2, r4
 80026ea:	462b      	mov	r3, r5
 80026ec:	4823      	ldr	r0, [pc, #140]	; (800277c <_Z18CurrentsAreCorrect13CurrentSensorfff+0xdc>)
 80026ee:	f009 f91b 	bl	800b928 <iprintf>
		return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e03a      	b.n	800276c <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_v != i_v_expect) {
 80026f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80026fe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002706:	d013      	beq.n	8002730 <_Z18CurrentsAreCorrect13CurrentSensorfff+0x90>
		T_FAIL_PRINT("Incorrect phase V current: expected %f but got %f.\r\n", i_v_expect, current_sensor.i_v);
 8002708:	68b8      	ldr	r0, [r7, #8]
 800270a:	f7fd ff45 	bl	8000598 <__aeabi_f2d>
 800270e:	4604      	mov	r4, r0
 8002710:	460d      	mov	r5, r1
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff3f 	bl	8000598 <__aeabi_f2d>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	e9cd 2300 	strd	r2, r3, [sp]
 8002722:	4622      	mov	r2, r4
 8002724:	462b      	mov	r3, r5
 8002726:	4816      	ldr	r0, [pc, #88]	; (8002780 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe0>)
 8002728:	f009 f8fe 	bl	800b928 <iprintf>
		return false;
 800272c:	2300      	movs	r3, #0
 800272e:	e01d      	b.n	800276c <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_w != i_w_expect) {
 8002730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002734:	ed97 7a01 	vldr	s14, [r7, #4]
 8002738:	eeb4 7a67 	vcmp.f32	s14, s15
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	d013      	beq.n	800276a <_Z18CurrentsAreCorrect13CurrentSensorfff+0xca>
		T_FAIL_PRINT("Incorrect phase W current: expected %f but got %f.\r\n", i_w_expect, current_sensor.i_w);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fd ff28 	bl	8000598 <__aeabi_f2d>
 8002748:	4604      	mov	r4, r0
 800274a:	460d      	mov	r5, r1
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff22 	bl	8000598 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	e9cd 2300 	strd	r2, r3, [sp]
 800275c:	4622      	mov	r2, r4
 800275e:	462b      	mov	r3, r5
 8002760:	4808      	ldr	r0, [pc, #32]	; (8002784 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe4>)
 8002762:	f009 f8e1 	bl	800b928 <iprintf>
		return false;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	}
	return true;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002776:	b004      	add	sp, #16
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	0800d9cc 	.word	0x0800d9cc
 8002780:	0800da1c 	.word	0x0800da1c
 8002784:	0800da6c 	.word	0x0800da6c

08002788 <_Z24TestCurrentSensorCurrentv>:

bool TestCurrentSensorCurrent() {
 8002788:	b5b0      	push	{r4, r5, r7, lr}
 800278a:	b09a      	sub	sp, #104	; 0x68
 800278c:	af06      	add	r7, sp, #24
	TEST_PRINT("Simulate Current through Current Sensor.\r\n");
 800278e:	4881      	ldr	r0, [pc, #516]	; (8002994 <_Z24TestCurrentSensorCurrentv+0x20c>)
 8002790:	f009 f950 	bl	800ba34 <puts>
	uint16_t csense_adc_counts[3] = {0};
 8002794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	809a      	strh	r2, [r3, #4]

	uint16_t adc_max_counts = 0xFFF;
 800279e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80027a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	float adc_max_volts = 3.3f;
 80027a6:	4b7c      	ldr	r3, [pc, #496]	; (8002998 <_Z24TestCurrentSensorCurrentv+0x210>)
 80027a8:	64bb      	str	r3, [r7, #72]	; 0x48
	float adc_offset = 1.56f;
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <_Z24TestCurrentSensorCurrentv+0x214>)
 80027ac:	647b      	str	r3, [r7, #68]	; 0x44
	float adc_gain = 0.33f;
 80027ae:	4b7c      	ldr	r3, [pc, #496]	; (80029a0 <_Z24TestCurrentSensorCurrentv+0x218>)
 80027b0:	643b      	str	r3, [r7, #64]	; 0x40
	CurrentSensor current_sensor(adc_max_counts, adc_max_volts, adc_offset, adc_gain);
 80027b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80027bc:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80027c0:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd48 	bl	800225c <_ZN13CurrentSensorC1Etfff>
	current_sensor.LinkToADC(&(csense_adc_counts[0]), &(csense_adc_counts[1]), &(csense_adc_counts[2]));
 80027cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d0:	1d1c      	adds	r4, r3, #4
 80027d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d6:	1c9a      	adds	r2, r3, #2
 80027d8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80027dc:	1d38      	adds	r0, r7, #4
 80027de:	4623      	mov	r3, r4
 80027e0:	f7fe fdce 	bl	8001380 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	T_TEST_PRINT("Current sense ADC counts at 0.\r\n");
 80027e4:	486f      	ldr	r0, [pc, #444]	; (80029a4 <_Z24TestCurrentSensorCurrentv+0x21c>)
 80027e6:	f009 f925 	bl	800ba34 <puts>
	current_sensor.ReadCurrents();
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fddd 	bl	80013ac <_ZN13CurrentSensor12ReadCurrentsEv>
	float i_u_expect = -adc_offset / adc_gain * 1000;
 80027f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80027f6:	eef1 6a67 	vneg.f32	s13, s15
 80027fa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80027fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002802:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 8002806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float i_v_expect = -adc_offset / adc_gain * 1000;
 800280e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002812:	eef1 6a67 	vneg.f32	s13, s15
 8002816:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800281a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 8002822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002826:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float i_w_expect = -adc_offset / adc_gain * 1000;
 800282a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800282e:	eef1 6a67 	vneg.f32	s13, s15
 8002832:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 800283e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002842:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002846:	466d      	mov	r5, sp
 8002848:	f107 0414 	add.w	r4, r7, #20
 800284c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800284e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002850:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002854:	e885 0003 	stmia.w	r5, {r0, r1}
 8002858:	1d3b      	adds	r3, r7, #4
 800285a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800285c:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002860:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002864:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002868:	f7ff ff1a 	bl	80026a0 <_Z18CurrentsAreCorrect13CurrentSensorfff>
 800286c:	4603      	mov	r3, r0
 800286e:	f083 0301 	eor.w	r3, r3, #1
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <_Z24TestCurrentSensorCurrentv+0xf4>
		return false;
 8002878:	2300      	movs	r3, #0
 800287a:	e087      	b.n	800298c <_Z24TestCurrentSensorCurrentv+0x204>
	}

	T_TEST_PRINT("Current sense ADC counts at random values.\r\n");
 800287c:	484b      	ldr	r0, [pc, #300]	; (80029ac <_Z24TestCurrentSensorCurrentv+0x224>)
 800287e:	f009 f8d9 	bl	800ba34 <puts>
	csense_adc_counts[0] = 156;
 8002882:	239c      	movs	r3, #156	; 0x9c
 8002884:	85bb      	strh	r3, [r7, #44]	; 0x2c
	csense_adc_counts[1] = 0xFFF;
 8002886:	f640 73ff 	movw	r3, #4095	; 0xfff
 800288a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	csense_adc_counts[2] = 2934;
 800288c:	f640 3376 	movw	r3, #2934	; 0xb76
 8002890:	863b      	strh	r3, [r7, #48]	; 0x30
	current_sensor.ReadCurrents();
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fd89 	bl	80013ac <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_expect = (static_cast<float>(csense_adc_counts[0]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 800289a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800289c:	ee07 3a90 	vmov	s15, r3
 80028a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028b4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80028c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028cc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 80028d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	i_v_expect = (static_cast<float>(csense_adc_counts[1]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 80028d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80028f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80028fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002902:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	i_w_expect = (static_cast<float>(csense_adc_counts[2]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002916:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002920:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002924:	ee07 3a90 	vmov	s15, r3
 8002928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002930:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800293c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002940:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002948:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80029a8 <_Z24TestCurrentSensorCurrentv+0x220>
 800294c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002950:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002954:	466d      	mov	r5, sp
 8002956:	f107 0414 	add.w	r4, r7, #20
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002962:	e885 0003 	stmia.w	r5, {r0, r1}
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800296a:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 800296e:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002972:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002976:	f7ff fe93 	bl	80026a0 <_Z18CurrentsAreCorrect13CurrentSensorfff>
 800297a:	4603      	mov	r3, r0
 800297c:	f083 0301 	eor.w	r3, r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <_Z24TestCurrentSensorCurrentv+0x202>
		return false;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <_Z24TestCurrentSensorCurrentv+0x204>
	}
	return true;
 800298a:	2301      	movs	r3, #1
}
 800298c:	4618      	mov	r0, r3
 800298e:	3750      	adds	r7, #80	; 0x50
 8002990:	46bd      	mov	sp, r7
 8002992:	bdb0      	pop	{r4, r5, r7, pc}
 8002994:	0800dabc 	.word	0x0800dabc
 8002998:	40533333 	.word	0x40533333
 800299c:	3fc7ae14 	.word	0x3fc7ae14
 80029a0:	3ea8f5c3 	.word	0x3ea8f5c3
 80029a4:	0800daf8 	.word	0x0800daf8
 80029a8:	447a0000 	.word	0x447a0000
 80029ac:	0800db2c 	.word	0x0800db2c

080029b0 <_Z20TestCurrentSensorAllv>:

void TestCurrentSensorAll() {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
	bool csense_passed = true;
 80029b6:	2301      	movs	r3, #1
 80029b8:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test CurrentSensor Class");
 80029ba:	490e      	ldr	r1, [pc, #56]	; (80029f4 <_Z20TestCurrentSensorAllv+0x44>)
 80029bc:	480e      	ldr	r0, [pc, #56]	; (80029f8 <_Z20TestCurrentSensorAllv+0x48>)
 80029be:	f008 ffb3 	bl	800b928 <iprintf>
	csense_passed &= TestCurrentSensorCurrent();
 80029c2:	f7ff fee1 	bl	8002788 <_Z24TestCurrentSensorCurrentv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	461a      	mov	r2, r3
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	71fb      	strb	r3, [r7, #7]
	if (csense_passed) {
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <_Z20TestCurrentSensorAllv+0x36>
		PASS_PRINT("CurrentSensor Class\r\n");
 80029de:	4807      	ldr	r0, [pc, #28]	; (80029fc <_Z20TestCurrentSensorAllv+0x4c>)
 80029e0:	f009 f828 	bl	800ba34 <puts>
	} else {
		FAIL_PRINT("CurrentSensor Class\r\n");
	}
}
 80029e4:	e002      	b.n	80029ec <_Z20TestCurrentSensorAllv+0x3c>
		FAIL_PRINT("CurrentSensor Class\r\n");
 80029e6:	4806      	ldr	r0, [pc, #24]	; (8002a00 <_Z20TestCurrentSensorAllv+0x50>)
 80029e8:	f009 f824 	bl	800ba34 <puts>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	0800db6c 	.word	0x0800db6c
 80029f8:	0800db88 	.word	0x0800db88
 80029fc:	0800db9c 	.word	0x0800db9c
 8002a00:	0800dbc8 	.word	0x0800dbc8

08002a04 <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	; 0x30
 8002a08:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 8002a0a:	4816      	ldr	r0, [pc, #88]	; (8002a64 <_Z17TestEncoderCreatev+0x60>)
 8002a0c:	f009 f812 	bl	800ba34 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002a1c:	8bfb      	ldrh	r3, [r7, #30]
 8002a1e:	4638      	mov	r0, r7
 8002a20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a24:	9200      	str	r2, [sp, #0]
 8002a26:	6a3a      	ldr	r2, [r7, #32]
 8002a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2a:	f7fe fa79 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fc79 	bl	8001328 <_ZN7Encoder9get_angleEv>
 8002a36:	eef0 7a40 	vmov.f32	s15, s0
 8002a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 8002a44:	8bbb      	ldrh	r3, [r7, #28]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <_Z17TestEncoderCreatev+0x56>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8002a4a:	8bbb      	ldrh	r3, [r7, #28]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4805      	ldr	r0, [pc, #20]	; (8002a68 <_Z17TestEncoderCreatev+0x64>)
 8002a52:	f008 ff69 	bl	800b928 <iprintf>
		return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <_Z17TestEncoderCreatev+0x58>
	}

	return true;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3728      	adds	r7, #40	; 0x28
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0800dbf4 	.word	0x0800dbf4
 8002a68:	0800dc14 	.word	0x0800dc14

08002a6c <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8002a6c:	b5b0      	push	{r4, r5, r7, lr}
 8002a6e:	b08e      	sub	sp, #56	; 0x38
 8002a70:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 8002a72:	4839      	ldr	r0, [pc, #228]	; (8002b58 <_Z15TestEncoderZerov+0xec>)
 8002a74:	f008 ffde 	bl	800ba34 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002a84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a86:	4638      	mov	r0, r7
 8002a88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a92:	f7fe fa45 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 8002a96:	4831      	ldr	r0, [pc, #196]	; (8002b5c <_Z15TestEncoderZerov+0xf0>)
 8002a98:	f008 ffcc 	bl	800ba34 <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002b60 <_Z15TestEncoderZerov+0xf4>
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fc2c 	bl	8001300 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fc3c 	bl	8001328 <_ZN7Encoder9get_angleEv>
 8002ab0:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 8002ab4:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <_Z15TestEncoderZerov+0xf8>)
 8002ab6:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002ab8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d012      	beq.n	8002af0 <_Z15TestEncoderZerov+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002aca:	69f8      	ldr	r0, [r7, #28]
 8002acc:	f7fd fd64 	bl	8000598 <__aeabi_f2d>
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	460d      	mov	r5, r1
 8002ad4:	6a38      	ldr	r0, [r7, #32]
 8002ad6:	f7fd fd5f 	bl	8000598 <__aeabi_f2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	e9cd 2300 	strd	r2, r3, [sp]
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	4820      	ldr	r0, [pc, #128]	; (8002b68 <_Z15TestEncoderZerov+0xfc>)
 8002ae8:	f008 ff1e 	bl	800b928 <iprintf>
		return false;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e02e      	b.n	8002b4e <_Z15TestEncoderZerov+0xe2>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 8002af0:	481e      	ldr	r0, [pc, #120]	; (8002b6c <_Z15TestEncoderZerov+0x100>)
 8002af2:	f008 ff9f 	bl	800ba34 <puts>
	enc.set_zero_angle(3600);
 8002af6:	463b      	mov	r3, r7
 8002af8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002b70 <_Z15TestEncoderZerov+0x104>
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fbff 	bl	8001300 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8002b02:	463b      	mov	r3, r7
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fc0f 	bl	8001328 <_ZN7Encoder9get_angleEv>
 8002b0a:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002b14:	ed97 7a08 	vldr	s14, [r7, #32]
 8002b18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	d012      	beq.n	8002b4c <_Z15TestEncoderZerov+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002b26:	69f8      	ldr	r0, [r7, #28]
 8002b28:	f7fd fd36 	bl	8000598 <__aeabi_f2d>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	460d      	mov	r5, r1
 8002b30:	6a38      	ldr	r0, [r7, #32]
 8002b32:	f7fd fd31 	bl	8000598 <__aeabi_f2d>
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	4809      	ldr	r0, [pc, #36]	; (8002b68 <_Z15TestEncoderZerov+0xfc>)
 8002b44:	f008 fef0 	bl	800b928 <iprintf>
		return false;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <_Z15TestEncoderZerov+0xe2>
	}

	return true;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3730      	adds	r7, #48	; 0x30
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bdb0      	pop	{r4, r5, r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0800dc70 	.word	0x0800dc70
 8002b5c:	0800dc90 	.word	0x0800dc90
 8002b60:	425c0000 	.word	0x425c0000
 8002b64:	43988000 	.word	0x43988000
 8002b68:	0800dcc0 	.word	0x0800dcc0
 8002b6c:	0800dd04 	.word	0x0800dd04
 8002b70:	45610000 	.word	0x45610000

08002b74 <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 8002b74:	b5b0      	push	{r4, r5, r7, lr}
 8002b76:	b08e      	sub	sp, #56	; 0x38
 8002b78:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 8002b7a:	4838      	ldr	r0, [pc, #224]	; (8002c5c <_Z16TestEncoderAnglev+0xe8>)
 8002b7c:	f008 ff5a 	bl	800ba34 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b9a:	f7fe f9c1 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 8002b9e:	4830      	ldr	r0, [pc, #192]	; (8002c60 <_Z16TestEncoderAnglev+0xec>)
 8002ba0:	f008 ff48 	bl	800ba34 <puts>
	enc.set_angle(450.5);
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002c64 <_Z16TestEncoderAnglev+0xf0>
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fbd4 	bl	8001358 <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe fbb8 	bl	8001328 <_ZN7Encoder9get_angleEv>
 8002bb8:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 8002bbc:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <_Z16TestEncoderAnglev+0xf4>)
 8002bbe:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002bc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bc4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bc8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d012      	beq.n	8002bf8 <_Z16TestEncoderAnglev+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002bd2:	69f8      	ldr	r0, [r7, #28]
 8002bd4:	f7fd fce0 	bl	8000598 <__aeabi_f2d>
 8002bd8:	4604      	mov	r4, r0
 8002bda:	460d      	mov	r5, r1
 8002bdc:	6a38      	ldr	r0, [r7, #32]
 8002bde:	f7fd fcdb 	bl	8000598 <__aeabi_f2d>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	e9cd 2300 	strd	r2, r3, [sp]
 8002bea:	4622      	mov	r2, r4
 8002bec:	462b      	mov	r3, r5
 8002bee:	481f      	ldr	r0, [pc, #124]	; (8002c6c <_Z16TestEncoderAnglev+0xf8>)
 8002bf0:	f008 fe9a 	bl	800b928 <iprintf>
		return false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e02d      	b.n	8002c54 <_Z16TestEncoderAnglev+0xe0>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 8002bf8:	481d      	ldr	r0, [pc, #116]	; (8002c70 <_Z16TestEncoderAnglev+0xfc>)
 8002bfa:	f008 ff1b 	bl	800ba34 <puts>
	enc.set_angle(-500.9);
 8002bfe:	463b      	mov	r3, r7
 8002c00:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002c74 <_Z16TestEncoderAnglev+0x100>
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fba7 	bl	8001358 <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fb8b 	bl	8001328 <_ZN7Encoder9get_angleEv>
 8002c12:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 8002c16:	4b18      	ldr	r3, [pc, #96]	; (8002c78 <_Z16TestEncoderAnglev+0x104>)
 8002c18:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002c1a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c1e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c22:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2a:	d012      	beq.n	8002c52 <_Z16TestEncoderAnglev+0xde>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002c2c:	69f8      	ldr	r0, [r7, #28]
 8002c2e:	f7fd fcb3 	bl	8000598 <__aeabi_f2d>
 8002c32:	4604      	mov	r4, r0
 8002c34:	460d      	mov	r5, r1
 8002c36:	6a38      	ldr	r0, [r7, #32]
 8002c38:	f7fd fcae 	bl	8000598 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	e9cd 2300 	strd	r2, r3, [sp]
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	4808      	ldr	r0, [pc, #32]	; (8002c6c <_Z16TestEncoderAnglev+0xf8>)
 8002c4a:	f008 fe6d 	bl	800b928 <iprintf>
		return false;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <_Z16TestEncoderAnglev+0xe0>
	}

	return true;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	; 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5c:	0800dd3c 	.word	0x0800dd3c
 8002c60:	0800dd60 	.word	0x0800dd60
 8002c64:	43e14000 	.word	0x43e14000
 8002c68:	42b50000 	.word	0x42b50000
 8002c6c:	0800dcc0 	.word	0x0800dcc0
 8002c70:	0800dd88 	.word	0x0800dd88
 8002c74:	c3fa7333 	.word	0xc3fa7333
 8002c78:	435b199a 	.word	0x435b199a

08002c7c <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08c      	sub	sp, #48	; 0x30
 8002c80:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 8002c82:	483c      	ldr	r0, [pc, #240]	; (8002d74 <_Z17TestAS5048AParityv+0xf8>)
 8002c84:	f008 fed6 	bl	800ba34 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002c94:	8bfb      	ldrh	r3, [r7, #30]
 8002c96:	4638      	mov	r0, r7
 8002c98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	6a3a      	ldr	r2, [r7, #32]
 8002ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ca2:	f7fe f93d 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 8002ca6:	4834      	ldr	r0, [pc, #208]	; (8002d78 <_Z17TestAS5048AParityv+0xfc>)
 8002ca8:	f008 fec4 	bl	800ba34 <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 8002cac:	463b      	mov	r3, r7
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe f975 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002cbe:	7f7a      	ldrb	r2, [r7, #29]
 8002cc0:	7f3b      	ldrb	r3, [r7, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d007      	beq.n	8002cd6 <_Z17TestAS5048AParityv+0x5a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002cc6:	7f3b      	ldrb	r3, [r7, #28]
 8002cc8:	7f7a      	ldrb	r2, [r7, #29]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	482b      	ldr	r0, [pc, #172]	; (8002d7c <_Z17TestAS5048AParityv+0x100>)
 8002cce:	f008 fe2b 	bl	800b928 <iprintf>
		return false;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e04a      	b.n	8002d6c <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 8002cd6:	482a      	ldr	r0, [pc, #168]	; (8002d80 <_Z17TestAS5048AParityv+0x104>)
 8002cd8:	f008 feac 	bl	800ba34 <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe f95d 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002cee:	7f7a      	ldrb	r2, [r7, #29]
 8002cf0:	7f3b      	ldrb	r3, [r7, #28]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d007      	beq.n	8002d06 <_Z17TestAS5048AParityv+0x8a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002cf6:	7f3b      	ldrb	r3, [r7, #28]
 8002cf8:	7f7a      	ldrb	r2, [r7, #29]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	481f      	ldr	r0, [pc, #124]	; (8002d7c <_Z17TestAS5048AParityv+0x100>)
 8002cfe:	f008 fe13 	bl	800b928 <iprintf>
		return false;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e032      	b.n	8002d6c <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 8002d06:	481f      	ldr	r0, [pc, #124]	; (8002d84 <_Z17TestAS5048AParityv+0x108>)
 8002d08:	f008 fe94 	bl	800ba34 <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f944 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002d20:	7f7a      	ldrb	r2, [r7, #29]
 8002d22:	7f3b      	ldrb	r3, [r7, #28]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d007      	beq.n	8002d38 <_Z17TestAS5048AParityv+0xbc>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002d28:	7f3b      	ldrb	r3, [r7, #28]
 8002d2a:	7f7a      	ldrb	r2, [r7, #29]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4813      	ldr	r0, [pc, #76]	; (8002d7c <_Z17TestAS5048AParityv+0x100>)
 8002d30:	f008 fdfa 	bl	800b928 <iprintf>
		return false;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e019      	b.n	8002d6c <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 8002d38:	4813      	ldr	r0, [pc, #76]	; (8002d88 <_Z17TestAS5048AParityv+0x10c>)
 8002d3a:	f008 fe7b 	bl	800ba34 <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 8002d3e:	463b      	mov	r3, r7
 8002d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe f92b 	bl	8000fa0 <_ZN7AS5048A15CalcEvenParity_Et>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002d52:	7f7a      	ldrb	r2, [r7, #29]
 8002d54:	7f3b      	ldrb	r3, [r7, #28]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d007      	beq.n	8002d6a <_Z17TestAS5048AParityv+0xee>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8002d5a:	7f3b      	ldrb	r3, [r7, #28]
 8002d5c:	7f7a      	ldrb	r2, [r7, #29]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4806      	ldr	r0, [pc, #24]	; (8002d7c <_Z17TestAS5048AParityv+0x100>)
 8002d62:	f008 fde1 	bl	800b928 <iprintf>
		return false;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <_Z17TestAS5048AParityv+0xf0>
	}

	return true;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	; 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	0800ddb0 	.word	0x0800ddb0
 8002d78:	0800dde0 	.word	0x0800dde0
 8002d7c:	0800de08 	.word	0x0800de08
 8002d80:	0800de50 	.word	0x0800de50
 8002d84:	0800de78 	.word	0x0800de78
 8002d88:	0800dea8 	.word	0x0800dea8

08002d8c <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08e      	sub	sp, #56	; 0x38
 8002d90:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 8002d92:	486d      	ldr	r0, [pc, #436]	; (8002f48 <_Z18TestAS5048APacketsv+0x1bc>)
 8002d94:	f008 fe4e 	bl	800ba34 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002da4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002da6:	4638      	mov	r0, r7
 8002da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dac:	9200      	str	r2, [sp, #0]
 8002dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002db2:	f7fe f8b5 	bl	8000f20 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 8002db6:	4865      	ldr	r0, [pc, #404]	; (8002f4c <_Z18TestAS5048APacketsv+0x1c0>)
 8002db8:	f008 fe3c 	bl	800ba34 <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe f91e 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 8002dce:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 8002dd2:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002dd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d007      	beq.n	8002dec <_Z18TestAS5048APacketsv+0x60>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002de0:	4619      	mov	r1, r3
 8002de2:	485b      	ldr	r0, [pc, #364]	; (8002f50 <_Z18TestAS5048APacketsv+0x1c4>)
 8002de4:	f008 fda0 	bl	800b928 <iprintf>
		return false;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e0a9      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8002dec:	4859      	ldr	r0, [pc, #356]	; (8002f54 <_Z18TestAS5048APacketsv+0x1c8>)
 8002dee:	f008 fe21 	bl	800ba34 <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 8002df2:	463b      	mov	r3, r7
 8002df4:	2200      	movs	r2, #0
 8002df6:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f903 	bl	8001006 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8002e00:	4603      	mov	r3, r0
 8002e02:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8002e04:	f643 63ef 	movw	r3, #16111	; 0x3eef
 8002e08:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d007      	beq.n	8002e22 <_Z18TestAS5048APacketsv+0x96>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002e12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	484d      	ldr	r0, [pc, #308]	; (8002f50 <_Z18TestAS5048APacketsv+0x1c4>)
 8002e1a:	f008 fd85 	bl	800b928 <iprintf>
		return false;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e08e      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 8002e22:	484d      	ldr	r0, [pc, #308]	; (8002f58 <_Z18TestAS5048APacketsv+0x1cc>)
 8002e24:	f008 fe06 	bl	800ba34 <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 8002e28:	463b      	mov	r3, r7
 8002e2a:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f912 	bl	8001058 <_ZN7AS5048A18CreateWritePacket_Et>
 8002e34:	4603      	mov	r3, r0
 8002e36:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 8002e38:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002e3c:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002e3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d007      	beq.n	8002e56 <_Z18TestAS5048APacketsv+0xca>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002e46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4843      	ldr	r0, [pc, #268]	; (8002f5c <_Z18TestAS5048APacketsv+0x1d0>)
 8002e4e:	f008 fd6b 	bl	800b928 <iprintf>
		return false;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e074      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8002e56:	4842      	ldr	r0, [pc, #264]	; (8002f60 <_Z18TestAS5048APacketsv+0x1d4>)
 8002e58:	f008 fdec 	bl	800ba34 <puts>
	uint16_t received_pack = 0b1001111010101101;
 8002e5c:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002e60:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 8002e62:	8c3a      	ldrh	r2, [r7, #32]
 8002e64:	463b      	mov	r3, r7
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe f911 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 8002e72:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002e76:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002e78:	8bfa      	ldrh	r2, [r7, #30]
 8002e7a:	8bbb      	ldrh	r3, [r7, #28]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d007      	beq.n	8002e90 <_Z18TestAS5048APacketsv+0x104>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002e80:	8bbb      	ldrh	r3, [r7, #28]
 8002e82:	8bfa      	ldrh	r2, [r7, #30]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4837      	ldr	r0, [pc, #220]	; (8002f64 <_Z18TestAS5048APacketsv+0x1d8>)
 8002e88:	f008 fd4e 	bl	800b928 <iprintf>
		return false;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e057      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 8002e90:	4835      	ldr	r0, [pc, #212]	; (8002f68 <_Z18TestAS5048APacketsv+0x1dc>)
 8002e92:	f008 fdcf 	bl	800ba34 <puts>
	received_pack = 0b0001111010101101;
 8002e96:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002e9a:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002e9c:	8c3a      	ldrh	r2, [r7, #32]
 8002e9e:	463b      	mov	r3, r7
 8002ea0:	4611      	mov	r1, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f8f4 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb0:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002eb2:	8bfa      	ldrh	r2, [r7, #30]
 8002eb4:	8bbb      	ldrh	r3, [r7, #28]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d007      	beq.n	8002eca <_Z18TestAS5048APacketsv+0x13e>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002eba:	8bbb      	ldrh	r3, [r7, #28]
 8002ebc:	8bfa      	ldrh	r2, [r7, #30]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4828      	ldr	r0, [pc, #160]	; (8002f64 <_Z18TestAS5048APacketsv+0x1d8>)
 8002ec2:	f008 fd31 	bl	800b928 <iprintf>
		return false;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e03a      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 8002eca:	4828      	ldr	r0, [pc, #160]	; (8002f6c <_Z18TestAS5048APacketsv+0x1e0>)
 8002ecc:	f008 fdb2 	bl	800ba34 <puts>
	received_pack = 0b0101111010101101;
 8002ed0:	f645 63ad 	movw	r3, #24237	; 0x5ead
 8002ed4:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002ed6:	8c3a      	ldrh	r2, [r7, #32]
 8002ed8:	463b      	mov	r3, r7
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe f8d7 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eea:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002eec:	8bfa      	ldrh	r2, [r7, #30]
 8002eee:	8bbb      	ldrh	r3, [r7, #28]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d007      	beq.n	8002f04 <_Z18TestAS5048APacketsv+0x178>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002ef4:	8bbb      	ldrh	r3, [r7, #28]
 8002ef6:	8bfa      	ldrh	r2, [r7, #30]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	481a      	ldr	r0, [pc, #104]	; (8002f64 <_Z18TestAS5048APacketsv+0x1d8>)
 8002efc:	f008 fd14 	bl	800b928 <iprintf>
		return false;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e01d      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 8002f04:	481a      	ldr	r0, [pc, #104]	; (8002f70 <_Z18TestAS5048APacketsv+0x1e4>)
 8002f06:	f008 fd95 	bl	800ba34 <puts>
	received_pack = 0b1101111010101101;
 8002f0a:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8002f0e:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002f10:	8c3a      	ldrh	r2, [r7, #32]
 8002f12:	463b      	mov	r3, r7
 8002f14:	4611      	mov	r1, r2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe f8ba 	bl	8001090 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f24:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002f26:	8bfa      	ldrh	r2, [r7, #30]
 8002f28:	8bbb      	ldrh	r3, [r7, #28]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d007      	beq.n	8002f3e <_Z18TestAS5048APacketsv+0x1b2>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002f2e:	8bbb      	ldrh	r3, [r7, #28]
 8002f30:	8bfa      	ldrh	r2, [r7, #30]
 8002f32:	4619      	mov	r1, r3
 8002f34:	480b      	ldr	r0, [pc, #44]	; (8002f64 <_Z18TestAS5048APacketsv+0x1d8>)
 8002f36:	f008 fcf7 	bl	800b928 <iprintf>
		return false;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <_Z18TestAS5048APacketsv+0x1b4>
	}

	return true;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	0800dedc 	.word	0x0800dedc
 8002f4c:	0800df10 	.word	0x0800df10
 8002f50:	0800df44 	.word	0x0800df44
 8002f54:	0800df94 	.word	0x0800df94
 8002f58:	0800dfc8 	.word	0x0800dfc8
 8002f5c:	0800dff4 	.word	0x0800dff4
 8002f60:	0800e040 	.word	0x0800e040
 8002f64:	0800e078 	.word	0x0800e078
 8002f68:	0800e0bc 	.word	0x0800e0bc
 8002f6c:	0800e0f8 	.word	0x0800e0f8
 8002f70:	0800e130 	.word	0x0800e130

08002f74 <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 8002f7e:	492c      	ldr	r1, [pc, #176]	; (8003030 <_Z14TestEncoderAllv+0xbc>)
 8002f80:	482c      	ldr	r0, [pc, #176]	; (8003034 <_Z14TestEncoderAllv+0xc0>)
 8002f82:	f008 fcd1 	bl	800b928 <iprintf>
	enc_passed &= TestEncoderCreate();
 8002f86:	f7ff fd3d 	bl	8002a04 <_Z17TestEncoderCreatev>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 8002f9c:	f7ff fd66 	bl	8002a6c <_Z15TestEncoderZerov>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	79fb      	ldrb	r3, [r7, #7]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	bf14      	ite	ne
 8002fac:	2301      	movne	r3, #1
 8002fae:	2300      	moveq	r3, #0
 8002fb0:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 8002fb2:	f7ff fddf 	bl	8002b74 <_Z16TestEncoderAnglev>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 8002fce:	481a      	ldr	r0, [pc, #104]	; (8003038 <_Z14TestEncoderAllv+0xc4>)
 8002fd0:	f008 fd30 	bl	800ba34 <puts>
 8002fd4:	e002      	b.n	8002fdc <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 8002fd6:	4819      	ldr	r0, [pc, #100]	; (800303c <_Z14TestEncoderAllv+0xc8>)
 8002fd8:	f008 fd2c 	bl	800ba34 <puts>
	}

	L_PRINT("Test AS5048A Class");
 8002fdc:	4918      	ldr	r1, [pc, #96]	; (8003040 <_Z14TestEncoderAllv+0xcc>)
 8002fde:	4815      	ldr	r0, [pc, #84]	; (8003034 <_Z14TestEncoderAllv+0xc0>)
 8002fe0:	f008 fca2 	bl	800b928 <iprintf>
	bool as5048a_passed = true;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 8002fe8:	f7ff fe48 	bl	8002c7c <_Z17TestAS5048AParityv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 8002ffe:	f7ff fec5 	bl	8002d8c <_Z18TestAS5048APacketsv>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	79bb      	ldrb	r3, [r7, #6]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8003014:	79bb      	ldrb	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <_Z14TestEncoderAllv+0xd0>)
 800301c:	f008 fd0a 	bl	800ba34 <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 8003020:	e002      	b.n	8003028 <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 8003022:	4809      	ldr	r0, [pc, #36]	; (8003048 <_Z14TestEncoderAllv+0xd4>)
 8003024:	f008 fd06 	bl	800ba34 <puts>
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800e174 	.word	0x0800e174
 8003034:	0800e188 	.word	0x0800e188
 8003038:	0800e19c 	.word	0x0800e19c
 800303c:	0800e1c4 	.word	0x0800e1c4
 8003040:	0800e1ec 	.word	0x0800e1ec
 8003044:	0800e200 	.word	0x0800e200
 8003048:	0800e228 	.word	0x0800e228
 800304c:	00000000 	.word	0x00000000

08003050 <_Z10MatchThreeffffff>:
#include "test_foc_utils.hh"
#include "foc_utils.hh"

#define ERROR_MARGIN 0.1

bool MatchThree(float a, float b, float c, float expect_a, float expect_b, float expect_c) {
 8003050:	b5b0      	push	{r4, r5, r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	ed87 0a05 	vstr	s0, [r7, #20]
 800305a:	edc7 0a04 	vstr	s1, [r7, #16]
 800305e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003062:	edc7 1a02 	vstr	s3, [r7, #8]
 8003066:	ed87 2a01 	vstr	s4, [r7, #4]
 800306a:	edc7 2a00 	vstr	s5, [r7]
	bool all_match = true;
 800306e:	2301      	movs	r3, #1
 8003070:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(a, expect_a, ERROR_MARGIN);
 8003072:	7ffc      	ldrb	r4, [r7, #31]
 8003074:	ed97 7a05 	vldr	s14, [r7, #20]
 8003078:	edd7 7a02 	vldr	s15, [r7, #8]
 800307c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003084:	dd17      	ble.n	80030b6 <_Z10MatchThreeffffff+0x66>
 8003086:	ed97 7a05 	vldr	s14, [r7, #20]
 800308a:	edd7 7a02 	vldr	s15, [r7, #8]
 800308e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003092:	ee17 0a90 	vmov	r0, s15
 8003096:	f7fd fa7f 	bl	8000598 <__aeabi_f2d>
 800309a:	2301      	movs	r3, #1
 800309c:	461d      	mov	r5, r3
 800309e:	a356      	add	r3, pc, #344	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fd42 	bl	8000b2c <__aeabi_dcmplt>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <_Z10MatchThreeffffff+0x62>
 80030ae:	2300      	movs	r3, #0
 80030b0:	461d      	mov	r5, r3
 80030b2:	b2eb      	uxtb	r3, r5
 80030b4:	e016      	b.n	80030e4 <_Z10MatchThreeffffff+0x94>
 80030b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c2:	ee17 0a90 	vmov	r0, s15
 80030c6:	f7fd fa67 	bl	8000598 <__aeabi_f2d>
 80030ca:	2301      	movs	r3, #1
 80030cc:	461d      	mov	r5, r3
 80030ce:	a34a      	add	r3, pc, #296	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f7fd fd2a 	bl	8000b2c <__aeabi_dcmplt>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <_Z10MatchThreeffffff+0x92>
 80030de:	2300      	movs	r3, #0
 80030e0:	461d      	mov	r5, r3
 80030e2:	b2eb      	uxtb	r3, r5
 80030e4:	4023      	ands	r3, r4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bf14      	ite	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	2300      	moveq	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(b, expect_b, ERROR_MARGIN);
 80030f0:	7ffc      	ldrb	r4, [r7, #31]
 80030f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	dd17      	ble.n	8003134 <_Z10MatchThreeffffff+0xe4>
 8003104:	ed97 7a04 	vldr	s14, [r7, #16]
 8003108:	edd7 7a01 	vldr	s15, [r7, #4]
 800310c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003110:	ee17 0a90 	vmov	r0, s15
 8003114:	f7fd fa40 	bl	8000598 <__aeabi_f2d>
 8003118:	2301      	movs	r3, #1
 800311a:	461d      	mov	r5, r3
 800311c:	a336      	add	r3, pc, #216	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 800311e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003122:	f7fd fd03 	bl	8000b2c <__aeabi_dcmplt>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <_Z10MatchThreeffffff+0xe0>
 800312c:	2300      	movs	r3, #0
 800312e:	461d      	mov	r5, r3
 8003130:	b2eb      	uxtb	r3, r5
 8003132:	e016      	b.n	8003162 <_Z10MatchThreeffffff+0x112>
 8003134:	ed97 7a01 	vldr	s14, [r7, #4]
 8003138:	edd7 7a04 	vldr	s15, [r7, #16]
 800313c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003140:	ee17 0a90 	vmov	r0, s15
 8003144:	f7fd fa28 	bl	8000598 <__aeabi_f2d>
 8003148:	2301      	movs	r3, #1
 800314a:	461d      	mov	r5, r3
 800314c:	a32a      	add	r3, pc, #168	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f7fd fceb 	bl	8000b2c <__aeabi_dcmplt>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <_Z10MatchThreeffffff+0x110>
 800315c:	2300      	movs	r3, #0
 800315e:	461d      	mov	r5, r3
 8003160:	b2eb      	uxtb	r3, r5
 8003162:	4023      	ands	r3, r4
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(c, expect_c, ERROR_MARGIN);
 800316e:	7ffc      	ldrb	r4, [r7, #31]
 8003170:	ed97 7a03 	vldr	s14, [r7, #12]
 8003174:	edd7 7a00 	vldr	s15, [r7]
 8003178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003180:	dd17      	ble.n	80031b2 <_Z10MatchThreeffffff+0x162>
 8003182:	ed97 7a03 	vldr	s14, [r7, #12]
 8003186:	edd7 7a00 	vldr	s15, [r7]
 800318a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318e:	ee17 0a90 	vmov	r0, s15
 8003192:	f7fd fa01 	bl	8000598 <__aeabi_f2d>
 8003196:	2301      	movs	r3, #1
 8003198:	461d      	mov	r5, r3
 800319a:	a317      	add	r3, pc, #92	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fd fcc4 	bl	8000b2c <__aeabi_dcmplt>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <_Z10MatchThreeffffff+0x15e>
 80031aa:	2300      	movs	r3, #0
 80031ac:	461d      	mov	r5, r3
 80031ae:	b2eb      	uxtb	r3, r5
 80031b0:	e016      	b.n	80031e0 <_Z10MatchThreeffffff+0x190>
 80031b2:	ed97 7a00 	vldr	s14, [r7]
 80031b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031be:	ee17 0a90 	vmov	r0, s15
 80031c2:	f7fd f9e9 	bl	8000598 <__aeabi_f2d>
 80031c6:	2301      	movs	r3, #1
 80031c8:	461d      	mov	r5, r3
 80031ca:	a30b      	add	r3, pc, #44	; (adr r3, 80031f8 <_Z10MatchThreeffffff+0x1a8>)
 80031cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d0:	f7fd fcac 	bl	8000b2c <__aeabi_dcmplt>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <_Z10MatchThreeffffff+0x18e>
 80031da:	2300      	movs	r3, #0
 80031dc:	461d      	mov	r5, r3
 80031de:	b2eb      	uxtb	r3, r5
 80031e0:	4023      	ands	r3, r4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	77fb      	strb	r3, [r7, #31]

	return all_match;
 80031ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3720      	adds	r7, #32
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bdb0      	pop	{r4, r5, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	9999999a 	.word	0x9999999a
 80031fc:	3fb99999 	.word	0x3fb99999

08003200 <_Z16TestTransFwddDQZv>:

bool TestTransFwddDQZ() {
 8003200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003204:	b098      	sub	sp, #96	; 0x60
 8003206:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward DQZ\r\n");
 8003208:	4841      	ldr	r0, [pc, #260]	; (8003310 <_Z16TestTransFwddDQZv+0x110>)
 800320a:	f008 fc13 	bl	800ba34 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 800320e:	4841      	ldr	r0, [pc, #260]	; (8003314 <_Z16TestTransFwddDQZv+0x114>)
 8003210:	f008 fc10 	bl	800ba34 <puts>

	float theta = 123.0f;
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <_Z16TestTransFwddDQZv+0x118>)
 8003216:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
	float i_q = 0.0f;
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
	float i_z = 0.0f;
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	613b      	str	r3, [r7, #16]

	float i_u = 1.0f;
 800322a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
	float i_v = 2.0f;
 8003230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_w = 3.0f;
 8003236:	4b39      	ldr	r3, [pc, #228]	; (800331c <_Z16TestTransFwddDQZv+0x11c>)
 8003238:	62bb      	str	r3, [r7, #40]	; 0x28


	float expect_i_d =  0.074014f;
 800323a:	4b39      	ldr	r3, [pc, #228]	; (8003320 <_Z16TestTransFwddDQZv+0x120>)
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_q =  1.412275f;
 800323e:	4b39      	ldr	r3, [pc, #228]	; (8003324 <_Z16TestTransFwddDQZv+0x124>)
 8003240:	623b      	str	r3, [r7, #32]
	float expect_i_z =  3.464102f;
 8003242:	4b39      	ldr	r3, [pc, #228]	; (8003328 <_Z16TestTransFwddDQZv+0x128>)
 8003244:	61fb      	str	r3, [r7, #28]

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 8003246:	f107 0210 	add.w	r2, r7, #16
 800324a:	f107 0114 	add.w	r1, r7, #20
 800324e:	f107 0318 	add.w	r3, r7, #24
 8003252:	4618      	mov	r0, r3
 8003254:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003258:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 800325c:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003260:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003264:	f7fe fe74 	bl	8001f50 <_Z11TransFwdDQZffffRfS_S_>

	if (!MatchThree(i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z)) {
 8003268:	edd7 7a06 	vldr	s15, [r7, #24]
 800326c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003270:	edd7 6a04 	vldr	s13, [r7, #16]
 8003274:	edd7 2a07 	vldr	s5, [r7, #28]
 8003278:	ed97 2a08 	vldr	s4, [r7, #32]
 800327c:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 8003280:	eeb0 1a66 	vmov.f32	s2, s13
 8003284:	eef0 0a47 	vmov.f32	s1, s14
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7ff fee0 	bl	8003050 <_Z10MatchThreeffffff>
 8003290:	4603      	mov	r3, r0
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d033      	beq.n	8003304 <_Z16TestTransFwddDQZv+0x104>
		TT_FAIL_PRINT("DQZ currents do not match.\r\n\t\tReceived: i_d = %f i_q = %f i_z = %f\r\n\t\tExpected: i_d = %f i_q = %f i_z = %f\r\n",
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f97a 	bl	8000598 <__aeabi_f2d>
 80032a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f974 	bl	8000598 <__aeabi_f2d>
 80032b0:	4604      	mov	r4, r0
 80032b2:	460d      	mov	r5, r1
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f96e 	bl	8000598 <__aeabi_f2d>
 80032bc:	4680      	mov	r8, r0
 80032be:	4689      	mov	r9, r1
 80032c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032c2:	f7fd f969 	bl	8000598 <__aeabi_f2d>
 80032c6:	4682      	mov	sl, r0
 80032c8:	468b      	mov	fp, r1
 80032ca:	6a38      	ldr	r0, [r7, #32]
 80032cc:	f7fd f964 	bl	8000598 <__aeabi_f2d>
 80032d0:	e9c7 0100 	strd	r0, r1, [r7]
 80032d4:	69f8      	ldr	r0, [r7, #28]
 80032d6:	f7fd f95f 	bl	8000598 <__aeabi_f2d>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80032e2:	ed97 7b00 	vldr	d7, [r7]
 80032e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80032ea:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80032ee:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80032f2:	e9cd 4500 	strd	r4, r5, [sp]
 80032f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032fa:	480c      	ldr	r0, [pc, #48]	; (800332c <_Z16TestTransFwddDQZv+0x12c>)
 80032fc:	f008 fb14 	bl	800b928 <iprintf>
				i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z);
		return false;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <_Z16TestTransFwddDQZv+0x106>
	}

	return true;
 8003304:	2301      	movs	r3, #1
}
 8003306:	4618      	mov	r0, r3
 8003308:	3738      	adds	r7, #56	; 0x38
 800330a:	46bd      	mov	sp, r7
 800330c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003310:	0800e250 	.word	0x0800e250
 8003314:	0800e26c 	.word	0x0800e26c
 8003318:	42f60000 	.word	0x42f60000
 800331c:	40400000 	.word	0x40400000
 8003320:	3d9794a7 	.word	0x3d9794a7
 8003324:	3fb4c56d 	.word	0x3fb4c56d
 8003328:	405db3d9 	.word	0x405db3d9
 800332c:	0800e298 	.word	0x0800e298

08003330 <_Z15TestTransRevDQZv>:

bool TestTransRevDQZ() {
 8003330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003334:	b098      	sub	sp, #96	; 0x60
 8003336:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Reverse DQZ\r\n");
 8003338:	4841      	ldr	r0, [pc, #260]	; (8003440 <_Z15TestTransRevDQZv+0x110>)
 800333a:	f008 fb7b 	bl	800ba34 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 800333e:	4841      	ldr	r0, [pc, #260]	; (8003444 <_Z15TestTransRevDQZv+0x114>)
 8003340:	f008 fb78 	bl	800ba34 <puts>

	float theta = 123.0f;
 8003344:	4b40      	ldr	r3, [pc, #256]	; (8003448 <_Z15TestTransRevDQZv+0x118>)
 8003346:	637b      	str	r3, [r7, #52]	; 0x34

	float i_u = 0.0f;
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
	float i_v = 0.0f;
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	617b      	str	r3, [r7, #20]
	float i_w = 0.0f;
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	613b      	str	r3, [r7, #16]

	float i_d = 1.0f;
 800335a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
	float i_q = 2.0f;
 8003360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_z = 3.0f;
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <_Z15TestTransRevDQZv+0x11c>)
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28

	float expect_i_u =  -0.082188;
 800336a:	4b39      	ldr	r3, [pc, #228]	; (8003450 <_Z15TestTransRevDQZv+0x120>)
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_v =  2.461964;
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <_Z15TestTransRevDQZv+0x124>)
 8003370:	623b      	str	r3, [r7, #32]
	float expect_i_w =  2.816377;
 8003372:	4b39      	ldr	r3, [pc, #228]	; (8003458 <_Z15TestTransRevDQZv+0x128>)
 8003374:	61fb      	str	r3, [r7, #28]

	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 8003376:	f107 0210 	add.w	r2, r7, #16
 800337a:	f107 0114 	add.w	r1, r7, #20
 800337e:	f107 0318 	add.w	r3, r7, #24
 8003382:	4618      	mov	r0, r3
 8003384:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003388:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 800338c:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003390:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003394:	f7fe fe82 	bl	800209c <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 8003398:	edd7 7a06 	vldr	s15, [r7, #24]
 800339c:	ed97 7a05 	vldr	s14, [r7, #20]
 80033a0:	edd7 6a04 	vldr	s13, [r7, #16]
 80033a4:	edd7 2a07 	vldr	s5, [r7, #28]
 80033a8:	ed97 2a08 	vldr	s4, [r7, #32]
 80033ac:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80033b0:	eeb0 1a66 	vmov.f32	s2, s13
 80033b4:	eef0 0a47 	vmov.f32	s1, s14
 80033b8:	eeb0 0a67 	vmov.f32	s0, s15
 80033bc:	f7ff fe48 	bl	8003050 <_Z10MatchThreeffffff>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f083 0301 	eor.w	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d033      	beq.n	8003434 <_Z15TestTransRevDQZv+0x104>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd f8e2 	bl	8000598 <__aeabi_f2d>
 80033d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8dc 	bl	8000598 <__aeabi_f2d>
 80033e0:	4604      	mov	r4, r0
 80033e2:	460d      	mov	r5, r1
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f8d6 	bl	8000598 <__aeabi_f2d>
 80033ec:	4680      	mov	r8, r0
 80033ee:	4689      	mov	r9, r1
 80033f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f2:	f7fd f8d1 	bl	8000598 <__aeabi_f2d>
 80033f6:	4682      	mov	sl, r0
 80033f8:	468b      	mov	fp, r1
 80033fa:	6a38      	ldr	r0, [r7, #32]
 80033fc:	f7fd f8cc 	bl	8000598 <__aeabi_f2d>
 8003400:	e9c7 0100 	strd	r0, r1, [r7]
 8003404:	69f8      	ldr	r0, [r7, #28]
 8003406:	f7fd f8c7 	bl	8000598 <__aeabi_f2d>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003412:	ed97 7b00 	vldr	d7, [r7]
 8003416:	ed8d 7b06 	vstr	d7, [sp, #24]
 800341a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800341e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003422:	e9cd 4500 	strd	r4, r5, [sp]
 8003426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342a:	480c      	ldr	r0, [pc, #48]	; (800345c <_Z15TestTransRevDQZv+0x12c>)
 800342c:	f008 fa7c 	bl	800b928 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 8003430:	2300      	movs	r3, #0
 8003432:	e000      	b.n	8003436 <_Z15TestTransRevDQZv+0x106>
	}

	return true;
 8003434:	2301      	movs	r3, #1
}
 8003436:	4618      	mov	r0, r3
 8003438:	3738      	adds	r7, #56	; 0x38
 800343a:	46bd      	mov	sp, r7
 800343c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003440:	0800e320 	.word	0x0800e320
 8003444:	0800e26c 	.word	0x0800e26c
 8003448:	42f60000 	.word	0x42f60000
 800344c:	40400000 	.word	0x40400000
 8003450:	bda8522f 	.word	0xbda8522f
 8003454:	401d90d1 	.word	0x401d90d1
 8003458:	40343f85 	.word	0x40343f85
 800345c:	0800e33c 	.word	0x0800e33c

08003460 <_Z18TestTransFwdRevDQZv>:

bool TestTransFwdRevDQZ() {
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b098      	sub	sp, #96	; 0x60
 8003466:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward then Reverse DQZ\r\n");
 8003468:	484f      	ldr	r0, [pc, #316]	; (80035a8 <_Z18TestTransFwdRevDQZv+0x148>)
 800346a:	f008 fae3 	bl	800ba34 <puts>

	T_TEST_PRINT("Random values.\r\n");
 800346e:	484f      	ldr	r0, [pc, #316]	; (80035ac <_Z18TestTransFwdRevDQZv+0x14c>)
 8003470:	f008 fae0 	bl	800ba34 <puts>

	float theta = 123.0f;
 8003474:	4b4e      	ldr	r3, [pc, #312]	; (80035b0 <_Z18TestTransFwdRevDQZv+0x150>)
 8003476:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
	float i_q = 0.0f;
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
	float i_z = 0.0f;
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]

	float i_u = 5.878f;
 800348a:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <_Z18TestTransFwdRevDQZv+0x154>)
 800348c:	61bb      	str	r3, [r7, #24]
	float i_v = -1234.5f;
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <_Z18TestTransFwdRevDQZv+0x158>)
 8003490:	617b      	str	r3, [r7, #20]
	float i_w = 68.547f;
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <_Z18TestTransFwdRevDQZv+0x15c>)
 8003494:	613b      	str	r3, [r7, #16]

	float expect_i_u =  i_u;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	633b      	str	r3, [r7, #48]	; 0x30
	float expect_i_v =  i_v;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float expect_i_w =  i_w;
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	62bb      	str	r3, [r7, #40]	; 0x28

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 80034a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80034a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80034aa:	edd7 6a04 	vldr	s13, [r7, #16]
 80034ae:	f107 021c 	add.w	r2, r7, #28
 80034b2:	f107 0120 	add.w	r1, r7, #32
 80034b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ba:	4618      	mov	r0, r3
 80034bc:	eef0 1a66 	vmov.f32	s3, s13
 80034c0:	eeb0 1a47 	vmov.f32	s2, s14
 80034c4:	eef0 0a67 	vmov.f32	s1, s15
 80034c8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80034cc:	f7fe fd40 	bl	8001f50 <_Z11TransFwdDQZffffRfS_S_>
	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 80034d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80034d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80034d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034dc:	f107 0210 	add.w	r2, r7, #16
 80034e0:	f107 0114 	add.w	r1, r7, #20
 80034e4:	f107 0318 	add.w	r3, r7, #24
 80034e8:	4618      	mov	r0, r3
 80034ea:	eef0 1a66 	vmov.f32	s3, s13
 80034ee:	eeb0 1a47 	vmov.f32	s2, s14
 80034f2:	eef0 0a67 	vmov.f32	s1, s15
 80034f6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80034fa:	f7fe fdcf 	bl	800209c <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 80034fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8003502:	ed97 7a05 	vldr	s14, [r7, #20]
 8003506:	edd7 6a04 	vldr	s13, [r7, #16]
 800350a:	edd7 2a0a 	vldr	s5, [r7, #40]	; 0x28
 800350e:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 8003512:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 8003516:	eeb0 1a66 	vmov.f32	s2, s13
 800351a:	eef0 0a47 	vmov.f32	s1, s14
 800351e:	eeb0 0a67 	vmov.f32	s0, s15
 8003522:	f7ff fd95 	bl	8003050 <_Z10MatchThreeffffff>
 8003526:	4603      	mov	r3, r0
 8003528:	f083 0301 	eor.w	r3, r3, #1
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d033      	beq.n	800359a <_Z18TestTransFwdRevDQZv+0x13a>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f82f 	bl	8000598 <__aeabi_f2d>
 800353a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f829 	bl	8000598 <__aeabi_f2d>
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fd f823 	bl	8000598 <__aeabi_f2d>
 8003552:	4680      	mov	r8, r0
 8003554:	4689      	mov	r9, r1
 8003556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003558:	f7fd f81e 	bl	8000598 <__aeabi_f2d>
 800355c:	4682      	mov	sl, r0
 800355e:	468b      	mov	fp, r1
 8003560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003562:	f7fd f819 	bl	8000598 <__aeabi_f2d>
 8003566:	e9c7 0100 	strd	r0, r1, [r7]
 800356a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800356c:	f7fd f814 	bl	8000598 <__aeabi_f2d>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003578:	ed97 7b00 	vldr	d7, [r7]
 800357c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003580:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003584:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003588:	e9cd 4500 	strd	r4, r5, [sp]
 800358c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003590:	480b      	ldr	r0, [pc, #44]	; (80035c0 <_Z18TestTransFwdRevDQZv+0x160>)
 8003592:	f008 f9c9 	bl	800b928 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <_Z18TestTransFwdRevDQZv+0x13c>
	}

	return true;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	3738      	adds	r7, #56	; 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a6:	bf00      	nop
 80035a8:	0800e3c4 	.word	0x0800e3c4
 80035ac:	0800e3f0 	.word	0x0800e3f0
 80035b0:	42f60000 	.word	0x42f60000
 80035b4:	40bc1893 	.word	0x40bc1893
 80035b8:	c49a5000 	.word	0xc49a5000
 80035bc:	42891810 	.word	0x42891810
 80035c0:	0800e33c 	.word	0x0800e33c

080035c4 <_Z15TestFOCUtilsAllv>:

void TestFOCUtilsAll() {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
	L_PRINT("FOC Utils");
 80035ca:	491a      	ldr	r1, [pc, #104]	; (8003634 <_Z15TestFOCUtilsAllv+0x70>)
 80035cc:	481a      	ldr	r0, [pc, #104]	; (8003638 <_Z15TestFOCUtilsAllv+0x74>)
 80035ce:	f008 f9ab 	bl	800b928 <iprintf>
	bool utils_ok = true;
 80035d2:	2301      	movs	r3, #1
 80035d4:	71fb      	strb	r3, [r7, #7]

	utils_ok &= TestTransFwddDQZ();
 80035d6:	f7ff fe13 	bl	8003200 <_Z16TestTransFwddDQZv>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransRevDQZ();
 80035ec:	f7ff fea0 	bl	8003330 <_Z15TestTransRevDQZv>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransFwdRevDQZ();
 8003602:	f7ff ff2d 	bl	8003460 <_Z18TestTransFwdRevDQZv>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf14      	ite	ne
 8003612:	2301      	movne	r3, #1
 8003614:	2300      	moveq	r3, #0
 8003616:	71fb      	strb	r3, [r7, #7]

	if (utils_ok) {
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <_Z15TestFOCUtilsAllv+0x62>
		PASS_PRINT("FOC Utils\r\n");
 800361e:	4807      	ldr	r0, [pc, #28]	; (800363c <_Z15TestFOCUtilsAllv+0x78>)
 8003620:	f008 fa08 	bl	800ba34 <puts>
	} else {
		FAIL_PRINT("FOC Utils\r\n");
	}
}
 8003624:	e002      	b.n	800362c <_Z15TestFOCUtilsAllv+0x68>
		FAIL_PRINT("FOC Utils\r\n");
 8003626:	4806      	ldr	r0, [pc, #24]	; (8003640 <_Z15TestFOCUtilsAllv+0x7c>)
 8003628:	f008 fa04 	bl	800ba34 <puts>
}
 800362c:	bf00      	nop
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	0800e414 	.word	0x0800e414
 8003638:	0800e420 	.word	0x0800e420
 800363c:	0800e434 	.word	0x0800e434
 8003640:	0800e458 	.word	0x0800e458

08003644 <_Z21TestMotorDriverCreatev>:

#include "test_framework.hh"
#include "test_motor_driver.hh"
#include "motor_driver.hh"

bool TestMotorDriverCreate() {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08e      	sub	sp, #56	; 0x38
 8003648:	af00      	add	r7, sp, #0
	float duty_cycle_max = 0.95;
 800364a:	4b0b      	ldr	r3, [pc, #44]	; (8003678 <_Z21TestMotorDriverCreatev+0x34>)
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
	float duty_cycle_min = 0.05;
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <_Z21TestMotorDriverCreatev+0x38>)
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t pulse_max_in = 0xFFFF;
 8003652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003656:	85fb      	strh	r3, [r7, #46]	; 0x2e

	MotorDriver md(duty_cycle_max, duty_cycle_min, pulse_max_in);
 8003658:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	4611      	mov	r1, r2
 800365e:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003662:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe fe2c 	bl	80022c4 <_ZN11MotorDriverC1Efft>
	return true;
 800366c:	2301      	movs	r3, #1
}
 800366e:	4618      	mov	r0, r3
 8003670:	3738      	adds	r7, #56	; 0x38
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	3f733333 	.word	0x3f733333
 800367c:	3d4ccccd 	.word	0x3d4ccccd

08003680 <_Z18TestMotorDriverAllv>:

void TestMotorDriverAll() {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
	L_PRINT("MotorDriver Class");
 8003686:	490f      	ldr	r1, [pc, #60]	; (80036c4 <_Z18TestMotorDriverAllv+0x44>)
 8003688:	480f      	ldr	r0, [pc, #60]	; (80036c8 <_Z18TestMotorDriverAllv+0x48>)
 800368a:	f008 f94d 	bl	800b928 <iprintf>
	bool md_ok = true;
 800368e:	2301      	movs	r3, #1
 8003690:	71fb      	strb	r3, [r7, #7]
	md_ok &= TestMotorDriverCreate();
 8003692:	f7ff ffd7 	bl	8003644 <_Z21TestMotorDriverCreatev>
 8003696:	4603      	mov	r3, r0
 8003698:	461a      	mov	r2, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	bf14      	ite	ne
 80036a2:	2301      	movne	r3, #1
 80036a4:	2300      	moveq	r3, #0
 80036a6:	71fb      	strb	r3, [r7, #7]
	if (md_ok) {
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <_Z18TestMotorDriverAllv+0x36>
		PASS_PRINT("MotorDriver Class\r\n");
 80036ae:	4807      	ldr	r0, [pc, #28]	; (80036cc <_Z18TestMotorDriverAllv+0x4c>)
 80036b0:	f008 f9c0 	bl	800ba34 <puts>
	} else {
		FAIL_PRINT("MotorDriver Class\r\n");
	}

}
 80036b4:	e002      	b.n	80036bc <_Z18TestMotorDriverAllv+0x3c>
		FAIL_PRINT("MotorDriver Class\r\n");
 80036b6:	4806      	ldr	r0, [pc, #24]	; (80036d0 <_Z18TestMotorDriverAllv+0x50>)
 80036b8:	f008 f9bc 	bl	800ba34 <puts>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	0800e47c 	.word	0x0800e47c
 80036c8:	0800e490 	.word	0x0800e490
 80036cc:	0800e4a4 	.word	0x0800e4a4
 80036d0:	0800e4d0 	.word	0x0800e4d0

080036d4 <_Z23TestPIDControllerCreatev>:
#include "pid_controller.hh"
#include "foc_utils.hh"

const float kErrorMargin = 0.01;

bool TestPIDControllerCreate() {
 80036d4:	b5b0      	push	{r4, r5, r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 80036da:	485a      	ldr	r0, [pc, #360]	; (8003844 <_Z23TestPIDControllerCreatev+0x170>)
 80036dc:	f008 f9aa 	bl	800ba34 <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 80036e0:	4859      	ldr	r0, [pc, #356]	; (8003848 <_Z23TestPIDControllerCreatev+0x174>)
 80036e2:	f008 f9a7 	bl	800ba34 <puts>
	float k_p = 1.2;
 80036e6:	4b59      	ldr	r3, [pc, #356]	; (800384c <_Z23TestPIDControllerCreatev+0x178>)
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
	float k_i = 3.4;
 80036ea:	4b59      	ldr	r3, [pc, #356]	; (8003850 <_Z23TestPIDControllerCreatev+0x17c>)
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
	float k_d = 5.6;
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <_Z23TestPIDControllerCreatev+0x180>)
 80036f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ramp = 5.1;
 80036f2:	4b59      	ldr	r3, [pc, #356]	; (8003858 <_Z23TestPIDControllerCreatev+0x184>)
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
	float limit = 2.2;
 80036f6:	4b59      	ldr	r3, [pc, #356]	; (800385c <_Z23TestPIDControllerCreatev+0x188>)
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController pid(k_p, k_i, k_d, ramp, limit);
 80036fa:	1d3b      	adds	r3, r7, #4
 80036fc:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 8003700:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003704:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003708:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 800370c:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe fa51 	bl	8001bb8 <_ZN13PIDControllerC1Efffff>

	if (pid.k_p != k_p) {
 8003716:	edd7 7a01 	vldr	s15, [r7, #4]
 800371a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800371e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d013      	beq.n	8003750 <_Z23TestPIDControllerCreatev+0x7c>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8003728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800372a:	f7fc ff35 	bl	8000598 <__aeabi_f2d>
 800372e:	4604      	mov	r4, r0
 8003730:	460d      	mov	r5, r1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc ff2f 	bl	8000598 <__aeabi_f2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9cd 2300 	strd	r2, r3, [sp]
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	4846      	ldr	r0, [pc, #280]	; (8003860 <_Z23TestPIDControllerCreatev+0x18c>)
 8003748:	f008 f8ee 	bl	800b928 <iprintf>
		return false;
 800374c:	2300      	movs	r3, #0
 800374e:	e074      	b.n	800383a <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_i != k_i) {
 8003750:	edd7 7a02 	vldr	s15, [r7, #8]
 8003754:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003758:	eeb4 7a67 	vcmp.f32	s14, s15
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	d013      	beq.n	800378a <_Z23TestPIDControllerCreatev+0xb6>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 8003762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003764:	f7fc ff18 	bl	8000598 <__aeabi_f2d>
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fc ff12 	bl	8000598 <__aeabi_f2d>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	e9cd 2300 	strd	r2, r3, [sp]
 800377c:	4622      	mov	r2, r4
 800377e:	462b      	mov	r3, r5
 8003780:	4838      	ldr	r0, [pc, #224]	; (8003864 <_Z23TestPIDControllerCreatev+0x190>)
 8003782:	f008 f8d1 	bl	800b928 <iprintf>
		return false;
 8003786:	2300      	movs	r3, #0
 8003788:	e057      	b.n	800383a <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_d != k_d) {
 800378a:	edd7 7a03 	vldr	s15, [r7, #12]
 800378e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003792:	eeb4 7a67 	vcmp.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d013      	beq.n	80037c4 <_Z23TestPIDControllerCreatev+0xf0>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 800379c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800379e:	f7fc fefb 	bl	8000598 <__aeabi_f2d>
 80037a2:	4604      	mov	r4, r0
 80037a4:	460d      	mov	r5, r1
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fc fef5 	bl	8000598 <__aeabi_f2d>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	e9cd 2300 	strd	r2, r3, [sp]
 80037b6:	4622      	mov	r2, r4
 80037b8:	462b      	mov	r3, r5
 80037ba:	482b      	ldr	r0, [pc, #172]	; (8003868 <_Z23TestPIDControllerCreatev+0x194>)
 80037bc:	f008 f8b4 	bl	800b928 <iprintf>
		return false;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e03a      	b.n	800383a <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.ramp != ramp) {
 80037c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80037c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80037cc:	eeb4 7a67 	vcmp.f32	s14, s15
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d013      	beq.n	80037fe <_Z23TestPIDControllerCreatev+0x12a>
		T_FAIL_PRINT("Incorrect ramp, constructed with %f but got %f.\r\n", ramp, pid.ramp);
 80037d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037d8:	f7fc fede 	bl	8000598 <__aeabi_f2d>
 80037dc:	4604      	mov	r4, r0
 80037de:	460d      	mov	r5, r1
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fed8 	bl	8000598 <__aeabi_f2d>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	e9cd 2300 	strd	r2, r3, [sp]
 80037f0:	4622      	mov	r2, r4
 80037f2:	462b      	mov	r3, r5
 80037f4:	481d      	ldr	r0, [pc, #116]	; (800386c <_Z23TestPIDControllerCreatev+0x198>)
 80037f6:	f008 f897 	bl	800b928 <iprintf>
		return false;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e01d      	b.n	800383a <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.limit != limit) {
 80037fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003802:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003806:	eeb4 7a67 	vcmp.f32	s14, s15
 800380a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380e:	d013      	beq.n	8003838 <_Z23TestPIDControllerCreatev+0x164>
		T_FAIL_PRINT("Incorrect limit, constructed with %f but got %f.\r\n", limit, pid.limit);
 8003810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003812:	f7fc fec1 	bl	8000598 <__aeabi_f2d>
 8003816:	4604      	mov	r4, r0
 8003818:	460d      	mov	r5, r1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fc febb 	bl	8000598 <__aeabi_f2d>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	e9cd 2300 	strd	r2, r3, [sp]
 800382a:	4622      	mov	r2, r4
 800382c:	462b      	mov	r3, r5
 800382e:	4810      	ldr	r0, [pc, #64]	; (8003870 <_Z23TestPIDControllerCreatev+0x19c>)
 8003830:	f008 f87a 	bl	800b928 <iprintf>
		return false;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <_Z23TestPIDControllerCreatev+0x166>
}

	return true;
 8003838:	2301      	movs	r3, #1
}
 800383a:	4618      	mov	r0, r3
 800383c:	3738      	adds	r7, #56	; 0x38
 800383e:	46bd      	mov	sp, r7
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
 8003842:	bf00      	nop
 8003844:	0800e4fc 	.word	0x0800e4fc
 8003848:	0800e524 	.word	0x0800e524
 800384c:	3f99999a 	.word	0x3f99999a
 8003850:	4059999a 	.word	0x4059999a
 8003854:	40b33333 	.word	0x40b33333
 8003858:	40a33333 	.word	0x40a33333
 800385c:	400ccccd 	.word	0x400ccccd
 8003860:	0800e554 	.word	0x0800e554
 8003864:	0800e5a0 	.word	0x0800e5a0
 8003868:	0800e5ec 	.word	0x0800e5ec
 800386c:	0800e638 	.word	0x0800e638
 8003870:	0800e684 	.word	0x0800e684

08003874 <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b092      	sub	sp, #72	; 0x48
 8003878:	af02      	add	r7, sp, #8
	float state = 0;
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float target = 0;
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
	float output = 0;
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	637b      	str	r3, [r7, #52]	; 0x34

	float ramp = 0;
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
	float limit = 0;
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c

	TEST_PRINT("Test PID Controller Response.\r\n");
 8003898:	48b7      	ldr	r0, [pc, #732]	; (8003b78 <_Z25TestPIDControllerResponsev+0x304>)
 800389a:	f008 f8cb 	bl	800ba34 <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 800389e:	48b7      	ldr	r0, [pc, #732]	; (8003b7c <_Z25TestPIDControllerResponsev+0x308>)
 80038a0:	f008 f8c8 	bl	800ba34 <puts>
	PIDController pid = PIDController(0, 0, 0, ramp, limit);
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 80038aa:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 80038ae:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8003b80 <_Z25TestPIDControllerResponsev+0x30c>
 80038b2:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8003b80 <_Z25TestPIDControllerResponsev+0x30c>
 80038b6:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8003b80 <_Z25TestPIDControllerResponsev+0x30c>
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fe f97c 	bl	8001bb8 <_ZN13PIDControllerC1Efffff>
	output = pid.Update(0.0f, 10.0f);
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80038c6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8003b80 <_Z25TestPIDControllerResponsev+0x30c>
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe f9ba 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 80038d0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	if (output != 0) {
 80038d4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80038d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e0:	d00f      	beq.n	8003902 <_Z25TestPIDControllerResponsev+0x8e>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, output);
 80038e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80038e4:	f7fc fe58 	bl	8000598 <__aeabi_f2d>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	e9cd 2300 	strd	r2, r3, [sp]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	48a2      	ldr	r0, [pc, #648]	; (8003b84 <_Z25TestPIDControllerResponsev+0x310>)
 80038fa:	f008 f815 	bl	800b928 <iprintf>
		return false;
 80038fe:	2300      	movs	r3, #0
 8003900:	e282      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 8003902:	48a1      	ldr	r0, [pc, #644]	; (8003b88 <_Z25TestPIDControllerResponsev+0x314>)
 8003904:	f008 f896 	bl	800ba34 <puts>
	state = 1.0;
 8003908:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800390c:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 2.0;
 800390e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003912:	63bb      	str	r3, [r7, #56]	; 0x38
	pid.k_p = 5.0;
 8003914:	4b9d      	ldr	r3, [pc, #628]	; (8003b8c <_Z25TestPIDControllerResponsev+0x318>)
 8003916:	607b      	str	r3, [r7, #4]
	output = pid.Update(state - target, 10.5);
 8003918:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800391c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003920:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	eef2 0a05 	vmov.f32	s1, #37	; 0x41280000  10.5
 800392a:	eeb0 0a67 	vmov.f32	s0, s15
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f988 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8003934:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float expect_output = (1.0 - 2.0) * 5.0;
 8003938:	4b95      	ldr	r3, [pc, #596]	; (8003b90 <_Z25TestPIDControllerResponsev+0x31c>)
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (output != expect_output) {
 800393c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003944:	eeb4 7a67 	vcmp.f32	s14, s15
 8003948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394c:	d012      	beq.n	8003974 <_Z25TestPIDControllerResponsev+0x100>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 800394e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003950:	f7fc fe22 	bl	8000598 <__aeabi_f2d>
 8003954:	4604      	mov	r4, r0
 8003956:	460d      	mov	r5, r1
 8003958:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800395a:	f7fc fe1d 	bl	8000598 <__aeabi_f2d>
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	e9cd 2300 	strd	r2, r3, [sp]
 8003966:	4622      	mov	r2, r4
 8003968:	462b      	mov	r3, r5
 800396a:	488a      	ldr	r0, [pc, #552]	; (8003b94 <_Z25TestPIDControllerResponsev+0x320>)
 800396c:	f007 ffdc 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003970:	2300      	movs	r3, #0
 8003972:	e249      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 8003974:	4888      	ldr	r0, [pc, #544]	; (8003b98 <_Z25TestPIDControllerResponsev+0x324>)
 8003976:	f008 f85d 	bl	800ba34 <puts>
	float prev_error = state - target;
 800397a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800397e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003986:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid.k_p = 0;
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
	pid.k_i = 3;
 8003990:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <_Z25TestPIDControllerResponsev+0x328>)
 8003992:	60bb      	str	r3, [r7, #8]
	target = 98.5;
 8003994:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <_Z25TestPIDControllerResponsev+0x32c>)
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 70;
 8003998:	4b82      	ldr	r3, [pc, #520]	; (8003ba4 <_Z25TestPIDControllerResponsev+0x330>)
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 10.7);
 800399c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80039a0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8003ba8 <_Z25TestPIDControllerResponsev+0x334>
 80039ae:	eeb0 0a67 	vmov.f32	s0, s15
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe f946 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 80039b8:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = pid.k_i * (prev_error + (state - target)) * 10.7f / 2.0f;
 80039bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80039c0:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80039c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039c8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80039cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8003ba8 <_Z25TestPIDControllerResponsev+0x334>
 80039dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80039e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 80039ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80039f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	dd13      	ble.n	8003a26 <_Z25TestPIDControllerResponsev+0x1b2>
 80039fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003bac <_Z25TestPIDControllerResponsev+0x338>
 8003a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a16:	bf4c      	ite	mi
 8003a18:	2301      	movmi	r3, #1
 8003a1a:	2300      	movpl	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e012      	b.n	8003a4c <_Z25TestPIDControllerResponsev+0x1d8>
 8003a26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a32:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003bac <_Z25TestPIDControllerResponsev+0x338>
 8003a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	bf4c      	ite	mi
 8003a40:	2301      	movmi	r3, #1
 8003a42:	2300      	movpl	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	f083 0301 	eor.w	r3, r3, #1
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <_Z25TestPIDControllerResponsev+0x202>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 8003a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a52:	f7fc fda1 	bl	8000598 <__aeabi_f2d>
 8003a56:	4604      	mov	r4, r0
 8003a58:	460d      	mov	r5, r1
 8003a5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003a5c:	f7fc fd9c 	bl	8000598 <__aeabi_f2d>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	e9cd 2300 	strd	r2, r3, [sp]
 8003a68:	4622      	mov	r2, r4
 8003a6a:	462b      	mov	r3, r5
 8003a6c:	4850      	ldr	r0, [pc, #320]	; (8003bb0 <_Z25TestPIDControllerResponsev+0x33c>)
 8003a6e:	f007 ff5b 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e1c8      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 8003a76:	484f      	ldr	r0, [pc, #316]	; (8003bb4 <_Z25TestPIDControllerResponsev+0x340>)
 8003a78:	f007 ffdc 	bl	800ba34 <puts>
	prev_error = state - target;
 8003a7c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a80:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	target = 2;
 8003a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a90:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 5;
 8003a92:	4b3e      	ldr	r3, [pc, #248]	; (8003b8c <_Z25TestPIDControllerResponsev+0x318>)
 8003a94:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 11.9);
 8003a96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003a9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	eddf 0a44 	vldr	s1, [pc, #272]	; 8003bb8 <_Z25TestPIDControllerResponsev+0x344>
 8003aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fe f8c9 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8003ab2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output += pid.k_i * (prev_error + (state - target)) * 11.9f / 2.0f;
 8003ab6:	ed97 7a02 	vldr	s14, [r7, #8]
 8003aba:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003abe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ac2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ac6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003bb8 <_Z25TestPIDControllerResponsev+0x344>
 8003ad6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ada:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003aee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003af2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	dd13      	ble.n	8003b28 <_Z25TestPIDControllerResponsev+0x2b4>
 8003b00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003bac <_Z25TestPIDControllerResponsev+0x338>
 8003b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	bf4c      	ite	mi
 8003b1a:	2301      	movmi	r3, #1
 8003b1c:	2300      	movpl	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	f083 0301 	eor.w	r3, r3, #1
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e012      	b.n	8003b4e <_Z25TestPIDControllerResponsev+0x2da>
 8003b28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003b2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b34:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003bac <_Z25TestPIDControllerResponsev+0x338>
 8003b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b40:	bf4c      	ite	mi
 8003b42:	2301      	movmi	r3, #1
 8003b44:	2300      	movpl	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f083 0301 	eor.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <_Z25TestPIDControllerResponsev+0x34c>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f7fc fd20 	bl	8000598 <__aeabi_f2d>
 8003b58:	4604      	mov	r4, r0
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b5e:	f7fc fd1b 	bl	8000598 <__aeabi_f2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	e9cd 2300 	strd	r2, r3, [sp]
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	462b      	mov	r3, r5
 8003b6e:	4813      	ldr	r0, [pc, #76]	; (8003bbc <_Z25TestPIDControllerResponsev+0x348>)
 8003b70:	f007 feda 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e147      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
 8003b78:	0800e6d0 	.word	0x0800e6d0
 8003b7c:	0800e700 	.word	0x0800e700
 8003b80:	00000000 	.word	0x00000000
 8003b84:	0800e740 	.word	0x0800e740
 8003b88:	0800e794 	.word	0x0800e794
 8003b8c:	40a00000 	.word	0x40a00000
 8003b90:	c0a00000 	.word	0xc0a00000
 8003b94:	0800e7b4 	.word	0x0800e7b4
 8003b98:	0800e804 	.word	0x0800e804
 8003b9c:	40400000 	.word	0x40400000
 8003ba0:	42c50000 	.word	0x42c50000
 8003ba4:	428c0000 	.word	0x428c0000
 8003ba8:	412b3333 	.word	0x412b3333
 8003bac:	3c23d70a 	.word	0x3c23d70a
 8003bb0:	0800e824 	.word	0x0800e824
 8003bb4:	0800e874 	.word	0x0800e874
 8003bb8:	413e6666 	.word	0x413e6666
 8003bbc:	0800e894 	.word	0x0800e894
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 8003bc0:	4893      	ldr	r0, [pc, #588]	; (8003e10 <_Z25TestPIDControllerResponsev+0x59c>)
 8003bc2:	f007 ff37 	bl	800ba34 <puts>
	pid.Reset();
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe f933 	bl	8001e34 <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	607b      	str	r3, [r7, #4]
	pid.k_i = 0;
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
	pid.k_d = 0;
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]
	output = pid.Update(5.0, 1.2);
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8003e14 <_Z25TestPIDControllerResponsev+0x5a0>
 8003be6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe f82a 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8003bf0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003bfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003bfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	dd13      	ble.n	8003c34 <_Z25TestPIDControllerResponsev+0x3c0>
 8003c0c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c10:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c18:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	bf4c      	ite	mi
 8003c26:	2301      	movmi	r3, #1
 8003c28:	2300      	movpl	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	e012      	b.n	8003c5a <_Z25TestPIDControllerResponsev+0x3e6>
 8003c34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003c38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c40:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4c:	bf4c      	ite	mi
 8003c4e:	2301      	movmi	r3, #1
 8003c50:	2300      	movpl	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f083 0301 	eor.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d012      	beq.n	8003c84 <_Z25TestPIDControllerResponsev+0x410>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 8003c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c60:	f7fc fc9a 	bl	8000598 <__aeabi_f2d>
 8003c64:	4604      	mov	r4, r0
 8003c66:	460d      	mov	r5, r1
 8003c68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c6a:	f7fc fc95 	bl	8000598 <__aeabi_f2d>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	e9cd 2300 	strd	r2, r3, [sp]
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	4868      	ldr	r0, [pc, #416]	; (8003e1c <_Z25TestPIDControllerResponsev+0x5a8>)
 8003c7c:	f007 fe54 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003c80:	2300      	movs	r3, #0
 8003c82:	e0c1      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 8003c84:	4866      	ldr	r0, [pc, #408]	; (8003e20 <_Z25TestPIDControllerResponsev+0x5ac>)
 8003c86:	f007 fed5 	bl	800ba34 <puts>
	state = 0;
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 0;
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8003c96:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003c9a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd ffc9 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8003cb2:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003cbc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003cc0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	dd13      	ble.n	8003cf6 <_Z25TestPIDControllerResponsev+0x482>
 8003cce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003cd2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cda:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce6:	bf4c      	ite	mi
 8003ce8:	2301      	movmi	r3, #1
 8003cea:	2300      	movpl	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	f083 0301 	eor.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e012      	b.n	8003d1c <_Z25TestPIDControllerResponsev+0x4a8>
 8003cf6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003cfa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d02:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	bf4c      	ite	mi
 8003d10:	2301      	movmi	r3, #1
 8003d12:	2300      	movpl	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f083 0301 	eor.w	r3, r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <_Z25TestPIDControllerResponsev+0x4d2>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 8003d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d22:	f7fc fc39 	bl	8000598 <__aeabi_f2d>
 8003d26:	4604      	mov	r4, r0
 8003d28:	460d      	mov	r5, r1
 8003d2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003d2c:	f7fc fc34 	bl	8000598 <__aeabi_f2d>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	e9cd 2300 	strd	r2, r3, [sp]
 8003d38:	4622      	mov	r2, r4
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	4839      	ldr	r0, [pc, #228]	; (8003e24 <_Z25TestPIDControllerResponsev+0x5b0>)
 8003d3e:	f007 fdf3 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e060      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 8003d46:	4838      	ldr	r0, [pc, #224]	; (8003e28 <_Z25TestPIDControllerResponsev+0x5b4>)
 8003d48:	f007 fe74 	bl	800ba34 <puts>
	pid.k_d = 13.5;
 8003d4c:	4b37      	ldr	r3, [pc, #220]	; (8003e2c <_Z25TestPIDControllerResponsev+0x5b8>)
 8003d4e:	60fb      	str	r3, [r7, #12]
	state = -487.3;
 8003d50:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <_Z25TestPIDControllerResponsev+0x5bc>)
 8003d52:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 22;
 8003d54:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <_Z25TestPIDControllerResponsev+0x5c0>)
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8003d58:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003d5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fd ff68 	bl	8001c44 <_ZN13PIDController6UpdateEff>
 8003d74:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = (-487.3 - 22) * 13.5 / 10;
 8003d78:	4b2f      	ldr	r3, [pc, #188]	; (8003e38 <_Z25TestPIDControllerResponsev+0x5c4>)
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003d7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003d80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	dd13      	ble.n	8003db6 <_Z25TestPIDControllerResponsev+0x542>
 8003d8e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003d92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003d9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	bf4c      	ite	mi
 8003da8:	2301      	movmi	r3, #1
 8003daa:	2300      	movpl	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e012      	b.n	8003ddc <_Z25TestPIDControllerResponsev+0x568>
 8003db6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003dba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dc2:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003e18 <_Z25TestPIDControllerResponsev+0x5a4>
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	bf4c      	ite	mi
 8003dd0:	2301      	movmi	r3, #1
 8003dd2:	2300      	movpl	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f083 0301 	eor.w	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <_Z25TestPIDControllerResponsev+0x592>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 8003de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de2:	f7fc fbd9 	bl	8000598 <__aeabi_f2d>
 8003de6:	4604      	mov	r4, r0
 8003de8:	460d      	mov	r5, r1
 8003dea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003dec:	f7fc fbd4 	bl	8000598 <__aeabi_f2d>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	e9cd 2300 	strd	r2, r3, [sp]
 8003df8:	4622      	mov	r2, r4
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	480f      	ldr	r0, [pc, #60]	; (8003e3c <_Z25TestPIDControllerResponsev+0x5c8>)
 8003dfe:	f007 fd93 	bl	800b928 <iprintf>
				expect_output, output);
		return false;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <_Z25TestPIDControllerResponsev+0x594>
	}

	// TODO: test ramp and limit

	return true;
 8003e06:	2301      	movs	r3, #1
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3740      	adds	r7, #64	; 0x40
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e10:	0800e8e4 	.word	0x0800e8e4
 8003e14:	3f99999a 	.word	0x3f99999a
 8003e18:	3c23d70a 	.word	0x3c23d70a
 8003e1c:	0800e908 	.word	0x0800e908
 8003e20:	0800e958 	.word	0x0800e958
 8003e24:	0800e97c 	.word	0x0800e97c
 8003e28:	0800e9cc 	.word	0x0800e9cc
 8003e2c:	41580000 	.word	0x41580000
 8003e30:	c3f3a666 	.word	0xc3f3a666
 8003e34:	41b00000 	.word	0x41b00000
 8003e38:	c42be385 	.word	0xc42be385
 8003e3c:	0800e9ec 	.word	0x0800e9ec

08003e40 <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 8003e46:	4915      	ldr	r1, [pc, #84]	; (8003e9c <_Z20TestPIDControllerAllv+0x5c>)
 8003e48:	4815      	ldr	r0, [pc, #84]	; (8003ea0 <_Z20TestPIDControllerAllv+0x60>)
 8003e4a:	f007 fd6d 	bl	800b928 <iprintf>
	bool pid_passed = true;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 8003e52:	f7ff fc3f 	bl	80036d4 <_Z23TestPIDControllerCreatev>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	bf14      	ite	ne
 8003e62:	2301      	movne	r3, #1
 8003e64:	2300      	moveq	r3, #0
 8003e66:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 8003e68:	f7ff fd04 	bl	8003874 <_Z25TestPIDControllerResponsev>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	4013      	ands	r3, r2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 8003e84:	4807      	ldr	r0, [pc, #28]	; (8003ea4 <_Z20TestPIDControllerAllv+0x64>)
 8003e86:	f007 fdd5 	bl	800ba34 <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 8003e8a:	e002      	b.n	8003e92 <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 8003e8c:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <_Z20TestPIDControllerAllv+0x68>)
 8003e8e:	f007 fdd1 	bl	800ba34 <puts>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	0800ea3c 	.word	0x0800ea3c
 8003ea0:	0800ea58 	.word	0x0800ea58
 8003ea4:	0800ea6c 	.word	0x0800ea6c
 8003ea8:	0800ea9c 	.word	0x0800ea9c

08003eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	dbprint_uart = &huart3;
 8003eb0:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <main+0x68>)
 8003eb2:	4a19      	ldr	r2, [pc, #100]	; (8003f18 <main+0x6c>)
 8003eb4:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <main+0x70>)
 8003eb8:	4a19      	ldr	r2, [pc, #100]	; (8003f20 <main+0x74>)
 8003eba:	601a      	str	r2, [r3, #0]
	half_bridge_pwm_timer = &htim1;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <main+0x78>)
 8003ebe:	4a1a      	ldr	r2, [pc, #104]	; (8003f28 <main+0x7c>)
 8003ec0:	601a      	str	r2, [r3, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ec2:	f000 ffec 	bl	8004e9e <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003ec6:	f000 f837 	bl	8003f38 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eca:	f000 fb99 	bl	8004600 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ece:	f000 fb79 	bl	80045c4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003ed2:	f000 fb19 	bl	8004508 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003ed6:	f000 fb47 	bl	8004568 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8003eda:	f000 f931 	bl	8004140 <MX_SPI5_Init>
  MX_ADC1_Init();
 8003ede:	f000 f8c1 	bl	8004064 <MX_ADC1_Init>
  MX_TIM4_Init();
 8003ee2:	f000 fa9b 	bl	800441c <MX_TIM4_Init>
  MX_TIM1_Init();
 8003ee6:	f000 f969 	bl	80041bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8003eea:	f000 fa2b 	bl	8004344 <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 8003eee:	2201      	movs	r2, #1
 8003ef0:	2110      	movs	r1, #16
 8003ef2:	480e      	ldr	r0, [pc, #56]	; (8003f2c <main+0x80>)
 8003ef4:	f002 fa9c 	bl	8006430 <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curr_sense_adc_buf, ADC_BUF_LEN) != HAL_OK) {
 8003ef8:	2203      	movs	r2, #3
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <main+0x84>)
 8003efc:	480d      	ldr	r0, [pc, #52]	; (8003f34 <main+0x88>)
 8003efe:	f001 f893 	bl	8005028 <HAL_ADC_Start_DMA>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <main+0x60>
  	  Error_Handler();
 8003f08:	f000 fc54 	bl	80047b4 <Error_Handler>
  }

  main_run();
 8003f0c:	f7fe fa88 	bl	8002420 <main_run>

  while (1)
 8003f10:	e7fe      	b.n	8003f10 <main+0x64>
 8003f12:	bf00      	nop
 8003f14:	2000089c 	.word	0x2000089c
 8003f18:	200002d0 	.word	0x200002d0
 8003f1c:	20000758 	.word	0x20000758
 8003f20:	20000220 	.word	0x20000220
 8003f24:	2000021c 	.word	0x2000021c
 8003f28:	20000804 	.word	0x20000804
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	20000204 	.word	0x20000204
 8003f34:	2000075c 	.word	0x2000075c

08003f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b0b4      	sub	sp, #208	; 0xd0
 8003f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f42:	2230      	movs	r2, #48	; 0x30
 8003f44:	2100      	movs	r1, #0
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 ffd2 	bl	800aef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f4c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f006 ffc3 	bl	800aef0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f6a:	f002 fbdd 	bl	8006728 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b3a      	ldr	r3, [pc, #232]	; (8004058 <SystemClock_Config+0x120>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4a39      	ldr	r2, [pc, #228]	; (8004058 <SystemClock_Config+0x120>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7a:	4b37      	ldr	r3, [pc, #220]	; (8004058 <SystemClock_Config+0x120>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f86:	4b35      	ldr	r3, [pc, #212]	; (800405c <SystemClock_Config+0x124>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a34      	ldr	r2, [pc, #208]	; (800405c <SystemClock_Config+0x124>)
 8003f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <SystemClock_Config+0x124>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003fa4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fac:	2302      	movs	r3, #2
 8003fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003fc0:	23d8      	movs	r3, #216	; 0xd8
 8003fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003fcc:	2309      	movs	r3, #9
 8003fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f002 fc06 	bl	80067e8 <HAL_RCC_OscConfig>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003fe2:	f000 fbe7 	bl	80047b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003fe6:	f002 fbaf 	bl	8006748 <HAL_PWREx_EnableOverDrive>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003ff0:	f000 fbe0 	bl	80047b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ff4:	230f      	movs	r3, #15
 8003ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004006:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800400a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800400e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004016:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800401a:	2107      	movs	r1, #7
 800401c:	4618      	mov	r0, r3
 800401e:	f002 fe87 	bl	8006d30 <HAL_RCC_ClockConfig>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004028:	f000 fbc4 	bl	80047b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <SystemClock_Config+0x128>)
 800402e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004030:	2300      	movs	r3, #0
 8004032:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800403a:	f107 030c 	add.w	r3, r7, #12
 800403e:	4618      	mov	r0, r3
 8004040:	f003 f878 	bl	8007134 <HAL_RCCEx_PeriphCLKConfig>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800404a:	f000 fbb3 	bl	80047b4 <Error_Handler>
  }
}
 800404e:	bf00      	nop
 8004050:	37d0      	adds	r7, #208	; 0xd0
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800
 800405c:	40007000 	.word	0x40007000
 8004060:	00200100 	.word	0x00200100

08004064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800406a:	463b      	mov	r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004076:	4b30      	ldr	r3, [pc, #192]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004078:	4a30      	ldr	r2, [pc, #192]	; (800413c <MX_ADC1_Init+0xd8>)
 800407a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <MX_ADC1_Init+0xd4>)
 800407e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004082:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800408a:	4b2b      	ldr	r3, [pc, #172]	; (8004138 <MX_ADC1_Init+0xd4>)
 800408c:	2201      	movs	r2, #1
 800408e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004090:	4b29      	ldr	r3, [pc, #164]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004092:	2200      	movs	r2, #0
 8004094:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004096:	4b28      	ldr	r3, [pc, #160]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80040a6:	4b24      	ldr	r3, [pc, #144]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040a8:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 80040ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ae:	4b22      	ldr	r3, [pc, #136]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80040b4:	4b20      	ldr	r3, [pc, #128]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040b6:	2203      	movs	r2, #3
 80040b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040ba:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040c8:	481b      	ldr	r0, [pc, #108]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040ca:	f000 ff69 	bl	8004fa0 <HAL_ADC_Init>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80040d4:	f000 fb6e 	bl	80047b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80040d8:	2301      	movs	r3, #1
 80040da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040dc:	2301      	movs	r3, #1
 80040de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80040e0:	2301      	movs	r3, #1
 80040e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040e4:	463b      	mov	r3, r7
 80040e6:	4619      	mov	r1, r3
 80040e8:	4813      	ldr	r0, [pc, #76]	; (8004138 <MX_ADC1_Init+0xd4>)
 80040ea:	f001 f8b5 	bl	8005258 <HAL_ADC_ConfigChannel>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80040f4:	f000 fb5e 	bl	80047b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80040f8:	2309      	movs	r3, #9
 80040fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004100:	463b      	mov	r3, r7
 8004102:	4619      	mov	r1, r3
 8004104:	480c      	ldr	r0, [pc, #48]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004106:	f001 f8a7 	bl	8005258 <HAL_ADC_ConfigChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8004110:	f000 fb50 	bl	80047b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004114:	2308      	movs	r3, #8
 8004116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004118:	2303      	movs	r3, #3
 800411a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800411c:	463b      	mov	r3, r7
 800411e:	4619      	mov	r1, r3
 8004120:	4805      	ldr	r0, [pc, #20]	; (8004138 <MX_ADC1_Init+0xd4>)
 8004122:	f001 f899 	bl	8005258 <HAL_ADC_ConfigChannel>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 800412c:	f000 fb42 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004130:	bf00      	nop
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	2000075c 	.word	0x2000075c
 800413c:	40012000 	.word	0x40012000

08004140 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <MX_SPI5_Init+0x78>)
 8004148:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800414a:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <MX_SPI5_Init+0x74>)
 800414c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004150:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <MX_SPI5_Init+0x74>)
 800415a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800415e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004168:	2201      	movs	r2, #1
 800416a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <MX_SPI5_Init+0x74>)
 800416e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004172:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004174:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004176:	2218      	movs	r2, #24
 8004178:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <MX_SPI5_Init+0x74>)
 800417c:	2200      	movs	r2, #0
 800417e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004182:	2200      	movs	r2, #0
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004188:	2200      	movs	r2, #0
 800418a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <MX_SPI5_Init+0x74>)
 800418e:	2207      	movs	r2, #7
 8004190:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <MX_SPI5_Init+0x74>)
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <MX_SPI5_Init+0x74>)
 800419a:	2200      	movs	r2, #0
 800419c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800419e:	4805      	ldr	r0, [pc, #20]	; (80041b4 <MX_SPI5_Init+0x74>)
 80041a0:	f003 fb12 	bl	80077c8 <HAL_SPI_Init>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80041aa:	f000 fb03 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000220 	.word	0x20000220
 80041b8:	40015000 	.word	0x40015000

080041bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b09a      	sub	sp, #104	; 0x68
 80041c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
 80041ea:	611a      	str	r2, [r3, #16]
 80041ec:	615a      	str	r2, [r3, #20]
 80041ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80041f0:	1d3b      	adds	r3, r7, #4
 80041f2:	222c      	movs	r2, #44	; 0x2c
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f006 fe7a 	bl	800aef0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80041fc:	4b4f      	ldr	r3, [pc, #316]	; (800433c <MX_TIM1_Init+0x180>)
 80041fe:	4a50      	ldr	r2, [pc, #320]	; (8004340 <MX_TIM1_Init+0x184>)
 8004200:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004202:	4b4e      	ldr	r3, [pc, #312]	; (800433c <MX_TIM1_Init+0x180>)
 8004204:	2200      	movs	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004208:	4b4c      	ldr	r3, [pc, #304]	; (800433c <MX_TIM1_Init+0x180>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 800420e:	4b4b      	ldr	r3, [pc, #300]	; (800433c <MX_TIM1_Init+0x180>)
 8004210:	f242 7210 	movw	r2, #10000	; 0x2710
 8004214:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004216:	4b49      	ldr	r3, [pc, #292]	; (800433c <MX_TIM1_Init+0x180>)
 8004218:	2200      	movs	r2, #0
 800421a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800421c:	4b47      	ldr	r3, [pc, #284]	; (800433c <MX_TIM1_Init+0x180>)
 800421e:	2200      	movs	r2, #0
 8004220:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004222:	4b46      	ldr	r3, [pc, #280]	; (800433c <MX_TIM1_Init+0x180>)
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004228:	4844      	ldr	r0, [pc, #272]	; (800433c <MX_TIM1_Init+0x180>)
 800422a:	f004 f859 	bl	80082e0 <HAL_TIM_Base_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004234:	f000 fabe 	bl	80047b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800423c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800423e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004242:	4619      	mov	r1, r3
 8004244:	483d      	ldr	r0, [pc, #244]	; (800433c <MX_TIM1_Init+0x180>)
 8004246:	f004 fdd7 	bl	8008df8 <HAL_TIM_ConfigClockSource>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004250:	f000 fab0 	bl	80047b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004254:	4839      	ldr	r0, [pc, #228]	; (800433c <MX_TIM1_Init+0x180>)
 8004256:	f004 f974 	bl	8008542 <HAL_TIM_PWM_Init>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004260:	f000 faa8 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004264:	2320      	movs	r3, #32
 8004266:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004268:	2300      	movs	r3, #0
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426c:	2300      	movs	r3, #0
 800426e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004270:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004274:	4619      	mov	r1, r3
 8004276:	4831      	ldr	r0, [pc, #196]	; (800433c <MX_TIM1_Init+0x180>)
 8004278:	f005 fbfe 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004282:	f000 fa97 	bl	80047b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004286:	2370      	movs	r3, #112	; 0x70
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428e:	2300      	movs	r3, #0
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004292:	2300      	movs	r3, #0
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004296:	2300      	movs	r3, #0
 8004298:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042a6:	2200      	movs	r2, #0
 80042a8:	4619      	mov	r1, r3
 80042aa:	4824      	ldr	r0, [pc, #144]	; (800433c <MX_TIM1_Init+0x180>)
 80042ac:	f004 fc94 	bl	8008bd8 <HAL_TIM_PWM_ConfigChannel>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80042b6:	f000 fa7d 	bl	80047b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042be:	2204      	movs	r2, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	481e      	ldr	r0, [pc, #120]	; (800433c <MX_TIM1_Init+0x180>)
 80042c4:	f004 fc88 	bl	8008bd8 <HAL_TIM_PWM_ConfigChannel>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80042ce:	f000 fa71 	bl	80047b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042d6:	2208      	movs	r2, #8
 80042d8:	4619      	mov	r1, r3
 80042da:	4818      	ldr	r0, [pc, #96]	; (800433c <MX_TIM1_Init+0x180>)
 80042dc:	f004 fc7c 	bl	8008bd8 <HAL_TIM_PWM_ConfigChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80042e6:	f000 fa65 	bl	80047b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 80042f6:	234b      	movs	r3, #75	; 0x4b
 80042f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004302:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004308:	2300      	movs	r3, #0
 800430a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800430c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004316:	2300      	movs	r3, #0
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4807      	ldr	r0, [pc, #28]	; (800433c <MX_TIM1_Init+0x180>)
 8004320:	f005 fc38 	bl	8009b94 <HAL_TIMEx_ConfigBreakDeadTime>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800432a:	f000 fa43 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800432e:	4803      	ldr	r0, [pc, #12]	; (800433c <MX_TIM1_Init+0x180>)
 8004330:	f000 fb88 	bl	8004a44 <HAL_TIM_MspPostInit>

}
 8004334:	bf00      	nop
 8004336:	3768      	adds	r7, #104	; 0x68
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000804 	.word	0x20000804
 8004340:	40010000 	.word	0x40010000

08004344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08c      	sub	sp, #48	; 0x30
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800434a:	f107 0320 	add.w	r3, r7, #32
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004368:	463b      	mov	r3, r7
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004372:	4b29      	ldr	r3, [pc, #164]	; (8004418 <MX_TIM2_Init+0xd4>)
 8004374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <MX_TIM2_Init+0xd4>)
 800437c:	2200      	movs	r2, #0
 800437e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <MX_TIM2_Init+0xd4>)
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <MX_TIM2_Init+0xd4>)
 8004388:	2296      	movs	r2, #150	; 0x96
 800438a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800438c:	4b22      	ldr	r3, [pc, #136]	; (8004418 <MX_TIM2_Init+0xd4>)
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004392:	4b21      	ldr	r3, [pc, #132]	; (8004418 <MX_TIM2_Init+0xd4>)
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004398:	481f      	ldr	r0, [pc, #124]	; (8004418 <MX_TIM2_Init+0xd4>)
 800439a:	f003 ffa1 	bl	80082e0 <HAL_TIM_Base_Init>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80043a4:	f000 fa06 	bl	80047b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043ae:	f107 0320 	add.w	r3, r7, #32
 80043b2:	4619      	mov	r1, r3
 80043b4:	4818      	ldr	r0, [pc, #96]	; (8004418 <MX_TIM2_Init+0xd4>)
 80043b6:	f004 fd1f 	bl	8008df8 <HAL_TIM_ConfigClockSource>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80043c0:	f000 f9f8 	bl	80047b4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80043c4:	2108      	movs	r1, #8
 80043c6:	4814      	ldr	r0, [pc, #80]	; (8004418 <MX_TIM2_Init+0xd4>)
 80043c8:	f004 fa16 	bl	80087f8 <HAL_TIM_OnePulse_Init>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80043d2:	f000 f9ef 	bl	80047b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80043d6:	2306      	movs	r3, #6
 80043d8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80043de:	f107 030c 	add.w	r3, r7, #12
 80043e2:	4619      	mov	r1, r3
 80043e4:	480c      	ldr	r0, [pc, #48]	; (8004418 <MX_TIM2_Init+0xd4>)
 80043e6:	f004 fdcd 	bl	8008f84 <HAL_TIM_SlaveConfigSynchro>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80043f0:	f000 f9e0 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80043f4:	2320      	movs	r3, #32
 80043f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043fc:	463b      	mov	r3, r7
 80043fe:	4619      	mov	r1, r3
 8004400:	4805      	ldr	r0, [pc, #20]	; (8004418 <MX_TIM2_Init+0xd4>)
 8004402:	f005 fb39 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800440c:	f000 f9d2 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004410:	bf00      	nop
 8004412:	3730      	adds	r7, #48	; 0x30
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000850 	.word	0x20000850

0800441c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	; 0x38
 8004420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004430:	f107 031c 	add.w	r3, r7, #28
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	605a      	str	r2, [r3, #4]
 800443a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800443c:	463b      	mov	r3, r7
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	609a      	str	r2, [r3, #8]
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	611a      	str	r2, [r3, #16]
 800444a:	615a      	str	r2, [r3, #20]
 800444c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800444e:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004450:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <MX_TIM4_Init+0xe8>)
 8004452:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 8004454:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004456:	f245 4260 	movw	r2, #21600	; 0x5460
 800445a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445c:	4b28      	ldr	r3, [pc, #160]	; (8004500 <MX_TIM4_Init+0xe4>)
 800445e:	2200      	movs	r2, #0
 8004460:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004462:	4b27      	ldr	r3, [pc, #156]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004468:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446a:	4b25      	ldr	r3, [pc, #148]	; (8004500 <MX_TIM4_Init+0xe4>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004470:	4b23      	ldr	r3, [pc, #140]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004472:	2280      	movs	r2, #128	; 0x80
 8004474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004476:	4822      	ldr	r0, [pc, #136]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004478:	f003 ff32 	bl	80082e0 <HAL_TIM_Base_Init>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8004482:	f000 f997 	bl	80047b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800448c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004490:	4619      	mov	r1, r3
 8004492:	481b      	ldr	r0, [pc, #108]	; (8004500 <MX_TIM4_Init+0xe4>)
 8004494:	f004 fcb0 	bl	8008df8 <HAL_TIM_ConfigClockSource>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800449e:	f000 f989 	bl	80047b4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80044a2:	4817      	ldr	r0, [pc, #92]	; (8004500 <MX_TIM4_Init+0xe4>)
 80044a4:	f003 ffec 	bl	8008480 <HAL_TIM_OC_Init>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80044ae:	f000 f981 	bl	80047b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044b2:	2320      	movs	r3, #32
 80044b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80044ba:	f107 031c 	add.w	r3, r7, #28
 80044be:	4619      	mov	r1, r3
 80044c0:	480f      	ldr	r0, [pc, #60]	; (8004500 <MX_TIM4_Init+0xe4>)
 80044c2:	f005 fad9 	bl	8009a78 <HAL_TIMEx_MasterConfigSynchronization>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80044cc:	f000 f972 	bl	80047b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80044d0:	2300      	movs	r3, #0
 80044d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044d8:	2300      	movs	r3, #0
 80044da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80044e0:	463b      	mov	r3, r7
 80044e2:	220c      	movs	r2, #12
 80044e4:	4619      	mov	r1, r3
 80044e6:	4806      	ldr	r0, [pc, #24]	; (8004500 <MX_TIM4_Init+0xe4>)
 80044e8:	f004 fb00 	bl	8008aec <HAL_TIM_OC_ConfigChannel>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80044f2:	f000 f95f 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80044f6:	bf00      	nop
 80044f8:	3738      	adds	r7, #56	; 0x38
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000284 	.word	0x20000284
 8004504:	40000800 	.word	0x40000800

08004508 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <MX_USART3_UART_Init+0x58>)
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <MX_USART3_UART_Init+0x5c>)
 8004510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <MX_USART3_UART_Init+0x58>)
 800451c:	2200      	movs	r2, #0
 800451e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004522:	2200      	movs	r2, #0
 8004524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004528:	2200      	movs	r2, #0
 800452a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800452c:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <MX_USART3_UART_Init+0x58>)
 800452e:	220c      	movs	r2, #12
 8004530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004534:	2200      	movs	r2, #0
 8004536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <MX_USART3_UART_Init+0x58>)
 800453a:	2200      	movs	r2, #0
 800453c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004540:	2200      	movs	r2, #0
 8004542:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004544:	4b06      	ldr	r3, [pc, #24]	; (8004560 <MX_USART3_UART_Init+0x58>)
 8004546:	2200      	movs	r2, #0
 8004548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800454a:	4805      	ldr	r0, [pc, #20]	; (8004560 <MX_USART3_UART_Init+0x58>)
 800454c:	f005 fbe3 	bl	8009d16 <HAL_UART_Init>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004556:	f000 f92d 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	200002d0 	.word	0x200002d0
 8004564:	40004800 	.word	0x40004800

08004568 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800456e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004572:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004574:	4b12      	ldr	r3, [pc, #72]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004576:	2206      	movs	r2, #6
 8004578:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800457c:	2200      	movs	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004582:	2202      	movs	r2, #2
 8004584:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004586:	4b0e      	ldr	r3, [pc, #56]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004588:	2200      	movs	r2, #0
 800458a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800458c:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800458e:	2200      	movs	r2, #0
 8004590:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004594:	2200      	movs	r2, #0
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800459a:	2200      	movs	r2, #0
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80045aa:	4805      	ldr	r0, [pc, #20]	; (80045c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80045ac:	f001 ff73 	bl	8006496 <HAL_PCD_Init>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80045b6:	f000 f8fd 	bl	80047b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80045ba:	bf00      	nop
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000354 	.word	0x20000354

080045c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045ca:	4b0c      	ldr	r3, [pc, #48]	; (80045fc <MX_DMA_Init+0x38>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <MX_DMA_Init+0x38>)
 80045d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045d4:	6313      	str	r3, [r2, #48]	; 0x30
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <MX_DMA_Init+0x38>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	2100      	movs	r1, #0
 80045e6:	2038      	movs	r0, #56	; 0x38
 80045e8:	f001 f9d7 	bl	800599a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80045ec:	2038      	movs	r0, #56	; 0x38
 80045ee:	f001 f9f0 	bl	80059d2 <HAL_NVIC_EnableIRQ>

}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800

08004600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	; 0x30
 8004604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004606:	f107 031c 	add.w	r3, r7, #28
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004616:	4b4f      	ldr	r3, [pc, #316]	; (8004754 <MX_GPIO_Init+0x154>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a4e      	ldr	r2, [pc, #312]	; (8004754 <MX_GPIO_Init+0x154>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <MX_GPIO_Init+0x154>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800462e:	4b49      	ldr	r3, [pc, #292]	; (8004754 <MX_GPIO_Init+0x154>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a48      	ldr	r2, [pc, #288]	; (8004754 <MX_GPIO_Init+0x154>)
 8004634:	f043 0320 	orr.w	r3, r3, #32
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b46      	ldr	r3, [pc, #280]	; (8004754 <MX_GPIO_Init+0x154>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <MX_GPIO_Init+0x154>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a42      	ldr	r2, [pc, #264]	; (8004754 <MX_GPIO_Init+0x154>)
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b40      	ldr	r3, [pc, #256]	; (8004754 <MX_GPIO_Init+0x154>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800465e:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <MX_GPIO_Init+0x154>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <MX_GPIO_Init+0x154>)
 8004664:	f043 0301 	orr.w	r3, r3, #1
 8004668:	6313      	str	r3, [r2, #48]	; 0x30
 800466a:	4b3a      	ldr	r3, [pc, #232]	; (8004754 <MX_GPIO_Init+0x154>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004676:	4b37      	ldr	r3, [pc, #220]	; (8004754 <MX_GPIO_Init+0x154>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4a36      	ldr	r2, [pc, #216]	; (8004754 <MX_GPIO_Init+0x154>)
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	6313      	str	r3, [r2, #48]	; 0x30
 8004682:	4b34      	ldr	r3, [pc, #208]	; (8004754 <MX_GPIO_Init+0x154>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800468e:	4b31      	ldr	r3, [pc, #196]	; (8004754 <MX_GPIO_Init+0x154>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	4a30      	ldr	r2, [pc, #192]	; (8004754 <MX_GPIO_Init+0x154>)
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	6313      	str	r3, [r2, #48]	; 0x30
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <MX_GPIO_Init+0x154>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	607b      	str	r3, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80046a6:	4b2b      	ldr	r3, [pc, #172]	; (8004754 <MX_GPIO_Init+0x154>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a2a      	ldr	r2, [pc, #168]	; (8004754 <MX_GPIO_Init+0x154>)
 80046ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b28      	ldr	r3, [pc, #160]	; (8004754 <MX_GPIO_Init+0x154>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 80046be:	2200      	movs	r2, #0
 80046c0:	2110      	movs	r1, #16
 80046c2:	4825      	ldr	r0, [pc, #148]	; (8004758 <MX_GPIO_Init+0x158>)
 80046c4:	f001 feb4 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80046c8:	2200      	movs	r2, #0
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	4823      	ldr	r0, [pc, #140]	; (800475c <MX_GPIO_Init+0x15c>)
 80046ce:	f001 feaf 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80046d2:	2200      	movs	r2, #0
 80046d4:	2180      	movs	r1, #128	; 0x80
 80046d6:	4822      	ldr	r0, [pc, #136]	; (8004760 <MX_GPIO_Init+0x160>)
 80046d8:	f001 feaa 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80046dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <MX_GPIO_Init+0x164>)
 80046e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80046ea:	f107 031c 	add.w	r3, r7, #28
 80046ee:	4619      	mov	r1, r3
 80046f0:	481d      	ldr	r0, [pc, #116]	; (8004768 <MX_GPIO_Init+0x168>)
 80046f2:	f001 fd01 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 80046f6:	2310      	movs	r3, #16
 80046f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046fa:	2301      	movs	r3, #1
 80046fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004702:	2302      	movs	r3, #2
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004706:	f107 031c 	add.w	r3, r7, #28
 800470a:	4619      	mov	r1, r3
 800470c:	4812      	ldr	r0, [pc, #72]	; (8004758 <MX_GPIO_Init+0x158>)
 800470e:	f001 fcf3 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004712:	2340      	movs	r3, #64	; 0x40
 8004714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004716:	2301      	movs	r3, #1
 8004718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471a:	2300      	movs	r3, #0
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800471e:	2300      	movs	r3, #0
 8004720:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	4619      	mov	r1, r3
 8004728:	480c      	ldr	r0, [pc, #48]	; (800475c <MX_GPIO_Init+0x15c>)
 800472a:	f001 fce5 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004732:	2301      	movs	r3, #1
 8004734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473a:	2300      	movs	r3, #0
 800473c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800473e:	f107 031c 	add.w	r3, r7, #28
 8004742:	4619      	mov	r1, r3
 8004744:	4806      	ldr	r0, [pc, #24]	; (8004760 <MX_GPIO_Init+0x160>)
 8004746:	f001 fcd7 	bl	80060f8 <HAL_GPIO_Init>

}
 800474a:	bf00      	nop
 800474c:	3730      	adds	r7, #48	; 0x30
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800
 8004758:	40020000 	.word	0x40020000
 800475c:	40021800 	.word	0x40021800
 8004760:	40020400 	.word	0x40020400
 8004764:	10110000 	.word	0x10110000
 8004768:	40020800 	.word	0x40020800

0800476c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <__io_putchar+0x24>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	1d39      	adds	r1, r7, #4
 800477a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800477e:	2201      	movs	r2, #1
 8004780:	f005 fb17 	bl	8009db2 <HAL_UART_Transmit>

  return ch;
 8004784:	687b      	ldr	r3, [r7, #4]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2000089c 	.word	0x2000089c

08004794 <HAL_TIM_PeriodElapsedCallback>:
//  /* This is called after the conversion is completed */
////  printf("hay\r\n");
//	ADCConvCpltCallback();
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d101      	bne.n	80047a8 <HAL_TIM_PeriodElapsedCallback+0x14>
		ADCConvCpltCallback(); // probably wanna leave a few cycles here to let the DMA do its work!
 80047a4:	f7fd ff56 	bl	8002654 <ADCConvCpltCallback>
	}
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	20000804 	.word	0x20000804

080047b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047b8:	b672      	cpsid	i
}
 80047ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047bc:	e7fe      	b.n	80047bc <Error_Handler+0x8>
	...

080047c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <HAL_MspInit+0x44>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <HAL_MspInit+0x44>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	; 0x40
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_MspInit+0x44>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047de:	4b09      	ldr	r3, [pc, #36]	; (8004804 <HAL_MspInit+0x44>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <HAL_MspInit+0x44>)
 80047e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e8:	6453      	str	r3, [r2, #68]	; 0x44
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <HAL_MspInit+0x44>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800

08004808 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	609a      	str	r2, [r3, #8]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a39      	ldr	r2, [pc, #228]	; (800490c <HAL_ADC_MspInit+0x104>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d16c      	bne.n	8004904 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_ADC_MspInit+0x108>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4a38      	ldr	r2, [pc, #224]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004834:	6453      	str	r3, [r2, #68]	; 0x44
 8004836:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004842:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004846:	4a32      	ldr	r2, [pc, #200]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	6313      	str	r3, [r2, #48]	; 0x30
 800484e:	4b30      	ldr	r3, [pc, #192]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800485a:	4b2d      	ldr	r3, [pc, #180]	; (8004910 <HAL_ADC_MspInit+0x108>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004860:	f043 0302 	orr.w	r3, r3, #2
 8004864:	6313      	str	r3, [r2, #48]	; 0x30
 8004866:	4b2a      	ldr	r3, [pc, #168]	; (8004910 <HAL_ADC_MspInit+0x108>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CURR_FB_U_Pin;
 8004872:	2302      	movs	r3, #2
 8004874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004876:	2303      	movs	r3, #3
 8004878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURR_FB_U_GPIO_Port, &GPIO_InitStruct);
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	4619      	mov	r1, r3
 8004884:	4823      	ldr	r0, [pc, #140]	; (8004914 <HAL_ADC_MspInit+0x10c>)
 8004886:	f001 fc37 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_W_Pin|CURR_FB_V_Pin;
 800488a:	2303      	movs	r3, #3
 800488c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488e:	2303      	movs	r3, #3
 8004890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004896:	f107 0314 	add.w	r3, r7, #20
 800489a:	4619      	mov	r1, r3
 800489c:	481e      	ldr	r0, [pc, #120]	; (8004918 <HAL_ADC_MspInit+0x110>)
 800489e:	f001 fc2b 	bl	80060f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80048a2:	4b1e      	ldr	r3, [pc, #120]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048a4:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <HAL_ADC_MspInit+0x118>)
 80048a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ae:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048ba:	4b18      	ldr	r3, [pc, #96]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048c2:	4b16      	ldr	r3, [pc, #88]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80048da:	4b10      	ldr	r3, [pc, #64]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048e8:	480c      	ldr	r0, [pc, #48]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048ea:	f001 f88d 	bl	8005a08 <HAL_DMA_Init>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80048f4:	f7ff ff5e 	bl	80047b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <HAL_ADC_MspInit+0x114>)
 80048fc:	639a      	str	r2, [r3, #56]	; 0x38
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <HAL_ADC_MspInit+0x114>)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004904:	bf00      	nop
 8004906:	3728      	adds	r7, #40	; 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40012000 	.word	0x40012000
 8004910:	40023800 	.word	0x40023800
 8004914:	40020000 	.word	0x40020000
 8004918:	40020400 	.word	0x40020400
 800491c:	200007a4 	.word	0x200007a4
 8004920:	40026410 	.word	0x40026410

08004924 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492c:	f107 0314 	add.w	r3, r7, #20
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	605a      	str	r2, [r3, #4]
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_SPI_MspInit+0x7c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d128      	bne.n	8004998 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 800494c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 8004960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 8004964:	f043 0320 	orr.w	r3, r3, #32
 8004968:	6313      	str	r3, [r2, #48]	; 0x30
 800496a:	4b0e      	ldr	r3, [pc, #56]	; (80049a4 <HAL_SPI_MspInit+0x80>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8004976:	f44f 6318 	mov.w	r3, #2432	; 0x980
 800497a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497c:	2302      	movs	r3, #2
 800497e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004984:	2303      	movs	r3, #3
 8004986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004988:	2305      	movs	r3, #5
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800498c:	f107 0314 	add.w	r3, r7, #20
 8004990:	4619      	mov	r1, r3
 8004992:	4805      	ldr	r0, [pc, #20]	; (80049a8 <HAL_SPI_MspInit+0x84>)
 8004994:	f001 fbb0 	bl	80060f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004998:	bf00      	nop
 800499a:	3728      	adds	r7, #40	; 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	40015000 	.word	0x40015000
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40021400 	.word	0x40021400

080049ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1f      	ldr	r2, [pc, #124]	; (8004a38 <HAL_TIM_Base_MspInit+0x8c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d114      	bne.n	80049e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049be:	4b1f      	ldr	r3, [pc, #124]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a1e      	ldr	r2, [pc, #120]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	2019      	movs	r0, #25
 80049dc:	f000 ffdd 	bl	800599a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80049e0:	2019      	movs	r0, #25
 80049e2:	f000 fff6 	bl	80059d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049e6:	e022      	b.n	8004a2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d10c      	bne.n	8004a0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a11      	ldr	r2, [pc, #68]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 80049f8:	f043 0301 	orr.w	r3, r3, #1
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	693b      	ldr	r3, [r7, #16]
}
 8004a0a:	e010      	b.n	8004a2e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0b      	ldr	r2, [pc, #44]	; (8004a40 <HAL_TIM_Base_MspInit+0x94>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d10b      	bne.n	8004a2e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 8004a1c:	f043 0304 	orr.w	r3, r3, #4
 8004a20:	6413      	str	r3, [r2, #64]	; 0x40
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_TIM_Base_MspInit+0x90>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f003 0304 	and.w	r3, r3, #4
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40000800 	.word	0x40000800

08004a44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a4c:	f107 0314 	add.w	r3, r7, #20
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	605a      	str	r2, [r3, #4]
 8004a56:	609a      	str	r2, [r3, #8]
 8004a58:	60da      	str	r2, [r3, #12]
 8004a5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a20      	ldr	r2, [pc, #128]	; (8004ae4 <HAL_TIM_MspPostInit+0xa0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d139      	bne.n	8004ada <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a6c:	f043 0302 	orr.w	r3, r3, #2
 8004a70:	6313      	str	r3, [r2, #48]	; 0x30
 8004a72:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <HAL_TIM_MspPostInit+0xa4>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin|ENW_Pin;
 8004a96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	480e      	ldr	r0, [pc, #56]	; (8004aec <HAL_TIM_MspPostInit+0xa8>)
 8004ab4:	f001 fb20 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 8004ab8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ace:	f107 0314 	add.w	r3, r7, #20
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4806      	ldr	r0, [pc, #24]	; (8004af0 <HAL_TIM_MspPostInit+0xac>)
 8004ad6:	f001 fb0f 	bl	80060f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004ada:	bf00      	nop
 8004adc:	3728      	adds	r7, #40	; 0x28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40010000 	.word	0x40010000
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020000 	.word	0x40020000

08004af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b08a      	sub	sp, #40	; 0x28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 0314 	add.w	r3, r7, #20
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <HAL_UART_MspInit+0x7c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d128      	bne.n	8004b68 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004b16:	4b17      	ldr	r3, [pc, #92]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
 8004b22:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b34:	f043 0308 	orr.w	r3, r3, #8
 8004b38:	6313      	str	r3, [r2, #48]	; 0x30
 8004b3a:	4b0e      	ldr	r3, [pc, #56]	; (8004b74 <HAL_UART_MspInit+0x80>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b50:	2300      	movs	r3, #0
 8004b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b54:	2303      	movs	r3, #3
 8004b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004b58:	2307      	movs	r3, #7
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b5c:	f107 0314 	add.w	r3, r7, #20
 8004b60:	4619      	mov	r1, r3
 8004b62:	4805      	ldr	r0, [pc, #20]	; (8004b78 <HAL_UART_MspInit+0x84>)
 8004b64:	f001 fac8 	bl	80060f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004b68:	bf00      	nop
 8004b6a:	3728      	adds	r7, #40	; 0x28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40004800 	.word	0x40004800
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40020c00 	.word	0x40020c00

08004b7c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b9c:	d134      	bne.n	8004c08 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8004baa:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8004bb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004bc8:	230a      	movs	r3, #10
 8004bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bcc:	f107 0314 	add.w	r3, r7, #20
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4810      	ldr	r0, [pc, #64]	; (8004c14 <HAL_PCD_MspInit+0x98>)
 8004bd4:	f001 fa90 	bl	80060f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	4a0c      	ldr	r2, [pc, #48]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be2:	6353      	str	r3, [r2, #52]	; 0x34
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	4a06      	ldr	r2, [pc, #24]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfc:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <HAL_PCD_MspInit+0x94>)
 8004bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004c08:	bf00      	nop
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40020000 	.word	0x40020000

08004c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004c1c:	e7fe      	b.n	8004c1c <NMI_Handler+0x4>

08004c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c22:	e7fe      	b.n	8004c22 <HardFault_Handler+0x4>

08004c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c28:	e7fe      	b.n	8004c28 <MemManage_Handler+0x4>

08004c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c2e:	e7fe      	b.n	8004c2e <BusFault_Handler+0x4>

08004c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c34:	e7fe      	b.n	8004c34 <UsageFault_Handler+0x4>

08004c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c52:	b480      	push	{r7}
 8004c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c56:	bf00      	nop
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c64:	f000 f958 	bl	8004f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004c70:	4802      	ldr	r0, [pc, #8]	; (8004c7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004c72:	f003 fe1b 	bl	80088ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004c76:	bf00      	nop
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000804 	.word	0x20000804

08004c80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004c84:	4802      	ldr	r0, [pc, #8]	; (8004c90 <DMA2_Stream0_IRQHandler+0x10>)
 8004c86:	f000 ffcd 	bl	8005c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	200007a4 	.word	0x200007a4

08004c94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
	return 1;
 8004c98:	2301      	movs	r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_kill>:

int _kill(int pid, int sig)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004cae:	f006 f8ed 	bl	800ae8c <__errno>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2216      	movs	r2, #22
 8004cb6:	601a      	str	r2, [r3, #0]
	return -1;
 8004cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <_exit>:

void _exit (int status)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ffe7 	bl	8004ca4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cd6:	e7fe      	b.n	8004cd6 <_exit+0x12>

08004cd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e00a      	b.n	8004d00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cea:	f3af 8000 	nop.w
 8004cee:	4601      	mov	r1, r0
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	60ba      	str	r2, [r7, #8]
 8004cf6:	b2ca      	uxtb	r2, r1
 8004cf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbf0      	blt.n	8004cea <_read+0x12>
	}

return len;
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e009      	b.n	8004d38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	60ba      	str	r2, [r7, #8]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fd1d 	bl	800476c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	3301      	adds	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	dbf1      	blt.n	8004d24 <_write+0x12>
	}
	return len;
 8004d40:	687b      	ldr	r3, [r7, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_close>:

int _close(int file)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
	return -1;
 8004d52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d72:	605a      	str	r2, [r3, #4]
	return 0;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <_isatty>:

int _isatty(int file)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
	return 1;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
	return 0;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004dbc:	4a14      	ldr	r2, [pc, #80]	; (8004e10 <_sbrk+0x5c>)
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <_sbrk+0x60>)
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <_sbrk+0x64>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004dd0:	4b11      	ldr	r3, [pc, #68]	; (8004e18 <_sbrk+0x64>)
 8004dd2:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <_sbrk+0x68>)
 8004dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dd6:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <_sbrk+0x64>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d207      	bcs.n	8004df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004de4:	f006 f852 	bl	800ae8c <__errno>
 8004de8:	4603      	mov	r3, r0
 8004dea:	220c      	movs	r2, #12
 8004dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dee:	f04f 33ff 	mov.w	r3, #4294967295
 8004df2:	e009      	b.n	8004e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004df4:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <_sbrk+0x64>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <_sbrk+0x64>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4413      	add	r3, r2
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <_sbrk+0x64>)
 8004e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20040000 	.word	0x20040000
 8004e14:	00000800 	.word	0x00000800
 8004e18:	2000020c 	.word	0x2000020c
 8004e1c:	200008b8 	.word	0x200008b8

08004e20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e24:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <SystemInit+0x28>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <SystemInit+0x28>)
 8004e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <SystemInit+0x28>)
 8004e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e3a:	609a      	str	r2, [r3, #8]
#endif
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e52:	e003      	b.n	8004e5c <LoopCopyDataInit>

08004e54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e5a:	3104      	adds	r1, #4

08004e5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e5c:	480b      	ldr	r0, [pc, #44]	; (8004e8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e64:	d3f6      	bcc.n	8004e54 <CopyDataInit>
  ldr  r2, =_sbss
 8004e66:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e68:	e002      	b.n	8004e70 <LoopFillZerobss>

08004e6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e6c:	f842 3b04 	str.w	r3, [r2], #4

08004e70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e74:	d3f9      	bcc.n	8004e6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e76:	f7ff ffd3 	bl	8004e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e7a:	f006 f80d 	bl	800ae98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e7e:	f7ff f815 	bl	8003eac <main>
  bx  lr    
 8004e82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e84:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8004e88:	0800f70c 	.word	0x0800f70c
  ldr  r0, =_sdata
 8004e8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e90:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8004e94:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8004e98:	200008b4 	.word	0x200008b4

08004e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e9c:	e7fe      	b.n	8004e9c <ADC_IRQHandler>

08004e9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ea2:	2003      	movs	r0, #3
 8004ea4:	f000 fd6e 	bl	8005984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	f000 f805 	bl	8004eb8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004eae:	f7ff fc87 	bl	80047c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ec0:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_InitTick+0x54>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <HAL_InitTick+0x58>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fd89 	bl	80059ee <HAL_SYSTICK_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e00e      	b.n	8004f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d80a      	bhi.n	8004f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eec:	2200      	movs	r2, #0
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	f000 fd51 	bl	800599a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ef8:	4a06      	ldr	r2, [pc, #24]	; (8004f14 <HAL_InitTick+0x5c>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000000 	.word	0x20000000
 8004f10:	20000008 	.word	0x20000008
 8004f14:	20000004 	.word	0x20000004

08004f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <HAL_IncTick+0x20>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_IncTick+0x24>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <HAL_IncTick+0x24>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	20000008 	.word	0x20000008
 8004f3c:	200008a0 	.word	0x200008a0

08004f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  return uwTick;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_GetTick+0x14>)
 8004f46:	681b      	ldr	r3, [r3, #0]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	200008a0 	.word	0x200008a0

08004f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f60:	f7ff ffee 	bl	8004f40 <HAL_GetTick>
 8004f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f70:	d005      	beq.n	8004f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_Delay+0x44>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f7e:	bf00      	nop
 8004f80:	f7ff ffde 	bl	8004f40 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d8f7      	bhi.n	8004f80 <HAL_Delay+0x28>
  {
  }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000008 	.word	0x20000008

08004fa0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e031      	b.n	800501a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7ff fc22 	bl	8004808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	f003 0310 	and.w	r3, r3, #16
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <HAL_ADC_Init+0x84>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa7c 	bl	80054ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	f043 0201 	orr.w	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
 800500a:	e001      	b.n	8005010 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005018:	7bfb      	ldrb	r3, [r7, #15]
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	ffffeefd 	.word	0xffffeefd

08005028 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_ADC_Start_DMA+0x1e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0d4      	b.n	80051f0 <HAL_ADC_Start_DMA+0x1c8>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b01      	cmp	r3, #1
 800505a:	d018      	beq.n	800508e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800506c:	4b62      	ldr	r3, [pc, #392]	; (80051f8 <HAL_ADC_Start_DMA+0x1d0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a62      	ldr	r2, [pc, #392]	; (80051fc <HAL_ADC_Start_DMA+0x1d4>)
 8005072:	fba2 2303 	umull	r2, r3, r2, r3
 8005076:	0c9a      	lsrs	r2, r3, #18
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005080:	e002      	b.n	8005088 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	3b01      	subs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1f9      	bne.n	8005082 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 809c 	bne.w	80051d6 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050a2:	4b57      	ldr	r3, [pc, #348]	; (8005200 <HAL_ADC_Start_DMA+0x1d8>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d8:	d106      	bne.n	80050e8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f023 0206 	bic.w	r2, r3, #6
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
 80050e6:	e002      	b.n	80050ee <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	4a42      	ldr	r2, [pc, #264]	; (8005204 <HAL_ADC_Start_DMA+0x1dc>)
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	4a41      	ldr	r2, [pc, #260]	; (8005208 <HAL_ADC_Start_DMA+0x1e0>)
 8005104:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	4a40      	ldr	r2, [pc, #256]	; (800520c <HAL_ADC_Start_DMA+0x1e4>)
 800510c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005116:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005126:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005136:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	334c      	adds	r3, #76	; 0x4c
 8005142:	4619      	mov	r1, r3
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f000 fd0c 	bl	8005b64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800514c:	4b30      	ldr	r3, [pc, #192]	; (8005210 <HAL_ADC_Start_DMA+0x1e8>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10f      	bne.n	8005178 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d143      	bne.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	e03a      	b.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a25      	ldr	r2, [pc, #148]	; (8005214 <HAL_ADC_Start_DMA+0x1ec>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d10e      	bne.n	80051a0 <HAL_ADC_Start_DMA+0x178>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d107      	bne.n	80051a0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800519e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_ADC_Start_DMA+0x1e8>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d120      	bne.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_ADC_Start_DMA+0x1f0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d11b      	bne.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d114      	bne.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	e00b      	b.n	80051ee <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f043 0210 	orr.w	r2, r3, #16
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e6:	f043 0201 	orr.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000000 	.word	0x20000000
 80051fc:	431bde83 	.word	0x431bde83
 8005200:	fffff8fe 	.word	0xfffff8fe
 8005204:	080056e1 	.word	0x080056e1
 8005208:	0800579b 	.word	0x0800579b
 800520c:	080057b7 	.word	0x080057b7
 8005210:	40012300 	.word	0x40012300
 8005214:	40012000 	.word	0x40012000
 8005218:	40012200 	.word	0x40012200

0800521c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x1c>
 8005270:	2302      	movs	r3, #2
 8005272:	e12a      	b.n	80054ca <HAL_ADC_ConfigChannel+0x272>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b09      	cmp	r3, #9
 8005282:	d93a      	bls.n	80052fa <HAL_ADC_ConfigChannel+0xa2>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528c:	d035      	beq.n	80052fa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68d9      	ldr	r1, [r3, #12]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	3b1e      	subs	r3, #30
 80052a4:	2207      	movs	r2, #7
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43da      	mvns	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	400a      	ands	r2, r1
 80052b2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a87      	ldr	r2, [pc, #540]	; (80054d8 <HAL_ADC_ConfigChannel+0x280>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d10a      	bne.n	80052d4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68d9      	ldr	r1, [r3, #12]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	061a      	lsls	r2, r3, #24
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052d2:	e035      	b.n	8005340 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68d9      	ldr	r1, [r3, #12]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	4618      	mov	r0, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4403      	add	r3, r0
 80052ec:	3b1e      	subs	r3, #30
 80052ee:	409a      	lsls	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052f8:	e022      	b.n	8005340 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6919      	ldr	r1, [r3, #16]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	2207      	movs	r2, #7
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	43da      	mvns	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	400a      	ands	r2, r1
 800531c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6919      	ldr	r1, [r3, #16]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	4618      	mov	r0, r3
 8005330:	4603      	mov	r3, r0
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4403      	add	r3, r0
 8005336:	409a      	lsls	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d824      	bhi.n	8005392 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	3b05      	subs	r3, #5
 800535a:	221f      	movs	r2, #31
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43da      	mvns	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	400a      	ands	r2, r1
 8005368:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4618      	mov	r0, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	3b05      	subs	r3, #5
 8005384:	fa00 f203 	lsl.w	r2, r0, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
 8005390:	e04c      	b.n	800542c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d824      	bhi.n	80053e4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	3b23      	subs	r3, #35	; 0x23
 80053ac:	221f      	movs	r2, #31
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	43da      	mvns	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	400a      	ands	r2, r1
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	4618      	mov	r0, r3
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	3b23      	subs	r3, #35	; 0x23
 80053d6:	fa00 f203 	lsl.w	r2, r0, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	631a      	str	r2, [r3, #48]	; 0x30
 80053e2:	e023      	b.n	800542c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	3b41      	subs	r3, #65	; 0x41
 80053f6:	221f      	movs	r2, #31
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43da      	mvns	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	4618      	mov	r0, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	3b41      	subs	r3, #65	; 0x41
 8005420:	fa00 f203 	lsl.w	r2, r0, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2a      	ldr	r2, [pc, #168]	; (80054dc <HAL_ADC_ConfigChannel+0x284>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10a      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1f4>
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800543e:	d105      	bne.n	800544c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 8005446:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800544a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a22      	ldr	r2, [pc, #136]	; (80054dc <HAL_ADC_ConfigChannel+0x284>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d109      	bne.n	800546a <HAL_ADC_ConfigChannel+0x212>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b12      	cmp	r3, #18
 800545c:	d105      	bne.n	800546a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800545e:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a1f      	ldr	r2, [pc, #124]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 8005464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005468:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a1b      	ldr	r2, [pc, #108]	; (80054dc <HAL_ADC_ConfigChannel+0x284>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d125      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x268>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <HAL_ADC_ConfigChannel+0x280>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <HAL_ADC_ConfigChannel+0x22e>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b11      	cmp	r3, #17
 8005484:	d11c      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005486:	4b16      	ldr	r3, [pc, #88]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	4a15      	ldr	r2, [pc, #84]	; (80054e0 <HAL_ADC_ConfigChannel+0x288>)
 800548c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005490:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a10      	ldr	r2, [pc, #64]	; (80054d8 <HAL_ADC_ConfigChannel+0x280>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d111      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <HAL_ADC_ConfigChannel+0x28c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a11      	ldr	r2, [pc, #68]	; (80054e8 <HAL_ADC_ConfigChannel+0x290>)
 80054a2:	fba2 2303 	umull	r2, r3, r2, r3
 80054a6:	0c9a      	lsrs	r2, r3, #18
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054b2:	e002      	b.n	80054ba <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f9      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3714      	adds	r7, #20
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	10000012 	.word	0x10000012
 80054dc:	40012000 	.word	0x40012000
 80054e0:	40012300 	.word	0x40012300
 80054e4:	20000000 	.word	0x20000000
 80054e8:	431bde83 	.word	0x431bde83

080054ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80054f4:	4b78      	ldr	r3, [pc, #480]	; (80056d8 <ADC_Init+0x1ec>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a77      	ldr	r2, [pc, #476]	; (80056d8 <ADC_Init+0x1ec>)
 80054fa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80054fe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005500:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <ADC_Init+0x1ec>)
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4973      	ldr	r1, [pc, #460]	; (80056d8 <ADC_Init+0x1ec>)
 800550a:	4313      	orrs	r3, r2
 800550c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6859      	ldr	r1, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	021a      	lsls	r2, r3, #8
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689a      	ldr	r2, [r3, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	4a58      	ldr	r2, [pc, #352]	; (80056dc <ADC_Init+0x1f0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800558e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6899      	ldr	r1, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	e00f      	b.n	80055e6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0202 	bic.w	r2, r2, #2
 80055f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	005a      	lsls	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01b      	beq.n	800564c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005622:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	3b01      	subs	r3, #1
 8005640:	035a      	lsls	r2, r3, #13
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	e007      	b.n	800565c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800565a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	3b01      	subs	r3, #1
 8005678:	051a      	lsls	r2, r3, #20
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6899      	ldr	r1, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800569e:	025a      	lsls	r2, r3, #9
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	029a      	lsls	r2, r3, #10
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40012300 	.word	0x40012300
 80056dc:	0f000001 	.word	0x0f000001

080056e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d13c      	bne.n	8005774 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d12b      	bne.n	800576c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	d127      	bne.n	800576c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005722:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005726:	2b00      	cmp	r3, #0
 8005728:	d006      	beq.n	8005738 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005734:	2b00      	cmp	r3, #0
 8005736:	d119      	bne.n	800576c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0220 	bic.w	r2, r2, #32
 8005746:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	f043 0201 	orr.w	r2, r3, #1
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff fd55 	bl	800521c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005772:	e00e      	b.n	8005792 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7ff fd5f 	bl	8005244 <HAL_ADC_ErrorCallback>
}
 8005786:	e004      	b.n	8005792 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
}
 8005792:	bf00      	nop
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b084      	sub	sp, #16
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fd41 	bl	8005230 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057ae:	bf00      	nop
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f7ff fd34 	bl	8005244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057f4:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <__NVIC_SetPriorityGrouping+0x40>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057fa:	68ba      	ldr	r2, [r7, #8]
 80057fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005800:	4013      	ands	r3, r2
 8005802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800580c:	4b06      	ldr	r3, [pc, #24]	; (8005828 <__NVIC_SetPriorityGrouping+0x44>)
 800580e:	4313      	orrs	r3, r2
 8005810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005812:	4a04      	ldr	r2, [pc, #16]	; (8005824 <__NVIC_SetPriorityGrouping+0x40>)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	60d3      	str	r3, [r2, #12]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000ed00 	.word	0xe000ed00
 8005828:	05fa0000 	.word	0x05fa0000

0800582c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <__NVIC_GetPriorityGrouping+0x18>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	0a1b      	lsrs	r3, r3, #8
 8005836:	f003 0307 	and.w	r3, r3, #7
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	e000ed00 	.word	0xe000ed00

08005848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	4603      	mov	r3, r0
 8005850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005856:	2b00      	cmp	r3, #0
 8005858:	db0b      	blt.n	8005872 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	f003 021f 	and.w	r2, r3, #31
 8005860:	4907      	ldr	r1, [pc, #28]	; (8005880 <__NVIC_EnableIRQ+0x38>)
 8005862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	2001      	movs	r0, #1
 800586a:	fa00 f202 	lsl.w	r2, r0, r2
 800586e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	e000e100 	.word	0xe000e100

08005884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005894:	2b00      	cmp	r3, #0
 8005896:	db0a      	blt.n	80058ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	490c      	ldr	r1, [pc, #48]	; (80058d0 <__NVIC_SetPriority+0x4c>)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	0112      	lsls	r2, r2, #4
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	440b      	add	r3, r1
 80058a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058ac:	e00a      	b.n	80058c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4908      	ldr	r1, [pc, #32]	; (80058d4 <__NVIC_SetPriority+0x50>)
 80058b4:	79fb      	ldrb	r3, [r7, #7]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	3b04      	subs	r3, #4
 80058bc:	0112      	lsls	r2, r2, #4
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	440b      	add	r3, r1
 80058c2:	761a      	strb	r2, [r3, #24]
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	e000e100 	.word	0xe000e100
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d8:	b480      	push	{r7}
 80058da:	b089      	sub	sp, #36	; 0x24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f1c3 0307 	rsb	r3, r3, #7
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	bf28      	it	cs
 80058f6:	2304      	movcs	r3, #4
 80058f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	3304      	adds	r3, #4
 80058fe:	2b06      	cmp	r3, #6
 8005900:	d902      	bls.n	8005908 <NVIC_EncodePriority+0x30>
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	3b03      	subs	r3, #3
 8005906:	e000      	b.n	800590a <NVIC_EncodePriority+0x32>
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43da      	mvns	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	401a      	ands	r2, r3
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005920:	f04f 31ff 	mov.w	r1, #4294967295
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	fa01 f303 	lsl.w	r3, r1, r3
 800592a:	43d9      	mvns	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005930:	4313      	orrs	r3, r2
         );
}
 8005932:	4618      	mov	r0, r3
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005950:	d301      	bcc.n	8005956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005952:	2301      	movs	r3, #1
 8005954:	e00f      	b.n	8005976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <SysTick_Config+0x40>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595e:	210f      	movs	r1, #15
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	f7ff ff8e 	bl	8005884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <SysTick_Config+0x40>)
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <SysTick_Config+0x40>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010

08005984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff29 	bl	80057e4 <__NVIC_SetPriorityGrouping>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059ac:	f7ff ff3e 	bl	800582c <__NVIC_GetPriorityGrouping>
 80059b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ff8e 	bl	80058d8 <NVIC_EncodePriority>
 80059bc:	4602      	mov	r2, r0
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff ff5d 	bl	8005884 <__NVIC_SetPriority>
}
 80059ca:	bf00      	nop
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	4603      	mov	r3, r0
 80059da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff ff31 	bl	8005848 <__NVIC_EnableIRQ>
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff ffa2 	bl	8005940 <SysTick_Config>
 80059fc:	4603      	mov	r3, r0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7ff fa94 	bl	8004f40 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e099      	b.n	8005b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a44:	e00f      	b.n	8005a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a46:	f7ff fa7b 	bl	8004f40 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d908      	bls.n	8005a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e078      	b.n	8005b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e8      	bne.n	8005a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <HAL_DMA_Init+0x158>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d107      	bne.n	8005ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0307 	bic.w	r3, r3, #7
 8005ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d117      	bne.n	8005b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fa77 	bl	8006000 <DMA_CheckFifoParam>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d008      	beq.n	8005b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2240      	movs	r2, #64	; 0x40
 8005b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005b26:	2301      	movs	r3, #1
 8005b28:	e016      	b.n	8005b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fa2e 	bl	8005f94 <DMA_CalcBaseAndBitshift>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b40:	223f      	movs	r2, #63	; 0x3f
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	e010803f 	.word	0xe010803f

08005b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b086      	sub	sp, #24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_Start_IT+0x26>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e048      	b.n	8005c1c <HAL_DMA_Start_IT+0xb8>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d137      	bne.n	8005c0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f9c0 	bl	8005f38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bbc:	223f      	movs	r2, #63	; 0x3f
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0216 	orr.w	r2, r2, #22
 8005bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005be2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e005      	b.n	8005c1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c16:	2302      	movs	r3, #2
 8005c18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005c30:	4b92      	ldr	r3, [pc, #584]	; (8005e7c <HAL_DMA_IRQHandler+0x258>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a92      	ldr	r2, [pc, #584]	; (8005e80 <HAL_DMA_IRQHandler+0x25c>)
 8005c36:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3a:	0a9b      	lsrs	r3, r3, #10
 8005c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4e:	2208      	movs	r2, #8
 8005c50:	409a      	lsls	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4013      	ands	r3, r2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d01a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0204 	bic.w	r2, r2, #4
 8005c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c88:	f043 0201 	orr.w	r2, r3, #1
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c94:	2201      	movs	r2, #1
 8005c96:	409a      	lsls	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d012      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	409a      	lsls	r2, r3
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f043 0202 	orr.w	r2, r3, #2
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cca:	2204      	movs	r2, #4
 8005ccc:	409a      	lsls	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d012      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00b      	beq.n	8005cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	2204      	movs	r2, #4
 8005cea:	409a      	lsls	r2, r3
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf4:	f043 0204 	orr.w	r2, r3, #4
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d00:	2210      	movs	r2, #16
 8005d02:	409a      	lsls	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4013      	ands	r3, r2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d043      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d03c      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2210      	movs	r2, #16
 8005d20:	409a      	lsls	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d018      	beq.n	8005d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d024      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	4798      	blx	r3
 8005d52:	e01f      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
 8005d64:	e016      	b.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d107      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0208 	bic.w	r2, r2, #8
 8005d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d98:	2220      	movs	r2, #32
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 808e 	beq.w	8005ec2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8086 	beq.w	8005ec2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dba:	2220      	movs	r2, #32
 8005dbc:	409a      	lsls	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d136      	bne.n	8005e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0216 	bic.w	r2, r2, #22
 8005ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <HAL_DMA_IRQHandler+0x1da>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d007      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0208 	bic.w	r2, r2, #8
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	223f      	movs	r2, #63	; 0x3f
 8005e14:	409a      	lsls	r2, r3
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d07d      	beq.n	8005f2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
        }
        return;
 8005e3a:	e078      	b.n	8005f2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01c      	beq.n	8005e84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d108      	bne.n	8005e6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d030      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	4798      	blx	r3
 8005e68:	e02b      	b.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d027      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
 8005e7a:	e022      	b.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
 8005e7c:	20000000 	.word	0x20000000
 8005e80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10f      	bne.n	8005eb2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0210 	bic.w	r2, r2, #16
 8005ea0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d032      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d022      	beq.n	8005f1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2205      	movs	r2, #5
 8005eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0201 	bic.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d307      	bcc.n	8005f0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1f2      	bne.n	8005eee <HAL_DMA_IRQHandler+0x2ca>
 8005f08:	e000      	b.n	8005f0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005f0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
 8005f2c:	e000      	b.n	8005f30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005f2e:	bf00      	nop
    }
  }
}
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop

08005f38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	2b40      	cmp	r3, #64	; 0x40
 8005f64:	d108      	bne.n	8005f78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005f76:	e007      	b.n	8005f88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	60da      	str	r2, [r3, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	3b10      	subs	r3, #16
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <DMA_CalcBaseAndBitshift+0x60>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	091b      	lsrs	r3, r3, #4
 8005fac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005fae:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <DMA_CalcBaseAndBitshift+0x64>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	d908      	bls.n	8005fd4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4b0c      	ldr	r3, [pc, #48]	; (8005ffc <DMA_CalcBaseAndBitshift+0x68>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	659a      	str	r2, [r3, #88]	; 0x58
 8005fd2:	e006      	b.n	8005fe2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <DMA_CalcBaseAndBitshift+0x68>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	aaaaaaab 	.word	0xaaaaaaab
 8005ff8:	0800eb04 	.word	0x0800eb04
 8005ffc:	fffffc00 	.word	0xfffffc00

08006000 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11f      	bne.n	800605a <DMA_CheckFifoParam+0x5a>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b03      	cmp	r3, #3
 800601e:	d856      	bhi.n	80060ce <DMA_CheckFifoParam+0xce>
 8006020:	a201      	add	r2, pc, #4	; (adr r2, 8006028 <DMA_CheckFifoParam+0x28>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006039 	.word	0x08006039
 800602c:	0800604b 	.word	0x0800604b
 8006030:	08006039 	.word	0x08006039
 8006034:	080060cf 	.word	0x080060cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d046      	beq.n	80060d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006048:	e043      	b.n	80060d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800604e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006052:	d140      	bne.n	80060d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006058:	e03d      	b.n	80060d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006062:	d121      	bne.n	80060a8 <DMA_CheckFifoParam+0xa8>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b03      	cmp	r3, #3
 8006068:	d837      	bhi.n	80060da <DMA_CheckFifoParam+0xda>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <DMA_CheckFifoParam+0x70>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006081 	.word	0x08006081
 8006074:	08006087 	.word	0x08006087
 8006078:	08006081 	.word	0x08006081
 800607c:	08006099 	.word	0x08006099
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e030      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d025      	beq.n	80060de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006096:	e022      	b.n	80060de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80060a0:	d11f      	bne.n	80060e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060a6:	e01c      	b.n	80060e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d903      	bls.n	80060b6 <DMA_CheckFifoParam+0xb6>
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d003      	beq.n	80060bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80060b4:	e018      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	73fb      	strb	r3, [r7, #15]
      break;
 80060ba:	e015      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00e      	beq.n	80060e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	73fb      	strb	r3, [r7, #15]
      break;
 80060cc:	e00b      	b.n	80060e6 <DMA_CheckFifoParam+0xe6>
      break;
 80060ce:	bf00      	nop
 80060d0:	e00a      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;
 80060d2:	bf00      	nop
 80060d4:	e008      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;
 80060d6:	bf00      	nop
 80060d8:	e006      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;
 80060da:	bf00      	nop
 80060dc:	e004      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <DMA_CheckFifoParam+0xe8>
      break;
 80060e6:	bf00      	nop
    }
  } 
  
  return status; 
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop

080060f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b089      	sub	sp, #36	; 0x24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800610a:	2300      	movs	r3, #0
 800610c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	e169      	b.n	80063ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006118:	2201      	movs	r2, #1
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4013      	ands	r3, r2
 800612a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	f040 8158 	bne.w	80063e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d00b      	beq.n	8006156 <HAL_GPIO_Init+0x5e>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d007      	beq.n	8006156 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800614a:	2b11      	cmp	r3, #17
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	2b12      	cmp	r3, #18
 8006154:	d130      	bne.n	80061b8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	2203      	movs	r2, #3
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	43db      	mvns	r3, r3
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	4013      	ands	r3, r2
 800616c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800618c:	2201      	movs	r2, #1
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	fa02 f303 	lsl.w	r3, r2, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4013      	ands	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	091b      	lsrs	r3, r3, #4
 80061a2:	f003 0201 	and.w	r2, r3, #1
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	2203      	movs	r2, #3
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	fa02 f303 	lsl.w	r3, r2, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4313      	orrs	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d003      	beq.n	80061f8 <HAL_GPIO_Init+0x100>
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b12      	cmp	r3, #18
 80061f6:	d123      	bne.n	8006240 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	08da      	lsrs	r2, r3, #3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3208      	adds	r2, #8
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	220f      	movs	r2, #15
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	691a      	ldr	r2, [r3, #16]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	fa02 f303 	lsl.w	r3, r2, r3
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	08da      	lsrs	r2, r3, #3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3208      	adds	r2, #8
 800623a:	69b9      	ldr	r1, [r7, #24]
 800623c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	2203      	movs	r2, #3
 800624c:	fa02 f303 	lsl.w	r3, r2, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4013      	ands	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 0203 	and.w	r2, r3, #3
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4313      	orrs	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 80b2 	beq.w	80063e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006282:	4b60      	ldr	r3, [pc, #384]	; (8006404 <HAL_GPIO_Init+0x30c>)
 8006284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006286:	4a5f      	ldr	r2, [pc, #380]	; (8006404 <HAL_GPIO_Init+0x30c>)
 8006288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800628c:	6453      	str	r3, [r2, #68]	; 0x44
 800628e:	4b5d      	ldr	r3, [pc, #372]	; (8006404 <HAL_GPIO_Init+0x30c>)
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800629a:	4a5b      	ldr	r2, [pc, #364]	; (8006408 <HAL_GPIO_Init+0x310>)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	089b      	lsrs	r3, r3, #2
 80062a0:	3302      	adds	r3, #2
 80062a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	220f      	movs	r2, #15
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a52      	ldr	r2, [pc, #328]	; (800640c <HAL_GPIO_Init+0x314>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02b      	beq.n	800631e <HAL_GPIO_Init+0x226>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a51      	ldr	r2, [pc, #324]	; (8006410 <HAL_GPIO_Init+0x318>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d025      	beq.n	800631a <HAL_GPIO_Init+0x222>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a50      	ldr	r2, [pc, #320]	; (8006414 <HAL_GPIO_Init+0x31c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01f      	beq.n	8006316 <HAL_GPIO_Init+0x21e>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a4f      	ldr	r2, [pc, #316]	; (8006418 <HAL_GPIO_Init+0x320>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d019      	beq.n	8006312 <HAL_GPIO_Init+0x21a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a4e      	ldr	r2, [pc, #312]	; (800641c <HAL_GPIO_Init+0x324>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_GPIO_Init+0x216>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a4d      	ldr	r2, [pc, #308]	; (8006420 <HAL_GPIO_Init+0x328>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00d      	beq.n	800630a <HAL_GPIO_Init+0x212>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a4c      	ldr	r2, [pc, #304]	; (8006424 <HAL_GPIO_Init+0x32c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d007      	beq.n	8006306 <HAL_GPIO_Init+0x20e>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a4b      	ldr	r2, [pc, #300]	; (8006428 <HAL_GPIO_Init+0x330>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_GPIO_Init+0x20a>
 80062fe:	2307      	movs	r3, #7
 8006300:	e00e      	b.n	8006320 <HAL_GPIO_Init+0x228>
 8006302:	2308      	movs	r3, #8
 8006304:	e00c      	b.n	8006320 <HAL_GPIO_Init+0x228>
 8006306:	2306      	movs	r3, #6
 8006308:	e00a      	b.n	8006320 <HAL_GPIO_Init+0x228>
 800630a:	2305      	movs	r3, #5
 800630c:	e008      	b.n	8006320 <HAL_GPIO_Init+0x228>
 800630e:	2304      	movs	r3, #4
 8006310:	e006      	b.n	8006320 <HAL_GPIO_Init+0x228>
 8006312:	2303      	movs	r3, #3
 8006314:	e004      	b.n	8006320 <HAL_GPIO_Init+0x228>
 8006316:	2302      	movs	r3, #2
 8006318:	e002      	b.n	8006320 <HAL_GPIO_Init+0x228>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <HAL_GPIO_Init+0x228>
 800631e:	2300      	movs	r3, #0
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	f002 0203 	and.w	r2, r2, #3
 8006326:	0092      	lsls	r2, r2, #2
 8006328:	4093      	lsls	r3, r2
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006330:	4935      	ldr	r1, [pc, #212]	; (8006408 <HAL_GPIO_Init+0x310>)
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	089b      	lsrs	r3, r3, #2
 8006336:	3302      	adds	r3, #2
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_GPIO_Init+0x334>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	43db      	mvns	r3, r3
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	4013      	ands	r3, r2
 800634c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800635a:	69ba      	ldr	r2, [r7, #24]
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006362:	4a32      	ldr	r2, [pc, #200]	; (800642c <HAL_GPIO_Init+0x334>)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006368:	4b30      	ldr	r3, [pc, #192]	; (800642c <HAL_GPIO_Init+0x334>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800638c:	4a27      	ldr	r2, [pc, #156]	; (800642c <HAL_GPIO_Init+0x334>)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006392:	4b26      	ldr	r3, [pc, #152]	; (800642c <HAL_GPIO_Init+0x334>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	43db      	mvns	r3, r3
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	4013      	ands	r3, r2
 80063a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063b6:	4a1d      	ldr	r2, [pc, #116]	; (800642c <HAL_GPIO_Init+0x334>)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_GPIO_Init+0x334>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	4013      	ands	r3, r2
 80063ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063e0:	4a12      	ldr	r2, [pc, #72]	; (800642c <HAL_GPIO_Init+0x334>)
 80063e2:	69bb      	ldr	r3, [r7, #24]
 80063e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b0f      	cmp	r3, #15
 80063f0:	f67f ae92 	bls.w	8006118 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	3724      	adds	r7, #36	; 0x24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	40013800 	.word	0x40013800
 800640c:	40020000 	.word	0x40020000
 8006410:	40020400 	.word	0x40020400
 8006414:	40020800 	.word	0x40020800
 8006418:	40020c00 	.word	0x40020c00
 800641c:	40021000 	.word	0x40021000
 8006420:	40021400 	.word	0x40021400
 8006424:	40021800 	.word	0x40021800
 8006428:	40021c00 	.word	0x40021c00
 800642c:	40013c00 	.word	0x40013c00

08006430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006440:	787b      	ldrb	r3, [r7, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800644c:	e003      	b.n	8006456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	619a      	str	r2, [r3, #24]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006462:	b480      	push	{r7}
 8006464:	b085      	sub	sp, #20
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006474:	887a      	ldrh	r2, [r7, #2]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4013      	ands	r3, r2
 800647a:	041a      	lsls	r2, r3, #16
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	43d9      	mvns	r1, r3
 8006480:	887b      	ldrh	r3, [r7, #2]
 8006482:	400b      	ands	r3, r1
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	619a      	str	r2, [r3, #24]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006496:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006498:	b08f      	sub	sp, #60	; 0x3c
 800649a:	af0a      	add	r7, sp, #40	; 0x28
 800649c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e116      	b.n	80066d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7fe fb5a 	bl	8004b7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2203      	movs	r2, #3
 80064cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f004 f908 	bl	800a6fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	687e      	ldr	r6, [r7, #4]
 80064f4:	466d      	mov	r5, sp
 80064f6:	f106 0410 	add.w	r4, r6, #16
 80064fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006506:	e885 0003 	stmia.w	r5, {r0, r1}
 800650a:	1d33      	adds	r3, r6, #4
 800650c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800650e:	6838      	ldr	r0, [r7, #0]
 8006510:	f004 f896 	bl	800a640 <USB_CoreInit>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d005      	beq.n	8006526 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e0d7      	b.n	80066d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f004 f8f6 	bl	800a71e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
 8006536:	e04a      	b.n	80065ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	4613      	mov	r3, r2
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	1a9b      	subs	r3, r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	440b      	add	r3, r1
 8006546:	333d      	adds	r3, #61	; 0x3d
 8006548:	2201      	movs	r2, #1
 800654a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	1a9b      	subs	r3, r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	333c      	adds	r3, #60	; 0x3c
 800655c:	7bfa      	ldrb	r2, [r7, #15]
 800655e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006560:	7bfa      	ldrb	r2, [r7, #15]
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	b298      	uxth	r0, r3
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3342      	adds	r3, #66	; 0x42
 8006574:	4602      	mov	r2, r0
 8006576:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	1a9b      	subs	r3, r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	440b      	add	r3, r1
 8006586:	333f      	adds	r3, #63	; 0x3f
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800658c:	7bfa      	ldrb	r2, [r7, #15]
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4613      	mov	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	3344      	adds	r3, #68	; 0x44
 800659c:	2200      	movs	r2, #0
 800659e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065a0:	7bfa      	ldrb	r2, [r7, #15]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	3348      	adds	r3, #72	; 0x48
 80065b0:	2200      	movs	r2, #0
 80065b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065b4:	7bfa      	ldrb	r2, [r7, #15]
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	440b      	add	r3, r1
 80065c2:	3350      	adds	r3, #80	; 0x50
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	3301      	adds	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	7bfa      	ldrb	r2, [r7, #15]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d3af      	bcc.n	8006538 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
 80065dc:	e044      	b.n	8006668 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065de:	7bfa      	ldrb	r2, [r7, #15]
 80065e0:	6879      	ldr	r1, [r7, #4]
 80065e2:	4613      	mov	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065f4:	7bfa      	ldrb	r2, [r7, #15]
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	4613      	mov	r3, r2
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	1a9b      	subs	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	440b      	add	r3, r1
 8006602:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006606:	7bfa      	ldrb	r2, [r7, #15]
 8006608:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	1a9b      	subs	r3, r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006620:	7bfa      	ldrb	r2, [r7, #15]
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	4613      	mov	r3, r2
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006632:	2200      	movs	r2, #0
 8006634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006636:	7bfa      	ldrb	r2, [r7, #15]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800664c:	7bfa      	ldrb	r2, [r7, #15]
 800664e:	6879      	ldr	r1, [r7, #4]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800665e:	2200      	movs	r2, #0
 8006660:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	3301      	adds	r3, #1
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	7bfa      	ldrb	r2, [r7, #15]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	429a      	cmp	r2, r3
 8006670:	d3b5      	bcc.n	80065de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	603b      	str	r3, [r7, #0]
 8006678:	687e      	ldr	r6, [r7, #4]
 800667a:	466d      	mov	r5, sp
 800667c:	f106 0410 	add.w	r4, r6, #16
 8006680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800668c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006690:	1d33      	adds	r3, r6, #4
 8006692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006694:	6838      	ldr	r0, [r7, #0]
 8006696:	f004 f86d 	bl	800a774 <USB_DevInit>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2202      	movs	r2, #2
 80066a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e014      	b.n	80066d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d102      	bne.n	80066ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f80b 	bl	80066e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f004 fa1f 	bl	800ab12 <USB_DevDisconnect>

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080066e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_PCDEx_ActivateLPM+0x44>)
 8006710:	4313      	orrs	r3, r2
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	10000003 	.word	0x10000003

08006728 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800672c:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a04      	ldr	r2, [pc, #16]	; (8006744 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40007000 	.word	0x40007000

08006748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006752:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675c:	6413      	str	r3, [r2, #64]	; 0x40
 800675e:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006766:	603b      	str	r3, [r7, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800676a:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006774:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006776:	f7fe fbe3 	bl	8004f40 <HAL_GetTick>
 800677a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800677c:	e009      	b.n	8006792 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800677e:	f7fe fbdf 	bl	8004f40 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800678c:	d901      	bls.n	8006792 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e022      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006792:	4b14      	ldr	r3, [pc, #80]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679e:	d1ee      	bne.n	800677e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067ac:	f7fe fbc8 	bl	8004f40 <HAL_GetTick>
 80067b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067b2:	e009      	b.n	80067c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067b4:	f7fe fbc4 	bl	8004f40 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c2:	d901      	bls.n	80067c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e007      	b.n	80067d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067d4:	d1ee      	bne.n	80067b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40007000 	.word	0x40007000

080067e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e291      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8087 	beq.w	800691a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800680c:	4b96      	ldr	r3, [pc, #600]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 030c 	and.w	r3, r3, #12
 8006814:	2b04      	cmp	r3, #4
 8006816:	d00c      	beq.n	8006832 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006818:	4b93      	ldr	r3, [pc, #588]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f003 030c 	and.w	r3, r3, #12
 8006820:	2b08      	cmp	r3, #8
 8006822:	d112      	bne.n	800684a <HAL_RCC_OscConfig+0x62>
 8006824:	4b90      	ldr	r3, [pc, #576]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800682c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006830:	d10b      	bne.n	800684a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006832:	4b8d      	ldr	r3, [pc, #564]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d06c      	beq.n	8006918 <HAL_RCC_OscConfig+0x130>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d168      	bne.n	8006918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e26b      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006852:	d106      	bne.n	8006862 <HAL_RCC_OscConfig+0x7a>
 8006854:	4b84      	ldr	r3, [pc, #528]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a83      	ldr	r2, [pc, #524]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800685a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	e02e      	b.n	80068c0 <HAL_RCC_OscConfig+0xd8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10c      	bne.n	8006884 <HAL_RCC_OscConfig+0x9c>
 800686a:	4b7f      	ldr	r3, [pc, #508]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a7e      	ldr	r2, [pc, #504]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	4b7c      	ldr	r3, [pc, #496]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7b      	ldr	r2, [pc, #492]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800687c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e01d      	b.n	80068c0 <HAL_RCC_OscConfig+0xd8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0xc0>
 800688e:	4b76      	ldr	r3, [pc, #472]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a75      	ldr	r2, [pc, #468]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b73      	ldr	r3, [pc, #460]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a72      	ldr	r2, [pc, #456]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e00b      	b.n	80068c0 <HAL_RCC_OscConfig+0xd8>
 80068a8:	4b6f      	ldr	r3, [pc, #444]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a6e      	ldr	r2, [pc, #440]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	4b6c      	ldr	r3, [pc, #432]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6b      	ldr	r2, [pc, #428]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d013      	beq.n	80068f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c8:	f7fe fb3a 	bl	8004f40 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d0:	f7fe fb36 	bl	8004f40 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b64      	cmp	r3, #100	; 0x64
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e21f      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b61      	ldr	r3, [pc, #388]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0xe8>
 80068ee:	e014      	b.n	800691a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fe fb26 	bl	8004f40 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f8:	f7fe fb22 	bl	8004f40 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b64      	cmp	r3, #100	; 0x64
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e20b      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	4b57      	ldr	r3, [pc, #348]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f0      	bne.n	80068f8 <HAL_RCC_OscConfig+0x110>
 8006916:	e000      	b.n	800691a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d069      	beq.n	80069fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006926:	4b50      	ldr	r3, [pc, #320]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006932:	4b4d      	ldr	r3, [pc, #308]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
 800693a:	2b08      	cmp	r3, #8
 800693c:	d11c      	bne.n	8006978 <HAL_RCC_OscConfig+0x190>
 800693e:	4b4a      	ldr	r3, [pc, #296]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	4b47      	ldr	r3, [pc, #284]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_RCC_OscConfig+0x17a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e1df      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006962:	4b41      	ldr	r3, [pc, #260]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	493d      	ldr	r1, [pc, #244]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006976:	e040      	b.n	80069fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d023      	beq.n	80069c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006980:	4b39      	ldr	r3, [pc, #228]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a38      	ldr	r2, [pc, #224]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fe fad8 	bl	8004f40 <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fe fad4 	bl	8004f40 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e1bd      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a6:	4b30      	ldr	r3, [pc, #192]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b2:	4b2d      	ldr	r3, [pc, #180]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	4929      	ldr	r1, [pc, #164]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]
 80069c6:	e018      	b.n	80069fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a26      	ldr	r2, [pc, #152]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069ce:	f023 0301 	bic.w	r3, r3, #1
 80069d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fe fab4 	bl	8004f40 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069dc:	f7fe fab0 	bl	8004f40 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e199      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ee:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d038      	beq.n	8006a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d019      	beq.n	8006a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a0e:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a12:	4a15      	ldr	r2, [pc, #84]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006a14:	f043 0301 	orr.w	r3, r3, #1
 8006a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1a:	f7fe fa91 	bl	8004f40 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a20:	e008      	b.n	8006a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a22:	f7fe fa8d 	bl	8004f40 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d901      	bls.n	8006a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e176      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0f0      	beq.n	8006a22 <HAL_RCC_OscConfig+0x23a>
 8006a40:	e01a      	b.n	8006a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	4a08      	ldr	r2, [pc, #32]	; (8006a68 <HAL_RCC_OscConfig+0x280>)
 8006a48:	f023 0301 	bic.w	r3, r3, #1
 8006a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4e:	f7fe fa77 	bl	8004f40 <HAL_GetTick>
 8006a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a54:	e00a      	b.n	8006a6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a56:	f7fe fa73 	bl	8004f40 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d903      	bls.n	8006a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e15c      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
 8006a68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a6c:	4b91      	ldr	r3, [pc, #580]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1ee      	bne.n	8006a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 80a4 	beq.w	8006bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a86:	4b8b      	ldr	r3, [pc, #556]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10d      	bne.n	8006aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a92:	4b88      	ldr	r3, [pc, #544]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4a87      	ldr	r2, [pc, #540]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9e:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	60bb      	str	r3, [r7, #8]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aae:	4b82      	ldr	r3, [pc, #520]	; (8006cb8 <HAL_RCC_OscConfig+0x4d0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d118      	bne.n	8006aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006aba:	4b7f      	ldr	r3, [pc, #508]	; (8006cb8 <HAL_RCC_OscConfig+0x4d0>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a7e      	ldr	r2, [pc, #504]	; (8006cb8 <HAL_RCC_OscConfig+0x4d0>)
 8006ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ac6:	f7fe fa3b 	bl	8004f40 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ace:	f7fe fa37 	bl	8004f40 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b64      	cmp	r3, #100	; 0x64
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e120      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ae0:	4b75      	ldr	r3, [pc, #468]	; (8006cb8 <HAL_RCC_OscConfig+0x4d0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d106      	bne.n	8006b02 <HAL_RCC_OscConfig+0x31a>
 8006af4:	4b6f      	ldr	r3, [pc, #444]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af8:	4a6e      	ldr	r2, [pc, #440]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6713      	str	r3, [r2, #112]	; 0x70
 8006b00:	e02d      	b.n	8006b5e <HAL_RCC_OscConfig+0x376>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10c      	bne.n	8006b24 <HAL_RCC_OscConfig+0x33c>
 8006b0a:	4b6a      	ldr	r3, [pc, #424]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	4a69      	ldr	r2, [pc, #420]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	6713      	str	r3, [r2, #112]	; 0x70
 8006b16:	4b67      	ldr	r3, [pc, #412]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1a:	4a66      	ldr	r2, [pc, #408]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b1c:	f023 0304 	bic.w	r3, r3, #4
 8006b20:	6713      	str	r3, [r2, #112]	; 0x70
 8006b22:	e01c      	b.n	8006b5e <HAL_RCC_OscConfig+0x376>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	d10c      	bne.n	8006b46 <HAL_RCC_OscConfig+0x35e>
 8006b2c:	4b61      	ldr	r3, [pc, #388]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b30:	4a60      	ldr	r2, [pc, #384]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b32:	f043 0304 	orr.w	r3, r3, #4
 8006b36:	6713      	str	r3, [r2, #112]	; 0x70
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3c:	4a5d      	ldr	r2, [pc, #372]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	6713      	str	r3, [r2, #112]	; 0x70
 8006b44:	e00b      	b.n	8006b5e <HAL_RCC_OscConfig+0x376>
 8006b46:	4b5b      	ldr	r3, [pc, #364]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	4a5a      	ldr	r2, [pc, #360]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70
 8006b52:	4b58      	ldr	r3, [pc, #352]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4a57      	ldr	r2, [pc, #348]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d015      	beq.n	8006b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fe f9eb 	bl	8004f40 <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7fe f9e7 	bl	8004f40 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e0ce      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b84:	4b4b      	ldr	r3, [pc, #300]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0ee      	beq.n	8006b6e <HAL_RCC_OscConfig+0x386>
 8006b90:	e014      	b.n	8006bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b92:	f7fe f9d5 	bl	8004f40 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b98:	e00a      	b.n	8006bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9a:	f7fe f9d1 	bl	8004f40 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e0b8      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bb0:	4b40      	ldr	r3, [pc, #256]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1ee      	bne.n	8006b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d105      	bne.n	8006bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bc2:	4b3c      	ldr	r3, [pc, #240]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	4a3b      	ldr	r2, [pc, #236]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 80a4 	beq.w	8006d20 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bd8:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 030c 	and.w	r3, r3, #12
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d06b      	beq.n	8006cbc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d149      	bne.n	8006c80 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bec:	4b31      	ldr	r3, [pc, #196]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a30      	ldr	r2, [pc, #192]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf8:	f7fe f9a2 	bl	8004f40 <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c00:	f7fe f99e 	bl	8004f40 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e087      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c12:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1f0      	bne.n	8006c00 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	019b      	lsls	r3, r3, #6
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	085b      	lsrs	r3, r3, #1
 8006c36:	3b01      	subs	r3, #1
 8006c38:	041b      	lsls	r3, r3, #16
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	4313      	orrs	r3, r2
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c4a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c4c:	4b19      	ldr	r3, [pc, #100]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fe f972 	bl	8004f40 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c60:	f7fe f96e 	bl	8004f40 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e057      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x478>
 8006c7e:	e04f      	b.n	8006d20 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c80:	4b0c      	ldr	r3, [pc, #48]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0b      	ldr	r2, [pc, #44]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8c:	f7fe f958 	bl	8004f40 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c94:	f7fe f954 	bl	8004f40 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e03d      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ca6:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1f0      	bne.n	8006c94 <HAL_RCC_OscConfig+0x4ac>
 8006cb2:	e035      	b.n	8006d20 <HAL_RCC_OscConfig+0x538>
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006cbc:	4b1b      	ldr	r3, [pc, #108]	; (8006d2c <HAL_RCC_OscConfig+0x544>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d028      	beq.n	8006d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d121      	bne.n	8006d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d11a      	bne.n	8006d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006cec:	4013      	ands	r3, r2
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006cf2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d111      	bne.n	8006d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	3b01      	subs	r3, #1
 8006d06:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d16:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	40023800 	.word	0x40023800

08006d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e0d0      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d48:	4b6a      	ldr	r3, [pc, #424]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	683a      	ldr	r2, [r7, #0]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d910      	bls.n	8006d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d56:	4b67      	ldr	r3, [pc, #412]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f023 020f 	bic.w	r2, r3, #15
 8006d5e:	4965      	ldr	r1, [pc, #404]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d66:	4b63      	ldr	r3, [pc, #396]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d001      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e0b8      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d020      	beq.n	8006dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d90:	4b59      	ldr	r3, [pc, #356]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a58      	ldr	r2, [pc, #352]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0308 	and.w	r3, r3, #8
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006da8:	4b53      	ldr	r3, [pc, #332]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a52      	ldr	r2, [pc, #328]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db4:	4b50      	ldr	r3, [pc, #320]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	494d      	ldr	r1, [pc, #308]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d040      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d107      	bne.n	8006dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dda:	4b47      	ldr	r3, [pc, #284]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d115      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e07f      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d107      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df2:	4b41      	ldr	r3, [pc, #260]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d109      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e073      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e02:	4b3d      	ldr	r3, [pc, #244]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e06b      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e12:	4b39      	ldr	r3, [pc, #228]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f023 0203 	bic.w	r2, r3, #3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	4936      	ldr	r1, [pc, #216]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e24:	f7fe f88c 	bl	8004f40 <HAL_GetTick>
 8006e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e2a:	e00a      	b.n	8006e42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e2c:	f7fe f888 	bl	8004f40 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e053      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e42:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 020c 	and.w	r2, r3, #12
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d1eb      	bne.n	8006e2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e54:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d210      	bcs.n	8006e84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e62:	4b24      	ldr	r3, [pc, #144]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f023 020f 	bic.w	r2, r3, #15
 8006e6a:	4922      	ldr	r1, [pc, #136]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e72:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d001      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e032      	b.n	8006eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0304 	and.w	r3, r3, #4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e90:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4916      	ldr	r1, [pc, #88]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	490e      	ldr	r1, [pc, #56]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ec2:	f000 f821 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	490a      	ldr	r1, [pc, #40]	; (8006efc <HAL_RCC_ClockConfig+0x1cc>)
 8006ed4:	5ccb      	ldrb	r3, [r1, r3]
 8006ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eda:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <HAL_RCC_ClockConfig+0x1d0>)
 8006edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ede:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <HAL_RCC_ClockConfig+0x1d4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd ffe8 	bl	8004eb8 <HAL_InitTick>

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	40023c00 	.word	0x40023c00
 8006ef8:	40023800 	.word	0x40023800
 8006efc:	0800eaec 	.word	0x0800eaec
 8006f00:	20000000 	.word	0x20000000
 8006f04:	20000004 	.word	0x20000004

08006f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	607b      	str	r3, [r7, #4]
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f20:	4b67      	ldr	r3, [pc, #412]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d00d      	beq.n	8006f48 <HAL_RCC_GetSysClockFreq+0x40>
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	f200 80bd 	bhi.w	80070ac <HAL_RCC_GetSysClockFreq+0x1a4>
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <HAL_RCC_GetSysClockFreq+0x34>
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d003      	beq.n	8006f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f3a:	e0b7      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f3c:	4b61      	ldr	r3, [pc, #388]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f3e:	60bb      	str	r3, [r7, #8]
      break;
 8006f40:	e0b7      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f42:	4b61      	ldr	r3, [pc, #388]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006f44:	60bb      	str	r3, [r7, #8]
      break;
 8006f46:	e0b4      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f48:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f50:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006f52:	4b5b      	ldr	r3, [pc, #364]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d04d      	beq.n	8006ffa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5e:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	461a      	mov	r2, r3
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f6e:	f04f 0100 	mov.w	r1, #0
 8006f72:	ea02 0800 	and.w	r8, r2, r0
 8006f76:	ea03 0901 	and.w	r9, r3, r1
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	014b      	lsls	r3, r1, #5
 8006f88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f8c:	0142      	lsls	r2, r0, #5
 8006f8e:	4610      	mov	r0, r2
 8006f90:	4619      	mov	r1, r3
 8006f92:	ebb0 0008 	subs.w	r0, r0, r8
 8006f96:	eb61 0109 	sbc.w	r1, r1, r9
 8006f9a:	f04f 0200 	mov.w	r2, #0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	018b      	lsls	r3, r1, #6
 8006fa4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006fa8:	0182      	lsls	r2, r0, #6
 8006faa:	1a12      	subs	r2, r2, r0
 8006fac:	eb63 0301 	sbc.w	r3, r3, r1
 8006fb0:	f04f 0000 	mov.w	r0, #0
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	00d9      	lsls	r1, r3, #3
 8006fba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fbe:	00d0      	lsls	r0, r2, #3
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	eb12 0208 	adds.w	r2, r2, r8
 8006fc8:	eb43 0309 	adc.w	r3, r3, r9
 8006fcc:	f04f 0000 	mov.w	r0, #0
 8006fd0:	f04f 0100 	mov.w	r1, #0
 8006fd4:	0259      	lsls	r1, r3, #9
 8006fd6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006fda:	0250      	lsls	r0, r2, #9
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	4610      	mov	r0, r2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	f7f9 fe04 	bl	8000bf8 <__aeabi_uldivmod>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	e04a      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffa:	4b31      	ldr	r3, [pc, #196]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	461a      	mov	r2, r3
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	ea02 0400 	and.w	r4, r2, r0
 8007012:	ea03 0501 	and.w	r5, r3, r1
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f04f 0200 	mov.w	r2, #0
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	014b      	lsls	r3, r1, #5
 8007024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007028:	0142      	lsls	r2, r0, #5
 800702a:	4610      	mov	r0, r2
 800702c:	4619      	mov	r1, r3
 800702e:	1b00      	subs	r0, r0, r4
 8007030:	eb61 0105 	sbc.w	r1, r1, r5
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	018b      	lsls	r3, r1, #6
 800703e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007042:	0182      	lsls	r2, r0, #6
 8007044:	1a12      	subs	r2, r2, r0
 8007046:	eb63 0301 	sbc.w	r3, r3, r1
 800704a:	f04f 0000 	mov.w	r0, #0
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	00d9      	lsls	r1, r3, #3
 8007054:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007058:	00d0      	lsls	r0, r2, #3
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	1912      	adds	r2, r2, r4
 8007060:	eb45 0303 	adc.w	r3, r5, r3
 8007064:	f04f 0000 	mov.w	r0, #0
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	0299      	lsls	r1, r3, #10
 800706e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007072:	0290      	lsls	r0, r2, #10
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4610      	mov	r0, r2
 800707a:	4619      	mov	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	461a      	mov	r2, r3
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	f7f9 fdb8 	bl	8000bf8 <__aeabi_uldivmod>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4613      	mov	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	3301      	adds	r3, #1
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a8:	60bb      	str	r3, [r7, #8]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070ac:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070ae:	60bb      	str	r3, [r7, #8]
      break;
 80070b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b2:	68bb      	ldr	r3, [r7, #8]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80070be:	bf00      	nop
 80070c0:	40023800 	.word	0x40023800
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	007a1200 	.word	0x007a1200

080070cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000000 	.word	0x20000000

080070e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070e8:	f7ff fff0 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0a9b      	lsrs	r3, r3, #10
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4903      	ldr	r1, [pc, #12]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fa:	5ccb      	ldrb	r3, [r1, r3]
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	0800eafc 	.word	0x0800eafc

0800710c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007110:	f7ff ffdc 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8007114:	4602      	mov	r2, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	0b5b      	lsrs	r3, r3, #13
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007122:	5ccb      	ldrb	r3, [r1, r3]
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	0800eafc 	.word	0x0800eafc

08007134 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b088      	sub	sp, #32
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007148:	2300      	movs	r3, #0
 800714a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d012      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007158:	4b65      	ldr	r3, [pc, #404]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800715e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007162:	6093      	str	r3, [r2, #8]
 8007164:	4b62      	ldr	r3, [pc, #392]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4960      	ldr	r1, [pc, #384]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800717a:	2301      	movs	r3, #1
 800717c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d017      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800718a:	4b59      	ldr	r3, [pc, #356]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800718c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007190:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	4955      	ldr	r1, [pc, #340]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800719a:	4313      	orrs	r3, r2
 800719c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071a8:	d101      	bne.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80071b6:	2301      	movs	r3, #1
 80071b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d017      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071c6:	4b4a      	ldr	r3, [pc, #296]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d4:	4946      	ldr	r1, [pc, #280]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071e4:	d101      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 808b 	beq.w	800731a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007204:	4b3a      	ldr	r3, [pc, #232]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	4a39      	ldr	r2, [pc, #228]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800720a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800720e:	6413      	str	r3, [r2, #64]	; 0x40
 8007210:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800721c:	4b35      	ldr	r3, [pc, #212]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a34      	ldr	r2, [pc, #208]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007226:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007228:	f7fd fe8a 	bl	8004f40 <HAL_GetTick>
 800722c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800722e:	e008      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007230:	f7fd fe86 	bl	8004f40 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b64      	cmp	r3, #100	; 0x64
 800723c:	d901      	bls.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e2bc      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007242:	4b2c      	ldr	r3, [pc, #176]	; (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f0      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800724e:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007256:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d035      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	429a      	cmp	r2, r3
 800726a:	d02e      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800726c:	4b20      	ldr	r3, [pc, #128]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007274:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007276:	4b1e      	ldr	r3, [pc, #120]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800727c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007280:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007282:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007286:	4a1a      	ldr	r2, [pc, #104]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800728c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007294:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d114      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a0:	f7fd fe4e 	bl	8004f40 <HAL_GetTick>
 80072a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072a6:	e00a      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072a8:	f7fd fe4a 	bl	8004f40 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d901      	bls.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e27e      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072be:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0ee      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d6:	d111      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80072d8:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80072e6:	400b      	ands	r3, r1
 80072e8:	4901      	ldr	r1, [pc, #4]	; (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
 80072ee:	e00b      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40007000 	.word	0x40007000
 80072f8:	0ffffcff 	.word	0x0ffffcff
 80072fc:	4ba4      	ldr	r3, [pc, #656]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4aa3      	ldr	r2, [pc, #652]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007302:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007306:	6093      	str	r3, [r2, #8]
 8007308:	4ba1      	ldr	r3, [pc, #644]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800730a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007314:	499e      	ldr	r1, [pc, #632]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007316:	4313      	orrs	r3, r2
 8007318:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0310 	and.w	r3, r3, #16
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007326:	4b9a      	ldr	r3, [pc, #616]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800732c:	4a98      	ldr	r2, [pc, #608]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800732e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007332:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007336:	4b96      	ldr	r3, [pc, #600]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007338:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	4993      	ldr	r1, [pc, #588]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007342:	4313      	orrs	r3, r2
 8007344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00a      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007354:	4b8e      	ldr	r3, [pc, #568]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	498b      	ldr	r1, [pc, #556]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00a      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007376:	4b86      	ldr	r3, [pc, #536]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800737c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007384:	4982      	ldr	r1, [pc, #520]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007398:	4b7d      	ldr	r3, [pc, #500]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800739a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800739e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a6:	497a      	ldr	r1, [pc, #488]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80073ba:	4b75      	ldr	r3, [pc, #468]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c0:	f023 0203 	bic.w	r2, r3, #3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c8:	4971      	ldr	r1, [pc, #452]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80073dc:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e2:	f023 020c 	bic.w	r2, r3, #12
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	4969      	ldr	r1, [pc, #420]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80073fe:	4b64      	ldr	r3, [pc, #400]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	4960      	ldr	r1, [pc, #384]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800740e:	4313      	orrs	r3, r2
 8007410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007420:	4b5b      	ldr	r3, [pc, #364]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800742e:	4958      	ldr	r1, [pc, #352]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007430:	4313      	orrs	r3, r2
 8007432:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00a      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007442:	4b53      	ldr	r3, [pc, #332]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007450:	494f      	ldr	r1, [pc, #316]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007464:	4b4a      	ldr	r3, [pc, #296]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800746a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007472:	4947      	ldr	r1, [pc, #284]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007486:	4b42      	ldr	r3, [pc, #264]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	493e      	ldr	r1, [pc, #248]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80074a8:	4b39      	ldr	r3, [pc, #228]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	4936      	ldr	r1, [pc, #216]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d011      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80074ca:	4b31      	ldr	r3, [pc, #196]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d8:	492d      	ldr	r1, [pc, #180]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074e8:	d101      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074fa:	4b25      	ldr	r3, [pc, #148]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80074fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007500:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007508:	4921      	ldr	r1, [pc, #132]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00a      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800751c:	4b1c      	ldr	r3, [pc, #112]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800751e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007522:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752a:	4919      	ldr	r1, [pc, #100]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800752c:	4313      	orrs	r3, r2
 800752e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800753e:	4b14      	ldr	r3, [pc, #80]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007544:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800754c:	4910      	ldr	r1, [pc, #64]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800754e:	4313      	orrs	r3, r2
 8007550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d006      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 809d 	beq.w	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a08      	ldr	r2, [pc, #32]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800756e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007574:	f7fd fce4 	bl	8004f40 <HAL_GetTick>
 8007578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800757a:	e00b      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800757c:	f7fd fce0 	bl	8004f40 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b64      	cmp	r3, #100	; 0x64
 8007588:	d904      	bls.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e116      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007594:	4b8b      	ldr	r3, [pc, #556]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1ed      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d017      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d113      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80075b4:	4b83      	ldr	r3, [pc, #524]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075ba:	0e1b      	lsrs	r3, r3, #24
 80075bc:	f003 030f 	and.w	r3, r3, #15
 80075c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	019a      	lsls	r2, r3, #6
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	071b      	lsls	r3, r3, #28
 80075d4:	497b      	ldr	r1, [pc, #492]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d004      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075f0:	d00a      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d024      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007606:	d11f      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007608:	4b6e      	ldr	r3, [pc, #440]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800760a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760e:	0f1b      	lsrs	r3, r3, #28
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	019a      	lsls	r2, r3, #6
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	061b      	lsls	r3, r3, #24
 8007622:	431a      	orrs	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	071b      	lsls	r3, r3, #28
 8007628:	4966      	ldr	r1, [pc, #408]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007630:	4b64      	ldr	r3, [pc, #400]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007636:	f023 021f 	bic.w	r2, r3, #31
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	3b01      	subs	r3, #1
 8007640:	4960      	ldr	r1, [pc, #384]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00d      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	019a      	lsls	r2, r3, #6
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	061b      	lsls	r3, r3, #24
 8007660:	431a      	orrs	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	071b      	lsls	r3, r3, #28
 8007668:	4956      	ldr	r1, [pc, #344]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800766a:	4313      	orrs	r3, r2
 800766c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007670:	4b54      	ldr	r3, [pc, #336]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a53      	ldr	r2, [pc, #332]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800767a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800767c:	f7fd fc60 	bl	8004f40 <HAL_GetTick>
 8007680:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007684:	f7fd fc5c 	bl	8004f40 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b64      	cmp	r3, #100	; 0x64
 8007690:	d901      	bls.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e092      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007696:	4b4b      	ldr	r3, [pc, #300]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f0      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	f040 8088 	bne.w	80077ba <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80076aa:	4b46      	ldr	r3, [pc, #280]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a45      	ldr	r2, [pc, #276]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b6:	f7fd fc43 	bl	8004f40 <HAL_GetTick>
 80076ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076bc:	e008      	b.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80076be:	f7fd fc3f 	bl	8004f40 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	2b64      	cmp	r3, #100	; 0x64
 80076ca:	d901      	bls.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e075      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80076d0:	4b3c      	ldr	r3, [pc, #240]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076dc:	d0ef      	beq.n	80076be <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d009      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d024      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d120      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007706:	4b2f      	ldr	r3, [pc, #188]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	019a      	lsls	r2, r3, #6
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	041b      	lsls	r3, r3, #16
 800771e:	431a      	orrs	r2, r3
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	4927      	ldr	r1, [pc, #156]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007734:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	3b01      	subs	r3, #1
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	4920      	ldr	r1, [pc, #128]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d018      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775c:	d113      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007764:	0e1b      	lsrs	r3, r3, #24
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	019a      	lsls	r2, r3, #6
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	041b      	lsls	r3, r3, #16
 8007778:	431a      	orrs	r2, r3
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	061b      	lsls	r3, r3, #24
 800777e:	4911      	ldr	r1, [pc, #68]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800778c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007792:	f7fd fbd5 	bl	8004f40 <HAL_GetTick>
 8007796:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007798:	e008      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800779a:	f7fd fbd1 	bl	8004f40 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b64      	cmp	r3, #100	; 0x64
 80077a6:	d901      	bls.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e007      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077b8:	d1ef      	bne.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40023800 	.word	0x40023800

080077c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e09d      	b.n	8007916 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d108      	bne.n	80077f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077ea:	d009      	beq.n	8007800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	61da      	str	r2, [r3, #28]
 80077f2:	e005      	b.n	8007800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d106      	bne.n	8007820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7fd f882 	bl	8004924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2202      	movs	r2, #2
 8007824:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007836:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007840:	d902      	bls.n	8007848 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	e002      	b.n	800784e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800784c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007856:	d007      	beq.n	8007868 <HAL_SPI_Init+0xa0>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007860:	d002      	beq.n	8007868 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078aa:	ea42 0103 	orr.w	r1, r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 0204 	and.w	r2, r3, #4
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	431a      	orrs	r2, r3
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	431a      	orrs	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80078e4:	ea42 0103 	orr.w	r1, r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b088      	sub	sp, #32
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	603b      	str	r3, [r7, #0]
 800792a:	4613      	mov	r3, r2
 800792c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_SPI_Transmit+0x22>
 800793c:	2302      	movs	r3, #2
 800793e:	e158      	b.n	8007bf2 <HAL_SPI_Transmit+0x2d4>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007948:	f7fd fafa 	bl	8004f40 <HAL_GetTick>
 800794c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b01      	cmp	r3, #1
 800795c:	d002      	beq.n	8007964 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800795e:	2302      	movs	r3, #2
 8007960:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007962:	e13d      	b.n	8007be0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <HAL_SPI_Transmit+0x52>
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007974:	e134      	b.n	8007be0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2203      	movs	r2, #3
 800797a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	88fa      	ldrh	r2, [r7, #6]
 800798e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c0:	d10f      	bne.n	80079e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d007      	beq.n	8007a00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a08:	d94b      	bls.n	8007aa2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <HAL_SPI_Transmit+0xfa>
 8007a12:	8afb      	ldrh	r3, [r7, #22]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d13e      	bne.n	8007a96 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	1c9a      	adds	r2, r3, #2
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	3b01      	subs	r3, #1
 8007a36:	b29a      	uxth	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a3c:	e02b      	b.n	8007a96 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d112      	bne.n	8007a72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	881a      	ldrh	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	1c9a      	adds	r2, r3, #2
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a70:	e011      	b.n	8007a96 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a72:	f7fd fa65 	bl	8004f40 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d803      	bhi.n	8007a8a <HAL_SPI_Transmit+0x16c>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d102      	bne.n	8007a90 <HAL_SPI_Transmit+0x172>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d102      	bne.n	8007a96 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a94:	e0a4      	b.n	8007be0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1ce      	bne.n	8007a3e <HAL_SPI_Transmit+0x120>
 8007aa0:	e07c      	b.n	8007b9c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_SPI_Transmit+0x192>
 8007aaa:	8afb      	ldrh	r3, [r7, #22]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d170      	bne.n	8007b92 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d912      	bls.n	8007ae0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007abe:	881a      	ldrh	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aca:	1c9a      	adds	r2, r3, #2
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b02      	subs	r3, #2
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ade:	e058      	b.n	8007b92 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	330c      	adds	r3, #12
 8007aea:	7812      	ldrb	r2, [r2, #0]
 8007aec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	3b01      	subs	r3, #1
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007b06:	e044      	b.n	8007b92 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d12b      	bne.n	8007b6e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d912      	bls.n	8007b46 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	1c9a      	adds	r2, r3, #2
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	3b02      	subs	r3, #2
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b44:	e025      	b.n	8007b92 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	330c      	adds	r3, #12
 8007b50:	7812      	ldrb	r2, [r2, #0]
 8007b52:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007b6c:	e011      	b.n	8007b92 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b6e:	f7fd f9e7 	bl	8004f40 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d803      	bhi.n	8007b86 <HAL_SPI_Transmit+0x268>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b84:	d102      	bne.n	8007b8c <HAL_SPI_Transmit+0x26e>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b90:	e026      	b.n	8007be0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1b5      	bne.n	8007b08 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fb57 	bl	8008254 <SPI_EndRxTxTransaction>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bba:	2300      	movs	r3, #0
 8007bbc:	613b      	str	r3, [r7, #16]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	77fb      	strb	r3, [r7, #31]
 8007bdc:	e000      	b.n	8007be0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007bde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b08a      	sub	sp, #40	; 0x28
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
 8007c06:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_SPI_TransmitReceive+0x26>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e1fb      	b.n	8008018 <HAL_SPI_TransmitReceive+0x41e>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c28:	f7fd f98a 	bl	8004f40 <HAL_GetTick>
 8007c2c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c34:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007c3c:	887b      	ldrh	r3, [r7, #2]
 8007c3e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007c40:	887b      	ldrh	r3, [r7, #2]
 8007c42:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c44:	7efb      	ldrb	r3, [r7, #27]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d00e      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x6e>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c50:	d106      	bne.n	8007c60 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <HAL_SPI_TransmitReceive+0x66>
 8007c5a:	7efb      	ldrb	r3, [r7, #27]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d003      	beq.n	8007c68 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007c60:	2302      	movs	r3, #2
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c66:	e1cd      	b.n	8008004 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d005      	beq.n	8007c7a <HAL_SPI_TransmitReceive+0x80>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_SPI_TransmitReceive+0x80>
 8007c74:	887b      	ldrh	r3, [r7, #2]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d103      	bne.n	8007c82 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c80:	e1c0      	b.n	8008004 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d003      	beq.n	8007c96 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2205      	movs	r2, #5
 8007c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	887a      	ldrh	r2, [r7, #2]
 8007ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	887a      	ldrh	r2, [r7, #2]
 8007cae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	887a      	ldrh	r2, [r7, #2]
 8007cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	887a      	ldrh	r2, [r7, #2]
 8007cc2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cd8:	d802      	bhi.n	8007ce0 <HAL_SPI_TransmitReceive+0xe6>
 8007cda:	8a3b      	ldrh	r3, [r7, #16]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d908      	bls.n	8007cf2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	e007      	b.n	8007d02 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d00:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0c:	2b40      	cmp	r3, #64	; 0x40
 8007d0e:	d007      	beq.n	8007d20 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d28:	d97c      	bls.n	8007e24 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_SPI_TransmitReceive+0x13e>
 8007d32:	8a7b      	ldrh	r3, [r7, #18]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d169      	bne.n	8007e0c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3c:	881a      	ldrh	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	1c9a      	adds	r2, r3, #2
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	3b01      	subs	r3, #1
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d5c:	e056      	b.n	8007e0c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d11b      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x1aa>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d016      	beq.n	8007da4 <HAL_SPI_TransmitReceive+0x1aa>
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d113      	bne.n	8007da4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	1c9a      	adds	r2, r3, #2
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d11c      	bne.n	8007dec <HAL_SPI_TransmitReceive+0x1f2>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	b292      	uxth	r2, r2
 8007dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	1c9a      	adds	r2, r3, #2
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	3b01      	subs	r3, #1
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007de8:	2301      	movs	r3, #1
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007dec:	f7fd f8a8 	bl	8004f40 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d807      	bhi.n	8007e0c <HAL_SPI_TransmitReceive+0x212>
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e02:	d003      	beq.n	8007e0c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007e0a:	e0fb      	b.n	8008004 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1a3      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x164>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d19d      	bne.n	8007d5e <HAL_SPI_TransmitReceive+0x164>
 8007e22:	e0df      	b.n	8007fe4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_SPI_TransmitReceive+0x23a>
 8007e2c:	8a7b      	ldrh	r3, [r7, #18]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	f040 80cb 	bne.w	8007fca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d912      	bls.n	8007e64 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	881a      	ldrh	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b02      	subs	r3, #2
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e62:	e0b2      	b.n	8007fca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	330c      	adds	r3, #12
 8007e6e:	7812      	ldrb	r2, [r2, #0]
 8007e70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e8a:	e09e      	b.n	8007fca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0302 	and.w	r3, r3, #2
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d134      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x30a>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d02f      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x30a>
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d12c      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d912      	bls.n	8007eda <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	881a      	ldrh	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	1c9a      	adds	r2, r3, #2
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b02      	subs	r3, #2
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ed8:	e012      	b.n	8007f00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d148      	bne.n	8007fa4 <HAL_SPI_TransmitReceive+0x3aa>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d042      	beq.n	8007fa4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d923      	bls.n	8007f72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	b292      	uxth	r2, r2
 8007f36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	1c9a      	adds	r2, r3, #2
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	3b02      	subs	r3, #2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d81f      	bhi.n	8007fa0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f6e:	605a      	str	r2, [r3, #4]
 8007f70:	e016      	b.n	8007fa0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f103 020c 	add.w	r2, r3, #12
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	7812      	ldrb	r2, [r2, #0]
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	1c5a      	adds	r2, r3, #1
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fa4:	f7fc ffcc 	bl	8004f40 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d803      	bhi.n	8007fbc <HAL_SPI_TransmitReceive+0x3c2>
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fba:	d102      	bne.n	8007fc2 <HAL_SPI_TransmitReceive+0x3c8>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007fc8:	e01c      	b.n	8008004 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f47f af5b 	bne.w	8007e8c <HAL_SPI_TransmitReceive+0x292>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f47f af54 	bne.w	8007e8c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 f933 	bl	8008254 <SPI_EndRxTxTransaction>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d006      	beq.n	8008002 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	661a      	str	r2, [r3, #96]	; 0x60
 8008000:	e000      	b.n	8008004 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8008002:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008018:	4618      	mov	r0, r3
 800801a:	3728      	adds	r7, #40	; 0x28
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	4613      	mov	r3, r2
 800802e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008030:	f7fc ff86 	bl	8004f40 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	1a9b      	subs	r3, r3, r2
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4413      	add	r3, r2
 800803e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008040:	f7fc ff7e 	bl	8004f40 <HAL_GetTick>
 8008044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008046:	4b39      	ldr	r3, [pc, #228]	; (800812c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	015b      	lsls	r3, r3, #5
 800804c:	0d1b      	lsrs	r3, r3, #20
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	fb02 f303 	mul.w	r3, r2, r3
 8008054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008056:	e054      	b.n	8008102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d050      	beq.n	8008102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008060:	f7fc ff6e 	bl	8004f40 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	69fa      	ldr	r2, [r7, #28]
 800806c:	429a      	cmp	r2, r3
 800806e:	d902      	bls.n	8008076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d13d      	bne.n	80080f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800808e:	d111      	bne.n	80080b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008098:	d004      	beq.n	80080a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a2:	d107      	bne.n	80080b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080bc:	d10f      	bne.n	80080de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e017      	b.n	8008122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3b01      	subs	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4013      	ands	r3, r2
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	bf0c      	ite	eq
 8008112:	2301      	moveq	r3, #1
 8008114:	2300      	movne	r3, #0
 8008116:	b2db      	uxtb	r3, r3
 8008118:	461a      	mov	r2, r3
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	429a      	cmp	r2, r3
 800811e:	d19b      	bne.n	8008058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3720      	adds	r7, #32
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000000 	.word	0x20000000

08008130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b088      	sub	sp, #32
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800813e:	f7fc feff 	bl	8004f40 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	1a9b      	subs	r3, r3, r2
 8008148:	683a      	ldr	r2, [r7, #0]
 800814a:	4413      	add	r3, r2
 800814c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800814e:	f7fc fef7 	bl	8004f40 <HAL_GetTick>
 8008152:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008154:	4b3e      	ldr	r3, [pc, #248]	; (8008250 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	00da      	lsls	r2, r3, #3
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	0d1b      	lsrs	r3, r3, #20
 8008164:	69fa      	ldr	r2, [r7, #28]
 8008166:	fb02 f303 	mul.w	r3, r2, r3
 800816a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 800816c:	e062      	b.n	8008234 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008174:	d109      	bne.n	800818a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	330c      	adds	r3, #12
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8008188:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008190:	d050      	beq.n	8008234 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008192:	f7fc fed5 	bl	8004f40 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d902      	bls.n	80081a8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d13d      	bne.n	8008224 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081c0:	d111      	bne.n	80081e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ca:	d004      	beq.n	80081d6 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d4:	d107      	bne.n	80081e6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ee:	d10f      	bne.n	8008210 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800820e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e010      	b.n	8008246 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3b01      	subs	r3, #1
 8008232:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4013      	ands	r3, r2
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	429a      	cmp	r2, r3
 8008242:	d194      	bne.n	800816e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000000 	.word	0x20000000

08008254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2200      	movs	r2, #0
 8008268:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff ff5f 	bl	8008130 <SPI_WaitFifoStateUntilTimeout>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d007      	beq.n	8008288 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827c:	f043 0220 	orr.w	r2, r3, #32
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e027      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff fec4 	bl	8008020 <SPI_WaitFlagStateUntilTimeout>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a2:	f043 0220 	orr.w	r2, r3, #32
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e014      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7ff ff38 	bl	8008130 <SPI_WaitFifoStateUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e000      	b.n	80082d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e049      	b.n	8008386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d106      	bne.n	800830c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7fc fb50 	bl	80049ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f000 fe9a 	bl	8009058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d001      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e054      	b.n	8008452 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a26      	ldr	r2, [pc, #152]	; (8008460 <HAL_TIM_Base_Start_IT+0xd0>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d01d      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a22      	ldr	r2, [pc, #136]	; (8008464 <HAL_TIM_Base_Start_IT+0xd4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d018      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a21      	ldr	r2, [pc, #132]	; (8008468 <HAL_TIM_Base_Start_IT+0xd8>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1f      	ldr	r2, [pc, #124]	; (800846c <HAL_TIM_Base_Start_IT+0xdc>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00e      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <HAL_TIM_Base_Start_IT+0xe0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1c      	ldr	r2, [pc, #112]	; (8008474 <HAL_TIM_Base_Start_IT+0xe4>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <HAL_TIM_Base_Start_IT+0xe8>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d115      	bne.n	800843c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689a      	ldr	r2, [r3, #8]
 8008416:	4b19      	ldr	r3, [pc, #100]	; (800847c <HAL_TIM_Base_Start_IT+0xec>)
 8008418:	4013      	ands	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b06      	cmp	r3, #6
 8008420:	d015      	beq.n	800844e <HAL_TIM_Base_Start_IT+0xbe>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008428:	d011      	beq.n	800844e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f042 0201 	orr.w	r2, r2, #1
 8008438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800843a:	e008      	b.n	800844e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0201 	orr.w	r2, r2, #1
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e000      	b.n	8008450 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800844e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3714      	adds	r7, #20
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	40010000 	.word	0x40010000
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40010400 	.word	0x40010400
 8008474:	40014000 	.word	0x40014000
 8008478:	40001800 	.word	0x40001800
 800847c:	00010007 	.word	0x00010007

08008480 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e049      	b.n	8008526 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d106      	bne.n	80084ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f841 	bl	800852e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	4619      	mov	r1, r3
 80084be:	4610      	mov	r0, r2
 80084c0:	f000 fdca 	bl	8009058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800852e:	b480      	push	{r7}
 8008530:	b083      	sub	sp, #12
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e049      	b.n	80085e8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d106      	bne.n	800856e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f841 	bl	80085f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2202      	movs	r2, #2
 8008572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	3304      	adds	r3, #4
 800857e:	4619      	mov	r1, r3
 8008580:	4610      	mov	r0, r2
 8008582:	f000 fd69 	bl	8009058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2201      	movs	r2, #1
 800859a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2201      	movs	r2, #1
 80085b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d109      	bne.n	8008628 <HAL_TIM_PWM_Start+0x24>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b01      	cmp	r3, #1
 800861e:	bf14      	ite	ne
 8008620:	2301      	movne	r3, #1
 8008622:	2300      	moveq	r3, #0
 8008624:	b2db      	uxtb	r3, r3
 8008626:	e03c      	b.n	80086a2 <HAL_TIM_PWM_Start+0x9e>
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2b04      	cmp	r3, #4
 800862c:	d109      	bne.n	8008642 <HAL_TIM_PWM_Start+0x3e>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b01      	cmp	r3, #1
 8008638:	bf14      	ite	ne
 800863a:	2301      	movne	r3, #1
 800863c:	2300      	moveq	r3, #0
 800863e:	b2db      	uxtb	r3, r3
 8008640:	e02f      	b.n	80086a2 <HAL_TIM_PWM_Start+0x9e>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b08      	cmp	r3, #8
 8008646:	d109      	bne.n	800865c <HAL_TIM_PWM_Start+0x58>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b01      	cmp	r3, #1
 8008652:	bf14      	ite	ne
 8008654:	2301      	movne	r3, #1
 8008656:	2300      	moveq	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	e022      	b.n	80086a2 <HAL_TIM_PWM_Start+0x9e>
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b0c      	cmp	r3, #12
 8008660:	d109      	bne.n	8008676 <HAL_TIM_PWM_Start+0x72>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b01      	cmp	r3, #1
 800866c:	bf14      	ite	ne
 800866e:	2301      	movne	r3, #1
 8008670:	2300      	moveq	r3, #0
 8008672:	b2db      	uxtb	r3, r3
 8008674:	e015      	b.n	80086a2 <HAL_TIM_PWM_Start+0x9e>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b10      	cmp	r3, #16
 800867a:	d109      	bne.n	8008690 <HAL_TIM_PWM_Start+0x8c>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b01      	cmp	r3, #1
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	e008      	b.n	80086a2 <HAL_TIM_PWM_Start+0x9e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e092      	b.n	80087d0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <HAL_TIM_PWM_Start+0xb6>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b8:	e023      	b.n	8008702 <HAL_TIM_PWM_Start+0xfe>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d104      	bne.n	80086ca <HAL_TIM_PWM_Start+0xc6>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2202      	movs	r2, #2
 80086c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086c8:	e01b      	b.n	8008702 <HAL_TIM_PWM_Start+0xfe>
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	2b08      	cmp	r3, #8
 80086ce:	d104      	bne.n	80086da <HAL_TIM_PWM_Start+0xd6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d8:	e013      	b.n	8008702 <HAL_TIM_PWM_Start+0xfe>
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b0c      	cmp	r3, #12
 80086de:	d104      	bne.n	80086ea <HAL_TIM_PWM_Start+0xe6>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2202      	movs	r2, #2
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086e8:	e00b      	b.n	8008702 <HAL_TIM_PWM_Start+0xfe>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d104      	bne.n	80086fa <HAL_TIM_PWM_Start+0xf6>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2202      	movs	r2, #2
 80086f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086f8:	e003      	b.n	8008702 <HAL_TIM_PWM_Start+0xfe>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2202      	movs	r2, #2
 80086fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2201      	movs	r2, #1
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f001 f8cc 	bl	80098a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a30      	ldr	r2, [pc, #192]	; (80087d8 <HAL_TIM_PWM_Start+0x1d4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_TIM_PWM_Start+0x120>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a2f      	ldr	r2, [pc, #188]	; (80087dc <HAL_TIM_PWM_Start+0x1d8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d101      	bne.n	8008728 <HAL_TIM_PWM_Start+0x124>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_TIM_PWM_Start+0x126>
 8008728:	2300      	movs	r3, #0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800873c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a25      	ldr	r2, [pc, #148]	; (80087d8 <HAL_TIM_PWM_Start+0x1d4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d022      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008750:	d01d      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a22      	ldr	r2, [pc, #136]	; (80087e0 <HAL_TIM_PWM_Start+0x1dc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d018      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a20      	ldr	r2, [pc, #128]	; (80087e4 <HAL_TIM_PWM_Start+0x1e0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d013      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a1f      	ldr	r2, [pc, #124]	; (80087e8 <HAL_TIM_PWM_Start+0x1e4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00e      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a19      	ldr	r2, [pc, #100]	; (80087dc <HAL_TIM_PWM_Start+0x1d8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d009      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <HAL_TIM_PWM_Start+0x1e8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d004      	beq.n	800878e <HAL_TIM_PWM_Start+0x18a>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a19      	ldr	r2, [pc, #100]	; (80087f0 <HAL_TIM_PWM_Start+0x1ec>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d115      	bne.n	80087ba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	4b17      	ldr	r3, [pc, #92]	; (80087f4 <HAL_TIM_PWM_Start+0x1f0>)
 8008796:	4013      	ands	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b06      	cmp	r3, #6
 800879e:	d015      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1c8>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a6:	d011      	beq.n	80087cc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b8:	e008      	b.n	80087cc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f042 0201 	orr.w	r2, r2, #1
 80087c8:	601a      	str	r2, [r3, #0]
 80087ca:	e000      	b.n	80087ce <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40010400 	.word	0x40010400
 80087e0:	40000400 	.word	0x40000400
 80087e4:	40000800 	.word	0x40000800
 80087e8:	40000c00 	.word	0x40000c00
 80087ec:	40014000 	.word	0x40014000
 80087f0:	40001800 	.word	0x40001800
 80087f4:	00010007 	.word	0x00010007

080087f8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e041      	b.n	8008890 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d106      	bne.n	8008826 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 f839 	bl	8008898 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2202      	movs	r2, #2
 800882a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f000 fc0d 	bl	8009058 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0208 	bic.w	r2, r2, #8
 800884c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d122      	bne.n	8008908 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d11b      	bne.n	8008908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f06f 0202 	mvn.w	r2, #2
 80088d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f003 0303 	and.w	r3, r3, #3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d003      	beq.n	80088f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 fb94 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 80088f4:	e005      	b.n	8008902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fb86 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fb97 	bl	8009030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b04      	cmp	r3, #4
 8008914:	d122      	bne.n	800895c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b04      	cmp	r3, #4
 8008922:	d11b      	bne.n	800895c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f06f 0204 	mvn.w	r2, #4
 800892c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2202      	movs	r2, #2
 8008932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699b      	ldr	r3, [r3, #24]
 800893a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fb6a 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 8008948:	e005      	b.n	8008956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fb5c 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fb6d 	bl	8009030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f003 0308 	and.w	r3, r3, #8
 8008966:	2b08      	cmp	r3, #8
 8008968:	d122      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	f003 0308 	and.w	r3, r3, #8
 8008974:	2b08      	cmp	r3, #8
 8008976:	d11b      	bne.n	80089b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f06f 0208 	mvn.w	r2, #8
 8008980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2204      	movs	r2, #4
 8008986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f003 0303 	and.w	r3, r3, #3
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fb40 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 800899c:	e005      	b.n	80089aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fb32 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fb43 	bl	8009030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b10      	cmp	r3, #16
 80089bc:	d122      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d11b      	bne.n	8008a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0210 	mvn.w	r2, #16
 80089d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2208      	movs	r2, #8
 80089da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fb16 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 80089f0:	e005      	b.n	80089fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 fb08 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 fb19 	bl	8009030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d10e      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	f003 0301 	and.w	r3, r3, #1
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f06f 0201 	mvn.w	r2, #1
 8008a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f7fb feb2 	bl	8004794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3a:	2b80      	cmp	r3, #128	; 0x80
 8008a3c:	d10e      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d107      	bne.n	8008a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f001 f924 	bl	8009ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a6a:	d10e      	bne.n	8008a8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a76:	2b80      	cmp	r3, #128	; 0x80
 8008a78:	d107      	bne.n	8008a8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 f917 	bl	8009cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	691b      	ldr	r3, [r3, #16]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b40      	cmp	r3, #64	; 0x40
 8008a96:	d10e      	bne.n	8008ab6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d107      	bne.n	8008ab6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fac7 	bl	8009044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d10e      	bne.n	8008ae2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b20      	cmp	r3, #32
 8008ad0:	d107      	bne.n	8008ae2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f06f 0220 	mvn.w	r2, #32
 8008ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f8d7 	bl	8009c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
	...

08008aec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e064      	b.n	8008bd0 <HAL_TIM_OC_ConfigChannel+0xe4>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b14      	cmp	r3, #20
 8008b12:	d857      	bhi.n	8008bc4 <HAL_TIM_OC_ConfigChannel+0xd8>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <HAL_TIM_OC_ConfigChannel+0x30>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b71 	.word	0x08008b71
 8008b20:	08008bc5 	.word	0x08008bc5
 8008b24:	08008bc5 	.word	0x08008bc5
 8008b28:	08008bc5 	.word	0x08008bc5
 8008b2c:	08008b7f 	.word	0x08008b7f
 8008b30:	08008bc5 	.word	0x08008bc5
 8008b34:	08008bc5 	.word	0x08008bc5
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008b8d 	.word	0x08008b8d
 8008b40:	08008bc5 	.word	0x08008bc5
 8008b44:	08008bc5 	.word	0x08008bc5
 8008b48:	08008bc5 	.word	0x08008bc5
 8008b4c:	08008b9b 	.word	0x08008b9b
 8008b50:	08008bc5 	.word	0x08008bc5
 8008b54:	08008bc5 	.word	0x08008bc5
 8008b58:	08008bc5 	.word	0x08008bc5
 8008b5c:	08008ba9 	.word	0x08008ba9
 8008b60:	08008bc5 	.word	0x08008bc5
 8008b64:	08008bc5 	.word	0x08008bc5
 8008b68:	08008bc5 	.word	0x08008bc5
 8008b6c:	08008bb7 	.word	0x08008bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fb0e 	bl	8009198 <TIM_OC1_SetConfig>
      break;
 8008b7c:	e023      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68b9      	ldr	r1, [r7, #8]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 fb79 	bl	800927c <TIM_OC2_SetConfig>
      break;
 8008b8a:	e01c      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68b9      	ldr	r1, [r7, #8]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fbea 	bl	800936c <TIM_OC3_SetConfig>
      break;
 8008b98:	e015      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f000 fc59 	bl	8009458 <TIM_OC4_SetConfig>
      break;
 8008ba6:	e00e      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fcaa 	bl	8009508 <TIM_OC5_SetConfig>
      break;
 8008bb4:	e007      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68b9      	ldr	r1, [r7, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fcf5 	bl	80095ac <TIM_OC6_SetConfig>
      break;
 8008bc2:	e000      	b.n	8008bc6 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8008bc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e0fd      	b.n	8008dee <HAL_TIM_PWM_ConfigChannel+0x216>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b14      	cmp	r3, #20
 8008bfe:	f200 80f0 	bhi.w	8008de2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c5d 	.word	0x08008c5d
 8008c0c:	08008de3 	.word	0x08008de3
 8008c10:	08008de3 	.word	0x08008de3
 8008c14:	08008de3 	.word	0x08008de3
 8008c18:	08008c9d 	.word	0x08008c9d
 8008c1c:	08008de3 	.word	0x08008de3
 8008c20:	08008de3 	.word	0x08008de3
 8008c24:	08008de3 	.word	0x08008de3
 8008c28:	08008cdf 	.word	0x08008cdf
 8008c2c:	08008de3 	.word	0x08008de3
 8008c30:	08008de3 	.word	0x08008de3
 8008c34:	08008de3 	.word	0x08008de3
 8008c38:	08008d1f 	.word	0x08008d1f
 8008c3c:	08008de3 	.word	0x08008de3
 8008c40:	08008de3 	.word	0x08008de3
 8008c44:	08008de3 	.word	0x08008de3
 8008c48:	08008d61 	.word	0x08008d61
 8008c4c:	08008de3 	.word	0x08008de3
 8008c50:	08008de3 	.word	0x08008de3
 8008c54:	08008de3 	.word	0x08008de3
 8008c58:	08008da1 	.word	0x08008da1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fa98 	bl	8009198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0208 	orr.w	r2, r2, #8
 8008c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0204 	bic.w	r2, r2, #4
 8008c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6999      	ldr	r1, [r3, #24]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	691a      	ldr	r2, [r3, #16]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	619a      	str	r2, [r3, #24]
      break;
 8008c9a:	e0a3      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 faea 	bl	800927c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6999      	ldr	r1, [r3, #24]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	021a      	lsls	r2, r3, #8
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	619a      	str	r2, [r3, #24]
      break;
 8008cdc:	e082      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fb41 	bl	800936c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0208 	orr.w	r2, r2, #8
 8008cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0204 	bic.w	r2, r2, #4
 8008d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69d9      	ldr	r1, [r3, #28]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	61da      	str	r2, [r3, #28]
      break;
 8008d1c:	e062      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fb97 	bl	8009458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69d9      	ldr	r1, [r3, #28]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	021a      	lsls	r2, r3, #8
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	61da      	str	r2, [r3, #28]
      break;
 8008d5e:	e041      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68b9      	ldr	r1, [r7, #8]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fbce 	bl	8009508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0208 	orr.w	r2, r2, #8
 8008d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0204 	bic.w	r2, r2, #4
 8008d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008d9e:	e021      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fc00 	bl	80095ac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	021a      	lsls	r2, r3, #8
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008de0:	e000      	b.n	8008de4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008de2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop

08008df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_TIM_ConfigClockSource+0x18>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e0b3      	b.n	8008f78 <HAL_TIM_ConfigClockSource+0x180>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <HAL_TIM_ConfigClockSource+0x188>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e48:	d03e      	beq.n	8008ec8 <HAL_TIM_ConfigClockSource+0xd0>
 8008e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e4e:	f200 8087 	bhi.w	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e56:	f000 8085 	beq.w	8008f64 <HAL_TIM_ConfigClockSource+0x16c>
 8008e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5e:	d87f      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e60:	2b70      	cmp	r3, #112	; 0x70
 8008e62:	d01a      	beq.n	8008e9a <HAL_TIM_ConfigClockSource+0xa2>
 8008e64:	2b70      	cmp	r3, #112	; 0x70
 8008e66:	d87b      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e68:	2b60      	cmp	r3, #96	; 0x60
 8008e6a:	d050      	beq.n	8008f0e <HAL_TIM_ConfigClockSource+0x116>
 8008e6c:	2b60      	cmp	r3, #96	; 0x60
 8008e6e:	d877      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e70:	2b50      	cmp	r3, #80	; 0x50
 8008e72:	d03c      	beq.n	8008eee <HAL_TIM_ConfigClockSource+0xf6>
 8008e74:	2b50      	cmp	r3, #80	; 0x50
 8008e76:	d873      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e78:	2b40      	cmp	r3, #64	; 0x40
 8008e7a:	d058      	beq.n	8008f2e <HAL_TIM_ConfigClockSource+0x136>
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d86f      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e80:	2b30      	cmp	r3, #48	; 0x30
 8008e82:	d064      	beq.n	8008f4e <HAL_TIM_ConfigClockSource+0x156>
 8008e84:	2b30      	cmp	r3, #48	; 0x30
 8008e86:	d86b      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e88:	2b20      	cmp	r3, #32
 8008e8a:	d060      	beq.n	8008f4e <HAL_TIM_ConfigClockSource+0x156>
 8008e8c:	2b20      	cmp	r3, #32
 8008e8e:	d867      	bhi.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d05c      	beq.n	8008f4e <HAL_TIM_ConfigClockSource+0x156>
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d05a      	beq.n	8008f4e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008e98:	e062      	b.n	8008f60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	6899      	ldr	r1, [r3, #8]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	685a      	ldr	r2, [r3, #4]
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	f000 fcdd 	bl	8009868 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ebc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68fa      	ldr	r2, [r7, #12]
 8008ec4:	609a      	str	r2, [r3, #8]
      break;
 8008ec6:	e04e      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	6899      	ldr	r1, [r3, #8]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685a      	ldr	r2, [r3, #4]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f000 fcc6 	bl	8009868 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008eea:	609a      	str	r2, [r3, #8]
      break;
 8008eec:	e03b      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6859      	ldr	r1, [r3, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	461a      	mov	r2, r3
 8008efc:	f000 fc3a 	bl	8009774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2150      	movs	r1, #80	; 0x50
 8008f06:	4618      	mov	r0, r3
 8008f08:	f000 fc93 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 8008f0c:	e02b      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6818      	ldr	r0, [r3, #0]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	6859      	ldr	r1, [r3, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f000 fc59 	bl	80097d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2160      	movs	r1, #96	; 0x60
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fc83 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 8008f2c:	e01b      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6818      	ldr	r0, [r3, #0]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	6859      	ldr	r1, [r3, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f000 fc1a 	bl	8009774 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2140      	movs	r1, #64	; 0x40
 8008f46:	4618      	mov	r0, r3
 8008f48:	f000 fc73 	bl	8009832 <TIM_ITRx_SetConfig>
      break;
 8008f4c:	e00b      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f000 fc6a 	bl	8009832 <TIM_ITRx_SetConfig>
        break;
 8008f5e:	e002      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008f60:	bf00      	nop
 8008f62:	e000      	b.n	8008f66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008f64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	fffeff88 	.word	0xfffeff88

08008f84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e031      	b.n	8009000 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb50 	bl	8009654 <TIM_SlaveTimer_SetConfig>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d009      	beq.n	8008fce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	e018      	b.n	8009000 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68da      	ldr	r2, [r3, #12]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fdc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008fec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a40      	ldr	r2, [pc, #256]	; (800916c <TIM_Base_SetConfig+0x114>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d013      	beq.n	8009098 <TIM_Base_SetConfig+0x40>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009076:	d00f      	beq.n	8009098 <TIM_Base_SetConfig+0x40>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a3d      	ldr	r2, [pc, #244]	; (8009170 <TIM_Base_SetConfig+0x118>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d00b      	beq.n	8009098 <TIM_Base_SetConfig+0x40>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a3c      	ldr	r2, [pc, #240]	; (8009174 <TIM_Base_SetConfig+0x11c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d007      	beq.n	8009098 <TIM_Base_SetConfig+0x40>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a3b      	ldr	r2, [pc, #236]	; (8009178 <TIM_Base_SetConfig+0x120>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <TIM_Base_SetConfig+0x40>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a3a      	ldr	r2, [pc, #232]	; (800917c <TIM_Base_SetConfig+0x124>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d108      	bne.n	80090aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800909e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a2f      	ldr	r2, [pc, #188]	; (800916c <TIM_Base_SetConfig+0x114>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d02b      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b8:	d027      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2c      	ldr	r2, [pc, #176]	; (8009170 <TIM_Base_SetConfig+0x118>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d023      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a2b      	ldr	r2, [pc, #172]	; (8009174 <TIM_Base_SetConfig+0x11c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01f      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a2a      	ldr	r2, [pc, #168]	; (8009178 <TIM_Base_SetConfig+0x120>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d01b      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a29      	ldr	r2, [pc, #164]	; (800917c <TIM_Base_SetConfig+0x124>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d017      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a28      	ldr	r2, [pc, #160]	; (8009180 <TIM_Base_SetConfig+0x128>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d013      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a27      	ldr	r2, [pc, #156]	; (8009184 <TIM_Base_SetConfig+0x12c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00f      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a26      	ldr	r2, [pc, #152]	; (8009188 <TIM_Base_SetConfig+0x130>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d00b      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a25      	ldr	r2, [pc, #148]	; (800918c <TIM_Base_SetConfig+0x134>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d007      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a24      	ldr	r2, [pc, #144]	; (8009190 <TIM_Base_SetConfig+0x138>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d003      	beq.n	800910a <TIM_Base_SetConfig+0xb2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a23      	ldr	r2, [pc, #140]	; (8009194 <TIM_Base_SetConfig+0x13c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d108      	bne.n	800911c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	689a      	ldr	r2, [r3, #8]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a0a      	ldr	r2, [pc, #40]	; (800916c <TIM_Base_SetConfig+0x114>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d003      	beq.n	8009150 <TIM_Base_SetConfig+0xf8>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a0c      	ldr	r2, [pc, #48]	; (800917c <TIM_Base_SetConfig+0x124>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d103      	bne.n	8009158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	691a      	ldr	r2, [r3, #16]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	615a      	str	r2, [r3, #20]
}
 800915e:	bf00      	nop
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40010400 	.word	0x40010400
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800
 800918c:	40001800 	.word	0x40001800
 8009190:	40001c00 	.word	0x40001c00
 8009194:	40002000 	.word	0x40002000

08009198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f023 0201 	bic.w	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <TIM_OC1_SetConfig+0xd8>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0303 	bic.w	r3, r3, #3
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f023 0302 	bic.w	r3, r3, #2
 80091e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a21      	ldr	r2, [pc, #132]	; (8009274 <TIM_OC1_SetConfig+0xdc>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC1_SetConfig+0x64>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a20      	ldr	r2, [pc, #128]	; (8009278 <TIM_OC1_SetConfig+0xe0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d10c      	bne.n	8009216 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f023 0308 	bic.w	r3, r3, #8
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	4313      	orrs	r3, r2
 800920c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f023 0304 	bic.w	r3, r3, #4
 8009214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a16      	ldr	r2, [pc, #88]	; (8009274 <TIM_OC1_SetConfig+0xdc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_OC1_SetConfig+0x8e>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a15      	ldr	r2, [pc, #84]	; (8009278 <TIM_OC1_SetConfig+0xe0>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d111      	bne.n	800924a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800922c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4313      	orrs	r3, r2
 800923e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	693a      	ldr	r2, [r7, #16]
 8009246:	4313      	orrs	r3, r2
 8009248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	685a      	ldr	r2, [r3, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	621a      	str	r2, [r3, #32]
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	fffeff8f 	.word	0xfffeff8f
 8009274:	40010000 	.word	0x40010000
 8009278:	40010400 	.word	0x40010400

0800927c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f023 0210 	bic.w	r2, r3, #16
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	4b2e      	ldr	r3, [pc, #184]	; (8009360 <TIM_OC2_SetConfig+0xe4>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f023 0320 	bic.w	r3, r3, #32
 80092c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a23      	ldr	r2, [pc, #140]	; (8009364 <TIM_OC2_SetConfig+0xe8>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC2_SetConfig+0x68>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a22      	ldr	r2, [pc, #136]	; (8009368 <TIM_OC2_SetConfig+0xec>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d10d      	bne.n	8009300 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	011b      	lsls	r3, r3, #4
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a18      	ldr	r2, [pc, #96]	; (8009364 <TIM_OC2_SetConfig+0xe8>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_OC2_SetConfig+0x94>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <TIM_OC2_SetConfig+0xec>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d113      	bne.n	8009338 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800931e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	621a      	str	r2, [r3, #32]
}
 8009352:	bf00      	nop
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	feff8fff 	.word	0xfeff8fff
 8009364:	40010000 	.word	0x40010000
 8009368:	40010400 	.word	0x40010400

0800936c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	4b2d      	ldr	r3, [pc, #180]	; (800944c <TIM_OC3_SetConfig+0xe0>)
 8009398:	4013      	ands	r3, r2
 800939a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	021b      	lsls	r3, r3, #8
 80093bc:	697a      	ldr	r2, [r7, #20]
 80093be:	4313      	orrs	r3, r2
 80093c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a22      	ldr	r2, [pc, #136]	; (8009450 <TIM_OC3_SetConfig+0xe4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d003      	beq.n	80093d2 <TIM_OC3_SetConfig+0x66>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a21      	ldr	r2, [pc, #132]	; (8009454 <TIM_OC3_SetConfig+0xe8>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d10d      	bne.n	80093ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	021b      	lsls	r3, r3, #8
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a17      	ldr	r2, [pc, #92]	; (8009450 <TIM_OC3_SetConfig+0xe4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d003      	beq.n	80093fe <TIM_OC3_SetConfig+0x92>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a16      	ldr	r2, [pc, #88]	; (8009454 <TIM_OC3_SetConfig+0xe8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d113      	bne.n	8009426 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800940c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	011b      	lsls	r3, r3, #4
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	4313      	orrs	r3, r2
 8009424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	693a      	ldr	r2, [r7, #16]
 800942a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	621a      	str	r2, [r3, #32]
}
 8009440:	bf00      	nop
 8009442:	371c      	adds	r7, #28
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	fffeff8f 	.word	0xfffeff8f
 8009450:	40010000 	.word	0x40010000
 8009454:	40010400 	.word	0x40010400

08009458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a1b      	ldr	r3, [r3, #32]
 8009472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <TIM_OC4_SetConfig+0xa4>)
 8009484:	4013      	ands	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800948e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4313      	orrs	r3, r2
 800949a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80094a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	031b      	lsls	r3, r3, #12
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a13      	ldr	r2, [pc, #76]	; (8009500 <TIM_OC4_SetConfig+0xa8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC4_SetConfig+0x68>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a12      	ldr	r2, [pc, #72]	; (8009504 <TIM_OC4_SetConfig+0xac>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	019b      	lsls	r3, r3, #6
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	feff8fff 	.word	0xfeff8fff
 8009500:	40010000 	.word	0x40010000
 8009504:	40010400 	.word	0x40010400

08009508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009508:	b480      	push	{r7}
 800950a:	b087      	sub	sp, #28
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4b1b      	ldr	r3, [pc, #108]	; (80095a0 <TIM_OC5_SetConfig+0x98>)
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009548:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	041b      	lsls	r3, r3, #16
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a12      	ldr	r2, [pc, #72]	; (80095a4 <TIM_OC5_SetConfig+0x9c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d003      	beq.n	8009566 <TIM_OC5_SetConfig+0x5e>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a11      	ldr	r2, [pc, #68]	; (80095a8 <TIM_OC5_SetConfig+0xa0>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d109      	bne.n	800957a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	4313      	orrs	r3, r2
 8009578:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	621a      	str	r2, [r3, #32]
}
 8009594:	bf00      	nop
 8009596:	371c      	adds	r7, #28
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	fffeff8f 	.word	0xfffeff8f
 80095a4:	40010000 	.word	0x40010000
 80095a8:	40010400 	.word	0x40010400

080095ac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4b1c      	ldr	r3, [pc, #112]	; (8009648 <TIM_OC6_SetConfig+0x9c>)
 80095d8:	4013      	ands	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	021b      	lsls	r3, r3, #8
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	051b      	lsls	r3, r3, #20
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a13      	ldr	r2, [pc, #76]	; (800964c <TIM_OC6_SetConfig+0xa0>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_OC6_SetConfig+0x60>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a12      	ldr	r2, [pc, #72]	; (8009650 <TIM_OC6_SetConfig+0xa4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d109      	bne.n	8009620 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009612:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	695b      	ldr	r3, [r3, #20]
 8009618:	029b      	lsls	r3, r3, #10
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	4313      	orrs	r3, r2
 800961e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	697a      	ldr	r2, [r7, #20]
 8009624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	621a      	str	r2, [r3, #32]
}
 800963a:	bf00      	nop
 800963c:	371c      	adds	r7, #28
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	feff8fff 	.word	0xfeff8fff
 800964c:	40010000 	.word	0x40010000
 8009650:	40010400 	.word	0x40010400

08009654 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	697a      	ldr	r2, [r7, #20]
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4b3d      	ldr	r3, [pc, #244]	; (8009770 <TIM_SlaveTimer_SetConfig+0x11c>)
 800967c:	4013      	ands	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	2b70      	cmp	r3, #112	; 0x70
 8009698:	d01a      	beq.n	80096d0 <TIM_SlaveTimer_SetConfig+0x7c>
 800969a:	2b70      	cmp	r3, #112	; 0x70
 800969c:	d860      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 800969e:	2b60      	cmp	r3, #96	; 0x60
 80096a0:	d054      	beq.n	800974c <TIM_SlaveTimer_SetConfig+0xf8>
 80096a2:	2b60      	cmp	r3, #96	; 0x60
 80096a4:	d85c      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 80096a6:	2b50      	cmp	r3, #80	; 0x50
 80096a8:	d046      	beq.n	8009738 <TIM_SlaveTimer_SetConfig+0xe4>
 80096aa:	2b50      	cmp	r3, #80	; 0x50
 80096ac:	d858      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 80096ae:	2b40      	cmp	r3, #64	; 0x40
 80096b0:	d019      	beq.n	80096e6 <TIM_SlaveTimer_SetConfig+0x92>
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d854      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 80096b6:	2b30      	cmp	r3, #48	; 0x30
 80096b8:	d054      	beq.n	8009764 <TIM_SlaveTimer_SetConfig+0x110>
 80096ba:	2b30      	cmp	r3, #48	; 0x30
 80096bc:	d850      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d050      	beq.n	8009764 <TIM_SlaveTimer_SetConfig+0x110>
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d84c      	bhi.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d04c      	beq.n	8009764 <TIM_SlaveTimer_SetConfig+0x110>
 80096ca:	2b10      	cmp	r3, #16
 80096cc:	d04a      	beq.n	8009764 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80096ce:	e047      	b.n	8009760 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6818      	ldr	r0, [r3, #0]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	68d9      	ldr	r1, [r3, #12]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f000 f8c2 	bl	8009868 <TIM_ETR_SetConfig>
      break;
 80096e4:	e03f      	b.n	8009766 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b05      	cmp	r3, #5
 80096ec:	d101      	bne.n	80096f2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e03a      	b.n	8009768 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6a1a      	ldr	r2, [r3, #32]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0201 	bic.w	r2, r2, #1
 8009708:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	699b      	ldr	r3, [r3, #24]
 8009710:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009718:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	621a      	str	r2, [r3, #32]
      break;
 8009736:	e016      	b.n	8009766 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6818      	ldr	r0, [r3, #0]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	6899      	ldr	r1, [r3, #8]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	461a      	mov	r2, r3
 8009746:	f000 f815 	bl	8009774 <TIM_TI1_ConfigInputStage>
      break;
 800974a:	e00c      	b.n	8009766 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	6899      	ldr	r1, [r3, #8]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	461a      	mov	r2, r3
 800975a:	f000 f83a 	bl	80097d2 <TIM_TI2_ConfigInputStage>
      break;
 800975e:	e002      	b.n	8009766 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8009764:	bf00      	nop
  }
  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	fffefff8 	.word	0xfffefff8

08009774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009774:	b480      	push	{r7}
 8009776:	b087      	sub	sp, #28
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6a1b      	ldr	r3, [r3, #32]
 8009784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	f023 0201 	bic.w	r2, r3, #1
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	699b      	ldr	r3, [r3, #24]
 8009796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800979e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	011b      	lsls	r3, r3, #4
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 030a 	bic.w	r3, r3, #10
 80097b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b087      	sub	sp, #28
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f023 0210 	bic.w	r2, r3, #16
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	699b      	ldr	r3, [r3, #24]
 80097ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	031b      	lsls	r3, r3, #12
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	4313      	orrs	r3, r2
 8009806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800980e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	4313      	orrs	r3, r2
 8009818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	621a      	str	r2, [r3, #32]
}
 8009826:	bf00      	nop
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4313      	orrs	r3, r2
 8009850:	f043 0307 	orr.w	r3, r3, #7
 8009854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	609a      	str	r2, [r3, #8]
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009868:	b480      	push	{r7}
 800986a:	b087      	sub	sp, #28
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	607a      	str	r2, [r7, #4]
 8009874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	431a      	orrs	r2, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	609a      	str	r2, [r3, #8]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	2201      	movs	r2, #1
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	43db      	mvns	r3, r3
 80098ca:	401a      	ands	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a1a      	ldr	r2, [r3, #32]
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	fa01 f303 	lsl.w	r3, r1, r3
 80098e0:	431a      	orrs	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	621a      	str	r2, [r3, #32]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
	...

080098f4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <HAL_TIMEx_PWMN_Start+0x24>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	e022      	b.n	800995e <HAL_TIMEx_PWMN_Start+0x6a>
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d109      	bne.n	8009932 <HAL_TIMEx_PWMN_Start+0x3e>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b01      	cmp	r3, #1
 8009928:	bf14      	ite	ne
 800992a:	2301      	movne	r3, #1
 800992c:	2300      	moveq	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	e015      	b.n	800995e <HAL_TIMEx_PWMN_Start+0x6a>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b08      	cmp	r3, #8
 8009936:	d109      	bne.n	800994c <HAL_TIMEx_PWMN_Start+0x58>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800993e:	b2db      	uxtb	r3, r3
 8009940:	2b01      	cmp	r3, #1
 8009942:	bf14      	ite	ne
 8009944:	2301      	movne	r3, #1
 8009946:	2300      	moveq	r3, #0
 8009948:	b2db      	uxtb	r3, r3
 800994a:	e008      	b.n	800995e <HAL_TIMEx_PWMN_Start+0x6a>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b01      	cmp	r3, #1
 8009956:	bf14      	ite	ne
 8009958:	2301      	movne	r3, #1
 800995a:	2300      	moveq	r3, #0
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	e073      	b.n	8009a4e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <HAL_TIMEx_PWMN_Start+0x82>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009974:	e013      	b.n	800999e <HAL_TIMEx_PWMN_Start+0xaa>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b04      	cmp	r3, #4
 800997a:	d104      	bne.n	8009986 <HAL_TIMEx_PWMN_Start+0x92>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009984:	e00b      	b.n	800999e <HAL_TIMEx_PWMN_Start+0xaa>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b08      	cmp	r3, #8
 800998a:	d104      	bne.n	8009996 <HAL_TIMEx_PWMN_Start+0xa2>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009994:	e003      	b.n	800999e <HAL_TIMEx_PWMN_Start+0xaa>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2204      	movs	r2, #4
 80099a4:	6839      	ldr	r1, [r7, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 f990 	bl	8009ccc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a25      	ldr	r2, [pc, #148]	; (8009a58 <HAL_TIMEx_PWMN_Start+0x164>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d022      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ce:	d01d      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a21      	ldr	r2, [pc, #132]	; (8009a5c <HAL_TIMEx_PWMN_Start+0x168>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d018      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a20      	ldr	r2, [pc, #128]	; (8009a60 <HAL_TIMEx_PWMN_Start+0x16c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d013      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <HAL_TIMEx_PWMN_Start+0x170>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00e      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a1d      	ldr	r2, [pc, #116]	; (8009a68 <HAL_TIMEx_PWMN_Start+0x174>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d009      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1b      	ldr	r2, [pc, #108]	; (8009a6c <HAL_TIMEx_PWMN_Start+0x178>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_TIMEx_PWMN_Start+0x118>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a1a      	ldr	r2, [pc, #104]	; (8009a70 <HAL_TIMEx_PWMN_Start+0x17c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d115      	bne.n	8009a38 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <HAL_TIMEx_PWMN_Start+0x180>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b06      	cmp	r3, #6
 8009a1c:	d015      	beq.n	8009a4a <HAL_TIMEx_PWMN_Start+0x156>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a24:	d011      	beq.n	8009a4a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0201 	orr.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a36:	e008      	b.n	8009a4a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0201 	orr.w	r2, r2, #1
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	e000      	b.n	8009a4c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	40010000 	.word	0x40010000
 8009a5c:	40000400 	.word	0x40000400
 8009a60:	40000800 	.word	0x40000800
 8009a64:	40000c00 	.word	0x40000c00
 8009a68:	40010400 	.word	0x40010400
 8009a6c:	40014000 	.word	0x40014000
 8009a70:	40001800 	.word	0x40001800
 8009a74:	00010007 	.word	0x00010007

08009a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d101      	bne.n	8009a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e06d      	b.n	8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a30      	ldr	r2, [pc, #192]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d004      	beq.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a2f      	ldr	r2, [pc, #188]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d108      	bne.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009aca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009adc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a20      	ldr	r2, [pc, #128]	; (8009b78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d022      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b02:	d01d      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a1d      	ldr	r2, [pc, #116]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d018      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a1c      	ldr	r2, [pc, #112]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d013      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1a      	ldr	r2, [pc, #104]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d00e      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a15      	ldr	r2, [pc, #84]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a16      	ldr	r2, [pc, #88]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a15      	ldr	r2, [pc, #84]	; (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10c      	bne.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	40010000 	.word	0x40010000
 8009b7c:	40010400 	.word	0x40010400
 8009b80:	40000400 	.word	0x40000400
 8009b84:	40000800 	.word	0x40000800
 8009b88:	40000c00 	.word	0x40000c00
 8009b8c:	40014000 	.word	0x40014000
 8009b90:	40001800 	.word	0x40001800

08009b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e065      	b.n	8009c7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	691b      	ldr	r3, [r3, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c16:	4313      	orrs	r3, r2
 8009c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	041b      	lsls	r3, r3, #16
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a16      	ldr	r2, [pc, #88]	; (8009c88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d004      	beq.n	8009c3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a14      	ldr	r2, [pc, #80]	; (8009c8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d115      	bne.n	8009c6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c48:	051b      	lsls	r3, r3, #20
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	40010000 	.word	0x40010000
 8009c8c:	40010400 	.word	0x40010400

08009c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 031f 	and.w	r3, r3, #31
 8009cde:	2204      	movs	r2, #4
 8009ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6a1a      	ldr	r2, [r3, #32]
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	43db      	mvns	r3, r3
 8009cee:	401a      	ands	r2, r3
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6a1a      	ldr	r2, [r3, #32]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f003 031f 	and.w	r3, r3, #31
 8009cfe:	6879      	ldr	r1, [r7, #4]
 8009d00:	fa01 f303 	lsl.w	r3, r1, r3
 8009d04:	431a      	orrs	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	621a      	str	r2, [r3, #32]
}
 8009d0a:	bf00      	nop
 8009d0c:	371c      	adds	r7, #28
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b082      	sub	sp, #8
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e040      	b.n	8009daa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d106      	bne.n	8009d3e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fa fedb 	bl	8004af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2224      	movs	r2, #36	; 0x24
 8009d42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f022 0201 	bic.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 f8bf 	bl	8009ed8 <UART_SetConfig>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d101      	bne.n	8009d64 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009d60:	2301      	movs	r3, #1
 8009d62:	e022      	b.n	8009daa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d002      	beq.n	8009d72 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb15 	bl	800a39c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f042 0201 	orr.w	r2, r2, #1
 8009da0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 fb9c 	bl	800a4e0 <UART_CheckIdleState>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b08a      	sub	sp, #40	; 0x28
 8009db6:	af02      	add	r7, sp, #8
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	603b      	str	r3, [r7, #0]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	f040 8081 	bne.w	8009ece <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <HAL_UART_Transmit+0x26>
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e079      	b.n	8009ed0 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_UART_Transmit+0x38>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e072      	b.n	8009ed0 <HAL_UART_Transmit+0x11e>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2221      	movs	r2, #33	; 0x21
 8009dfe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e00:	f7fb f89e 	bl	8004f40 <HAL_GetTick>
 8009e04:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	88fa      	ldrh	r2, [r7, #6]
 8009e0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1e:	d108      	bne.n	8009e32 <HAL_UART_Transmit+0x80>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	61bb      	str	r3, [r7, #24]
 8009e30:	e003      	b.n	8009e3a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009e42:	e02c      	b.n	8009e9e <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2180      	movs	r1, #128	; 0x80
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 fb79 	bl	800a546 <UART_WaitOnFlagUntilTimeout>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	e038      	b.n	8009ed0 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10b      	bne.n	8009e7c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e72:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	3302      	adds	r3, #2
 8009e78:	61bb      	str	r3, [r7, #24]
 8009e7a:	e007      	b.n	8009e8c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1cc      	bne.n	8009e44 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2140      	movs	r1, #64	; 0x40
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fb46 	bl	800a546 <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e005      	b.n	8009ed0 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e000      	b.n	8009ed0 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	431a      	orrs	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	431a      	orrs	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	69db      	ldr	r3, [r3, #28]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4ba7      	ldr	r3, [pc, #668]	; (800a1a0 <UART_SetConfig+0x2c8>)
 8009f04:	4013      	ands	r3, r2
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	6979      	ldr	r1, [r7, #20]
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a1b      	ldr	r3, [r3, #32]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a95      	ldr	r2, [pc, #596]	; (800a1a4 <UART_SetConfig+0x2cc>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d120      	bne.n	8009f96 <UART_SetConfig+0xbe>
 8009f54:	4b94      	ldr	r3, [pc, #592]	; (800a1a8 <UART_SetConfig+0x2d0>)
 8009f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d816      	bhi.n	8009f90 <UART_SetConfig+0xb8>
 8009f62:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <UART_SetConfig+0x90>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f79 	.word	0x08009f79
 8009f6c:	08009f85 	.word	0x08009f85
 8009f70:	08009f7f 	.word	0x08009f7f
 8009f74:	08009f8b 	.word	0x08009f8b
 8009f78:	2301      	movs	r3, #1
 8009f7a:	77fb      	strb	r3, [r7, #31]
 8009f7c:	e14f      	b.n	800a21e <UART_SetConfig+0x346>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	77fb      	strb	r3, [r7, #31]
 8009f82:	e14c      	b.n	800a21e <UART_SetConfig+0x346>
 8009f84:	2304      	movs	r3, #4
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e149      	b.n	800a21e <UART_SetConfig+0x346>
 8009f8a:	2308      	movs	r3, #8
 8009f8c:	77fb      	strb	r3, [r7, #31]
 8009f8e:	e146      	b.n	800a21e <UART_SetConfig+0x346>
 8009f90:	2310      	movs	r3, #16
 8009f92:	77fb      	strb	r3, [r7, #31]
 8009f94:	e143      	b.n	800a21e <UART_SetConfig+0x346>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a84      	ldr	r2, [pc, #528]	; (800a1ac <UART_SetConfig+0x2d4>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d132      	bne.n	800a006 <UART_SetConfig+0x12e>
 8009fa0:	4b81      	ldr	r3, [pc, #516]	; (800a1a8 <UART_SetConfig+0x2d0>)
 8009fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fa6:	f003 030c 	and.w	r3, r3, #12
 8009faa:	2b0c      	cmp	r3, #12
 8009fac:	d828      	bhi.n	800a000 <UART_SetConfig+0x128>
 8009fae:	a201      	add	r2, pc, #4	; (adr r2, 8009fb4 <UART_SetConfig+0xdc>)
 8009fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb4:	08009fe9 	.word	0x08009fe9
 8009fb8:	0800a001 	.word	0x0800a001
 8009fbc:	0800a001 	.word	0x0800a001
 8009fc0:	0800a001 	.word	0x0800a001
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	0800a001 	.word	0x0800a001
 8009fcc:	0800a001 	.word	0x0800a001
 8009fd0:	0800a001 	.word	0x0800a001
 8009fd4:	08009fef 	.word	0x08009fef
 8009fd8:	0800a001 	.word	0x0800a001
 8009fdc:	0800a001 	.word	0x0800a001
 8009fe0:	0800a001 	.word	0x0800a001
 8009fe4:	08009ffb 	.word	0x08009ffb
 8009fe8:	2300      	movs	r3, #0
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e117      	b.n	800a21e <UART_SetConfig+0x346>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e114      	b.n	800a21e <UART_SetConfig+0x346>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e111      	b.n	800a21e <UART_SetConfig+0x346>
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e10e      	b.n	800a21e <UART_SetConfig+0x346>
 800a000:	2310      	movs	r3, #16
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e10b      	b.n	800a21e <UART_SetConfig+0x346>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a69      	ldr	r2, [pc, #420]	; (800a1b0 <UART_SetConfig+0x2d8>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d120      	bne.n	800a052 <UART_SetConfig+0x17a>
 800a010:	4b65      	ldr	r3, [pc, #404]	; (800a1a8 <UART_SetConfig+0x2d0>)
 800a012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a016:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a01a:	2b30      	cmp	r3, #48	; 0x30
 800a01c:	d013      	beq.n	800a046 <UART_SetConfig+0x16e>
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d814      	bhi.n	800a04c <UART_SetConfig+0x174>
 800a022:	2b20      	cmp	r3, #32
 800a024:	d009      	beq.n	800a03a <UART_SetConfig+0x162>
 800a026:	2b20      	cmp	r3, #32
 800a028:	d810      	bhi.n	800a04c <UART_SetConfig+0x174>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d002      	beq.n	800a034 <UART_SetConfig+0x15c>
 800a02e:	2b10      	cmp	r3, #16
 800a030:	d006      	beq.n	800a040 <UART_SetConfig+0x168>
 800a032:	e00b      	b.n	800a04c <UART_SetConfig+0x174>
 800a034:	2300      	movs	r3, #0
 800a036:	77fb      	strb	r3, [r7, #31]
 800a038:	e0f1      	b.n	800a21e <UART_SetConfig+0x346>
 800a03a:	2302      	movs	r3, #2
 800a03c:	77fb      	strb	r3, [r7, #31]
 800a03e:	e0ee      	b.n	800a21e <UART_SetConfig+0x346>
 800a040:	2304      	movs	r3, #4
 800a042:	77fb      	strb	r3, [r7, #31]
 800a044:	e0eb      	b.n	800a21e <UART_SetConfig+0x346>
 800a046:	2308      	movs	r3, #8
 800a048:	77fb      	strb	r3, [r7, #31]
 800a04a:	e0e8      	b.n	800a21e <UART_SetConfig+0x346>
 800a04c:	2310      	movs	r3, #16
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e0e5      	b.n	800a21e <UART_SetConfig+0x346>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a57      	ldr	r2, [pc, #348]	; (800a1b4 <UART_SetConfig+0x2dc>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d120      	bne.n	800a09e <UART_SetConfig+0x1c6>
 800a05c:	4b52      	ldr	r3, [pc, #328]	; (800a1a8 <UART_SetConfig+0x2d0>)
 800a05e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a062:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a066:	2bc0      	cmp	r3, #192	; 0xc0
 800a068:	d013      	beq.n	800a092 <UART_SetConfig+0x1ba>
 800a06a:	2bc0      	cmp	r3, #192	; 0xc0
 800a06c:	d814      	bhi.n	800a098 <UART_SetConfig+0x1c0>
 800a06e:	2b80      	cmp	r3, #128	; 0x80
 800a070:	d009      	beq.n	800a086 <UART_SetConfig+0x1ae>
 800a072:	2b80      	cmp	r3, #128	; 0x80
 800a074:	d810      	bhi.n	800a098 <UART_SetConfig+0x1c0>
 800a076:	2b00      	cmp	r3, #0
 800a078:	d002      	beq.n	800a080 <UART_SetConfig+0x1a8>
 800a07a:	2b40      	cmp	r3, #64	; 0x40
 800a07c:	d006      	beq.n	800a08c <UART_SetConfig+0x1b4>
 800a07e:	e00b      	b.n	800a098 <UART_SetConfig+0x1c0>
 800a080:	2300      	movs	r3, #0
 800a082:	77fb      	strb	r3, [r7, #31]
 800a084:	e0cb      	b.n	800a21e <UART_SetConfig+0x346>
 800a086:	2302      	movs	r3, #2
 800a088:	77fb      	strb	r3, [r7, #31]
 800a08a:	e0c8      	b.n	800a21e <UART_SetConfig+0x346>
 800a08c:	2304      	movs	r3, #4
 800a08e:	77fb      	strb	r3, [r7, #31]
 800a090:	e0c5      	b.n	800a21e <UART_SetConfig+0x346>
 800a092:	2308      	movs	r3, #8
 800a094:	77fb      	strb	r3, [r7, #31]
 800a096:	e0c2      	b.n	800a21e <UART_SetConfig+0x346>
 800a098:	2310      	movs	r3, #16
 800a09a:	77fb      	strb	r3, [r7, #31]
 800a09c:	e0bf      	b.n	800a21e <UART_SetConfig+0x346>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a45      	ldr	r2, [pc, #276]	; (800a1b8 <UART_SetConfig+0x2e0>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d125      	bne.n	800a0f4 <UART_SetConfig+0x21c>
 800a0a8:	4b3f      	ldr	r3, [pc, #252]	; (800a1a8 <UART_SetConfig+0x2d0>)
 800a0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b6:	d017      	beq.n	800a0e8 <UART_SetConfig+0x210>
 800a0b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0bc:	d817      	bhi.n	800a0ee <UART_SetConfig+0x216>
 800a0be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c2:	d00b      	beq.n	800a0dc <UART_SetConfig+0x204>
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0c8:	d811      	bhi.n	800a0ee <UART_SetConfig+0x216>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d003      	beq.n	800a0d6 <UART_SetConfig+0x1fe>
 800a0ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0d2:	d006      	beq.n	800a0e2 <UART_SetConfig+0x20a>
 800a0d4:	e00b      	b.n	800a0ee <UART_SetConfig+0x216>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	77fb      	strb	r3, [r7, #31]
 800a0da:	e0a0      	b.n	800a21e <UART_SetConfig+0x346>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	77fb      	strb	r3, [r7, #31]
 800a0e0:	e09d      	b.n	800a21e <UART_SetConfig+0x346>
 800a0e2:	2304      	movs	r3, #4
 800a0e4:	77fb      	strb	r3, [r7, #31]
 800a0e6:	e09a      	b.n	800a21e <UART_SetConfig+0x346>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	77fb      	strb	r3, [r7, #31]
 800a0ec:	e097      	b.n	800a21e <UART_SetConfig+0x346>
 800a0ee:	2310      	movs	r3, #16
 800a0f0:	77fb      	strb	r3, [r7, #31]
 800a0f2:	e094      	b.n	800a21e <UART_SetConfig+0x346>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a30      	ldr	r2, [pc, #192]	; (800a1bc <UART_SetConfig+0x2e4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d125      	bne.n	800a14a <UART_SetConfig+0x272>
 800a0fe:	4b2a      	ldr	r3, [pc, #168]	; (800a1a8 <UART_SetConfig+0x2d0>)
 800a100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a104:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a108:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a10c:	d017      	beq.n	800a13e <UART_SetConfig+0x266>
 800a10e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a112:	d817      	bhi.n	800a144 <UART_SetConfig+0x26c>
 800a114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a118:	d00b      	beq.n	800a132 <UART_SetConfig+0x25a>
 800a11a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a11e:	d811      	bhi.n	800a144 <UART_SetConfig+0x26c>
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <UART_SetConfig+0x254>
 800a124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a128:	d006      	beq.n	800a138 <UART_SetConfig+0x260>
 800a12a:	e00b      	b.n	800a144 <UART_SetConfig+0x26c>
 800a12c:	2301      	movs	r3, #1
 800a12e:	77fb      	strb	r3, [r7, #31]
 800a130:	e075      	b.n	800a21e <UART_SetConfig+0x346>
 800a132:	2302      	movs	r3, #2
 800a134:	77fb      	strb	r3, [r7, #31]
 800a136:	e072      	b.n	800a21e <UART_SetConfig+0x346>
 800a138:	2304      	movs	r3, #4
 800a13a:	77fb      	strb	r3, [r7, #31]
 800a13c:	e06f      	b.n	800a21e <UART_SetConfig+0x346>
 800a13e:	2308      	movs	r3, #8
 800a140:	77fb      	strb	r3, [r7, #31]
 800a142:	e06c      	b.n	800a21e <UART_SetConfig+0x346>
 800a144:	2310      	movs	r3, #16
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e069      	b.n	800a21e <UART_SetConfig+0x346>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <UART_SetConfig+0x2e8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d137      	bne.n	800a1c4 <UART_SetConfig+0x2ec>
 800a154:	4b14      	ldr	r3, [pc, #80]	; (800a1a8 <UART_SetConfig+0x2d0>)
 800a156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a15a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a15e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a162:	d017      	beq.n	800a194 <UART_SetConfig+0x2bc>
 800a164:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a168:	d817      	bhi.n	800a19a <UART_SetConfig+0x2c2>
 800a16a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a16e:	d00b      	beq.n	800a188 <UART_SetConfig+0x2b0>
 800a170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a174:	d811      	bhi.n	800a19a <UART_SetConfig+0x2c2>
 800a176:	2b00      	cmp	r3, #0
 800a178:	d003      	beq.n	800a182 <UART_SetConfig+0x2aa>
 800a17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a17e:	d006      	beq.n	800a18e <UART_SetConfig+0x2b6>
 800a180:	e00b      	b.n	800a19a <UART_SetConfig+0x2c2>
 800a182:	2300      	movs	r3, #0
 800a184:	77fb      	strb	r3, [r7, #31]
 800a186:	e04a      	b.n	800a21e <UART_SetConfig+0x346>
 800a188:	2302      	movs	r3, #2
 800a18a:	77fb      	strb	r3, [r7, #31]
 800a18c:	e047      	b.n	800a21e <UART_SetConfig+0x346>
 800a18e:	2304      	movs	r3, #4
 800a190:	77fb      	strb	r3, [r7, #31]
 800a192:	e044      	b.n	800a21e <UART_SetConfig+0x346>
 800a194:	2308      	movs	r3, #8
 800a196:	77fb      	strb	r3, [r7, #31]
 800a198:	e041      	b.n	800a21e <UART_SetConfig+0x346>
 800a19a:	2310      	movs	r3, #16
 800a19c:	77fb      	strb	r3, [r7, #31]
 800a19e:	e03e      	b.n	800a21e <UART_SetConfig+0x346>
 800a1a0:	efff69f3 	.word	0xefff69f3
 800a1a4:	40011000 	.word	0x40011000
 800a1a8:	40023800 	.word	0x40023800
 800a1ac:	40004400 	.word	0x40004400
 800a1b0:	40004800 	.word	0x40004800
 800a1b4:	40004c00 	.word	0x40004c00
 800a1b8:	40005000 	.word	0x40005000
 800a1bc:	40011400 	.word	0x40011400
 800a1c0:	40007800 	.word	0x40007800
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a71      	ldr	r2, [pc, #452]	; (800a390 <UART_SetConfig+0x4b8>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d125      	bne.n	800a21a <UART_SetConfig+0x342>
 800a1ce:	4b71      	ldr	r3, [pc, #452]	; (800a394 <UART_SetConfig+0x4bc>)
 800a1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1dc:	d017      	beq.n	800a20e <UART_SetConfig+0x336>
 800a1de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1e2:	d817      	bhi.n	800a214 <UART_SetConfig+0x33c>
 800a1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1e8:	d00b      	beq.n	800a202 <UART_SetConfig+0x32a>
 800a1ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ee:	d811      	bhi.n	800a214 <UART_SetConfig+0x33c>
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d003      	beq.n	800a1fc <UART_SetConfig+0x324>
 800a1f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1f8:	d006      	beq.n	800a208 <UART_SetConfig+0x330>
 800a1fa:	e00b      	b.n	800a214 <UART_SetConfig+0x33c>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	77fb      	strb	r3, [r7, #31]
 800a200:	e00d      	b.n	800a21e <UART_SetConfig+0x346>
 800a202:	2302      	movs	r3, #2
 800a204:	77fb      	strb	r3, [r7, #31]
 800a206:	e00a      	b.n	800a21e <UART_SetConfig+0x346>
 800a208:	2304      	movs	r3, #4
 800a20a:	77fb      	strb	r3, [r7, #31]
 800a20c:	e007      	b.n	800a21e <UART_SetConfig+0x346>
 800a20e:	2308      	movs	r3, #8
 800a210:	77fb      	strb	r3, [r7, #31]
 800a212:	e004      	b.n	800a21e <UART_SetConfig+0x346>
 800a214:	2310      	movs	r3, #16
 800a216:	77fb      	strb	r3, [r7, #31]
 800a218:	e001      	b.n	800a21e <UART_SetConfig+0x346>
 800a21a:	2310      	movs	r3, #16
 800a21c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a226:	d15b      	bne.n	800a2e0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a228:	7ffb      	ldrb	r3, [r7, #31]
 800a22a:	2b08      	cmp	r3, #8
 800a22c:	d827      	bhi.n	800a27e <UART_SetConfig+0x3a6>
 800a22e:	a201      	add	r2, pc, #4	; (adr r2, 800a234 <UART_SetConfig+0x35c>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a259 	.word	0x0800a259
 800a238:	0800a261 	.word	0x0800a261
 800a23c:	0800a269 	.word	0x0800a269
 800a240:	0800a27f 	.word	0x0800a27f
 800a244:	0800a26f 	.word	0x0800a26f
 800a248:	0800a27f 	.word	0x0800a27f
 800a24c:	0800a27f 	.word	0x0800a27f
 800a250:	0800a27f 	.word	0x0800a27f
 800a254:	0800a277 	.word	0x0800a277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a258:	f7fc ff44 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 800a25c:	61b8      	str	r0, [r7, #24]
        break;
 800a25e:	e013      	b.n	800a288 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a260:	f7fc ff54 	bl	800710c <HAL_RCC_GetPCLK2Freq>
 800a264:	61b8      	str	r0, [r7, #24]
        break;
 800a266:	e00f      	b.n	800a288 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a268:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <UART_SetConfig+0x4c0>)
 800a26a:	61bb      	str	r3, [r7, #24]
        break;
 800a26c:	e00c      	b.n	800a288 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a26e:	f7fc fe4b 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 800a272:	61b8      	str	r0, [r7, #24]
        break;
 800a274:	e008      	b.n	800a288 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a27a:	61bb      	str	r3, [r7, #24]
        break;
 800a27c:	e004      	b.n	800a288 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a282:	2301      	movs	r3, #1
 800a284:	77bb      	strb	r3, [r7, #30]
        break;
 800a286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d074      	beq.n	800a378 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	005a      	lsls	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	441a      	add	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b0f      	cmp	r3, #15
 800a2aa:	d916      	bls.n	800a2da <UART_SetConfig+0x402>
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b2:	d212      	bcs.n	800a2da <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	f023 030f 	bic.w	r3, r3, #15
 800a2bc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	085b      	lsrs	r3, r3, #1
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	89fb      	ldrh	r3, [r7, #14]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	89fa      	ldrh	r2, [r7, #14]
 800a2d6:	60da      	str	r2, [r3, #12]
 800a2d8:	e04e      	b.n	800a378 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	77bb      	strb	r3, [r7, #30]
 800a2de:	e04b      	b.n	800a378 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2e0:	7ffb      	ldrb	r3, [r7, #31]
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d827      	bhi.n	800a336 <UART_SetConfig+0x45e>
 800a2e6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ec <UART_SetConfig+0x414>)
 800a2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	0800a337 	.word	0x0800a337
 800a2fc:	0800a327 	.word	0x0800a327
 800a300:	0800a337 	.word	0x0800a337
 800a304:	0800a337 	.word	0x0800a337
 800a308:	0800a337 	.word	0x0800a337
 800a30c:	0800a32f 	.word	0x0800a32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a310:	f7fc fee8 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 800a314:	61b8      	str	r0, [r7, #24]
        break;
 800a316:	e013      	b.n	800a340 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a318:	f7fc fef8 	bl	800710c <HAL_RCC_GetPCLK2Freq>
 800a31c:	61b8      	str	r0, [r7, #24]
        break;
 800a31e:	e00f      	b.n	800a340 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a320:	4b1d      	ldr	r3, [pc, #116]	; (800a398 <UART_SetConfig+0x4c0>)
 800a322:	61bb      	str	r3, [r7, #24]
        break;
 800a324:	e00c      	b.n	800a340 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a326:	f7fc fdef 	bl	8006f08 <HAL_RCC_GetSysClockFreq>
 800a32a:	61b8      	str	r0, [r7, #24]
        break;
 800a32c:	e008      	b.n	800a340 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a32e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a332:	61bb      	str	r3, [r7, #24]
        break;
 800a334:	e004      	b.n	800a340 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	77bb      	strb	r3, [r7, #30]
        break;
 800a33e:	bf00      	nop
    }

    if (pclk != 0U)
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d018      	beq.n	800a378 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	085a      	lsrs	r2, r3, #1
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	441a      	add	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	fbb2 f3f3 	udiv	r3, r2, r3
 800a358:	b29b      	uxth	r3, r3
 800a35a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d908      	bls.n	800a374 <UART_SetConfig+0x49c>
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a368:	d204      	bcs.n	800a374 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	60da      	str	r2, [r3, #12]
 800a372:	e001      	b.n	800a378 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a384:	7fbb      	ldrb	r3, [r7, #30]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3720      	adds	r7, #32
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40007c00 	.word	0x40007c00
 800a394:	40023800 	.word	0x40023800
 800a398:	00f42400 	.word	0x00f42400

0800a39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00a      	beq.n	800a3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00a      	beq.n	800a3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	430a      	orrs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	430a      	orrs	r2, r1
 800a42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	f003 0310 	and.w	r3, r3, #16
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00a      	beq.n	800a44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d01a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a49a:	d10a      	bne.n	800a4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4f0:	f7fa fd26 	bl	8004f40 <HAL_GetTick>
 800a4f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0308 	and.w	r3, r3, #8
 800a500:	2b08      	cmp	r3, #8
 800a502:	d10e      	bne.n	800a522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f817 	bl	800a546 <UART_WaitOnFlagUntilTimeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e00d      	b.n	800a53e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2220      	movs	r2, #32
 800a52c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	603b      	str	r3, [r7, #0]
 800a552:	4613      	mov	r3, r2
 800a554:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a556:	e05e      	b.n	800a616 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d05a      	beq.n	800a616 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a560:	f7fa fcee 	bl	8004f40 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d302      	bcc.n	800a576 <UART_WaitOnFlagUntilTimeout+0x30>
 800a570:	69bb      	ldr	r3, [r7, #24]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d11b      	bne.n	800a5ae <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a584:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f022 0201 	bic.w	r2, r2, #1
 800a594:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2220      	movs	r2, #32
 800a59a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2220      	movs	r2, #32
 800a5a0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	e043      	b.n	800a636 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0304 	and.w	r3, r3, #4
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d02c      	beq.n	800a616 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	69db      	ldr	r3, [r3, #28]
 800a5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5ca:	d124      	bne.n	800a616 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5e4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f022 0201 	bic.w	r2, r2, #1
 800a5f4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2220      	movs	r2, #32
 800a5fa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2220      	movs	r2, #32
 800a600:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e00f      	b.n	800a636 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	69da      	ldr	r2, [r3, #28]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	4013      	ands	r3, r2
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	429a      	cmp	r2, r3
 800a624:	bf0c      	ite	eq
 800a626:	2301      	moveq	r3, #1
 800a628:	2300      	movne	r3, #0
 800a62a:	b2db      	uxtb	r3, r3
 800a62c:	461a      	mov	r2, r3
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	429a      	cmp	r2, r3
 800a632:	d091      	beq.n	800a558 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a640:	b084      	sub	sp, #16
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	f107 001c 	add.w	r0, r7, #28
 800a64e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a654:	2b01      	cmp	r3, #1
 800a656:	d126      	bne.n	800a6a6 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <USB_CoreInit+0xb8>)
 800a66a:	4013      	ands	r3, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f043 0210 	orr.w	r2, r3, #16
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d105      	bne.n	800a69a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa5a 	bl	800ab54 <USB_CoreReset>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
 800a6a4:	e010      	b.n	800a6c8 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fa4e 	bl	800ab54 <USB_CoreReset>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d10b      	bne.n	800a6e6 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f043 0206 	orr.w	r2, r3, #6
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f043 0220 	orr.w	r2, r3, #32
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6f2:	b004      	add	sp, #16
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	ffbdffbf 	.word	0xffbdffbf

0800a6fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f023 0201 	bic.w	r2, r3, #1
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr

0800a71e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	460b      	mov	r3, r1
 800a728:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d106      	bne.n	800a74a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	60da      	str	r2, [r3, #12]
 800a748:	e00b      	b.n	800a762 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68db      	ldr	r3, [r3, #12]
 800a754:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	60da      	str	r2, [r3, #12]
 800a75c:	e001      	b.n	800a762 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e003      	b.n	800a76a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a762:	2032      	movs	r0, #50	; 0x32
 800a764:	f7fa fbf8 	bl	8004f58 <HAL_Delay>

  return HAL_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
	...

0800a774 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a774:	b084      	sub	sp, #16
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a78e:	2300      	movs	r3, #0
 800a790:	613b      	str	r3, [r7, #16]
 800a792:	e009      	b.n	800a7a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	3340      	adds	r3, #64	; 0x40
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	2200      	movs	r2, #0
 800a7a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	613b      	str	r3, [r7, #16]
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2b0e      	cmp	r3, #14
 800a7ac:	d9f2      	bls.n	800a794 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11c      	bne.n	800a7ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7c2:	f043 0302 	orr.w	r3, r3, #2
 800a7c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	e005      	b.n	800a7fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a800:	461a      	mov	r2, r3
 800a802:	2300      	movs	r3, #0
 800a804:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80c:	4619      	mov	r1, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a814:	461a      	mov	r2, r3
 800a816:	680b      	ldr	r3, [r1, #0]
 800a818:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d10c      	bne.n	800a83a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d104      	bne.n	800a830 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a826:	2100      	movs	r1, #0
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f959 	bl	800aae0 <USB_SetDevSpeed>
 800a82e:	e018      	b.n	800a862 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a830:	2101      	movs	r1, #1
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 f954 	bl	800aae0 <USB_SetDevSpeed>
 800a838:	e013      	b.n	800a862 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800a83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83c:	2b03      	cmp	r3, #3
 800a83e:	d10c      	bne.n	800a85a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d104      	bne.n	800a850 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a846:	2100      	movs	r1, #0
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f949 	bl	800aae0 <USB_SetDevSpeed>
 800a84e:	e008      	b.n	800a862 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a850:	2101      	movs	r1, #1
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f944 	bl	800aae0 <USB_SetDevSpeed>
 800a858:	e003      	b.n	800a862 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a85a:	2103      	movs	r1, #3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 f93f 	bl	800aae0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a862:	2110      	movs	r1, #16
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 f8f3 	bl	800aa50 <USB_FlushTxFifo>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f911 	bl	800aa9c <USB_FlushRxFifo>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d001      	beq.n	800a884 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	461a      	mov	r2, r3
 800a88c:	2300      	movs	r3, #0
 800a88e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a896:	461a      	mov	r2, r3
 800a898:	2300      	movs	r3, #0
 800a89a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	e043      	b.n	800a936 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8c4:	d118      	bne.n	800a8f8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d8:	461a      	mov	r2, r3
 800a8da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a8de:	6013      	str	r3, [r2, #0]
 800a8e0:	e013      	b.n	800a90a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	e008      	b.n	800a90a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	015a      	lsls	r2, r3, #5
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	4413      	add	r3, r2
 800a900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a904:	461a      	mov	r2, r3
 800a906:	2300      	movs	r3, #0
 800a908:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	015a      	lsls	r2, r3, #5
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	4413      	add	r3, r2
 800a912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a916:	461a      	mov	r2, r3
 800a918:	2300      	movs	r3, #0
 800a91a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a928:	461a      	mov	r2, r3
 800a92a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a92e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	3301      	adds	r3, #1
 800a934:	613b      	str	r3, [r7, #16]
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d3b7      	bcc.n	800a8ae <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a93e:	2300      	movs	r3, #0
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	e043      	b.n	800a9cc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a956:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a95a:	d118      	bne.n	800a98e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a96e:	461a      	mov	r2, r3
 800a970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a974:	6013      	str	r3, [r2, #0]
 800a976:	e013      	b.n	800a9a0 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	015a      	lsls	r2, r3, #5
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a984:	461a      	mov	r2, r3
 800a986:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	e008      	b.n	800a9a0 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99a:	461a      	mov	r2, r3
 800a99c:	2300      	movs	r3, #0
 800a99e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	613b      	str	r3, [r7, #16]
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d3b7      	bcc.n	800a944 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a9f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f043 0210 	orr.w	r2, r3, #16
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699a      	ldr	r2, [r3, #24]
 800aa0c:	4b0e      	ldr	r3, [pc, #56]	; (800aa48 <USB_DevInit+0x2d4>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d005      	beq.n	800aa26 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	f043 0208 	orr.w	r2, r3, #8
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d105      	bne.n	800aa38 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	699a      	ldr	r2, [r3, #24]
 800aa30:	4b06      	ldr	r3, [pc, #24]	; (800aa4c <USB_DevInit+0x2d8>)
 800aa32:	4313      	orrs	r3, r2
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa44:	b004      	add	sp, #16
 800aa46:	4770      	bx	lr
 800aa48:	803c3800 	.word	0x803c3800
 800aa4c:	40000004 	.word	0x40000004

0800aa50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	019b      	lsls	r3, r3, #6
 800aa62:	f043 0220 	orr.w	r2, r3, #32
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4a09      	ldr	r2, [pc, #36]	; (800aa98 <USB_FlushTxFifo+0x48>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d901      	bls.n	800aa7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e006      	b.n	800aa8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	691b      	ldr	r3, [r3, #16]
 800aa80:	f003 0320 	and.w	r3, r3, #32
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	d0f0      	beq.n	800aa6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	00030d40 	.word	0x00030d40

0800aa9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2210      	movs	r2, #16
 800aaac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3301      	adds	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4a09      	ldr	r2, [pc, #36]	; (800aadc <USB_FlushRxFifo+0x40>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d901      	bls.n	800aac0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aabc:	2303      	movs	r3, #3
 800aabe:	e006      	b.n	800aace <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f003 0310 	and.w	r3, r3, #16
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d0f0      	beq.n	800aaae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	00030d40 	.word	0x00030d40

0800aae0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	460b      	mov	r3, r1
 800aaea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	78fb      	ldrb	r3, [r7, #3]
 800aafa:	68f9      	ldr	r1, [r7, #12]
 800aafc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab00:	4313      	orrs	r3, r2
 800ab02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b085      	sub	sp, #20
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab2c:	f023 0303 	bic.w	r3, r3, #3
 800ab30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab40:	f043 0302 	orr.w	r3, r3, #2
 800ab44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3301      	adds	r3, #1
 800ab64:	60fb      	str	r3, [r7, #12]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	4a13      	ldr	r2, [pc, #76]	; (800abb8 <USB_CoreReset+0x64>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d901      	bls.n	800ab72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e01b      	b.n	800abaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	daf2      	bge.n	800ab60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	f043 0201 	orr.w	r2, r3, #1
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4a09      	ldr	r2, [pc, #36]	; (800abb8 <USB_CoreReset+0x64>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d901      	bls.n	800ab9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab98:	2303      	movs	r3, #3
 800ab9a:	e006      	b.n	800abaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f003 0301 	and.w	r3, r3, #1
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d0f0      	beq.n	800ab8a <USB_CoreReset+0x36>

  return HAL_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3714      	adds	r7, #20
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	00030d40 	.word	0x00030d40

0800abbc <arm_sin_f32>:
 800abbc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800abc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ac38 <arm_sin_f32+0x7c>
 800abc4:	ee20 7a07 	vmul.f32	s14, s0, s14
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800abd0:	d42c      	bmi.n	800ac2c <arm_sin_f32+0x70>
 800abd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd6:	eddf 6a19 	vldr	s13, [pc, #100]	; 800ac3c <arm_sin_f32+0x80>
 800abda:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abde:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800abe2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800abe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abea:	db01      	blt.n	800abf0 <arm_sin_f32+0x34>
 800abec:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800abf0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800abf4:	4a12      	ldr	r2, [pc, #72]	; (800ac40 <arm_sin_f32+0x84>)
 800abf6:	ee17 3a10 	vmov	r3, s14
 800abfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac02:	ee06 3a90 	vmov	s13, r3
 800ac06:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ac0a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ac0e:	ed91 0a00 	vldr	s0, [r1]
 800ac12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ac16:	edd1 6a01 	vldr	s13, [r1, #4]
 800ac1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac22:	ee27 0a00 	vmul.f32	s0, s14, s0
 800ac26:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ac2a:	4770      	bx	lr
 800ac2c:	ee17 3a90 	vmov	r3, s15
 800ac30:	3b01      	subs	r3, #1
 800ac32:	ee07 3a90 	vmov	s15, r3
 800ac36:	e7cc      	b.n	800abd2 <arm_sin_f32+0x16>
 800ac38:	3e22f983 	.word	0x3e22f983
 800ac3c:	44000000 	.word	0x44000000
 800ac40:	0800eb0c 	.word	0x0800eb0c

0800ac44 <arm_cos_f32>:
 800ac44:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800acb8 <arm_cos_f32+0x74>
 800ac48:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800ac4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ac50:	ee30 0a07 	vadd.f32	s0, s0, s14
 800ac54:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ac58:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ac5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac60:	d504      	bpl.n	800ac6c <arm_cos_f32+0x28>
 800ac62:	ee17 3a90 	vmov	r3, s15
 800ac66:	3b01      	subs	r3, #1
 800ac68:	ee07 3a90 	vmov	s15, r3
 800ac6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac70:	eddf 6a12 	vldr	s13, [pc, #72]	; 800acbc <arm_cos_f32+0x78>
 800ac74:	4a12      	ldr	r2, [pc, #72]	; (800acc0 <arm_cos_f32+0x7c>)
 800ac76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ac7e:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ac82:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800ac86:	ee17 3a90 	vmov	r3, s15
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	edd1 6a00 	vldr	s13, [r1]
 800ac9e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800aca2:	ed91 0a01 	vldr	s0, [r1, #4]
 800aca6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acaa:	ee67 7a80 	vmul.f32	s15, s15, s0
 800acae:	ee27 0a26 	vmul.f32	s0, s14, s13
 800acb2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800acb6:	4770      	bx	lr
 800acb8:	3e22f983 	.word	0x3e22f983
 800acbc:	44000000 	.word	0x44000000
 800acc0:	0800eb0c 	.word	0x0800eb0c

0800acc4 <_Znwj>:
 800acc4:	2801      	cmp	r0, #1
 800acc6:	bf38      	it	cc
 800acc8:	2001      	movcc	r0, #1
 800acca:	b510      	push	{r4, lr}
 800accc:	4604      	mov	r4, r0
 800acce:	4620      	mov	r0, r4
 800acd0:	f000 f906 	bl	800aee0 <malloc>
 800acd4:	b930      	cbnz	r0, 800ace4 <_Znwj+0x20>
 800acd6:	f000 f81b 	bl	800ad10 <_ZSt15get_new_handlerv>
 800acda:	b908      	cbnz	r0, 800ace0 <_Znwj+0x1c>
 800acdc:	f000 f8ce 	bl	800ae7c <abort>
 800ace0:	4780      	blx	r0
 800ace2:	e7f4      	b.n	800acce <_Znwj+0xa>
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__cxa_pure_virtual>:
 800ace6:	b508      	push	{r3, lr}
 800ace8:	f000 f80c 	bl	800ad04 <_ZSt9terminatev>

0800acec <_ZN10__cxxabiv111__terminateEPFvvE>:
 800acec:	b508      	push	{r3, lr}
 800acee:	4780      	blx	r0
 800acf0:	f000 f8c4 	bl	800ae7c <abort>

0800acf4 <_ZSt13get_terminatev>:
 800acf4:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <_ZSt13get_terminatev+0xc>)
 800acf6:	6818      	ldr	r0, [r3, #0]
 800acf8:	f3bf 8f5b 	dmb	ish
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	2000000c 	.word	0x2000000c

0800ad04 <_ZSt9terminatev>:
 800ad04:	b508      	push	{r3, lr}
 800ad06:	f7ff fff5 	bl	800acf4 <_ZSt13get_terminatev>
 800ad0a:	f7ff ffef 	bl	800acec <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800ad10 <_ZSt15get_new_handlerv>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <_ZSt15get_new_handlerv+0xc>)
 800ad12:	6818      	ldr	r0, [r3, #0]
 800ad14:	f3bf 8f5b 	dmb	ish
 800ad18:	4770      	bx	lr
 800ad1a:	bf00      	nop
 800ad1c:	20000210 	.word	0x20000210

0800ad20 <fmodf>:
 800ad20:	b508      	push	{r3, lr}
 800ad22:	ed2d 8b02 	vpush	{d8}
 800ad26:	eef0 8a40 	vmov.f32	s17, s0
 800ad2a:	eeb0 8a60 	vmov.f32	s16, s1
 800ad2e:	f000 f823 	bl	800ad78 <__ieee754_fmodf>
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <fmodf+0x50>)
 800ad34:	f993 3000 	ldrsb.w	r3, [r3]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	d016      	beq.n	800ad6a <fmodf+0x4a>
 800ad3c:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad44:	d611      	bvs.n	800ad6a <fmodf+0x4a>
 800ad46:	eef4 8a68 	vcmp.f32	s17, s17
 800ad4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad4e:	d60c      	bvs.n	800ad6a <fmodf+0x4a>
 800ad50:	eddf 8a08 	vldr	s17, [pc, #32]	; 800ad74 <fmodf+0x54>
 800ad54:	eeb4 8a68 	vcmp.f32	s16, s17
 800ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5c:	d105      	bne.n	800ad6a <fmodf+0x4a>
 800ad5e:	f000 f895 	bl	800ae8c <__errno>
 800ad62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ad66:	2321      	movs	r3, #33	; 0x21
 800ad68:	6003      	str	r3, [r0, #0]
 800ad6a:	ecbd 8b02 	vpop	{d8}
 800ad6e:	bd08      	pop	{r3, pc}
 800ad70:	20000010 	.word	0x20000010
 800ad74:	00000000 	.word	0x00000000

0800ad78 <__ieee754_fmodf>:
 800ad78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad7a:	ee10 6a90 	vmov	r6, s1
 800ad7e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800ad82:	d009      	beq.n	800ad98 <__ieee754_fmodf+0x20>
 800ad84:	ee10 2a10 	vmov	r2, s0
 800ad88:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ad8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ad90:	da02      	bge.n	800ad98 <__ieee754_fmodf+0x20>
 800ad92:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ad96:	dd04      	ble.n	800ada2 <__ieee754_fmodf+0x2a>
 800ad98:	ee60 0a20 	vmul.f32	s1, s0, s1
 800ad9c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800ada0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada2:	42ab      	cmp	r3, r5
 800ada4:	dbfc      	blt.n	800ada0 <__ieee754_fmodf+0x28>
 800ada6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800adaa:	d106      	bne.n	800adba <__ieee754_fmodf+0x42>
 800adac:	4a32      	ldr	r2, [pc, #200]	; (800ae78 <__ieee754_fmodf+0x100>)
 800adae:	0fe3      	lsrs	r3, r4, #31
 800adb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800adb4:	ed93 0a00 	vldr	s0, [r3]
 800adb8:	e7f2      	b.n	800ada0 <__ieee754_fmodf+0x28>
 800adba:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800adbe:	d13f      	bne.n	800ae40 <__ieee754_fmodf+0xc8>
 800adc0:	0219      	lsls	r1, r3, #8
 800adc2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800adc6:	2900      	cmp	r1, #0
 800adc8:	dc37      	bgt.n	800ae3a <__ieee754_fmodf+0xc2>
 800adca:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800adce:	d13d      	bne.n	800ae4c <__ieee754_fmodf+0xd4>
 800add0:	022f      	lsls	r7, r5, #8
 800add2:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800add6:	2f00      	cmp	r7, #0
 800add8:	da35      	bge.n	800ae46 <__ieee754_fmodf+0xce>
 800adda:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800adde:	bfbb      	ittet	lt
 800ade0:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800ade4:	1a12      	sublt	r2, r2, r0
 800ade6:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800adea:	4093      	lsllt	r3, r2
 800adec:	bfa8      	it	ge
 800adee:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800adf2:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800adf6:	bfb5      	itete	lt
 800adf8:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800adfc:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800ae00:	1a52      	sublt	r2, r2, r1
 800ae02:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800ae06:	bfb8      	it	lt
 800ae08:	4095      	lsllt	r5, r2
 800ae0a:	1a40      	subs	r0, r0, r1
 800ae0c:	1b5a      	subs	r2, r3, r5
 800ae0e:	bb00      	cbnz	r0, 800ae52 <__ieee754_fmodf+0xda>
 800ae10:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800ae14:	bf38      	it	cc
 800ae16:	4613      	movcc	r3, r2
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d0c7      	beq.n	800adac <__ieee754_fmodf+0x34>
 800ae1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae20:	db1f      	blt.n	800ae62 <__ieee754_fmodf+0xea>
 800ae22:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800ae26:	db1f      	blt.n	800ae68 <__ieee754_fmodf+0xf0>
 800ae28:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800ae2c:	317f      	adds	r1, #127	; 0x7f
 800ae2e:	4323      	orrs	r3, r4
 800ae30:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800ae34:	ee00 3a10 	vmov	s0, r3
 800ae38:	e7b2      	b.n	800ada0 <__ieee754_fmodf+0x28>
 800ae3a:	3801      	subs	r0, #1
 800ae3c:	0049      	lsls	r1, r1, #1
 800ae3e:	e7c2      	b.n	800adc6 <__ieee754_fmodf+0x4e>
 800ae40:	15d8      	asrs	r0, r3, #23
 800ae42:	387f      	subs	r0, #127	; 0x7f
 800ae44:	e7c1      	b.n	800adca <__ieee754_fmodf+0x52>
 800ae46:	3901      	subs	r1, #1
 800ae48:	007f      	lsls	r7, r7, #1
 800ae4a:	e7c4      	b.n	800add6 <__ieee754_fmodf+0x5e>
 800ae4c:	15e9      	asrs	r1, r5, #23
 800ae4e:	397f      	subs	r1, #127	; 0x7f
 800ae50:	e7c3      	b.n	800adda <__ieee754_fmodf+0x62>
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	da02      	bge.n	800ae5c <__ieee754_fmodf+0xe4>
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	3801      	subs	r0, #1
 800ae5a:	e7d7      	b.n	800ae0c <__ieee754_fmodf+0x94>
 800ae5c:	d0a6      	beq.n	800adac <__ieee754_fmodf+0x34>
 800ae5e:	0053      	lsls	r3, r2, #1
 800ae60:	e7fa      	b.n	800ae58 <__ieee754_fmodf+0xe0>
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	3901      	subs	r1, #1
 800ae66:	e7d9      	b.n	800ae1c <__ieee754_fmodf+0xa4>
 800ae68:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800ae6c:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800ae70:	3182      	adds	r1, #130	; 0x82
 800ae72:	410b      	asrs	r3, r1
 800ae74:	4323      	orrs	r3, r4
 800ae76:	e7dd      	b.n	800ae34 <__ieee754_fmodf+0xbc>
 800ae78:	0800f310 	.word	0x0800f310

0800ae7c <abort>:
 800ae7c:	b508      	push	{r3, lr}
 800ae7e:	2006      	movs	r0, #6
 800ae80:	f000 fe18 	bl	800bab4 <raise>
 800ae84:	2001      	movs	r0, #1
 800ae86:	f7f9 ff1d 	bl	8004cc4 <_exit>
	...

0800ae8c <__errno>:
 800ae8c:	4b01      	ldr	r3, [pc, #4]	; (800ae94 <__errno+0x8>)
 800ae8e:	6818      	ldr	r0, [r3, #0]
 800ae90:	4770      	bx	lr
 800ae92:	bf00      	nop
 800ae94:	20000014 	.word	0x20000014

0800ae98 <__libc_init_array>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	4d0d      	ldr	r5, [pc, #52]	; (800aed0 <__libc_init_array+0x38>)
 800ae9c:	4c0d      	ldr	r4, [pc, #52]	; (800aed4 <__libc_init_array+0x3c>)
 800ae9e:	1b64      	subs	r4, r4, r5
 800aea0:	10a4      	asrs	r4, r4, #2
 800aea2:	2600      	movs	r6, #0
 800aea4:	42a6      	cmp	r6, r4
 800aea6:	d109      	bne.n	800aebc <__libc_init_array+0x24>
 800aea8:	4d0b      	ldr	r5, [pc, #44]	; (800aed8 <__libc_init_array+0x40>)
 800aeaa:	4c0c      	ldr	r4, [pc, #48]	; (800aedc <__libc_init_array+0x44>)
 800aeac:	f002 fd78 	bl	800d9a0 <_init>
 800aeb0:	1b64      	subs	r4, r4, r5
 800aeb2:	10a4      	asrs	r4, r4, #2
 800aeb4:	2600      	movs	r6, #0
 800aeb6:	42a6      	cmp	r6, r4
 800aeb8:	d105      	bne.n	800aec6 <__libc_init_array+0x2e>
 800aeba:	bd70      	pop	{r4, r5, r6, pc}
 800aebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aec0:	4798      	blx	r3
 800aec2:	3601      	adds	r6, #1
 800aec4:	e7ee      	b.n	800aea4 <__libc_init_array+0xc>
 800aec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aeca:	4798      	blx	r3
 800aecc:	3601      	adds	r6, #1
 800aece:	e7f2      	b.n	800aeb6 <__libc_init_array+0x1e>
 800aed0:	0800f704 	.word	0x0800f704
 800aed4:	0800f704 	.word	0x0800f704
 800aed8:	0800f704 	.word	0x0800f704
 800aedc:	0800f708 	.word	0x0800f708

0800aee0 <malloc>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <malloc+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f000 b85b 	b.w	800afa0 <_malloc_r>
 800aeea:	bf00      	nop
 800aeec:	20000014 	.word	0x20000014

0800aef0 <memset>:
 800aef0:	4402      	add	r2, r0
 800aef2:	4603      	mov	r3, r0
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d100      	bne.n	800aefa <memset+0xa>
 800aef8:	4770      	bx	lr
 800aefa:	f803 1b01 	strb.w	r1, [r3], #1
 800aefe:	e7f9      	b.n	800aef4 <memset+0x4>

0800af00 <_free_r>:
 800af00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af02:	2900      	cmp	r1, #0
 800af04:	d048      	beq.n	800af98 <_free_r+0x98>
 800af06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af0a:	9001      	str	r0, [sp, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f1a1 0404 	sub.w	r4, r1, #4
 800af12:	bfb8      	it	lt
 800af14:	18e4      	addlt	r4, r4, r3
 800af16:	f001 ff55 	bl	800cdc4 <__malloc_lock>
 800af1a:	4a20      	ldr	r2, [pc, #128]	; (800af9c <_free_r+0x9c>)
 800af1c:	9801      	ldr	r0, [sp, #4]
 800af1e:	6813      	ldr	r3, [r2, #0]
 800af20:	4615      	mov	r5, r2
 800af22:	b933      	cbnz	r3, 800af32 <_free_r+0x32>
 800af24:	6063      	str	r3, [r4, #4]
 800af26:	6014      	str	r4, [r2, #0]
 800af28:	b003      	add	sp, #12
 800af2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af2e:	f001 bf4f 	b.w	800cdd0 <__malloc_unlock>
 800af32:	42a3      	cmp	r3, r4
 800af34:	d90b      	bls.n	800af4e <_free_r+0x4e>
 800af36:	6821      	ldr	r1, [r4, #0]
 800af38:	1862      	adds	r2, r4, r1
 800af3a:	4293      	cmp	r3, r2
 800af3c:	bf04      	itt	eq
 800af3e:	681a      	ldreq	r2, [r3, #0]
 800af40:	685b      	ldreq	r3, [r3, #4]
 800af42:	6063      	str	r3, [r4, #4]
 800af44:	bf04      	itt	eq
 800af46:	1852      	addeq	r2, r2, r1
 800af48:	6022      	streq	r2, [r4, #0]
 800af4a:	602c      	str	r4, [r5, #0]
 800af4c:	e7ec      	b.n	800af28 <_free_r+0x28>
 800af4e:	461a      	mov	r2, r3
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	b10b      	cbz	r3, 800af58 <_free_r+0x58>
 800af54:	42a3      	cmp	r3, r4
 800af56:	d9fa      	bls.n	800af4e <_free_r+0x4e>
 800af58:	6811      	ldr	r1, [r2, #0]
 800af5a:	1855      	adds	r5, r2, r1
 800af5c:	42a5      	cmp	r5, r4
 800af5e:	d10b      	bne.n	800af78 <_free_r+0x78>
 800af60:	6824      	ldr	r4, [r4, #0]
 800af62:	4421      	add	r1, r4
 800af64:	1854      	adds	r4, r2, r1
 800af66:	42a3      	cmp	r3, r4
 800af68:	6011      	str	r1, [r2, #0]
 800af6a:	d1dd      	bne.n	800af28 <_free_r+0x28>
 800af6c:	681c      	ldr	r4, [r3, #0]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	6053      	str	r3, [r2, #4]
 800af72:	4421      	add	r1, r4
 800af74:	6011      	str	r1, [r2, #0]
 800af76:	e7d7      	b.n	800af28 <_free_r+0x28>
 800af78:	d902      	bls.n	800af80 <_free_r+0x80>
 800af7a:	230c      	movs	r3, #12
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	e7d3      	b.n	800af28 <_free_r+0x28>
 800af80:	6825      	ldr	r5, [r4, #0]
 800af82:	1961      	adds	r1, r4, r5
 800af84:	428b      	cmp	r3, r1
 800af86:	bf04      	itt	eq
 800af88:	6819      	ldreq	r1, [r3, #0]
 800af8a:	685b      	ldreq	r3, [r3, #4]
 800af8c:	6063      	str	r3, [r4, #4]
 800af8e:	bf04      	itt	eq
 800af90:	1949      	addeq	r1, r1, r5
 800af92:	6021      	streq	r1, [r4, #0]
 800af94:	6054      	str	r4, [r2, #4]
 800af96:	e7c7      	b.n	800af28 <_free_r+0x28>
 800af98:	b003      	add	sp, #12
 800af9a:	bd30      	pop	{r4, r5, pc}
 800af9c:	20000214 	.word	0x20000214

0800afa0 <_malloc_r>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	1ccd      	adds	r5, r1, #3
 800afa4:	f025 0503 	bic.w	r5, r5, #3
 800afa8:	3508      	adds	r5, #8
 800afaa:	2d0c      	cmp	r5, #12
 800afac:	bf38      	it	cc
 800afae:	250c      	movcc	r5, #12
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	4606      	mov	r6, r0
 800afb4:	db01      	blt.n	800afba <_malloc_r+0x1a>
 800afb6:	42a9      	cmp	r1, r5
 800afb8:	d903      	bls.n	800afc2 <_malloc_r+0x22>
 800afba:	230c      	movs	r3, #12
 800afbc:	6033      	str	r3, [r6, #0]
 800afbe:	2000      	movs	r0, #0
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afc2:	f001 feff 	bl	800cdc4 <__malloc_lock>
 800afc6:	4921      	ldr	r1, [pc, #132]	; (800b04c <_malloc_r+0xac>)
 800afc8:	680a      	ldr	r2, [r1, #0]
 800afca:	4614      	mov	r4, r2
 800afcc:	b99c      	cbnz	r4, 800aff6 <_malloc_r+0x56>
 800afce:	4f20      	ldr	r7, [pc, #128]	; (800b050 <_malloc_r+0xb0>)
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	b923      	cbnz	r3, 800afde <_malloc_r+0x3e>
 800afd4:	4621      	mov	r1, r4
 800afd6:	4630      	mov	r0, r6
 800afd8:	f000 fd34 	bl	800ba44 <_sbrk_r>
 800afdc:	6038      	str	r0, [r7, #0]
 800afde:	4629      	mov	r1, r5
 800afe0:	4630      	mov	r0, r6
 800afe2:	f000 fd2f 	bl	800ba44 <_sbrk_r>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d123      	bne.n	800b032 <_malloc_r+0x92>
 800afea:	230c      	movs	r3, #12
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	4630      	mov	r0, r6
 800aff0:	f001 feee 	bl	800cdd0 <__malloc_unlock>
 800aff4:	e7e3      	b.n	800afbe <_malloc_r+0x1e>
 800aff6:	6823      	ldr	r3, [r4, #0]
 800aff8:	1b5b      	subs	r3, r3, r5
 800affa:	d417      	bmi.n	800b02c <_malloc_r+0x8c>
 800affc:	2b0b      	cmp	r3, #11
 800affe:	d903      	bls.n	800b008 <_malloc_r+0x68>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	441c      	add	r4, r3
 800b004:	6025      	str	r5, [r4, #0]
 800b006:	e004      	b.n	800b012 <_malloc_r+0x72>
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	42a2      	cmp	r2, r4
 800b00c:	bf0c      	ite	eq
 800b00e:	600b      	streq	r3, [r1, #0]
 800b010:	6053      	strne	r3, [r2, #4]
 800b012:	4630      	mov	r0, r6
 800b014:	f001 fedc 	bl	800cdd0 <__malloc_unlock>
 800b018:	f104 000b 	add.w	r0, r4, #11
 800b01c:	1d23      	adds	r3, r4, #4
 800b01e:	f020 0007 	bic.w	r0, r0, #7
 800b022:	1ac2      	subs	r2, r0, r3
 800b024:	d0cc      	beq.n	800afc0 <_malloc_r+0x20>
 800b026:	1a1b      	subs	r3, r3, r0
 800b028:	50a3      	str	r3, [r4, r2]
 800b02a:	e7c9      	b.n	800afc0 <_malloc_r+0x20>
 800b02c:	4622      	mov	r2, r4
 800b02e:	6864      	ldr	r4, [r4, #4]
 800b030:	e7cc      	b.n	800afcc <_malloc_r+0x2c>
 800b032:	1cc4      	adds	r4, r0, #3
 800b034:	f024 0403 	bic.w	r4, r4, #3
 800b038:	42a0      	cmp	r0, r4
 800b03a:	d0e3      	beq.n	800b004 <_malloc_r+0x64>
 800b03c:	1a21      	subs	r1, r4, r0
 800b03e:	4630      	mov	r0, r6
 800b040:	f000 fd00 	bl	800ba44 <_sbrk_r>
 800b044:	3001      	adds	r0, #1
 800b046:	d1dd      	bne.n	800b004 <_malloc_r+0x64>
 800b048:	e7cf      	b.n	800afea <_malloc_r+0x4a>
 800b04a:	bf00      	nop
 800b04c:	20000214 	.word	0x20000214
 800b050:	20000218 	.word	0x20000218

0800b054 <__cvt>:
 800b054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b058:	ec55 4b10 	vmov	r4, r5, d0
 800b05c:	2d00      	cmp	r5, #0
 800b05e:	460e      	mov	r6, r1
 800b060:	4619      	mov	r1, r3
 800b062:	462b      	mov	r3, r5
 800b064:	bfbb      	ittet	lt
 800b066:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b06a:	461d      	movlt	r5, r3
 800b06c:	2300      	movge	r3, #0
 800b06e:	232d      	movlt	r3, #45	; 0x2d
 800b070:	700b      	strb	r3, [r1, #0]
 800b072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b074:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b078:	4691      	mov	r9, r2
 800b07a:	f023 0820 	bic.w	r8, r3, #32
 800b07e:	bfbc      	itt	lt
 800b080:	4622      	movlt	r2, r4
 800b082:	4614      	movlt	r4, r2
 800b084:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b088:	d005      	beq.n	800b096 <__cvt+0x42>
 800b08a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b08e:	d100      	bne.n	800b092 <__cvt+0x3e>
 800b090:	3601      	adds	r6, #1
 800b092:	2102      	movs	r1, #2
 800b094:	e000      	b.n	800b098 <__cvt+0x44>
 800b096:	2103      	movs	r1, #3
 800b098:	ab03      	add	r3, sp, #12
 800b09a:	9301      	str	r3, [sp, #4]
 800b09c:	ab02      	add	r3, sp, #8
 800b09e:	9300      	str	r3, [sp, #0]
 800b0a0:	ec45 4b10 	vmov	d0, r4, r5
 800b0a4:	4653      	mov	r3, sl
 800b0a6:	4632      	mov	r2, r6
 800b0a8:	f000 fe6e 	bl	800bd88 <_dtoa_r>
 800b0ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	d102      	bne.n	800b0ba <__cvt+0x66>
 800b0b4:	f019 0f01 	tst.w	r9, #1
 800b0b8:	d022      	beq.n	800b100 <__cvt+0xac>
 800b0ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0be:	eb07 0906 	add.w	r9, r7, r6
 800b0c2:	d110      	bne.n	800b0e6 <__cvt+0x92>
 800b0c4:	783b      	ldrb	r3, [r7, #0]
 800b0c6:	2b30      	cmp	r3, #48	; 0x30
 800b0c8:	d10a      	bne.n	800b0e0 <__cvt+0x8c>
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	f7f5 fd21 	bl	8000b18 <__aeabi_dcmpeq>
 800b0d6:	b918      	cbnz	r0, 800b0e0 <__cvt+0x8c>
 800b0d8:	f1c6 0601 	rsb	r6, r6, #1
 800b0dc:	f8ca 6000 	str.w	r6, [sl]
 800b0e0:	f8da 3000 	ldr.w	r3, [sl]
 800b0e4:	4499      	add	r9, r3
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	f7f5 fd13 	bl	8000b18 <__aeabi_dcmpeq>
 800b0f2:	b108      	cbz	r0, 800b0f8 <__cvt+0xa4>
 800b0f4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0f8:	2230      	movs	r2, #48	; 0x30
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	454b      	cmp	r3, r9
 800b0fe:	d307      	bcc.n	800b110 <__cvt+0xbc>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b104:	1bdb      	subs	r3, r3, r7
 800b106:	4638      	mov	r0, r7
 800b108:	6013      	str	r3, [r2, #0]
 800b10a:	b004      	add	sp, #16
 800b10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b110:	1c59      	adds	r1, r3, #1
 800b112:	9103      	str	r1, [sp, #12]
 800b114:	701a      	strb	r2, [r3, #0]
 800b116:	e7f0      	b.n	800b0fa <__cvt+0xa6>

0800b118 <__exponent>:
 800b118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b11a:	4603      	mov	r3, r0
 800b11c:	2900      	cmp	r1, #0
 800b11e:	bfb8      	it	lt
 800b120:	4249      	neglt	r1, r1
 800b122:	f803 2b02 	strb.w	r2, [r3], #2
 800b126:	bfb4      	ite	lt
 800b128:	222d      	movlt	r2, #45	; 0x2d
 800b12a:	222b      	movge	r2, #43	; 0x2b
 800b12c:	2909      	cmp	r1, #9
 800b12e:	7042      	strb	r2, [r0, #1]
 800b130:	dd2a      	ble.n	800b188 <__exponent+0x70>
 800b132:	f10d 0407 	add.w	r4, sp, #7
 800b136:	46a4      	mov	ip, r4
 800b138:	270a      	movs	r7, #10
 800b13a:	46a6      	mov	lr, r4
 800b13c:	460a      	mov	r2, r1
 800b13e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b142:	fb07 1516 	mls	r5, r7, r6, r1
 800b146:	3530      	adds	r5, #48	; 0x30
 800b148:	2a63      	cmp	r2, #99	; 0x63
 800b14a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b14e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b152:	4631      	mov	r1, r6
 800b154:	dcf1      	bgt.n	800b13a <__exponent+0x22>
 800b156:	3130      	adds	r1, #48	; 0x30
 800b158:	f1ae 0502 	sub.w	r5, lr, #2
 800b15c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b160:	1c44      	adds	r4, r0, #1
 800b162:	4629      	mov	r1, r5
 800b164:	4561      	cmp	r1, ip
 800b166:	d30a      	bcc.n	800b17e <__exponent+0x66>
 800b168:	f10d 0209 	add.w	r2, sp, #9
 800b16c:	eba2 020e 	sub.w	r2, r2, lr
 800b170:	4565      	cmp	r5, ip
 800b172:	bf88      	it	hi
 800b174:	2200      	movhi	r2, #0
 800b176:	4413      	add	r3, r2
 800b178:	1a18      	subs	r0, r3, r0
 800b17a:	b003      	add	sp, #12
 800b17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b182:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b186:	e7ed      	b.n	800b164 <__exponent+0x4c>
 800b188:	2330      	movs	r3, #48	; 0x30
 800b18a:	3130      	adds	r1, #48	; 0x30
 800b18c:	7083      	strb	r3, [r0, #2]
 800b18e:	70c1      	strb	r1, [r0, #3]
 800b190:	1d03      	adds	r3, r0, #4
 800b192:	e7f1      	b.n	800b178 <__exponent+0x60>

0800b194 <_printf_float>:
 800b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b198:	ed2d 8b02 	vpush	{d8}
 800b19c:	b08d      	sub	sp, #52	; 0x34
 800b19e:	460c      	mov	r4, r1
 800b1a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	461f      	mov	r7, r3
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	f001 fd91 	bl	800ccd0 <_localeconv_r>
 800b1ae:	f8d0 a000 	ldr.w	sl, [r0]
 800b1b2:	4650      	mov	r0, sl
 800b1b4:	f7f5 f834 	bl	8000220 <strlen>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	9305      	str	r3, [sp, #20]
 800b1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1c8:	3307      	adds	r3, #7
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	f103 0208 	add.w	r2, r3, #8
 800b1d2:	f8c8 2000 	str.w	r2, [r8]
 800b1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1e6:	9307      	str	r3, [sp, #28]
 800b1e8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1ec:	ee08 0a10 	vmov	s16, r0
 800b1f0:	4b9f      	ldr	r3, [pc, #636]	; (800b470 <_printf_float+0x2dc>)
 800b1f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	f7f5 fcbf 	bl	8000b7c <__aeabi_dcmpun>
 800b1fe:	bb88      	cbnz	r0, 800b264 <_printf_float+0xd0>
 800b200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b204:	4b9a      	ldr	r3, [pc, #616]	; (800b470 <_printf_float+0x2dc>)
 800b206:	f04f 32ff 	mov.w	r2, #4294967295
 800b20a:	f7f5 fc99 	bl	8000b40 <__aeabi_dcmple>
 800b20e:	bb48      	cbnz	r0, 800b264 <_printf_float+0xd0>
 800b210:	2200      	movs	r2, #0
 800b212:	2300      	movs	r3, #0
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 fc88 	bl	8000b2c <__aeabi_dcmplt>
 800b21c:	b110      	cbz	r0, 800b224 <_printf_float+0x90>
 800b21e:	232d      	movs	r3, #45	; 0x2d
 800b220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b224:	4b93      	ldr	r3, [pc, #588]	; (800b474 <_printf_float+0x2e0>)
 800b226:	4894      	ldr	r0, [pc, #592]	; (800b478 <_printf_float+0x2e4>)
 800b228:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b22c:	bf94      	ite	ls
 800b22e:	4698      	movls	r8, r3
 800b230:	4680      	movhi	r8, r0
 800b232:	2303      	movs	r3, #3
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	9b05      	ldr	r3, [sp, #20]
 800b238:	f023 0204 	bic.w	r2, r3, #4
 800b23c:	6022      	str	r2, [r4, #0]
 800b23e:	f04f 0900 	mov.w	r9, #0
 800b242:	9700      	str	r7, [sp, #0]
 800b244:	4633      	mov	r3, r6
 800b246:	aa0b      	add	r2, sp, #44	; 0x2c
 800b248:	4621      	mov	r1, r4
 800b24a:	4628      	mov	r0, r5
 800b24c:	f000 f9d8 	bl	800b600 <_printf_common>
 800b250:	3001      	adds	r0, #1
 800b252:	f040 8090 	bne.w	800b376 <_printf_float+0x1e2>
 800b256:	f04f 30ff 	mov.w	r0, #4294967295
 800b25a:	b00d      	add	sp, #52	; 0x34
 800b25c:	ecbd 8b02 	vpop	{d8}
 800b260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	4640      	mov	r0, r8
 800b26a:	4649      	mov	r1, r9
 800b26c:	f7f5 fc86 	bl	8000b7c <__aeabi_dcmpun>
 800b270:	b140      	cbz	r0, 800b284 <_printf_float+0xf0>
 800b272:	464b      	mov	r3, r9
 800b274:	2b00      	cmp	r3, #0
 800b276:	bfbc      	itt	lt
 800b278:	232d      	movlt	r3, #45	; 0x2d
 800b27a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b27e:	487f      	ldr	r0, [pc, #508]	; (800b47c <_printf_float+0x2e8>)
 800b280:	4b7f      	ldr	r3, [pc, #508]	; (800b480 <_printf_float+0x2ec>)
 800b282:	e7d1      	b.n	800b228 <_printf_float+0x94>
 800b284:	6863      	ldr	r3, [r4, #4]
 800b286:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b28a:	9206      	str	r2, [sp, #24]
 800b28c:	1c5a      	adds	r2, r3, #1
 800b28e:	d13f      	bne.n	800b310 <_printf_float+0x17c>
 800b290:	2306      	movs	r3, #6
 800b292:	6063      	str	r3, [r4, #4]
 800b294:	9b05      	ldr	r3, [sp, #20]
 800b296:	6861      	ldr	r1, [r4, #4]
 800b298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b29c:	2300      	movs	r3, #0
 800b29e:	9303      	str	r3, [sp, #12]
 800b2a0:	ab0a      	add	r3, sp, #40	; 0x28
 800b2a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b2a6:	ab09      	add	r3, sp, #36	; 0x24
 800b2a8:	ec49 8b10 	vmov	d0, r8, r9
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	6022      	str	r2, [r4, #0]
 800b2b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f7ff fecd 	bl	800b054 <__cvt>
 800b2ba:	9b06      	ldr	r3, [sp, #24]
 800b2bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2be:	2b47      	cmp	r3, #71	; 0x47
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	d108      	bne.n	800b2d6 <_printf_float+0x142>
 800b2c4:	1cc8      	adds	r0, r1, #3
 800b2c6:	db02      	blt.n	800b2ce <_printf_float+0x13a>
 800b2c8:	6863      	ldr	r3, [r4, #4]
 800b2ca:	4299      	cmp	r1, r3
 800b2cc:	dd41      	ble.n	800b352 <_printf_float+0x1be>
 800b2ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2d2:	fa5f fb8b 	uxtb.w	fp, fp
 800b2d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2da:	d820      	bhi.n	800b31e <_printf_float+0x18a>
 800b2dc:	3901      	subs	r1, #1
 800b2de:	465a      	mov	r2, fp
 800b2e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2e4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2e6:	f7ff ff17 	bl	800b118 <__exponent>
 800b2ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ec:	1813      	adds	r3, r2, r0
 800b2ee:	2a01      	cmp	r2, #1
 800b2f0:	4681      	mov	r9, r0
 800b2f2:	6123      	str	r3, [r4, #16]
 800b2f4:	dc02      	bgt.n	800b2fc <_printf_float+0x168>
 800b2f6:	6822      	ldr	r2, [r4, #0]
 800b2f8:	07d2      	lsls	r2, r2, #31
 800b2fa:	d501      	bpl.n	800b300 <_printf_float+0x16c>
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	6123      	str	r3, [r4, #16]
 800b300:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b304:	2b00      	cmp	r3, #0
 800b306:	d09c      	beq.n	800b242 <_printf_float+0xae>
 800b308:	232d      	movs	r3, #45	; 0x2d
 800b30a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b30e:	e798      	b.n	800b242 <_printf_float+0xae>
 800b310:	9a06      	ldr	r2, [sp, #24]
 800b312:	2a47      	cmp	r2, #71	; 0x47
 800b314:	d1be      	bne.n	800b294 <_printf_float+0x100>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1bc      	bne.n	800b294 <_printf_float+0x100>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e7b9      	b.n	800b292 <_printf_float+0xfe>
 800b31e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b322:	d118      	bne.n	800b356 <_printf_float+0x1c2>
 800b324:	2900      	cmp	r1, #0
 800b326:	6863      	ldr	r3, [r4, #4]
 800b328:	dd0b      	ble.n	800b342 <_printf_float+0x1ae>
 800b32a:	6121      	str	r1, [r4, #16]
 800b32c:	b913      	cbnz	r3, 800b334 <_printf_float+0x1a0>
 800b32e:	6822      	ldr	r2, [r4, #0]
 800b330:	07d0      	lsls	r0, r2, #31
 800b332:	d502      	bpl.n	800b33a <_printf_float+0x1a6>
 800b334:	3301      	adds	r3, #1
 800b336:	440b      	add	r3, r1
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b33c:	f04f 0900 	mov.w	r9, #0
 800b340:	e7de      	b.n	800b300 <_printf_float+0x16c>
 800b342:	b913      	cbnz	r3, 800b34a <_printf_float+0x1b6>
 800b344:	6822      	ldr	r2, [r4, #0]
 800b346:	07d2      	lsls	r2, r2, #31
 800b348:	d501      	bpl.n	800b34e <_printf_float+0x1ba>
 800b34a:	3302      	adds	r3, #2
 800b34c:	e7f4      	b.n	800b338 <_printf_float+0x1a4>
 800b34e:	2301      	movs	r3, #1
 800b350:	e7f2      	b.n	800b338 <_printf_float+0x1a4>
 800b352:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b358:	4299      	cmp	r1, r3
 800b35a:	db05      	blt.n	800b368 <_printf_float+0x1d4>
 800b35c:	6823      	ldr	r3, [r4, #0]
 800b35e:	6121      	str	r1, [r4, #16]
 800b360:	07d8      	lsls	r0, r3, #31
 800b362:	d5ea      	bpl.n	800b33a <_printf_float+0x1a6>
 800b364:	1c4b      	adds	r3, r1, #1
 800b366:	e7e7      	b.n	800b338 <_printf_float+0x1a4>
 800b368:	2900      	cmp	r1, #0
 800b36a:	bfd4      	ite	le
 800b36c:	f1c1 0202 	rsble	r2, r1, #2
 800b370:	2201      	movgt	r2, #1
 800b372:	4413      	add	r3, r2
 800b374:	e7e0      	b.n	800b338 <_printf_float+0x1a4>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	055a      	lsls	r2, r3, #21
 800b37a:	d407      	bmi.n	800b38c <_printf_float+0x1f8>
 800b37c:	6923      	ldr	r3, [r4, #16]
 800b37e:	4642      	mov	r2, r8
 800b380:	4631      	mov	r1, r6
 800b382:	4628      	mov	r0, r5
 800b384:	47b8      	blx	r7
 800b386:	3001      	adds	r0, #1
 800b388:	d12c      	bne.n	800b3e4 <_printf_float+0x250>
 800b38a:	e764      	b.n	800b256 <_printf_float+0xc2>
 800b38c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b390:	f240 80e0 	bls.w	800b554 <_printf_float+0x3c0>
 800b394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b398:	2200      	movs	r2, #0
 800b39a:	2300      	movs	r3, #0
 800b39c:	f7f5 fbbc 	bl	8000b18 <__aeabi_dcmpeq>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d034      	beq.n	800b40e <_printf_float+0x27a>
 800b3a4:	4a37      	ldr	r2, [pc, #220]	; (800b484 <_printf_float+0x2f0>)
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f af51 	beq.w	800b256 <_printf_float+0xc2>
 800b3b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	db02      	blt.n	800b3c2 <_printf_float+0x22e>
 800b3bc:	6823      	ldr	r3, [r4, #0]
 800b3be:	07d8      	lsls	r0, r3, #31
 800b3c0:	d510      	bpl.n	800b3e4 <_printf_float+0x250>
 800b3c2:	ee18 3a10 	vmov	r3, s16
 800b3c6:	4652      	mov	r2, sl
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	47b8      	blx	r7
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f43f af41 	beq.w	800b256 <_printf_float+0xc2>
 800b3d4:	f04f 0800 	mov.w	r8, #0
 800b3d8:	f104 091a 	add.w	r9, r4, #26
 800b3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	4543      	cmp	r3, r8
 800b3e2:	dc09      	bgt.n	800b3f8 <_printf_float+0x264>
 800b3e4:	6823      	ldr	r3, [r4, #0]
 800b3e6:	079b      	lsls	r3, r3, #30
 800b3e8:	f100 8105 	bmi.w	800b5f6 <_printf_float+0x462>
 800b3ec:	68e0      	ldr	r0, [r4, #12]
 800b3ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3f0:	4298      	cmp	r0, r3
 800b3f2:	bfb8      	it	lt
 800b3f4:	4618      	movlt	r0, r3
 800b3f6:	e730      	b.n	800b25a <_printf_float+0xc6>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	464a      	mov	r2, r9
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4628      	mov	r0, r5
 800b400:	47b8      	blx	r7
 800b402:	3001      	adds	r0, #1
 800b404:	f43f af27 	beq.w	800b256 <_printf_float+0xc2>
 800b408:	f108 0801 	add.w	r8, r8, #1
 800b40c:	e7e6      	b.n	800b3dc <_printf_float+0x248>
 800b40e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	dc39      	bgt.n	800b488 <_printf_float+0x2f4>
 800b414:	4a1b      	ldr	r2, [pc, #108]	; (800b484 <_printf_float+0x2f0>)
 800b416:	2301      	movs	r3, #1
 800b418:	4631      	mov	r1, r6
 800b41a:	4628      	mov	r0, r5
 800b41c:	47b8      	blx	r7
 800b41e:	3001      	adds	r0, #1
 800b420:	f43f af19 	beq.w	800b256 <_printf_float+0xc2>
 800b424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b428:	4313      	orrs	r3, r2
 800b42a:	d102      	bne.n	800b432 <_printf_float+0x29e>
 800b42c:	6823      	ldr	r3, [r4, #0]
 800b42e:	07d9      	lsls	r1, r3, #31
 800b430:	d5d8      	bpl.n	800b3e4 <_printf_float+0x250>
 800b432:	ee18 3a10 	vmov	r3, s16
 800b436:	4652      	mov	r2, sl
 800b438:	4631      	mov	r1, r6
 800b43a:	4628      	mov	r0, r5
 800b43c:	47b8      	blx	r7
 800b43e:	3001      	adds	r0, #1
 800b440:	f43f af09 	beq.w	800b256 <_printf_float+0xc2>
 800b444:	f04f 0900 	mov.w	r9, #0
 800b448:	f104 0a1a 	add.w	sl, r4, #26
 800b44c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44e:	425b      	negs	r3, r3
 800b450:	454b      	cmp	r3, r9
 800b452:	dc01      	bgt.n	800b458 <_printf_float+0x2c4>
 800b454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b456:	e792      	b.n	800b37e <_printf_float+0x1ea>
 800b458:	2301      	movs	r3, #1
 800b45a:	4652      	mov	r2, sl
 800b45c:	4631      	mov	r1, r6
 800b45e:	4628      	mov	r0, r5
 800b460:	47b8      	blx	r7
 800b462:	3001      	adds	r0, #1
 800b464:	f43f aef7 	beq.w	800b256 <_printf_float+0xc2>
 800b468:	f109 0901 	add.w	r9, r9, #1
 800b46c:	e7ee      	b.n	800b44c <_printf_float+0x2b8>
 800b46e:	bf00      	nop
 800b470:	7fefffff 	.word	0x7fefffff
 800b474:	0800f31c 	.word	0x0800f31c
 800b478:	0800f320 	.word	0x0800f320
 800b47c:	0800f328 	.word	0x0800f328
 800b480:	0800f324 	.word	0x0800f324
 800b484:	0800f32c 	.word	0x0800f32c
 800b488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b48a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b48c:	429a      	cmp	r2, r3
 800b48e:	bfa8      	it	ge
 800b490:	461a      	movge	r2, r3
 800b492:	2a00      	cmp	r2, #0
 800b494:	4691      	mov	r9, r2
 800b496:	dc37      	bgt.n	800b508 <_printf_float+0x374>
 800b498:	f04f 0b00 	mov.w	fp, #0
 800b49c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4a0:	f104 021a 	add.w	r2, r4, #26
 800b4a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4a6:	9305      	str	r3, [sp, #20]
 800b4a8:	eba3 0309 	sub.w	r3, r3, r9
 800b4ac:	455b      	cmp	r3, fp
 800b4ae:	dc33      	bgt.n	800b518 <_printf_float+0x384>
 800b4b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	db3b      	blt.n	800b530 <_printf_float+0x39c>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	07da      	lsls	r2, r3, #31
 800b4bc:	d438      	bmi.n	800b530 <_printf_float+0x39c>
 800b4be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4c0:	9b05      	ldr	r3, [sp, #20]
 800b4c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	eba2 0901 	sub.w	r9, r2, r1
 800b4ca:	4599      	cmp	r9, r3
 800b4cc:	bfa8      	it	ge
 800b4ce:	4699      	movge	r9, r3
 800b4d0:	f1b9 0f00 	cmp.w	r9, #0
 800b4d4:	dc35      	bgt.n	800b542 <_printf_float+0x3ae>
 800b4d6:	f04f 0800 	mov.w	r8, #0
 800b4da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4de:	f104 0a1a 	add.w	sl, r4, #26
 800b4e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4e6:	1a9b      	subs	r3, r3, r2
 800b4e8:	eba3 0309 	sub.w	r3, r3, r9
 800b4ec:	4543      	cmp	r3, r8
 800b4ee:	f77f af79 	ble.w	800b3e4 <_printf_float+0x250>
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4652      	mov	r2, sl
 800b4f6:	4631      	mov	r1, r6
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	47b8      	blx	r7
 800b4fc:	3001      	adds	r0, #1
 800b4fe:	f43f aeaa 	beq.w	800b256 <_printf_float+0xc2>
 800b502:	f108 0801 	add.w	r8, r8, #1
 800b506:	e7ec      	b.n	800b4e2 <_printf_float+0x34e>
 800b508:	4613      	mov	r3, r2
 800b50a:	4631      	mov	r1, r6
 800b50c:	4642      	mov	r2, r8
 800b50e:	4628      	mov	r0, r5
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	d1c0      	bne.n	800b498 <_printf_float+0x304>
 800b516:	e69e      	b.n	800b256 <_printf_float+0xc2>
 800b518:	2301      	movs	r3, #1
 800b51a:	4631      	mov	r1, r6
 800b51c:	4628      	mov	r0, r5
 800b51e:	9205      	str	r2, [sp, #20]
 800b520:	47b8      	blx	r7
 800b522:	3001      	adds	r0, #1
 800b524:	f43f ae97 	beq.w	800b256 <_printf_float+0xc2>
 800b528:	9a05      	ldr	r2, [sp, #20]
 800b52a:	f10b 0b01 	add.w	fp, fp, #1
 800b52e:	e7b9      	b.n	800b4a4 <_printf_float+0x310>
 800b530:	ee18 3a10 	vmov	r3, s16
 800b534:	4652      	mov	r2, sl
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	d1be      	bne.n	800b4be <_printf_float+0x32a>
 800b540:	e689      	b.n	800b256 <_printf_float+0xc2>
 800b542:	9a05      	ldr	r2, [sp, #20]
 800b544:	464b      	mov	r3, r9
 800b546:	4442      	add	r2, r8
 800b548:	4631      	mov	r1, r6
 800b54a:	4628      	mov	r0, r5
 800b54c:	47b8      	blx	r7
 800b54e:	3001      	adds	r0, #1
 800b550:	d1c1      	bne.n	800b4d6 <_printf_float+0x342>
 800b552:	e680      	b.n	800b256 <_printf_float+0xc2>
 800b554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b556:	2a01      	cmp	r2, #1
 800b558:	dc01      	bgt.n	800b55e <_printf_float+0x3ca>
 800b55a:	07db      	lsls	r3, r3, #31
 800b55c:	d538      	bpl.n	800b5d0 <_printf_float+0x43c>
 800b55e:	2301      	movs	r3, #1
 800b560:	4642      	mov	r2, r8
 800b562:	4631      	mov	r1, r6
 800b564:	4628      	mov	r0, r5
 800b566:	47b8      	blx	r7
 800b568:	3001      	adds	r0, #1
 800b56a:	f43f ae74 	beq.w	800b256 <_printf_float+0xc2>
 800b56e:	ee18 3a10 	vmov	r3, s16
 800b572:	4652      	mov	r2, sl
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	47b8      	blx	r7
 800b57a:	3001      	adds	r0, #1
 800b57c:	f43f ae6b 	beq.w	800b256 <_printf_float+0xc2>
 800b580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b584:	2200      	movs	r2, #0
 800b586:	2300      	movs	r3, #0
 800b588:	f7f5 fac6 	bl	8000b18 <__aeabi_dcmpeq>
 800b58c:	b9d8      	cbnz	r0, 800b5c6 <_printf_float+0x432>
 800b58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b590:	f108 0201 	add.w	r2, r8, #1
 800b594:	3b01      	subs	r3, #1
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	d10e      	bne.n	800b5be <_printf_float+0x42a>
 800b5a0:	e659      	b.n	800b256 <_printf_float+0xc2>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	4631      	mov	r1, r6
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	47b8      	blx	r7
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	f43f ae52 	beq.w	800b256 <_printf_float+0xc2>
 800b5b2:	f108 0801 	add.w	r8, r8, #1
 800b5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	4543      	cmp	r3, r8
 800b5bc:	dcf1      	bgt.n	800b5a2 <_printf_float+0x40e>
 800b5be:	464b      	mov	r3, r9
 800b5c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5c4:	e6dc      	b.n	800b380 <_printf_float+0x1ec>
 800b5c6:	f04f 0800 	mov.w	r8, #0
 800b5ca:	f104 0a1a 	add.w	sl, r4, #26
 800b5ce:	e7f2      	b.n	800b5b6 <_printf_float+0x422>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	e7df      	b.n	800b596 <_printf_float+0x402>
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	464a      	mov	r2, r9
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4628      	mov	r0, r5
 800b5de:	47b8      	blx	r7
 800b5e0:	3001      	adds	r0, #1
 800b5e2:	f43f ae38 	beq.w	800b256 <_printf_float+0xc2>
 800b5e6:	f108 0801 	add.w	r8, r8, #1
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ee:	1a5b      	subs	r3, r3, r1
 800b5f0:	4543      	cmp	r3, r8
 800b5f2:	dcf0      	bgt.n	800b5d6 <_printf_float+0x442>
 800b5f4:	e6fa      	b.n	800b3ec <_printf_float+0x258>
 800b5f6:	f04f 0800 	mov.w	r8, #0
 800b5fa:	f104 0919 	add.w	r9, r4, #25
 800b5fe:	e7f4      	b.n	800b5ea <_printf_float+0x456>

0800b600 <_printf_common>:
 800b600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b604:	4616      	mov	r6, r2
 800b606:	4699      	mov	r9, r3
 800b608:	688a      	ldr	r2, [r1, #8]
 800b60a:	690b      	ldr	r3, [r1, #16]
 800b60c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b610:	4293      	cmp	r3, r2
 800b612:	bfb8      	it	lt
 800b614:	4613      	movlt	r3, r2
 800b616:	6033      	str	r3, [r6, #0]
 800b618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b61c:	4607      	mov	r7, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	b10a      	cbz	r2, 800b626 <_printf_common+0x26>
 800b622:	3301      	adds	r3, #1
 800b624:	6033      	str	r3, [r6, #0]
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	0699      	lsls	r1, r3, #26
 800b62a:	bf42      	ittt	mi
 800b62c:	6833      	ldrmi	r3, [r6, #0]
 800b62e:	3302      	addmi	r3, #2
 800b630:	6033      	strmi	r3, [r6, #0]
 800b632:	6825      	ldr	r5, [r4, #0]
 800b634:	f015 0506 	ands.w	r5, r5, #6
 800b638:	d106      	bne.n	800b648 <_printf_common+0x48>
 800b63a:	f104 0a19 	add.w	sl, r4, #25
 800b63e:	68e3      	ldr	r3, [r4, #12]
 800b640:	6832      	ldr	r2, [r6, #0]
 800b642:	1a9b      	subs	r3, r3, r2
 800b644:	42ab      	cmp	r3, r5
 800b646:	dc26      	bgt.n	800b696 <_printf_common+0x96>
 800b648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b64c:	1e13      	subs	r3, r2, #0
 800b64e:	6822      	ldr	r2, [r4, #0]
 800b650:	bf18      	it	ne
 800b652:	2301      	movne	r3, #1
 800b654:	0692      	lsls	r2, r2, #26
 800b656:	d42b      	bmi.n	800b6b0 <_printf_common+0xb0>
 800b658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b65c:	4649      	mov	r1, r9
 800b65e:	4638      	mov	r0, r7
 800b660:	47c0      	blx	r8
 800b662:	3001      	adds	r0, #1
 800b664:	d01e      	beq.n	800b6a4 <_printf_common+0xa4>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	68e5      	ldr	r5, [r4, #12]
 800b66a:	6832      	ldr	r2, [r6, #0]
 800b66c:	f003 0306 	and.w	r3, r3, #6
 800b670:	2b04      	cmp	r3, #4
 800b672:	bf08      	it	eq
 800b674:	1aad      	subeq	r5, r5, r2
 800b676:	68a3      	ldr	r3, [r4, #8]
 800b678:	6922      	ldr	r2, [r4, #16]
 800b67a:	bf0c      	ite	eq
 800b67c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b680:	2500      	movne	r5, #0
 800b682:	4293      	cmp	r3, r2
 800b684:	bfc4      	itt	gt
 800b686:	1a9b      	subgt	r3, r3, r2
 800b688:	18ed      	addgt	r5, r5, r3
 800b68a:	2600      	movs	r6, #0
 800b68c:	341a      	adds	r4, #26
 800b68e:	42b5      	cmp	r5, r6
 800b690:	d11a      	bne.n	800b6c8 <_printf_common+0xc8>
 800b692:	2000      	movs	r0, #0
 800b694:	e008      	b.n	800b6a8 <_printf_common+0xa8>
 800b696:	2301      	movs	r3, #1
 800b698:	4652      	mov	r2, sl
 800b69a:	4649      	mov	r1, r9
 800b69c:	4638      	mov	r0, r7
 800b69e:	47c0      	blx	r8
 800b6a0:	3001      	adds	r0, #1
 800b6a2:	d103      	bne.n	800b6ac <_printf_common+0xac>
 800b6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ac:	3501      	adds	r5, #1
 800b6ae:	e7c6      	b.n	800b63e <_printf_common+0x3e>
 800b6b0:	18e1      	adds	r1, r4, r3
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	2030      	movs	r0, #48	; 0x30
 800b6b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ba:	4422      	add	r2, r4
 800b6bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6c4:	3302      	adds	r3, #2
 800b6c6:	e7c7      	b.n	800b658 <_printf_common+0x58>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	47c0      	blx	r8
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	d0e6      	beq.n	800b6a4 <_printf_common+0xa4>
 800b6d6:	3601      	adds	r6, #1
 800b6d8:	e7d9      	b.n	800b68e <_printf_common+0x8e>
	...

0800b6dc <_printf_i>:
 800b6dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e0:	460c      	mov	r4, r1
 800b6e2:	4691      	mov	r9, r2
 800b6e4:	7e27      	ldrb	r7, [r4, #24]
 800b6e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b6e8:	2f78      	cmp	r7, #120	; 0x78
 800b6ea:	4680      	mov	r8, r0
 800b6ec:	469a      	mov	sl, r3
 800b6ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6f2:	d807      	bhi.n	800b704 <_printf_i+0x28>
 800b6f4:	2f62      	cmp	r7, #98	; 0x62
 800b6f6:	d80a      	bhi.n	800b70e <_printf_i+0x32>
 800b6f8:	2f00      	cmp	r7, #0
 800b6fa:	f000 80d8 	beq.w	800b8ae <_printf_i+0x1d2>
 800b6fe:	2f58      	cmp	r7, #88	; 0x58
 800b700:	f000 80a3 	beq.w	800b84a <_printf_i+0x16e>
 800b704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b70c:	e03a      	b.n	800b784 <_printf_i+0xa8>
 800b70e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b712:	2b15      	cmp	r3, #21
 800b714:	d8f6      	bhi.n	800b704 <_printf_i+0x28>
 800b716:	a001      	add	r0, pc, #4	; (adr r0, 800b71c <_printf_i+0x40>)
 800b718:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b71c:	0800b775 	.word	0x0800b775
 800b720:	0800b789 	.word	0x0800b789
 800b724:	0800b705 	.word	0x0800b705
 800b728:	0800b705 	.word	0x0800b705
 800b72c:	0800b705 	.word	0x0800b705
 800b730:	0800b705 	.word	0x0800b705
 800b734:	0800b789 	.word	0x0800b789
 800b738:	0800b705 	.word	0x0800b705
 800b73c:	0800b705 	.word	0x0800b705
 800b740:	0800b705 	.word	0x0800b705
 800b744:	0800b705 	.word	0x0800b705
 800b748:	0800b895 	.word	0x0800b895
 800b74c:	0800b7b9 	.word	0x0800b7b9
 800b750:	0800b877 	.word	0x0800b877
 800b754:	0800b705 	.word	0x0800b705
 800b758:	0800b705 	.word	0x0800b705
 800b75c:	0800b8b7 	.word	0x0800b8b7
 800b760:	0800b705 	.word	0x0800b705
 800b764:	0800b7b9 	.word	0x0800b7b9
 800b768:	0800b705 	.word	0x0800b705
 800b76c:	0800b705 	.word	0x0800b705
 800b770:	0800b87f 	.word	0x0800b87f
 800b774:	680b      	ldr	r3, [r1, #0]
 800b776:	1d1a      	adds	r2, r3, #4
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	600a      	str	r2, [r1, #0]
 800b77c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b784:	2301      	movs	r3, #1
 800b786:	e0a3      	b.n	800b8d0 <_printf_i+0x1f4>
 800b788:	6825      	ldr	r5, [r4, #0]
 800b78a:	6808      	ldr	r0, [r1, #0]
 800b78c:	062e      	lsls	r6, r5, #24
 800b78e:	f100 0304 	add.w	r3, r0, #4
 800b792:	d50a      	bpl.n	800b7aa <_printf_i+0xce>
 800b794:	6805      	ldr	r5, [r0, #0]
 800b796:	600b      	str	r3, [r1, #0]
 800b798:	2d00      	cmp	r5, #0
 800b79a:	da03      	bge.n	800b7a4 <_printf_i+0xc8>
 800b79c:	232d      	movs	r3, #45	; 0x2d
 800b79e:	426d      	negs	r5, r5
 800b7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a4:	485e      	ldr	r0, [pc, #376]	; (800b920 <_printf_i+0x244>)
 800b7a6:	230a      	movs	r3, #10
 800b7a8:	e019      	b.n	800b7de <_printf_i+0x102>
 800b7aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7ae:	6805      	ldr	r5, [r0, #0]
 800b7b0:	600b      	str	r3, [r1, #0]
 800b7b2:	bf18      	it	ne
 800b7b4:	b22d      	sxthne	r5, r5
 800b7b6:	e7ef      	b.n	800b798 <_printf_i+0xbc>
 800b7b8:	680b      	ldr	r3, [r1, #0]
 800b7ba:	6825      	ldr	r5, [r4, #0]
 800b7bc:	1d18      	adds	r0, r3, #4
 800b7be:	6008      	str	r0, [r1, #0]
 800b7c0:	0628      	lsls	r0, r5, #24
 800b7c2:	d501      	bpl.n	800b7c8 <_printf_i+0xec>
 800b7c4:	681d      	ldr	r5, [r3, #0]
 800b7c6:	e002      	b.n	800b7ce <_printf_i+0xf2>
 800b7c8:	0669      	lsls	r1, r5, #25
 800b7ca:	d5fb      	bpl.n	800b7c4 <_printf_i+0xe8>
 800b7cc:	881d      	ldrh	r5, [r3, #0]
 800b7ce:	4854      	ldr	r0, [pc, #336]	; (800b920 <_printf_i+0x244>)
 800b7d0:	2f6f      	cmp	r7, #111	; 0x6f
 800b7d2:	bf0c      	ite	eq
 800b7d4:	2308      	moveq	r3, #8
 800b7d6:	230a      	movne	r3, #10
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7de:	6866      	ldr	r6, [r4, #4]
 800b7e0:	60a6      	str	r6, [r4, #8]
 800b7e2:	2e00      	cmp	r6, #0
 800b7e4:	bfa2      	ittt	ge
 800b7e6:	6821      	ldrge	r1, [r4, #0]
 800b7e8:	f021 0104 	bicge.w	r1, r1, #4
 800b7ec:	6021      	strge	r1, [r4, #0]
 800b7ee:	b90d      	cbnz	r5, 800b7f4 <_printf_i+0x118>
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	d04d      	beq.n	800b890 <_printf_i+0x1b4>
 800b7f4:	4616      	mov	r6, r2
 800b7f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7fa:	fb03 5711 	mls	r7, r3, r1, r5
 800b7fe:	5dc7      	ldrb	r7, [r0, r7]
 800b800:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b804:	462f      	mov	r7, r5
 800b806:	42bb      	cmp	r3, r7
 800b808:	460d      	mov	r5, r1
 800b80a:	d9f4      	bls.n	800b7f6 <_printf_i+0x11a>
 800b80c:	2b08      	cmp	r3, #8
 800b80e:	d10b      	bne.n	800b828 <_printf_i+0x14c>
 800b810:	6823      	ldr	r3, [r4, #0]
 800b812:	07df      	lsls	r7, r3, #31
 800b814:	d508      	bpl.n	800b828 <_printf_i+0x14c>
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	6861      	ldr	r1, [r4, #4]
 800b81a:	4299      	cmp	r1, r3
 800b81c:	bfde      	ittt	le
 800b81e:	2330      	movle	r3, #48	; 0x30
 800b820:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b824:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b828:	1b92      	subs	r2, r2, r6
 800b82a:	6122      	str	r2, [r4, #16]
 800b82c:	f8cd a000 	str.w	sl, [sp]
 800b830:	464b      	mov	r3, r9
 800b832:	aa03      	add	r2, sp, #12
 800b834:	4621      	mov	r1, r4
 800b836:	4640      	mov	r0, r8
 800b838:	f7ff fee2 	bl	800b600 <_printf_common>
 800b83c:	3001      	adds	r0, #1
 800b83e:	d14c      	bne.n	800b8da <_printf_i+0x1fe>
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	b004      	add	sp, #16
 800b846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b84a:	4835      	ldr	r0, [pc, #212]	; (800b920 <_printf_i+0x244>)
 800b84c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	680e      	ldr	r6, [r1, #0]
 800b854:	061f      	lsls	r7, r3, #24
 800b856:	f856 5b04 	ldr.w	r5, [r6], #4
 800b85a:	600e      	str	r6, [r1, #0]
 800b85c:	d514      	bpl.n	800b888 <_printf_i+0x1ac>
 800b85e:	07d9      	lsls	r1, r3, #31
 800b860:	bf44      	itt	mi
 800b862:	f043 0320 	orrmi.w	r3, r3, #32
 800b866:	6023      	strmi	r3, [r4, #0]
 800b868:	b91d      	cbnz	r5, 800b872 <_printf_i+0x196>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	f023 0320 	bic.w	r3, r3, #32
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	2310      	movs	r3, #16
 800b874:	e7b0      	b.n	800b7d8 <_printf_i+0xfc>
 800b876:	6823      	ldr	r3, [r4, #0]
 800b878:	f043 0320 	orr.w	r3, r3, #32
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	2378      	movs	r3, #120	; 0x78
 800b880:	4828      	ldr	r0, [pc, #160]	; (800b924 <_printf_i+0x248>)
 800b882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b886:	e7e3      	b.n	800b850 <_printf_i+0x174>
 800b888:	065e      	lsls	r6, r3, #25
 800b88a:	bf48      	it	mi
 800b88c:	b2ad      	uxthmi	r5, r5
 800b88e:	e7e6      	b.n	800b85e <_printf_i+0x182>
 800b890:	4616      	mov	r6, r2
 800b892:	e7bb      	b.n	800b80c <_printf_i+0x130>
 800b894:	680b      	ldr	r3, [r1, #0]
 800b896:	6826      	ldr	r6, [r4, #0]
 800b898:	6960      	ldr	r0, [r4, #20]
 800b89a:	1d1d      	adds	r5, r3, #4
 800b89c:	600d      	str	r5, [r1, #0]
 800b89e:	0635      	lsls	r5, r6, #24
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	d501      	bpl.n	800b8a8 <_printf_i+0x1cc>
 800b8a4:	6018      	str	r0, [r3, #0]
 800b8a6:	e002      	b.n	800b8ae <_printf_i+0x1d2>
 800b8a8:	0671      	lsls	r1, r6, #25
 800b8aa:	d5fb      	bpl.n	800b8a4 <_printf_i+0x1c8>
 800b8ac:	8018      	strh	r0, [r3, #0]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6123      	str	r3, [r4, #16]
 800b8b2:	4616      	mov	r6, r2
 800b8b4:	e7ba      	b.n	800b82c <_printf_i+0x150>
 800b8b6:	680b      	ldr	r3, [r1, #0]
 800b8b8:	1d1a      	adds	r2, r3, #4
 800b8ba:	600a      	str	r2, [r1, #0]
 800b8bc:	681e      	ldr	r6, [r3, #0]
 800b8be:	6862      	ldr	r2, [r4, #4]
 800b8c0:	2100      	movs	r1, #0
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	f7f4 fcb4 	bl	8000230 <memchr>
 800b8c8:	b108      	cbz	r0, 800b8ce <_printf_i+0x1f2>
 800b8ca:	1b80      	subs	r0, r0, r6
 800b8cc:	6060      	str	r0, [r4, #4]
 800b8ce:	6863      	ldr	r3, [r4, #4]
 800b8d0:	6123      	str	r3, [r4, #16]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8d8:	e7a8      	b.n	800b82c <_printf_i+0x150>
 800b8da:	6923      	ldr	r3, [r4, #16]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4649      	mov	r1, r9
 800b8e0:	4640      	mov	r0, r8
 800b8e2:	47d0      	blx	sl
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	d0ab      	beq.n	800b840 <_printf_i+0x164>
 800b8e8:	6823      	ldr	r3, [r4, #0]
 800b8ea:	079b      	lsls	r3, r3, #30
 800b8ec:	d413      	bmi.n	800b916 <_printf_i+0x23a>
 800b8ee:	68e0      	ldr	r0, [r4, #12]
 800b8f0:	9b03      	ldr	r3, [sp, #12]
 800b8f2:	4298      	cmp	r0, r3
 800b8f4:	bfb8      	it	lt
 800b8f6:	4618      	movlt	r0, r3
 800b8f8:	e7a4      	b.n	800b844 <_printf_i+0x168>
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	4649      	mov	r1, r9
 800b900:	4640      	mov	r0, r8
 800b902:	47d0      	blx	sl
 800b904:	3001      	adds	r0, #1
 800b906:	d09b      	beq.n	800b840 <_printf_i+0x164>
 800b908:	3501      	adds	r5, #1
 800b90a:	68e3      	ldr	r3, [r4, #12]
 800b90c:	9903      	ldr	r1, [sp, #12]
 800b90e:	1a5b      	subs	r3, r3, r1
 800b910:	42ab      	cmp	r3, r5
 800b912:	dcf2      	bgt.n	800b8fa <_printf_i+0x21e>
 800b914:	e7eb      	b.n	800b8ee <_printf_i+0x212>
 800b916:	2500      	movs	r5, #0
 800b918:	f104 0619 	add.w	r6, r4, #25
 800b91c:	e7f5      	b.n	800b90a <_printf_i+0x22e>
 800b91e:	bf00      	nop
 800b920:	0800f32e 	.word	0x0800f32e
 800b924:	0800f33f 	.word	0x0800f33f

0800b928 <iprintf>:
 800b928:	b40f      	push	{r0, r1, r2, r3}
 800b92a:	4b0a      	ldr	r3, [pc, #40]	; (800b954 <iprintf+0x2c>)
 800b92c:	b513      	push	{r0, r1, r4, lr}
 800b92e:	681c      	ldr	r4, [r3, #0]
 800b930:	b124      	cbz	r4, 800b93c <iprintf+0x14>
 800b932:	69a3      	ldr	r3, [r4, #24]
 800b934:	b913      	cbnz	r3, 800b93c <iprintf+0x14>
 800b936:	4620      	mov	r0, r4
 800b938:	f001 f92c 	bl	800cb94 <__sinit>
 800b93c:	ab05      	add	r3, sp, #20
 800b93e:	9a04      	ldr	r2, [sp, #16]
 800b940:	68a1      	ldr	r1, [r4, #8]
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	4620      	mov	r0, r4
 800b946:	f001 fdff 	bl	800d548 <_vfiprintf_r>
 800b94a:	b002      	add	sp, #8
 800b94c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b950:	b004      	add	sp, #16
 800b952:	4770      	bx	lr
 800b954:	20000014 	.word	0x20000014

0800b958 <_puts_r>:
 800b958:	b570      	push	{r4, r5, r6, lr}
 800b95a:	460e      	mov	r6, r1
 800b95c:	4605      	mov	r5, r0
 800b95e:	b118      	cbz	r0, 800b968 <_puts_r+0x10>
 800b960:	6983      	ldr	r3, [r0, #24]
 800b962:	b90b      	cbnz	r3, 800b968 <_puts_r+0x10>
 800b964:	f001 f916 	bl	800cb94 <__sinit>
 800b968:	69ab      	ldr	r3, [r5, #24]
 800b96a:	68ac      	ldr	r4, [r5, #8]
 800b96c:	b913      	cbnz	r3, 800b974 <_puts_r+0x1c>
 800b96e:	4628      	mov	r0, r5
 800b970:	f001 f910 	bl	800cb94 <__sinit>
 800b974:	4b2c      	ldr	r3, [pc, #176]	; (800ba28 <_puts_r+0xd0>)
 800b976:	429c      	cmp	r4, r3
 800b978:	d120      	bne.n	800b9bc <_puts_r+0x64>
 800b97a:	686c      	ldr	r4, [r5, #4]
 800b97c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d405      	bmi.n	800b98e <_puts_r+0x36>
 800b982:	89a3      	ldrh	r3, [r4, #12]
 800b984:	0598      	lsls	r0, r3, #22
 800b986:	d402      	bmi.n	800b98e <_puts_r+0x36>
 800b988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b98a:	f001 f9a6 	bl	800ccda <__retarget_lock_acquire_recursive>
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	0719      	lsls	r1, r3, #28
 800b992:	d51d      	bpl.n	800b9d0 <_puts_r+0x78>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	b1db      	cbz	r3, 800b9d0 <_puts_r+0x78>
 800b998:	3e01      	subs	r6, #1
 800b99a:	68a3      	ldr	r3, [r4, #8]
 800b99c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	60a3      	str	r3, [r4, #8]
 800b9a4:	bb39      	cbnz	r1, 800b9f6 <_puts_r+0x9e>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	da38      	bge.n	800ba1c <_puts_r+0xc4>
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	210a      	movs	r1, #10
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f89c 	bl	800baec <__swbuf_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d011      	beq.n	800b9dc <_puts_r+0x84>
 800b9b8:	250a      	movs	r5, #10
 800b9ba:	e011      	b.n	800b9e0 <_puts_r+0x88>
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <_puts_r+0xd4>)
 800b9be:	429c      	cmp	r4, r3
 800b9c0:	d101      	bne.n	800b9c6 <_puts_r+0x6e>
 800b9c2:	68ac      	ldr	r4, [r5, #8]
 800b9c4:	e7da      	b.n	800b97c <_puts_r+0x24>
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <_puts_r+0xd8>)
 800b9c8:	429c      	cmp	r4, r3
 800b9ca:	bf08      	it	eq
 800b9cc:	68ec      	ldreq	r4, [r5, #12]
 800b9ce:	e7d5      	b.n	800b97c <_puts_r+0x24>
 800b9d0:	4621      	mov	r1, r4
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f8dc 	bl	800bb90 <__swsetup_r>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d0dd      	beq.n	800b998 <_puts_r+0x40>
 800b9dc:	f04f 35ff 	mov.w	r5, #4294967295
 800b9e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9e2:	07da      	lsls	r2, r3, #31
 800b9e4:	d405      	bmi.n	800b9f2 <_puts_r+0x9a>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	059b      	lsls	r3, r3, #22
 800b9ea:	d402      	bmi.n	800b9f2 <_puts_r+0x9a>
 800b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ee:	f001 f975 	bl	800ccdc <__retarget_lock_release_recursive>
 800b9f2:	4628      	mov	r0, r5
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	da04      	bge.n	800ba04 <_puts_r+0xac>
 800b9fa:	69a2      	ldr	r2, [r4, #24]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	dc06      	bgt.n	800ba0e <_puts_r+0xb6>
 800ba00:	290a      	cmp	r1, #10
 800ba02:	d004      	beq.n	800ba0e <_puts_r+0xb6>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	6022      	str	r2, [r4, #0]
 800ba0a:	7019      	strb	r1, [r3, #0]
 800ba0c:	e7c5      	b.n	800b99a <_puts_r+0x42>
 800ba0e:	4622      	mov	r2, r4
 800ba10:	4628      	mov	r0, r5
 800ba12:	f000 f86b 	bl	800baec <__swbuf_r>
 800ba16:	3001      	adds	r0, #1
 800ba18:	d1bf      	bne.n	800b99a <_puts_r+0x42>
 800ba1a:	e7df      	b.n	800b9dc <_puts_r+0x84>
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	250a      	movs	r5, #10
 800ba20:	1c5a      	adds	r2, r3, #1
 800ba22:	6022      	str	r2, [r4, #0]
 800ba24:	701d      	strb	r5, [r3, #0]
 800ba26:	e7db      	b.n	800b9e0 <_puts_r+0x88>
 800ba28:	0800f404 	.word	0x0800f404
 800ba2c:	0800f424 	.word	0x0800f424
 800ba30:	0800f3e4 	.word	0x0800f3e4

0800ba34 <puts>:
 800ba34:	4b02      	ldr	r3, [pc, #8]	; (800ba40 <puts+0xc>)
 800ba36:	4601      	mov	r1, r0
 800ba38:	6818      	ldr	r0, [r3, #0]
 800ba3a:	f7ff bf8d 	b.w	800b958 <_puts_r>
 800ba3e:	bf00      	nop
 800ba40:	20000014 	.word	0x20000014

0800ba44 <_sbrk_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d06      	ldr	r5, [pc, #24]	; (800ba60 <_sbrk_r+0x1c>)
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	4608      	mov	r0, r1
 800ba4e:	602b      	str	r3, [r5, #0]
 800ba50:	f7f9 f9b0 	bl	8004db4 <_sbrk>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_sbrk_r+0x1a>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_sbrk_r+0x1a>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	200008b0 	.word	0x200008b0

0800ba64 <_raise_r>:
 800ba64:	291f      	cmp	r1, #31
 800ba66:	b538      	push	{r3, r4, r5, lr}
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	d904      	bls.n	800ba78 <_raise_r+0x14>
 800ba6e:	2316      	movs	r3, #22
 800ba70:	6003      	str	r3, [r0, #0]
 800ba72:	f04f 30ff 	mov.w	r0, #4294967295
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba7a:	b112      	cbz	r2, 800ba82 <_raise_r+0x1e>
 800ba7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba80:	b94b      	cbnz	r3, 800ba96 <_raise_r+0x32>
 800ba82:	4620      	mov	r0, r4
 800ba84:	f000 f830 	bl	800bae8 <_getpid_r>
 800ba88:	462a      	mov	r2, r5
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba92:	f000 b817 	b.w	800bac4 <_kill_r>
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d00a      	beq.n	800bab0 <_raise_r+0x4c>
 800ba9a:	1c59      	adds	r1, r3, #1
 800ba9c:	d103      	bne.n	800baa6 <_raise_r+0x42>
 800ba9e:	2316      	movs	r3, #22
 800baa0:	6003      	str	r3, [r0, #0]
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7e7      	b.n	800ba76 <_raise_r+0x12>
 800baa6:	2400      	movs	r4, #0
 800baa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baac:	4628      	mov	r0, r5
 800baae:	4798      	blx	r3
 800bab0:	2000      	movs	r0, #0
 800bab2:	e7e0      	b.n	800ba76 <_raise_r+0x12>

0800bab4 <raise>:
 800bab4:	4b02      	ldr	r3, [pc, #8]	; (800bac0 <raise+0xc>)
 800bab6:	4601      	mov	r1, r0
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	f7ff bfd3 	b.w	800ba64 <_raise_r>
 800babe:	bf00      	nop
 800bac0:	20000014 	.word	0x20000014

0800bac4 <_kill_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d07      	ldr	r5, [pc, #28]	; (800bae4 <_kill_r+0x20>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	4611      	mov	r1, r2
 800bad0:	602b      	str	r3, [r5, #0]
 800bad2:	f7f9 f8e7 	bl	8004ca4 <_kill>
 800bad6:	1c43      	adds	r3, r0, #1
 800bad8:	d102      	bne.n	800bae0 <_kill_r+0x1c>
 800bada:	682b      	ldr	r3, [r5, #0]
 800badc:	b103      	cbz	r3, 800bae0 <_kill_r+0x1c>
 800bade:	6023      	str	r3, [r4, #0]
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	200008b0 	.word	0x200008b0

0800bae8 <_getpid_r>:
 800bae8:	f7f9 b8d4 	b.w	8004c94 <_getpid>

0800baec <__swbuf_r>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	460e      	mov	r6, r1
 800baf0:	4614      	mov	r4, r2
 800baf2:	4605      	mov	r5, r0
 800baf4:	b118      	cbz	r0, 800bafe <__swbuf_r+0x12>
 800baf6:	6983      	ldr	r3, [r0, #24]
 800baf8:	b90b      	cbnz	r3, 800bafe <__swbuf_r+0x12>
 800bafa:	f001 f84b 	bl	800cb94 <__sinit>
 800bafe:	4b21      	ldr	r3, [pc, #132]	; (800bb84 <__swbuf_r+0x98>)
 800bb00:	429c      	cmp	r4, r3
 800bb02:	d12b      	bne.n	800bb5c <__swbuf_r+0x70>
 800bb04:	686c      	ldr	r4, [r5, #4]
 800bb06:	69a3      	ldr	r3, [r4, #24]
 800bb08:	60a3      	str	r3, [r4, #8]
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	071a      	lsls	r2, r3, #28
 800bb0e:	d52f      	bpl.n	800bb70 <__swbuf_r+0x84>
 800bb10:	6923      	ldr	r3, [r4, #16]
 800bb12:	b36b      	cbz	r3, 800bb70 <__swbuf_r+0x84>
 800bb14:	6923      	ldr	r3, [r4, #16]
 800bb16:	6820      	ldr	r0, [r4, #0]
 800bb18:	1ac0      	subs	r0, r0, r3
 800bb1a:	6963      	ldr	r3, [r4, #20]
 800bb1c:	b2f6      	uxtb	r6, r6
 800bb1e:	4283      	cmp	r3, r0
 800bb20:	4637      	mov	r7, r6
 800bb22:	dc04      	bgt.n	800bb2e <__swbuf_r+0x42>
 800bb24:	4621      	mov	r1, r4
 800bb26:	4628      	mov	r0, r5
 800bb28:	f000 ffa0 	bl	800ca6c <_fflush_r>
 800bb2c:	bb30      	cbnz	r0, 800bb7c <__swbuf_r+0x90>
 800bb2e:	68a3      	ldr	r3, [r4, #8]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	60a3      	str	r3, [r4, #8]
 800bb34:	6823      	ldr	r3, [r4, #0]
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	6022      	str	r2, [r4, #0]
 800bb3a:	701e      	strb	r6, [r3, #0]
 800bb3c:	6963      	ldr	r3, [r4, #20]
 800bb3e:	3001      	adds	r0, #1
 800bb40:	4283      	cmp	r3, r0
 800bb42:	d004      	beq.n	800bb4e <__swbuf_r+0x62>
 800bb44:	89a3      	ldrh	r3, [r4, #12]
 800bb46:	07db      	lsls	r3, r3, #31
 800bb48:	d506      	bpl.n	800bb58 <__swbuf_r+0x6c>
 800bb4a:	2e0a      	cmp	r6, #10
 800bb4c:	d104      	bne.n	800bb58 <__swbuf_r+0x6c>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4628      	mov	r0, r5
 800bb52:	f000 ff8b 	bl	800ca6c <_fflush_r>
 800bb56:	b988      	cbnz	r0, 800bb7c <__swbuf_r+0x90>
 800bb58:	4638      	mov	r0, r7
 800bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb5c:	4b0a      	ldr	r3, [pc, #40]	; (800bb88 <__swbuf_r+0x9c>)
 800bb5e:	429c      	cmp	r4, r3
 800bb60:	d101      	bne.n	800bb66 <__swbuf_r+0x7a>
 800bb62:	68ac      	ldr	r4, [r5, #8]
 800bb64:	e7cf      	b.n	800bb06 <__swbuf_r+0x1a>
 800bb66:	4b09      	ldr	r3, [pc, #36]	; (800bb8c <__swbuf_r+0xa0>)
 800bb68:	429c      	cmp	r4, r3
 800bb6a:	bf08      	it	eq
 800bb6c:	68ec      	ldreq	r4, [r5, #12]
 800bb6e:	e7ca      	b.n	800bb06 <__swbuf_r+0x1a>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4628      	mov	r0, r5
 800bb74:	f000 f80c 	bl	800bb90 <__swsetup_r>
 800bb78:	2800      	cmp	r0, #0
 800bb7a:	d0cb      	beq.n	800bb14 <__swbuf_r+0x28>
 800bb7c:	f04f 37ff 	mov.w	r7, #4294967295
 800bb80:	e7ea      	b.n	800bb58 <__swbuf_r+0x6c>
 800bb82:	bf00      	nop
 800bb84:	0800f404 	.word	0x0800f404
 800bb88:	0800f424 	.word	0x0800f424
 800bb8c:	0800f3e4 	.word	0x0800f3e4

0800bb90 <__swsetup_r>:
 800bb90:	4b32      	ldr	r3, [pc, #200]	; (800bc5c <__swsetup_r+0xcc>)
 800bb92:	b570      	push	{r4, r5, r6, lr}
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	4606      	mov	r6, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	b125      	cbz	r5, 800bba6 <__swsetup_r+0x16>
 800bb9c:	69ab      	ldr	r3, [r5, #24]
 800bb9e:	b913      	cbnz	r3, 800bba6 <__swsetup_r+0x16>
 800bba0:	4628      	mov	r0, r5
 800bba2:	f000 fff7 	bl	800cb94 <__sinit>
 800bba6:	4b2e      	ldr	r3, [pc, #184]	; (800bc60 <__swsetup_r+0xd0>)
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	d10f      	bne.n	800bbcc <__swsetup_r+0x3c>
 800bbac:	686c      	ldr	r4, [r5, #4]
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb4:	0719      	lsls	r1, r3, #28
 800bbb6:	d42c      	bmi.n	800bc12 <__swsetup_r+0x82>
 800bbb8:	06dd      	lsls	r5, r3, #27
 800bbba:	d411      	bmi.n	800bbe0 <__swsetup_r+0x50>
 800bbbc:	2309      	movs	r3, #9
 800bbbe:	6033      	str	r3, [r6, #0]
 800bbc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	e03e      	b.n	800bc4a <__swsetup_r+0xba>
 800bbcc:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <__swsetup_r+0xd4>)
 800bbce:	429c      	cmp	r4, r3
 800bbd0:	d101      	bne.n	800bbd6 <__swsetup_r+0x46>
 800bbd2:	68ac      	ldr	r4, [r5, #8]
 800bbd4:	e7eb      	b.n	800bbae <__swsetup_r+0x1e>
 800bbd6:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <__swsetup_r+0xd8>)
 800bbd8:	429c      	cmp	r4, r3
 800bbda:	bf08      	it	eq
 800bbdc:	68ec      	ldreq	r4, [r5, #12]
 800bbde:	e7e6      	b.n	800bbae <__swsetup_r+0x1e>
 800bbe0:	0758      	lsls	r0, r3, #29
 800bbe2:	d512      	bpl.n	800bc0a <__swsetup_r+0x7a>
 800bbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbe6:	b141      	cbz	r1, 800bbfa <__swsetup_r+0x6a>
 800bbe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d002      	beq.n	800bbf6 <__swsetup_r+0x66>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7ff f985 	bl	800af00 <_free_r>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	2300      	movs	r3, #0
 800bc04:	6063      	str	r3, [r4, #4]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	b94b      	cbnz	r3, 800bc2a <__swsetup_r+0x9a>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc20:	d003      	beq.n	800bc2a <__swsetup_r+0x9a>
 800bc22:	4621      	mov	r1, r4
 800bc24:	4630      	mov	r0, r6
 800bc26:	f001 f87f 	bl	800cd28 <__smakebuf_r>
 800bc2a:	89a0      	ldrh	r0, [r4, #12]
 800bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc30:	f010 0301 	ands.w	r3, r0, #1
 800bc34:	d00a      	beq.n	800bc4c <__swsetup_r+0xbc>
 800bc36:	2300      	movs	r3, #0
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	6963      	ldr	r3, [r4, #20]
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	61a3      	str	r3, [r4, #24]
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	b943      	cbnz	r3, 800bc56 <__swsetup_r+0xc6>
 800bc44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc48:	d1ba      	bne.n	800bbc0 <__swsetup_r+0x30>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	0781      	lsls	r1, r0, #30
 800bc4e:	bf58      	it	pl
 800bc50:	6963      	ldrpl	r3, [r4, #20]
 800bc52:	60a3      	str	r3, [r4, #8]
 800bc54:	e7f4      	b.n	800bc40 <__swsetup_r+0xb0>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7f7      	b.n	800bc4a <__swsetup_r+0xba>
 800bc5a:	bf00      	nop
 800bc5c:	20000014 	.word	0x20000014
 800bc60:	0800f404 	.word	0x0800f404
 800bc64:	0800f424 	.word	0x0800f424
 800bc68:	0800f3e4 	.word	0x0800f3e4

0800bc6c <quorem>:
 800bc6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	6903      	ldr	r3, [r0, #16]
 800bc72:	690c      	ldr	r4, [r1, #16]
 800bc74:	42a3      	cmp	r3, r4
 800bc76:	4607      	mov	r7, r0
 800bc78:	f2c0 8081 	blt.w	800bd7e <quorem+0x112>
 800bc7c:	3c01      	subs	r4, #1
 800bc7e:	f101 0814 	add.w	r8, r1, #20
 800bc82:	f100 0514 	add.w	r5, r0, #20
 800bc86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc8a:	9301      	str	r3, [sp, #4]
 800bc8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc94:	3301      	adds	r3, #1
 800bc96:	429a      	cmp	r2, r3
 800bc98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bca0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bca4:	d331      	bcc.n	800bd0a <quorem+0x9e>
 800bca6:	f04f 0e00 	mov.w	lr, #0
 800bcaa:	4640      	mov	r0, r8
 800bcac:	46ac      	mov	ip, r5
 800bcae:	46f2      	mov	sl, lr
 800bcb0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bcb4:	b293      	uxth	r3, r2
 800bcb6:	fb06 e303 	mla	r3, r6, r3, lr
 800bcba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	ebaa 0303 	sub.w	r3, sl, r3
 800bcc4:	0c12      	lsrs	r2, r2, #16
 800bcc6:	f8dc a000 	ldr.w	sl, [ip]
 800bcca:	fb06 e202 	mla	r2, r6, r2, lr
 800bcce:	fa13 f38a 	uxtah	r3, r3, sl
 800bcd2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcd6:	fa1f fa82 	uxth.w	sl, r2
 800bcda:	f8dc 2000 	ldr.w	r2, [ip]
 800bcde:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800bce2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcec:	4581      	cmp	r9, r0
 800bcee:	f84c 3b04 	str.w	r3, [ip], #4
 800bcf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcf6:	d2db      	bcs.n	800bcb0 <quorem+0x44>
 800bcf8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bcfc:	b92b      	cbnz	r3, 800bd0a <quorem+0x9e>
 800bcfe:	9b01      	ldr	r3, [sp, #4]
 800bd00:	3b04      	subs	r3, #4
 800bd02:	429d      	cmp	r5, r3
 800bd04:	461a      	mov	r2, r3
 800bd06:	d32e      	bcc.n	800bd66 <quorem+0xfa>
 800bd08:	613c      	str	r4, [r7, #16]
 800bd0a:	4638      	mov	r0, r7
 800bd0c:	f001 fae4 	bl	800d2d8 <__mcmp>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	db24      	blt.n	800bd5e <quorem+0xf2>
 800bd14:	3601      	adds	r6, #1
 800bd16:	4628      	mov	r0, r5
 800bd18:	f04f 0c00 	mov.w	ip, #0
 800bd1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd20:	f8d0 e000 	ldr.w	lr, [r0]
 800bd24:	b293      	uxth	r3, r2
 800bd26:	ebac 0303 	sub.w	r3, ip, r3
 800bd2a:	0c12      	lsrs	r2, r2, #16
 800bd2c:	fa13 f38e 	uxtah	r3, r3, lr
 800bd30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd3e:	45c1      	cmp	r9, r8
 800bd40:	f840 3b04 	str.w	r3, [r0], #4
 800bd44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd48:	d2e8      	bcs.n	800bd1c <quorem+0xb0>
 800bd4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd52:	b922      	cbnz	r2, 800bd5e <quorem+0xf2>
 800bd54:	3b04      	subs	r3, #4
 800bd56:	429d      	cmp	r5, r3
 800bd58:	461a      	mov	r2, r3
 800bd5a:	d30a      	bcc.n	800bd72 <quorem+0x106>
 800bd5c:	613c      	str	r4, [r7, #16]
 800bd5e:	4630      	mov	r0, r6
 800bd60:	b003      	add	sp, #12
 800bd62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd66:	6812      	ldr	r2, [r2, #0]
 800bd68:	3b04      	subs	r3, #4
 800bd6a:	2a00      	cmp	r2, #0
 800bd6c:	d1cc      	bne.n	800bd08 <quorem+0x9c>
 800bd6e:	3c01      	subs	r4, #1
 800bd70:	e7c7      	b.n	800bd02 <quorem+0x96>
 800bd72:	6812      	ldr	r2, [r2, #0]
 800bd74:	3b04      	subs	r3, #4
 800bd76:	2a00      	cmp	r2, #0
 800bd78:	d1f0      	bne.n	800bd5c <quorem+0xf0>
 800bd7a:	3c01      	subs	r4, #1
 800bd7c:	e7eb      	b.n	800bd56 <quorem+0xea>
 800bd7e:	2000      	movs	r0, #0
 800bd80:	e7ee      	b.n	800bd60 <quorem+0xf4>
 800bd82:	0000      	movs	r0, r0
 800bd84:	0000      	movs	r0, r0
	...

0800bd88 <_dtoa_r>:
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8c:	ed2d 8b02 	vpush	{d8}
 800bd90:	ec57 6b10 	vmov	r6, r7, d0
 800bd94:	b095      	sub	sp, #84	; 0x54
 800bd96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd9c:	9105      	str	r1, [sp, #20]
 800bd9e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bda2:	4604      	mov	r4, r0
 800bda4:	9209      	str	r2, [sp, #36]	; 0x24
 800bda6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bda8:	b975      	cbnz	r5, 800bdc8 <_dtoa_r+0x40>
 800bdaa:	2010      	movs	r0, #16
 800bdac:	f7ff f898 	bl	800aee0 <malloc>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	6260      	str	r0, [r4, #36]	; 0x24
 800bdb4:	b920      	cbnz	r0, 800bdc0 <_dtoa_r+0x38>
 800bdb6:	4bb2      	ldr	r3, [pc, #712]	; (800c080 <_dtoa_r+0x2f8>)
 800bdb8:	21ea      	movs	r1, #234	; 0xea
 800bdba:	48b2      	ldr	r0, [pc, #712]	; (800c084 <_dtoa_r+0x2fc>)
 800bdbc:	f001 fd4a 	bl	800d854 <__assert_func>
 800bdc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdc4:	6005      	str	r5, [r0, #0]
 800bdc6:	60c5      	str	r5, [r0, #12]
 800bdc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdca:	6819      	ldr	r1, [r3, #0]
 800bdcc:	b151      	cbz	r1, 800bde4 <_dtoa_r+0x5c>
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	604a      	str	r2, [r1, #4]
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	4093      	lsls	r3, r2
 800bdd6:	608b      	str	r3, [r1, #8]
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f001 f83f 	bl	800ce5c <_Bfree>
 800bdde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bde0:	2200      	movs	r2, #0
 800bde2:	601a      	str	r2, [r3, #0]
 800bde4:	1e3b      	subs	r3, r7, #0
 800bde6:	bfb9      	ittee	lt
 800bde8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdec:	9303      	strlt	r3, [sp, #12]
 800bdee:	2300      	movge	r3, #0
 800bdf0:	f8c8 3000 	strge.w	r3, [r8]
 800bdf4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800bdf8:	4ba3      	ldr	r3, [pc, #652]	; (800c088 <_dtoa_r+0x300>)
 800bdfa:	bfbc      	itt	lt
 800bdfc:	2201      	movlt	r2, #1
 800bdfe:	f8c8 2000 	strlt.w	r2, [r8]
 800be02:	ea33 0309 	bics.w	r3, r3, r9
 800be06:	d11b      	bne.n	800be40 <_dtoa_r+0xb8>
 800be08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be0a:	f242 730f 	movw	r3, #9999	; 0x270f
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be14:	4333      	orrs	r3, r6
 800be16:	f000 857a 	beq.w	800c90e <_dtoa_r+0xb86>
 800be1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be1c:	b963      	cbnz	r3, 800be38 <_dtoa_r+0xb0>
 800be1e:	4b9b      	ldr	r3, [pc, #620]	; (800c08c <_dtoa_r+0x304>)
 800be20:	e024      	b.n	800be6c <_dtoa_r+0xe4>
 800be22:	4b9b      	ldr	r3, [pc, #620]	; (800c090 <_dtoa_r+0x308>)
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	3308      	adds	r3, #8
 800be28:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be2a:	6013      	str	r3, [r2, #0]
 800be2c:	9800      	ldr	r0, [sp, #0]
 800be2e:	b015      	add	sp, #84	; 0x54
 800be30:	ecbd 8b02 	vpop	{d8}
 800be34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be38:	4b94      	ldr	r3, [pc, #592]	; (800c08c <_dtoa_r+0x304>)
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	3303      	adds	r3, #3
 800be3e:	e7f3      	b.n	800be28 <_dtoa_r+0xa0>
 800be40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be44:	2200      	movs	r2, #0
 800be46:	ec51 0b17 	vmov	r0, r1, d7
 800be4a:	2300      	movs	r3, #0
 800be4c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800be50:	f7f4 fe62 	bl	8000b18 <__aeabi_dcmpeq>
 800be54:	4680      	mov	r8, r0
 800be56:	b158      	cbz	r0, 800be70 <_dtoa_r+0xe8>
 800be58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be5a:	2301      	movs	r3, #1
 800be5c:	6013      	str	r3, [r2, #0]
 800be5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 8551 	beq.w	800c908 <_dtoa_r+0xb80>
 800be66:	488b      	ldr	r0, [pc, #556]	; (800c094 <_dtoa_r+0x30c>)
 800be68:	6018      	str	r0, [r3, #0]
 800be6a:	1e43      	subs	r3, r0, #1
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	e7dd      	b.n	800be2c <_dtoa_r+0xa4>
 800be70:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be74:	aa12      	add	r2, sp, #72	; 0x48
 800be76:	a913      	add	r1, sp, #76	; 0x4c
 800be78:	4620      	mov	r0, r4
 800be7a:	f001 fad1 	bl	800d420 <__d2b>
 800be7e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be82:	4683      	mov	fp, r0
 800be84:	2d00      	cmp	r5, #0
 800be86:	d07c      	beq.n	800bf82 <_dtoa_r+0x1fa>
 800be88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be8a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800be8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be92:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800be96:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bea2:	4b7d      	ldr	r3, [pc, #500]	; (800c098 <_dtoa_r+0x310>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 fa15 	bl	80002d8 <__aeabi_dsub>
 800beae:	a36e      	add	r3, pc, #440	; (adr r3, 800c068 <_dtoa_r+0x2e0>)
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 fbc8 	bl	8000648 <__aeabi_dmul>
 800beb8:	a36d      	add	r3, pc, #436	; (adr r3, 800c070 <_dtoa_r+0x2e8>)
 800beba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebe:	f7f4 fa0d 	bl	80002dc <__adddf3>
 800bec2:	4606      	mov	r6, r0
 800bec4:	4628      	mov	r0, r5
 800bec6:	460f      	mov	r7, r1
 800bec8:	f7f4 fb54 	bl	8000574 <__aeabi_i2d>
 800becc:	a36a      	add	r3, pc, #424	; (adr r3, 800c078 <_dtoa_r+0x2f0>)
 800bece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed2:	f7f4 fbb9 	bl	8000648 <__aeabi_dmul>
 800bed6:	4602      	mov	r2, r0
 800bed8:	460b      	mov	r3, r1
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 f9fd 	bl	80002dc <__adddf3>
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	f7f4 fe5f 	bl	8000ba8 <__aeabi_d2iz>
 800beea:	2200      	movs	r2, #0
 800beec:	4682      	mov	sl, r0
 800beee:	2300      	movs	r3, #0
 800bef0:	4630      	mov	r0, r6
 800bef2:	4639      	mov	r1, r7
 800bef4:	f7f4 fe1a 	bl	8000b2c <__aeabi_dcmplt>
 800bef8:	b148      	cbz	r0, 800bf0e <_dtoa_r+0x186>
 800befa:	4650      	mov	r0, sl
 800befc:	f7f4 fb3a 	bl	8000574 <__aeabi_i2d>
 800bf00:	4632      	mov	r2, r6
 800bf02:	463b      	mov	r3, r7
 800bf04:	f7f4 fe08 	bl	8000b18 <__aeabi_dcmpeq>
 800bf08:	b908      	cbnz	r0, 800bf0e <_dtoa_r+0x186>
 800bf0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf0e:	f1ba 0f16 	cmp.w	sl, #22
 800bf12:	d854      	bhi.n	800bfbe <_dtoa_r+0x236>
 800bf14:	4b61      	ldr	r3, [pc, #388]	; (800c09c <_dtoa_r+0x314>)
 800bf16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bf22:	f7f4 fe03 	bl	8000b2c <__aeabi_dcmplt>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d04b      	beq.n	800bfc2 <_dtoa_r+0x23a>
 800bf2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf2e:	2300      	movs	r3, #0
 800bf30:	930e      	str	r3, [sp, #56]	; 0x38
 800bf32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf34:	1b5d      	subs	r5, r3, r5
 800bf36:	1e6b      	subs	r3, r5, #1
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	bf43      	ittte	mi
 800bf3c:	2300      	movmi	r3, #0
 800bf3e:	f1c5 0801 	rsbmi	r8, r5, #1
 800bf42:	9304      	strmi	r3, [sp, #16]
 800bf44:	f04f 0800 	movpl.w	r8, #0
 800bf48:	f1ba 0f00 	cmp.w	sl, #0
 800bf4c:	db3b      	blt.n	800bfc6 <_dtoa_r+0x23e>
 800bf4e:	9b04      	ldr	r3, [sp, #16]
 800bf50:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800bf54:	4453      	add	r3, sl
 800bf56:	9304      	str	r3, [sp, #16]
 800bf58:	2300      	movs	r3, #0
 800bf5a:	9306      	str	r3, [sp, #24]
 800bf5c:	9b05      	ldr	r3, [sp, #20]
 800bf5e:	2b09      	cmp	r3, #9
 800bf60:	d869      	bhi.n	800c036 <_dtoa_r+0x2ae>
 800bf62:	2b05      	cmp	r3, #5
 800bf64:	bfc4      	itt	gt
 800bf66:	3b04      	subgt	r3, #4
 800bf68:	9305      	strgt	r3, [sp, #20]
 800bf6a:	9b05      	ldr	r3, [sp, #20]
 800bf6c:	f1a3 0302 	sub.w	r3, r3, #2
 800bf70:	bfcc      	ite	gt
 800bf72:	2500      	movgt	r5, #0
 800bf74:	2501      	movle	r5, #1
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d869      	bhi.n	800c04e <_dtoa_r+0x2c6>
 800bf7a:	e8df f003 	tbb	[pc, r3]
 800bf7e:	4e2c      	.short	0x4e2c
 800bf80:	5a4c      	.short	0x5a4c
 800bf82:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800bf86:	441d      	add	r5, r3
 800bf88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf8c:	2b20      	cmp	r3, #32
 800bf8e:	bfc1      	itttt	gt
 800bf90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf94:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf98:	fa09 f303 	lslgt.w	r3, r9, r3
 800bf9c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bfa0:	bfda      	itte	le
 800bfa2:	f1c3 0320 	rsble	r3, r3, #32
 800bfa6:	fa06 f003 	lslle.w	r0, r6, r3
 800bfaa:	4318      	orrgt	r0, r3
 800bfac:	f7f4 fad2 	bl	8000554 <__aeabi_ui2d>
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfb8:	3d01      	subs	r5, #1
 800bfba:	9310      	str	r3, [sp, #64]	; 0x40
 800bfbc:	e771      	b.n	800bea2 <_dtoa_r+0x11a>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e7b6      	b.n	800bf30 <_dtoa_r+0x1a8>
 800bfc2:	900e      	str	r0, [sp, #56]	; 0x38
 800bfc4:	e7b5      	b.n	800bf32 <_dtoa_r+0x1aa>
 800bfc6:	f1ca 0300 	rsb	r3, sl, #0
 800bfca:	9306      	str	r3, [sp, #24]
 800bfcc:	2300      	movs	r3, #0
 800bfce:	eba8 080a 	sub.w	r8, r8, sl
 800bfd2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfd4:	e7c2      	b.n	800bf5c <_dtoa_r+0x1d4>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9308      	str	r3, [sp, #32]
 800bfda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	dc39      	bgt.n	800c054 <_dtoa_r+0x2cc>
 800bfe0:	f04f 0901 	mov.w	r9, #1
 800bfe4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfe8:	464b      	mov	r3, r9
 800bfea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bfee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bff0:	2200      	movs	r2, #0
 800bff2:	6042      	str	r2, [r0, #4]
 800bff4:	2204      	movs	r2, #4
 800bff6:	f102 0614 	add.w	r6, r2, #20
 800bffa:	429e      	cmp	r6, r3
 800bffc:	6841      	ldr	r1, [r0, #4]
 800bffe:	d92f      	bls.n	800c060 <_dtoa_r+0x2d8>
 800c000:	4620      	mov	r0, r4
 800c002:	f000 feeb 	bl	800cddc <_Balloc>
 800c006:	9000      	str	r0, [sp, #0]
 800c008:	2800      	cmp	r0, #0
 800c00a:	d14b      	bne.n	800c0a4 <_dtoa_r+0x31c>
 800c00c:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <_dtoa_r+0x318>)
 800c00e:	4602      	mov	r2, r0
 800c010:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c014:	e6d1      	b.n	800bdba <_dtoa_r+0x32>
 800c016:	2301      	movs	r3, #1
 800c018:	e7de      	b.n	800bfd8 <_dtoa_r+0x250>
 800c01a:	2300      	movs	r3, #0
 800c01c:	9308      	str	r3, [sp, #32]
 800c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c020:	eb0a 0903 	add.w	r9, sl, r3
 800c024:	f109 0301 	add.w	r3, r9, #1
 800c028:	2b01      	cmp	r3, #1
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	bfb8      	it	lt
 800c02e:	2301      	movlt	r3, #1
 800c030:	e7dd      	b.n	800bfee <_dtoa_r+0x266>
 800c032:	2301      	movs	r3, #1
 800c034:	e7f2      	b.n	800c01c <_dtoa_r+0x294>
 800c036:	2501      	movs	r5, #1
 800c038:	2300      	movs	r3, #0
 800c03a:	9305      	str	r3, [sp, #20]
 800c03c:	9508      	str	r5, [sp, #32]
 800c03e:	f04f 39ff 	mov.w	r9, #4294967295
 800c042:	2200      	movs	r2, #0
 800c044:	f8cd 9004 	str.w	r9, [sp, #4]
 800c048:	2312      	movs	r3, #18
 800c04a:	9209      	str	r2, [sp, #36]	; 0x24
 800c04c:	e7cf      	b.n	800bfee <_dtoa_r+0x266>
 800c04e:	2301      	movs	r3, #1
 800c050:	9308      	str	r3, [sp, #32]
 800c052:	e7f4      	b.n	800c03e <_dtoa_r+0x2b6>
 800c054:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c058:	f8cd 9004 	str.w	r9, [sp, #4]
 800c05c:	464b      	mov	r3, r9
 800c05e:	e7c6      	b.n	800bfee <_dtoa_r+0x266>
 800c060:	3101      	adds	r1, #1
 800c062:	6041      	str	r1, [r0, #4]
 800c064:	0052      	lsls	r2, r2, #1
 800c066:	e7c6      	b.n	800bff6 <_dtoa_r+0x26e>
 800c068:	636f4361 	.word	0x636f4361
 800c06c:	3fd287a7 	.word	0x3fd287a7
 800c070:	8b60c8b3 	.word	0x8b60c8b3
 800c074:	3fc68a28 	.word	0x3fc68a28
 800c078:	509f79fb 	.word	0x509f79fb
 800c07c:	3fd34413 	.word	0x3fd34413
 800c080:	0800f35d 	.word	0x0800f35d
 800c084:	0800f374 	.word	0x0800f374
 800c088:	7ff00000 	.word	0x7ff00000
 800c08c:	0800f359 	.word	0x0800f359
 800c090:	0800f350 	.word	0x0800f350
 800c094:	0800f32d 	.word	0x0800f32d
 800c098:	3ff80000 	.word	0x3ff80000
 800c09c:	0800f4d0 	.word	0x0800f4d0
 800c0a0:	0800f3d3 	.word	0x0800f3d3
 800c0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a6:	9a00      	ldr	r2, [sp, #0]
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	9b01      	ldr	r3, [sp, #4]
 800c0ac:	2b0e      	cmp	r3, #14
 800c0ae:	f200 80ad 	bhi.w	800c20c <_dtoa_r+0x484>
 800c0b2:	2d00      	cmp	r5, #0
 800c0b4:	f000 80aa 	beq.w	800c20c <_dtoa_r+0x484>
 800c0b8:	f1ba 0f00 	cmp.w	sl, #0
 800c0bc:	dd36      	ble.n	800c12c <_dtoa_r+0x3a4>
 800c0be:	4ac3      	ldr	r2, [pc, #780]	; (800c3cc <_dtoa_r+0x644>)
 800c0c0:	f00a 030f 	and.w	r3, sl, #15
 800c0c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0c8:	ed93 7b00 	vldr	d7, [r3]
 800c0cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c0d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c0d4:	eeb0 8a47 	vmov.f32	s16, s14
 800c0d8:	eef0 8a67 	vmov.f32	s17, s15
 800c0dc:	d016      	beq.n	800c10c <_dtoa_r+0x384>
 800c0de:	4bbc      	ldr	r3, [pc, #752]	; (800c3d0 <_dtoa_r+0x648>)
 800c0e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c0e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0e8:	f7f4 fbd8 	bl	800089c <__aeabi_ddiv>
 800c0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f0:	f007 070f 	and.w	r7, r7, #15
 800c0f4:	2503      	movs	r5, #3
 800c0f6:	4eb6      	ldr	r6, [pc, #728]	; (800c3d0 <_dtoa_r+0x648>)
 800c0f8:	b957      	cbnz	r7, 800c110 <_dtoa_r+0x388>
 800c0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fe:	ec53 2b18 	vmov	r2, r3, d8
 800c102:	f7f4 fbcb 	bl	800089c <__aeabi_ddiv>
 800c106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c10a:	e029      	b.n	800c160 <_dtoa_r+0x3d8>
 800c10c:	2502      	movs	r5, #2
 800c10e:	e7f2      	b.n	800c0f6 <_dtoa_r+0x36e>
 800c110:	07f9      	lsls	r1, r7, #31
 800c112:	d508      	bpl.n	800c126 <_dtoa_r+0x39e>
 800c114:	ec51 0b18 	vmov	r0, r1, d8
 800c118:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c11c:	f7f4 fa94 	bl	8000648 <__aeabi_dmul>
 800c120:	ec41 0b18 	vmov	d8, r0, r1
 800c124:	3501      	adds	r5, #1
 800c126:	107f      	asrs	r7, r7, #1
 800c128:	3608      	adds	r6, #8
 800c12a:	e7e5      	b.n	800c0f8 <_dtoa_r+0x370>
 800c12c:	f000 80a6 	beq.w	800c27c <_dtoa_r+0x4f4>
 800c130:	f1ca 0600 	rsb	r6, sl, #0
 800c134:	4ba5      	ldr	r3, [pc, #660]	; (800c3cc <_dtoa_r+0x644>)
 800c136:	4fa6      	ldr	r7, [pc, #664]	; (800c3d0 <_dtoa_r+0x648>)
 800c138:	f006 020f 	and.w	r2, r6, #15
 800c13c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c144:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c148:	f7f4 fa7e 	bl	8000648 <__aeabi_dmul>
 800c14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c150:	1136      	asrs	r6, r6, #4
 800c152:	2300      	movs	r3, #0
 800c154:	2502      	movs	r5, #2
 800c156:	2e00      	cmp	r6, #0
 800c158:	f040 8085 	bne.w	800c266 <_dtoa_r+0x4de>
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1d2      	bne.n	800c106 <_dtoa_r+0x37e>
 800c160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 808c 	beq.w	800c280 <_dtoa_r+0x4f8>
 800c168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c16c:	4b99      	ldr	r3, [pc, #612]	; (800c3d4 <_dtoa_r+0x64c>)
 800c16e:	2200      	movs	r2, #0
 800c170:	4630      	mov	r0, r6
 800c172:	4639      	mov	r1, r7
 800c174:	f7f4 fcda 	bl	8000b2c <__aeabi_dcmplt>
 800c178:	2800      	cmp	r0, #0
 800c17a:	f000 8081 	beq.w	800c280 <_dtoa_r+0x4f8>
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d07d      	beq.n	800c280 <_dtoa_r+0x4f8>
 800c184:	f1b9 0f00 	cmp.w	r9, #0
 800c188:	dd3c      	ble.n	800c204 <_dtoa_r+0x47c>
 800c18a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c18e:	9307      	str	r3, [sp, #28]
 800c190:	2200      	movs	r2, #0
 800c192:	4b91      	ldr	r3, [pc, #580]	; (800c3d8 <_dtoa_r+0x650>)
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 fa56 	bl	8000648 <__aeabi_dmul>
 800c19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1a0:	3501      	adds	r5, #1
 800c1a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c1a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	f7f4 f9e2 	bl	8000574 <__aeabi_i2d>
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	f7f4 fa48 	bl	8000648 <__aeabi_dmul>
 800c1b8:	4b88      	ldr	r3, [pc, #544]	; (800c3dc <_dtoa_r+0x654>)
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f7f4 f88e 	bl	80002dc <__adddf3>
 800c1c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c1c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1c8:	9303      	str	r3, [sp, #12]
 800c1ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d15c      	bne.n	800c28a <_dtoa_r+0x502>
 800c1d0:	4b83      	ldr	r3, [pc, #524]	; (800c3e0 <_dtoa_r+0x658>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	4639      	mov	r1, r7
 800c1d8:	f7f4 f87e 	bl	80002d8 <__aeabi_dsub>
 800c1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	460f      	mov	r7, r1
 800c1e4:	f7f4 fcc0 	bl	8000b68 <__aeabi_dcmpgt>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	f040 8296 	bne.w	800c71a <_dtoa_r+0x992>
 800c1ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c1f8:	4639      	mov	r1, r7
 800c1fa:	f7f4 fc97 	bl	8000b2c <__aeabi_dcmplt>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f040 8288 	bne.w	800c714 <_dtoa_r+0x98c>
 800c204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c20c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f2c0 8158 	blt.w	800c4c4 <_dtoa_r+0x73c>
 800c214:	f1ba 0f0e 	cmp.w	sl, #14
 800c218:	f300 8154 	bgt.w	800c4c4 <_dtoa_r+0x73c>
 800c21c:	4b6b      	ldr	r3, [pc, #428]	; (800c3cc <_dtoa_r+0x644>)
 800c21e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c222:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f280 80e3 	bge.w	800c3f4 <_dtoa_r+0x66c>
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f300 80df 	bgt.w	800c3f4 <_dtoa_r+0x66c>
 800c236:	f040 826d 	bne.w	800c714 <_dtoa_r+0x98c>
 800c23a:	4b69      	ldr	r3, [pc, #420]	; (800c3e0 <_dtoa_r+0x658>)
 800c23c:	2200      	movs	r2, #0
 800c23e:	4640      	mov	r0, r8
 800c240:	4649      	mov	r1, r9
 800c242:	f7f4 fa01 	bl	8000648 <__aeabi_dmul>
 800c246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c24a:	f7f4 fc83 	bl	8000b54 <__aeabi_dcmpge>
 800c24e:	9e01      	ldr	r6, [sp, #4]
 800c250:	4637      	mov	r7, r6
 800c252:	2800      	cmp	r0, #0
 800c254:	f040 8243 	bne.w	800c6de <_dtoa_r+0x956>
 800c258:	9d00      	ldr	r5, [sp, #0]
 800c25a:	2331      	movs	r3, #49	; 0x31
 800c25c:	f805 3b01 	strb.w	r3, [r5], #1
 800c260:	f10a 0a01 	add.w	sl, sl, #1
 800c264:	e23f      	b.n	800c6e6 <_dtoa_r+0x95e>
 800c266:	07f2      	lsls	r2, r6, #31
 800c268:	d505      	bpl.n	800c276 <_dtoa_r+0x4ee>
 800c26a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c26e:	f7f4 f9eb 	bl	8000648 <__aeabi_dmul>
 800c272:	3501      	adds	r5, #1
 800c274:	2301      	movs	r3, #1
 800c276:	1076      	asrs	r6, r6, #1
 800c278:	3708      	adds	r7, #8
 800c27a:	e76c      	b.n	800c156 <_dtoa_r+0x3ce>
 800c27c:	2502      	movs	r5, #2
 800c27e:	e76f      	b.n	800c160 <_dtoa_r+0x3d8>
 800c280:	9b01      	ldr	r3, [sp, #4]
 800c282:	f8cd a01c 	str.w	sl, [sp, #28]
 800c286:	930c      	str	r3, [sp, #48]	; 0x30
 800c288:	e78d      	b.n	800c1a6 <_dtoa_r+0x41e>
 800c28a:	9900      	ldr	r1, [sp, #0]
 800c28c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c28e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c290:	4b4e      	ldr	r3, [pc, #312]	; (800c3cc <_dtoa_r+0x644>)
 800c292:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c296:	4401      	add	r1, r0
 800c298:	9102      	str	r1, [sp, #8]
 800c29a:	9908      	ldr	r1, [sp, #32]
 800c29c:	eeb0 8a47 	vmov.f32	s16, s14
 800c2a0:	eef0 8a67 	vmov.f32	s17, s15
 800c2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2ac:	2900      	cmp	r1, #0
 800c2ae:	d045      	beq.n	800c33c <_dtoa_r+0x5b4>
 800c2b0:	494c      	ldr	r1, [pc, #304]	; (800c3e4 <_dtoa_r+0x65c>)
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f7f4 faf2 	bl	800089c <__aeabi_ddiv>
 800c2b8:	ec53 2b18 	vmov	r2, r3, d8
 800c2bc:	f7f4 f80c 	bl	80002d8 <__aeabi_dsub>
 800c2c0:	9d00      	ldr	r5, [sp, #0]
 800c2c2:	ec41 0b18 	vmov	d8, r0, r1
 800c2c6:	4639      	mov	r1, r7
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	f7f4 fc6d 	bl	8000ba8 <__aeabi_d2iz>
 800c2ce:	900c      	str	r0, [sp, #48]	; 0x30
 800c2d0:	f7f4 f950 	bl	8000574 <__aeabi_i2d>
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	4630      	mov	r0, r6
 800c2da:	4639      	mov	r1, r7
 800c2dc:	f7f3 fffc 	bl	80002d8 <__aeabi_dsub>
 800c2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2e2:	3330      	adds	r3, #48	; 0x30
 800c2e4:	f805 3b01 	strb.w	r3, [r5], #1
 800c2e8:	ec53 2b18 	vmov	r2, r3, d8
 800c2ec:	4606      	mov	r6, r0
 800c2ee:	460f      	mov	r7, r1
 800c2f0:	f7f4 fc1c 	bl	8000b2c <__aeabi_dcmplt>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d165      	bne.n	800c3c4 <_dtoa_r+0x63c>
 800c2f8:	4632      	mov	r2, r6
 800c2fa:	463b      	mov	r3, r7
 800c2fc:	4935      	ldr	r1, [pc, #212]	; (800c3d4 <_dtoa_r+0x64c>)
 800c2fe:	2000      	movs	r0, #0
 800c300:	f7f3 ffea 	bl	80002d8 <__aeabi_dsub>
 800c304:	ec53 2b18 	vmov	r2, r3, d8
 800c308:	f7f4 fc10 	bl	8000b2c <__aeabi_dcmplt>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	f040 80b9 	bne.w	800c484 <_dtoa_r+0x6fc>
 800c312:	9b02      	ldr	r3, [sp, #8]
 800c314:	429d      	cmp	r5, r3
 800c316:	f43f af75 	beq.w	800c204 <_dtoa_r+0x47c>
 800c31a:	4b2f      	ldr	r3, [pc, #188]	; (800c3d8 <_dtoa_r+0x650>)
 800c31c:	ec51 0b18 	vmov	r0, r1, d8
 800c320:	2200      	movs	r2, #0
 800c322:	f7f4 f991 	bl	8000648 <__aeabi_dmul>
 800c326:	4b2c      	ldr	r3, [pc, #176]	; (800c3d8 <_dtoa_r+0x650>)
 800c328:	ec41 0b18 	vmov	d8, r0, r1
 800c32c:	2200      	movs	r2, #0
 800c32e:	4630      	mov	r0, r6
 800c330:	4639      	mov	r1, r7
 800c332:	f7f4 f989 	bl	8000648 <__aeabi_dmul>
 800c336:	4606      	mov	r6, r0
 800c338:	460f      	mov	r7, r1
 800c33a:	e7c4      	b.n	800c2c6 <_dtoa_r+0x53e>
 800c33c:	ec51 0b17 	vmov	r0, r1, d7
 800c340:	f7f4 f982 	bl	8000648 <__aeabi_dmul>
 800c344:	9b02      	ldr	r3, [sp, #8]
 800c346:	9d00      	ldr	r5, [sp, #0]
 800c348:	930c      	str	r3, [sp, #48]	; 0x30
 800c34a:	ec41 0b18 	vmov	d8, r0, r1
 800c34e:	4639      	mov	r1, r7
 800c350:	4630      	mov	r0, r6
 800c352:	f7f4 fc29 	bl	8000ba8 <__aeabi_d2iz>
 800c356:	9011      	str	r0, [sp, #68]	; 0x44
 800c358:	f7f4 f90c 	bl	8000574 <__aeabi_i2d>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4630      	mov	r0, r6
 800c362:	4639      	mov	r1, r7
 800c364:	f7f3 ffb8 	bl	80002d8 <__aeabi_dsub>
 800c368:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c36a:	3330      	adds	r3, #48	; 0x30
 800c36c:	f805 3b01 	strb.w	r3, [r5], #1
 800c370:	9b02      	ldr	r3, [sp, #8]
 800c372:	429d      	cmp	r5, r3
 800c374:	4606      	mov	r6, r0
 800c376:	460f      	mov	r7, r1
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	d134      	bne.n	800c3e8 <_dtoa_r+0x660>
 800c37e:	4b19      	ldr	r3, [pc, #100]	; (800c3e4 <_dtoa_r+0x65c>)
 800c380:	ec51 0b18 	vmov	r0, r1, d8
 800c384:	f7f3 ffaa 	bl	80002dc <__adddf3>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f4 fbea 	bl	8000b68 <__aeabi_dcmpgt>
 800c394:	2800      	cmp	r0, #0
 800c396:	d175      	bne.n	800c484 <_dtoa_r+0x6fc>
 800c398:	ec53 2b18 	vmov	r2, r3, d8
 800c39c:	4911      	ldr	r1, [pc, #68]	; (800c3e4 <_dtoa_r+0x65c>)
 800c39e:	2000      	movs	r0, #0
 800c3a0:	f7f3 ff9a 	bl	80002d8 <__aeabi_dsub>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f7f4 fbbe 	bl	8000b2c <__aeabi_dcmplt>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	f43f af27 	beq.w	800c204 <_dtoa_r+0x47c>
 800c3b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3b8:	1e6b      	subs	r3, r5, #1
 800c3ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c3bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3c0:	2b30      	cmp	r3, #48	; 0x30
 800c3c2:	d0f8      	beq.n	800c3b6 <_dtoa_r+0x62e>
 800c3c4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c3c8:	e04a      	b.n	800c460 <_dtoa_r+0x6d8>
 800c3ca:	bf00      	nop
 800c3cc:	0800f4d0 	.word	0x0800f4d0
 800c3d0:	0800f4a8 	.word	0x0800f4a8
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	40240000 	.word	0x40240000
 800c3dc:	401c0000 	.word	0x401c0000
 800c3e0:	40140000 	.word	0x40140000
 800c3e4:	3fe00000 	.word	0x3fe00000
 800c3e8:	4baf      	ldr	r3, [pc, #700]	; (800c6a8 <_dtoa_r+0x920>)
 800c3ea:	f7f4 f92d 	bl	8000648 <__aeabi_dmul>
 800c3ee:	4606      	mov	r6, r0
 800c3f0:	460f      	mov	r7, r1
 800c3f2:	e7ac      	b.n	800c34e <_dtoa_r+0x5c6>
 800c3f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c3f8:	9d00      	ldr	r5, [sp, #0]
 800c3fa:	4642      	mov	r2, r8
 800c3fc:	464b      	mov	r3, r9
 800c3fe:	4630      	mov	r0, r6
 800c400:	4639      	mov	r1, r7
 800c402:	f7f4 fa4b 	bl	800089c <__aeabi_ddiv>
 800c406:	f7f4 fbcf 	bl	8000ba8 <__aeabi_d2iz>
 800c40a:	9002      	str	r0, [sp, #8]
 800c40c:	f7f4 f8b2 	bl	8000574 <__aeabi_i2d>
 800c410:	4642      	mov	r2, r8
 800c412:	464b      	mov	r3, r9
 800c414:	f7f4 f918 	bl	8000648 <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f7f3 ff5a 	bl	80002d8 <__aeabi_dsub>
 800c424:	9e02      	ldr	r6, [sp, #8]
 800c426:	9f01      	ldr	r7, [sp, #4]
 800c428:	3630      	adds	r6, #48	; 0x30
 800c42a:	f805 6b01 	strb.w	r6, [r5], #1
 800c42e:	9e00      	ldr	r6, [sp, #0]
 800c430:	1bae      	subs	r6, r5, r6
 800c432:	42b7      	cmp	r7, r6
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	d137      	bne.n	800c4aa <_dtoa_r+0x722>
 800c43a:	f7f3 ff4f 	bl	80002dc <__adddf3>
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	f7f4 fb8f 	bl	8000b68 <__aeabi_dcmpgt>
 800c44a:	b9c8      	cbnz	r0, 800c480 <_dtoa_r+0x6f8>
 800c44c:	4642      	mov	r2, r8
 800c44e:	464b      	mov	r3, r9
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 fb60 	bl	8000b18 <__aeabi_dcmpeq>
 800c458:	b110      	cbz	r0, 800c460 <_dtoa_r+0x6d8>
 800c45a:	9b02      	ldr	r3, [sp, #8]
 800c45c:	07d9      	lsls	r1, r3, #31
 800c45e:	d40f      	bmi.n	800c480 <_dtoa_r+0x6f8>
 800c460:	4620      	mov	r0, r4
 800c462:	4659      	mov	r1, fp
 800c464:	f000 fcfa 	bl	800ce5c <_Bfree>
 800c468:	2300      	movs	r3, #0
 800c46a:	702b      	strb	r3, [r5, #0]
 800c46c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c46e:	f10a 0001 	add.w	r0, sl, #1
 800c472:	6018      	str	r0, [r3, #0]
 800c474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c476:	2b00      	cmp	r3, #0
 800c478:	f43f acd8 	beq.w	800be2c <_dtoa_r+0xa4>
 800c47c:	601d      	str	r5, [r3, #0]
 800c47e:	e4d5      	b.n	800be2c <_dtoa_r+0xa4>
 800c480:	f8cd a01c 	str.w	sl, [sp, #28]
 800c484:	462b      	mov	r3, r5
 800c486:	461d      	mov	r5, r3
 800c488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c48c:	2a39      	cmp	r2, #57	; 0x39
 800c48e:	d108      	bne.n	800c4a2 <_dtoa_r+0x71a>
 800c490:	9a00      	ldr	r2, [sp, #0]
 800c492:	429a      	cmp	r2, r3
 800c494:	d1f7      	bne.n	800c486 <_dtoa_r+0x6fe>
 800c496:	9a07      	ldr	r2, [sp, #28]
 800c498:	9900      	ldr	r1, [sp, #0]
 800c49a:	3201      	adds	r2, #1
 800c49c:	9207      	str	r2, [sp, #28]
 800c49e:	2230      	movs	r2, #48	; 0x30
 800c4a0:	700a      	strb	r2, [r1, #0]
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	3201      	adds	r2, #1
 800c4a6:	701a      	strb	r2, [r3, #0]
 800c4a8:	e78c      	b.n	800c3c4 <_dtoa_r+0x63c>
 800c4aa:	4b7f      	ldr	r3, [pc, #508]	; (800c6a8 <_dtoa_r+0x920>)
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f7f4 f8cb 	bl	8000648 <__aeabi_dmul>
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	f7f4 fb2d 	bl	8000b18 <__aeabi_dcmpeq>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d09b      	beq.n	800c3fa <_dtoa_r+0x672>
 800c4c2:	e7cd      	b.n	800c460 <_dtoa_r+0x6d8>
 800c4c4:	9a08      	ldr	r2, [sp, #32]
 800c4c6:	2a00      	cmp	r2, #0
 800c4c8:	f000 80c4 	beq.w	800c654 <_dtoa_r+0x8cc>
 800c4cc:	9a05      	ldr	r2, [sp, #20]
 800c4ce:	2a01      	cmp	r2, #1
 800c4d0:	f300 80a8 	bgt.w	800c624 <_dtoa_r+0x89c>
 800c4d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c4d6:	2a00      	cmp	r2, #0
 800c4d8:	f000 80a0 	beq.w	800c61c <_dtoa_r+0x894>
 800c4dc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4e0:	9e06      	ldr	r6, [sp, #24]
 800c4e2:	4645      	mov	r5, r8
 800c4e4:	9a04      	ldr	r2, [sp, #16]
 800c4e6:	2101      	movs	r1, #1
 800c4e8:	441a      	add	r2, r3
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	4498      	add	r8, r3
 800c4ee:	9204      	str	r2, [sp, #16]
 800c4f0:	f000 fd70 	bl	800cfd4 <__i2b>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	2d00      	cmp	r5, #0
 800c4f8:	dd0b      	ble.n	800c512 <_dtoa_r+0x78a>
 800c4fa:	9b04      	ldr	r3, [sp, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd08      	ble.n	800c512 <_dtoa_r+0x78a>
 800c500:	42ab      	cmp	r3, r5
 800c502:	9a04      	ldr	r2, [sp, #16]
 800c504:	bfa8      	it	ge
 800c506:	462b      	movge	r3, r5
 800c508:	eba8 0803 	sub.w	r8, r8, r3
 800c50c:	1aed      	subs	r5, r5, r3
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	9304      	str	r3, [sp, #16]
 800c512:	9b06      	ldr	r3, [sp, #24]
 800c514:	b1fb      	cbz	r3, 800c556 <_dtoa_r+0x7ce>
 800c516:	9b08      	ldr	r3, [sp, #32]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 809f 	beq.w	800c65c <_dtoa_r+0x8d4>
 800c51e:	2e00      	cmp	r6, #0
 800c520:	dd11      	ble.n	800c546 <_dtoa_r+0x7be>
 800c522:	4639      	mov	r1, r7
 800c524:	4632      	mov	r2, r6
 800c526:	4620      	mov	r0, r4
 800c528:	f000 fe10 	bl	800d14c <__pow5mult>
 800c52c:	465a      	mov	r2, fp
 800c52e:	4601      	mov	r1, r0
 800c530:	4607      	mov	r7, r0
 800c532:	4620      	mov	r0, r4
 800c534:	f000 fd64 	bl	800d000 <__multiply>
 800c538:	4659      	mov	r1, fp
 800c53a:	9007      	str	r0, [sp, #28]
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 fc8d 	bl	800ce5c <_Bfree>
 800c542:	9b07      	ldr	r3, [sp, #28]
 800c544:	469b      	mov	fp, r3
 800c546:	9b06      	ldr	r3, [sp, #24]
 800c548:	1b9a      	subs	r2, r3, r6
 800c54a:	d004      	beq.n	800c556 <_dtoa_r+0x7ce>
 800c54c:	4659      	mov	r1, fp
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 fdfc 	bl	800d14c <__pow5mult>
 800c554:	4683      	mov	fp, r0
 800c556:	2101      	movs	r1, #1
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fd3b 	bl	800cfd4 <__i2b>
 800c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c560:	2b00      	cmp	r3, #0
 800c562:	4606      	mov	r6, r0
 800c564:	dd7c      	ble.n	800c660 <_dtoa_r+0x8d8>
 800c566:	461a      	mov	r2, r3
 800c568:	4601      	mov	r1, r0
 800c56a:	4620      	mov	r0, r4
 800c56c:	f000 fdee 	bl	800d14c <__pow5mult>
 800c570:	9b05      	ldr	r3, [sp, #20]
 800c572:	2b01      	cmp	r3, #1
 800c574:	4606      	mov	r6, r0
 800c576:	dd76      	ble.n	800c666 <_dtoa_r+0x8de>
 800c578:	2300      	movs	r3, #0
 800c57a:	9306      	str	r3, [sp, #24]
 800c57c:	6933      	ldr	r3, [r6, #16]
 800c57e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c582:	6918      	ldr	r0, [r3, #16]
 800c584:	f000 fcd6 	bl	800cf34 <__hi0bits>
 800c588:	f1c0 0020 	rsb	r0, r0, #32
 800c58c:	9b04      	ldr	r3, [sp, #16]
 800c58e:	4418      	add	r0, r3
 800c590:	f010 001f 	ands.w	r0, r0, #31
 800c594:	f000 8086 	beq.w	800c6a4 <_dtoa_r+0x91c>
 800c598:	f1c0 0320 	rsb	r3, r0, #32
 800c59c:	2b04      	cmp	r3, #4
 800c59e:	dd7f      	ble.n	800c6a0 <_dtoa_r+0x918>
 800c5a0:	f1c0 001c 	rsb	r0, r0, #28
 800c5a4:	9b04      	ldr	r3, [sp, #16]
 800c5a6:	4403      	add	r3, r0
 800c5a8:	4480      	add	r8, r0
 800c5aa:	4405      	add	r5, r0
 800c5ac:	9304      	str	r3, [sp, #16]
 800c5ae:	f1b8 0f00 	cmp.w	r8, #0
 800c5b2:	dd05      	ble.n	800c5c0 <_dtoa_r+0x838>
 800c5b4:	4659      	mov	r1, fp
 800c5b6:	4642      	mov	r2, r8
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f000 fe21 	bl	800d200 <__lshift>
 800c5be:	4683      	mov	fp, r0
 800c5c0:	9b04      	ldr	r3, [sp, #16]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	dd05      	ble.n	800c5d2 <_dtoa_r+0x84a>
 800c5c6:	4631      	mov	r1, r6
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f000 fe18 	bl	800d200 <__lshift>
 800c5d0:	4606      	mov	r6, r0
 800c5d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d069      	beq.n	800c6ac <_dtoa_r+0x924>
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4658      	mov	r0, fp
 800c5dc:	f000 fe7c 	bl	800d2d8 <__mcmp>
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	da63      	bge.n	800c6ac <_dtoa_r+0x924>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	4659      	mov	r1, fp
 800c5e8:	220a      	movs	r2, #10
 800c5ea:	4620      	mov	r0, r4
 800c5ec:	f000 fc58 	bl	800cea0 <__multadd>
 800c5f0:	9b08      	ldr	r3, [sp, #32]
 800c5f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5f6:	4683      	mov	fp, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 818f 	beq.w	800c91c <_dtoa_r+0xb94>
 800c5fe:	4639      	mov	r1, r7
 800c600:	2300      	movs	r3, #0
 800c602:	220a      	movs	r2, #10
 800c604:	4620      	mov	r0, r4
 800c606:	f000 fc4b 	bl	800cea0 <__multadd>
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	4607      	mov	r7, r0
 800c610:	f300 808e 	bgt.w	800c730 <_dtoa_r+0x9a8>
 800c614:	9b05      	ldr	r3, [sp, #20]
 800c616:	2b02      	cmp	r3, #2
 800c618:	dc50      	bgt.n	800c6bc <_dtoa_r+0x934>
 800c61a:	e089      	b.n	800c730 <_dtoa_r+0x9a8>
 800c61c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c61e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c622:	e75d      	b.n	800c4e0 <_dtoa_r+0x758>
 800c624:	9b01      	ldr	r3, [sp, #4]
 800c626:	1e5e      	subs	r6, r3, #1
 800c628:	9b06      	ldr	r3, [sp, #24]
 800c62a:	42b3      	cmp	r3, r6
 800c62c:	bfbf      	itttt	lt
 800c62e:	9b06      	ldrlt	r3, [sp, #24]
 800c630:	9606      	strlt	r6, [sp, #24]
 800c632:	1af2      	sublt	r2, r6, r3
 800c634:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800c636:	bfb6      	itet	lt
 800c638:	189b      	addlt	r3, r3, r2
 800c63a:	1b9e      	subge	r6, r3, r6
 800c63c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	bfb8      	it	lt
 800c642:	2600      	movlt	r6, #0
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfb5      	itete	lt
 800c648:	eba8 0503 	sublt.w	r5, r8, r3
 800c64c:	9b01      	ldrge	r3, [sp, #4]
 800c64e:	2300      	movlt	r3, #0
 800c650:	4645      	movge	r5, r8
 800c652:	e747      	b.n	800c4e4 <_dtoa_r+0x75c>
 800c654:	9e06      	ldr	r6, [sp, #24]
 800c656:	9f08      	ldr	r7, [sp, #32]
 800c658:	4645      	mov	r5, r8
 800c65a:	e74c      	b.n	800c4f6 <_dtoa_r+0x76e>
 800c65c:	9a06      	ldr	r2, [sp, #24]
 800c65e:	e775      	b.n	800c54c <_dtoa_r+0x7c4>
 800c660:	9b05      	ldr	r3, [sp, #20]
 800c662:	2b01      	cmp	r3, #1
 800c664:	dc18      	bgt.n	800c698 <_dtoa_r+0x910>
 800c666:	9b02      	ldr	r3, [sp, #8]
 800c668:	b9b3      	cbnz	r3, 800c698 <_dtoa_r+0x910>
 800c66a:	9b03      	ldr	r3, [sp, #12]
 800c66c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c670:	b9a3      	cbnz	r3, 800c69c <_dtoa_r+0x914>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c678:	0d1b      	lsrs	r3, r3, #20
 800c67a:	051b      	lsls	r3, r3, #20
 800c67c:	b12b      	cbz	r3, 800c68a <_dtoa_r+0x902>
 800c67e:	9b04      	ldr	r3, [sp, #16]
 800c680:	3301      	adds	r3, #1
 800c682:	9304      	str	r3, [sp, #16]
 800c684:	f108 0801 	add.w	r8, r8, #1
 800c688:	2301      	movs	r3, #1
 800c68a:	9306      	str	r3, [sp, #24]
 800c68c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f47f af74 	bne.w	800c57c <_dtoa_r+0x7f4>
 800c694:	2001      	movs	r0, #1
 800c696:	e779      	b.n	800c58c <_dtoa_r+0x804>
 800c698:	2300      	movs	r3, #0
 800c69a:	e7f6      	b.n	800c68a <_dtoa_r+0x902>
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	e7f4      	b.n	800c68a <_dtoa_r+0x902>
 800c6a0:	d085      	beq.n	800c5ae <_dtoa_r+0x826>
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	301c      	adds	r0, #28
 800c6a6:	e77d      	b.n	800c5a4 <_dtoa_r+0x81c>
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	9b01      	ldr	r3, [sp, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	dc38      	bgt.n	800c724 <_dtoa_r+0x99c>
 800c6b2:	9b05      	ldr	r3, [sp, #20]
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	dd35      	ble.n	800c724 <_dtoa_r+0x99c>
 800c6b8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c6bc:	f1b9 0f00 	cmp.w	r9, #0
 800c6c0:	d10d      	bne.n	800c6de <_dtoa_r+0x956>
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	464b      	mov	r3, r9
 800c6c6:	2205      	movs	r2, #5
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	f000 fbe9 	bl	800cea0 <__multadd>
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	4606      	mov	r6, r0
 800c6d2:	4658      	mov	r0, fp
 800c6d4:	f000 fe00 	bl	800d2d8 <__mcmp>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f73f adbd 	bgt.w	800c258 <_dtoa_r+0x4d0>
 800c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e0:	9d00      	ldr	r5, [sp, #0]
 800c6e2:	ea6f 0a03 	mvn.w	sl, r3
 800c6e6:	f04f 0800 	mov.w	r8, #0
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 fbb5 	bl	800ce5c <_Bfree>
 800c6f2:	2f00      	cmp	r7, #0
 800c6f4:	f43f aeb4 	beq.w	800c460 <_dtoa_r+0x6d8>
 800c6f8:	f1b8 0f00 	cmp.w	r8, #0
 800c6fc:	d005      	beq.n	800c70a <_dtoa_r+0x982>
 800c6fe:	45b8      	cmp	r8, r7
 800c700:	d003      	beq.n	800c70a <_dtoa_r+0x982>
 800c702:	4641      	mov	r1, r8
 800c704:	4620      	mov	r0, r4
 800c706:	f000 fba9 	bl	800ce5c <_Bfree>
 800c70a:	4639      	mov	r1, r7
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fba5 	bl	800ce5c <_Bfree>
 800c712:	e6a5      	b.n	800c460 <_dtoa_r+0x6d8>
 800c714:	2600      	movs	r6, #0
 800c716:	4637      	mov	r7, r6
 800c718:	e7e1      	b.n	800c6de <_dtoa_r+0x956>
 800c71a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c71c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c720:	4637      	mov	r7, r6
 800c722:	e599      	b.n	800c258 <_dtoa_r+0x4d0>
 800c724:	9b08      	ldr	r3, [sp, #32]
 800c726:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f000 80fd 	beq.w	800c92a <_dtoa_r+0xba2>
 800c730:	2d00      	cmp	r5, #0
 800c732:	dd05      	ble.n	800c740 <_dtoa_r+0x9b8>
 800c734:	4639      	mov	r1, r7
 800c736:	462a      	mov	r2, r5
 800c738:	4620      	mov	r0, r4
 800c73a:	f000 fd61 	bl	800d200 <__lshift>
 800c73e:	4607      	mov	r7, r0
 800c740:	9b06      	ldr	r3, [sp, #24]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d05c      	beq.n	800c800 <_dtoa_r+0xa78>
 800c746:	6879      	ldr	r1, [r7, #4]
 800c748:	4620      	mov	r0, r4
 800c74a:	f000 fb47 	bl	800cddc <_Balloc>
 800c74e:	4605      	mov	r5, r0
 800c750:	b928      	cbnz	r0, 800c75e <_dtoa_r+0x9d6>
 800c752:	4b80      	ldr	r3, [pc, #512]	; (800c954 <_dtoa_r+0xbcc>)
 800c754:	4602      	mov	r2, r0
 800c756:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c75a:	f7ff bb2e 	b.w	800bdba <_dtoa_r+0x32>
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	3202      	adds	r2, #2
 800c762:	0092      	lsls	r2, r2, #2
 800c764:	f107 010c 	add.w	r1, r7, #12
 800c768:	300c      	adds	r0, #12
 800c76a:	f000 fb1d 	bl	800cda8 <memcpy>
 800c76e:	2201      	movs	r2, #1
 800c770:	4629      	mov	r1, r5
 800c772:	4620      	mov	r0, r4
 800c774:	f000 fd44 	bl	800d200 <__lshift>
 800c778:	9b00      	ldr	r3, [sp, #0]
 800c77a:	3301      	adds	r3, #1
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	9b00      	ldr	r3, [sp, #0]
 800c780:	444b      	add	r3, r9
 800c782:	9307      	str	r3, [sp, #28]
 800c784:	9b02      	ldr	r3, [sp, #8]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	46b8      	mov	r8, r7
 800c78c:	9306      	str	r3, [sp, #24]
 800c78e:	4607      	mov	r7, r0
 800c790:	9b01      	ldr	r3, [sp, #4]
 800c792:	4631      	mov	r1, r6
 800c794:	3b01      	subs	r3, #1
 800c796:	4658      	mov	r0, fp
 800c798:	9302      	str	r3, [sp, #8]
 800c79a:	f7ff fa67 	bl	800bc6c <quorem>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	3330      	adds	r3, #48	; 0x30
 800c7a2:	9004      	str	r0, [sp, #16]
 800c7a4:	4641      	mov	r1, r8
 800c7a6:	4658      	mov	r0, fp
 800c7a8:	9308      	str	r3, [sp, #32]
 800c7aa:	f000 fd95 	bl	800d2d8 <__mcmp>
 800c7ae:	463a      	mov	r2, r7
 800c7b0:	4681      	mov	r9, r0
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fdab 	bl	800d310 <__mdiff>
 800c7ba:	68c2      	ldr	r2, [r0, #12]
 800c7bc:	9b08      	ldr	r3, [sp, #32]
 800c7be:	4605      	mov	r5, r0
 800c7c0:	bb02      	cbnz	r2, 800c804 <_dtoa_r+0xa7c>
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	4658      	mov	r0, fp
 800c7c6:	f000 fd87 	bl	800d2d8 <__mcmp>
 800c7ca:	9b08      	ldr	r3, [sp, #32]
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800c7d6:	f000 fb41 	bl	800ce5c <_Bfree>
 800c7da:	9b05      	ldr	r3, [sp, #20]
 800c7dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7de:	9d01      	ldr	r5, [sp, #4]
 800c7e0:	ea43 0102 	orr.w	r1, r3, r2
 800c7e4:	9b06      	ldr	r3, [sp, #24]
 800c7e6:	430b      	orrs	r3, r1
 800c7e8:	9b08      	ldr	r3, [sp, #32]
 800c7ea:	d10d      	bne.n	800c808 <_dtoa_r+0xa80>
 800c7ec:	2b39      	cmp	r3, #57	; 0x39
 800c7ee:	d029      	beq.n	800c844 <_dtoa_r+0xabc>
 800c7f0:	f1b9 0f00 	cmp.w	r9, #0
 800c7f4:	dd01      	ble.n	800c7fa <_dtoa_r+0xa72>
 800c7f6:	9b04      	ldr	r3, [sp, #16]
 800c7f8:	3331      	adds	r3, #49	; 0x31
 800c7fa:	9a02      	ldr	r2, [sp, #8]
 800c7fc:	7013      	strb	r3, [r2, #0]
 800c7fe:	e774      	b.n	800c6ea <_dtoa_r+0x962>
 800c800:	4638      	mov	r0, r7
 800c802:	e7b9      	b.n	800c778 <_dtoa_r+0x9f0>
 800c804:	2201      	movs	r2, #1
 800c806:	e7e2      	b.n	800c7ce <_dtoa_r+0xa46>
 800c808:	f1b9 0f00 	cmp.w	r9, #0
 800c80c:	db06      	blt.n	800c81c <_dtoa_r+0xa94>
 800c80e:	9905      	ldr	r1, [sp, #20]
 800c810:	ea41 0909 	orr.w	r9, r1, r9
 800c814:	9906      	ldr	r1, [sp, #24]
 800c816:	ea59 0101 	orrs.w	r1, r9, r1
 800c81a:	d120      	bne.n	800c85e <_dtoa_r+0xad6>
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	ddec      	ble.n	800c7fa <_dtoa_r+0xa72>
 800c820:	4659      	mov	r1, fp
 800c822:	2201      	movs	r2, #1
 800c824:	4620      	mov	r0, r4
 800c826:	9301      	str	r3, [sp, #4]
 800c828:	f000 fcea 	bl	800d200 <__lshift>
 800c82c:	4631      	mov	r1, r6
 800c82e:	4683      	mov	fp, r0
 800c830:	f000 fd52 	bl	800d2d8 <__mcmp>
 800c834:	2800      	cmp	r0, #0
 800c836:	9b01      	ldr	r3, [sp, #4]
 800c838:	dc02      	bgt.n	800c840 <_dtoa_r+0xab8>
 800c83a:	d1de      	bne.n	800c7fa <_dtoa_r+0xa72>
 800c83c:	07da      	lsls	r2, r3, #31
 800c83e:	d5dc      	bpl.n	800c7fa <_dtoa_r+0xa72>
 800c840:	2b39      	cmp	r3, #57	; 0x39
 800c842:	d1d8      	bne.n	800c7f6 <_dtoa_r+0xa6e>
 800c844:	9a02      	ldr	r2, [sp, #8]
 800c846:	2339      	movs	r3, #57	; 0x39
 800c848:	7013      	strb	r3, [r2, #0]
 800c84a:	462b      	mov	r3, r5
 800c84c:	461d      	mov	r5, r3
 800c84e:	3b01      	subs	r3, #1
 800c850:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c854:	2a39      	cmp	r2, #57	; 0x39
 800c856:	d050      	beq.n	800c8fa <_dtoa_r+0xb72>
 800c858:	3201      	adds	r2, #1
 800c85a:	701a      	strb	r2, [r3, #0]
 800c85c:	e745      	b.n	800c6ea <_dtoa_r+0x962>
 800c85e:	2a00      	cmp	r2, #0
 800c860:	dd03      	ble.n	800c86a <_dtoa_r+0xae2>
 800c862:	2b39      	cmp	r3, #57	; 0x39
 800c864:	d0ee      	beq.n	800c844 <_dtoa_r+0xabc>
 800c866:	3301      	adds	r3, #1
 800c868:	e7c7      	b.n	800c7fa <_dtoa_r+0xa72>
 800c86a:	9a01      	ldr	r2, [sp, #4]
 800c86c:	9907      	ldr	r1, [sp, #28]
 800c86e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c872:	428a      	cmp	r2, r1
 800c874:	d02a      	beq.n	800c8cc <_dtoa_r+0xb44>
 800c876:	4659      	mov	r1, fp
 800c878:	2300      	movs	r3, #0
 800c87a:	220a      	movs	r2, #10
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fb0f 	bl	800cea0 <__multadd>
 800c882:	45b8      	cmp	r8, r7
 800c884:	4683      	mov	fp, r0
 800c886:	f04f 0300 	mov.w	r3, #0
 800c88a:	f04f 020a 	mov.w	r2, #10
 800c88e:	4641      	mov	r1, r8
 800c890:	4620      	mov	r0, r4
 800c892:	d107      	bne.n	800c8a4 <_dtoa_r+0xb1c>
 800c894:	f000 fb04 	bl	800cea0 <__multadd>
 800c898:	4680      	mov	r8, r0
 800c89a:	4607      	mov	r7, r0
 800c89c:	9b01      	ldr	r3, [sp, #4]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	e775      	b.n	800c790 <_dtoa_r+0xa08>
 800c8a4:	f000 fafc 	bl	800cea0 <__multadd>
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	220a      	movs	r2, #10
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 faf5 	bl	800cea0 <__multadd>
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	e7f0      	b.n	800c89c <_dtoa_r+0xb14>
 800c8ba:	f1b9 0f00 	cmp.w	r9, #0
 800c8be:	9a00      	ldr	r2, [sp, #0]
 800c8c0:	bfcc      	ite	gt
 800c8c2:	464d      	movgt	r5, r9
 800c8c4:	2501      	movle	r5, #1
 800c8c6:	4415      	add	r5, r2
 800c8c8:	f04f 0800 	mov.w	r8, #0
 800c8cc:	4659      	mov	r1, fp
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	9301      	str	r3, [sp, #4]
 800c8d4:	f000 fc94 	bl	800d200 <__lshift>
 800c8d8:	4631      	mov	r1, r6
 800c8da:	4683      	mov	fp, r0
 800c8dc:	f000 fcfc 	bl	800d2d8 <__mcmp>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	dcb2      	bgt.n	800c84a <_dtoa_r+0xac2>
 800c8e4:	d102      	bne.n	800c8ec <_dtoa_r+0xb64>
 800c8e6:	9b01      	ldr	r3, [sp, #4]
 800c8e8:	07db      	lsls	r3, r3, #31
 800c8ea:	d4ae      	bmi.n	800c84a <_dtoa_r+0xac2>
 800c8ec:	462b      	mov	r3, r5
 800c8ee:	461d      	mov	r5, r3
 800c8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8f4:	2a30      	cmp	r2, #48	; 0x30
 800c8f6:	d0fa      	beq.n	800c8ee <_dtoa_r+0xb66>
 800c8f8:	e6f7      	b.n	800c6ea <_dtoa_r+0x962>
 800c8fa:	9a00      	ldr	r2, [sp, #0]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d1a5      	bne.n	800c84c <_dtoa_r+0xac4>
 800c900:	f10a 0a01 	add.w	sl, sl, #1
 800c904:	2331      	movs	r3, #49	; 0x31
 800c906:	e779      	b.n	800c7fc <_dtoa_r+0xa74>
 800c908:	4b13      	ldr	r3, [pc, #76]	; (800c958 <_dtoa_r+0xbd0>)
 800c90a:	f7ff baaf 	b.w	800be6c <_dtoa_r+0xe4>
 800c90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c910:	2b00      	cmp	r3, #0
 800c912:	f47f aa86 	bne.w	800be22 <_dtoa_r+0x9a>
 800c916:	4b11      	ldr	r3, [pc, #68]	; (800c95c <_dtoa_r+0xbd4>)
 800c918:	f7ff baa8 	b.w	800be6c <_dtoa_r+0xe4>
 800c91c:	f1b9 0f00 	cmp.w	r9, #0
 800c920:	dc03      	bgt.n	800c92a <_dtoa_r+0xba2>
 800c922:	9b05      	ldr	r3, [sp, #20]
 800c924:	2b02      	cmp	r3, #2
 800c926:	f73f aec9 	bgt.w	800c6bc <_dtoa_r+0x934>
 800c92a:	9d00      	ldr	r5, [sp, #0]
 800c92c:	4631      	mov	r1, r6
 800c92e:	4658      	mov	r0, fp
 800c930:	f7ff f99c 	bl	800bc6c <quorem>
 800c934:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c938:	f805 3b01 	strb.w	r3, [r5], #1
 800c93c:	9a00      	ldr	r2, [sp, #0]
 800c93e:	1aaa      	subs	r2, r5, r2
 800c940:	4591      	cmp	r9, r2
 800c942:	ddba      	ble.n	800c8ba <_dtoa_r+0xb32>
 800c944:	4659      	mov	r1, fp
 800c946:	2300      	movs	r3, #0
 800c948:	220a      	movs	r2, #10
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 faa8 	bl	800cea0 <__multadd>
 800c950:	4683      	mov	fp, r0
 800c952:	e7eb      	b.n	800c92c <_dtoa_r+0xba4>
 800c954:	0800f3d3 	.word	0x0800f3d3
 800c958:	0800f32c 	.word	0x0800f32c
 800c95c:	0800f350 	.word	0x0800f350

0800c960 <__sflush_r>:
 800c960:	898a      	ldrh	r2, [r1, #12]
 800c962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c966:	4605      	mov	r5, r0
 800c968:	0710      	lsls	r0, r2, #28
 800c96a:	460c      	mov	r4, r1
 800c96c:	d458      	bmi.n	800ca20 <__sflush_r+0xc0>
 800c96e:	684b      	ldr	r3, [r1, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	dc05      	bgt.n	800c980 <__sflush_r+0x20>
 800c974:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	dc02      	bgt.n	800c980 <__sflush_r+0x20>
 800c97a:	2000      	movs	r0, #0
 800c97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c982:	2e00      	cmp	r6, #0
 800c984:	d0f9      	beq.n	800c97a <__sflush_r+0x1a>
 800c986:	2300      	movs	r3, #0
 800c988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c98c:	682f      	ldr	r7, [r5, #0]
 800c98e:	602b      	str	r3, [r5, #0]
 800c990:	d032      	beq.n	800c9f8 <__sflush_r+0x98>
 800c992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	075a      	lsls	r2, r3, #29
 800c998:	d505      	bpl.n	800c9a6 <__sflush_r+0x46>
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	1ac0      	subs	r0, r0, r3
 800c99e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9a0:	b10b      	cbz	r3, 800c9a6 <__sflush_r+0x46>
 800c9a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c9a4:	1ac0      	subs	r0, r0, r3
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9ac:	6a21      	ldr	r1, [r4, #32]
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	47b0      	blx	r6
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	d106      	bne.n	800c9c6 <__sflush_r+0x66>
 800c9b8:	6829      	ldr	r1, [r5, #0]
 800c9ba:	291d      	cmp	r1, #29
 800c9bc:	d82c      	bhi.n	800ca18 <__sflush_r+0xb8>
 800c9be:	4a2a      	ldr	r2, [pc, #168]	; (800ca68 <__sflush_r+0x108>)
 800c9c0:	40ca      	lsrs	r2, r1
 800c9c2:	07d6      	lsls	r6, r2, #31
 800c9c4:	d528      	bpl.n	800ca18 <__sflush_r+0xb8>
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	6062      	str	r2, [r4, #4]
 800c9ca:	04d9      	lsls	r1, r3, #19
 800c9cc:	6922      	ldr	r2, [r4, #16]
 800c9ce:	6022      	str	r2, [r4, #0]
 800c9d0:	d504      	bpl.n	800c9dc <__sflush_r+0x7c>
 800c9d2:	1c42      	adds	r2, r0, #1
 800c9d4:	d101      	bne.n	800c9da <__sflush_r+0x7a>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b903      	cbnz	r3, 800c9dc <__sflush_r+0x7c>
 800c9da:	6560      	str	r0, [r4, #84]	; 0x54
 800c9dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9de:	602f      	str	r7, [r5, #0]
 800c9e0:	2900      	cmp	r1, #0
 800c9e2:	d0ca      	beq.n	800c97a <__sflush_r+0x1a>
 800c9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d002      	beq.n	800c9f2 <__sflush_r+0x92>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f7fe fa87 	bl	800af00 <_free_r>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800c9f6:	e7c1      	b.n	800c97c <__sflush_r+0x1c>
 800c9f8:	6a21      	ldr	r1, [r4, #32]
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	4628      	mov	r0, r5
 800c9fe:	47b0      	blx	r6
 800ca00:	1c41      	adds	r1, r0, #1
 800ca02:	d1c7      	bne.n	800c994 <__sflush_r+0x34>
 800ca04:	682b      	ldr	r3, [r5, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0c4      	beq.n	800c994 <__sflush_r+0x34>
 800ca0a:	2b1d      	cmp	r3, #29
 800ca0c:	d001      	beq.n	800ca12 <__sflush_r+0xb2>
 800ca0e:	2b16      	cmp	r3, #22
 800ca10:	d101      	bne.n	800ca16 <__sflush_r+0xb6>
 800ca12:	602f      	str	r7, [r5, #0]
 800ca14:	e7b1      	b.n	800c97a <__sflush_r+0x1a>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca1c:	81a3      	strh	r3, [r4, #12]
 800ca1e:	e7ad      	b.n	800c97c <__sflush_r+0x1c>
 800ca20:	690f      	ldr	r7, [r1, #16]
 800ca22:	2f00      	cmp	r7, #0
 800ca24:	d0a9      	beq.n	800c97a <__sflush_r+0x1a>
 800ca26:	0793      	lsls	r3, r2, #30
 800ca28:	680e      	ldr	r6, [r1, #0]
 800ca2a:	bf08      	it	eq
 800ca2c:	694b      	ldreq	r3, [r1, #20]
 800ca2e:	600f      	str	r7, [r1, #0]
 800ca30:	bf18      	it	ne
 800ca32:	2300      	movne	r3, #0
 800ca34:	eba6 0807 	sub.w	r8, r6, r7
 800ca38:	608b      	str	r3, [r1, #8]
 800ca3a:	f1b8 0f00 	cmp.w	r8, #0
 800ca3e:	dd9c      	ble.n	800c97a <__sflush_r+0x1a>
 800ca40:	6a21      	ldr	r1, [r4, #32]
 800ca42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ca44:	4643      	mov	r3, r8
 800ca46:	463a      	mov	r2, r7
 800ca48:	4628      	mov	r0, r5
 800ca4a:	47b0      	blx	r6
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	dc06      	bgt.n	800ca5e <__sflush_r+0xfe>
 800ca50:	89a3      	ldrh	r3, [r4, #12]
 800ca52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca56:	81a3      	strh	r3, [r4, #12]
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	e78e      	b.n	800c97c <__sflush_r+0x1c>
 800ca5e:	4407      	add	r7, r0
 800ca60:	eba8 0800 	sub.w	r8, r8, r0
 800ca64:	e7e9      	b.n	800ca3a <__sflush_r+0xda>
 800ca66:	bf00      	nop
 800ca68:	20400001 	.word	0x20400001

0800ca6c <_fflush_r>:
 800ca6c:	b538      	push	{r3, r4, r5, lr}
 800ca6e:	690b      	ldr	r3, [r1, #16]
 800ca70:	4605      	mov	r5, r0
 800ca72:	460c      	mov	r4, r1
 800ca74:	b913      	cbnz	r3, 800ca7c <_fflush_r+0x10>
 800ca76:	2500      	movs	r5, #0
 800ca78:	4628      	mov	r0, r5
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	b118      	cbz	r0, 800ca86 <_fflush_r+0x1a>
 800ca7e:	6983      	ldr	r3, [r0, #24]
 800ca80:	b90b      	cbnz	r3, 800ca86 <_fflush_r+0x1a>
 800ca82:	f000 f887 	bl	800cb94 <__sinit>
 800ca86:	4b14      	ldr	r3, [pc, #80]	; (800cad8 <_fflush_r+0x6c>)
 800ca88:	429c      	cmp	r4, r3
 800ca8a:	d11b      	bne.n	800cac4 <_fflush_r+0x58>
 800ca8c:	686c      	ldr	r4, [r5, #4]
 800ca8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d0ef      	beq.n	800ca76 <_fflush_r+0xa>
 800ca96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca98:	07d0      	lsls	r0, r2, #31
 800ca9a:	d404      	bmi.n	800caa6 <_fflush_r+0x3a>
 800ca9c:	0599      	lsls	r1, r3, #22
 800ca9e:	d402      	bmi.n	800caa6 <_fflush_r+0x3a>
 800caa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caa2:	f000 f91a 	bl	800ccda <__retarget_lock_acquire_recursive>
 800caa6:	4628      	mov	r0, r5
 800caa8:	4621      	mov	r1, r4
 800caaa:	f7ff ff59 	bl	800c960 <__sflush_r>
 800caae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cab0:	07da      	lsls	r2, r3, #31
 800cab2:	4605      	mov	r5, r0
 800cab4:	d4e0      	bmi.n	800ca78 <_fflush_r+0xc>
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	059b      	lsls	r3, r3, #22
 800caba:	d4dd      	bmi.n	800ca78 <_fflush_r+0xc>
 800cabc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cabe:	f000 f90d 	bl	800ccdc <__retarget_lock_release_recursive>
 800cac2:	e7d9      	b.n	800ca78 <_fflush_r+0xc>
 800cac4:	4b05      	ldr	r3, [pc, #20]	; (800cadc <_fflush_r+0x70>)
 800cac6:	429c      	cmp	r4, r3
 800cac8:	d101      	bne.n	800cace <_fflush_r+0x62>
 800caca:	68ac      	ldr	r4, [r5, #8]
 800cacc:	e7df      	b.n	800ca8e <_fflush_r+0x22>
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <_fflush_r+0x74>)
 800cad0:	429c      	cmp	r4, r3
 800cad2:	bf08      	it	eq
 800cad4:	68ec      	ldreq	r4, [r5, #12]
 800cad6:	e7da      	b.n	800ca8e <_fflush_r+0x22>
 800cad8:	0800f404 	.word	0x0800f404
 800cadc:	0800f424 	.word	0x0800f424
 800cae0:	0800f3e4 	.word	0x0800f3e4

0800cae4 <std>:
 800cae4:	2300      	movs	r3, #0
 800cae6:	b510      	push	{r4, lr}
 800cae8:	4604      	mov	r4, r0
 800caea:	e9c0 3300 	strd	r3, r3, [r0]
 800caee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800caf2:	6083      	str	r3, [r0, #8]
 800caf4:	8181      	strh	r1, [r0, #12]
 800caf6:	6643      	str	r3, [r0, #100]	; 0x64
 800caf8:	81c2      	strh	r2, [r0, #14]
 800cafa:	6183      	str	r3, [r0, #24]
 800cafc:	4619      	mov	r1, r3
 800cafe:	2208      	movs	r2, #8
 800cb00:	305c      	adds	r0, #92	; 0x5c
 800cb02:	f7fe f9f5 	bl	800aef0 <memset>
 800cb06:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <std+0x38>)
 800cb08:	6263      	str	r3, [r4, #36]	; 0x24
 800cb0a:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <std+0x3c>)
 800cb0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb0e:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <std+0x40>)
 800cb10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <std+0x44>)
 800cb14:	6224      	str	r4, [r4, #32]
 800cb16:	6323      	str	r3, [r4, #48]	; 0x30
 800cb18:	bd10      	pop	{r4, pc}
 800cb1a:	bf00      	nop
 800cb1c:	0800d7a9 	.word	0x0800d7a9
 800cb20:	0800d7cb 	.word	0x0800d7cb
 800cb24:	0800d803 	.word	0x0800d803
 800cb28:	0800d827 	.word	0x0800d827

0800cb2c <_cleanup_r>:
 800cb2c:	4901      	ldr	r1, [pc, #4]	; (800cb34 <_cleanup_r+0x8>)
 800cb2e:	f000 b8af 	b.w	800cc90 <_fwalk_reent>
 800cb32:	bf00      	nop
 800cb34:	0800ca6d 	.word	0x0800ca6d

0800cb38 <__sfmoreglue>:
 800cb38:	b570      	push	{r4, r5, r6, lr}
 800cb3a:	1e4a      	subs	r2, r1, #1
 800cb3c:	2568      	movs	r5, #104	; 0x68
 800cb3e:	4355      	muls	r5, r2
 800cb40:	460e      	mov	r6, r1
 800cb42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cb46:	f7fe fa2b 	bl	800afa0 <_malloc_r>
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	b140      	cbz	r0, 800cb60 <__sfmoreglue+0x28>
 800cb4e:	2100      	movs	r1, #0
 800cb50:	e9c0 1600 	strd	r1, r6, [r0]
 800cb54:	300c      	adds	r0, #12
 800cb56:	60a0      	str	r0, [r4, #8]
 800cb58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cb5c:	f7fe f9c8 	bl	800aef0 <memset>
 800cb60:	4620      	mov	r0, r4
 800cb62:	bd70      	pop	{r4, r5, r6, pc}

0800cb64 <__sfp_lock_acquire>:
 800cb64:	4801      	ldr	r0, [pc, #4]	; (800cb6c <__sfp_lock_acquire+0x8>)
 800cb66:	f000 b8b8 	b.w	800ccda <__retarget_lock_acquire_recursive>
 800cb6a:	bf00      	nop
 800cb6c:	200008ac 	.word	0x200008ac

0800cb70 <__sfp_lock_release>:
 800cb70:	4801      	ldr	r0, [pc, #4]	; (800cb78 <__sfp_lock_release+0x8>)
 800cb72:	f000 b8b3 	b.w	800ccdc <__retarget_lock_release_recursive>
 800cb76:	bf00      	nop
 800cb78:	200008ac 	.word	0x200008ac

0800cb7c <__sinit_lock_acquire>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__sinit_lock_acquire+0x8>)
 800cb7e:	f000 b8ac 	b.w	800ccda <__retarget_lock_acquire_recursive>
 800cb82:	bf00      	nop
 800cb84:	200008a7 	.word	0x200008a7

0800cb88 <__sinit_lock_release>:
 800cb88:	4801      	ldr	r0, [pc, #4]	; (800cb90 <__sinit_lock_release+0x8>)
 800cb8a:	f000 b8a7 	b.w	800ccdc <__retarget_lock_release_recursive>
 800cb8e:	bf00      	nop
 800cb90:	200008a7 	.word	0x200008a7

0800cb94 <__sinit>:
 800cb94:	b510      	push	{r4, lr}
 800cb96:	4604      	mov	r4, r0
 800cb98:	f7ff fff0 	bl	800cb7c <__sinit_lock_acquire>
 800cb9c:	69a3      	ldr	r3, [r4, #24]
 800cb9e:	b11b      	cbz	r3, 800cba8 <__sinit+0x14>
 800cba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cba4:	f7ff bff0 	b.w	800cb88 <__sinit_lock_release>
 800cba8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cbac:	6523      	str	r3, [r4, #80]	; 0x50
 800cbae:	4b13      	ldr	r3, [pc, #76]	; (800cbfc <__sinit+0x68>)
 800cbb0:	4a13      	ldr	r2, [pc, #76]	; (800cc00 <__sinit+0x6c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cbb6:	42a3      	cmp	r3, r4
 800cbb8:	bf04      	itt	eq
 800cbba:	2301      	moveq	r3, #1
 800cbbc:	61a3      	streq	r3, [r4, #24]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 f820 	bl	800cc04 <__sfp>
 800cbc4:	6060      	str	r0, [r4, #4]
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f000 f81c 	bl	800cc04 <__sfp>
 800cbcc:	60a0      	str	r0, [r4, #8]
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 f818 	bl	800cc04 <__sfp>
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	60e0      	str	r0, [r4, #12]
 800cbd8:	2104      	movs	r1, #4
 800cbda:	6860      	ldr	r0, [r4, #4]
 800cbdc:	f7ff ff82 	bl	800cae4 <std>
 800cbe0:	68a0      	ldr	r0, [r4, #8]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	2109      	movs	r1, #9
 800cbe6:	f7ff ff7d 	bl	800cae4 <std>
 800cbea:	68e0      	ldr	r0, [r4, #12]
 800cbec:	2202      	movs	r2, #2
 800cbee:	2112      	movs	r1, #18
 800cbf0:	f7ff ff78 	bl	800cae4 <std>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	61a3      	str	r3, [r4, #24]
 800cbf8:	e7d2      	b.n	800cba0 <__sinit+0xc>
 800cbfa:	bf00      	nop
 800cbfc:	0800f318 	.word	0x0800f318
 800cc00:	0800cb2d 	.word	0x0800cb2d

0800cc04 <__sfp>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	4607      	mov	r7, r0
 800cc08:	f7ff ffac 	bl	800cb64 <__sfp_lock_acquire>
 800cc0c:	4b1e      	ldr	r3, [pc, #120]	; (800cc88 <__sfp+0x84>)
 800cc0e:	681e      	ldr	r6, [r3, #0]
 800cc10:	69b3      	ldr	r3, [r6, #24]
 800cc12:	b913      	cbnz	r3, 800cc1a <__sfp+0x16>
 800cc14:	4630      	mov	r0, r6
 800cc16:	f7ff ffbd 	bl	800cb94 <__sinit>
 800cc1a:	3648      	adds	r6, #72	; 0x48
 800cc1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc20:	3b01      	subs	r3, #1
 800cc22:	d503      	bpl.n	800cc2c <__sfp+0x28>
 800cc24:	6833      	ldr	r3, [r6, #0]
 800cc26:	b30b      	cbz	r3, 800cc6c <__sfp+0x68>
 800cc28:	6836      	ldr	r6, [r6, #0]
 800cc2a:	e7f7      	b.n	800cc1c <__sfp+0x18>
 800cc2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc30:	b9d5      	cbnz	r5, 800cc68 <__sfp+0x64>
 800cc32:	4b16      	ldr	r3, [pc, #88]	; (800cc8c <__sfp+0x88>)
 800cc34:	60e3      	str	r3, [r4, #12]
 800cc36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc3a:	6665      	str	r5, [r4, #100]	; 0x64
 800cc3c:	f000 f84c 	bl	800ccd8 <__retarget_lock_init_recursive>
 800cc40:	f7ff ff96 	bl	800cb70 <__sfp_lock_release>
 800cc44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cc48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cc4c:	6025      	str	r5, [r4, #0]
 800cc4e:	61a5      	str	r5, [r4, #24]
 800cc50:	2208      	movs	r2, #8
 800cc52:	4629      	mov	r1, r5
 800cc54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cc58:	f7fe f94a 	bl	800aef0 <memset>
 800cc5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cc60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cc64:	4620      	mov	r0, r4
 800cc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc68:	3468      	adds	r4, #104	; 0x68
 800cc6a:	e7d9      	b.n	800cc20 <__sfp+0x1c>
 800cc6c:	2104      	movs	r1, #4
 800cc6e:	4638      	mov	r0, r7
 800cc70:	f7ff ff62 	bl	800cb38 <__sfmoreglue>
 800cc74:	4604      	mov	r4, r0
 800cc76:	6030      	str	r0, [r6, #0]
 800cc78:	2800      	cmp	r0, #0
 800cc7a:	d1d5      	bne.n	800cc28 <__sfp+0x24>
 800cc7c:	f7ff ff78 	bl	800cb70 <__sfp_lock_release>
 800cc80:	230c      	movs	r3, #12
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	e7ee      	b.n	800cc64 <__sfp+0x60>
 800cc86:	bf00      	nop
 800cc88:	0800f318 	.word	0x0800f318
 800cc8c:	ffff0001 	.word	0xffff0001

0800cc90 <_fwalk_reent>:
 800cc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc94:	4606      	mov	r6, r0
 800cc96:	4688      	mov	r8, r1
 800cc98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc9c:	2700      	movs	r7, #0
 800cc9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cca2:	f1b9 0901 	subs.w	r9, r9, #1
 800cca6:	d505      	bpl.n	800ccb4 <_fwalk_reent+0x24>
 800cca8:	6824      	ldr	r4, [r4, #0]
 800ccaa:	2c00      	cmp	r4, #0
 800ccac:	d1f7      	bne.n	800cc9e <_fwalk_reent+0xe>
 800ccae:	4638      	mov	r0, r7
 800ccb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccb4:	89ab      	ldrh	r3, [r5, #12]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d907      	bls.n	800ccca <_fwalk_reent+0x3a>
 800ccba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	d003      	beq.n	800ccca <_fwalk_reent+0x3a>
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	47c0      	blx	r8
 800ccc8:	4307      	orrs	r7, r0
 800ccca:	3568      	adds	r5, #104	; 0x68
 800cccc:	e7e9      	b.n	800cca2 <_fwalk_reent+0x12>
	...

0800ccd0 <_localeconv_r>:
 800ccd0:	4800      	ldr	r0, [pc, #0]	; (800ccd4 <_localeconv_r+0x4>)
 800ccd2:	4770      	bx	lr
 800ccd4:	20000168 	.word	0x20000168

0800ccd8 <__retarget_lock_init_recursive>:
 800ccd8:	4770      	bx	lr

0800ccda <__retarget_lock_acquire_recursive>:
 800ccda:	4770      	bx	lr

0800ccdc <__retarget_lock_release_recursive>:
 800ccdc:	4770      	bx	lr

0800ccde <__swhatbuf_r>:
 800ccde:	b570      	push	{r4, r5, r6, lr}
 800cce0:	460e      	mov	r6, r1
 800cce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce6:	2900      	cmp	r1, #0
 800cce8:	b096      	sub	sp, #88	; 0x58
 800ccea:	4614      	mov	r4, r2
 800ccec:	461d      	mov	r5, r3
 800ccee:	da07      	bge.n	800cd00 <__swhatbuf_r+0x22>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	602b      	str	r3, [r5, #0]
 800ccf4:	89b3      	ldrh	r3, [r6, #12]
 800ccf6:	061a      	lsls	r2, r3, #24
 800ccf8:	d410      	bmi.n	800cd1c <__swhatbuf_r+0x3e>
 800ccfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccfe:	e00e      	b.n	800cd1e <__swhatbuf_r+0x40>
 800cd00:	466a      	mov	r2, sp
 800cd02:	f000 fde7 	bl	800d8d4 <_fstat_r>
 800cd06:	2800      	cmp	r0, #0
 800cd08:	dbf2      	blt.n	800ccf0 <__swhatbuf_r+0x12>
 800cd0a:	9a01      	ldr	r2, [sp, #4]
 800cd0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd14:	425a      	negs	r2, r3
 800cd16:	415a      	adcs	r2, r3
 800cd18:	602a      	str	r2, [r5, #0]
 800cd1a:	e7ee      	b.n	800ccfa <__swhatbuf_r+0x1c>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	2000      	movs	r0, #0
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	b016      	add	sp, #88	; 0x58
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cd28 <__smakebuf_r>:
 800cd28:	898b      	ldrh	r3, [r1, #12]
 800cd2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd2c:	079d      	lsls	r5, r3, #30
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460c      	mov	r4, r1
 800cd32:	d507      	bpl.n	800cd44 <__smakebuf_r+0x1c>
 800cd34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cd38:	6023      	str	r3, [r4, #0]
 800cd3a:	6123      	str	r3, [r4, #16]
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	6163      	str	r3, [r4, #20]
 800cd40:	b002      	add	sp, #8
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	ab01      	add	r3, sp, #4
 800cd46:	466a      	mov	r2, sp
 800cd48:	f7ff ffc9 	bl	800ccde <__swhatbuf_r>
 800cd4c:	9900      	ldr	r1, [sp, #0]
 800cd4e:	4605      	mov	r5, r0
 800cd50:	4630      	mov	r0, r6
 800cd52:	f7fe f925 	bl	800afa0 <_malloc_r>
 800cd56:	b948      	cbnz	r0, 800cd6c <__smakebuf_r+0x44>
 800cd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd5c:	059a      	lsls	r2, r3, #22
 800cd5e:	d4ef      	bmi.n	800cd40 <__smakebuf_r+0x18>
 800cd60:	f023 0303 	bic.w	r3, r3, #3
 800cd64:	f043 0302 	orr.w	r3, r3, #2
 800cd68:	81a3      	strh	r3, [r4, #12]
 800cd6a:	e7e3      	b.n	800cd34 <__smakebuf_r+0xc>
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	; (800cda4 <__smakebuf_r+0x7c>)
 800cd6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cd70:	89a3      	ldrh	r3, [r4, #12]
 800cd72:	6020      	str	r0, [r4, #0]
 800cd74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd78:	81a3      	strh	r3, [r4, #12]
 800cd7a:	9b00      	ldr	r3, [sp, #0]
 800cd7c:	6163      	str	r3, [r4, #20]
 800cd7e:	9b01      	ldr	r3, [sp, #4]
 800cd80:	6120      	str	r0, [r4, #16]
 800cd82:	b15b      	cbz	r3, 800cd9c <__smakebuf_r+0x74>
 800cd84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd88:	4630      	mov	r0, r6
 800cd8a:	f000 fdb5 	bl	800d8f8 <_isatty_r>
 800cd8e:	b128      	cbz	r0, 800cd9c <__smakebuf_r+0x74>
 800cd90:	89a3      	ldrh	r3, [r4, #12]
 800cd92:	f023 0303 	bic.w	r3, r3, #3
 800cd96:	f043 0301 	orr.w	r3, r3, #1
 800cd9a:	81a3      	strh	r3, [r4, #12]
 800cd9c:	89a0      	ldrh	r0, [r4, #12]
 800cd9e:	4305      	orrs	r5, r0
 800cda0:	81a5      	strh	r5, [r4, #12]
 800cda2:	e7cd      	b.n	800cd40 <__smakebuf_r+0x18>
 800cda4:	0800cb2d 	.word	0x0800cb2d

0800cda8 <memcpy>:
 800cda8:	440a      	add	r2, r1
 800cdaa:	4291      	cmp	r1, r2
 800cdac:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdb0:	d100      	bne.n	800cdb4 <memcpy+0xc>
 800cdb2:	4770      	bx	lr
 800cdb4:	b510      	push	{r4, lr}
 800cdb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdbe:	4291      	cmp	r1, r2
 800cdc0:	d1f9      	bne.n	800cdb6 <memcpy+0xe>
 800cdc2:	bd10      	pop	{r4, pc}

0800cdc4 <__malloc_lock>:
 800cdc4:	4801      	ldr	r0, [pc, #4]	; (800cdcc <__malloc_lock+0x8>)
 800cdc6:	f7ff bf88 	b.w	800ccda <__retarget_lock_acquire_recursive>
 800cdca:	bf00      	nop
 800cdcc:	200008a8 	.word	0x200008a8

0800cdd0 <__malloc_unlock>:
 800cdd0:	4801      	ldr	r0, [pc, #4]	; (800cdd8 <__malloc_unlock+0x8>)
 800cdd2:	f7ff bf83 	b.w	800ccdc <__retarget_lock_release_recursive>
 800cdd6:	bf00      	nop
 800cdd8:	200008a8 	.word	0x200008a8

0800cddc <_Balloc>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cde0:	4604      	mov	r4, r0
 800cde2:	460d      	mov	r5, r1
 800cde4:	b976      	cbnz	r6, 800ce04 <_Balloc+0x28>
 800cde6:	2010      	movs	r0, #16
 800cde8:	f7fe f87a 	bl	800aee0 <malloc>
 800cdec:	4602      	mov	r2, r0
 800cdee:	6260      	str	r0, [r4, #36]	; 0x24
 800cdf0:	b920      	cbnz	r0, 800cdfc <_Balloc+0x20>
 800cdf2:	4b18      	ldr	r3, [pc, #96]	; (800ce54 <_Balloc+0x78>)
 800cdf4:	4818      	ldr	r0, [pc, #96]	; (800ce58 <_Balloc+0x7c>)
 800cdf6:	2166      	movs	r1, #102	; 0x66
 800cdf8:	f000 fd2c 	bl	800d854 <__assert_func>
 800cdfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce00:	6006      	str	r6, [r0, #0]
 800ce02:	60c6      	str	r6, [r0, #12]
 800ce04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce06:	68f3      	ldr	r3, [r6, #12]
 800ce08:	b183      	cbz	r3, 800ce2c <_Balloc+0x50>
 800ce0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce12:	b9b8      	cbnz	r0, 800ce44 <_Balloc+0x68>
 800ce14:	2101      	movs	r1, #1
 800ce16:	fa01 f605 	lsl.w	r6, r1, r5
 800ce1a:	1d72      	adds	r2, r6, #5
 800ce1c:	0092      	lsls	r2, r2, #2
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f000 fb5a 	bl	800d4d8 <_calloc_r>
 800ce24:	b160      	cbz	r0, 800ce40 <_Balloc+0x64>
 800ce26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce2a:	e00e      	b.n	800ce4a <_Balloc+0x6e>
 800ce2c:	2221      	movs	r2, #33	; 0x21
 800ce2e:	2104      	movs	r1, #4
 800ce30:	4620      	mov	r0, r4
 800ce32:	f000 fb51 	bl	800d4d8 <_calloc_r>
 800ce36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce38:	60f0      	str	r0, [r6, #12]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1e4      	bne.n	800ce0a <_Balloc+0x2e>
 800ce40:	2000      	movs	r0, #0
 800ce42:	bd70      	pop	{r4, r5, r6, pc}
 800ce44:	6802      	ldr	r2, [r0, #0]
 800ce46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce50:	e7f7      	b.n	800ce42 <_Balloc+0x66>
 800ce52:	bf00      	nop
 800ce54:	0800f35d 	.word	0x0800f35d
 800ce58:	0800f444 	.word	0x0800f444

0800ce5c <_Bfree>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce60:	4605      	mov	r5, r0
 800ce62:	460c      	mov	r4, r1
 800ce64:	b976      	cbnz	r6, 800ce84 <_Bfree+0x28>
 800ce66:	2010      	movs	r0, #16
 800ce68:	f7fe f83a 	bl	800aee0 <malloc>
 800ce6c:	4602      	mov	r2, r0
 800ce6e:	6268      	str	r0, [r5, #36]	; 0x24
 800ce70:	b920      	cbnz	r0, 800ce7c <_Bfree+0x20>
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <_Bfree+0x3c>)
 800ce74:	4809      	ldr	r0, [pc, #36]	; (800ce9c <_Bfree+0x40>)
 800ce76:	218a      	movs	r1, #138	; 0x8a
 800ce78:	f000 fcec 	bl	800d854 <__assert_func>
 800ce7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce80:	6006      	str	r6, [r0, #0]
 800ce82:	60c6      	str	r6, [r0, #12]
 800ce84:	b13c      	cbz	r4, 800ce96 <_Bfree+0x3a>
 800ce86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ce88:	6862      	ldr	r2, [r4, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce90:	6021      	str	r1, [r4, #0]
 800ce92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce96:	bd70      	pop	{r4, r5, r6, pc}
 800ce98:	0800f35d 	.word	0x0800f35d
 800ce9c:	0800f444 	.word	0x0800f444

0800cea0 <__multadd>:
 800cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea4:	690e      	ldr	r6, [r1, #16]
 800cea6:	4607      	mov	r7, r0
 800cea8:	4698      	mov	r8, r3
 800ceaa:	460c      	mov	r4, r1
 800ceac:	f101 0014 	add.w	r0, r1, #20
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	6805      	ldr	r5, [r0, #0]
 800ceb4:	b2a9      	uxth	r1, r5
 800ceb6:	fb02 8101 	mla	r1, r2, r1, r8
 800ceba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800cebe:	0c2d      	lsrs	r5, r5, #16
 800cec0:	fb02 c505 	mla	r5, r2, r5, ip
 800cec4:	b289      	uxth	r1, r1
 800cec6:	3301      	adds	r3, #1
 800cec8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800cecc:	429e      	cmp	r6, r3
 800cece:	f840 1b04 	str.w	r1, [r0], #4
 800ced2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ced6:	dcec      	bgt.n	800ceb2 <__multadd+0x12>
 800ced8:	f1b8 0f00 	cmp.w	r8, #0
 800cedc:	d022      	beq.n	800cf24 <__multadd+0x84>
 800cede:	68a3      	ldr	r3, [r4, #8]
 800cee0:	42b3      	cmp	r3, r6
 800cee2:	dc19      	bgt.n	800cf18 <__multadd+0x78>
 800cee4:	6861      	ldr	r1, [r4, #4]
 800cee6:	4638      	mov	r0, r7
 800cee8:	3101      	adds	r1, #1
 800ceea:	f7ff ff77 	bl	800cddc <_Balloc>
 800ceee:	4605      	mov	r5, r0
 800cef0:	b928      	cbnz	r0, 800cefe <__multadd+0x5e>
 800cef2:	4602      	mov	r2, r0
 800cef4:	4b0d      	ldr	r3, [pc, #52]	; (800cf2c <__multadd+0x8c>)
 800cef6:	480e      	ldr	r0, [pc, #56]	; (800cf30 <__multadd+0x90>)
 800cef8:	21b5      	movs	r1, #181	; 0xb5
 800cefa:	f000 fcab 	bl	800d854 <__assert_func>
 800cefe:	6922      	ldr	r2, [r4, #16]
 800cf00:	3202      	adds	r2, #2
 800cf02:	f104 010c 	add.w	r1, r4, #12
 800cf06:	0092      	lsls	r2, r2, #2
 800cf08:	300c      	adds	r0, #12
 800cf0a:	f7ff ff4d 	bl	800cda8 <memcpy>
 800cf0e:	4621      	mov	r1, r4
 800cf10:	4638      	mov	r0, r7
 800cf12:	f7ff ffa3 	bl	800ce5c <_Bfree>
 800cf16:	462c      	mov	r4, r5
 800cf18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800cf1c:	3601      	adds	r6, #1
 800cf1e:	f8c3 8014 	str.w	r8, [r3, #20]
 800cf22:	6126      	str	r6, [r4, #16]
 800cf24:	4620      	mov	r0, r4
 800cf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf2a:	bf00      	nop
 800cf2c:	0800f3d3 	.word	0x0800f3d3
 800cf30:	0800f444 	.word	0x0800f444

0800cf34 <__hi0bits>:
 800cf34:	0c03      	lsrs	r3, r0, #16
 800cf36:	041b      	lsls	r3, r3, #16
 800cf38:	b9d3      	cbnz	r3, 800cf70 <__hi0bits+0x3c>
 800cf3a:	0400      	lsls	r0, r0, #16
 800cf3c:	2310      	movs	r3, #16
 800cf3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf42:	bf04      	itt	eq
 800cf44:	0200      	lsleq	r0, r0, #8
 800cf46:	3308      	addeq	r3, #8
 800cf48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf4c:	bf04      	itt	eq
 800cf4e:	0100      	lsleq	r0, r0, #4
 800cf50:	3304      	addeq	r3, #4
 800cf52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf56:	bf04      	itt	eq
 800cf58:	0080      	lsleq	r0, r0, #2
 800cf5a:	3302      	addeq	r3, #2
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	db05      	blt.n	800cf6c <__hi0bits+0x38>
 800cf60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf64:	f103 0301 	add.w	r3, r3, #1
 800cf68:	bf08      	it	eq
 800cf6a:	2320      	moveq	r3, #32
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	4770      	bx	lr
 800cf70:	2300      	movs	r3, #0
 800cf72:	e7e4      	b.n	800cf3e <__hi0bits+0xa>

0800cf74 <__lo0bits>:
 800cf74:	6803      	ldr	r3, [r0, #0]
 800cf76:	f013 0207 	ands.w	r2, r3, #7
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	d00b      	beq.n	800cf96 <__lo0bits+0x22>
 800cf7e:	07da      	lsls	r2, r3, #31
 800cf80:	d424      	bmi.n	800cfcc <__lo0bits+0x58>
 800cf82:	0798      	lsls	r0, r3, #30
 800cf84:	bf49      	itett	mi
 800cf86:	085b      	lsrmi	r3, r3, #1
 800cf88:	089b      	lsrpl	r3, r3, #2
 800cf8a:	2001      	movmi	r0, #1
 800cf8c:	600b      	strmi	r3, [r1, #0]
 800cf8e:	bf5c      	itt	pl
 800cf90:	600b      	strpl	r3, [r1, #0]
 800cf92:	2002      	movpl	r0, #2
 800cf94:	4770      	bx	lr
 800cf96:	b298      	uxth	r0, r3
 800cf98:	b9b0      	cbnz	r0, 800cfc8 <__lo0bits+0x54>
 800cf9a:	0c1b      	lsrs	r3, r3, #16
 800cf9c:	2010      	movs	r0, #16
 800cf9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cfa2:	bf04      	itt	eq
 800cfa4:	0a1b      	lsreq	r3, r3, #8
 800cfa6:	3008      	addeq	r0, #8
 800cfa8:	071a      	lsls	r2, r3, #28
 800cfaa:	bf04      	itt	eq
 800cfac:	091b      	lsreq	r3, r3, #4
 800cfae:	3004      	addeq	r0, #4
 800cfb0:	079a      	lsls	r2, r3, #30
 800cfb2:	bf04      	itt	eq
 800cfb4:	089b      	lsreq	r3, r3, #2
 800cfb6:	3002      	addeq	r0, #2
 800cfb8:	07da      	lsls	r2, r3, #31
 800cfba:	d403      	bmi.n	800cfc4 <__lo0bits+0x50>
 800cfbc:	085b      	lsrs	r3, r3, #1
 800cfbe:	f100 0001 	add.w	r0, r0, #1
 800cfc2:	d005      	beq.n	800cfd0 <__lo0bits+0x5c>
 800cfc4:	600b      	str	r3, [r1, #0]
 800cfc6:	4770      	bx	lr
 800cfc8:	4610      	mov	r0, r2
 800cfca:	e7e8      	b.n	800cf9e <__lo0bits+0x2a>
 800cfcc:	2000      	movs	r0, #0
 800cfce:	4770      	bx	lr
 800cfd0:	2020      	movs	r0, #32
 800cfd2:	4770      	bx	lr

0800cfd4 <__i2b>:
 800cfd4:	b510      	push	{r4, lr}
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	2101      	movs	r1, #1
 800cfda:	f7ff feff 	bl	800cddc <_Balloc>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	b928      	cbnz	r0, 800cfee <__i2b+0x1a>
 800cfe2:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <__i2b+0x24>)
 800cfe4:	4805      	ldr	r0, [pc, #20]	; (800cffc <__i2b+0x28>)
 800cfe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cfea:	f000 fc33 	bl	800d854 <__assert_func>
 800cfee:	2301      	movs	r3, #1
 800cff0:	6144      	str	r4, [r0, #20]
 800cff2:	6103      	str	r3, [r0, #16]
 800cff4:	bd10      	pop	{r4, pc}
 800cff6:	bf00      	nop
 800cff8:	0800f3d3 	.word	0x0800f3d3
 800cffc:	0800f444 	.word	0x0800f444

0800d000 <__multiply>:
 800d000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d004:	4614      	mov	r4, r2
 800d006:	690a      	ldr	r2, [r1, #16]
 800d008:	6923      	ldr	r3, [r4, #16]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	bfb8      	it	lt
 800d00e:	460b      	movlt	r3, r1
 800d010:	460d      	mov	r5, r1
 800d012:	bfbc      	itt	lt
 800d014:	4625      	movlt	r5, r4
 800d016:	461c      	movlt	r4, r3
 800d018:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d01c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d020:	68ab      	ldr	r3, [r5, #8]
 800d022:	6869      	ldr	r1, [r5, #4]
 800d024:	eb0a 0709 	add.w	r7, sl, r9
 800d028:	42bb      	cmp	r3, r7
 800d02a:	b085      	sub	sp, #20
 800d02c:	bfb8      	it	lt
 800d02e:	3101      	addlt	r1, #1
 800d030:	f7ff fed4 	bl	800cddc <_Balloc>
 800d034:	b930      	cbnz	r0, 800d044 <__multiply+0x44>
 800d036:	4602      	mov	r2, r0
 800d038:	4b42      	ldr	r3, [pc, #264]	; (800d144 <__multiply+0x144>)
 800d03a:	4843      	ldr	r0, [pc, #268]	; (800d148 <__multiply+0x148>)
 800d03c:	f240 115d 	movw	r1, #349	; 0x15d
 800d040:	f000 fc08 	bl	800d854 <__assert_func>
 800d044:	f100 0614 	add.w	r6, r0, #20
 800d048:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d04c:	4633      	mov	r3, r6
 800d04e:	2200      	movs	r2, #0
 800d050:	4543      	cmp	r3, r8
 800d052:	d31e      	bcc.n	800d092 <__multiply+0x92>
 800d054:	f105 0c14 	add.w	ip, r5, #20
 800d058:	f104 0314 	add.w	r3, r4, #20
 800d05c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d060:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d064:	9202      	str	r2, [sp, #8]
 800d066:	ebac 0205 	sub.w	r2, ip, r5
 800d06a:	3a15      	subs	r2, #21
 800d06c:	f022 0203 	bic.w	r2, r2, #3
 800d070:	3204      	adds	r2, #4
 800d072:	f105 0115 	add.w	r1, r5, #21
 800d076:	458c      	cmp	ip, r1
 800d078:	bf38      	it	cc
 800d07a:	2204      	movcc	r2, #4
 800d07c:	9201      	str	r2, [sp, #4]
 800d07e:	9a02      	ldr	r2, [sp, #8]
 800d080:	9303      	str	r3, [sp, #12]
 800d082:	429a      	cmp	r2, r3
 800d084:	d808      	bhi.n	800d098 <__multiply+0x98>
 800d086:	2f00      	cmp	r7, #0
 800d088:	dc55      	bgt.n	800d136 <__multiply+0x136>
 800d08a:	6107      	str	r7, [r0, #16]
 800d08c:	b005      	add	sp, #20
 800d08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d092:	f843 2b04 	str.w	r2, [r3], #4
 800d096:	e7db      	b.n	800d050 <__multiply+0x50>
 800d098:	f8b3 a000 	ldrh.w	sl, [r3]
 800d09c:	f1ba 0f00 	cmp.w	sl, #0
 800d0a0:	d020      	beq.n	800d0e4 <__multiply+0xe4>
 800d0a2:	f105 0e14 	add.w	lr, r5, #20
 800d0a6:	46b1      	mov	r9, r6
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d0ae:	f8d9 b000 	ldr.w	fp, [r9]
 800d0b2:	b2a1      	uxth	r1, r4
 800d0b4:	fa1f fb8b 	uxth.w	fp, fp
 800d0b8:	fb0a b101 	mla	r1, sl, r1, fp
 800d0bc:	4411      	add	r1, r2
 800d0be:	f8d9 2000 	ldr.w	r2, [r9]
 800d0c2:	0c24      	lsrs	r4, r4, #16
 800d0c4:	0c12      	lsrs	r2, r2, #16
 800d0c6:	fb0a 2404 	mla	r4, sl, r4, r2
 800d0ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d0ce:	b289      	uxth	r1, r1
 800d0d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d0d4:	45f4      	cmp	ip, lr
 800d0d6:	f849 1b04 	str.w	r1, [r9], #4
 800d0da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d0de:	d8e4      	bhi.n	800d0aa <__multiply+0xaa>
 800d0e0:	9901      	ldr	r1, [sp, #4]
 800d0e2:	5072      	str	r2, [r6, r1]
 800d0e4:	9a03      	ldr	r2, [sp, #12]
 800d0e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	f1b9 0f00 	cmp.w	r9, #0
 800d0f0:	d01f      	beq.n	800d132 <__multiply+0x132>
 800d0f2:	6834      	ldr	r4, [r6, #0]
 800d0f4:	f105 0114 	add.w	r1, r5, #20
 800d0f8:	46b6      	mov	lr, r6
 800d0fa:	f04f 0a00 	mov.w	sl, #0
 800d0fe:	880a      	ldrh	r2, [r1, #0]
 800d100:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d104:	fb09 b202 	mla	r2, r9, r2, fp
 800d108:	4492      	add	sl, r2
 800d10a:	b2a4      	uxth	r4, r4
 800d10c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d110:	f84e 4b04 	str.w	r4, [lr], #4
 800d114:	f851 4b04 	ldr.w	r4, [r1], #4
 800d118:	f8be 2000 	ldrh.w	r2, [lr]
 800d11c:	0c24      	lsrs	r4, r4, #16
 800d11e:	fb09 2404 	mla	r4, r9, r4, r2
 800d122:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d126:	458c      	cmp	ip, r1
 800d128:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d12c:	d8e7      	bhi.n	800d0fe <__multiply+0xfe>
 800d12e:	9a01      	ldr	r2, [sp, #4]
 800d130:	50b4      	str	r4, [r6, r2]
 800d132:	3604      	adds	r6, #4
 800d134:	e7a3      	b.n	800d07e <__multiply+0x7e>
 800d136:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1a5      	bne.n	800d08a <__multiply+0x8a>
 800d13e:	3f01      	subs	r7, #1
 800d140:	e7a1      	b.n	800d086 <__multiply+0x86>
 800d142:	bf00      	nop
 800d144:	0800f3d3 	.word	0x0800f3d3
 800d148:	0800f444 	.word	0x0800f444

0800d14c <__pow5mult>:
 800d14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d150:	4615      	mov	r5, r2
 800d152:	f012 0203 	ands.w	r2, r2, #3
 800d156:	4606      	mov	r6, r0
 800d158:	460f      	mov	r7, r1
 800d15a:	d007      	beq.n	800d16c <__pow5mult+0x20>
 800d15c:	4c25      	ldr	r4, [pc, #148]	; (800d1f4 <__pow5mult+0xa8>)
 800d15e:	3a01      	subs	r2, #1
 800d160:	2300      	movs	r3, #0
 800d162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d166:	f7ff fe9b 	bl	800cea0 <__multadd>
 800d16a:	4607      	mov	r7, r0
 800d16c:	10ad      	asrs	r5, r5, #2
 800d16e:	d03d      	beq.n	800d1ec <__pow5mult+0xa0>
 800d170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d172:	b97c      	cbnz	r4, 800d194 <__pow5mult+0x48>
 800d174:	2010      	movs	r0, #16
 800d176:	f7fd feb3 	bl	800aee0 <malloc>
 800d17a:	4602      	mov	r2, r0
 800d17c:	6270      	str	r0, [r6, #36]	; 0x24
 800d17e:	b928      	cbnz	r0, 800d18c <__pow5mult+0x40>
 800d180:	4b1d      	ldr	r3, [pc, #116]	; (800d1f8 <__pow5mult+0xac>)
 800d182:	481e      	ldr	r0, [pc, #120]	; (800d1fc <__pow5mult+0xb0>)
 800d184:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d188:	f000 fb64 	bl	800d854 <__assert_func>
 800d18c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d190:	6004      	str	r4, [r0, #0]
 800d192:	60c4      	str	r4, [r0, #12]
 800d194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d19c:	b94c      	cbnz	r4, 800d1b2 <__pow5mult+0x66>
 800d19e:	f240 2171 	movw	r1, #625	; 0x271
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7ff ff16 	bl	800cfd4 <__i2b>
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	6003      	str	r3, [r0, #0]
 800d1b2:	f04f 0900 	mov.w	r9, #0
 800d1b6:	07eb      	lsls	r3, r5, #31
 800d1b8:	d50a      	bpl.n	800d1d0 <__pow5mult+0x84>
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	4622      	mov	r2, r4
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f7ff ff1e 	bl	800d000 <__multiply>
 800d1c4:	4639      	mov	r1, r7
 800d1c6:	4680      	mov	r8, r0
 800d1c8:	4630      	mov	r0, r6
 800d1ca:	f7ff fe47 	bl	800ce5c <_Bfree>
 800d1ce:	4647      	mov	r7, r8
 800d1d0:	106d      	asrs	r5, r5, #1
 800d1d2:	d00b      	beq.n	800d1ec <__pow5mult+0xa0>
 800d1d4:	6820      	ldr	r0, [r4, #0]
 800d1d6:	b938      	cbnz	r0, 800d1e8 <__pow5mult+0x9c>
 800d1d8:	4622      	mov	r2, r4
 800d1da:	4621      	mov	r1, r4
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f7ff ff0f 	bl	800d000 <__multiply>
 800d1e2:	6020      	str	r0, [r4, #0]
 800d1e4:	f8c0 9000 	str.w	r9, [r0]
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	e7e4      	b.n	800d1b6 <__pow5mult+0x6a>
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1f2:	bf00      	nop
 800d1f4:	0800f598 	.word	0x0800f598
 800d1f8:	0800f35d 	.word	0x0800f35d
 800d1fc:	0800f444 	.word	0x0800f444

0800d200 <__lshift>:
 800d200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d204:	460c      	mov	r4, r1
 800d206:	6849      	ldr	r1, [r1, #4]
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d20e:	68a3      	ldr	r3, [r4, #8]
 800d210:	4607      	mov	r7, r0
 800d212:	4691      	mov	r9, r2
 800d214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d218:	f108 0601 	add.w	r6, r8, #1
 800d21c:	42b3      	cmp	r3, r6
 800d21e:	db0b      	blt.n	800d238 <__lshift+0x38>
 800d220:	4638      	mov	r0, r7
 800d222:	f7ff fddb 	bl	800cddc <_Balloc>
 800d226:	4605      	mov	r5, r0
 800d228:	b948      	cbnz	r0, 800d23e <__lshift+0x3e>
 800d22a:	4602      	mov	r2, r0
 800d22c:	4b28      	ldr	r3, [pc, #160]	; (800d2d0 <__lshift+0xd0>)
 800d22e:	4829      	ldr	r0, [pc, #164]	; (800d2d4 <__lshift+0xd4>)
 800d230:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d234:	f000 fb0e 	bl	800d854 <__assert_func>
 800d238:	3101      	adds	r1, #1
 800d23a:	005b      	lsls	r3, r3, #1
 800d23c:	e7ee      	b.n	800d21c <__lshift+0x1c>
 800d23e:	2300      	movs	r3, #0
 800d240:	f100 0114 	add.w	r1, r0, #20
 800d244:	f100 0210 	add.w	r2, r0, #16
 800d248:	4618      	mov	r0, r3
 800d24a:	4553      	cmp	r3, sl
 800d24c:	db33      	blt.n	800d2b6 <__lshift+0xb6>
 800d24e:	6920      	ldr	r0, [r4, #16]
 800d250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d254:	f104 0314 	add.w	r3, r4, #20
 800d258:	f019 091f 	ands.w	r9, r9, #31
 800d25c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d260:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d264:	d02b      	beq.n	800d2be <__lshift+0xbe>
 800d266:	f1c9 0e20 	rsb	lr, r9, #32
 800d26a:	468a      	mov	sl, r1
 800d26c:	2200      	movs	r2, #0
 800d26e:	6818      	ldr	r0, [r3, #0]
 800d270:	fa00 f009 	lsl.w	r0, r0, r9
 800d274:	4302      	orrs	r2, r0
 800d276:	f84a 2b04 	str.w	r2, [sl], #4
 800d27a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d27e:	459c      	cmp	ip, r3
 800d280:	fa22 f20e 	lsr.w	r2, r2, lr
 800d284:	d8f3      	bhi.n	800d26e <__lshift+0x6e>
 800d286:	ebac 0304 	sub.w	r3, ip, r4
 800d28a:	3b15      	subs	r3, #21
 800d28c:	f023 0303 	bic.w	r3, r3, #3
 800d290:	3304      	adds	r3, #4
 800d292:	f104 0015 	add.w	r0, r4, #21
 800d296:	4584      	cmp	ip, r0
 800d298:	bf38      	it	cc
 800d29a:	2304      	movcc	r3, #4
 800d29c:	50ca      	str	r2, [r1, r3]
 800d29e:	b10a      	cbz	r2, 800d2a4 <__lshift+0xa4>
 800d2a0:	f108 0602 	add.w	r6, r8, #2
 800d2a4:	3e01      	subs	r6, #1
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	612e      	str	r6, [r5, #16]
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	f7ff fdd6 	bl	800ce5c <_Bfree>
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	e7c5      	b.n	800d24a <__lshift+0x4a>
 800d2be:	3904      	subs	r1, #4
 800d2c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2c8:	459c      	cmp	ip, r3
 800d2ca:	d8f9      	bhi.n	800d2c0 <__lshift+0xc0>
 800d2cc:	e7ea      	b.n	800d2a4 <__lshift+0xa4>
 800d2ce:	bf00      	nop
 800d2d0:	0800f3d3 	.word	0x0800f3d3
 800d2d4:	0800f444 	.word	0x0800f444

0800d2d8 <__mcmp>:
 800d2d8:	b530      	push	{r4, r5, lr}
 800d2da:	6902      	ldr	r2, [r0, #16]
 800d2dc:	690c      	ldr	r4, [r1, #16]
 800d2de:	1b12      	subs	r2, r2, r4
 800d2e0:	d10e      	bne.n	800d300 <__mcmp+0x28>
 800d2e2:	f100 0314 	add.w	r3, r0, #20
 800d2e6:	3114      	adds	r1, #20
 800d2e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d2ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d2f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d2f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d2f8:	42a5      	cmp	r5, r4
 800d2fa:	d003      	beq.n	800d304 <__mcmp+0x2c>
 800d2fc:	d305      	bcc.n	800d30a <__mcmp+0x32>
 800d2fe:	2201      	movs	r2, #1
 800d300:	4610      	mov	r0, r2
 800d302:	bd30      	pop	{r4, r5, pc}
 800d304:	4283      	cmp	r3, r0
 800d306:	d3f3      	bcc.n	800d2f0 <__mcmp+0x18>
 800d308:	e7fa      	b.n	800d300 <__mcmp+0x28>
 800d30a:	f04f 32ff 	mov.w	r2, #4294967295
 800d30e:	e7f7      	b.n	800d300 <__mcmp+0x28>

0800d310 <__mdiff>:
 800d310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d314:	460c      	mov	r4, r1
 800d316:	4606      	mov	r6, r0
 800d318:	4611      	mov	r1, r2
 800d31a:	4620      	mov	r0, r4
 800d31c:	4617      	mov	r7, r2
 800d31e:	f7ff ffdb 	bl	800d2d8 <__mcmp>
 800d322:	1e05      	subs	r5, r0, #0
 800d324:	d110      	bne.n	800d348 <__mdiff+0x38>
 800d326:	4629      	mov	r1, r5
 800d328:	4630      	mov	r0, r6
 800d32a:	f7ff fd57 	bl	800cddc <_Balloc>
 800d32e:	b930      	cbnz	r0, 800d33e <__mdiff+0x2e>
 800d330:	4b39      	ldr	r3, [pc, #228]	; (800d418 <__mdiff+0x108>)
 800d332:	4602      	mov	r2, r0
 800d334:	f240 2132 	movw	r1, #562	; 0x232
 800d338:	4838      	ldr	r0, [pc, #224]	; (800d41c <__mdiff+0x10c>)
 800d33a:	f000 fa8b 	bl	800d854 <__assert_func>
 800d33e:	2301      	movs	r3, #1
 800d340:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d348:	bfa4      	itt	ge
 800d34a:	463b      	movge	r3, r7
 800d34c:	4627      	movge	r7, r4
 800d34e:	4630      	mov	r0, r6
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	bfa6      	itte	ge
 800d354:	461c      	movge	r4, r3
 800d356:	2500      	movge	r5, #0
 800d358:	2501      	movlt	r5, #1
 800d35a:	f7ff fd3f 	bl	800cddc <_Balloc>
 800d35e:	b920      	cbnz	r0, 800d36a <__mdiff+0x5a>
 800d360:	4b2d      	ldr	r3, [pc, #180]	; (800d418 <__mdiff+0x108>)
 800d362:	4602      	mov	r2, r0
 800d364:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d368:	e7e6      	b.n	800d338 <__mdiff+0x28>
 800d36a:	693e      	ldr	r6, [r7, #16]
 800d36c:	60c5      	str	r5, [r0, #12]
 800d36e:	6925      	ldr	r5, [r4, #16]
 800d370:	f107 0114 	add.w	r1, r7, #20
 800d374:	f104 0914 	add.w	r9, r4, #20
 800d378:	f100 0e14 	add.w	lr, r0, #20
 800d37c:	f107 0210 	add.w	r2, r7, #16
 800d380:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800d384:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800d388:	46f2      	mov	sl, lr
 800d38a:	2700      	movs	r7, #0
 800d38c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d394:	fa1f f883 	uxth.w	r8, r3
 800d398:	fa17 f78b 	uxtah	r7, r7, fp
 800d39c:	0c1b      	lsrs	r3, r3, #16
 800d39e:	eba7 0808 	sub.w	r8, r7, r8
 800d3a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3aa:	fa1f f888 	uxth.w	r8, r8
 800d3ae:	141f      	asrs	r7, r3, #16
 800d3b0:	454d      	cmp	r5, r9
 800d3b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3b6:	f84a 3b04 	str.w	r3, [sl], #4
 800d3ba:	d8e7      	bhi.n	800d38c <__mdiff+0x7c>
 800d3bc:	1b2b      	subs	r3, r5, r4
 800d3be:	3b15      	subs	r3, #21
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	3415      	adds	r4, #21
 800d3c8:	42a5      	cmp	r5, r4
 800d3ca:	bf38      	it	cc
 800d3cc:	2304      	movcc	r3, #4
 800d3ce:	4419      	add	r1, r3
 800d3d0:	4473      	add	r3, lr
 800d3d2:	469e      	mov	lr, r3
 800d3d4:	460d      	mov	r5, r1
 800d3d6:	4565      	cmp	r5, ip
 800d3d8:	d30e      	bcc.n	800d3f8 <__mdiff+0xe8>
 800d3da:	f10c 0203 	add.w	r2, ip, #3
 800d3de:	1a52      	subs	r2, r2, r1
 800d3e0:	f022 0203 	bic.w	r2, r2, #3
 800d3e4:	3903      	subs	r1, #3
 800d3e6:	458c      	cmp	ip, r1
 800d3e8:	bf38      	it	cc
 800d3ea:	2200      	movcc	r2, #0
 800d3ec:	441a      	add	r2, r3
 800d3ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d3f2:	b17b      	cbz	r3, 800d414 <__mdiff+0x104>
 800d3f4:	6106      	str	r6, [r0, #16]
 800d3f6:	e7a5      	b.n	800d344 <__mdiff+0x34>
 800d3f8:	f855 8b04 	ldr.w	r8, [r5], #4
 800d3fc:	fa17 f488 	uxtah	r4, r7, r8
 800d400:	1422      	asrs	r2, r4, #16
 800d402:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800d406:	b2a4      	uxth	r4, r4
 800d408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d40c:	f84e 4b04 	str.w	r4, [lr], #4
 800d410:	1417      	asrs	r7, r2, #16
 800d412:	e7e0      	b.n	800d3d6 <__mdiff+0xc6>
 800d414:	3e01      	subs	r6, #1
 800d416:	e7ea      	b.n	800d3ee <__mdiff+0xde>
 800d418:	0800f3d3 	.word	0x0800f3d3
 800d41c:	0800f444 	.word	0x0800f444

0800d420 <__d2b>:
 800d420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d424:	4689      	mov	r9, r1
 800d426:	2101      	movs	r1, #1
 800d428:	ec57 6b10 	vmov	r6, r7, d0
 800d42c:	4690      	mov	r8, r2
 800d42e:	f7ff fcd5 	bl	800cddc <_Balloc>
 800d432:	4604      	mov	r4, r0
 800d434:	b930      	cbnz	r0, 800d444 <__d2b+0x24>
 800d436:	4602      	mov	r2, r0
 800d438:	4b25      	ldr	r3, [pc, #148]	; (800d4d0 <__d2b+0xb0>)
 800d43a:	4826      	ldr	r0, [pc, #152]	; (800d4d4 <__d2b+0xb4>)
 800d43c:	f240 310a 	movw	r1, #778	; 0x30a
 800d440:	f000 fa08 	bl	800d854 <__assert_func>
 800d444:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d448:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d44c:	bb35      	cbnz	r5, 800d49c <__d2b+0x7c>
 800d44e:	2e00      	cmp	r6, #0
 800d450:	9301      	str	r3, [sp, #4]
 800d452:	d028      	beq.n	800d4a6 <__d2b+0x86>
 800d454:	4668      	mov	r0, sp
 800d456:	9600      	str	r6, [sp, #0]
 800d458:	f7ff fd8c 	bl	800cf74 <__lo0bits>
 800d45c:	9900      	ldr	r1, [sp, #0]
 800d45e:	b300      	cbz	r0, 800d4a2 <__d2b+0x82>
 800d460:	9a01      	ldr	r2, [sp, #4]
 800d462:	f1c0 0320 	rsb	r3, r0, #32
 800d466:	fa02 f303 	lsl.w	r3, r2, r3
 800d46a:	430b      	orrs	r3, r1
 800d46c:	40c2      	lsrs	r2, r0
 800d46e:	6163      	str	r3, [r4, #20]
 800d470:	9201      	str	r2, [sp, #4]
 800d472:	9b01      	ldr	r3, [sp, #4]
 800d474:	61a3      	str	r3, [r4, #24]
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2202      	movne	r2, #2
 800d47c:	2201      	moveq	r2, #1
 800d47e:	6122      	str	r2, [r4, #16]
 800d480:	b1d5      	cbz	r5, 800d4b8 <__d2b+0x98>
 800d482:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d486:	4405      	add	r5, r0
 800d488:	f8c9 5000 	str.w	r5, [r9]
 800d48c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d490:	f8c8 0000 	str.w	r0, [r8]
 800d494:	4620      	mov	r0, r4
 800d496:	b003      	add	sp, #12
 800d498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d49c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4a0:	e7d5      	b.n	800d44e <__d2b+0x2e>
 800d4a2:	6161      	str	r1, [r4, #20]
 800d4a4:	e7e5      	b.n	800d472 <__d2b+0x52>
 800d4a6:	a801      	add	r0, sp, #4
 800d4a8:	f7ff fd64 	bl	800cf74 <__lo0bits>
 800d4ac:	9b01      	ldr	r3, [sp, #4]
 800d4ae:	6163      	str	r3, [r4, #20]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	6122      	str	r2, [r4, #16]
 800d4b4:	3020      	adds	r0, #32
 800d4b6:	e7e3      	b.n	800d480 <__d2b+0x60>
 800d4b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4c0:	f8c9 0000 	str.w	r0, [r9]
 800d4c4:	6918      	ldr	r0, [r3, #16]
 800d4c6:	f7ff fd35 	bl	800cf34 <__hi0bits>
 800d4ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4ce:	e7df      	b.n	800d490 <__d2b+0x70>
 800d4d0:	0800f3d3 	.word	0x0800f3d3
 800d4d4:	0800f444 	.word	0x0800f444

0800d4d8 <_calloc_r>:
 800d4d8:	b513      	push	{r0, r1, r4, lr}
 800d4da:	434a      	muls	r2, r1
 800d4dc:	4611      	mov	r1, r2
 800d4de:	9201      	str	r2, [sp, #4]
 800d4e0:	f7fd fd5e 	bl	800afa0 <_malloc_r>
 800d4e4:	4604      	mov	r4, r0
 800d4e6:	b118      	cbz	r0, 800d4f0 <_calloc_r+0x18>
 800d4e8:	9a01      	ldr	r2, [sp, #4]
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	f7fd fd00 	bl	800aef0 <memset>
 800d4f0:	4620      	mov	r0, r4
 800d4f2:	b002      	add	sp, #8
 800d4f4:	bd10      	pop	{r4, pc}

0800d4f6 <__sfputc_r>:
 800d4f6:	6893      	ldr	r3, [r2, #8]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	b410      	push	{r4}
 800d4fe:	6093      	str	r3, [r2, #8]
 800d500:	da08      	bge.n	800d514 <__sfputc_r+0x1e>
 800d502:	6994      	ldr	r4, [r2, #24]
 800d504:	42a3      	cmp	r3, r4
 800d506:	db01      	blt.n	800d50c <__sfputc_r+0x16>
 800d508:	290a      	cmp	r1, #10
 800d50a:	d103      	bne.n	800d514 <__sfputc_r+0x1e>
 800d50c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d510:	f7fe baec 	b.w	800baec <__swbuf_r>
 800d514:	6813      	ldr	r3, [r2, #0]
 800d516:	1c58      	adds	r0, r3, #1
 800d518:	6010      	str	r0, [r2, #0]
 800d51a:	7019      	strb	r1, [r3, #0]
 800d51c:	4608      	mov	r0, r1
 800d51e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <__sfputs_r>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	4606      	mov	r6, r0
 800d528:	460f      	mov	r7, r1
 800d52a:	4614      	mov	r4, r2
 800d52c:	18d5      	adds	r5, r2, r3
 800d52e:	42ac      	cmp	r4, r5
 800d530:	d101      	bne.n	800d536 <__sfputs_r+0x12>
 800d532:	2000      	movs	r0, #0
 800d534:	e007      	b.n	800d546 <__sfputs_r+0x22>
 800d536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d53a:	463a      	mov	r2, r7
 800d53c:	4630      	mov	r0, r6
 800d53e:	f7ff ffda 	bl	800d4f6 <__sfputc_r>
 800d542:	1c43      	adds	r3, r0, #1
 800d544:	d1f3      	bne.n	800d52e <__sfputs_r+0xa>
 800d546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d548 <_vfiprintf_r>:
 800d548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54c:	460d      	mov	r5, r1
 800d54e:	b09d      	sub	sp, #116	; 0x74
 800d550:	4614      	mov	r4, r2
 800d552:	4698      	mov	r8, r3
 800d554:	4606      	mov	r6, r0
 800d556:	b118      	cbz	r0, 800d560 <_vfiprintf_r+0x18>
 800d558:	6983      	ldr	r3, [r0, #24]
 800d55a:	b90b      	cbnz	r3, 800d560 <_vfiprintf_r+0x18>
 800d55c:	f7ff fb1a 	bl	800cb94 <__sinit>
 800d560:	4b89      	ldr	r3, [pc, #548]	; (800d788 <_vfiprintf_r+0x240>)
 800d562:	429d      	cmp	r5, r3
 800d564:	d11b      	bne.n	800d59e <_vfiprintf_r+0x56>
 800d566:	6875      	ldr	r5, [r6, #4]
 800d568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d56a:	07d9      	lsls	r1, r3, #31
 800d56c:	d405      	bmi.n	800d57a <_vfiprintf_r+0x32>
 800d56e:	89ab      	ldrh	r3, [r5, #12]
 800d570:	059a      	lsls	r2, r3, #22
 800d572:	d402      	bmi.n	800d57a <_vfiprintf_r+0x32>
 800d574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d576:	f7ff fbb0 	bl	800ccda <__retarget_lock_acquire_recursive>
 800d57a:	89ab      	ldrh	r3, [r5, #12]
 800d57c:	071b      	lsls	r3, r3, #28
 800d57e:	d501      	bpl.n	800d584 <_vfiprintf_r+0x3c>
 800d580:	692b      	ldr	r3, [r5, #16]
 800d582:	b9eb      	cbnz	r3, 800d5c0 <_vfiprintf_r+0x78>
 800d584:	4629      	mov	r1, r5
 800d586:	4630      	mov	r0, r6
 800d588:	f7fe fb02 	bl	800bb90 <__swsetup_r>
 800d58c:	b1c0      	cbz	r0, 800d5c0 <_vfiprintf_r+0x78>
 800d58e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d590:	07dc      	lsls	r4, r3, #31
 800d592:	d50e      	bpl.n	800d5b2 <_vfiprintf_r+0x6a>
 800d594:	f04f 30ff 	mov.w	r0, #4294967295
 800d598:	b01d      	add	sp, #116	; 0x74
 800d59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d59e:	4b7b      	ldr	r3, [pc, #492]	; (800d78c <_vfiprintf_r+0x244>)
 800d5a0:	429d      	cmp	r5, r3
 800d5a2:	d101      	bne.n	800d5a8 <_vfiprintf_r+0x60>
 800d5a4:	68b5      	ldr	r5, [r6, #8]
 800d5a6:	e7df      	b.n	800d568 <_vfiprintf_r+0x20>
 800d5a8:	4b79      	ldr	r3, [pc, #484]	; (800d790 <_vfiprintf_r+0x248>)
 800d5aa:	429d      	cmp	r5, r3
 800d5ac:	bf08      	it	eq
 800d5ae:	68f5      	ldreq	r5, [r6, #12]
 800d5b0:	e7da      	b.n	800d568 <_vfiprintf_r+0x20>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	0598      	lsls	r0, r3, #22
 800d5b6:	d4ed      	bmi.n	800d594 <_vfiprintf_r+0x4c>
 800d5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ba:	f7ff fb8f 	bl	800ccdc <__retarget_lock_release_recursive>
 800d5be:	e7e9      	b.n	800d594 <_vfiprintf_r+0x4c>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c4:	2320      	movs	r3, #32
 800d5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5ce:	2330      	movs	r3, #48	; 0x30
 800d5d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d794 <_vfiprintf_r+0x24c>
 800d5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5d8:	f04f 0901 	mov.w	r9, #1
 800d5dc:	4623      	mov	r3, r4
 800d5de:	469a      	mov	sl, r3
 800d5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5e4:	b10a      	cbz	r2, 800d5ea <_vfiprintf_r+0xa2>
 800d5e6:	2a25      	cmp	r2, #37	; 0x25
 800d5e8:	d1f9      	bne.n	800d5de <_vfiprintf_r+0x96>
 800d5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d5ee:	d00b      	beq.n	800d608 <_vfiprintf_r+0xc0>
 800d5f0:	465b      	mov	r3, fp
 800d5f2:	4622      	mov	r2, r4
 800d5f4:	4629      	mov	r1, r5
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7ff ff94 	bl	800d524 <__sfputs_r>
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f000 80aa 	beq.w	800d756 <_vfiprintf_r+0x20e>
 800d602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d604:	445a      	add	r2, fp
 800d606:	9209      	str	r2, [sp, #36]	; 0x24
 800d608:	f89a 3000 	ldrb.w	r3, [sl]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 80a2 	beq.w	800d756 <_vfiprintf_r+0x20e>
 800d612:	2300      	movs	r3, #0
 800d614:	f04f 32ff 	mov.w	r2, #4294967295
 800d618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d61c:	f10a 0a01 	add.w	sl, sl, #1
 800d620:	9304      	str	r3, [sp, #16]
 800d622:	9307      	str	r3, [sp, #28]
 800d624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d628:	931a      	str	r3, [sp, #104]	; 0x68
 800d62a:	4654      	mov	r4, sl
 800d62c:	2205      	movs	r2, #5
 800d62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d632:	4858      	ldr	r0, [pc, #352]	; (800d794 <_vfiprintf_r+0x24c>)
 800d634:	f7f2 fdfc 	bl	8000230 <memchr>
 800d638:	9a04      	ldr	r2, [sp, #16]
 800d63a:	b9d8      	cbnz	r0, 800d674 <_vfiprintf_r+0x12c>
 800d63c:	06d1      	lsls	r1, r2, #27
 800d63e:	bf44      	itt	mi
 800d640:	2320      	movmi	r3, #32
 800d642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d646:	0713      	lsls	r3, r2, #28
 800d648:	bf44      	itt	mi
 800d64a:	232b      	movmi	r3, #43	; 0x2b
 800d64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d650:	f89a 3000 	ldrb.w	r3, [sl]
 800d654:	2b2a      	cmp	r3, #42	; 0x2a
 800d656:	d015      	beq.n	800d684 <_vfiprintf_r+0x13c>
 800d658:	9a07      	ldr	r2, [sp, #28]
 800d65a:	4654      	mov	r4, sl
 800d65c:	2000      	movs	r0, #0
 800d65e:	f04f 0c0a 	mov.w	ip, #10
 800d662:	4621      	mov	r1, r4
 800d664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d668:	3b30      	subs	r3, #48	; 0x30
 800d66a:	2b09      	cmp	r3, #9
 800d66c:	d94e      	bls.n	800d70c <_vfiprintf_r+0x1c4>
 800d66e:	b1b0      	cbz	r0, 800d69e <_vfiprintf_r+0x156>
 800d670:	9207      	str	r2, [sp, #28]
 800d672:	e014      	b.n	800d69e <_vfiprintf_r+0x156>
 800d674:	eba0 0308 	sub.w	r3, r0, r8
 800d678:	fa09 f303 	lsl.w	r3, r9, r3
 800d67c:	4313      	orrs	r3, r2
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	46a2      	mov	sl, r4
 800d682:	e7d2      	b.n	800d62a <_vfiprintf_r+0xe2>
 800d684:	9b03      	ldr	r3, [sp, #12]
 800d686:	1d19      	adds	r1, r3, #4
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	9103      	str	r1, [sp, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	bfbb      	ittet	lt
 800d690:	425b      	neglt	r3, r3
 800d692:	f042 0202 	orrlt.w	r2, r2, #2
 800d696:	9307      	strge	r3, [sp, #28]
 800d698:	9307      	strlt	r3, [sp, #28]
 800d69a:	bfb8      	it	lt
 800d69c:	9204      	strlt	r2, [sp, #16]
 800d69e:	7823      	ldrb	r3, [r4, #0]
 800d6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6a2:	d10c      	bne.n	800d6be <_vfiprintf_r+0x176>
 800d6a4:	7863      	ldrb	r3, [r4, #1]
 800d6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6a8:	d135      	bne.n	800d716 <_vfiprintf_r+0x1ce>
 800d6aa:	9b03      	ldr	r3, [sp, #12]
 800d6ac:	1d1a      	adds	r2, r3, #4
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	9203      	str	r2, [sp, #12]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	bfb8      	it	lt
 800d6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ba:	3402      	adds	r4, #2
 800d6bc:	9305      	str	r3, [sp, #20]
 800d6be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7a4 <_vfiprintf_r+0x25c>
 800d6c2:	7821      	ldrb	r1, [r4, #0]
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	4650      	mov	r0, sl
 800d6c8:	f7f2 fdb2 	bl	8000230 <memchr>
 800d6cc:	b140      	cbz	r0, 800d6e0 <_vfiprintf_r+0x198>
 800d6ce:	2340      	movs	r3, #64	; 0x40
 800d6d0:	eba0 000a 	sub.w	r0, r0, sl
 800d6d4:	fa03 f000 	lsl.w	r0, r3, r0
 800d6d8:	9b04      	ldr	r3, [sp, #16]
 800d6da:	4303      	orrs	r3, r0
 800d6dc:	3401      	adds	r4, #1
 800d6de:	9304      	str	r3, [sp, #16]
 800d6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e4:	482c      	ldr	r0, [pc, #176]	; (800d798 <_vfiprintf_r+0x250>)
 800d6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6ea:	2206      	movs	r2, #6
 800d6ec:	f7f2 fda0 	bl	8000230 <memchr>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d03f      	beq.n	800d774 <_vfiprintf_r+0x22c>
 800d6f4:	4b29      	ldr	r3, [pc, #164]	; (800d79c <_vfiprintf_r+0x254>)
 800d6f6:	bb1b      	cbnz	r3, 800d740 <_vfiprintf_r+0x1f8>
 800d6f8:	9b03      	ldr	r3, [sp, #12]
 800d6fa:	3307      	adds	r3, #7
 800d6fc:	f023 0307 	bic.w	r3, r3, #7
 800d700:	3308      	adds	r3, #8
 800d702:	9303      	str	r3, [sp, #12]
 800d704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d706:	443b      	add	r3, r7
 800d708:	9309      	str	r3, [sp, #36]	; 0x24
 800d70a:	e767      	b.n	800d5dc <_vfiprintf_r+0x94>
 800d70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d710:	460c      	mov	r4, r1
 800d712:	2001      	movs	r0, #1
 800d714:	e7a5      	b.n	800d662 <_vfiprintf_r+0x11a>
 800d716:	2300      	movs	r3, #0
 800d718:	3401      	adds	r4, #1
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	4619      	mov	r1, r3
 800d71e:	f04f 0c0a 	mov.w	ip, #10
 800d722:	4620      	mov	r0, r4
 800d724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d728:	3a30      	subs	r2, #48	; 0x30
 800d72a:	2a09      	cmp	r2, #9
 800d72c:	d903      	bls.n	800d736 <_vfiprintf_r+0x1ee>
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d0c5      	beq.n	800d6be <_vfiprintf_r+0x176>
 800d732:	9105      	str	r1, [sp, #20]
 800d734:	e7c3      	b.n	800d6be <_vfiprintf_r+0x176>
 800d736:	fb0c 2101 	mla	r1, ip, r1, r2
 800d73a:	4604      	mov	r4, r0
 800d73c:	2301      	movs	r3, #1
 800d73e:	e7f0      	b.n	800d722 <_vfiprintf_r+0x1da>
 800d740:	ab03      	add	r3, sp, #12
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	462a      	mov	r2, r5
 800d746:	4b16      	ldr	r3, [pc, #88]	; (800d7a0 <_vfiprintf_r+0x258>)
 800d748:	a904      	add	r1, sp, #16
 800d74a:	4630      	mov	r0, r6
 800d74c:	f7fd fd22 	bl	800b194 <_printf_float>
 800d750:	4607      	mov	r7, r0
 800d752:	1c78      	adds	r0, r7, #1
 800d754:	d1d6      	bne.n	800d704 <_vfiprintf_r+0x1bc>
 800d756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d758:	07d9      	lsls	r1, r3, #31
 800d75a:	d405      	bmi.n	800d768 <_vfiprintf_r+0x220>
 800d75c:	89ab      	ldrh	r3, [r5, #12]
 800d75e:	059a      	lsls	r2, r3, #22
 800d760:	d402      	bmi.n	800d768 <_vfiprintf_r+0x220>
 800d762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d764:	f7ff faba 	bl	800ccdc <__retarget_lock_release_recursive>
 800d768:	89ab      	ldrh	r3, [r5, #12]
 800d76a:	065b      	lsls	r3, r3, #25
 800d76c:	f53f af12 	bmi.w	800d594 <_vfiprintf_r+0x4c>
 800d770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d772:	e711      	b.n	800d598 <_vfiprintf_r+0x50>
 800d774:	ab03      	add	r3, sp, #12
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	462a      	mov	r2, r5
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <_vfiprintf_r+0x258>)
 800d77c:	a904      	add	r1, sp, #16
 800d77e:	4630      	mov	r0, r6
 800d780:	f7fd ffac 	bl	800b6dc <_printf_i>
 800d784:	e7e4      	b.n	800d750 <_vfiprintf_r+0x208>
 800d786:	bf00      	nop
 800d788:	0800f404 	.word	0x0800f404
 800d78c:	0800f424 	.word	0x0800f424
 800d790:	0800f3e4 	.word	0x0800f3e4
 800d794:	0800f5a4 	.word	0x0800f5a4
 800d798:	0800f5ae 	.word	0x0800f5ae
 800d79c:	0800b195 	.word	0x0800b195
 800d7a0:	0800d525 	.word	0x0800d525
 800d7a4:	0800f5aa 	.word	0x0800f5aa

0800d7a8 <__sread>:
 800d7a8:	b510      	push	{r4, lr}
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7b0:	f000 f8d6 	bl	800d960 <_read_r>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	bfab      	itete	ge
 800d7b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7ba:	89a3      	ldrhlt	r3, [r4, #12]
 800d7bc:	181b      	addge	r3, r3, r0
 800d7be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7c2:	bfac      	ite	ge
 800d7c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7c6:	81a3      	strhlt	r3, [r4, #12]
 800d7c8:	bd10      	pop	{r4, pc}

0800d7ca <__swrite>:
 800d7ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ce:	461f      	mov	r7, r3
 800d7d0:	898b      	ldrh	r3, [r1, #12]
 800d7d2:	05db      	lsls	r3, r3, #23
 800d7d4:	4605      	mov	r5, r0
 800d7d6:	460c      	mov	r4, r1
 800d7d8:	4616      	mov	r6, r2
 800d7da:	d505      	bpl.n	800d7e8 <__swrite+0x1e>
 800d7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f000 f898 	bl	800d918 <_lseek_r>
 800d7e8:	89a3      	ldrh	r3, [r4, #12]
 800d7ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d7f2:	81a3      	strh	r3, [r4, #12]
 800d7f4:	4632      	mov	r2, r6
 800d7f6:	463b      	mov	r3, r7
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fe:	f000 b817 	b.w	800d830 <_write_r>

0800d802 <__sseek>:
 800d802:	b510      	push	{r4, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80a:	f000 f885 	bl	800d918 <_lseek_r>
 800d80e:	1c43      	adds	r3, r0, #1
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	bf15      	itete	ne
 800d814:	6560      	strne	r0, [r4, #84]	; 0x54
 800d816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d81a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d81e:	81a3      	strheq	r3, [r4, #12]
 800d820:	bf18      	it	ne
 800d822:	81a3      	strhne	r3, [r4, #12]
 800d824:	bd10      	pop	{r4, pc}

0800d826 <__sclose>:
 800d826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82a:	f000 b831 	b.w	800d890 <_close_r>
	...

0800d830 <_write_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	; (800d850 <_write_r+0x20>)
 800d834:	4604      	mov	r4, r0
 800d836:	4608      	mov	r0, r1
 800d838:	4611      	mov	r1, r2
 800d83a:	2200      	movs	r2, #0
 800d83c:	602a      	str	r2, [r5, #0]
 800d83e:	461a      	mov	r2, r3
 800d840:	f7f7 fa67 	bl	8004d12 <_write>
 800d844:	1c43      	adds	r3, r0, #1
 800d846:	d102      	bne.n	800d84e <_write_r+0x1e>
 800d848:	682b      	ldr	r3, [r5, #0]
 800d84a:	b103      	cbz	r3, 800d84e <_write_r+0x1e>
 800d84c:	6023      	str	r3, [r4, #0]
 800d84e:	bd38      	pop	{r3, r4, r5, pc}
 800d850:	200008b0 	.word	0x200008b0

0800d854 <__assert_func>:
 800d854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d856:	4614      	mov	r4, r2
 800d858:	461a      	mov	r2, r3
 800d85a:	4b09      	ldr	r3, [pc, #36]	; (800d880 <__assert_func+0x2c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	4605      	mov	r5, r0
 800d860:	68d8      	ldr	r0, [r3, #12]
 800d862:	b14c      	cbz	r4, 800d878 <__assert_func+0x24>
 800d864:	4b07      	ldr	r3, [pc, #28]	; (800d884 <__assert_func+0x30>)
 800d866:	9100      	str	r1, [sp, #0]
 800d868:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d86c:	4906      	ldr	r1, [pc, #24]	; (800d888 <__assert_func+0x34>)
 800d86e:	462b      	mov	r3, r5
 800d870:	f000 f81e 	bl	800d8b0 <fiprintf>
 800d874:	f7fd fb02 	bl	800ae7c <abort>
 800d878:	4b04      	ldr	r3, [pc, #16]	; (800d88c <__assert_func+0x38>)
 800d87a:	461c      	mov	r4, r3
 800d87c:	e7f3      	b.n	800d866 <__assert_func+0x12>
 800d87e:	bf00      	nop
 800d880:	20000014 	.word	0x20000014
 800d884:	0800f5b5 	.word	0x0800f5b5
 800d888:	0800f5c2 	.word	0x0800f5c2
 800d88c:	0800f5f0 	.word	0x0800f5f0

0800d890 <_close_r>:
 800d890:	b538      	push	{r3, r4, r5, lr}
 800d892:	4d06      	ldr	r5, [pc, #24]	; (800d8ac <_close_r+0x1c>)
 800d894:	2300      	movs	r3, #0
 800d896:	4604      	mov	r4, r0
 800d898:	4608      	mov	r0, r1
 800d89a:	602b      	str	r3, [r5, #0]
 800d89c:	f7f7 fa55 	bl	8004d4a <_close>
 800d8a0:	1c43      	adds	r3, r0, #1
 800d8a2:	d102      	bne.n	800d8aa <_close_r+0x1a>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	b103      	cbz	r3, 800d8aa <_close_r+0x1a>
 800d8a8:	6023      	str	r3, [r4, #0]
 800d8aa:	bd38      	pop	{r3, r4, r5, pc}
 800d8ac:	200008b0 	.word	0x200008b0

0800d8b0 <fiprintf>:
 800d8b0:	b40e      	push	{r1, r2, r3}
 800d8b2:	b503      	push	{r0, r1, lr}
 800d8b4:	4601      	mov	r1, r0
 800d8b6:	ab03      	add	r3, sp, #12
 800d8b8:	4805      	ldr	r0, [pc, #20]	; (800d8d0 <fiprintf+0x20>)
 800d8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8be:	6800      	ldr	r0, [r0, #0]
 800d8c0:	9301      	str	r3, [sp, #4]
 800d8c2:	f7ff fe41 	bl	800d548 <_vfiprintf_r>
 800d8c6:	b002      	add	sp, #8
 800d8c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8cc:	b003      	add	sp, #12
 800d8ce:	4770      	bx	lr
 800d8d0:	20000014 	.word	0x20000014

0800d8d4 <_fstat_r>:
 800d8d4:	b538      	push	{r3, r4, r5, lr}
 800d8d6:	4d07      	ldr	r5, [pc, #28]	; (800d8f4 <_fstat_r+0x20>)
 800d8d8:	2300      	movs	r3, #0
 800d8da:	4604      	mov	r4, r0
 800d8dc:	4608      	mov	r0, r1
 800d8de:	4611      	mov	r1, r2
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	f7f7 fa3e 	bl	8004d62 <_fstat>
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	d102      	bne.n	800d8f0 <_fstat_r+0x1c>
 800d8ea:	682b      	ldr	r3, [r5, #0]
 800d8ec:	b103      	cbz	r3, 800d8f0 <_fstat_r+0x1c>
 800d8ee:	6023      	str	r3, [r4, #0]
 800d8f0:	bd38      	pop	{r3, r4, r5, pc}
 800d8f2:	bf00      	nop
 800d8f4:	200008b0 	.word	0x200008b0

0800d8f8 <_isatty_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d06      	ldr	r5, [pc, #24]	; (800d914 <_isatty_r+0x1c>)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	602b      	str	r3, [r5, #0]
 800d904:	f7f7 fa3d 	bl	8004d82 <_isatty>
 800d908:	1c43      	adds	r3, r0, #1
 800d90a:	d102      	bne.n	800d912 <_isatty_r+0x1a>
 800d90c:	682b      	ldr	r3, [r5, #0]
 800d90e:	b103      	cbz	r3, 800d912 <_isatty_r+0x1a>
 800d910:	6023      	str	r3, [r4, #0]
 800d912:	bd38      	pop	{r3, r4, r5, pc}
 800d914:	200008b0 	.word	0x200008b0

0800d918 <_lseek_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4d07      	ldr	r5, [pc, #28]	; (800d938 <_lseek_r+0x20>)
 800d91c:	4604      	mov	r4, r0
 800d91e:	4608      	mov	r0, r1
 800d920:	4611      	mov	r1, r2
 800d922:	2200      	movs	r2, #0
 800d924:	602a      	str	r2, [r5, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	f7f7 fa36 	bl	8004d98 <_lseek>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_lseek_r+0x1e>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_lseek_r+0x1e>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	200008b0 	.word	0x200008b0

0800d93c <__ascii_mbtowc>:
 800d93c:	b082      	sub	sp, #8
 800d93e:	b901      	cbnz	r1, 800d942 <__ascii_mbtowc+0x6>
 800d940:	a901      	add	r1, sp, #4
 800d942:	b142      	cbz	r2, 800d956 <__ascii_mbtowc+0x1a>
 800d944:	b14b      	cbz	r3, 800d95a <__ascii_mbtowc+0x1e>
 800d946:	7813      	ldrb	r3, [r2, #0]
 800d948:	600b      	str	r3, [r1, #0]
 800d94a:	7812      	ldrb	r2, [r2, #0]
 800d94c:	1e10      	subs	r0, r2, #0
 800d94e:	bf18      	it	ne
 800d950:	2001      	movne	r0, #1
 800d952:	b002      	add	sp, #8
 800d954:	4770      	bx	lr
 800d956:	4610      	mov	r0, r2
 800d958:	e7fb      	b.n	800d952 <__ascii_mbtowc+0x16>
 800d95a:	f06f 0001 	mvn.w	r0, #1
 800d95e:	e7f8      	b.n	800d952 <__ascii_mbtowc+0x16>

0800d960 <_read_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d07      	ldr	r5, [pc, #28]	; (800d980 <_read_r+0x20>)
 800d964:	4604      	mov	r4, r0
 800d966:	4608      	mov	r0, r1
 800d968:	4611      	mov	r1, r2
 800d96a:	2200      	movs	r2, #0
 800d96c:	602a      	str	r2, [r5, #0]
 800d96e:	461a      	mov	r2, r3
 800d970:	f7f7 f9b2 	bl	8004cd8 <_read>
 800d974:	1c43      	adds	r3, r0, #1
 800d976:	d102      	bne.n	800d97e <_read_r+0x1e>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b103      	cbz	r3, 800d97e <_read_r+0x1e>
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	bd38      	pop	{r3, r4, r5, pc}
 800d980:	200008b0 	.word	0x200008b0

0800d984 <__ascii_wctomb>:
 800d984:	b149      	cbz	r1, 800d99a <__ascii_wctomb+0x16>
 800d986:	2aff      	cmp	r2, #255	; 0xff
 800d988:	bf85      	ittet	hi
 800d98a:	238a      	movhi	r3, #138	; 0x8a
 800d98c:	6003      	strhi	r3, [r0, #0]
 800d98e:	700a      	strbls	r2, [r1, #0]
 800d990:	f04f 30ff 	movhi.w	r0, #4294967295
 800d994:	bf98      	it	ls
 800d996:	2001      	movls	r0, #1
 800d998:	4770      	bx	lr
 800d99a:	4608      	mov	r0, r1
 800d99c:	4770      	bx	lr
	...

0800d9a0 <_init>:
 800d9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a2:	bf00      	nop
 800d9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9a6:	bc08      	pop	{r3}
 800d9a8:	469e      	mov	lr, r3
 800d9aa:	4770      	bx	lr

0800d9ac <_fini>:
 800d9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ae:	bf00      	nop
 800d9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b2:	bc08      	pop	{r3}
 800d9b4:	469e      	mov	lr, r3
 800d9b6:	4770      	bx	lr
