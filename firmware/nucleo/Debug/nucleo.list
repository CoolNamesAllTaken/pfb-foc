
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001158  0800eb90  0800eb90  0001eb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fce8  0800fce8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fce8  0800fce8  0001fce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcf0  0800fcf0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcf0  0800fcf0  0001fcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcf4  0800fcf4  0001fcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800fcf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005210  200001e4  0800fedc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053f4  0800fedc  000253f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c8cc  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bfa  00000000  00000000  0004cae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e78  00000000  00000000  000526e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c00  00000000  00000000  00054558  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a395  00000000  00000000  00056158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c3af  00000000  00000000  000804ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f4426  00000000  00000000  0009c89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00190cc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f58  00000000  00000000  00190d40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eb78 	.word	0x0800eb78

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800eb78 	.word	0x0800eb78

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <_ZN7EncoderC1Ev+0x2c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	0800f970 	.word	0x0800f970

08000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffdd 	bl	8000f98 <_ZN7EncoderC1Ev>
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	829a      	strh	r2, [r3, #20]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	619a      	str	r2, [r3, #24]
{

}
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800f960 	.word	0x0800f960

0800100c <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8f5 	bl	8001204 <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 800102a:	687c      	ldr	r4, [r7, #4]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f89f 	bl	8001170 <_ZN7AS5048A10ReadAngle_Ev>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	4620      	mov	r0, r4
 800103c:	f000 f9e8 	bl	8001410 <_ZN7Encoder9set_angleEf>
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
	uint8_t par = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	2b0e      	cmp	r3, #14
 8001060:	d810      	bhi.n	8001084 <_ZN7AS5048A15CalcEvenParity_Et+0x3c>
		par ^= ((val >> shift) & 0x1);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	fa42 f303 	asr.w	r3, r2, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4053      	eors	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	3301      	adds	r3, #1
 8001080:	73bb      	strb	r3, [r7, #14]
 8001082:	e7eb      	b.n	800105c <_ZN7AS5048A15CalcEvenParity_Et+0x14>
	}
	return par;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
 800109e:	4613      	mov	r3, r2
 80010a0:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a8:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	039b      	lsls	r3, r3, #14
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffbf 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 80010ca:	4603      	mov	r3, r0
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	81fb      	strh	r3, [r7, #14]
	return pack;
 80010da:	89fb      	ldrh	r3, [r7, #14]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010f6:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffa3 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001102:	4603      	mov	r3, r0
 8001104:	03db      	lsls	r3, r3, #15
 8001106:	b21a      	sxth	r2, r3
 8001108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	81fb      	strh	r3, [r7, #14]
	return pack;
 8001112:	89fb      	ldrh	r3, [r7, #14]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 8001132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001136:	e016      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff83 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	13db      	asrs	r3, r3, #15
 800114a:	429a      	cmp	r2, r3
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	e003      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001164:	b29b      	uxth	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 8001178:	2201      	movs	r2, #1
 800117a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff87 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001184:	4603      	mov	r3, r0
 8001186:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f85d 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffa5 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800119a:	4603      	mov	r3, r0
 800119c:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f87c 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffb5 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
	return raw_angle_val * 360.0 / DATA_MAX;
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9db 	bl	8000574 <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <_ZN7AS5048A10ReadAngle_Ev+0x90>)
 80011c4:	f7ff fa40 	bl	8000648 <__aeabi_dmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	a309      	add	r3, pc, #36	; (adr r3, 80011f8 <_ZN7AS5048A10ReadAngle_Ev+0x88>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fb61 	bl	800089c <__aeabi_ddiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4618      	mov	r0, r3
 80011e0:	4621      	mov	r1, r4
 80011e2:	f7ff fd09 	bl	8000bf8 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40cfff80 	.word	0x40cfff80
 8001200:	40768000 	.word	0x40768000

08001204 <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff3e 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f814 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff5c 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800122c:	4603      	mov	r3, r0
 800122e:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f833 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 8001242:	897b      	ldrh	r3, [r7, #10]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	121b      	asrs	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6918      	ldr	r0, [r3, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8a9b      	ldrh	r3, [r3, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	f003 fecf 	bl	8005014 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68d8      	ldr	r0, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2202      	movs	r2, #2
 8001284:	f005 f94a 	bl	800651c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6918      	ldr	r0, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8a9b      	ldrh	r3, [r3, #20]
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	f003 febe 	bl	8005014 <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	121b      	asrs	r3, r3, #8
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6918      	ldr	r0, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8a9b      	ldrh	r3, [r3, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	f003 fea5 	bl	8005014 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68d8      	ldr	r0, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	f005 fa83 	bl	80067e8 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6918      	ldr	r0, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a9b      	ldrh	r3, [r3, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f003 fe91 	bl	8005014 <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 80012f6:	7a3b      	ldrb	r3, [r7, #8]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001300:	4313      	orrs	r3, r2
 8001302:	b21b      	sxth	r3, r3
 8001304:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 8001306:	7a7b      	ldrb	r3, [r7, #9]
 8001308:	b29a      	uxth	r2, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4313      	orrs	r3, r2
 800130e:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001310:	89fb      	ldrh	r3, [r7, #14]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0 * floor(raw_angle / 360.0);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff f935 	bl	8000598 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff f930 	bl	8000598 <__aeabi_f2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b17 	vmov	d7, r2, r3
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	f00a ff81 	bl	800c258 <floor>
 8001356:	ec51 0b10 	vmov	r0, r1, d0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001360:	f7ff f972 	bl	8000648 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ffb4 	bl	80002d8 <__aeabi_dsub>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	f7ff fc3e 	bl	8000bf8 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]
	if (wrapped_angle < 0) {
 8001380:	edd7 7a03 	vldr	s15, [r7, #12]
 8001384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d507      	bpl.n	800139e <_ZN7Encoder10WrapAngle_Ef+0x82>
		wrapped_angle += 360.0;
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013b4 <_ZN7Encoder10WrapAngle_Ef+0x98>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ee07 3a90 	vmov	s15, r3
}
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40768000 	.word	0x40768000
 80013b4:	43b40000 	.word	0x43b40000

080013b8 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 80013c4:	ed97 0a00 	vldr	s0, [r7]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffa7 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff8d 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
}
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 800141c:	ed97 0a00 	vldr	s0, [r7]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff7b 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN10HalfBridge18set_target_currentEf>:

/**
 * @brief Sets the target current of the half-bridge.
 * @param[in] target_current Target current, in milliamps.
 */
void HalfBridge::set_target_current(float target_current) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	ed87 0a00 	vstr	s0, [r7]
	target_current_ = target_current;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	605a      	str	r2, [r3, #4]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_ZN10HalfBridge18get_target_currentEv>:

/**
 * @brief Returns the target current of the half-bridge.
 * @retval Target current, in milliamps.
 */
float HalfBridge::get_target_current() {
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return target_current_;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	ee07 3a90 	vmov	s15, r3
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <_ZN10HalfBridge11get_op_modeEv>:

/**
 * @brief Returns the operation mode of the half-bridge.
 * @retval Halfbridge operation mode.
 */
HalfBridge::OpMode HalfBridge::get_op_mode() {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	return op_mode_;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7b1b      	ldrb	r3, [r3, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_Z13GetTickMicrosv>:

/**
 * Utility function that returns the current time in microseconds.
 * @retval Current uptime, in microseconds.
 */
uint32_t GetTickMicros() {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	return HAL_GetTick() * 1000 - SysTick->VAL / ((SysTick->LOAD + 1) / 1000);
 8001490:	f002 fb94 	bl	8003bbc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fb03 f202 	mul.w	r2, r3, r2
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_Z13GetTickMicrosv+0x30>)
 80014a0:	6899      	ldr	r1, [r3, #8]
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <_Z13GetTickMicrosv+0x30>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	3301      	adds	r3, #1
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <_Z13GetTickMicrosv+0x34>)
 80014aa:	fba0 0303 	umull	r0, r3, r0, r3
 80014ae:	099b      	lsrs	r3, r3, #6
 80014b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b4:	1ad3      	subs	r3, r2, r3
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	e000e010 	.word	0xe000e010
 80014c0:	10624dd3 	.word	0x10624dd3

080014c4 <_ZN9STSPIN8304InitEv>:

/**
 * @brief Initializes the relevant channel of the STSPIN320 half-bridge.
 */
void STSPIN830::Init() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	pid_last_update_us = GetTickMicros(); // enable time intervals to be passed to PID controller
 80014cc:	f7ff ffde 	bl	800148c <_Z13GetTickMicrosv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	621a      	str	r2, [r3, #32]
	HAL_TIM_PWM_Start(timer_, timer_channel_id_); // get the party started
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	695b      	ldr	r3, [r3, #20]
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f005 fd71 	bl	8006fc8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_channel_id_); // get the (complementary) party started
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f006 fe13 	bl	800811c <HAL_TIMEx_PWMN_Start>
	is_initialized_ = true;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <_ZN9STSPIN8306UpdateEv>:

/**
 * Updates the PWM period of the half bridge based on the measured current. Should be called by the ConversionCplt callback
 * of the ADC, which should in turn have been called by a reset trigger event from the half bridge timer.
 */
void STSPIN830::Update() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	if (!is_initialized_) {
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 80e7 	bne.w	80016f0 <_ZN9STSPIN8306UpdateEv+0x1e8>
		// Don't run until the important stuff is set up!
		return;
	}
	// Calculate current
	float curr_sense_adc_voltage = static_cast<float>(curr_sense_adc_counts_) / kADCMaxCounts * kADCMaxVolts;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001532:	eddf 6a71 	vldr	s13, [pc, #452]	; 80016f8 <_ZN9STSPIN8306UpdateEv+0x1f0>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80016fc <_ZN9STSPIN8306UpdateEv+0x1f4>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	edc7 7a03 	vstr	s15, [r7, #12]
	current_ma_ = (curr_sense_adc_voltage - kADCOffsetVolts) / kADCGain * 1000;
 8001546:	edd7 7a03 	vldr	s15, [r7, #12]
 800154a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001700 <_ZN9STSPIN8306UpdateEv+0x1f8>
 800154e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001552:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001704 <_ZN9STSPIN8306UpdateEv+0x1fc>
 8001556:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800155a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001708 <_ZN9STSPIN8306UpdateEv+0x200>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	edc3 7a07 	vstr	s15, [r3, #28]
	// Update target current
	pid.target = target_current_;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	uint32_t curr_time_us = GetTickMicros();
 8001572:	f7ff ff8b 	bl	800148c <_Z13GetTickMicrosv>
 8001576:	60b8      	str	r0, [r7, #8]
	pid.Update((curr_time_us - pid_last_update_us) / 1000.0f);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	ee07 3a90 	vmov	s15, r3
 800158a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800158e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001708 <_ZN9STSPIN8306UpdateEv+0x200>
 8001592:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001596:	eeb0 0a66 	vmov.f32	s0, s13
 800159a:	4608      	mov	r0, r1
 800159c:	f000 f8fa 	bl	8001794 <_ZN13PIDController6UpdateEf>
	pid_last_update_us = curr_time_us;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	621a      	str	r2, [r3, #32]
	// Calculate duty cycle for closed loop control
	duty_cycle_ -= pid.get_output();
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	332c      	adds	r3, #44	; 0x2c
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f9ba 	bl	8001924 <_ZN13PIDController10get_outputEv>
 80015b0:	eeb0 7a40 	vmov.f32	s14, s0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (duty_cycle_ > kDutyCycleMax) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d6:	dd04      	ble.n	80015e2 <_ZN9STSPIN8306UpdateEv+0xda>
		duty_cycle_ = kDutyCycleMax;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
 80015e0:	e00c      	b.n	80015fc <_ZN9STSPIN8306UpdateEv+0xf4>
	} else if (duty_cycle_ < kDutyCycleMin) {
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015e8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800170c <_ZN9STSPIN8306UpdateEv+0x204>
 80015ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f4:	d502      	bpl.n	80015fc <_ZN9STSPIN8306UpdateEv+0xf4>
		duty_cycle_ = kDutyCycleMin;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a45      	ldr	r2, [pc, #276]	; (8001710 <_ZN9STSPIN8306UpdateEv+0x208>)
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_channel_id_, static_cast<uint16_t>(duty_cycle_ * kPulseMax));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d110      	bne.n	8001626 <_ZN9STSPIN8306UpdateEv+0x11e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800160a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 800160e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
 8001624:	e065      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b04      	cmp	r3, #4
 800162c:	d110      	bne.n	8001650 <_ZN9STSPIN8306UpdateEv+0x148>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001634:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 8001638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800163c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001640:	ee17 3a90 	vmov	r3, s15
 8001644:	b29a      	uxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
 800164e:	e050      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d110      	bne.n	800167a <_ZN9STSPIN8306UpdateEv+0x172>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800165e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	b29a      	uxth	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	63da      	str	r2, [r3, #60]	; 0x3c
 8001678:	e03b      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d110      	bne.n	80016a4 <_ZN9STSPIN8306UpdateEv+0x19c>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001688:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	ee17 3a90 	vmov	r3, s15
 8001698:	b29a      	uxth	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	641a      	str	r2, [r3, #64]	; 0x40
 80016a2:	e026      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b10      	cmp	r3, #16
 80016aa:	d110      	bne.n	80016ce <_ZN9STSPIN8306UpdateEv+0x1c6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016b2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	659a      	str	r2, [r3, #88]	; 0x58
 80016cc:	e011      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001714 <_ZN9STSPIN8306UpdateEv+0x20c>
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e0:	ee17 3a90 	vmov	r3, s15
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ee:	e000      	b.n	80016f2 <_ZN9STSPIN8306UpdateEv+0x1ea>
		return;
 80016f0:	bf00      	nop
}
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	457ff000 	.word	0x457ff000
 80016fc:	40533333 	.word	0x40533333
 8001700:	3fc7ae14 	.word	0x3fc7ae14
 8001704:	3f014121 	.word	0x3f014121
 8001708:	447a0000 	.word	0x447a0000
 800170c:	3dcccccd 	.word	0x3dcccccd
 8001710:	3dcccccd 	.word	0x3dcccccd
 8001714:	461c4000 	.word	0x461c4000

08001718 <_ZN13PIDControllerC1EfffRKf>:
 * @param[in] k_p_in Proportional gain.
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] state_in Reference to the plant state, which is read during every update.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, const float& state_in)
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6178      	str	r0, [r7, #20]
 8001720:	ed87 0a04 	vstr	s0, [r7, #16]
 8001724:	edc7 0a03 	vstr	s1, [r7, #12]
 8001728:	ed87 1a02 	vstr	s2, [r7, #8]
 800172c:	6079      	str	r1, [r7, #4]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, state(state_in){}
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3304      	adds	r3, #4
 8001738:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f00a fe4b 	bl	800c3da <memset>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2200      	movs	r2, #0
 8001748:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	68ba      	ldr	r2, [r7, #8]
 8001774:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <_ZN13PIDController6UpdateEf>:
 * @brief Updates the PID controller based on a new sample. Updates output and error accumulator
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 */
void PIDController::Update(float ms_since_last_update) {
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	ed87 0a00 	vstr	s0, [r7]
	if (ms_since_last_update < 0) {
 80017a0:	edd7 7a00 	vldr	s15, [r7]
 80017a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ac:	f100 808b 	bmi.w	80018c6 <_ZN13PIDController6UpdateEf+0x132>
		return; // only allow updates with positive time steps (avoid errors for i, d)
	}

	// Populate circular error memory buffer with integrated chunk of previous error
	float prev_error = error_;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80017b6:	60bb      	str	r3, [r7, #8]
	error_mem_[error_mem_index_] = prev_error  * ms_since_last_update;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 80017be:	ed97 7a02 	vldr	s14, [r7, #8]
 80017c2:	edd7 7a00 	vldr	s15, [r7]
 80017c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3304      	adds	r3, #4
 80017d2:	edc3 7a00 	vstr	s15, [r3]
	error_mem_index_++;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 80017dc:	3301      	adds	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	if (error_mem_index_ > error_mem_depth_) {
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d903      	bls.n	80017fc <_ZN13PIDController6UpdateEf+0x68>
		error_mem_index_ = 0; // wrap error memory index
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	}

	// Proportional Error
	error_ = state - target; // calculate current error
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 800180c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c

	// Integral Error
	float i_error = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
	if (k_i != 0) {
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8001822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	d017      	beq.n	800185c <_ZN13PIDController6UpdateEf+0xc8>
		// skip integration if it's not being used
		for (uint16_t i = 0; i < error_mem_depth_; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	827b      	strh	r3, [r7, #18]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	8a7a      	ldrh	r2, [r7, #18]
 8001836:	429a      	cmp	r2, r3
 8001838:	d210      	bcs.n	800185c <_ZN13PIDController6UpdateEf+0xc8>
			i_error += error_mem_[i];
 800183a:	8a7b      	ldrh	r3, [r7, #18]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	3304      	adds	r3, #4
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ed97 7a05 	vldr	s14, [r7, #20]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a05 	vstr	s15, [r7, #20]
		for (uint16_t i = 0; i < error_mem_depth_; i++) {
 8001854:	8a7b      	ldrh	r3, [r7, #18]
 8001856:	3301      	adds	r3, #1
 8001858:	827b      	strh	r3, [r7, #18]
 800185a:	e7e9      	b.n	8001830 <_ZN13PIDController6UpdateEf+0x9c>
		}
	}

	// Derivative Error
	float d_error = 0;
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
	if (ms_since_last_update > 0) {
 8001862:	edd7 7a00 	vldr	s15, [r7]
 8001866:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186e:	dd0c      	ble.n	800188a <_ZN13PIDController6UpdateEf+0xf6>
		// avoid yuge spike during controller reset
		d_error = (error_ - prev_error) / ms_since_last_update;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	ed93 7a67 	vldr	s14, [r3, #412]	; 0x19c
 8001876:	edd7 7a02 	vldr	s15, [r7, #8]
 800187a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800187e:	ed97 7a00 	vldr	s14, [r7]
 8001882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001886:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	output_ = k_p * (error_) + k_i * i_error + k_d * d_error;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	ed93 7a68 	vldr	s14, [r3, #416]	; 0x1a0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 80018a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 80018b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
 80018c4:	e000      	b.n	80018c8 <_ZN13PIDController6UpdateEf+0x134>
		return; // only allow updates with positive time steps (avoid errors for i, d)
 80018c6:	bf00      	nop
}
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	81fb      	strh	r3, [r7, #14]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	881b      	ldrh	r3, [r3, #0]
 80018e4:	89fa      	ldrh	r2, [r7, #14]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d20b      	bcs.n	8001902 <_ZN13PIDController5ResetEv+0x2e>
		error_mem_[i] = 0;
 80018ea:	89fb      	ldrh	r3, [r7, #14]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	3304      	adds	r3, #4
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	3301      	adds	r3, #1
 80018fe:	81fb      	strh	r3, [r7, #14]
 8001900:	e7ee      	b.n	80018e0 <_ZN13PIDController5ResetEv+0xc>
	}
	error_ = 0;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Update(0);
 800190c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001920 <_ZN13PIDController5ResetEv+0x4c>
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff3f 	bl	8001794 <_ZN13PIDController6UpdateEf>
}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	00000000 	.word	0x00000000

08001924 <_ZN13PIDController10get_outputEv>:

float PIDController::get_output() {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	return output_;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8001932:	ee07 3a90 	vmov	s15, r3
}
 8001936:	eeb0 0a67 	vmov.f32	s0, s15
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_ZN10HalfBridgeC1Ev>:
		HIGH_SIDE_ON, // lock high side of half-bridge ON, low side OFF
		CURR_LIMIT, // control current through half-bridge with PWM
		FAULT // overcurrent or other event has occurred, half-bridge disabled
	};

	HalfBridge() {} // abstract class due to pure virtual functions: constructor does nothing
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <_ZN10HalfBridgeC1Ev+0x34>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	731a      	strb	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	0800f9d8 	.word	0x0800f9d8

0800197c <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>:
	 * @param[in] timer_channel_id 			Identifier of the channel on the HAL timer being used for the EN/IN pin PWM.
	 * @param[in] curr_sense_adc_voltage	Pointer to the ADC current sense value, to be updated continuously over DMA.
	 * 										Passed as a const reference; will not be changed by the STSPIN830. Is a count
	 * 										out of the full resolution of the ADC.
	 */
	STSPIN830(
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
		uint32_t timer_channel_id,
		const volatile uint16_t& curr_sense_adc_voltage)
		: timer_(timer)
		, timer_channel_id_(timer_channel_id)
		, curr_sense_adc_counts_(curr_sense_adc_voltage)
		, pid(0.0005, 0.0, 0.000001, current_ma_){};
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ffd9 	bl	8001944 <_ZN10HalfBridgeC1Ev>
 8001992:	4a19      	ldr	r2, [pc, #100]	; (80019f8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x7c>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	625a      	str	r2, [r3, #36]	; 0x24
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c6:	851a      	strh	r2, [r3, #40]	; 0x28
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	331c      	adds	r3, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	ed9f 1a07 	vldr	s2, [pc, #28]	; 80019fc <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 80019e0:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001a00 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x84>
 80019e4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8001a04 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x88>
 80019e8:	4610      	mov	r0, r2
 80019ea:	f7ff fe95 	bl	8001718 <_ZN13PIDControllerC1EfffRKf>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	0800f980 	.word	0x0800f980
 80019fc:	358637bd 	.word	0x358637bd
 8001a00:	00000000 	.word	0x00000000
 8001a04:	3a03126f 	.word	0x3a03126f

08001a08 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	static STSPIN830 my_half_bridge(
		half_bridge_pwm_timer,  // PWM timer
		TIM_CHANNEL_1,			// PWM timer channel
		curr_sense_adc_buf[0] /* curr_sense_adc_voltage */);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <main_run+0x98>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f3bf 8f5b 	dmb	ish
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf0c      	ite	eq
 8001a1e:	2301      	moveq	r3, #1
 8001a20:	2300      	movne	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d014      	beq.n	8001a52 <main_run+0x4a>
 8001a28:	481d      	ldr	r0, [pc, #116]	; (8001aa0 <main_run+0x98>)
 8001a2a:	f00a fbef 	bl	800c20c <__cxa_guard_acquire>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf14      	ite	ne
 8001a34:	2301      	movne	r3, #1
 8001a36:	2300      	moveq	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <main_run+0x4a>
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <main_run+0x9c>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <main_run+0xa0>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	4819      	ldr	r0, [pc, #100]	; (8001aac <main_run+0xa4>)
 8001a48:	f7ff ff98 	bl	800197c <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>
 8001a4c:	4814      	ldr	r0, [pc, #80]	; (8001aa0 <main_run+0x98>)
 8001a4e:	f00a fbe9 	bl	800c224 <__cxa_guard_release>
	g_half_bridge = &my_half_bridge;
 8001a52:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <main_run+0xa8>)
 8001a54:	4a15      	ldr	r2, [pc, #84]	; (8001aac <main_run+0xa4>)
 8001a56:	601a      	str	r2, [r3, #0]
	g_half_bridge->Init();
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <main_run+0xa8>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <main_run+0xa8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4610      	mov	r0, r2
 8001a66:	4798      	blx	r3
	g_half_bridge->set_target_current(50); // [10mA]
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <main_run+0xa8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001ab4 <main_run+0xac>
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fce1 	bl	8001438 <_ZN10HalfBridge18set_target_currentEf>

#ifdef RUN_TESTS
	RunAllTests();
 8001a76:	f000 f88d 	bl	8001b94 <_Z11RunAllTestsv>
#endif

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <main_run+0xb0>)
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	480f      	ldr	r0, [pc, #60]	; (8001abc <main_run+0xb4>)
 8001a80:	f007 fcfa 	bl	8009478 <osThreadNew>
 8001a84:	4602      	mov	r2, r0
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <main_run+0xb8>)
 8001a88:	601a      	str	r2, [r3, #0]
	motor_control_task_handle = osThreadNew(StartMotorControlTask, NULL, &motor_control_task_attrs);
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <main_run+0xbc>)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <main_run+0xc0>)
 8001a90:	f007 fcf2 	bl	8009478 <osThreadNew>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <main_run+0xc4>)
 8001a98:	601a      	str	r2, [r3, #0]

	return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200003ec 	.word	0x200003ec
 8001aa4:	20004d0c 	.word	0x20004d0c
 8001aa8:	200003f0 	.word	0x200003f0
 8001aac:	2000020c 	.word	0x2000020c
 8001ab0:	20000208 	.word	0x20000208
 8001ab4:	42480000 	.word	0x42480000
 8001ab8:	0800f988 	.word	0x0800f988
 8001abc:	08001ad1 	.word	0x08001ad1
 8001ac0:	20000200 	.word	0x20000200
 8001ac4:	0800f9ac 	.word	0x0800f9ac
 8001ac8:	08001b51 	.word	0x08001b51
 8001acc:	20000204 	.word	0x20000204

08001ad0 <_Z10startTask1Pv>:

void startTask1(void * argument) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
 8001ad8:	f007 fc9c 	bl	8009414 <osKernelGetTickCount>
 8001adc:	60f8      	str	r0, [r7, #12]
		uint32_t osTickFreq = osKernelGetTickFreq();
 8001ade:	f007 fcc1 	bl	8009464 <osKernelGetTickFreq>
 8001ae2:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	4816      	ldr	r0, [pc, #88]	; (8001b40 <_Z10startTask1Pv+0x70>)
 8001ae8:	f003 faad 	bl	8005046 <HAL_GPIO_TogglePin>
		if (g_half_bridge->get_target_current() == 50) {
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_Z10startTask1Pv+0x74>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fcb0 	bl	8001456 <_ZN10HalfBridge18get_target_currentEv>
 8001af6:	eeb0 7a40 	vmov.f32	s14, s0
 8001afa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8001b48 <_Z10startTask1Pv+0x78>
 8001afe:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <_Z10startTask1Pv+0x52>
			g_half_bridge->set_target_current(100);
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <_Z10startTask1Pv+0x74>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001b4c <_Z10startTask1Pv+0x7c>
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc8c 	bl	8001438 <_ZN10HalfBridge18set_target_currentEf>
 8001b20:	e006      	b.n	8001b30 <_Z10startTask1Pv+0x60>
		} else {
			g_half_bridge->set_target_current(50);
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_Z10startTask1Pv+0x74>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001b48 <_Z10startTask1Pv+0x78>
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fc84 	bl	8001438 <_ZN10HalfBridge18set_target_currentEf>
		}
		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	085a      	lsrs	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f007 fd71 	bl	8009620 <osDelayUntil>
	}
 8001b3e:	e7cb      	b.n	8001ad8 <_Z10startTask1Pv+0x8>
 8001b40:	40020400 	.word	0x40020400
 8001b44:	20000208 	.word	0x20000208
 8001b48:	42480000 	.word	0x42480000
 8001b4c:	42c80000 	.word	0x42c80000

08001b50 <_Z21StartMotorControlTaskPv>:
}

void StartMotorControlTask(void * argument) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]

	while (1) {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001b58:	2201      	movs	r2, #1
 8001b5a:	2140      	movs	r1, #64	; 0x40
 8001b5c:	480b      	ldr	r0, [pc, #44]	; (8001b8c <_Z21StartMotorControlTaskPv+0x3c>)
 8001b5e:	f003 fa59 	bl	8005014 <HAL_GPIO_WritePin>
		g_half_bridge->Update();
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <_Z21StartMotorControlTaskPv+0x40>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <_Z21StartMotorControlTaskPv+0x40>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4610      	mov	r0, r2
 8001b72:	4798      	blx	r3
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <_Z21StartMotorControlTaskPv+0x3c>)
 8001b7a:	f003 fa4b 	bl	8005014 <HAL_GPIO_WritePin>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait indefinitely for run notification, clear notifications (set to 0) upon receiving one
 8001b7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b82:	2001      	movs	r0, #1
 8001b84:	f009 fab2 	bl	800b0ec <ulTaskNotifyTake>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001b88:	e7e6      	b.n	8001b58 <_Z21StartMotorControlTaskPv+0x8>
 8001b8a:	bf00      	nop
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	20000208 	.word	0x20000208

08001b94 <_Z11RunAllTestsv>:
	}
}

#ifdef RUN_TESTS
void RunAllTests() {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	TestEncoderAll();
 8001b98:	f000 fac6 	bl	8002128 <_Z14TestEncoderAllv>
	TestPIDControllerAll();
 8001b9c:	f000 ff04 	bl	80029a8 <_Z20TestPIDControllerAllv>
	TestHalfBridgeAll();
 8001ba0:	f000 fb5a 	bl	8002258 <_Z17TestHalfBridgeAllv>

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 8001bae:	4817      	ldr	r0, [pc, #92]	; (8001c0c <_Z17TestEncoderCreatev+0x64>)
 8001bb0:	f00b f8ec 	bl	800cd8c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001bc0:	8bfa      	ldrh	r2, [r7, #30]
 8001bc2:	4638      	mov	r0, r7
 8001bc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bd0:	f7ff f9fa 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fc02 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001bdc:	eef0 7a40 	vmov.f32	s15, s0
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	ee17 3a90 	vmov	r3, s15
 8001be8:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 8001bea:	8bbb      	ldrh	r3, [r7, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <_Z17TestEncoderCreatev+0x58>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8001bf0:	8bbb      	ldrh	r3, [r7, #28]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <_Z17TestEncoderCreatev+0x68>)
 8001bf8:	f00b f854 	bl	800cca4 <iprintf>
		return false;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e000      	b.n	8001c02 <_Z17TestEncoderCreatev+0x5a>
	}

	return true;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3728      	adds	r7, #40	; 0x28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	0800ebb0 	.word	0x0800ebb0
 8001c10:	0800ebd0 	.word	0x0800ebd0

08001c14 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b08f      	sub	sp, #60	; 0x3c
 8001c18:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 8001c1a:	4839      	ldr	r0, [pc, #228]	; (8001d00 <_Z15TestEncoderZerov+0xec>)
 8001c1c:	f00b f8b6 	bl	800cd8c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001c2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c2e:	4638      	mov	r0, r7
 8001c30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4613      	mov	r3, r2
 8001c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c3c:	f7ff f9c4 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 8001c40:	4830      	ldr	r0, [pc, #192]	; (8001d04 <_Z15TestEncoderZerov+0xf0>)
 8001c42:	f00b f8a3 	bl	800cd8c <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 8001c46:	463b      	mov	r3, r7
 8001c48:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001d08 <_Z15TestEncoderZerov+0xf4>
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbb3 	bl	80013b8 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 8001c52:	463b      	mov	r3, r7
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fbc3 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001c5a:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <_Z15TestEncoderZerov+0xf8>)
 8001c60:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001c62:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c66:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d012      	beq.n	8001c9a <_Z15TestEncoderZerov+0x86>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001c74:	69f8      	ldr	r0, [r7, #28]
 8001c76:	f7fe fc8f 	bl	8000598 <__aeabi_f2d>
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	460e      	mov	r6, r1
 8001c7e:	6a38      	ldr	r0, [r7, #32]
 8001c80:	f7fe fc8a 	bl	8000598 <__aeabi_f2d>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	e9cd 3400 	strd	r3, r4, [sp]
 8001c8c:	462a      	mov	r2, r5
 8001c8e:	4633      	mov	r3, r6
 8001c90:	481f      	ldr	r0, [pc, #124]	; (8001d10 <_Z15TestEncoderZerov+0xfc>)
 8001c92:	f00b f807 	bl	800cca4 <iprintf>
		return false;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e02e      	b.n	8001cf8 <_Z15TestEncoderZerov+0xe4>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 8001c9a:	481e      	ldr	r0, [pc, #120]	; (8001d14 <_Z15TestEncoderZerov+0x100>)
 8001c9c:	f00b f876 	bl	800cd8c <puts>
	enc.set_zero_angle(3600);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001d18 <_Z15TestEncoderZerov+0x104>
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fb86 	bl	80013b8 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8001cac:	463b      	mov	r3, r7
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fb96 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001cb4:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001cbe:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cc2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cc6:	eeb4 7a67 	vcmp.f32	s14, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d012      	beq.n	8001cf6 <_Z15TestEncoderZerov+0xe2>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001cd0:	69f8      	ldr	r0, [r7, #28]
 8001cd2:	f7fe fc61 	bl	8000598 <__aeabi_f2d>
 8001cd6:	4605      	mov	r5, r0
 8001cd8:	460e      	mov	r6, r1
 8001cda:	6a38      	ldr	r0, [r7, #32]
 8001cdc:	f7fe fc5c 	bl	8000598 <__aeabi_f2d>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	e9cd 3400 	strd	r3, r4, [sp]
 8001ce8:	462a      	mov	r2, r5
 8001cea:	4633      	mov	r3, r6
 8001cec:	4808      	ldr	r0, [pc, #32]	; (8001d10 <_Z15TestEncoderZerov+0xfc>)
 8001cee:	f00a ffd9 	bl	800cca4 <iprintf>
		return false;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e000      	b.n	8001cf8 <_Z15TestEncoderZerov+0xe4>
	}

	return true;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3734      	adds	r7, #52	; 0x34
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d00:	0800ec2c 	.word	0x0800ec2c
 8001d04:	0800ec4c 	.word	0x0800ec4c
 8001d08:	425c0000 	.word	0x425c0000
 8001d0c:	43988000 	.word	0x43988000
 8001d10:	0800ec7c 	.word	0x0800ec7c
 8001d14:	0800ecc0 	.word	0x0800ecc0
 8001d18:	45610000 	.word	0x45610000

08001d1c <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	b08f      	sub	sp, #60	; 0x3c
 8001d20:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 8001d22:	4839      	ldr	r0, [pc, #228]	; (8001e08 <_Z16TestEncoderAnglev+0xec>)
 8001d24:	f00b f832 	bl	800cd8c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001d34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001d36:	4638      	mov	r0, r7
 8001d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d44:	f7ff f940 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 8001d48:	4830      	ldr	r0, [pc, #192]	; (8001e0c <_Z16TestEncoderAnglev+0xf0>)
 8001d4a:	f00b f81f 	bl	800cd8c <puts>
	enc.set_angle(450.5);
 8001d4e:	463b      	mov	r3, r7
 8001d50:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001e10 <_Z16TestEncoderAnglev+0xf4>
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fb5b 	bl	8001410 <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb3f 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001d62:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 8001d66:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <_Z16TestEncoderAnglev+0xf8>)
 8001d68:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001d6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d72:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d7a:	d012      	beq.n	8001da2 <_Z16TestEncoderAnglev+0x86>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001d7c:	69f8      	ldr	r0, [r7, #28]
 8001d7e:	f7fe fc0b 	bl	8000598 <__aeabi_f2d>
 8001d82:	4605      	mov	r5, r0
 8001d84:	460e      	mov	r6, r1
 8001d86:	6a38      	ldr	r0, [r7, #32]
 8001d88:	f7fe fc06 	bl	8000598 <__aeabi_f2d>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	460c      	mov	r4, r1
 8001d90:	e9cd 3400 	strd	r3, r4, [sp]
 8001d94:	462a      	mov	r2, r5
 8001d96:	4633      	mov	r3, r6
 8001d98:	481f      	ldr	r0, [pc, #124]	; (8001e18 <_Z16TestEncoderAnglev+0xfc>)
 8001d9a:	f00a ff83 	bl	800cca4 <iprintf>
		return false;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e02d      	b.n	8001dfe <_Z16TestEncoderAnglev+0xe2>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 8001da2:	481e      	ldr	r0, [pc, #120]	; (8001e1c <_Z16TestEncoderAnglev+0x100>)
 8001da4:	f00a fff2 	bl	800cd8c <puts>
	enc.set_angle(-500.9);
 8001da8:	463b      	mov	r3, r7
 8001daa:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8001e20 <_Z16TestEncoderAnglev+0x104>
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb2e 	bl	8001410 <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 8001db4:	463b      	mov	r3, r7
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fb12 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001dbc:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <_Z16TestEncoderAnglev+0x108>)
 8001dc2:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001dc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dc8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dcc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd4:	d012      	beq.n	8001dfc <_Z16TestEncoderAnglev+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001dd6:	69f8      	ldr	r0, [r7, #28]
 8001dd8:	f7fe fbde 	bl	8000598 <__aeabi_f2d>
 8001ddc:	4605      	mov	r5, r0
 8001dde:	460e      	mov	r6, r1
 8001de0:	6a38      	ldr	r0, [r7, #32]
 8001de2:	f7fe fbd9 	bl	8000598 <__aeabi_f2d>
 8001de6:	4603      	mov	r3, r0
 8001de8:	460c      	mov	r4, r1
 8001dea:	e9cd 3400 	strd	r3, r4, [sp]
 8001dee:	462a      	mov	r2, r5
 8001df0:	4633      	mov	r3, r6
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <_Z16TestEncoderAnglev+0xfc>)
 8001df4:	f00a ff56 	bl	800cca4 <iprintf>
		return false;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	e000      	b.n	8001dfe <_Z16TestEncoderAnglev+0xe2>
	}

	return true;
 8001dfc:	2301      	movs	r3, #1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3734      	adds	r7, #52	; 0x34
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e06:	bf00      	nop
 8001e08:	0800ecf8 	.word	0x0800ecf8
 8001e0c:	0800ed1c 	.word	0x0800ed1c
 8001e10:	43e14000 	.word	0x43e14000
 8001e14:	42b50000 	.word	0x42b50000
 8001e18:	0800ec7c 	.word	0x0800ec7c
 8001e1c:	0800ed44 	.word	0x0800ed44
 8001e20:	c3fa7333 	.word	0xc3fa7333
 8001e24:	435b199a 	.word	0x435b199a

08001e28 <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 8001e2e:	483d      	ldr	r0, [pc, #244]	; (8001f24 <_Z17TestAS5048AParityv+0xfc>)
 8001e30:	f00a ffac 	bl	800cd8c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001e40:	8bfa      	ldrh	r2, [r7, #30]
 8001e42:	4638      	mov	r0, r7
 8001e44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	6a3a      	ldr	r2, [r7, #32]
 8001e4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e50:	f7ff f8ba 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 8001e54:	4834      	ldr	r0, [pc, #208]	; (8001f28 <_Z17TestAS5048AParityv+0x100>)
 8001e56:	f00a ff99 	bl	800cd8c <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f8f2 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001e64:	4603      	mov	r3, r0
 8001e66:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001e6c:	7f7a      	ldrb	r2, [r7, #29]
 8001e6e:	7f3b      	ldrb	r3, [r7, #28]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d007      	beq.n	8001e84 <_Z17TestAS5048AParityv+0x5c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001e74:	7f3b      	ldrb	r3, [r7, #28]
 8001e76:	7f7a      	ldrb	r2, [r7, #29]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	482c      	ldr	r0, [pc, #176]	; (8001f2c <_Z17TestAS5048AParityv+0x104>)
 8001e7c:	f00a ff12 	bl	800cca4 <iprintf>
		return false;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e04a      	b.n	8001f1a <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 8001e84:	482a      	ldr	r0, [pc, #168]	; (8001f30 <_Z17TestAS5048AParityv+0x108>)
 8001e86:	f00a ff81 	bl	800cd8c <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff f8da 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001e94:	4603      	mov	r3, r0
 8001e96:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001e9c:	7f7a      	ldrb	r2, [r7, #29]
 8001e9e:	7f3b      	ldrb	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d007      	beq.n	8001eb4 <_Z17TestAS5048AParityv+0x8c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001ea4:	7f3b      	ldrb	r3, [r7, #28]
 8001ea6:	7f7a      	ldrb	r2, [r7, #29]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4820      	ldr	r0, [pc, #128]	; (8001f2c <_Z17TestAS5048AParityv+0x104>)
 8001eac:	f00a fefa 	bl	800cca4 <iprintf>
		return false;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e032      	b.n	8001f1a <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 8001eb4:	481f      	ldr	r0, [pc, #124]	; (8001f34 <_Z17TestAS5048AParityv+0x10c>)
 8001eb6:	f00a ff69 	bl	800cd8c <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff f8c1 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001ece:	7f7a      	ldrb	r2, [r7, #29]
 8001ed0:	7f3b      	ldrb	r3, [r7, #28]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d007      	beq.n	8001ee6 <_Z17TestAS5048AParityv+0xbe>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001ed6:	7f3b      	ldrb	r3, [r7, #28]
 8001ed8:	7f7a      	ldrb	r2, [r7, #29]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4813      	ldr	r0, [pc, #76]	; (8001f2c <_Z17TestAS5048AParityv+0x104>)
 8001ede:	f00a fee1 	bl	800cca4 <iprintf>
		return false;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e019      	b.n	8001f1a <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <_Z17TestAS5048AParityv+0x110>)
 8001ee8:	f00a ff50 	bl	800cd8c <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 8001eec:	463b      	mov	r3, r7
 8001eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff f8a8 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001f00:	7f7a      	ldrb	r2, [r7, #29]
 8001f02:	7f3b      	ldrb	r3, [r7, #28]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d007      	beq.n	8001f18 <_Z17TestAS5048AParityv+0xf0>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001f08:	7f3b      	ldrb	r3, [r7, #28]
 8001f0a:	7f7a      	ldrb	r2, [r7, #29]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4807      	ldr	r0, [pc, #28]	; (8001f2c <_Z17TestAS5048AParityv+0x104>)
 8001f10:	f00a fec8 	bl	800cca4 <iprintf>
		return false;
 8001f14:	2300      	movs	r3, #0
 8001f16:	e000      	b.n	8001f1a <_Z17TestAS5048AParityv+0xf2>
	}

	return true;
 8001f18:	2301      	movs	r3, #1
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	0800ed6c 	.word	0x0800ed6c
 8001f28:	0800ed9c 	.word	0x0800ed9c
 8001f2c:	0800edc4 	.word	0x0800edc4
 8001f30:	0800ee0c 	.word	0x0800ee0c
 8001f34:	0800ee34 	.word	0x0800ee34
 8001f38:	0800ee64 	.word	0x0800ee64

08001f3c <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08e      	sub	sp, #56	; 0x38
 8001f40:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 8001f42:	486e      	ldr	r0, [pc, #440]	; (80020fc <_Z18TestAS5048APacketsv+0x1c0>)
 8001f44:	f00a ff22 	bl	800cd8c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f56:	4638      	mov	r0, r7
 8001f58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f64:	f7ff f830 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 8001f68:	4865      	ldr	r0, [pc, #404]	; (8002100 <_Z18TestAS5048APacketsv+0x1c4>)
 8001f6a:	f00a ff0f 	bl	800cd8c <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2201      	movs	r2, #1
 8001f72:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff f88b 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 8001f80:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 8001f84:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001f86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d007      	beq.n	8001f9e <_Z18TestAS5048APacketsv+0x62>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f92:	4619      	mov	r1, r3
 8001f94:	485b      	ldr	r0, [pc, #364]	; (8002104 <_Z18TestAS5048APacketsv+0x1c8>)
 8001f96:	f00a fe85 	bl	800cca4 <iprintf>
		return false;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e0a9      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8001f9e:	485a      	ldr	r0, [pc, #360]	; (8002108 <_Z18TestAS5048APacketsv+0x1cc>)
 8001fa0:	f00a fef4 	bl	800cd8c <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f870 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8001fb6:	f643 63ef 	movw	r3, #16111	; 0x3eef
 8001fba:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d007      	beq.n	8001fd4 <_Z18TestAS5048APacketsv+0x98>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001fc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fc6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	484e      	ldr	r0, [pc, #312]	; (8002104 <_Z18TestAS5048APacketsv+0x1c8>)
 8001fcc:	f00a fe6a 	bl	800cca4 <iprintf>
		return false;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e08e      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 8001fd4:	484d      	ldr	r0, [pc, #308]	; (800210c <_Z18TestAS5048APacketsv+0x1d0>)
 8001fd6:	f00a fed9 	bl	800cd8c <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 8001fda:	463b      	mov	r3, r7
 8001fdc:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff f87f 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 8001fea:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8001fee:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001ff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d007      	beq.n	8002008 <_Z18TestAS5048APacketsv+0xcc>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001ff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ffa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4844      	ldr	r0, [pc, #272]	; (8002110 <_Z18TestAS5048APacketsv+0x1d4>)
 8002000:	f00a fe50 	bl	800cca4 <iprintf>
		return false;
 8002004:	2300      	movs	r3, #0
 8002006:	e074      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8002008:	4842      	ldr	r0, [pc, #264]	; (8002114 <_Z18TestAS5048APacketsv+0x1d8>)
 800200a:	f00a febf 	bl	800cd8c <puts>
	uint16_t received_pack = 0b1001111010101101;
 800200e:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002012:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 8002014:	8c3a      	ldrh	r2, [r7, #32]
 8002016:	463b      	mov	r3, r7
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f87e 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002020:	4603      	mov	r3, r0
 8002022:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 8002024:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8002028:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 800202a:	8bfa      	ldrh	r2, [r7, #30]
 800202c:	8bbb      	ldrh	r3, [r7, #28]
 800202e:	429a      	cmp	r2, r3
 8002030:	d007      	beq.n	8002042 <_Z18TestAS5048APacketsv+0x106>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002032:	8bbb      	ldrh	r3, [r7, #28]
 8002034:	8bfa      	ldrh	r2, [r7, #30]
 8002036:	4619      	mov	r1, r3
 8002038:	4837      	ldr	r0, [pc, #220]	; (8002118 <_Z18TestAS5048APacketsv+0x1dc>)
 800203a:	f00a fe33 	bl	800cca4 <iprintf>
		return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e057      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 8002042:	4836      	ldr	r0, [pc, #216]	; (800211c <_Z18TestAS5048APacketsv+0x1e0>)
 8002044:	f00a fea2 	bl	800cd8c <puts>
	received_pack = 0b0001111010101101;
 8002048:	f641 63ad 	movw	r3, #7853	; 0x1ead
 800204c:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 800204e:	8c3a      	ldrh	r2, [r7, #32]
 8002050:	463b      	mov	r3, r7
 8002052:	4611      	mov	r1, r2
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff f861 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 800205a:	4603      	mov	r3, r0
 800205c:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 800205e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002062:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002064:	8bfa      	ldrh	r2, [r7, #30]
 8002066:	8bbb      	ldrh	r3, [r7, #28]
 8002068:	429a      	cmp	r2, r3
 800206a:	d007      	beq.n	800207c <_Z18TestAS5048APacketsv+0x140>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 800206c:	8bbb      	ldrh	r3, [r7, #28]
 800206e:	8bfa      	ldrh	r2, [r7, #30]
 8002070:	4619      	mov	r1, r3
 8002072:	4829      	ldr	r0, [pc, #164]	; (8002118 <_Z18TestAS5048APacketsv+0x1dc>)
 8002074:	f00a fe16 	bl	800cca4 <iprintf>
		return false;
 8002078:	2300      	movs	r3, #0
 800207a:	e03a      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 800207c:	4828      	ldr	r0, [pc, #160]	; (8002120 <_Z18TestAS5048APacketsv+0x1e4>)
 800207e:	f00a fe85 	bl	800cd8c <puts>
	received_pack = 0b0101111010101101;
 8002082:	f645 63ad 	movw	r3, #24237	; 0x5ead
 8002086:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002088:	8c3a      	ldrh	r2, [r7, #32]
 800208a:	463b      	mov	r3, r7
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f844 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002094:	4603      	mov	r3, r0
 8002096:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209c:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 800209e:	8bfa      	ldrh	r2, [r7, #30]
 80020a0:	8bbb      	ldrh	r3, [r7, #28]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d007      	beq.n	80020b6 <_Z18TestAS5048APacketsv+0x17a>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80020a6:	8bbb      	ldrh	r3, [r7, #28]
 80020a8:	8bfa      	ldrh	r2, [r7, #30]
 80020aa:	4619      	mov	r1, r3
 80020ac:	481a      	ldr	r0, [pc, #104]	; (8002118 <_Z18TestAS5048APacketsv+0x1dc>)
 80020ae:	f00a fdf9 	bl	800cca4 <iprintf>
		return false;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e01d      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 80020b6:	481b      	ldr	r0, [pc, #108]	; (8002124 <_Z18TestAS5048APacketsv+0x1e8>)
 80020b8:	f00a fe68 	bl	800cd8c <puts>
	received_pack = 0b1101111010101101;
 80020bc:	f64d 63ad 	movw	r3, #57005	; 0xdead
 80020c0:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 80020c2:	8c3a      	ldrh	r2, [r7, #32]
 80020c4:	463b      	mov	r3, r7
 80020c6:	4611      	mov	r1, r2
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff f827 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 80020ce:	4603      	mov	r3, r0
 80020d0:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80020d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d6:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80020d8:	8bfa      	ldrh	r2, [r7, #30]
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d007      	beq.n	80020f0 <_Z18TestAS5048APacketsv+0x1b4>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80020e0:	8bbb      	ldrh	r3, [r7, #28]
 80020e2:	8bfa      	ldrh	r2, [r7, #30]
 80020e4:	4619      	mov	r1, r3
 80020e6:	480c      	ldr	r0, [pc, #48]	; (8002118 <_Z18TestAS5048APacketsv+0x1dc>)
 80020e8:	f00a fddc 	bl	800cca4 <iprintf>
		return false;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <_Z18TestAS5048APacketsv+0x1b6>
	}

	return true;
 80020f0:	2301      	movs	r3, #1
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3730      	adds	r7, #48	; 0x30
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800ee98 	.word	0x0800ee98
 8002100:	0800eecc 	.word	0x0800eecc
 8002104:	0800ef00 	.word	0x0800ef00
 8002108:	0800ef50 	.word	0x0800ef50
 800210c:	0800ef84 	.word	0x0800ef84
 8002110:	0800efb0 	.word	0x0800efb0
 8002114:	0800effc 	.word	0x0800effc
 8002118:	0800f034 	.word	0x0800f034
 800211c:	0800f078 	.word	0x0800f078
 8002120:	0800f0b4 	.word	0x0800f0b4
 8002124:	0800f0ec 	.word	0x0800f0ec

08002128 <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 800212e:	2301      	movs	r3, #1
 8002130:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 8002132:	492c      	ldr	r1, [pc, #176]	; (80021e4 <_Z14TestEncoderAllv+0xbc>)
 8002134:	482c      	ldr	r0, [pc, #176]	; (80021e8 <_Z14TestEncoderAllv+0xc0>)
 8002136:	f00a fdb5 	bl	800cca4 <iprintf>
	enc_passed &= TestEncoderCreate();
 800213a:	f7ff fd35 	bl	8001ba8 <_Z17TestEncoderCreatev>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	4013      	ands	r3, r2
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf14      	ite	ne
 800214a:	2301      	movne	r3, #1
 800214c:	2300      	moveq	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 8002150:	f7ff fd60 	bl	8001c14 <_Z15TestEncoderZerov>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 8002166:	f7ff fdd9 	bl	8001d1c <_Z16TestEncoderAnglev>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4013      	ands	r3, r2
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 8002182:	481a      	ldr	r0, [pc, #104]	; (80021ec <_Z14TestEncoderAllv+0xc4>)
 8002184:	f00a fe02 	bl	800cd8c <puts>
 8002188:	e002      	b.n	8002190 <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 800218a:	4819      	ldr	r0, [pc, #100]	; (80021f0 <_Z14TestEncoderAllv+0xc8>)
 800218c:	f00a fdfe 	bl	800cd8c <puts>
	}

	L_PRINT("Test AS5048A Class");
 8002190:	4918      	ldr	r1, [pc, #96]	; (80021f4 <_Z14TestEncoderAllv+0xcc>)
 8002192:	4815      	ldr	r0, [pc, #84]	; (80021e8 <_Z14TestEncoderAllv+0xc0>)
 8002194:	f00a fd86 	bl	800cca4 <iprintf>
	bool as5048a_passed = true;
 8002198:	2301      	movs	r3, #1
 800219a:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 800219c:	f7ff fe44 	bl	8001e28 <_Z17TestAS5048AParityv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461a      	mov	r2, r3
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 80021b2:	f7ff fec3 	bl	8001f3c <_Z18TestAS5048APacketsv>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	79bb      	ldrb	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 80021c8:	79bb      	ldrb	r3, [r7, #6]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 80021ce:	480a      	ldr	r0, [pc, #40]	; (80021f8 <_Z14TestEncoderAllv+0xd0>)
 80021d0:	f00a fddc 	bl	800cd8c <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 80021d4:	e002      	b.n	80021dc <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 80021d6:	4809      	ldr	r0, [pc, #36]	; (80021fc <_Z14TestEncoderAllv+0xd4>)
 80021d8:	f00a fdd8 	bl	800cd8c <puts>
}
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	0800f130 	.word	0x0800f130
 80021e8:	0800f144 	.word	0x0800f144
 80021ec:	0800f158 	.word	0x0800f158
 80021f0:	0800f180 	.word	0x0800f180
 80021f4:	0800f1a8 	.word	0x0800f1a8
 80021f8:	0800f1bc 	.word	0x0800f1bc
 80021fc:	0800f1e4 	.word	0x0800f1e4

08002200 <_Z20TestHalfBridgeCreatev>:

/**
 * Test Setup Instructions
 */

bool TestHalfBridgeCreate() {
 8002200:	b580      	push	{r7, lr}
 8002202:	b0fc      	sub	sp, #496	; 0x1f0
 8002204:	af00      	add	r7, sp, #0
	TIM_HandleTypeDef * dummy_timer = NULL;
 8002206:	2300      	movs	r3, #0
 8002208:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	uint32_t dummy_timer_id = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	uint16_t adc_buf[1];
	STSPIN830 half_bridge(
			dummy_timer,
			dummy_timer_id,
			adc_buf[0]);
 8002212:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8002216:	1d38      	adds	r0, r7, #4
 8002218:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 800221c:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8002220:	f7ff fbac 	bl	800197c <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>

	if (half_bridge.get_op_mode() != HalfBridge::OFF) {
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f924 	bl	8001474 <_ZN10HalfBridge11get_op_modeEv>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	bf14      	ite	ne
 8002232:	2301      	movne	r3, #1
 8002234:	2300      	moveq	r3, #0
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <_Z20TestHalfBridgeCreatev+0x46>
		FAIL_PRINT("HalfBridge not initialized in OFF op mode.\r\n");
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <_Z20TestHalfBridgeCreatev+0x54>)
 800223e:	f00a fda5 	bl	800cd8c <puts>
		return false;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <_Z20TestHalfBridgeCreatev+0x48>
	}
	return true;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	0800f20c 	.word	0x0800f20c

08002258 <_Z17TestHalfBridgeAllv>:
	}
}
#endif


void TestHalfBridgeAll() {
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
	L_PRINT("Test HalfBridge Class");
 800225e:	490f      	ldr	r1, [pc, #60]	; (800229c <_Z17TestHalfBridgeAllv+0x44>)
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <_Z17TestHalfBridgeAllv+0x48>)
 8002262:	f00a fd1f 	bl	800cca4 <iprintf>
	bool hb_passed = true;
 8002266:	2301      	movs	r3, #1
 8002268:	71fb      	strb	r3, [r7, #7]
	hb_passed &= TestHalfBridgeCreate();
 800226a:	f7ff ffc9 	bl	8002200 <_Z20TestHalfBridgeCreatev>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	4013      	ands	r3, r2
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
#ifdef HARDWARE_TEST
	hb_passed &= TestHalfBridgeHardware();
#endif
	if (hb_passed) {
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <_Z17TestHalfBridgeAllv+0x36>
		PASS_PRINT("HalfBridge Class\r\n");
 8002286:	4807      	ldr	r0, [pc, #28]	; (80022a4 <_Z17TestHalfBridgeAllv+0x4c>)
 8002288:	f00a fd80 	bl	800cd8c <puts>
	} else {
		FAIL_PRINT("HalfBridge Class\r\n");
	}

}
 800228c:	e002      	b.n	8002294 <_Z17TestHalfBridgeAllv+0x3c>
		FAIL_PRINT("HalfBridge Class\r\n");
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <_Z17TestHalfBridgeAllv+0x50>)
 8002290:	f00a fd7c 	bl	800cd8c <puts>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	0800f250 	.word	0x0800f250
 80022a0:	0800f268 	.word	0x0800f268
 80022a4:	0800f27c 	.word	0x0800f27c
 80022a8:	0800f2a8 	.word	0x0800f2a8

080022ac <_Z23TestPIDControllerCreatev>:
#include "test_pid_controller.hh"

#define private public
#include "pid_controller.hh"

bool TestPIDControllerCreate() {
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	b0f5      	sub	sp, #468	; 0x1d4
 80022b0:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 80022b2:	486a      	ldr	r0, [pc, #424]	; (800245c <_Z23TestPIDControllerCreatev+0x1b0>)
 80022b4:	f00a fd6a 	bl	800cd8c <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 80022b8:	4869      	ldr	r0, [pc, #420]	; (8002460 <_Z23TestPIDControllerCreatev+0x1b4>)
 80022ba:	f00a fd67 	bl	800cd8c <puts>
	float k_p = 1.2;
 80022be:	4b69      	ldr	r3, [pc, #420]	; (8002464 <_Z23TestPIDControllerCreatev+0x1b8>)
 80022c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	float k_i = 3.4;
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <_Z23TestPIDControllerCreatev+0x1bc>)
 80022c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	float k_d = 5.6;
 80022ca:	4b68      	ldr	r3, [pc, #416]	; (800246c <_Z23TestPIDControllerCreatev+0x1c0>)
 80022cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	float state = 2.1;
 80022d0:	4b67      	ldr	r3, [pc, #412]	; (8002470 <_Z23TestPIDControllerCreatev+0x1c4>)
 80022d2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	PIDController pid(k_p, k_i, k_d, state);
 80022d6:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	4611      	mov	r1, r2
 80022de:	ed97 1a6f 	vldr	s2, [r7, #444]	; 0x1bc
 80022e2:	edd7 0a70 	vldr	s1, [r7, #448]	; 0x1c0
 80022e6:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fa14 	bl	8001718 <_ZN13PIDControllerC1EfffRKf>

	if (pid.k_p != k_p) {
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 80022f6:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 80022fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	d016      	beq.n	8002332 <_Z23TestPIDControllerCreatev+0x86>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8002304:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8002308:	f7fe f946 	bl	8000598 <__aeabi_f2d>
 800230c:	4605      	mov	r5, r0
 800230e:	460e      	mov	r6, r1
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f93e 	bl	8000598 <__aeabi_f2d>
 800231c:	4603      	mov	r3, r0
 800231e:	460c      	mov	r4, r1
 8002320:	e9cd 3400 	strd	r3, r4, [sp]
 8002324:	462a      	mov	r2, r5
 8002326:	4633      	mov	r3, r6
 8002328:	4852      	ldr	r0, [pc, #328]	; (8002474 <_Z23TestPIDControllerCreatev+0x1c8>)
 800232a:	f00a fcbb 	bl	800cca4 <iprintf>
		return false;
 800232e:	2300      	movs	r3, #0
 8002330:	e08f      	b.n	8002452 <_Z23TestPIDControllerCreatev+0x1a6>
	}
	if (pid.k_i != k_i) {
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8002338:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 800233c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002344:	d016      	beq.n	8002374 <_Z23TestPIDControllerCreatev+0xc8>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 8002346:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4605      	mov	r5, r0
 8002350:	460e      	mov	r6, r1
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f91d 	bl	8000598 <__aeabi_f2d>
 800235e:	4603      	mov	r3, r0
 8002360:	460c      	mov	r4, r1
 8002362:	e9cd 3400 	strd	r3, r4, [sp]
 8002366:	462a      	mov	r2, r5
 8002368:	4633      	mov	r3, r6
 800236a:	4843      	ldr	r0, [pc, #268]	; (8002478 <_Z23TestPIDControllerCreatev+0x1cc>)
 800236c:	f00a fc9a 	bl	800cca4 <iprintf>
		return false;
 8002370:	2300      	movs	r3, #0
 8002372:	e06e      	b.n	8002452 <_Z23TestPIDControllerCreatev+0x1a6>
	}
	if (pid.k_d != k_d) {
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 800237a:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 800237e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	d016      	beq.n	80023b6 <_Z23TestPIDControllerCreatev+0x10a>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 8002388:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800238c:	f7fe f904 	bl	8000598 <__aeabi_f2d>
 8002390:	4605      	mov	r5, r0
 8002392:	460e      	mov	r6, r1
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe f8fc 	bl	8000598 <__aeabi_f2d>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	e9cd 3400 	strd	r3, r4, [sp]
 80023a8:	462a      	mov	r2, r5
 80023aa:	4633      	mov	r3, r6
 80023ac:	4833      	ldr	r0, [pc, #204]	; (800247c <_Z23TestPIDControllerCreatev+0x1d0>)
 80023ae:	f00a fc79 	bl	800cca4 <iprintf>
		return false;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e04d      	b.n	8002452 <_Z23TestPIDControllerCreatev+0x1a6>
	}

	if (pid.state != state) {
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80023bc:	ed93 7a00 	vldr	s14, [r3]
 80023c0:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 80023c4:	eeb4 7a67 	vcmp.f32	s14, s15
 80023c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023cc:	d018      	beq.n	8002400 <_Z23TestPIDControllerCreatev+0x154>
		T_FAIL_PRINT("Incorrect state, constructed with %f but got %f.\r\n", state, pid.state);
 80023ce:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8e0 	bl	8000598 <__aeabi_f2d>
 80023d8:	4605      	mov	r5, r0
 80023da:	460e      	mov	r6, r1
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	4603      	mov	r3, r0
 80023ec:	460c      	mov	r4, r1
 80023ee:	e9cd 3400 	strd	r3, r4, [sp]
 80023f2:	462a      	mov	r2, r5
 80023f4:	4633      	mov	r3, r6
 80023f6:	4822      	ldr	r0, [pc, #136]	; (8002480 <_Z23TestPIDControllerCreatev+0x1d4>)
 80023f8:	f00a fc54 	bl	800cca4 <iprintf>
		return false;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e028      	b.n	8002452 <_Z23TestPIDControllerCreatev+0x1a6>
	}
	state = 345.67;
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <_Z23TestPIDControllerCreatev+0x1d8>)
 8002402:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	if (pid.state != state) {
 8002406:	1d3b      	adds	r3, r7, #4
 8002408:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8002414:	eeb4 7a67 	vcmp.f32	s14, s15
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d018      	beq.n	8002450 <_Z23TestPIDControllerCreatev+0x1a4>
		T_FAIL_PRINT("State does not track, expected %f but got %f.\r\n", state, pid.state);
 800241e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f8b8 	bl	8000598 <__aeabi_f2d>
 8002428:	4605      	mov	r5, r0
 800242a:	460e      	mov	r6, r1
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8af 	bl	8000598 <__aeabi_f2d>
 800243a:	4603      	mov	r3, r0
 800243c:	460c      	mov	r4, r1
 800243e:	e9cd 3400 	strd	r3, r4, [sp]
 8002442:	462a      	mov	r2, r5
 8002444:	4633      	mov	r3, r6
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <_Z23TestPIDControllerCreatev+0x1dc>)
 8002448:	f00a fc2c 	bl	800cca4 <iprintf>
		return false;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <_Z23TestPIDControllerCreatev+0x1a6>
	}

	return true;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8002458:	46bd      	mov	sp, r7
 800245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245c:	0800f2d4 	.word	0x0800f2d4
 8002460:	0800f2fc 	.word	0x0800f2fc
 8002464:	3f99999a 	.word	0x3f99999a
 8002468:	4059999a 	.word	0x4059999a
 800246c:	40b33333 	.word	0x40b33333
 8002470:	40066666 	.word	0x40066666
 8002474:	0800f32c 	.word	0x0800f32c
 8002478:	0800f378 	.word	0x0800f378
 800247c:	0800f3c4 	.word	0x0800f3c4
 8002480:	0800f410 	.word	0x0800f410
 8002484:	43acd5c3 	.word	0x43acd5c3
 8002488:	0800f45c 	.word	0x0800f45c
 800248c:	00000000 	.word	0x00000000

08002490 <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 8002490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002494:	b0f3      	sub	sp, #460	; 0x1cc
 8002496:	af02      	add	r7, sp, #8
	TEST_PRINT("Test PID Controller Response.\r\n");
 8002498:	48bb      	ldr	r0, [pc, #748]	; (8002788 <_Z25TestPIDControllerResponsev+0x2f8>)
 800249a:	f00a fc77 	bl	800cd8c <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 800249e:	48bb      	ldr	r0, [pc, #748]	; (800278c <_Z25TestPIDControllerResponsev+0x2fc>)
 80024a0:	f00a fc74 	bl	800cd8c <puts>
	float state = 0;
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	PIDController pid = PIDController(0, 0, 0, state);
 80024ac:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80024b0:	463b      	mov	r3, r7
 80024b2:	4611      	mov	r1, r2
 80024b4:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 8002790 <_Z25TestPIDControllerResponsev+0x300>
 80024b8:	eddf 0ab5 	vldr	s1, [pc, #724]	; 8002790 <_Z25TestPIDControllerResponsev+0x300>
 80024bc:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8002790 <_Z25TestPIDControllerResponsev+0x300>
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff f929 	bl	8001718 <_ZN13PIDControllerC1EfffRKf>
	if (pid.get_output() != 0) {
 80024c6:	463b      	mov	r3, r7
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fa2b 	bl	8001924 <_ZN13PIDController10get_outputEv>
 80024ce:	eef0 7a40 	vmov.f32	s15, s0
 80024d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024da:	bf14      	ite	ne
 80024dc:	2301      	movne	r3, #1
 80024de:	2300      	moveq	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d015      	beq.n	8002512 <_Z25TestPIDControllerResponsev+0x82>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, pid.get_output());
 80024e6:	463b      	mov	r3, r7
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fa1b 	bl	8001924 <_ZN13PIDController10get_outputEv>
 80024ee:	ee10 3a10 	vmov	r3, s0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f850 	bl	8000598 <__aeabi_f2d>
 80024f8:	4603      	mov	r3, r0
 80024fa:	460c      	mov	r4, r1
 80024fc:	e9cd 3400 	strd	r3, r4, [sp]
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	48a2      	ldr	r0, [pc, #648]	; (8002794 <_Z25TestPIDControllerResponsev+0x304>)
 800250a:	f00a fbcb 	bl	800cca4 <iprintf>
		return false;
 800250e:	2300      	movs	r3, #0
 8002510:	e230      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 8002512:	48a1      	ldr	r0, [pc, #644]	; (8002798 <_Z25TestPIDControllerResponsev+0x308>)
 8002514:	f00a fc3a 	bl	800cd8c <puts>
	state = 1.0;
 8002518:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800251c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 2.0;
 8002520:	463b      	mov	r3, r7
 8002522:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002526:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.k_p = 5.0;
 800252a:	463b      	mov	r3, r7
 800252c:	4a9b      	ldr	r2, [pc, #620]	; (800279c <_Z25TestPIDControllerResponsev+0x30c>)
 800252e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.Update(10.5);
 8002532:	463b      	mov	r3, r7
 8002534:	eeb2 0a05 	vmov.f32	s0, #37	; 0x41280000  10.5
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f92b 	bl	8001794 <_ZN13PIDController6UpdateEf>
	float expect_output = (1.0 - 2.0) * 5.0;
 800253e:	4b98      	ldr	r3, [pc, #608]	; (80027a0 <_Z25TestPIDControllerResponsev+0x310>)
 8002540:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002544:	463b      	mov	r3, r7
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff f9ec 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800254c:	eeb0 7a40 	vmov.f32	s14, s0
 8002550:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8002554:	eef4 7a47 	vcmp.f32	s15, s14
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	bf14      	ite	ne
 800255e:	2301      	movne	r3, #1
 8002560:	2300      	moveq	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d019      	beq.n	800259c <_Z25TestPIDControllerResponsev+0x10c>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 8002568:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	4605      	mov	r5, r0
 8002572:	460e      	mov	r6, r1
 8002574:	463b      	mov	r3, r7
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f9d4 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800257c:	ee10 3a10 	vmov	r3, s0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe f809 	bl	8000598 <__aeabi_f2d>
 8002586:	4603      	mov	r3, r0
 8002588:	460c      	mov	r4, r1
 800258a:	e9cd 3400 	strd	r3, r4, [sp]
 800258e:	462a      	mov	r2, r5
 8002590:	4633      	mov	r3, r6
 8002592:	4884      	ldr	r0, [pc, #528]	; (80027a4 <_Z25TestPIDControllerResponsev+0x314>)
 8002594:	f00a fb86 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002598:	2300      	movs	r3, #0
 800259a:	e1eb      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 800259c:	4882      	ldr	r0, [pc, #520]	; (80027a8 <_Z25TestPIDControllerResponsev+0x318>)
 800259e:	f00a fbf5 	bl	800cd8c <puts>
	pid.k_p = 0;
 80025a2:	463b      	mov	r3, r7
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.k_i = 3;
 80025ac:	463b      	mov	r3, r7
 80025ae:	4a7f      	ldr	r2, [pc, #508]	; (80027ac <_Z25TestPIDControllerResponsev+0x31c>)
 80025b0:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	pid.target = 98.5;
 80025b4:	463b      	mov	r3, r7
 80025b6:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <_Z25TestPIDControllerResponsev+0x320>)
 80025b8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	state = 70;
 80025bc:	4b7d      	ldr	r3, [pc, #500]	; (80027b4 <_Z25TestPIDControllerResponsev+0x324>)
 80025be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.Update(10.7);
 80025c2:	463b      	mov	r3, r7
 80025c4:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80027b8 <_Z25TestPIDControllerResponsev+0x328>
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f8e3 	bl	8001794 <_ZN13PIDController6UpdateEf>
	expect_output = (1.0-2.0) * 10.7 * 3;
 80025ce:	4b7b      	ldr	r3, [pc, #492]	; (80027bc <_Z25TestPIDControllerResponsev+0x32c>)
 80025d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 80025d4:	463b      	mov	r3, r7
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f9a4 	bl	8001924 <_ZN13PIDController10get_outputEv>
 80025dc:	eeb0 7a40 	vmov.f32	s14, s0
 80025e0:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80025e4:	eef4 7a47 	vcmp.f32	s15, s14
 80025e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d019      	beq.n	800262c <_Z25TestPIDControllerResponsev+0x19c>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 80025f8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80025fc:	f7fd ffcc 	bl	8000598 <__aeabi_f2d>
 8002600:	4605      	mov	r5, r0
 8002602:	460e      	mov	r6, r1
 8002604:	463b      	mov	r3, r7
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff f98c 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800260c:	ee10 3a10 	vmov	r3, s0
 8002610:	4618      	mov	r0, r3
 8002612:	f7fd ffc1 	bl	8000598 <__aeabi_f2d>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	e9cd 3400 	strd	r3, r4, [sp]
 800261e:	462a      	mov	r2, r5
 8002620:	4633      	mov	r3, r6
 8002622:	4867      	ldr	r0, [pc, #412]	; (80027c0 <_Z25TestPIDControllerResponsev+0x330>)
 8002624:	f00a fb3e 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002628:	2300      	movs	r3, #0
 800262a:	e1a3      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 800262c:	4865      	ldr	r0, [pc, #404]	; (80027c4 <_Z25TestPIDControllerResponsev+0x334>)
 800262e:	f00a fbad 	bl	800cd8c <puts>
	pid.Update(11.9);
 8002632:	463b      	mov	r3, r7
 8002634:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80027c8 <_Z25TestPIDControllerResponsev+0x338>
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff f8ab 	bl	8001794 <_ZN13PIDController6UpdateEf>
	expect_output += (70-98.5) * 11.9 * 3;
 800263e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002642:	f7fd ffa9 	bl	8000598 <__aeabi_f2d>
 8002646:	a34c      	add	r3, pc, #304	; (adr r3, 8002778 <_Z25TestPIDControllerResponsev+0x2e8>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fd fe44 	bl	80002d8 <__aeabi_dsub>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	4618      	mov	r0, r3
 8002656:	4621      	mov	r1, r4
 8002658:	f7fe face 	bl	8000bf8 <__aeabi_d2f>
 800265c:	4603      	mov	r3, r0
 800265e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002662:	463b      	mov	r3, r7
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f95d 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800266a:	eeb0 7a40 	vmov.f32	s14, s0
 800266e:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8002672:	eef4 7a47 	vcmp.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	bf14      	ite	ne
 800267c:	2301      	movne	r3, #1
 800267e:	2300      	moveq	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d019      	beq.n	80026ba <_Z25TestPIDControllerResponsev+0x22a>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 8002686:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800268a:	f7fd ff85 	bl	8000598 <__aeabi_f2d>
 800268e:	4605      	mov	r5, r0
 8002690:	460e      	mov	r6, r1
 8002692:	463b      	mov	r3, r7
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f945 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800269a:	ee10 3a10 	vmov	r3, s0
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fd ff7a 	bl	8000598 <__aeabi_f2d>
 80026a4:	4603      	mov	r3, r0
 80026a6:	460c      	mov	r4, r1
 80026a8:	e9cd 3400 	strd	r3, r4, [sp]
 80026ac:	462a      	mov	r2, r5
 80026ae:	4633      	mov	r3, r6
 80026b0:	4846      	ldr	r0, [pc, #280]	; (80027cc <_Z25TestPIDControllerResponsev+0x33c>)
 80026b2:	f00a faf7 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 80026b6:	2300      	movs	r3, #0
 80026b8:	e15c      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #3 (overflow test).\r\n");
 80026ba:	4845      	ldr	r0, [pc, #276]	; (80027d0 <_Z25TestPIDControllerResponsev+0x340>)
 80026bc:	f00a fb66 	bl	800cd8c <puts>
	for (uint16_t i = 0; i < 2*pid.error_mem_depth_; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 80026c6:	f8b7 21ba 	ldrh.w	r2, [r7, #442]	; 0x1ba
 80026ca:	463b      	mov	r3, r7
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	429a      	cmp	r2, r3
 80026d2:	f280 8083 	bge.w	80027dc <_Z25TestPIDControllerResponsev+0x34c>
		pid.Update(12.1);
 80026d6:	463b      	mov	r3, r7
 80026d8:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80027d4 <_Z25TestPIDControllerResponsev+0x344>
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff f859 	bl	8001794 <_ZN13PIDController6UpdateEf>
		expect_output += (70-98.5) * 12.1 * 3;
 80026e2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80026e6:	f7fd ff57 	bl	8000598 <__aeabi_f2d>
 80026ea:	a325      	add	r3, pc, #148	; (adr r3, 8002780 <_Z25TestPIDControllerResponsev+0x2f0>)
 80026ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f0:	f7fd fdf2 	bl	80002d8 <__aeabi_dsub>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	4618      	mov	r0, r3
 80026fa:	4621      	mov	r1, r4
 80026fc:	f7fe fa7c 	bl	8000bf8 <__aeabi_d2f>
 8002700:	4603      	mov	r3, r0
 8002702:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		if (!CheckClose(pid.get_output(), expect_output, (float)0.5)) {
 8002706:	463b      	mov	r3, r7
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff f90b 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800270e:	eef0 7a40 	vmov.f32	s15, s0
 8002712:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002716:	edd7 0a6f 	vldr	s1, [r7, #444]	; 0x1bc
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	f000 f979 	bl	8002a14 <_Z10CheckCloseIfEbT_S0_S0_>
 8002722:	4603      	mov	r3, r0
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01c      	beq.n	8002768 <_Z25TestPIDControllerResponsev+0x2d8>
			T_FAIL_PRINT("Failed overflow test on iteration %d, expected output %f but got %f.\r\n",
 800272e:	f8b7 51ba 	ldrh.w	r5, [r7, #442]	; 0x1ba
 8002732:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002736:	f7fd ff2f 	bl	8000598 <__aeabi_f2d>
 800273a:	4680      	mov	r8, r0
 800273c:	4689      	mov	r9, r1
 800273e:	463b      	mov	r3, r7
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff f8ef 	bl	8001924 <_ZN13PIDController10get_outputEv>
 8002746:	ee10 3a10 	vmov	r3, s0
 800274a:	4618      	mov	r0, r3
 800274c:	f7fd ff24 	bl	8000598 <__aeabi_f2d>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	e9cd 3400 	strd	r3, r4, [sp]
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	4629      	mov	r1, r5
 800275e:	481e      	ldr	r0, [pc, #120]	; (80027d8 <_Z25TestPIDControllerResponsev+0x348>)
 8002760:	f00a faa0 	bl	800cca4 <iprintf>
					i, expect_output, pid.get_output());
			return false;
 8002764:	2300      	movs	r3, #0
 8002766:	e105      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	for (uint16_t i = 0; i < 2*pid.error_mem_depth_; i++) {
 8002768:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 800276c:	3301      	adds	r3, #1
 800276e:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 8002772:	e7a8      	b.n	80026c6 <_Z25TestPIDControllerResponsev+0x236>
 8002774:	f3af 8000 	nop.w
 8002778:	9999999a 	.word	0x9999999a
 800277c:	408fcb99 	.word	0x408fcb99
 8002780:	33333333 	.word	0x33333333
 8002784:	40902a33 	.word	0x40902a33
 8002788:	0800f4a8 	.word	0x0800f4a8
 800278c:	0800f4d8 	.word	0x0800f4d8
 8002790:	00000000 	.word	0x00000000
 8002794:	0800f518 	.word	0x0800f518
 8002798:	0800f56c 	.word	0x0800f56c
 800279c:	40a00000 	.word	0x40a00000
 80027a0:	c0a00000 	.word	0xc0a00000
 80027a4:	0800f58c 	.word	0x0800f58c
 80027a8:	0800f5dc 	.word	0x0800f5dc
 80027ac:	40400000 	.word	0x40400000
 80027b0:	42c50000 	.word	0x42c50000
 80027b4:	428c0000 	.word	0x428c0000
 80027b8:	412b3333 	.word	0x412b3333
 80027bc:	c2006666 	.word	0xc2006666
 80027c0:	0800f5fc 	.word	0x0800f5fc
 80027c4:	0800f64c 	.word	0x0800f64c
 80027c8:	413e6666 	.word	0x413e6666
 80027cc:	0800f66c 	.word	0x0800f66c
 80027d0:	0800f6bc 	.word	0x0800f6bc
 80027d4:	4141999a 	.word	0x4141999a
 80027d8:	0800f6ec 	.word	0x0800f6ec
		}
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 80027dc:	4868      	ldr	r0, [pc, #416]	; (8002980 <_Z25TestPIDControllerResponsev+0x4f0>)
 80027de:	f00a fad5 	bl	800cd8c <puts>
	pid.Reset();
 80027e2:	463b      	mov	r3, r7
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff f875 	bl	80018d4 <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 80027ea:	463b      	mov	r3, r7
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.k_i = 0;
 80027f4:	463b      	mov	r3, r7
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	pid.k_d = 0;
 80027fe:	463b      	mov	r3, r7
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	expect_output = 0;
 8002808:	f04f 0300 	mov.w	r3, #0
 800280c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002810:	463b      	mov	r3, r7
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f886 	bl	8001924 <_ZN13PIDController10get_outputEv>
 8002818:	eeb0 7a40 	vmov.f32	s14, s0
 800281c:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8002820:	eef4 7a47 	vcmp.f32	s15, s14
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	bf14      	ite	ne
 800282a:	2301      	movne	r3, #1
 800282c:	2300      	moveq	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d019      	beq.n	8002868 <_Z25TestPIDControllerResponsev+0x3d8>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 8002834:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002838:	f7fd feae 	bl	8000598 <__aeabi_f2d>
 800283c:	4605      	mov	r5, r0
 800283e:	460e      	mov	r6, r1
 8002840:	463b      	mov	r3, r7
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f86e 	bl	8001924 <_ZN13PIDController10get_outputEv>
 8002848:	ee10 3a10 	vmov	r3, s0
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fea3 	bl	8000598 <__aeabi_f2d>
 8002852:	4603      	mov	r3, r0
 8002854:	460c      	mov	r4, r1
 8002856:	e9cd 3400 	strd	r3, r4, [sp]
 800285a:	462a      	mov	r2, r5
 800285c:	4633      	mov	r3, r6
 800285e:	4849      	ldr	r0, [pc, #292]	; (8002984 <_Z25TestPIDControllerResponsev+0x4f4>)
 8002860:	f00a fa20 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002864:	2300      	movs	r3, #0
 8002866:	e085      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 8002868:	4847      	ldr	r0, [pc, #284]	; (8002988 <_Z25TestPIDControllerResponsev+0x4f8>)
 800286a:	f00a fa8f 	bl	800cd8c <puts>
	state = 0;
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 0;
 8002876:	463b      	mov	r3, r7
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.Update(10);
 8002880:	463b      	mov	r3, r7
 8002882:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe ff84 	bl	8001794 <_ZN13PIDController6UpdateEf>
	expect_output = 0;
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002894:	463b      	mov	r3, r7
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff f844 	bl	8001924 <_ZN13PIDController10get_outputEv>
 800289c:	eeb0 7a40 	vmov.f32	s14, s0
 80028a0:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80028a4:	eef4 7a47 	vcmp.f32	s15, s14
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	bf14      	ite	ne
 80028ae:	2301      	movne	r3, #1
 80028b0:	2300      	moveq	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d019      	beq.n	80028ec <_Z25TestPIDControllerResponsev+0x45c>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 80028b8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80028bc:	f7fd fe6c 	bl	8000598 <__aeabi_f2d>
 80028c0:	4605      	mov	r5, r0
 80028c2:	460e      	mov	r6, r1
 80028c4:	463b      	mov	r3, r7
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f82c 	bl	8001924 <_ZN13PIDController10get_outputEv>
 80028cc:	ee10 3a10 	vmov	r3, s0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe61 	bl	8000598 <__aeabi_f2d>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	e9cd 3400 	strd	r3, r4, [sp]
 80028de:	462a      	mov	r2, r5
 80028e0:	4633      	mov	r3, r6
 80028e2:	482a      	ldr	r0, [pc, #168]	; (800298c <_Z25TestPIDControllerResponsev+0x4fc>)
 80028e4:	f00a f9de 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e043      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 80028ec:	4828      	ldr	r0, [pc, #160]	; (8002990 <_Z25TestPIDControllerResponsev+0x500>)
 80028ee:	f00a fa4d 	bl	800cd8c <puts>
	pid.k_d = 13.5;
 80028f2:	463b      	mov	r3, r7
 80028f4:	4a27      	ldr	r2, [pc, #156]	; (8002994 <_Z25TestPIDControllerResponsev+0x504>)
 80028f6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	state = -487.3;
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <_Z25TestPIDControllerResponsev+0x508>)
 80028fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 22;
 8002900:	463b      	mov	r3, r7
 8002902:	4a26      	ldr	r2, [pc, #152]	; (800299c <_Z25TestPIDControllerResponsev+0x50c>)
 8002904:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.Update(10);
 8002908:	463b      	mov	r3, r7
 800290a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe ff40 	bl	8001794 <_ZN13PIDController6UpdateEf>
	expect_output = (-487.3 - 22) * 13.5 / 10;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <_Z25TestPIDControllerResponsev+0x510>)
 8002916:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 800291a:	463b      	mov	r3, r7
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff f801 	bl	8001924 <_ZN13PIDController10get_outputEv>
 8002922:	eeb0 7a40 	vmov.f32	s14, s0
 8002926:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 800292a:	eef4 7a47 	vcmp.f32	s15, s14
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	bf14      	ite	ne
 8002934:	2301      	movne	r3, #1
 8002936:	2300      	moveq	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d019      	beq.n	8002972 <_Z25TestPIDControllerResponsev+0x4e2>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 800293e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002942:	f7fd fe29 	bl	8000598 <__aeabi_f2d>
 8002946:	4605      	mov	r5, r0
 8002948:	460e      	mov	r6, r1
 800294a:	463b      	mov	r3, r7
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ffe9 	bl	8001924 <_ZN13PIDController10get_outputEv>
 8002952:	ee10 3a10 	vmov	r3, s0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fe1e 	bl	8000598 <__aeabi_f2d>
 800295c:	4603      	mov	r3, r0
 800295e:	460c      	mov	r4, r1
 8002960:	e9cd 3400 	strd	r3, r4, [sp]
 8002964:	462a      	mov	r2, r5
 8002966:	4633      	mov	r3, r6
 8002968:	480e      	ldr	r0, [pc, #56]	; (80029a4 <_Z25TestPIDControllerResponsev+0x514>)
 800296a:	f00a f99b 	bl	800cca4 <iprintf>
				expect_output, pid.get_output());
		return false;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <_Z25TestPIDControllerResponsev+0x4e4>
	}

	return true;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 800297a:	46bd      	mov	sp, r7
 800297c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002980:	0800f74c 	.word	0x0800f74c
 8002984:	0800f770 	.word	0x0800f770
 8002988:	0800f7c0 	.word	0x0800f7c0
 800298c:	0800f7e4 	.word	0x0800f7e4
 8002990:	0800f834 	.word	0x0800f834
 8002994:	41580000 	.word	0x41580000
 8002998:	c3f3a666 	.word	0xc3f3a666
 800299c:	41b00000 	.word	0x41b00000
 80029a0:	c42be385 	.word	0xc42be385
 80029a4:	0800f854 	.word	0x0800f854

080029a8 <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 80029ae:	4915      	ldr	r1, [pc, #84]	; (8002a04 <_Z20TestPIDControllerAllv+0x5c>)
 80029b0:	4815      	ldr	r0, [pc, #84]	; (8002a08 <_Z20TestPIDControllerAllv+0x60>)
 80029b2:	f00a f977 	bl	800cca4 <iprintf>
	bool pid_passed = true;
 80029b6:	2301      	movs	r3, #1
 80029b8:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 80029ba:	f7ff fc77 	bl	80022ac <_Z23TestPIDControllerCreatev>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 80029d0:	f7ff fd5e 	bl	8002490 <_Z25TestPIDControllerResponsev>
 80029d4:	4603      	mov	r3, r0
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf14      	ite	ne
 80029e0:	2301      	movne	r3, #1
 80029e2:	2300      	moveq	r3, #0
 80029e4:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 80029ec:	4807      	ldr	r0, [pc, #28]	; (8002a0c <_Z20TestPIDControllerAllv+0x64>)
 80029ee:	f00a f9cd 	bl	800cd8c <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 80029f2:	e002      	b.n	80029fa <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 80029f4:	4806      	ldr	r0, [pc, #24]	; (8002a10 <_Z20TestPIDControllerAllv+0x68>)
 80029f6:	f00a f9c9 	bl	800cd8c <puts>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	0800f8a4 	.word	0x0800f8a4
 8002a08:	0800f8c0 	.word	0x0800f8c0
 8002a0c:	0800f8d4 	.word	0x0800f8d4
 8002a10:	0800f904 	.word	0x0800f904

08002a14 <_Z10CheckCloseIfEbT_S0_S0_>:
bool CheckEqual(T a, T b) {
	return a == b;
}

template <class T>
bool CheckClose(T a, T b, T margin) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a1e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a22:	ed87 1a01 	vstr	s2, [r7, #4]
	return (a - b <= margin) || (b - a <= margin);
 8002a26:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a32:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	da0c      	bge.n	8002a5a <_Z10CheckCloseIfEbT_S0_S0_+0x46>
 8002a40:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a58:	db01      	blt.n	8002a5e <_Z10CheckCloseIfEbT_S0_S0_+0x4a>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <_Z10CheckCloseIfEbT_S0_S0_+0x4c>
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dbprint_uart = &huart3;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <main+0x80>)
 8002a72:	4a1f      	ldr	r2, [pc, #124]	; (8002af0 <main+0x84>)
 8002a74:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 8002a76:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <main+0x88>)
 8002a78:	4a1f      	ldr	r2, [pc, #124]	; (8002af8 <main+0x8c>)
 8002a7a:	601a      	str	r2, [r3, #0]
	half_bridge_pwm_timer = &htim1;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <main+0x90>)
 8002a7e:	4a20      	ldr	r2, [pc, #128]	; (8002b00 <main+0x94>)
 8002a80:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a82:	f001 f87a 	bl	8003b7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a86:	f000 f84b 	bl	8002b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8a:	f000 fbb3 	bl	80031f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a8e:	f000 fb93 	bl	80031b8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002a92:	f000 fb33 	bl	80030fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002a96:	f000 fb61 	bl	800315c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8002a9a:	f000 f945 	bl	8002d28 <MX_SPI5_Init>
  MX_ADC1_Init();
 8002a9e:	f000 f8d5 	bl	8002c4c <MX_ADC1_Init>
  MX_TIM4_Init();
 8002aa2:	f000 fab5 	bl	8003010 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002aa6:	f000 f97d 	bl	8002da4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002aaa:	f000 fa45 	bl	8002f38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 8002aae:	2201      	movs	r2, #1
 8002ab0:	2110      	movs	r1, #16
 8002ab2:	4814      	ldr	r0, [pc, #80]	; (8002b04 <main+0x98>)
 8002ab4:	f002 faae 	bl	8005014 <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curr_sense_adc_buf, ADC_BUF_LEN) != HAL_OK) {
 8002ab8:	2203      	movs	r2, #3
 8002aba:	4913      	ldr	r1, [pc, #76]	; (8002b08 <main+0x9c>)
 8002abc:	4813      	ldr	r0, [pc, #76]	; (8002b0c <main+0xa0>)
 8002abe:	f001 f8ef 	bl	8003ca0 <HAL_ADC_Start_DMA>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <main+0x60>
  	  Error_Handler();
 8002ac8:	f000 fca2 	bl	8003410 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim4);
 8002acc:	4810      	ldr	r0, [pc, #64]	; (8002b10 <main+0xa4>)
 8002ace:	f004 f9e7 	bl	8006ea0 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002ad2:	f006 fc35 	bl	8009340 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002ad6:	4a0f      	ldr	r2, [pc, #60]	; (8002b14 <main+0xa8>)
 8002ad8:	2100      	movs	r1, #0
 8002ada:	480f      	ldr	r0, [pc, #60]	; (8002b18 <main+0xac>)
 8002adc:	f006 fccc 	bl	8009478 <osThreadNew>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <main+0xb0>)
 8002ae4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002ae6:	f006 fc5f 	bl	80093a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002aea:	e7fe      	b.n	8002aea <main+0x7e>
 8002aec:	20005368 	.word	0x20005368
 8002af0:	20004db8 	.word	0x20004db8
 8002af4:	2000523c 	.word	0x2000523c
 8002af8:	20004d14 	.word	0x20004d14
 8002afc:	20004d0c 	.word	0x20004d0c
 8002b00:	200052e8 	.word	0x200052e8
 8002b04:	40020000 	.word	0x40020000
 8002b08:	200003f0 	.word	0x200003f0
 8002b0c:	20005240 	.word	0x20005240
 8002b10:	20004d78 	.word	0x20004d78
 8002b14:	0800f9e0 	.word	0x0800f9e0
 8002b18:	080033d5 	.word	0x080033d5
 8002b1c:	20004d10 	.word	0x20004d10

08002b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0b4      	sub	sp, #208	; 0xd0
 8002b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b2a:	2230      	movs	r2, #48	; 0x30
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f009 fc53 	bl	800c3da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b34:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f009 fc44 	bl	800c3da <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b52:	f002 fbdb 	bl	800530c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <SystemClock_Config+0x120>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a39      	ldr	r2, [pc, #228]	; (8002c40 <SystemClock_Config+0x120>)
 8002b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <SystemClock_Config+0x120>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6e:	4b35      	ldr	r3, [pc, #212]	; (8002c44 <SystemClock_Config+0x124>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a34      	ldr	r2, [pc, #208]	; (8002c44 <SystemClock_Config+0x124>)
 8002b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <SystemClock_Config+0x124>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b86:	2301      	movs	r3, #1
 8002b88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002b8c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b94:	2302      	movs	r3, #2
 8002b96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ba2:	2304      	movs	r3, #4
 8002ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002ba8:	23d8      	movs	r3, #216	; 0xd8
 8002baa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002bb4:	2309      	movs	r3, #9
 8002bb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f002 fc04 	bl	80053cc <HAL_RCC_OscConfig>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002bca:	f000 fc21 	bl	8003410 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bce:	f002 fbad 	bl	800532c <HAL_PWREx_EnableOverDrive>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002bd8:	f000 fc1a 	bl	8003410 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bdc:	230f      	movs	r3, #15
 8002bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002bfe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c02:	2107      	movs	r1, #7
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fe85 	bl	8005914 <HAL_RCC_ClockConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002c10:	f000 fbfe 	bl	8003410 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <SystemClock_Config+0x128>)
 8002c16:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 f89e 	bl	8005d68 <HAL_RCCEx_PeriphCLKConfig>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002c32:	f000 fbed 	bl	8003410 <Error_Handler>
  }
}
 8002c36:	bf00      	nop
 8002c38:	37d0      	adds	r7, #208	; 0xd0
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	40007000 	.word	0x40007000
 8002c48:	00200100 	.word	0x00200100

08002c4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c52:	463b      	mov	r3, r7
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c5e:	4b30      	ldr	r3, [pc, #192]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c60:	4a30      	ldr	r2, [pc, #192]	; (8002d24 <MX_ADC1_Init+0xd8>)
 8002c62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c6c:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c7e:	4b28      	ldr	r3, [pc, #160]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002c86:	4b26      	ldr	r3, [pc, #152]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c90:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002c9c:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002ca2:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cb0:	481b      	ldr	r0, [pc, #108]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002cb2:	f000 ffb1 	bl	8003c18 <HAL_ADC_Init>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002cbc:	f000 fba8 	bl	8003410 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002cc8:	2306      	movs	r3, #6
 8002cca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ccc:	463b      	mov	r3, r7
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4813      	ldr	r0, [pc, #76]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002cd2:	f001 f8e7 	bl	8003ea4 <HAL_ADC_ConfigChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002cdc:	f000 fb98 	bl	8003410 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ce8:	463b      	mov	r3, r7
 8002cea:	4619      	mov	r1, r3
 8002cec:	480c      	ldr	r0, [pc, #48]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002cee:	f001 f8d9 	bl	8003ea4 <HAL_ADC_ConfigChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002cf8:	f000 fb8a 	bl	8003410 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002d00:	2303      	movs	r3, #3
 8002d02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d04:	463b      	mov	r3, r7
 8002d06:	4619      	mov	r1, r3
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <MX_ADC1_Init+0xd4>)
 8002d0a:	f001 f8cb 	bl	8003ea4 <HAL_ADC_ConfigChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002d14:	f000 fb7c 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d18:	bf00      	nop
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20005240 	.word	0x20005240
 8002d24:	40012000 	.word	0x40012000

08002d28 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <MX_SPI5_Init+0x78>)
 8002d30:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d38:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3a:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d40:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d46:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002d54:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d5e:	2218      	movs	r2, #24
 8002d60:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d76:	2207      	movs	r2, #7
 8002d78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_SPI5_Init+0x74>)
 8002d88:	f003 fb36 	bl	80063f8 <HAL_SPI_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002d92:	f000 fb3d 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20004d14 	.word	0x20004d14
 8002da0:	40015000 	.word	0x40015000

08002da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b09a      	sub	sp, #104	; 0x68
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	222c      	movs	r2, #44	; 0x2c
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4618      	mov	r0, r3
 8002de0:	f009 fafb 	bl	800c3da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002de4:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002de6:	4a53      	ldr	r2, [pc, #332]	; (8002f34 <MX_TIM1_Init+0x190>)
 8002de8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df0:	4b4f      	ldr	r3, [pc, #316]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002df8:	f242 7210 	movw	r2, #10000	; 0x2710
 8002dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfe:	4b4c      	ldr	r3, [pc, #304]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e0c:	2280      	movs	r2, #128	; 0x80
 8002e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e10:	4847      	ldr	r0, [pc, #284]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e12:	f004 f819 	bl	8006e48 <HAL_TIM_Base_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002e1c:	f000 faf8 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4840      	ldr	r0, [pc, #256]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e2e:	f004 fc0b 	bl	8007648 <HAL_TIM_ConfigClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002e38:	f000 faea 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e3c:	483c      	ldr	r0, [pc, #240]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e3e:	f004 f88e 	bl	8006f5e <HAL_TIM_PWM_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002e48:	f000 fae2 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e50:	2300      	movs	r3, #0
 8002e52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e54:	2300      	movs	r3, #0
 8002e56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4834      	ldr	r0, [pc, #208]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e60:	f005 f98c 	bl	800817c <HAL_TIMEx_MasterConfigSynchronization>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002e6a:	f000 fad1 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002e6e:	2370      	movs	r3, #112	; 0x70
 8002e70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e76:	2300      	movs	r3, #0
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4619      	mov	r1, r3
 8002e92:	4827      	ldr	r0, [pc, #156]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002e94:	f004 fac0 	bl	8007418 <HAL_TIM_PWM_ConfigChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002e9e:	f000 fab7 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ea2:	2360      	movs	r3, #96	; 0x60
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002eaa:	2308      	movs	r3, #8
 8002eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	481e      	ldr	r0, [pc, #120]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002eb8:	f004 faae 	bl	8007418 <HAL_TIM_PWM_ConfigChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8002ec2:	f000 faa5 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4818      	ldr	r0, [pc, #96]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002ed0:	f004 faa2 	bl	8007418 <HAL_TIM_PWM_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002eda:	f000 fa99 	bl	8003410 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 8002eea:	234b      	movs	r3, #75	; 0x4b
 8002eec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ef2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	4619      	mov	r1, r3
 8002f12:	4807      	ldr	r0, [pc, #28]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002f14:	f005 f9c0 	bl	8008298 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM1_Init+0x17e>
  {
    Error_Handler();
 8002f1e:	f000 fa77 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f22:	4803      	ldr	r0, [pc, #12]	; (8002f30 <MX_TIM1_Init+0x18c>)
 8002f24:	f000 fbb8 	bl	8003698 <HAL_TIM_MspPostInit>

}
 8002f28:	bf00      	nop
 8002f2a:	3768      	adds	r7, #104	; 0x68
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200052e8 	.word	0x200052e8
 8002f34:	40010000 	.word	0x40010000

08002f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f3e:	f107 0320 	add.w	r3, r7, #32
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
 8002f4a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f4c:	f107 030c 	add.w	r3, r7, #12
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5c:	463b      	mov	r3, r7
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f66:	4b29      	ldr	r3, [pc, #164]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f74:	4b25      	ldr	r3, [pc, #148]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f7c:	2264      	movs	r2, #100	; 0x64
 8002f7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f8c:	481f      	ldr	r0, [pc, #124]	; (800300c <MX_TIM2_Init+0xd4>)
 8002f8e:	f003 ff5b 	bl	8006e48 <HAL_TIM_Base_Init>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8002f98:	f000 fa3a 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4818      	ldr	r0, [pc, #96]	; (800300c <MX_TIM2_Init+0xd4>)
 8002faa:	f004 fb4d 	bl	8007648 <HAL_TIM_ConfigClockSource>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002fb4:	f000 fa2c 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8002fb8:	2108      	movs	r1, #8
 8002fba:	4814      	ldr	r0, [pc, #80]	; (800300c <MX_TIM2_Init+0xd4>)
 8002fbc:	f004 f848 	bl	8007050 <HAL_TIM_OnePulse_Init>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002fc6:	f000 fa23 	bl	8003410 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002fca:	2306      	movs	r3, #6
 8002fcc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480c      	ldr	r0, [pc, #48]	; (800300c <MX_TIM2_Init+0xd4>)
 8002fda:	f004 fbef 	bl	80077bc <HAL_TIM_SlaveConfigSynchro>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002fe4:	f000 fa14 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fe8:	2320      	movs	r3, #32
 8002fea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4805      	ldr	r0, [pc, #20]	; (800300c <MX_TIM2_Init+0xd4>)
 8002ff6:	f005 f8c1 	bl	800817c <HAL_TIMEx_MasterConfigSynchronization>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003000:	f000 fa06 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003004:	bf00      	nop
 8003006:	3730      	adds	r7, #48	; 0x30
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	20005328 	.word	0x20005328

08003010 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08e      	sub	sp, #56	; 0x38
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	609a      	str	r2, [r3, #8]
 8003022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003024:	f107 031c 	add.w	r3, r7, #28
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003030:	463b      	mov	r3, r7
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	609a      	str	r2, [r3, #8]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	611a      	str	r2, [r3, #16]
 800303e:	615a      	str	r2, [r3, #20]
 8003040:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003044:	4a2c      	ldr	r2, [pc, #176]	; (80030f8 <MX_TIM4_Init+0xe8>)
 8003046:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <MX_TIM4_Init+0xe4>)
 800304a:	f245 4260 	movw	r2, #21600	; 0x5460
 800304e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003056:	4b27      	ldr	r3, [pc, #156]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800305c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305e:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003064:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003066:	2280      	movs	r2, #128	; 0x80
 8003068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800306a:	4822      	ldr	r0, [pc, #136]	; (80030f4 <MX_TIM4_Init+0xe4>)
 800306c:	f003 feec 	bl	8006e48 <HAL_TIM_Base_Init>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8003076:	f000 f9cb 	bl	8003410 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800307a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003084:	4619      	mov	r1, r3
 8003086:	481b      	ldr	r0, [pc, #108]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003088:	f004 fade 	bl	8007648 <HAL_TIM_ConfigClockSource>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8003092:	f000 f9bd 	bl	8003410 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8003096:	4817      	ldr	r0, [pc, #92]	; (80030f4 <MX_TIM4_Init+0xe4>)
 8003098:	f003 ff2c 	bl	8006ef4 <HAL_TIM_OC_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80030a2:	f000 f9b5 	bl	8003410 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030a6:	2320      	movs	r3, #32
 80030a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80030ae:	f107 031c 	add.w	r3, r7, #28
 80030b2:	4619      	mov	r1, r3
 80030b4:	480f      	ldr	r0, [pc, #60]	; (80030f4 <MX_TIM4_Init+0xe4>)
 80030b6:	f005 f861 	bl	800817c <HAL_TIMEx_MasterConfigSynchronization>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80030c0:	f000 f9a6 	bl	8003410 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030d4:	463b      	mov	r3, r7
 80030d6:	220c      	movs	r2, #12
 80030d8:	4619      	mov	r1, r3
 80030da:	4806      	ldr	r0, [pc, #24]	; (80030f4 <MX_TIM4_Init+0xe4>)
 80030dc:	f004 f91e 	bl	800731c <HAL_TIM_OC_ConfigChannel>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80030e6:	f000 f993 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030ea:	bf00      	nop
 80030ec:	3738      	adds	r7, #56	; 0x38
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20004d78 	.word	0x20004d78
 80030f8:	40000800 	.word	0x40000800

080030fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003102:	4a15      	ldr	r2, [pc, #84]	; (8003158 <MX_USART3_UART_Init+0x5c>)
 8003104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003106:	4b13      	ldr	r3, [pc, #76]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800310c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003110:	2200      	movs	r2, #0
 8003112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <MX_USART3_UART_Init+0x58>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003122:	220c      	movs	r2, #12
 8003124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_USART3_UART_Init+0x58>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_USART3_UART_Init+0x58>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800313e:	4805      	ldr	r0, [pc, #20]	; (8003154 <MX_USART3_UART_Init+0x58>)
 8003140:	f005 f96b 	bl	800841a <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800314a:	f000 f961 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20004db8 	.word	0x20004db8
 8003158:	40004800 	.word	0x40004800

0800315c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003166:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800316a:	2206      	movs	r2, #6
 800316c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800316e:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003176:	2202      	movs	r2, #2
 8003178:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317c:	2200      	movs	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003182:	2200      	movs	r2, #0
 8003184:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003188:	2200      	movs	r2, #0
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003194:	2200      	movs	r2, #0
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a0:	f001 ff6b 	bl	800507a <HAL_PCD_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031aa:	f000 f931 	bl	8003410 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20004e38 	.word	0x20004e38

080031b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <MX_DMA_Init+0x38>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <MX_DMA_Init+0x38>)
 80031c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c8:	6313      	str	r3, [r2, #48]	; 0x30
 80031ca:	4b09      	ldr	r3, [pc, #36]	; (80031f0 <MX_DMA_Init+0x38>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2105      	movs	r1, #5
 80031da:	2038      	movs	r0, #56	; 0x38
 80031dc:	f001 f9e0 	bl	80045a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80031e0:	2038      	movs	r0, #56	; 0x38
 80031e2:	f001 f9f9 	bl	80045d8 <HAL_NVIC_EnableIRQ>

}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08c      	sub	sp, #48	; 0x30
 80031f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	609a      	str	r2, [r3, #8]
 8003206:	60da      	str	r2, [r3, #12]
 8003208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	4b4f      	ldr	r3, [pc, #316]	; (8003348 <MX_GPIO_Init+0x154>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a4e      	ldr	r2, [pc, #312]	; (8003348 <MX_GPIO_Init+0x154>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b4c      	ldr	r3, [pc, #304]	; (8003348 <MX_GPIO_Init+0x154>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003222:	4b49      	ldr	r3, [pc, #292]	; (8003348 <MX_GPIO_Init+0x154>)
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4a48      	ldr	r2, [pc, #288]	; (8003348 <MX_GPIO_Init+0x154>)
 8003228:	f043 0320 	orr.w	r3, r3, #32
 800322c:	6313      	str	r3, [r2, #48]	; 0x30
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <MX_GPIO_Init+0x154>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800323a:	4b43      	ldr	r3, [pc, #268]	; (8003348 <MX_GPIO_Init+0x154>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a42      	ldr	r2, [pc, #264]	; (8003348 <MX_GPIO_Init+0x154>)
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b40      	ldr	r3, [pc, #256]	; (8003348 <MX_GPIO_Init+0x154>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	4b3d      	ldr	r3, [pc, #244]	; (8003348 <MX_GPIO_Init+0x154>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a3c      	ldr	r2, [pc, #240]	; (8003348 <MX_GPIO_Init+0x154>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <MX_GPIO_Init+0x154>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <MX_GPIO_Init+0x154>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a36      	ldr	r2, [pc, #216]	; (8003348 <MX_GPIO_Init+0x154>)
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b34      	ldr	r3, [pc, #208]	; (8003348 <MX_GPIO_Init+0x154>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003282:	4b31      	ldr	r3, [pc, #196]	; (8003348 <MX_GPIO_Init+0x154>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <MX_GPIO_Init+0x154>)
 8003288:	f043 0308 	orr.w	r3, r3, #8
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <MX_GPIO_Init+0x154>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <MX_GPIO_Init+0x154>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <MX_GPIO_Init+0x154>)
 80032a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <MX_GPIO_Init+0x154>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	603b      	str	r3, [r7, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2110      	movs	r1, #16
 80032b6:	4825      	ldr	r0, [pc, #148]	; (800334c <MX_GPIO_Init+0x158>)
 80032b8:	f001 feac 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	4823      	ldr	r0, [pc, #140]	; (8003350 <MX_GPIO_Init+0x15c>)
 80032c2:	f001 fea7 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	4822      	ldr	r0, [pc, #136]	; (8003354 <MX_GPIO_Init+0x160>)
 80032cc:	f001 fea2 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80032d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <MX_GPIO_Init+0x164>)
 80032d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80032de:	f107 031c 	add.w	r3, r7, #28
 80032e2:	4619      	mov	r1, r3
 80032e4:	481d      	ldr	r0, [pc, #116]	; (800335c <MX_GPIO_Init+0x168>)
 80032e6:	f001 fcfb 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 80032ea:	2310      	movs	r3, #16
 80032ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ee:	2301      	movs	r3, #1
 80032f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f6:	2302      	movs	r3, #2
 80032f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4619      	mov	r1, r3
 8003300:	4812      	ldr	r0, [pc, #72]	; (800334c <MX_GPIO_Init+0x158>)
 8003302:	f001 fced 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003306:	2340      	movs	r3, #64	; 0x40
 8003308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330a:	2301      	movs	r3, #1
 800330c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003312:	2300      	movs	r3, #0
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	4619      	mov	r1, r3
 800331c:	480c      	ldr	r0, [pc, #48]	; (8003350 <MX_GPIO_Init+0x15c>)
 800331e:	f001 fcdf 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003326:	2301      	movs	r3, #1
 8003328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	4619      	mov	r1, r3
 8003338:	4806      	ldr	r0, [pc, #24]	; (8003354 <MX_GPIO_Init+0x160>)
 800333a:	f001 fcd1 	bl	8004ce0 <HAL_GPIO_Init>

}
 800333e:	bf00      	nop
 8003340:	3730      	adds	r7, #48	; 0x30
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	40021800 	.word	0x40021800
 8003354:	40020400 	.word	0x40020400
 8003358:	10110000 	.word	0x10110000
 800335c:	40020800 	.word	0x40020800

08003360 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <__io_putchar+0x24>)
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	1d39      	adds	r1, r7, #4
 800336e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003372:	2201      	movs	r2, #1
 8003374:	f005 f89f 	bl	80084b6 <HAL_UART_Transmit>

  return ch;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20005368 	.word	0x20005368

08003388 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
//  printf("hay\r\n");
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
	if (motor_control_task_handle != NULL) {
 8003394:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_ADC_ConvCpltCallback+0x44>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d012      	beq.n	80033c2 <HAL_ADC_ConvCpltCallback+0x3a>
		vTaskNotifyGiveFromISR(motor_control_task_handle, &xHigherPriorityTaskWoken);
 800339c:	4b0b      	ldr	r3, [pc, #44]	; (80033cc <HAL_ADC_ConvCpltCallback+0x44>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f107 020c 	add.w	r2, r7, #12
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f007 fee8 	bl	800b17c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <HAL_ADC_ConvCpltCallback+0x3a>
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_ADC_ConvCpltCallback+0x48>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
	}
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000204 	.word	0x20000204
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  main_run();
 80033dc:	f7fe fb14 	bl	8001a08 <main_run>
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  osDelay(1000);
 80033e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033e4:	f006 f8ee 	bl	80095c4 <osDelay>
 80033e8:	e7fa      	b.n	80033e0 <StartDefaultTask+0xc>
	...

080033ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80033fe:	f000 fbc9 	bl	8003b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40001000 	.word	0x40001000

08003410 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003414:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003416:	e7fe      	b.n	8003416 <Error_Handler+0x6>

08003418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_MspInit+0x4c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_MspInit+0x4c>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_MspInit+0x4c>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	607b      	str	r3, [r7, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003436:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_MspInit+0x4c>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_MspInit+0x4c>)
 800343c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003440:	6453      	str	r3, [r2, #68]	; 0x44
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_MspInit+0x4c>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	210f      	movs	r1, #15
 8003452:	f06f 0001 	mvn.w	r0, #1
 8003456:	f001 f8a3 	bl	80045a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800

08003468 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a39      	ldr	r2, [pc, #228]	; (800356c <HAL_ADC_MspInit+0x104>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d16c      	bne.n	8003564 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800348a:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_ADC_MspInit+0x108>)
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	4a38      	ldr	r2, [pc, #224]	; (8003570 <HAL_ADC_MspInit+0x108>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003494:	6453      	str	r3, [r2, #68]	; 0x44
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_ADC_MspInit+0x108>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	4b33      	ldr	r3, [pc, #204]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	4a32      	ldr	r2, [pc, #200]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6313      	str	r3, [r2, #48]	; 0x30
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ba:	4b2d      	ldr	r3, [pc, #180]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	4a2c      	ldr	r2, [pc, #176]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6313      	str	r3, [r2, #48]	; 0x30
 80034c6:	4b2a      	ldr	r3, [pc, #168]	; (8003570 <HAL_ADC_MspInit+0x108>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = CURR_FB_U_Pin|CURR_FB_V_Pin;
 80034d2:	2382      	movs	r3, #130	; 0x82
 80034d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034d6:	2303      	movs	r3, #3
 80034d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0314 	add.w	r3, r7, #20
 80034e2:	4619      	mov	r1, r3
 80034e4:	4823      	ldr	r0, [pc, #140]	; (8003574 <HAL_ADC_MspInit+0x10c>)
 80034e6:	f001 fbfb 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_W_Pin;
 80034ea:	2301      	movs	r3, #1
 80034ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ee:	2303      	movs	r3, #3
 80034f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURR_FB_W_GPIO_Port, &GPIO_InitStruct);
 80034f6:	f107 0314 	add.w	r3, r7, #20
 80034fa:	4619      	mov	r1, r3
 80034fc:	481e      	ldr	r0, [pc, #120]	; (8003578 <HAL_ADC_MspInit+0x110>)
 80034fe:	f001 fbef 	bl	8004ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003502:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <HAL_ADC_MspInit+0x118>)
 8003506:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003508:	4b1c      	ldr	r3, [pc, #112]	; (800357c <HAL_ADC_MspInit+0x114>)
 800350a:	2200      	movs	r2, #0
 800350c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_ADC_MspInit+0x114>)
 800351c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003520:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003522:	4b16      	ldr	r3, [pc, #88]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003528:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_ADC_MspInit+0x114>)
 800352c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003530:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003538:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800353a:	4b10      	ldr	r3, [pc, #64]	; (800357c <HAL_ADC_MspInit+0x114>)
 800353c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003540:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003542:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003544:	2200      	movs	r2, #0
 8003546:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003548:	480c      	ldr	r0, [pc, #48]	; (800357c <HAL_ADC_MspInit+0x114>)
 800354a:	f001 f853 	bl	80045f4 <HAL_DMA_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8003554:	f7ff ff5c 	bl	8003410 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a08      	ldr	r2, [pc, #32]	; (800357c <HAL_ADC_MspInit+0x114>)
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_ADC_MspInit+0x114>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003564:	bf00      	nop
 8003566:	3728      	adds	r7, #40	; 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40012000 	.word	0x40012000
 8003570:	40023800 	.word	0x40023800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	20005288 	.word	0x20005288
 8003580:	40026410 	.word	0x40026410

08003584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
 800359a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a17      	ldr	r2, [pc, #92]	; (8003600 <HAL_SPI_MspInit+0x7c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d128      	bne.n	80035f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80035a6:	4b17      	ldr	r3, [pc, #92]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <HAL_SPI_MspInit+0x80>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 80035d6:	f44f 6318 	mov.w	r3, #2432	; 0x980
 80035da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035dc:	2302      	movs	r3, #2
 80035de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e4:	2303      	movs	r3, #3
 80035e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80035e8:	2305      	movs	r3, #5
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	4619      	mov	r1, r3
 80035f2:	4805      	ldr	r0, [pc, #20]	; (8003608 <HAL_SPI_MspInit+0x84>)
 80035f4:	f001 fb74 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80035f8:	bf00      	nop
 80035fa:	3728      	adds	r7, #40	; 0x28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40015000 	.word	0x40015000
 8003604:	40023800 	.word	0x40023800
 8003608:	40021400 	.word	0x40021400

0800360c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_TIM_Base_MspInit+0x80>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d10c      	bne.n	8003638 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800361e:	4b1c      	ldr	r3, [pc, #112]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	4a1b      	ldr	r2, [pc, #108]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6453      	str	r3, [r2, #68]	; 0x44
 800362a:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003636:	e022      	b.n	800367e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d10c      	bne.n	800365c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
}
 800365a:	e010      	b.n	800367e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <HAL_TIM_Base_MspInit+0x88>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d10b      	bne.n	800367e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a09      	ldr	r2, [pc, #36]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_TIM_Base_MspInit+0x84>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	68fb      	ldr	r3, [r7, #12]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40023800 	.word	0x40023800
 8003694:	40000800 	.word	0x40000800

08003698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	f107 0314 	add.w	r3, r7, #20
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a20      	ldr	r2, [pc, #128]	; (8003738 <HAL_TIM_MspPostInit+0xa0>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d139      	bne.n	800372e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	4a1f      	ldr	r2, [pc, #124]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	6313      	str	r3, [r2, #48]	; 0x30
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_TIM_MspPostInit+0xa4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin|ENW_Pin;
 80036ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f8:	2300      	movs	r3, #0
 80036fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036fc:	2301      	movs	r3, #1
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	4619      	mov	r1, r3
 8003706:	480e      	ldr	r0, [pc, #56]	; (8003740 <HAL_TIM_MspPostInit+0xa8>)
 8003708:	f001 faea 	bl	8004ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 800370c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003712:	2302      	movs	r3, #2
 8003714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800371e:	2301      	movs	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	4619      	mov	r1, r3
 8003728:	4806      	ldr	r0, [pc, #24]	; (8003744 <HAL_TIM_MspPostInit+0xac>)
 800372a:	f001 fad9 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800372e:	bf00      	nop
 8003730:	3728      	adds	r7, #40	; 0x28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40023800 	.word	0x40023800
 8003740:	40020400 	.word	0x40020400
 8003744:	40020000 	.word	0x40020000

08003748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <HAL_UART_MspInit+0x7c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d128      	bne.n	80037bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <HAL_UART_MspInit+0x80>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_UART_MspInit+0x80>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_UART_MspInit+0x80>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <HAL_UART_MspInit+0x80>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a10      	ldr	r2, [pc, #64]	; (80037c8 <HAL_UART_MspInit+0x80>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <HAL_UART_MspInit+0x80>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800379a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800379e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a8:	2303      	movs	r3, #3
 80037aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037ac:	2307      	movs	r3, #7
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4619      	mov	r1, r3
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <HAL_UART_MspInit+0x84>)
 80037b8:	f001 fa92 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037bc:	bf00      	nop
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40004800 	.word	0x40004800
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40020c00 	.word	0x40020c00

080037d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08a      	sub	sp, #40	; 0x28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 0314 	add.w	r3, r7, #20
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f0:	d134      	bne.n	800385c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_PCD_MspInit+0x94>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_PCD_MspInit+0x94>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b19      	ldr	r3, [pc, #100]	; (8003864 <HAL_PCD_MspInit+0x94>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800380a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800380e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003810:	2302      	movs	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003818:	2303      	movs	r3, #3
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800381c:	230a      	movs	r3, #10
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4619      	mov	r1, r3
 8003826:	4810      	ldr	r0, [pc, #64]	; (8003868 <HAL_PCD_MspInit+0x98>)
 8003828:	f001 fa5a 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800382c:	4b0d      	ldr	r3, [pc, #52]	; (8003864 <HAL_PCD_MspInit+0x94>)
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <HAL_PCD_MspInit+0x94>)
 8003832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003836:	6353      	str	r3, [r2, #52]	; 0x34
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_PCD_MspInit+0x94>)
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <HAL_PCD_MspInit+0x94>)
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	4a06      	ldr	r2, [pc, #24]	; (8003864 <HAL_PCD_MspInit+0x94>)
 800384a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384e:	6453      	str	r3, [r2, #68]	; 0x44
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_PCD_MspInit+0x94>)
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000

0800386c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08c      	sub	sp, #48	; 0x30
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	2036      	movs	r0, #54	; 0x36
 8003882:	f000 fe8d 	bl	80045a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003886:	2036      	movs	r0, #54	; 0x36
 8003888:	f000 fea6 	bl	80045d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <HAL_InitTick+0xa0>)
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_InitTick+0xa0>)
 8003892:	f043 0310 	orr.w	r3, r3, #16
 8003896:	6413      	str	r3, [r2, #64]	; 0x40
 8003898:	4b1c      	ldr	r3, [pc, #112]	; (800390c <HAL_InitTick+0xa0>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038a4:	f107 0210 	add.w	r2, r7, #16
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fa28 	bl	8005d04 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038b4:	f002 f9fe 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80038b8:	4603      	mov	r3, r0
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <HAL_InitTick+0xa4>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0c9b      	lsrs	r3, r3, #18
 80038c8:	3b01      	subs	r3, #1
 80038ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80038cc:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_InitTick+0xa8>)
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_InitTick+0xac>)
 80038d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_InitTick+0xa8>)
 80038d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_InitTick+0xa8>)
 80038dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_InitTick+0xa8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_InitTick+0xa8>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80038ec:	4809      	ldr	r0, [pc, #36]	; (8003914 <HAL_InitTick+0xa8>)
 80038ee:	f003 faab 	bl	8006e48 <HAL_TIM_Base_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80038f8:	4806      	ldr	r0, [pc, #24]	; (8003914 <HAL_InitTick+0xa8>)
 80038fa:	f003 fad1 	bl	8006ea0 <HAL_TIM_Base_Start_IT>
 80038fe:	4603      	mov	r3, r0
 8003900:	e000      	b.n	8003904 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
}
 8003904:	4618      	mov	r0, r3
 8003906:	3730      	adds	r7, #48	; 0x30
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	431bde83 	.word	0x431bde83
 8003914:	2000536c 	.word	0x2000536c
 8003918:	40001000 	.word	0x40001000

0800391c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003920:	e7fe      	b.n	8003920 <NMI_Handler+0x4>

08003922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003926:	e7fe      	b.n	8003926 <HardFault_Handler+0x4>

08003928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800392c:	e7fe      	b.n	800392c <MemManage_Handler+0x4>

0800392e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800392e:	b480      	push	{r7}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003932:	e7fe      	b.n	8003932 <BusFault_Handler+0x4>

08003934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <UsageFault_Handler+0x4>

0800393a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800393e:	bf00      	nop
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <TIM6_DAC_IRQHandler+0x10>)
 800394e:	f003 fbc5 	bl	80070dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	2000536c 	.word	0x2000536c

0800395c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <DMA2_Stream0_IRQHandler+0x10>)
 8003962:	f000 ff55 	bl	8004810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20005288 	.word	0x20005288

08003970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
	return 1;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <_kill>:

int _kill(int pid, int sig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800398a:	f008 fcf1 	bl	800c370 <__errno>
 800398e:	4602      	mov	r2, r0
 8003990:	2316      	movs	r3, #22
 8003992:	6013      	str	r3, [r2, #0]
	return -1;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <_exit>:

void _exit (int status)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff ffe7 	bl	8003980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039b2:	e7fe      	b.n	80039b2 <_exit+0x12>

080039b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	e00a      	b.n	80039dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039c6:	f3af 8000 	nop.w
 80039ca:	4601      	mov	r1, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	60ba      	str	r2, [r7, #8]
 80039d2:	b2ca      	uxtb	r2, r1
 80039d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbf0      	blt.n	80039c6 <_read+0x12>
	}

return len;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e009      	b.n	8003a14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	60ba      	str	r2, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fca9 	bl	8003360 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	3301      	adds	r3, #1
 8003a12:	617b      	str	r3, [r7, #20]
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	dbf1      	blt.n	8003a00 <_write+0x12>
	}
	return len;
 8003a1c:	687b      	ldr	r3, [r7, #4]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <_close>:

int _close(int file)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
	return -1;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a4e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <_isatty>:

int _isatty(int file)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	return 1;
 8003a66:	2301      	movs	r3, #1
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <_sbrk+0x5c>)
 8003a9a:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <_sbrk+0x60>)
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <_sbrk+0x64>)
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <_sbrk+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <_sbrk+0x64>)
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d207      	bcs.n	8003ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ac0:	f008 fc56 	bl	800c370 <__errno>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ace:	e009      	b.n	8003ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ad0:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <_sbrk+0x64>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ad6:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <_sbrk+0x64>)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4413      	add	r3, r2
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <_sbrk+0x64>)
 8003ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	20040000 	.word	0x20040000
 8003af0:	00000400 	.word	0x00000400
 8003af4:	200003f8 	.word	0x200003f8
 8003af8:	200053f8 	.word	0x200053f8

08003afc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <SystemInit+0x28>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	4a07      	ldr	r2, [pc, #28]	; (8003b24 <SystemInit+0x28>)
 8003b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <SystemInit+0x28>)
 8003b12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b16:	609a      	str	r2, [r3, #8]
#endif
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b2e:	e003      	b.n	8003b38 <LoopCopyDataInit>

08003b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b36:	3104      	adds	r1, #4

08003b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b38:	480b      	ldr	r0, [pc, #44]	; (8003b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b40:	d3f6      	bcc.n	8003b30 <CopyDataInit>
  ldr  r2, =_sbss
 8003b42:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b44:	e002      	b.n	8003b4c <LoopFillZerobss>

08003b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b48:	f842 3b04 	str.w	r3, [r2], #4

08003b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b4c:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b50:	d3f9      	bcc.n	8003b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b52:	f7ff ffd3 	bl	8003afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b56:	f008 fc11 	bl	800c37c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b5a:	f7fe ff87 	bl	8002a6c <main>
  bx  lr    
 8003b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b60:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8003b64:	0800fcf8 	.word	0x0800fcf8
  ldr  r0, =_sdata
 8003b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b6c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003b70:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003b74:	200053f4 	.word	0x200053f4

08003b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b78:	e7fe      	b.n	8003b78 <ADC_IRQHandler>

08003b7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b7e:	2003      	movs	r0, #3
 8003b80:	f000 fd03 	bl	800458a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7ff fe71 	bl	800386c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003b8a:	f7ff fc45 	bl	8003418 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <HAL_IncTick+0x20>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_IncTick+0x24>)
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000008 	.word	0x20000008
 8003bb8:	200053ac 	.word	0x200053ac

08003bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <HAL_GetTick+0x14>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	200053ac 	.word	0x200053ac

08003bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bdc:	f7ff ffee 	bl	8003bbc <HAL_GetTick>
 8003be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bec:	d005      	beq.n	8003bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_Delay+0x40>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003bfa:	bf00      	nop
 8003bfc:	f7ff ffde 	bl	8003bbc <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d8f7      	bhi.n	8003bfc <HAL_Delay+0x28>
  {
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000008 	.word	0x20000008

08003c18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e031      	b.n	8003c92 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fc16 	bl	8003468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_ADC_Init+0x84>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fa66 	bl	8004138 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f023 0303 	bic.w	r3, r3, #3
 8003c7a:	f043 0201 	orr.w	r2, r3, #1
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
 8003c82:	e001      	b.n	8003c88 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	ffffeefd 	.word	0xffffeefd

08003ca0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_Start_DMA+0x1e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0c7      	b.n	8003e4e <HAL_ADC_Start_DMA+0x1ae>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d018      	beq.n	8003d06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003ce4:	4b5c      	ldr	r3, [pc, #368]	; (8003e58 <HAL_ADC_Start_DMA+0x1b8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5c      	ldr	r2, [pc, #368]	; (8003e5c <HAL_ADC_Start_DMA+0x1bc>)
 8003cea:	fba2 2303 	umull	r2, r3, r2, r3
 8003cee:	0c9a      	lsrs	r2, r3, #18
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4413      	add	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003cf8:	e002      	b.n	8003d00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f9      	bne.n	8003cfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 809b 	bne.w	8003e4c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d1a:	4b51      	ldr	r3, [pc, #324]	; (8003e60 <HAL_ADC_Start_DMA+0x1c0>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d106      	bne.n	8003d60 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	f023 0206 	bic.w	r2, r3, #6
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d5e:	e002      	b.n	8003d66 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	4a3c      	ldr	r2, [pc, #240]	; (8003e64 <HAL_ADC_Start_DMA+0x1c4>)
 8003d74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	4a3b      	ldr	r2, [pc, #236]	; (8003e68 <HAL_ADC_Start_DMA+0x1c8>)
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <HAL_ADC_Start_DMA+0x1cc>)
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	334c      	adds	r3, #76	; 0x4c
 8003dba:	4619      	mov	r1, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f000 fcc6 	bl	8004750 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_ADC_Start_DMA+0x1d0>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d136      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dec:	609a      	str	r2, [r3, #8]
 8003dee:	e02d      	b.n	8003e4c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1f      	ldr	r2, [pc, #124]	; (8003e74 <HAL_ADC_Start_DMA+0x1d4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <HAL_ADC_Start_DMA+0x178>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e16:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <HAL_ADC_Start_DMA+0x1d0>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0310 	and.w	r3, r3, #16
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d113      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HAL_ADC_Start_DMA+0x1d8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10e      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x1ac>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e4a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	431bde83 	.word	0x431bde83
 8003e60:	fffff8fe 	.word	0xfffff8fe
 8003e64:	0800432d 	.word	0x0800432d
 8003e68:	080043e7 	.word	0x080043e7
 8003e6c:	08004403 	.word	0x08004403
 8003e70:	40012300 	.word	0x40012300
 8003e74:	40012000 	.word	0x40012000
 8003e78:	40012200 	.word	0x40012200

08003e7c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1c>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e12a      	b.n	8004116 <HAL_ADC_ConfigChannel+0x272>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b09      	cmp	r3, #9
 8003ece:	d93a      	bls.n	8003f46 <HAL_ADC_ConfigChannel+0xa2>
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed8:	d035      	beq.n	8003f46 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68d9      	ldr	r1, [r3, #12]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	3b1e      	subs	r3, #30
 8003ef0:	2207      	movs	r2, #7
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	400a      	ands	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a87      	ldr	r2, [pc, #540]	; (8004124 <HAL_ADC_ConfigChannel+0x280>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d10a      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68d9      	ldr	r1, [r3, #12]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	061a      	lsls	r2, r3, #24
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f1e:	e035      	b.n	8003f8c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	4618      	mov	r0, r3
 8003f32:	4603      	mov	r3, r0
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4403      	add	r3, r0
 8003f38:	3b1e      	subs	r3, #30
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f44:	e022      	b.n	8003f8c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43da      	mvns	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	400a      	ands	r2, r1
 8003f68:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6919      	ldr	r1, [r3, #16]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4403      	add	r3, r0
 8003f82:	409a      	lsls	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d824      	bhi.n	8003fde <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3b05      	subs	r3, #5
 8003fa6:	221f      	movs	r2, #31
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43da      	mvns	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	3b05      	subs	r3, #5
 8003fd0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
 8003fdc:	e04c      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b0c      	cmp	r3, #12
 8003fe4:	d824      	bhi.n	8004030 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3b23      	subs	r3, #35	; 0x23
 8003ff8:	221f      	movs	r2, #31
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43da      	mvns	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	400a      	ands	r2, r1
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	4618      	mov	r0, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	3b23      	subs	r3, #35	; 0x23
 8004022:	fa00 f203 	lsl.w	r2, r0, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
 800402e:	e023      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	3b41      	subs	r3, #65	; 0x41
 8004042:	221f      	movs	r2, #31
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43da      	mvns	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	400a      	ands	r2, r1
 8004050:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	4618      	mov	r0, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	3b41      	subs	r3, #65	; 0x41
 800406c:	fa00 f203 	lsl.w	r2, r0, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2a      	ldr	r2, [pc, #168]	; (8004128 <HAL_ADC_ConfigChannel+0x284>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10a      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x1f4>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800408a:	d105      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800408c:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 8004092:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004096:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <HAL_ADC_ConfigChannel+0x284>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d109      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x212>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b12      	cmp	r3, #18
 80040a8:	d105      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040aa:	4b20      	ldr	r3, [pc, #128]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 80040b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1b      	ldr	r2, [pc, #108]	; (8004128 <HAL_ADC_ConfigChannel+0x284>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d125      	bne.n	800410c <HAL_ADC_ConfigChannel+0x268>
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_ADC_ConfigChannel+0x280>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <HAL_ADC_ConfigChannel+0x22e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b11      	cmp	r3, #17
 80040d0:	d11c      	bne.n	800410c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80040d2:	4b16      	ldr	r3, [pc, #88]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_ADC_ConfigChannel+0x288>)
 80040d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040dc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <HAL_ADC_ConfigChannel+0x280>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_ADC_ConfigChannel+0x28c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_ADC_ConfigChannel+0x290>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	0c9a      	lsrs	r2, r3, #18
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040fe:	e002      	b.n	8004106 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3b01      	subs	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f9      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	10000012 	.word	0x10000012
 8004128:	40012000 	.word	0x40012000
 800412c:	40012300 	.word	0x40012300
 8004130:	20000000 	.word	0x20000000
 8004134:	431bde83 	.word	0x431bde83

08004138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004140:	4b78      	ldr	r3, [pc, #480]	; (8004324 <ADC_Init+0x1ec>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4a77      	ldr	r2, [pc, #476]	; (8004324 <ADC_Init+0x1ec>)
 8004146:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800414a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800414c:	4b75      	ldr	r3, [pc, #468]	; (8004324 <ADC_Init+0x1ec>)
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	4973      	ldr	r1, [pc, #460]	; (8004324 <ADC_Init+0x1ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800418c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	4a58      	ldr	r2, [pc, #352]	; (8004328 <ADC_Init+0x1f0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	e00f      	b.n	8004232 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0202 	bic.w	r2, r2, #2
 8004240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	005a      	lsls	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01b      	beq.n	8004298 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800427e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	3b01      	subs	r3, #1
 800428c:	035a      	lsls	r2, r3, #13
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e007      	b.n	80042a8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	051a      	lsls	r2, r3, #20
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ea:	025a      	lsls	r2, r3, #9
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	029a      	lsls	r2, r3, #10
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40012300 	.word	0x40012300
 8004328:	0f000001 	.word	0x0f000001

0800432c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004338:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13c      	bne.n	80043c0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d12b      	bne.n	80043b8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004364:	2b00      	cmp	r3, #0
 8004366:	d127      	bne.n	80043b8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004380:	2b00      	cmp	r3, #0
 8004382:	d119      	bne.n	80043b8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0220 	bic.w	r2, r2, #32
 8004392:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0201 	orr.w	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7fe ffe5 	bl	8003388 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043be:	e00e      	b.n	80043de <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f7ff fd5f 	bl	8003e90 <HAL_ADC_ErrorCallback>
}
 80043d2:	e004      	b.n	80043de <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	4798      	blx	r3
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fd41 	bl	8003e7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2240      	movs	r2, #64	; 0x40
 8004414:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f043 0204 	orr.w	r2, r3, #4
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f7ff fd34 	bl	8003e90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <__NVIC_SetPriorityGrouping+0x40>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800444c:	4013      	ands	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004458:	4b06      	ldr	r3, [pc, #24]	; (8004474 <__NVIC_SetPriorityGrouping+0x44>)
 800445a:	4313      	orrs	r3, r2
 800445c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800445e:	4a04      	ldr	r2, [pc, #16]	; (8004470 <__NVIC_SetPriorityGrouping+0x40>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	60d3      	str	r3, [r2, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00
 8004474:	05fa0000 	.word	0x05fa0000

08004478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <__NVIC_GetPriorityGrouping+0x18>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	0a1b      	lsrs	r3, r3, #8
 8004482:	f003 0307 	and.w	r3, r3, #7
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	db0b      	blt.n	80044be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	f003 021f 	and.w	r2, r3, #31
 80044ac:	4907      	ldr	r1, [pc, #28]	; (80044cc <__NVIC_EnableIRQ+0x38>)
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	2001      	movs	r0, #1
 80044b6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000e100 	.word	0xe000e100

080044d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	4603      	mov	r3, r0
 80044d8:	6039      	str	r1, [r7, #0]
 80044da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db0a      	blt.n	80044fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	490c      	ldr	r1, [pc, #48]	; (800451c <__NVIC_SetPriority+0x4c>)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	0112      	lsls	r2, r2, #4
 80044f0:	b2d2      	uxtb	r2, r2
 80044f2:	440b      	add	r3, r1
 80044f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f8:	e00a      	b.n	8004510 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	4908      	ldr	r1, [pc, #32]	; (8004520 <__NVIC_SetPriority+0x50>)
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	3b04      	subs	r3, #4
 8004508:	0112      	lsls	r2, r2, #4
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	440b      	add	r3, r1
 800450e:	761a      	strb	r2, [r3, #24]
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000e100 	.word	0xe000e100
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004524:	b480      	push	{r7}
 8004526:	b089      	sub	sp, #36	; 0x24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f1c3 0307 	rsb	r3, r3, #7
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf28      	it	cs
 8004542:	2304      	movcs	r3, #4
 8004544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3304      	adds	r3, #4
 800454a:	2b06      	cmp	r3, #6
 800454c:	d902      	bls.n	8004554 <NVIC_EncodePriority+0x30>
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3b03      	subs	r3, #3
 8004552:	e000      	b.n	8004556 <NVIC_EncodePriority+0x32>
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	43da      	mvns	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	401a      	ands	r2, r3
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800456c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	fa01 f303 	lsl.w	r3, r1, r3
 8004576:	43d9      	mvns	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800457c:	4313      	orrs	r3, r2
         );
}
 800457e:	4618      	mov	r0, r3
 8004580:	3724      	adds	r7, #36	; 0x24
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ff4c 	bl	8004430 <__NVIC_SetPriorityGrouping>
}
 8004598:	bf00      	nop
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045b2:	f7ff ff61 	bl	8004478 <__NVIC_GetPriorityGrouping>
 80045b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	6978      	ldr	r0, [r7, #20]
 80045be:	f7ff ffb1 	bl	8004524 <NVIC_EncodePriority>
 80045c2:	4602      	mov	r2, r0
 80045c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff ff80 	bl	80044d0 <__NVIC_SetPriority>
}
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff ff54 	bl	8004494 <__NVIC_EnableIRQ>
}
 80045ec:	bf00      	nop
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004600:	f7ff fadc 	bl	8003bbc <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e099      	b.n	8004744 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0201 	bic.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004630:	e00f      	b.n	8004652 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004632:	f7ff fac3 	bl	8003bbc <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b05      	cmp	r3, #5
 800463e:	d908      	bls.n	8004652 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2203      	movs	r2, #3
 800464a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e078      	b.n	8004744 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e8      	bne.n	8004632 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4b38      	ldr	r3, [pc, #224]	; (800474c <HAL_DMA_Init+0x158>)
 800466c:	4013      	ands	r3, r2
 800466e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800467e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004696:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d107      	bne.n	80046bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	4313      	orrs	r3, r2
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0307 	bic.w	r3, r3, #7
 80046d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d117      	bne.n	8004716 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fa77 	bl	8004bec <DMA_CheckFifoParam>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004712:	2301      	movs	r3, #1
 8004714:	e016      	b.n	8004744 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fa2e 	bl	8004b80 <DMA_CalcBaseAndBitshift>
 8004724:	4603      	mov	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	223f      	movs	r2, #63	; 0x3f
 800472e:	409a      	lsls	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	e010803f 	.word	0xe010803f

08004750 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004766:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_DMA_Start_IT+0x26>
 8004772:	2302      	movs	r3, #2
 8004774:	e048      	b.n	8004808 <HAL_DMA_Start_IT+0xb8>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d137      	bne.n	80047fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f9c0 	bl	8004b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	223f      	movs	r2, #63	; 0x3f
 80047aa:	409a      	lsls	r2, r3
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0216 	orr.w	r2, r2, #22
 80047be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0208 	orr.w	r2, r2, #8
 80047e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e005      	b.n	8004806 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004802:	2302      	movs	r3, #2
 8004804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800481c:	4b92      	ldr	r3, [pc, #584]	; (8004a68 <HAL_DMA_IRQHandler+0x258>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a92      	ldr	r2, [pc, #584]	; (8004a6c <HAL_DMA_IRQHandler+0x25c>)
 8004822:	fba2 2303 	umull	r2, r3, r2, r3
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483a:	2208      	movs	r2, #8
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01a      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0204 	bic.w	r2, r2, #4
 8004862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2208      	movs	r2, #8
 800486a:	409a      	lsls	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	2201      	movs	r2, #1
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2201      	movs	r2, #1
 80048a0:	409a      	lsls	r2, r3
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f043 0202 	orr.w	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b6:	2204      	movs	r2, #4
 80048b8:	409a      	lsls	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2204      	movs	r2, #4
 80048d6:	409a      	lsls	r2, r3
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f043 0204 	orr.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	2210      	movs	r2, #16
 80048ee:	409a      	lsls	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d043      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d03c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	2210      	movs	r2, #16
 800490c:	409a      	lsls	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d018      	beq.n	8004952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d024      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e01f      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01b      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4798      	blx	r3
 8004950:	e016      	b.n	8004980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0208 	bic.w	r2, r2, #8
 800496e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004984:	2220      	movs	r2, #32
 8004986:	409a      	lsls	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 808e 	beq.w	8004aae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8086 	beq.w	8004aae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a6:	2220      	movs	r2, #32
 80049a8:	409a      	lsls	r2, r3
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b05      	cmp	r3, #5
 80049b8:	d136      	bne.n	8004a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0216 	bic.w	r2, r2, #22
 80049c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695a      	ldr	r2, [r3, #20]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_DMA_IRQHandler+0x1da>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d007      	beq.n	80049fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0208 	bic.w	r2, r2, #8
 80049f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fe:	223f      	movs	r2, #63	; 0x3f
 8004a00:	409a      	lsls	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d07d      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	4798      	blx	r3
        }
        return;
 8004a26:	e078      	b.n	8004b1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01c      	beq.n	8004a70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d108      	bne.n	8004a56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d030      	beq.n	8004aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e02b      	b.n	8004aae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d027      	beq.n	8004aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4798      	blx	r3
 8004a66:	e022      	b.n	8004aae <HAL_DMA_IRQHandler+0x29e>
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f022 0210 	bic.w	r2, r2, #16
 8004a8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d032      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d022      	beq.n	8004b08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d307      	bcc.n	8004af6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1f2      	bne.n	8004ada <HAL_DMA_IRQHandler+0x2ca>
 8004af4:	e000      	b.n	8004af8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004af6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
 8004b18:	e000      	b.n	8004b1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b1a:	bf00      	nop
    }
  }
}
 8004b1c:	3718      	adds	r7, #24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop

08004b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b40      	cmp	r3, #64	; 0x40
 8004b50:	d108      	bne.n	8004b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b62:	e007      	b.n	8004b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3b10      	subs	r3, #16
 8004b90:	4a13      	ldr	r2, [pc, #76]	; (8004be0 <DMA_CalcBaseAndBitshift+0x60>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b9a:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <DMA_CalcBaseAndBitshift+0x64>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d908      	bls.n	8004bc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <DMA_CalcBaseAndBitshift+0x68>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	1d1a      	adds	r2, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	659a      	str	r2, [r3, #88]	; 0x58
 8004bbe:	e006      	b.n	8004bce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	aaaaaaab 	.word	0xaaaaaaab
 8004be4:	0800fa1c 	.word	0x0800fa1c
 8004be8:	fffffc00 	.word	0xfffffc00

08004bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d11f      	bne.n	8004c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b03      	cmp	r3, #3
 8004c0a:	d855      	bhi.n	8004cb8 <DMA_CheckFifoParam+0xcc>
 8004c0c:	a201      	add	r2, pc, #4	; (adr r2, 8004c14 <DMA_CheckFifoParam+0x28>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004c37 	.word	0x08004c37
 8004c1c:	08004c25 	.word	0x08004c25
 8004c20:	08004cb9 	.word	0x08004cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d045      	beq.n	8004cbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e042      	b.n	8004cbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c3e:	d13f      	bne.n	8004cc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c44:	e03c      	b.n	8004cc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4e:	d121      	bne.n	8004c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d836      	bhi.n	8004cc4 <DMA_CheckFifoParam+0xd8>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <DMA_CheckFifoParam+0x70>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c6d 	.word	0x08004c6d
 8004c60:	08004c73 	.word	0x08004c73
 8004c64:	08004c6d 	.word	0x08004c6d
 8004c68:	08004c85 	.word	0x08004c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c70:	e02f      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d024      	beq.n	8004cc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c82:	e021      	b.n	8004cc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c8c:	d11e      	bne.n	8004ccc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c92:	e01b      	b.n	8004ccc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d902      	bls.n	8004ca0 <DMA_CheckFifoParam+0xb4>
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d003      	beq.n	8004ca6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c9e:	e018      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca4:	e015      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb6:	e00b      	b.n	8004cd0 <DMA_CheckFifoParam+0xe4>
      break;
 8004cb8:	bf00      	nop
 8004cba:	e00a      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cbc:	bf00      	nop
 8004cbe:	e008      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc0:	bf00      	nop
 8004cc2:	e006      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc4:	bf00      	nop
 8004cc6:	e004      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cc8:	bf00      	nop
 8004cca:	e002      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8004cd0:	bf00      	nop
    }
  } 
  
  return status; 
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e169      	b.n	8004fd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d00:	2201      	movs	r2, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	4013      	ands	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 8158 	bne.w	8004fce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d00b      	beq.n	8004d3e <HAL_GPIO_Init+0x5e>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d007      	beq.n	8004d3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d32:	2b11      	cmp	r3, #17
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b12      	cmp	r3, #18
 8004d3c:	d130      	bne.n	8004da0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2203      	movs	r2, #3
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4013      	ands	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d74:	2201      	movs	r2, #1
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 0201 	and.w	r2, r3, #1
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69ba      	ldr	r2, [r7, #24]
 8004d9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	2203      	movs	r2, #3
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4013      	ands	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d003      	beq.n	8004de0 <HAL_GPIO_Init+0x100>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b12      	cmp	r3, #18
 8004dde:	d123      	bne.n	8004e28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	08da      	lsrs	r2, r3, #3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	3208      	adds	r2, #8
 8004de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	220f      	movs	r2, #15
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4013      	ands	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	08da      	lsrs	r2, r3, #3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	3208      	adds	r2, #8
 8004e22:	69b9      	ldr	r1, [r7, #24]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	2203      	movs	r2, #3
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	69ba      	ldr	r2, [r7, #24]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0203 	and.w	r2, r3, #3
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80b2 	beq.w	8004fce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e6a:	4b5f      	ldr	r3, [pc, #380]	; (8004fe8 <HAL_GPIO_Init+0x308>)
 8004e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6e:	4a5e      	ldr	r2, [pc, #376]	; (8004fe8 <HAL_GPIO_Init+0x308>)
 8004e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e74:	6453      	str	r3, [r2, #68]	; 0x44
 8004e76:	4b5c      	ldr	r3, [pc, #368]	; (8004fe8 <HAL_GPIO_Init+0x308>)
 8004e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e82:	4a5a      	ldr	r2, [pc, #360]	; (8004fec <HAL_GPIO_Init+0x30c>)
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	3302      	adds	r3, #2
 8004e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	220f      	movs	r2, #15
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a51      	ldr	r2, [pc, #324]	; (8004ff0 <HAL_GPIO_Init+0x310>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d02b      	beq.n	8004f06 <HAL_GPIO_Init+0x226>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a50      	ldr	r2, [pc, #320]	; (8004ff4 <HAL_GPIO_Init+0x314>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d025      	beq.n	8004f02 <HAL_GPIO_Init+0x222>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a4f      	ldr	r2, [pc, #316]	; (8004ff8 <HAL_GPIO_Init+0x318>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d01f      	beq.n	8004efe <HAL_GPIO_Init+0x21e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a4e      	ldr	r2, [pc, #312]	; (8004ffc <HAL_GPIO_Init+0x31c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d019      	beq.n	8004efa <HAL_GPIO_Init+0x21a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a4d      	ldr	r2, [pc, #308]	; (8005000 <HAL_GPIO_Init+0x320>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_GPIO_Init+0x216>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a4c      	ldr	r2, [pc, #304]	; (8005004 <HAL_GPIO_Init+0x324>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00d      	beq.n	8004ef2 <HAL_GPIO_Init+0x212>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4b      	ldr	r2, [pc, #300]	; (8005008 <HAL_GPIO_Init+0x328>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <HAL_GPIO_Init+0x20e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a4a      	ldr	r2, [pc, #296]	; (800500c <HAL_GPIO_Init+0x32c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d101      	bne.n	8004eea <HAL_GPIO_Init+0x20a>
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	e00e      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004eea:	2308      	movs	r3, #8
 8004eec:	e00c      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004eee:	2306      	movs	r3, #6
 8004ef0:	e00a      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	e008      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e006      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004efa:	2303      	movs	r3, #3
 8004efc:	e004      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e002      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_GPIO_Init+0x228>
 8004f06:	2300      	movs	r3, #0
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	f002 0203 	and.w	r2, r2, #3
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	4093      	lsls	r3, r2
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f18:	4934      	ldr	r1, [pc, #208]	; (8004fec <HAL_GPIO_Init+0x30c>)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	3302      	adds	r3, #2
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f26:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f4a:	4a31      	ldr	r2, [pc, #196]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f50:	4b2f      	ldr	r3, [pc, #188]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f7a:	4b25      	ldr	r3, [pc, #148]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f9e:	4a1c      	ldr	r2, [pc, #112]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fa4:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <HAL_GPIO_Init+0x330>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	f67f ae92 	bls.w	8004d00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	3724      	adds	r7, #36	; 0x24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40013800 	.word	0x40013800
 8004ff0:	40020000 	.word	0x40020000
 8004ff4:	40020400 	.word	0x40020400
 8004ff8:	40020800 	.word	0x40020800
 8004ffc:	40020c00 	.word	0x40020c00
 8005000:	40021000 	.word	0x40021000
 8005004:	40021400 	.word	0x40021400
 8005008:	40021800 	.word	0x40021800
 800500c:	40021c00 	.word	0x40021c00
 8005010:	40013c00 	.word	0x40013c00

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005030:	e003      	b.n	800503a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	041a      	lsls	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	619a      	str	r2, [r3, #24]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	460b      	mov	r3, r1
 8005050:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d004      	beq.n	8005068 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800505e:	887b      	ldrh	r3, [r7, #2]
 8005060:	041a      	lsls	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8005066:	e002      	b.n	800506e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005068:	887a      	ldrh	r2, [r7, #2]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800507a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507c:	b08f      	sub	sp, #60	; 0x3c
 800507e:	af0a      	add	r7, sp, #40	; 0x28
 8005080:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e116      	b.n	80052ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fe fb92 	bl	80037d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2203      	movs	r2, #3
 80050b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d102      	bne.n	80050c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f003 fed8 	bl	8008e80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	687e      	ldr	r6, [r7, #4]
 80050d8:	466d      	mov	r5, sp
 80050da:	f106 0410 	add.w	r4, r6, #16
 80050de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ee:	1d33      	adds	r3, r6, #4
 80050f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050f2:	6838      	ldr	r0, [r7, #0]
 80050f4:	f003 fe66 	bl	8008dc4 <USB_CoreInit>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0d7      	b.n	80052ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f003 fec6 	bl	8008ea2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	e04a      	b.n	80051b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	333d      	adds	r3, #61	; 0x3d
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	440b      	add	r3, r1
 800513e:	333c      	adds	r3, #60	; 0x3c
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005144:	7bfa      	ldrb	r2, [r7, #15]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	b298      	uxth	r0, r3
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3342      	adds	r3, #66	; 0x42
 8005158:	4602      	mov	r2, r0
 800515a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800515c:	7bfa      	ldrb	r2, [r7, #15]
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	4613      	mov	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	1a9b      	subs	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	440b      	add	r3, r1
 800516a:	333f      	adds	r3, #63	; 0x3f
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	6879      	ldr	r1, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3344      	adds	r3, #68	; 0x44
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005184:	7bfa      	ldrb	r2, [r7, #15]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	3348      	adds	r3, #72	; 0x48
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005198:	7bfa      	ldrb	r2, [r7, #15]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	3350      	adds	r3, #80	; 0x50
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	3301      	adds	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
 80051b2:	7bfa      	ldrb	r2, [r7, #15]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d3af      	bcc.n	800511c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	e044      	b.n	800524c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80051ea:	7bfa      	ldrb	r2, [r7, #15]
 80051ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005200:	2200      	movs	r2, #0
 8005202:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005204:	7bfa      	ldrb	r2, [r7, #15]
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	4613      	mov	r3, r2
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	440b      	add	r3, r1
 8005212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	1a9b      	subs	r3, r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	3301      	adds	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	7bfa      	ldrb	r2, [r7, #15]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	429a      	cmp	r2, r3
 8005254:	d3b5      	bcc.n	80051c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	687e      	ldr	r6, [r7, #4]
 800525e:	466d      	mov	r5, sp
 8005260:	f106 0410 	add.w	r4, r6, #16
 8005264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800526a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800526c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005270:	e885 0003 	stmia.w	r5, {r0, r1}
 8005274:	1d33      	adds	r3, r6, #4
 8005276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005278:	6838      	ldr	r0, [r7, #0]
 800527a:	f003 fe3d 	bl	8008ef8 <USB_DevInit>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e014      	b.n	80052ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d102      	bne.n	80052ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f80b 	bl	80052c4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f003 ffef 	bl	8009296 <USB_DevDisconnect>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_PCDEx_ActivateLPM+0x44>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	10000003 	.word	0x10000003

0800530c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]
}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40007000 	.word	0x40007000

0800532c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005336:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	4a22      	ldr	r2, [pc, #136]	; (80053c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005340:	6413      	str	r3, [r2, #64]	; 0x40
 8005342:	4b20      	ldr	r3, [pc, #128]	; (80053c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800534e:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005358:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800535a:	f7fe fc2f 	bl	8003bbc <HAL_GetTick>
 800535e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005360:	e009      	b.n	8005376 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005362:	f7fe fc2b 	bl	8003bbc <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005370:	d901      	bls.n	8005376 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e022      	b.n	80053bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d1ee      	bne.n	8005362 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800538a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800538e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005390:	f7fe fc14 	bl	8003bbc <HAL_GetTick>
 8005394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005396:	e009      	b.n	80053ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005398:	f7fe fc10 	bl	8003bbc <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a6:	d901      	bls.n	80053ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e007      	b.n	80053bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053b8:	d1ee      	bne.n	8005398 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	40007000 	.word	0x40007000

080053cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80053d4:	2300      	movs	r3, #0
 80053d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e291      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8087 	beq.w	80054fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f0:	4b96      	ldr	r3, [pc, #600]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 030c 	and.w	r3, r3, #12
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d00c      	beq.n	8005416 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053fc:	4b93      	ldr	r3, [pc, #588]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f003 030c 	and.w	r3, r3, #12
 8005404:	2b08      	cmp	r3, #8
 8005406:	d112      	bne.n	800542e <HAL_RCC_OscConfig+0x62>
 8005408:	4b90      	ldr	r3, [pc, #576]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005414:	d10b      	bne.n	800542e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005416:	4b8d      	ldr	r3, [pc, #564]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d06c      	beq.n	80054fc <HAL_RCC_OscConfig+0x130>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d168      	bne.n	80054fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e26b      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005436:	d106      	bne.n	8005446 <HAL_RCC_OscConfig+0x7a>
 8005438:	4b84      	ldr	r3, [pc, #528]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a83      	ldr	r2, [pc, #524]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800543e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	e02e      	b.n	80054a4 <HAL_RCC_OscConfig+0xd8>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10c      	bne.n	8005468 <HAL_RCC_OscConfig+0x9c>
 800544e:	4b7f      	ldr	r3, [pc, #508]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a7e      	ldr	r2, [pc, #504]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	4b7c      	ldr	r3, [pc, #496]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a7b      	ldr	r2, [pc, #492]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	e01d      	b.n	80054a4 <HAL_RCC_OscConfig+0xd8>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005470:	d10c      	bne.n	800548c <HAL_RCC_OscConfig+0xc0>
 8005472:	4b76      	ldr	r3, [pc, #472]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a75      	ldr	r2, [pc, #468]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	4b73      	ldr	r3, [pc, #460]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a72      	ldr	r2, [pc, #456]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e00b      	b.n	80054a4 <HAL_RCC_OscConfig+0xd8>
 800548c:	4b6f      	ldr	r3, [pc, #444]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	4b6c      	ldr	r3, [pc, #432]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6b      	ldr	r2, [pc, #428]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800549e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fe fb86 	bl	8003bbc <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fe fb82 	bl	8003bbc <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e21f      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c6:	4b61      	ldr	r3, [pc, #388]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d0f0      	beq.n	80054b4 <HAL_RCC_OscConfig+0xe8>
 80054d2:	e014      	b.n	80054fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d4:	f7fe fb72 	bl	8003bbc <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fe fb6e 	bl	8003bbc <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e20b      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ee:	4b57      	ldr	r3, [pc, #348]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1f0      	bne.n	80054dc <HAL_RCC_OscConfig+0x110>
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d069      	beq.n	80055de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800550a:	4b50      	ldr	r3, [pc, #320]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 030c 	and.w	r3, r3, #12
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005516:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 030c 	and.w	r3, r3, #12
 800551e:	2b08      	cmp	r3, #8
 8005520:	d11c      	bne.n	800555c <HAL_RCC_OscConfig+0x190>
 8005522:	4b4a      	ldr	r3, [pc, #296]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d116      	bne.n	800555c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552e:	4b47      	ldr	r3, [pc, #284]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x17a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d001      	beq.n	8005546 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e1df      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	4b41      	ldr	r3, [pc, #260]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	493d      	ldr	r1, [pc, #244]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005556:	4313      	orrs	r3, r2
 8005558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800555a:	e040      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d023      	beq.n	80055ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005564:	4b39      	ldr	r3, [pc, #228]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a38      	ldr	r2, [pc, #224]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fe fb24 	bl	8003bbc <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005578:	f7fe fb20 	bl	8003bbc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e1bd      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800558a:	4b30      	ldr	r3, [pc, #192]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f0      	beq.n	8005578 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4929      	ldr	r1, [pc, #164]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]
 80055aa:	e018      	b.n	80055de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ac:	4b27      	ldr	r3, [pc, #156]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a26      	ldr	r2, [pc, #152]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fe fb00 	bl	8003bbc <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c0:	f7fe fafc 	bl	8003bbc <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e199      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055d2:	4b1e      	ldr	r3, [pc, #120]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d038      	beq.n	800565c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055f2:	4b16      	ldr	r3, [pc, #88]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <HAL_RCC_OscConfig+0x280>)
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fe fadd 	bl	8003bbc <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fe fad9 	bl	8003bbc <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e176      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005618:	4b0c      	ldr	r3, [pc, #48]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800561a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x23a>
 8005624:	e01a      	b.n	800565c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <HAL_RCC_OscConfig+0x280>)
 8005628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <HAL_RCC_OscConfig+0x280>)
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005632:	f7fe fac3 	bl	8003bbc <HAL_GetTick>
 8005636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005638:	e00a      	b.n	8005650 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800563a:	f7fe fabf 	bl	8003bbc <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d903      	bls.n	8005650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e15c      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
 800564c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005650:	4b91      	ldr	r3, [pc, #580]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ee      	bne.n	800563a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 80a4 	beq.w	80057b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800566a:	4b8b      	ldr	r3, [pc, #556]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005676:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	4a87      	ldr	r2, [pc, #540]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800567c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005680:	6413      	str	r3, [r2, #64]	; 0x40
 8005682:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005692:	4b82      	ldr	r3, [pc, #520]	; (800589c <HAL_RCC_OscConfig+0x4d0>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d118      	bne.n	80056d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800569e:	4b7f      	ldr	r3, [pc, #508]	; (800589c <HAL_RCC_OscConfig+0x4d0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7e      	ldr	r2, [pc, #504]	; (800589c <HAL_RCC_OscConfig+0x4d0>)
 80056a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056aa:	f7fe fa87 	bl	8003bbc <HAL_GetTick>
 80056ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b0:	e008      	b.n	80056c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b2:	f7fe fa83 	bl	8003bbc <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	2b64      	cmp	r3, #100	; 0x64
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e120      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c4:	4b75      	ldr	r3, [pc, #468]	; (800589c <HAL_RCC_OscConfig+0x4d0>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0f0      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d106      	bne.n	80056e6 <HAL_RCC_OscConfig+0x31a>
 80056d8:	4b6f      	ldr	r3, [pc, #444]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a6e      	ldr	r2, [pc, #440]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	e02d      	b.n	8005742 <HAL_RCC_OscConfig+0x376>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10c      	bne.n	8005708 <HAL_RCC_OscConfig+0x33c>
 80056ee:	4b6a      	ldr	r3, [pc, #424]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a69      	ldr	r2, [pc, #420]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	4b67      	ldr	r3, [pc, #412]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a66      	ldr	r2, [pc, #408]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005700:	f023 0304 	bic.w	r3, r3, #4
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	e01c      	b.n	8005742 <HAL_RCC_OscConfig+0x376>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b05      	cmp	r3, #5
 800570e:	d10c      	bne.n	800572a <HAL_RCC_OscConfig+0x35e>
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	4a60      	ldr	r2, [pc, #384]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	6713      	str	r3, [r2, #112]	; 0x70
 800571c:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6713      	str	r3, [r2, #112]	; 0x70
 8005728:	e00b      	b.n	8005742 <HAL_RCC_OscConfig+0x376>
 800572a:	4b5b      	ldr	r3, [pc, #364]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	4a5a      	ldr	r2, [pc, #360]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005730:	f023 0301 	bic.w	r3, r3, #1
 8005734:	6713      	str	r3, [r2, #112]	; 0x70
 8005736:	4b58      	ldr	r3, [pc, #352]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	4a57      	ldr	r2, [pc, #348]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d015      	beq.n	8005776 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fe fa37 	bl	8003bbc <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005750:	e00a      	b.n	8005768 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005752:	f7fe fa33 	bl	8003bbc <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e0ce      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b4b      	ldr	r3, [pc, #300]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ee      	beq.n	8005752 <HAL_RCC_OscConfig+0x386>
 8005774:	e014      	b.n	80057a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005776:	f7fe fa21 	bl	8003bbc <HAL_GetTick>
 800577a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577e:	f7fe fa1d 	bl	8003bbc <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	f241 3288 	movw	r2, #5000	; 0x1388
 800578c:	4293      	cmp	r3, r2
 800578e:	d901      	bls.n	8005794 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e0b8      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005794:	4b40      	ldr	r3, [pc, #256]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ee      	bne.n	800577e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b3c      	ldr	r3, [pc, #240]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	4a3b      	ldr	r2, [pc, #236]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 80a4 	beq.w	8005904 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057bc:	4b36      	ldr	r3, [pc, #216]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 030c 	and.w	r3, r3, #12
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d06b      	beq.n	80058a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d149      	bne.n	8005864 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d0:	4b31      	ldr	r3, [pc, #196]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a30      	ldr	r2, [pc, #192]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057dc:	f7fe f9ee 	bl	8003bbc <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe f9ea 	bl	8003bbc <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e087      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f6:	4b28      	ldr	r3, [pc, #160]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69da      	ldr	r2, [r3, #28]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005818:	085b      	lsrs	r3, r3, #1
 800581a:	3b01      	subs	r3, #1
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	061b      	lsls	r3, r3, #24
 8005826:	4313      	orrs	r3, r2
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800582a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800582e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fe f9be 	bl	8003bbc <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005844:	f7fe f9ba 	bl	8003bbc <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e057      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005856:	4b10      	ldr	r3, [pc, #64]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0f0      	beq.n	8005844 <HAL_RCC_OscConfig+0x478>
 8005862:	e04f      	b.n	8005904 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005864:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a0b      	ldr	r2, [pc, #44]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800586a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fe f9a4 	bl	8003bbc <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fe f9a0 	bl	8003bbc <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e03d      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800588a:	4b03      	ldr	r3, [pc, #12]	; (8005898 <HAL_RCC_OscConfig+0x4cc>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x4ac>
 8005896:	e035      	b.n	8005904 <HAL_RCC_OscConfig+0x538>
 8005898:	40023800 	.word	0x40023800
 800589c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <HAL_RCC_OscConfig+0x544>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d028      	beq.n	8005900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d121      	bne.n	8005900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d11a      	bne.n	8005900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d8:	4293      	cmp	r3, r2
 80058da:	d111      	bne.n	8005900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d107      	bne.n	8005900 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800

08005914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0d0      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b6a      	ldr	r3, [pc, #424]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d910      	bls.n	800595c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b67      	ldr	r3, [pc, #412]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 020f 	bic.w	r2, r3, #15
 8005942:	4965      	ldr	r1, [pc, #404]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b63      	ldr	r3, [pc, #396]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0b8      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005974:	4b59      	ldr	r3, [pc, #356]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	4a58      	ldr	r2, [pc, #352]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800597a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800597e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0308 	and.w	r3, r3, #8
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800598c:	4b53      	ldr	r3, [pc, #332]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4a52      	ldr	r2, [pc, #328]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005996:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005998:	4b50      	ldr	r3, [pc, #320]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	494d      	ldr	r1, [pc, #308]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d040      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	4b47      	ldr	r3, [pc, #284]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d115      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07f      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d6:	4b41      	ldr	r3, [pc, #260]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d109      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e073      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	4b3d      	ldr	r3, [pc, #244]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e06b      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059f6:	4b39      	ldr	r3, [pc, #228]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f023 0203 	bic.w	r2, r3, #3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	4936      	ldr	r1, [pc, #216]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a08:	f7fe f8d8 	bl	8003bbc <HAL_GetTick>
 8005a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	e00a      	b.n	8005a26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a10:	f7fe f8d4 	bl	8003bbc <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e053      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 020c 	and.w	r2, r3, #12
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d1eb      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 030f 	and.w	r3, r3, #15
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d210      	bcs.n	8005a68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f023 020f 	bic.w	r2, r3, #15
 8005a4e:	4922      	ldr	r1, [pc, #136]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a56:	4b20      	ldr	r3, [pc, #128]	; (8005ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 030f 	and.w	r3, r3, #15
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e032      	b.n	8005ace <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a74:	4b19      	ldr	r3, [pc, #100]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4916      	ldr	r1, [pc, #88]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	490e      	ldr	r1, [pc, #56]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aa6:	f000 f821 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <HAL_RCC_ClockConfig+0x1c8>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	091b      	lsrs	r3, r3, #4
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8005ab8:	5cd3      	ldrb	r3, [r2, r3]
 8005aba:	fa21 f303 	lsr.w	r3, r1, r3
 8005abe:	4a09      	ldr	r2, [pc, #36]	; (8005ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8005ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <HAL_RCC_ClockConfig+0x1d4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fed0 	bl	800386c <HAL_InitTick>

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40023c00 	.word	0x40023c00
 8005adc:	40023800 	.word	0x40023800
 8005ae0:	0800fa04 	.word	0x0800fa04
 8005ae4:	20000000 	.word	0x20000000
 8005ae8:	20000004 	.word	0x20000004

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	2300      	movs	r3, #0
 8005afc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b02:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d007      	beq.n	8005b1e <HAL_RCC_GetSysClockFreq+0x32>
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d008      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x38>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f040 80b4 	bne.w	8005c80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b18:	4b5e      	ldr	r3, [pc, #376]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b1a:	60bb      	str	r3, [r7, #8]
      break;
 8005b1c:	e0b3      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b1e:	4b5e      	ldr	r3, [pc, #376]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005b20:	60bb      	str	r3, [r7, #8]
      break;
 8005b22:	e0b0      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b24:	4b5a      	ldr	r3, [pc, #360]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b2c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b2e:	4b58      	ldr	r3, [pc, #352]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d04a      	beq.n	8005bd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b3a:	4b55      	ldr	r3, [pc, #340]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	099b      	lsrs	r3, r3, #6
 8005b40:	f04f 0400 	mov.w	r4, #0
 8005b44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	ea03 0501 	and.w	r5, r3, r1
 8005b50:	ea04 0602 	and.w	r6, r4, r2
 8005b54:	4629      	mov	r1, r5
 8005b56:	4632      	mov	r2, r6
 8005b58:	f04f 0300 	mov.w	r3, #0
 8005b5c:	f04f 0400 	mov.w	r4, #0
 8005b60:	0154      	lsls	r4, r2, #5
 8005b62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b66:	014b      	lsls	r3, r1, #5
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4622      	mov	r2, r4
 8005b6c:	1b49      	subs	r1, r1, r5
 8005b6e:	eb62 0206 	sbc.w	r2, r2, r6
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	f04f 0400 	mov.w	r4, #0
 8005b7a:	0194      	lsls	r4, r2, #6
 8005b7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b80:	018b      	lsls	r3, r1, #6
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	eb64 0402 	sbc.w	r4, r4, r2
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	00e2      	lsls	r2, r4, #3
 8005b92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b96:	00d9      	lsls	r1, r3, #3
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	195b      	adds	r3, r3, r5
 8005b9e:	eb44 0406 	adc.w	r4, r4, r6
 8005ba2:	f04f 0100 	mov.w	r1, #0
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	0262      	lsls	r2, r4, #9
 8005bac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005bb0:	0259      	lsls	r1, r3, #9
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	4621      	mov	r1, r4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f04f 0400 	mov.w	r4, #0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	f7fb f868 	bl	8000c98 <__aeabi_uldivmod>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	460c      	mov	r4, r1
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	e049      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd0:	4b2f      	ldr	r3, [pc, #188]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	099b      	lsrs	r3, r3, #6
 8005bd6:	f04f 0400 	mov.w	r4, #0
 8005bda:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	ea03 0501 	and.w	r5, r3, r1
 8005be6:	ea04 0602 	and.w	r6, r4, r2
 8005bea:	4629      	mov	r1, r5
 8005bec:	4632      	mov	r2, r6
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	f04f 0400 	mov.w	r4, #0
 8005bf6:	0154      	lsls	r4, r2, #5
 8005bf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005bfc:	014b      	lsls	r3, r1, #5
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4622      	mov	r2, r4
 8005c02:	1b49      	subs	r1, r1, r5
 8005c04:	eb62 0206 	sbc.w	r2, r2, r6
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	f04f 0400 	mov.w	r4, #0
 8005c10:	0194      	lsls	r4, r2, #6
 8005c12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c16:	018b      	lsls	r3, r1, #6
 8005c18:	1a5b      	subs	r3, r3, r1
 8005c1a:	eb64 0402 	sbc.w	r4, r4, r2
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	00e2      	lsls	r2, r4, #3
 8005c28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c2c:	00d9      	lsls	r1, r3, #3
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4614      	mov	r4, r2
 8005c32:	195b      	adds	r3, r3, r5
 8005c34:	eb44 0406 	adc.w	r4, r4, r6
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	02a2      	lsls	r2, r4, #10
 8005c42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005c46:	0299      	lsls	r1, r3, #10
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	4621      	mov	r1, r4
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f04f 0400 	mov.w	r4, #0
 8005c56:	461a      	mov	r2, r3
 8005c58:	4623      	mov	r3, r4
 8005c5a:	f7fb f81d 	bl	8000c98 <__aeabi_uldivmod>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
 8005c62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c64:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	f003 0303 	and.w	r3, r3, #3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	60bb      	str	r3, [r7, #8]
      break;
 8005c7e:	e002      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c80:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c82:	60bb      	str	r3, [r7, #8]
      break;
 8005c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c86:	68bb      	ldr	r3, [r7, #8]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200

08005c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000000 	.word	0x20000000

08005cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005cb8:	f7ff fff0 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005cbc:	4601      	mov	r1, r0
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0a9b      	lsrs	r3, r3, #10
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4a03      	ldr	r2, [pc, #12]	; (8005cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cca:	5cd3      	ldrb	r3, [r2, r3]
 8005ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	0800fa14 	.word	0x0800fa14

08005cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ce0:	f7ff ffdc 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0b5b      	lsrs	r3, r3, #13
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf2:	5cd3      	ldrb	r3, [r2, r3]
 8005cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	0800fa14 	.word	0x0800fa14

08005d04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	220f      	movs	r2, #15
 8005d12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d14:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005d20:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005d38:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_RCC_GetClockConfig+0x5c>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <HAL_RCC_GetClockConfig+0x60>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 020f 	and.w	r2, r3, #15
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	601a      	str	r2, [r3, #0]
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40023c00 	.word	0x40023c00

08005d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b088      	sub	sp, #32
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d012      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d8c:	4b65      	ldr	r3, [pc, #404]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a64      	ldr	r2, [pc, #400]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d96:	6093      	str	r3, [r2, #8]
 8005d98:	4b62      	ldr	r3, [pc, #392]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da0:	4960      	ldr	r1, [pc, #384]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005dae:	2301      	movs	r3, #1
 8005db0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d017      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dbe:	4b59      	ldr	r3, [pc, #356]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dcc:	4955      	ldr	r1, [pc, #340]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005dde:	2301      	movs	r3, #1
 8005de0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005dea:	2301      	movs	r3, #1
 8005dec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d017      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005dfa:	4b4a      	ldr	r3, [pc, #296]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e08:	4946      	ldr	r1, [pc, #280]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e18:	d101      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8005e26:	2301      	movs	r3, #1
 8005e28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 808b 	beq.w	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e38:	4b3a      	ldr	r3, [pc, #232]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3c:	4a39      	ldr	r2, [pc, #228]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e42:	6413      	str	r3, [r2, #64]	; 0x40
 8005e44:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e50:	4b35      	ldr	r3, [pc, #212]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a34      	ldr	r2, [pc, #208]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fd feae 	bl	8003bbc <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e64:	f7fd feaa 	bl	8003bbc <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	; 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e2ba      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e76:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0f0      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e82:	4b28      	ldr	r3, [pc, #160]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d035      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d02e      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea0:	4b20      	ldr	r3, [pc, #128]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eaa:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eae:	4a1d      	ldr	r2, [pc, #116]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb6:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4a1a      	ldr	r2, [pc, #104]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005ec2:	4a18      	ldr	r2, [pc, #96]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ec8:	4b16      	ldr	r3, [pc, #88]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d114      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fd fe72 	bl	8003bbc <HAL_GetTick>
 8005ed8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eda:	e00a      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005edc:	f7fd fe6e 	bl	8003bbc <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e27c      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef2:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0ee      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8005f0c:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	4901      	ldr	r1, [pc, #4]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	608b      	str	r3, [r1, #8]
 8005f22:	e00b      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005f24:	40023800 	.word	0x40023800
 8005f28:	40007000 	.word	0x40007000
 8005f2c:	0ffffcff 	.word	0x0ffffcff
 8005f30:	4ba3      	ldr	r3, [pc, #652]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4aa2      	ldr	r2, [pc, #648]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f3a:	6093      	str	r3, [r2, #8]
 8005f3c:	4ba0      	ldr	r3, [pc, #640]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f48:	499d      	ldr	r1, [pc, #628]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d010      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f5a:	4b99      	ldr	r3, [pc, #612]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f60:	4a97      	ldr	r2, [pc, #604]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005f6a:	4b95      	ldr	r3, [pc, #596]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4992      	ldr	r1, [pc, #584]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f88:	4b8d      	ldr	r3, [pc, #564]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f96:	498a      	ldr	r1, [pc, #552]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00a      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005faa:	4b85      	ldr	r3, [pc, #532]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb8:	4981      	ldr	r1, [pc, #516]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fcc:	4b7c      	ldr	r3, [pc, #496]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fda:	4979      	ldr	r1, [pc, #484]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fee:	4b74      	ldr	r3, [pc, #464]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff4:	f023 0203 	bic.w	r2, r3, #3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	4970      	ldr	r1, [pc, #448]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006010:	4b6b      	ldr	r3, [pc, #428]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006016:	f023 020c 	bic.w	r2, r3, #12
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	4968      	ldr	r1, [pc, #416]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006032:	4b63      	ldr	r3, [pc, #396]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006038:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006040:	495f      	ldr	r1, [pc, #380]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006054:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006062:	4957      	ldr	r1, [pc, #348]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006076:	4b52      	ldr	r3, [pc, #328]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006084:	494e      	ldr	r1, [pc, #312]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00a      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006098:	4b49      	ldr	r3, [pc, #292]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	4946      	ldr	r1, [pc, #280]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80060ba:	4b41      	ldr	r3, [pc, #260]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c8:	493d      	ldr	r1, [pc, #244]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80060dc:	4b38      	ldr	r3, [pc, #224]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	4935      	ldr	r1, [pc, #212]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d011      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060fe:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610c:	492c      	ldr	r1, [pc, #176]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611c:	d101      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800611e:	2301      	movs	r3, #1
 8006120:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612e:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006134:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613c:	4920      	ldr	r1, [pc, #128]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800613e:	4313      	orrs	r3, r2
 8006140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006150:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006156:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800615e:	4918      	ldr	r1, [pc, #96]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00a      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006180:	490f      	ldr	r1, [pc, #60]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006182:	4313      	orrs	r3, r2
 8006184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d005      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006196:	f040 809c 	bne.w	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80061a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a6:	f7fd fd09 	bl	8003bbc <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061ae:	f7fd fd05 	bl	8003bbc <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b64      	cmp	r3, #100	; 0x64
 80061ba:	d903      	bls.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e115      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
 80061c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061c4:	4b8b      	ldr	r3, [pc, #556]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ee      	bne.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d113      	bne.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061e4:	4b83      	ldr	r3, [pc, #524]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80061e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ea:	0e1b      	lsrs	r3, r3, #24
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	019a      	lsls	r2, r3, #6
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	061b      	lsls	r3, r3, #24
 80061fc:	431a      	orrs	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	071b      	lsls	r3, r3, #28
 8006204:	497b      	ldr	r1, [pc, #492]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006220:	d00a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800622a:	2b00      	cmp	r3, #0
 800622c:	d024      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006236:	d11f      	bne.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006238:	4b6e      	ldr	r3, [pc, #440]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800623a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623e:	0f1b      	lsrs	r3, r3, #28
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	019a      	lsls	r2, r3, #6
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	431a      	orrs	r2, r3
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	071b      	lsls	r3, r3, #28
 8006258:	4966      	ldr	r1, [pc, #408]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006260:	4b64      	ldr	r3, [pc, #400]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006266:	f023 021f 	bic.w	r2, r3, #31
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	3b01      	subs	r3, #1
 8006270:	4960      	ldr	r1, [pc, #384]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006272:	4313      	orrs	r3, r2
 8006274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00d      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	019a      	lsls	r2, r3, #6
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	071b      	lsls	r3, r3, #28
 8006298:	4956      	ldr	r1, [pc, #344]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062a0:	4b54      	ldr	r3, [pc, #336]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a53      	ldr	r2, [pc, #332]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ac:	f7fd fc86 	bl	8003bbc <HAL_GetTick>
 80062b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062b4:	f7fd fc82 	bl	8003bbc <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e092      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062c6:	4b4b      	ldr	r3, [pc, #300]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f0      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	f040 8088 	bne.w	80063ea <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062da:	4b46      	ldr	r3, [pc, #280]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a45      	ldr	r2, [pc, #276]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80062e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e6:	f7fd fc69 	bl	8003bbc <HAL_GetTick>
 80062ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062ec:	e008      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062ee:	f7fd fc65 	bl	8003bbc <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b64      	cmp	r3, #100	; 0x64
 80062fa:	d901      	bls.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e075      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006300:	4b3c      	ldr	r3, [pc, #240]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800630c:	d0ef      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800632a:	2b00      	cmp	r3, #0
 800632c:	d024      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006332:	2b00      	cmp	r3, #0
 8006334:	d120      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633c:	0c1b      	lsrs	r3, r3, #16
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	019a      	lsls	r2, r3, #6
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	041b      	lsls	r3, r3, #16
 800634e:	431a      	orrs	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	061b      	lsls	r3, r3, #24
 8006356:	4927      	ldr	r1, [pc, #156]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800635e:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006364:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	3b01      	subs	r3, #1
 800636e:	021b      	lsls	r3, r3, #8
 8006370:	4920      	ldr	r1, [pc, #128]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006372:	4313      	orrs	r3, r2
 8006374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d018      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638c:	d113      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800638e:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	0e1b      	lsrs	r3, r3, #24
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	019a      	lsls	r2, r3, #6
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	041b      	lsls	r3, r3, #16
 80063a8:	431a      	orrs	r2, r3
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	061b      	lsls	r3, r3, #24
 80063ae:	4911      	ldr	r1, [pc, #68]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063b6:	4b0f      	ldr	r3, [pc, #60]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0e      	ldr	r2, [pc, #56]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063c2:	f7fd fbfb 	bl	8003bbc <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063ca:	f7fd fbf7 	bl	8003bbc <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b64      	cmp	r3, #100	; 0x64
 80063d6:	d901      	bls.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e007      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80063dc:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e8:	d1ef      	bne.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40023800 	.word	0x40023800

080063f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e084      	b.n	8006514 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7fd f8ad 	bl	8003584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006440:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800644a:	d902      	bls.n	8006452 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e002      	b.n	8006458 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006456:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006460:	d007      	beq.n	8006472 <HAL_SPI_Init+0x7a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800646a:	d002      	beq.n	8006472 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006482:	d903      	bls.n	800648c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
 800648a:	e002      	b.n	8006492 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	431a      	orrs	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	ea42 0103 	orr.w	r1, r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	f003 0204 	and.w	r2, r3, #4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	ea42 0103 	orr.w	r1, r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69da      	ldr	r2, [r3, #28]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006502:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006536:	2b01      	cmp	r3, #1
 8006538:	d101      	bne.n	800653e <HAL_SPI_Transmit+0x22>
 800653a:	2302      	movs	r3, #2
 800653c:	e150      	b.n	80067e0 <HAL_SPI_Transmit+0x2c4>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006546:	f7fd fb39 	bl	8003bbc <HAL_GetTick>
 800654a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800654c:	88fb      	ldrh	r3, [r7, #6]
 800654e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006556:	b2db      	uxtb	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d002      	beq.n	8006562 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800655c:	2302      	movs	r3, #2
 800655e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006560:	e135      	b.n	80067ce <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SPI_Transmit+0x52>
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006572:	e12c      	b.n	80067ce <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2203      	movs	r2, #3
 8006578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	88fa      	ldrh	r2, [r7, #6]
 8006592:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	d107      	bne.n	80065d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b40      	cmp	r3, #64	; 0x40
 80065dc:	d007      	beq.n	80065ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065f6:	d94b      	bls.n	8006690 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_Transmit+0xea>
 8006600:	8afb      	ldrh	r3, [r7, #22]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d13e      	bne.n	8006684 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660a:	881a      	ldrh	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	1c9a      	adds	r2, r3, #2
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006620:	b29b      	uxth	r3, r3
 8006622:	3b01      	subs	r3, #1
 8006624:	b29a      	uxth	r2, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800662a:	e02b      	b.n	8006684 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b02      	cmp	r3, #2
 8006638:	d112      	bne.n	8006660 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	881a      	ldrh	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006654:	b29b      	uxth	r3, r3
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800665e:	e011      	b.n	8006684 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006660:	f7fd faac 	bl	8003bbc <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d803      	bhi.n	8006678 <HAL_SPI_Transmit+0x15c>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006676:	d102      	bne.n	800667e <HAL_SPI_Transmit+0x162>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d102      	bne.n	8006684 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006682:	e0a4      	b.n	80067ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1ce      	bne.n	800662c <HAL_SPI_Transmit+0x110>
 800668e:	e07c      	b.n	800678a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <HAL_SPI_Transmit+0x182>
 8006698:	8afb      	ldrh	r3, [r7, #22]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d170      	bne.n	8006780 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d912      	bls.n	80066ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	881a      	ldrh	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	1c9a      	adds	r2, r3, #2
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	3b02      	subs	r3, #2
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066cc:	e058      	b.n	8006780 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	330c      	adds	r3, #12
 80066d8:	7812      	ldrb	r2, [r2, #0]
 80066da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	1c5a      	adds	r2, r3, #1
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	3b01      	subs	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80066f4:	e044      	b.n	8006780 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b02      	cmp	r3, #2
 8006702:	d12b      	bne.n	800675c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d912      	bls.n	8006734 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	881a      	ldrh	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	1c9a      	adds	r2, r3, #2
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b02      	subs	r3, #2
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006732:	e025      	b.n	8006780 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	330c      	adds	r3, #12
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	; 0x3e
 800675a:	e011      	b.n	8006780 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800675c:	f7fd fa2e 	bl	8003bbc <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d803      	bhi.n	8006774 <HAL_SPI_Transmit+0x258>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006772:	d102      	bne.n	800677a <HAL_SPI_Transmit+0x25e>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800677e:	e026      	b.n	80067ce <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1b5      	bne.n	80066f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fb14 	bl	8006dbc <SPI_EndRxTxTransaction>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10a      	bne.n	80067be <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	613b      	str	r3, [r7, #16]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e000      	b.n	80067ce <HAL_SPI_Transmit+0x2b2>
  }

error:
 80067cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80067de:	7ffb      	ldrb	r3, [r7, #31]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b08a      	sub	sp, #40	; 0x28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067f6:	2301      	movs	r3, #1
 80067f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPI_TransmitReceive+0x26>
 800680a:	2302      	movs	r3, #2
 800680c:	e1fb      	b.n	8006c06 <HAL_SPI_TransmitReceive+0x41e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006816:	f7fd f9d1 	bl	8003bbc <HAL_GetTick>
 800681a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006822:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800682a:	887b      	ldrh	r3, [r7, #2]
 800682c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800682e:	887b      	ldrh	r3, [r7, #2]
 8006830:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006832:	7efb      	ldrb	r3, [r7, #27]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d00e      	beq.n	8006856 <HAL_SPI_TransmitReceive+0x6e>
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683e:	d106      	bne.n	800684e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d102      	bne.n	800684e <HAL_SPI_TransmitReceive+0x66>
 8006848:	7efb      	ldrb	r3, [r7, #27]
 800684a:	2b04      	cmp	r3, #4
 800684c:	d003      	beq.n	8006856 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800684e:	2302      	movs	r3, #2
 8006850:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006854:	e1cd      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d002      	beq.n	8006868 <HAL_SPI_TransmitReceive+0x80>
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d103      	bne.n	8006870 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800686e:	e1c0      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b04      	cmp	r3, #4
 800687a:	d003      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2205      	movs	r2, #5
 8006880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	887a      	ldrh	r2, [r7, #2]
 8006894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	887a      	ldrh	r2, [r7, #2]
 800689c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c6:	d802      	bhi.n	80068ce <HAL_SPI_TransmitReceive+0xe6>
 80068c8:	8a3b      	ldrh	r3, [r7, #16]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d908      	bls.n	80068e0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	e007      	b.n	80068f0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b40      	cmp	r3, #64	; 0x40
 80068fc:	d007      	beq.n	800690e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006916:	d97c      	bls.n	8006a12 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_SPI_TransmitReceive+0x13e>
 8006920:	8a7b      	ldrh	r3, [r7, #18]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d169      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	881a      	ldrh	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	1c9a      	adds	r2, r3, #2
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006940:	b29b      	uxth	r3, r3
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800694a:	e056      	b.n	80069fa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0302 	and.w	r3, r3, #2
 8006956:	2b02      	cmp	r3, #2
 8006958:	d11b      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x1aa>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800695e:	b29b      	uxth	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d016      	beq.n	8006992 <HAL_SPI_TransmitReceive+0x1aa>
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	2b01      	cmp	r3, #1
 8006968:	d113      	bne.n	8006992 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	1c9a      	adds	r2, r3, #2
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	3b01      	subs	r3, #1
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d11c      	bne.n	80069da <HAL_SPI_TransmitReceive+0x1f2>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	b292      	uxth	r2, r2
 80069b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	1c9a      	adds	r2, r3, #2
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069da:	f7fd f8ef 	bl	8003bbc <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d807      	bhi.n	80069fa <HAL_SPI_TransmitReceive+0x212>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069f0:	d003      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80069f8:	e0fb      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1a3      	bne.n	800694c <HAL_SPI_TransmitReceive+0x164>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d19d      	bne.n	800694c <HAL_SPI_TransmitReceive+0x164>
 8006a10:	e0df      	b.n	8006bd2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x23a>
 8006a1a:	8a7b      	ldrh	r3, [r7, #18]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 80cb 	bne.w	8006bb8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d912      	bls.n	8006a52 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	881a      	ldrh	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	1c9a      	adds	r2, r3, #2
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	3b02      	subs	r3, #2
 8006a4a:	b29a      	uxth	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a50:	e0b2      	b.n	8006bb8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a78:	e09e      	b.n	8006bb8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d134      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x30a>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d02f      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x30a>
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d12c      	bne.n	8006af2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d912      	bls.n	8006ac8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	881a      	ldrh	r2, [r3, #0]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	1c9a      	adds	r2, r3, #2
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	3b02      	subs	r3, #2
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ac6:	e012      	b.n	8006aee <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	330c      	adds	r3, #12
 8006ad2:	7812      	ldrb	r2, [r2, #0]
 8006ad4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d148      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x3aa>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d042      	beq.n	8006b92 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d923      	bls.n	8006b60 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68da      	ldr	r2, [r3, #12]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	b292      	uxth	r2, r2
 8006b24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	1c9a      	adds	r2, r3, #2
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b02      	subs	r3, #2
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d81f      	bhi.n	8006b8e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	e016      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f103 020c 	add.w	r2, r3, #12
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6c:	7812      	ldrb	r2, [r2, #0]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b92:	f7fd f813 	bl	8003bbc <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d803      	bhi.n	8006baa <HAL_SPI_TransmitReceive+0x3c2>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba8:	d102      	bne.n	8006bb0 <HAL_SPI_TransmitReceive+0x3c8>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d103      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bb6:	e01c      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f af5b 	bne.w	8006a7a <HAL_SPI_TransmitReceive+0x292>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f47f af54 	bne.w	8006a7a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f8f0 	bl	8006dbc <SPI_EndRxTxTransaction>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d006      	beq.n	8006bf0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2220      	movs	r2, #32
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60
 8006bee:	e000      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006bf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3728      	adds	r7, #40	; 0x28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	60f8      	str	r0, [r7, #12]
 8006c16:	60b9      	str	r1, [r7, #8]
 8006c18:	603b      	str	r3, [r7, #0]
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1e:	e04c      	b.n	8006cba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c26:	d048      	beq.n	8006cba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006c28:	f7fc ffc8 	bl	8003bbc <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d902      	bls.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d13d      	bne.n	8006cba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c56:	d111      	bne.n	8006c7c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c60:	d004      	beq.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6a:	d107      	bne.n	8006c7c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c84:	d10f      	bne.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ca4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e00f      	b.n	8006cda <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	bf0c      	ite	eq
 8006cca:	2301      	moveq	r3, #1
 8006ccc:	2300      	movne	r3, #0
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d1a3      	bne.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	60f8      	str	r0, [r7, #12]
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006cf0:	e057      	b.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cf8:	d106      	bne.n	8006d08 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d0e:	d048      	beq.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006d10:	f7fc ff54 	bl	8003bbc <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d902      	bls.n	8006d26 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d13d      	bne.n	8006da2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d3e:	d111      	bne.n	8006d64 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	d004      	beq.n	8006d54 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d52:	d107      	bne.n	8006d64 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6c:	d10f      	bne.n	8006d8e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e008      	b.n	8006db4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4013      	ands	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d19f      	bne.n	8006cf2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af02      	add	r7, sp, #8
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	9300      	str	r3, [sp, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff ff84 	bl	8006ce2 <SPI_WaitFifoStateUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de4:	f043 0220 	orr.w	r2, r3, #32
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e027      	b.n	8006e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f7ff ff07 	bl	8006c0e <SPI_WaitFlagStateUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e0a:	f043 0220 	orr.w	r2, r3, #32
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e014      	b.n	8006e40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7ff ff5d 	bl	8006ce2 <SPI_WaitFifoStateUntilTimeout>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e32:	f043 0220 	orr.w	r2, r3, #32
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e000      	b.n	8006e40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e01d      	b.n	8006e96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fc fbcc 	bl	800360c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3304      	adds	r3, #4
 8006e84:	4619      	mov	r1, r3
 8006e86:	4610      	mov	r0, r2
 8006e88:	f000 fd02 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689a      	ldr	r2, [r3, #8]
 8006ebe:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <HAL_TIM_Base_Start_IT+0x50>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b06      	cmp	r3, #6
 8006ec8:	d00b      	beq.n	8006ee2 <HAL_TIM_Base_Start_IT+0x42>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed0:	d007      	beq.n	8006ee2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	00010007 	.word	0x00010007

08006ef4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e01d      	b.n	8006f42 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f815 	bl	8006f4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f000 fcac 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e01d      	b.n	8006fac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f815 	bl	8006fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	3304      	adds	r3, #4
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f000 fc77 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f001 f878 	bl	80080d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a17      	ldr	r2, [pc, #92]	; (8007044 <HAL_TIM_PWM_Start+0x7c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_PWM_Start+0x2c>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a16      	ldr	r2, [pc, #88]	; (8007048 <HAL_TIM_PWM_Start+0x80>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_PWM_Start+0x30>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_PWM_Start+0x32>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <HAL_TIM_PWM_Start+0x84>)
 8007016:	4013      	ands	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b06      	cmp	r3, #6
 800701e:	d00b      	beq.n	8007038 <HAL_TIM_PWM_Start+0x70>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007026:	d007      	beq.n	8007038 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400
 800704c:	00010007 	.word	0x00010007

08007050 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e02d      	b.n	80070c0 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f825 	bl	80070c8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3304      	adds	r3, #4
 800708e:	4619      	mov	r1, r3
 8007090:	4610      	mov	r0, r2
 8007092:	f000 fbfd 	bl	8007890 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0208 	bic.w	r2, r2, #8
 80070a4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d122      	bne.n	8007138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d11b      	bne.n	8007138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0202 	mvn.w	r2, #2
 8007108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fb98 	bl	8007854 <HAL_TIM_IC_CaptureCallback>
 8007124:	e005      	b.n	8007132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fb8a 	bl	8007840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fb9b 	bl	8007868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d122      	bne.n	800718c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d11b      	bne.n	800718c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f06f 0204 	mvn.w	r2, #4
 800715c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fb6e 	bl	8007854 <HAL_TIM_IC_CaptureCallback>
 8007178:	e005      	b.n	8007186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb60 	bl	8007840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fb71 	bl	8007868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	f003 0308 	and.w	r3, r3, #8
 8007196:	2b08      	cmp	r3, #8
 8007198:	d122      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f003 0308 	and.w	r3, r3, #8
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d11b      	bne.n	80071e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0208 	mvn.w	r2, #8
 80071b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2204      	movs	r2, #4
 80071b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb44 	bl	8007854 <HAL_TIM_IC_CaptureCallback>
 80071cc:	e005      	b.n	80071da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb36 	bl	8007840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb47 	bl	8007868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d122      	bne.n	8007234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d11b      	bne.n	8007234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0210 	mvn.w	r2, #16
 8007204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2208      	movs	r2, #8
 800720a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fb1a 	bl	8007854 <HAL_TIM_IC_CaptureCallback>
 8007220:	e005      	b.n	800722e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb0c 	bl	8007840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb1d 	bl	8007868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b01      	cmp	r3, #1
 8007240:	d10e      	bne.n	8007260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b01      	cmp	r3, #1
 800724e:	d107      	bne.n	8007260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0201 	mvn.w	r2, #1
 8007258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fc f8c6 	bl	80033ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b80      	cmp	r3, #128	; 0x80
 800726c:	d10e      	bne.n	800728c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d107      	bne.n	800728c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 f88e 	bl	80083a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729a:	d10e      	bne.n	80072ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b80      	cmp	r3, #128	; 0x80
 80072a8:	d107      	bne.n	80072ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f001 f881 	bl	80083bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d10e      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d2:	2b40      	cmp	r3, #64	; 0x40
 80072d4:	d107      	bne.n	80072e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 facb 	bl	800787c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d10e      	bne.n	8007312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d107      	bne.n	8007312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f06f 0220 	mvn.w	r2, #32
 800730a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 f841 	bl	8008394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_TIM_OC_ConfigChannel+0x1a>
 8007332:	2302      	movs	r3, #2
 8007334:	e06c      	b.n	8007410 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2202      	movs	r2, #2
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b14      	cmp	r3, #20
 800734a:	d857      	bhi.n	80073fc <HAL_TIM_OC_ConfigChannel+0xe0>
 800734c:	a201      	add	r2, pc, #4	; (adr r2, 8007354 <HAL_TIM_OC_ConfigChannel+0x38>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080073fd 	.word	0x080073fd
 800735c:	080073fd 	.word	0x080073fd
 8007360:	080073fd 	.word	0x080073fd
 8007364:	080073b7 	.word	0x080073b7
 8007368:	080073fd 	.word	0x080073fd
 800736c:	080073fd 	.word	0x080073fd
 8007370:	080073fd 	.word	0x080073fd
 8007374:	080073c5 	.word	0x080073c5
 8007378:	080073fd 	.word	0x080073fd
 800737c:	080073fd 	.word	0x080073fd
 8007380:	080073fd 	.word	0x080073fd
 8007384:	080073d3 	.word	0x080073d3
 8007388:	080073fd 	.word	0x080073fd
 800738c:	080073fd 	.word	0x080073fd
 8007390:	080073fd 	.word	0x080073fd
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073fd 	.word	0x080073fd
 800739c:	080073fd 	.word	0x080073fd
 80073a0:	080073fd 	.word	0x080073fd
 80073a4:	080073ef 	.word	0x080073ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fb0e 	bl	80079d0 <TIM_OC1_SetConfig>
      break;
 80073b4:	e023      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fb79 	bl	8007ab4 <TIM_OC2_SetConfig>
      break;
 80073c2:	e01c      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fbea 	bl	8007ba4 <TIM_OC3_SetConfig>
      break;
 80073d0:	e015      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	4618      	mov	r0, r3
 80073da:	f000 fc59 	bl	8007c90 <TIM_OC4_SetConfig>
      break;
 80073de:	e00e      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fcaa 	bl	8007d40 <TIM_OC5_SetConfig>
      break;
 80073ec:	e007      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 fcf5 	bl	8007de4 <TIM_OC6_SetConfig>
      break;
 80073fa:	e000      	b.n	80073fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 80073fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742a:	2b01      	cmp	r3, #1
 800742c:	d101      	bne.n	8007432 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800742e:	2302      	movs	r3, #2
 8007430:	e105      	b.n	800763e <HAL_TIM_PWM_ConfigChannel+0x226>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b14      	cmp	r3, #20
 8007446:	f200 80f0 	bhi.w	800762a <HAL_TIM_PWM_ConfigChannel+0x212>
 800744a:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007450:	080074a5 	.word	0x080074a5
 8007454:	0800762b 	.word	0x0800762b
 8007458:	0800762b 	.word	0x0800762b
 800745c:	0800762b 	.word	0x0800762b
 8007460:	080074e5 	.word	0x080074e5
 8007464:	0800762b 	.word	0x0800762b
 8007468:	0800762b 	.word	0x0800762b
 800746c:	0800762b 	.word	0x0800762b
 8007470:	08007527 	.word	0x08007527
 8007474:	0800762b 	.word	0x0800762b
 8007478:	0800762b 	.word	0x0800762b
 800747c:	0800762b 	.word	0x0800762b
 8007480:	08007567 	.word	0x08007567
 8007484:	0800762b 	.word	0x0800762b
 8007488:	0800762b 	.word	0x0800762b
 800748c:	0800762b 	.word	0x0800762b
 8007490:	080075a9 	.word	0x080075a9
 8007494:	0800762b 	.word	0x0800762b
 8007498:	0800762b 	.word	0x0800762b
 800749c:	0800762b 	.word	0x0800762b
 80074a0:	080075e9 	.word	0x080075e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fa90 	bl	80079d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0208 	orr.w	r2, r2, #8
 80074be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699a      	ldr	r2, [r3, #24]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 0204 	bic.w	r2, r2, #4
 80074ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6999      	ldr	r1, [r3, #24]
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	619a      	str	r2, [r3, #24]
      break;
 80074e2:	e0a3      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fae2 	bl	8007ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699a      	ldr	r2, [r3, #24]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6999      	ldr	r1, [r3, #24]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	619a      	str	r2, [r3, #24]
      break;
 8007524:	e082      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68b9      	ldr	r1, [r7, #8]
 800752c:	4618      	mov	r0, r3
 800752e:	f000 fb39 	bl	8007ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f042 0208 	orr.w	r2, r2, #8
 8007540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0204 	bic.w	r2, r2, #4
 8007550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69d9      	ldr	r1, [r3, #28]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	61da      	str	r2, [r3, #28]
      break;
 8007564:	e062      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68b9      	ldr	r1, [r7, #8]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fb8f 	bl	8007c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69da      	ldr	r2, [r3, #28]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69da      	ldr	r2, [r3, #28]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69d9      	ldr	r1, [r3, #28]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	021a      	lsls	r2, r3, #8
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	61da      	str	r2, [r3, #28]
      break;
 80075a6:	e041      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68b9      	ldr	r1, [r7, #8]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 fbc6 	bl	8007d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f042 0208 	orr.w	r2, r2, #8
 80075c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0204 	bic.w	r2, r2, #4
 80075d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	691a      	ldr	r2, [r3, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80075e6:	e021      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fbf8 	bl	8007de4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007602:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007612:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	021a      	lsls	r2, r3, #8
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	430a      	orrs	r2, r1
 8007626:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007628:	e000      	b.n	800762c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800762a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop

08007648 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_TIM_ConfigClockSource+0x18>
 800765c:	2302      	movs	r3, #2
 800765e:	e0a6      	b.n	80077ae <HAL_TIM_ConfigClockSource+0x166>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	4b4f      	ldr	r3, [pc, #316]	; (80077b8 <HAL_TIM_ConfigClockSource+0x170>)
 800767c:	4013      	ands	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007686:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d067      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0x120>
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d80b      	bhi.n	80076b4 <HAL_TIM_ConfigClockSource+0x6c>
 800769c:	2b10      	cmp	r3, #16
 800769e:	d073      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x140>
 80076a0:	2b10      	cmp	r3, #16
 80076a2:	d802      	bhi.n	80076aa <HAL_TIM_ConfigClockSource+0x62>
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d06f      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80076a8:	e078      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80076aa:	2b20      	cmp	r3, #32
 80076ac:	d06c      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x140>
 80076ae:	2b30      	cmp	r3, #48	; 0x30
 80076b0:	d06a      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80076b2:	e073      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80076b4:	2b70      	cmp	r3, #112	; 0x70
 80076b6:	d00d      	beq.n	80076d4 <HAL_TIM_ConfigClockSource+0x8c>
 80076b8:	2b70      	cmp	r3, #112	; 0x70
 80076ba:	d804      	bhi.n	80076c6 <HAL_TIM_ConfigClockSource+0x7e>
 80076bc:	2b50      	cmp	r3, #80	; 0x50
 80076be:	d033      	beq.n	8007728 <HAL_TIM_ConfigClockSource+0xe0>
 80076c0:	2b60      	cmp	r3, #96	; 0x60
 80076c2:	d041      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80076c4:	e06a      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80076c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ca:	d066      	beq.n	800779a <HAL_TIM_ConfigClockSource+0x152>
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d0:	d017      	beq.n	8007702 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80076d2:	e063      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	6899      	ldr	r1, [r3, #8]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	f000 fcd4 	bl	8008090 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80076f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	609a      	str	r2, [r3, #8]
      break;
 8007700:	e04c      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f000 fcbd 	bl	8008090 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007724:	609a      	str	r2, [r3, #8]
      break;
 8007726:	e039      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	6859      	ldr	r1, [r3, #4]
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	461a      	mov	r2, r3
 8007736:	f000 fc31 	bl	8007f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2150      	movs	r1, #80	; 0x50
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fc8a 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007746:	e029      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	461a      	mov	r2, r3
 8007756:	f000 fc50 	bl	8007ffa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2160      	movs	r1, #96	; 0x60
 8007760:	4618      	mov	r0, r3
 8007762:	f000 fc7a 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007766:	e019      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6859      	ldr	r1, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	f000 fc11 	bl	8007f9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2140      	movs	r1, #64	; 0x40
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fc6a 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007786:	e009      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f000 fc61 	bl	800805a <TIM_ITRx_SetConfig>
      break;
 8007798:	e000      	b.n	800779c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800779a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	fffeff88 	.word	0xfffeff88

080077bc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e031      	b.n	8007838 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb50 	bl	8007e8c <TIM_SlaveTimer_SetConfig>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e018      	b.n	8007838 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007814:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007824:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d00f      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3c      	ldr	r2, [pc, #240]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3b      	ldr	r2, [pc, #236]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3a      	ldr	r2, [pc, #232]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d108      	bne.n	80078e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2f      	ldr	r2, [pc, #188]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f0:	d027      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d023      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2b      	ldr	r2, [pc, #172]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01f      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2a      	ldr	r2, [pc, #168]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d017      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <TIM_Base_SetConfig+0x128>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <TIM_Base_SetConfig+0x12c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00f      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <TIM_Base_SetConfig+0x130>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a25      	ldr	r2, [pc, #148]	; (80079c4 <TIM_Base_SetConfig+0x134>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <TIM_Base_SetConfig+0x138>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a23      	ldr	r2, [pc, #140]	; (80079cc <TIM_Base_SetConfig+0x13c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d108      	bne.n	8007954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	615a      	str	r2, [r3, #20]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40014400 	.word	0x40014400
 80079c0:	40014800 	.word	0x40014800
 80079c4:	40001800 	.word	0x40001800
 80079c8:	40001c00 	.word	0x40001c00
 80079cc:	40002000 	.word	0x40002000

080079d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <TIM_OC1_SetConfig+0xd8>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0302 	bic.w	r3, r3, #2
 8007a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <TIM_OC1_SetConfig+0xdc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC1_SetConfig+0x64>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <TIM_OC1_SetConfig+0xe0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a16      	ldr	r2, [pc, #88]	; (8007aac <TIM_OC1_SetConfig+0xdc>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC1_SetConfig+0x8e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <TIM_OC1_SetConfig+0xe0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d111      	bne.n	8007a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	621a      	str	r2, [r3, #32]
}
 8007a9c:	bf00      	nop
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	fffeff8f 	.word	0xfffeff8f
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f023 0210 	bic.w	r2, r3, #16
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4b2e      	ldr	r3, [pc, #184]	; (8007b98 <TIM_OC2_SetConfig+0xe4>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f023 0320 	bic.w	r3, r3, #32
 8007afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a23      	ldr	r2, [pc, #140]	; (8007b9c <TIM_OC2_SetConfig+0xe8>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC2_SetConfig+0x68>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a22      	ldr	r2, [pc, #136]	; (8007ba0 <TIM_OC2_SetConfig+0xec>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10d      	bne.n	8007b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	011b      	lsls	r3, r3, #4
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	4a18      	ldr	r2, [pc, #96]	; (8007b9c <TIM_OC2_SetConfig+0xe8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d003      	beq.n	8007b48 <TIM_OC2_SetConfig+0x94>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <TIM_OC2_SetConfig+0xec>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d113      	bne.n	8007b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	621a      	str	r2, [r3, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	feff8fff 	.word	0xfeff8fff
 8007b9c:	40010000 	.word	0x40010000
 8007ba0:	40010400 	.word	0x40010400

08007ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b087      	sub	sp, #28
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <TIM_OC3_SetConfig+0xe0>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0303 	bic.w	r3, r3, #3
 8007bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <TIM_OC3_SetConfig+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d003      	beq.n	8007c0a <TIM_OC3_SetConfig+0x66>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a21      	ldr	r2, [pc, #132]	; (8007c8c <TIM_OC3_SetConfig+0xe8>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d10d      	bne.n	8007c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC3_SetConfig+0xe4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_OC3_SetConfig+0x92>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <TIM_OC3_SetConfig+0xe8>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d113      	bne.n	8007c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	bf00      	nop
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	fffeff8f 	.word	0xfffeff8f
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40010400 	.word	0x40010400

08007c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b1e      	ldr	r3, [pc, #120]	; (8007d34 <TIM_OC4_SetConfig+0xa4>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a13      	ldr	r2, [pc, #76]	; (8007d38 <TIM_OC4_SetConfig+0xa8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d003      	beq.n	8007cf8 <TIM_OC4_SetConfig+0x68>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a12      	ldr	r2, [pc, #72]	; (8007d3c <TIM_OC4_SetConfig+0xac>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d109      	bne.n	8007d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	019b      	lsls	r3, r3, #6
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	feff8fff 	.word	0xfeff8fff
 8007d38:	40010000 	.word	0x40010000
 8007d3c:	40010400 	.word	0x40010400

08007d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4b1b      	ldr	r3, [pc, #108]	; (8007dd8 <TIM_OC5_SetConfig+0x98>)
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	041b      	lsls	r3, r3, #16
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a12      	ldr	r2, [pc, #72]	; (8007ddc <TIM_OC5_SetConfig+0x9c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d003      	beq.n	8007d9e <TIM_OC5_SetConfig+0x5e>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a11      	ldr	r2, [pc, #68]	; (8007de0 <TIM_OC5_SetConfig+0xa0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d109      	bne.n	8007db2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	621a      	str	r2, [r3, #32]
}
 8007dcc:	bf00      	nop
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	fffeff8f 	.word	0xfffeff8f
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40010400 	.word	0x40010400

08007de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b087      	sub	sp, #28
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4b1c      	ldr	r3, [pc, #112]	; (8007e80 <TIM_OC6_SetConfig+0x9c>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	021b      	lsls	r3, r3, #8
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	051b      	lsls	r3, r3, #20
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <TIM_OC6_SetConfig+0xa0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC6_SetConfig+0x60>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a12      	ldr	r2, [pc, #72]	; (8007e88 <TIM_OC6_SetConfig+0xa4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d109      	bne.n	8007e58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	029b      	lsls	r3, r3, #10
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	feff8fff 	.word	0xfeff8fff
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40010400 	.word	0x40010400

08007e8c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4b39      	ldr	r3, [pc, #228]	; (8007f98 <TIM_SlaveTimer_SetConfig+0x10c>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b30      	cmp	r3, #48	; 0x30
 8007ed0:	d05c      	beq.n	8007f8c <TIM_SlaveTimer_SetConfig+0x100>
 8007ed2:	2b30      	cmp	r3, #48	; 0x30
 8007ed4:	d806      	bhi.n	8007ee4 <TIM_SlaveTimer_SetConfig+0x58>
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d058      	beq.n	8007f8c <TIM_SlaveTimer_SetConfig+0x100>
 8007eda:	2b20      	cmp	r3, #32
 8007edc:	d056      	beq.n	8007f8c <TIM_SlaveTimer_SetConfig+0x100>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d054      	beq.n	8007f8c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007ee2:	e054      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007ee4:	2b50      	cmp	r3, #80	; 0x50
 8007ee6:	d03d      	beq.n	8007f64 <TIM_SlaveTimer_SetConfig+0xd8>
 8007ee8:	2b50      	cmp	r3, #80	; 0x50
 8007eea:	d802      	bhi.n	8007ef2 <TIM_SlaveTimer_SetConfig+0x66>
 8007eec:	2b40      	cmp	r3, #64	; 0x40
 8007eee:	d010      	beq.n	8007f12 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007ef0:	e04d      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007ef2:	2b60      	cmp	r3, #96	; 0x60
 8007ef4:	d040      	beq.n	8007f78 <TIM_SlaveTimer_SetConfig+0xec>
 8007ef6:	2b70      	cmp	r3, #112	; 0x70
 8007ef8:	d000      	beq.n	8007efc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007efa:	e048      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	68d9      	ldr	r1, [r3, #12]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	f000 f8c0 	bl	8008090 <TIM_ETR_SetConfig>
      break;
 8007f10:	e03d      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b05      	cmp	r3, #5
 8007f18:	d101      	bne.n	8007f1e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e038      	b.n	8007f90 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6a1b      	ldr	r3, [r3, #32]
 8007f24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6a1a      	ldr	r2, [r3, #32]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	621a      	str	r2, [r3, #32]
      break;
 8007f62:	e014      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6899      	ldr	r1, [r3, #8]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	461a      	mov	r2, r3
 8007f72:	f000 f813 	bl	8007f9c <TIM_TI1_ConfigInputStage>
      break;
 8007f76:	e00a      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6899      	ldr	r1, [r3, #8]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	461a      	mov	r2, r3
 8007f86:	f000 f838 	bl	8007ffa <TIM_TI2_ConfigInputStage>
      break;
 8007f8a:	e000      	b.n	8007f8e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007f8c:	bf00      	nop
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	fffefff8 	.word	0xfffefff8

08007f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f023 0201 	bic.w	r2, r3, #1
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 030a 	bic.w	r3, r3, #10
 8007fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	621a      	str	r2, [r3, #32]
}
 8007fee:	bf00      	nop
 8007ff0:	371c      	adds	r7, #28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b087      	sub	sp, #28
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	60b9      	str	r1, [r7, #8]
 8008004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f023 0210 	bic.w	r2, r3, #16
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	031b      	lsls	r3, r3, #12
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	4313      	orrs	r3, r2
 800802e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	693a      	ldr	r2, [r7, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	621a      	str	r2, [r3, #32]
}
 800804e:	bf00      	nop
 8008050:	371c      	adds	r7, #28
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	f043 0307 	orr.w	r3, r3, #7
 800807c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	609a      	str	r2, [r3, #8]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	021a      	lsls	r2, r3, #8
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	609a      	str	r2, [r3, #8]
}
 80080c4:	bf00      	nop
 80080c6:	371c      	adds	r7, #28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	2201      	movs	r2, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6a1a      	ldr	r2, [r3, #32]
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	43db      	mvns	r3, r3
 80080f2:	401a      	ands	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6a1a      	ldr	r2, [r3, #32]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 031f 	and.w	r3, r3, #31
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	431a      	orrs	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2204      	movs	r2, #4
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f94e 	bl	80083d0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <HAL_TIMEx_PWMN_Start+0x5c>)
 800814c:	4013      	ands	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b06      	cmp	r3, #6
 8008154:	d00b      	beq.n	800816e <HAL_TIMEx_PWMN_Start+0x52>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800815c:	d007      	beq.n	800816e <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f042 0201 	orr.w	r2, r2, #1
 800816c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	00010007 	.word	0x00010007

0800817c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008190:	2302      	movs	r3, #2
 8008192:	e06d      	b.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a30      	ldr	r2, [pc, #192]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d004      	beq.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a2f      	ldr	r2, [pc, #188]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d108      	bne.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a20      	ldr	r2, [pc, #128]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d022      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008206:	d01d      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d018      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d013      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a1a      	ldr	r2, [pc, #104]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00e      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a15      	ldr	r2, [pc, #84]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d009      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a16      	ldr	r2, [pc, #88]	; (8008290 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a15      	ldr	r2, [pc, #84]	; (8008294 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d10c      	bne.n	800825e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4313      	orrs	r3, r2
 8008254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40010000 	.word	0x40010000
 8008280:	40010400 	.word	0x40010400
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40000c00 	.word	0x40000c00
 8008290:	40014000 	.word	0x40014000
 8008294:	40001800 	.word	0x40001800

08008298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d101      	bne.n	80082b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082b0:	2302      	movs	r3, #2
 80082b2:	e065      	b.n	8008380 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	041b      	lsls	r3, r3, #16
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a16      	ldr	r2, [pc, #88]	; (800838c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d004      	beq.n	8008342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a14      	ldr	r2, [pc, #80]	; (8008390 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d115      	bne.n	800836e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	4313      	orrs	r3, r2
 8008350:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	69db      	ldr	r3, [r3, #28]
 800835c:	4313      	orrs	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr
 800838c:	40010000 	.word	0x40010000
 8008390:	40010400 	.word	0x40010400

08008394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b087      	sub	sp, #28
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f003 031f 	and.w	r3, r3, #31
 80083e2:	2204      	movs	r2, #4
 80083e4:	fa02 f303 	lsl.w	r3, r2, r3
 80083e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a1a      	ldr	r2, [r3, #32]
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	43db      	mvns	r3, r3
 80083f2:	401a      	ands	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6a1a      	ldr	r2, [r3, #32]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	431a      	orrs	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b082      	sub	sp, #8
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e040      	b.n	80084ae <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7fb f983 	bl	8003748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2224      	movs	r2, #36	; 0x24
 8008446:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f8bd 	bl	80085d8 <UART_SetConfig>
 800845e:	4603      	mov	r3, r0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e022      	b.n	80084ae <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d002      	beq.n	8008476 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fb5b 	bl	8008b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008484:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008494:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0201 	orr.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fbe2 	bl	8008c70 <UART_CheckIdleState>
 80084ac:	4603      	mov	r3, r0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b08a      	sub	sp, #40	; 0x28
 80084ba:	af02      	add	r7, sp, #8
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d17f      	bne.n	80085ce <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_UART_Transmit+0x24>
 80084d4:	88fb      	ldrh	r3, [r7, #6]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e078      	b.n	80085d0 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d101      	bne.n	80084ec <HAL_UART_Transmit+0x36>
 80084e8:	2302      	movs	r3, #2
 80084ea:	e071      	b.n	80085d0 <HAL_UART_Transmit+0x11a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2221      	movs	r2, #33	; 0x21
 80084fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008500:	f7fb fb5c 	bl	8003bbc <HAL_GetTick>
 8008504:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	88fa      	ldrh	r2, [r7, #6]
 8008512:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851e:	d108      	bne.n	8008532 <HAL_UART_Transmit+0x7c>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d104      	bne.n	8008532 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61bb      	str	r3, [r7, #24]
 8008530:	e003      	b.n	800853a <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008536:	2300      	movs	r3, #0
 8008538:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008542:	e02c      	b.n	800859e <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	2200      	movs	r2, #0
 800854c:	2180      	movs	r1, #128	; 0x80
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fbbd 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d001      	beq.n	800855e <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e038      	b.n	80085d0 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10b      	bne.n	800857c <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008564:	69bb      	ldr	r3, [r7, #24]
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	3302      	adds	r3, #2
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	e007      	b.n	800858c <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	781a      	ldrb	r2, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	3301      	adds	r3, #1
 800858a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008592:	b29b      	uxth	r3, r3
 8008594:	3b01      	subs	r3, #1
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1cc      	bne.n	8008544 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2140      	movs	r1, #64	; 0x40
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fb8a 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e005      	b.n	80085d0 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e000      	b.n	80085d0 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80085ce:	2302      	movs	r3, #2
  }
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3720      	adds	r7, #32
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b088      	sub	sp, #32
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	431a      	orrs	r2, r3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	431a      	orrs	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	4bb1      	ldr	r3, [pc, #708]	; (80088cc <UART_SetConfig+0x2f4>)
 8008608:	4013      	ands	r3, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	6939      	ldr	r1, [r7, #16]
 8008610:	430b      	orrs	r3, r1
 8008612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68da      	ldr	r2, [r3, #12]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a1b      	ldr	r3, [r3, #32]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	430a      	orrs	r2, r1
 800864c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a9f      	ldr	r2, [pc, #636]	; (80088d0 <UART_SetConfig+0x2f8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d121      	bne.n	800869c <UART_SetConfig+0xc4>
 8008658:	4b9e      	ldr	r3, [pc, #632]	; (80088d4 <UART_SetConfig+0x2fc>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	2b03      	cmp	r3, #3
 8008664:	d816      	bhi.n	8008694 <UART_SetConfig+0xbc>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0x94>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	0800867d 	.word	0x0800867d
 8008670:	08008689 	.word	0x08008689
 8008674:	08008683 	.word	0x08008683
 8008678:	0800868f 	.word	0x0800868f
 800867c:	2301      	movs	r3, #1
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e151      	b.n	8008926 <UART_SetConfig+0x34e>
 8008682:	2302      	movs	r3, #2
 8008684:	77fb      	strb	r3, [r7, #31]
 8008686:	e14e      	b.n	8008926 <UART_SetConfig+0x34e>
 8008688:	2304      	movs	r3, #4
 800868a:	77fb      	strb	r3, [r7, #31]
 800868c:	e14b      	b.n	8008926 <UART_SetConfig+0x34e>
 800868e:	2308      	movs	r3, #8
 8008690:	77fb      	strb	r3, [r7, #31]
 8008692:	e148      	b.n	8008926 <UART_SetConfig+0x34e>
 8008694:	2310      	movs	r3, #16
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	bf00      	nop
 800869a:	e144      	b.n	8008926 <UART_SetConfig+0x34e>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a8d      	ldr	r2, [pc, #564]	; (80088d8 <UART_SetConfig+0x300>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d134      	bne.n	8008710 <UART_SetConfig+0x138>
 80086a6:	4b8b      	ldr	r3, [pc, #556]	; (80088d4 <UART_SetConfig+0x2fc>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ac:	f003 030c 	and.w	r3, r3, #12
 80086b0:	2b0c      	cmp	r3, #12
 80086b2:	d829      	bhi.n	8008708 <UART_SetConfig+0x130>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <UART_SetConfig+0xe4>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086f1 	.word	0x080086f1
 80086c0:	08008709 	.word	0x08008709
 80086c4:	08008709 	.word	0x08008709
 80086c8:	08008709 	.word	0x08008709
 80086cc:	080086fd 	.word	0x080086fd
 80086d0:	08008709 	.word	0x08008709
 80086d4:	08008709 	.word	0x08008709
 80086d8:	08008709 	.word	0x08008709
 80086dc:	080086f7 	.word	0x080086f7
 80086e0:	08008709 	.word	0x08008709
 80086e4:	08008709 	.word	0x08008709
 80086e8:	08008709 	.word	0x08008709
 80086ec:	08008703 	.word	0x08008703
 80086f0:	2300      	movs	r3, #0
 80086f2:	77fb      	strb	r3, [r7, #31]
 80086f4:	e117      	b.n	8008926 <UART_SetConfig+0x34e>
 80086f6:	2302      	movs	r3, #2
 80086f8:	77fb      	strb	r3, [r7, #31]
 80086fa:	e114      	b.n	8008926 <UART_SetConfig+0x34e>
 80086fc:	2304      	movs	r3, #4
 80086fe:	77fb      	strb	r3, [r7, #31]
 8008700:	e111      	b.n	8008926 <UART_SetConfig+0x34e>
 8008702:	2308      	movs	r3, #8
 8008704:	77fb      	strb	r3, [r7, #31]
 8008706:	e10e      	b.n	8008926 <UART_SetConfig+0x34e>
 8008708:	2310      	movs	r3, #16
 800870a:	77fb      	strb	r3, [r7, #31]
 800870c:	bf00      	nop
 800870e:	e10a      	b.n	8008926 <UART_SetConfig+0x34e>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a71      	ldr	r2, [pc, #452]	; (80088dc <UART_SetConfig+0x304>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d120      	bne.n	800875c <UART_SetConfig+0x184>
 800871a:	4b6e      	ldr	r3, [pc, #440]	; (80088d4 <UART_SetConfig+0x2fc>)
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008724:	2b10      	cmp	r3, #16
 8008726:	d00f      	beq.n	8008748 <UART_SetConfig+0x170>
 8008728:	2b10      	cmp	r3, #16
 800872a:	d802      	bhi.n	8008732 <UART_SetConfig+0x15a>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d005      	beq.n	800873c <UART_SetConfig+0x164>
 8008730:	e010      	b.n	8008754 <UART_SetConfig+0x17c>
 8008732:	2b20      	cmp	r3, #32
 8008734:	d005      	beq.n	8008742 <UART_SetConfig+0x16a>
 8008736:	2b30      	cmp	r3, #48	; 0x30
 8008738:	d009      	beq.n	800874e <UART_SetConfig+0x176>
 800873a:	e00b      	b.n	8008754 <UART_SetConfig+0x17c>
 800873c:	2300      	movs	r3, #0
 800873e:	77fb      	strb	r3, [r7, #31]
 8008740:	e0f1      	b.n	8008926 <UART_SetConfig+0x34e>
 8008742:	2302      	movs	r3, #2
 8008744:	77fb      	strb	r3, [r7, #31]
 8008746:	e0ee      	b.n	8008926 <UART_SetConfig+0x34e>
 8008748:	2304      	movs	r3, #4
 800874a:	77fb      	strb	r3, [r7, #31]
 800874c:	e0eb      	b.n	8008926 <UART_SetConfig+0x34e>
 800874e:	2308      	movs	r3, #8
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e0e8      	b.n	8008926 <UART_SetConfig+0x34e>
 8008754:	2310      	movs	r3, #16
 8008756:	77fb      	strb	r3, [r7, #31]
 8008758:	bf00      	nop
 800875a:	e0e4      	b.n	8008926 <UART_SetConfig+0x34e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a5f      	ldr	r2, [pc, #380]	; (80088e0 <UART_SetConfig+0x308>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d120      	bne.n	80087a8 <UART_SetConfig+0x1d0>
 8008766:	4b5b      	ldr	r3, [pc, #364]	; (80088d4 <UART_SetConfig+0x2fc>)
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	d00f      	beq.n	8008794 <UART_SetConfig+0x1bc>
 8008774:	2b40      	cmp	r3, #64	; 0x40
 8008776:	d802      	bhi.n	800877e <UART_SetConfig+0x1a6>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <UART_SetConfig+0x1b0>
 800877c:	e010      	b.n	80087a0 <UART_SetConfig+0x1c8>
 800877e:	2b80      	cmp	r3, #128	; 0x80
 8008780:	d005      	beq.n	800878e <UART_SetConfig+0x1b6>
 8008782:	2bc0      	cmp	r3, #192	; 0xc0
 8008784:	d009      	beq.n	800879a <UART_SetConfig+0x1c2>
 8008786:	e00b      	b.n	80087a0 <UART_SetConfig+0x1c8>
 8008788:	2300      	movs	r3, #0
 800878a:	77fb      	strb	r3, [r7, #31]
 800878c:	e0cb      	b.n	8008926 <UART_SetConfig+0x34e>
 800878e:	2302      	movs	r3, #2
 8008790:	77fb      	strb	r3, [r7, #31]
 8008792:	e0c8      	b.n	8008926 <UART_SetConfig+0x34e>
 8008794:	2304      	movs	r3, #4
 8008796:	77fb      	strb	r3, [r7, #31]
 8008798:	e0c5      	b.n	8008926 <UART_SetConfig+0x34e>
 800879a:	2308      	movs	r3, #8
 800879c:	77fb      	strb	r3, [r7, #31]
 800879e:	e0c2      	b.n	8008926 <UART_SetConfig+0x34e>
 80087a0:	2310      	movs	r3, #16
 80087a2:	77fb      	strb	r3, [r7, #31]
 80087a4:	bf00      	nop
 80087a6:	e0be      	b.n	8008926 <UART_SetConfig+0x34e>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a4d      	ldr	r2, [pc, #308]	; (80088e4 <UART_SetConfig+0x30c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d124      	bne.n	80087fc <UART_SetConfig+0x224>
 80087b2:	4b48      	ldr	r3, [pc, #288]	; (80088d4 <UART_SetConfig+0x2fc>)
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	d012      	beq.n	80087e8 <UART_SetConfig+0x210>
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	d802      	bhi.n	80087ce <UART_SetConfig+0x1f6>
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d007      	beq.n	80087dc <UART_SetConfig+0x204>
 80087cc:	e012      	b.n	80087f4 <UART_SetConfig+0x21c>
 80087ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087d2:	d006      	beq.n	80087e2 <UART_SetConfig+0x20a>
 80087d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087d8:	d009      	beq.n	80087ee <UART_SetConfig+0x216>
 80087da:	e00b      	b.n	80087f4 <UART_SetConfig+0x21c>
 80087dc:	2300      	movs	r3, #0
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e0a1      	b.n	8008926 <UART_SetConfig+0x34e>
 80087e2:	2302      	movs	r3, #2
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e09e      	b.n	8008926 <UART_SetConfig+0x34e>
 80087e8:	2304      	movs	r3, #4
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e09b      	b.n	8008926 <UART_SetConfig+0x34e>
 80087ee:	2308      	movs	r3, #8
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	e098      	b.n	8008926 <UART_SetConfig+0x34e>
 80087f4:	2310      	movs	r3, #16
 80087f6:	77fb      	strb	r3, [r7, #31]
 80087f8:	bf00      	nop
 80087fa:	e094      	b.n	8008926 <UART_SetConfig+0x34e>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a39      	ldr	r2, [pc, #228]	; (80088e8 <UART_SetConfig+0x310>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d124      	bne.n	8008850 <UART_SetConfig+0x278>
 8008806:	4b33      	ldr	r3, [pc, #204]	; (80088d4 <UART_SetConfig+0x2fc>)
 8008808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d012      	beq.n	800883c <UART_SetConfig+0x264>
 8008816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800881a:	d802      	bhi.n	8008822 <UART_SetConfig+0x24a>
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <UART_SetConfig+0x258>
 8008820:	e012      	b.n	8008848 <UART_SetConfig+0x270>
 8008822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008826:	d006      	beq.n	8008836 <UART_SetConfig+0x25e>
 8008828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800882c:	d009      	beq.n	8008842 <UART_SetConfig+0x26a>
 800882e:	e00b      	b.n	8008848 <UART_SetConfig+0x270>
 8008830:	2301      	movs	r3, #1
 8008832:	77fb      	strb	r3, [r7, #31]
 8008834:	e077      	b.n	8008926 <UART_SetConfig+0x34e>
 8008836:	2302      	movs	r3, #2
 8008838:	77fb      	strb	r3, [r7, #31]
 800883a:	e074      	b.n	8008926 <UART_SetConfig+0x34e>
 800883c:	2304      	movs	r3, #4
 800883e:	77fb      	strb	r3, [r7, #31]
 8008840:	e071      	b.n	8008926 <UART_SetConfig+0x34e>
 8008842:	2308      	movs	r3, #8
 8008844:	77fb      	strb	r3, [r7, #31]
 8008846:	e06e      	b.n	8008926 <UART_SetConfig+0x34e>
 8008848:	2310      	movs	r3, #16
 800884a:	77fb      	strb	r3, [r7, #31]
 800884c:	bf00      	nop
 800884e:	e06a      	b.n	8008926 <UART_SetConfig+0x34e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a25      	ldr	r2, [pc, #148]	; (80088ec <UART_SetConfig+0x314>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d124      	bne.n	80088a4 <UART_SetConfig+0x2cc>
 800885a:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <UART_SetConfig+0x2fc>)
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008860:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008868:	d012      	beq.n	8008890 <UART_SetConfig+0x2b8>
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886e:	d802      	bhi.n	8008876 <UART_SetConfig+0x29e>
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <UART_SetConfig+0x2ac>
 8008874:	e012      	b.n	800889c <UART_SetConfig+0x2c4>
 8008876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800887a:	d006      	beq.n	800888a <UART_SetConfig+0x2b2>
 800887c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008880:	d009      	beq.n	8008896 <UART_SetConfig+0x2be>
 8008882:	e00b      	b.n	800889c <UART_SetConfig+0x2c4>
 8008884:	2300      	movs	r3, #0
 8008886:	77fb      	strb	r3, [r7, #31]
 8008888:	e04d      	b.n	8008926 <UART_SetConfig+0x34e>
 800888a:	2302      	movs	r3, #2
 800888c:	77fb      	strb	r3, [r7, #31]
 800888e:	e04a      	b.n	8008926 <UART_SetConfig+0x34e>
 8008890:	2304      	movs	r3, #4
 8008892:	77fb      	strb	r3, [r7, #31]
 8008894:	e047      	b.n	8008926 <UART_SetConfig+0x34e>
 8008896:	2308      	movs	r3, #8
 8008898:	77fb      	strb	r3, [r7, #31]
 800889a:	e044      	b.n	8008926 <UART_SetConfig+0x34e>
 800889c:	2310      	movs	r3, #16
 800889e:	77fb      	strb	r3, [r7, #31]
 80088a0:	bf00      	nop
 80088a2:	e040      	b.n	8008926 <UART_SetConfig+0x34e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <UART_SetConfig+0x318>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d139      	bne.n	8008922 <UART_SetConfig+0x34a>
 80088ae:	4b09      	ldr	r3, [pc, #36]	; (80088d4 <UART_SetConfig+0x2fc>)
 80088b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088bc:	d027      	beq.n	800890e <UART_SetConfig+0x336>
 80088be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088c2:	d817      	bhi.n	80088f4 <UART_SetConfig+0x31c>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d01c      	beq.n	8008902 <UART_SetConfig+0x32a>
 80088c8:	e027      	b.n	800891a <UART_SetConfig+0x342>
 80088ca:	bf00      	nop
 80088cc:	efff69f3 	.word	0xefff69f3
 80088d0:	40011000 	.word	0x40011000
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40004400 	.word	0x40004400
 80088dc:	40004800 	.word	0x40004800
 80088e0:	40004c00 	.word	0x40004c00
 80088e4:	40005000 	.word	0x40005000
 80088e8:	40011400 	.word	0x40011400
 80088ec:	40007800 	.word	0x40007800
 80088f0:	40007c00 	.word	0x40007c00
 80088f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088f8:	d006      	beq.n	8008908 <UART_SetConfig+0x330>
 80088fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088fe:	d009      	beq.n	8008914 <UART_SetConfig+0x33c>
 8008900:	e00b      	b.n	800891a <UART_SetConfig+0x342>
 8008902:	2300      	movs	r3, #0
 8008904:	77fb      	strb	r3, [r7, #31]
 8008906:	e00e      	b.n	8008926 <UART_SetConfig+0x34e>
 8008908:	2302      	movs	r3, #2
 800890a:	77fb      	strb	r3, [r7, #31]
 800890c:	e00b      	b.n	8008926 <UART_SetConfig+0x34e>
 800890e:	2304      	movs	r3, #4
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e008      	b.n	8008926 <UART_SetConfig+0x34e>
 8008914:	2308      	movs	r3, #8
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	e005      	b.n	8008926 <UART_SetConfig+0x34e>
 800891a:	2310      	movs	r3, #16
 800891c:	77fb      	strb	r3, [r7, #31]
 800891e:	bf00      	nop
 8008920:	e001      	b.n	8008926 <UART_SetConfig+0x34e>
 8008922:	2310      	movs	r3, #16
 8008924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892e:	d17f      	bne.n	8008a30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008930:	7ffb      	ldrb	r3, [r7, #31]
 8008932:	2b08      	cmp	r3, #8
 8008934:	d85c      	bhi.n	80089f0 <UART_SetConfig+0x418>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <UART_SetConfig+0x364>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008961 	.word	0x08008961
 8008940:	08008981 	.word	0x08008981
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089f1 	.word	0x080089f1
 800894c:	080089b9 	.word	0x080089b9
 8008950:	080089f1 	.word	0x080089f1
 8008954:	080089f1 	.word	0x080089f1
 8008958:	080089f1 	.word	0x080089f1
 800895c:	080089d9 	.word	0x080089d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008960:	f7fd f9a8 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8008964:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	005a      	lsls	r2, r3, #1
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	085b      	lsrs	r3, r3, #1
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	fbb2 f3f3 	udiv	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	61bb      	str	r3, [r7, #24]
        break;
 800897e:	e03a      	b.n	80089f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008980:	f7fd f9ac 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 8008984:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	005a      	lsls	r2, r3, #1
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	085b      	lsrs	r3, r3, #1
 8008990:	441a      	add	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	fbb2 f3f3 	udiv	r3, r2, r3
 800899a:	b29b      	uxth	r3, r3
 800899c:	61bb      	str	r3, [r7, #24]
        break;
 800899e:	e02a      	b.n	80089f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	085a      	lsrs	r2, r3, #1
 80089a6:	4b5f      	ldr	r3, [pc, #380]	; (8008b24 <UART_SetConfig+0x54c>)
 80089a8:	4413      	add	r3, r2
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	6852      	ldr	r2, [r2, #4]
 80089ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	61bb      	str	r3, [r7, #24]
        break;
 80089b6:	e01e      	b.n	80089f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089b8:	f7fd f898 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80089bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	005a      	lsls	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	085b      	lsrs	r3, r3, #1
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	61bb      	str	r3, [r7, #24]
        break;
 80089d6:	e00e      	b.n	80089f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	61bb      	str	r3, [r7, #24]
        break;
 80089ee:	e002      	b.n	80089f6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]
        break;
 80089f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b0f      	cmp	r3, #15
 80089fa:	d916      	bls.n	8008a2a <UART_SetConfig+0x452>
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a02:	d212      	bcs.n	8008a2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	f023 030f 	bic.w	r3, r3, #15
 8008a0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	085b      	lsrs	r3, r3, #1
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	897b      	ldrh	r3, [r7, #10]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	897a      	ldrh	r2, [r7, #10]
 8008a26:	60da      	str	r2, [r3, #12]
 8008a28:	e070      	b.n	8008b0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	75fb      	strb	r3, [r7, #23]
 8008a2e:	e06d      	b.n	8008b0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008a30:	7ffb      	ldrb	r3, [r7, #31]
 8008a32:	2b08      	cmp	r3, #8
 8008a34:	d859      	bhi.n	8008aea <UART_SetConfig+0x512>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x464>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a7f 	.word	0x08008a7f
 8008a44:	08008a9d 	.word	0x08008a9d
 8008a48:	08008aeb 	.word	0x08008aeb
 8008a4c:	08008ab5 	.word	0x08008ab5
 8008a50:	08008aeb 	.word	0x08008aeb
 8008a54:	08008aeb 	.word	0x08008aeb
 8008a58:	08008aeb 	.word	0x08008aeb
 8008a5c:	08008ad3 	.word	0x08008ad3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a60:	f7fd f928 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8008a64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	085a      	lsrs	r2, r3, #1
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	441a      	add	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	61bb      	str	r3, [r7, #24]
        break;
 8008a7c:	e038      	b.n	8008af0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7e:	f7fd f92d 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 8008a82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	085a      	lsrs	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	441a      	add	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	61bb      	str	r3, [r7, #24]
        break;
 8008a9a:	e029      	b.n	8008af0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	085a      	lsrs	r2, r3, #1
 8008aa2:	4b21      	ldr	r3, [pc, #132]	; (8008b28 <UART_SetConfig+0x550>)
 8008aa4:	4413      	add	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6852      	ldr	r2, [r2, #4]
 8008aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	61bb      	str	r3, [r7, #24]
        break;
 8008ab2:	e01d      	b.n	8008af0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ab4:	f7fd f81a 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8008ab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	085a      	lsrs	r2, r3, #1
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	441a      	add	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	61bb      	str	r3, [r7, #24]
        break;
 8008ad0:	e00e      	b.n	8008af0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	61bb      	str	r3, [r7, #24]
        break;
 8008ae8:	e002      	b.n	8008af0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]
        break;
 8008aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	2b0f      	cmp	r3, #15
 8008af4:	d908      	bls.n	8008b08 <UART_SetConfig+0x530>
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afc:	d204      	bcs.n	8008b08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	60da      	str	r2, [r3, #12]
 8008b06:	e001      	b.n	8008b0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3720      	adds	r7, #32
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	01e84800 	.word	0x01e84800
 8008b28:	00f42400 	.word	0x00f42400

08008b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00a      	beq.n	8008b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9e:	f003 0308 	and.w	r3, r3, #8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d01a      	beq.n	8008c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2a:	d10a      	bne.n	8008c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	430a      	orrs	r2, r1
 8008c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	605a      	str	r2, [r3, #4]
  }
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af02      	add	r7, sp, #8
 8008c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c7e:	f7fa ff9d 	bl	8003bbc <HAL_GetTick>
 8008c82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0308 	and.w	r3, r3, #8
 8008c8e:	2b08      	cmp	r3, #8
 8008c90:	d10e      	bne.n	8008cb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f814 	bl	8008cce <UART_WaitOnFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e00a      	b.n	8008cc6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2220      	movs	r2, #32
 8008cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	603b      	str	r3, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cde:	e05d      	b.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ce6:	d059      	beq.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ce8:	f7fa ff68 	bl	8003bbc <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	69ba      	ldr	r2, [r7, #24]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d302      	bcc.n	8008cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d11b      	bne.n	8008d36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	689a      	ldr	r2, [r3, #8]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f022 0201 	bic.w	r2, r2, #1
 8008d1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2220      	movs	r2, #32
 8008d22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e042      	b.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d02b      	beq.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d52:	d123      	bne.n	8008d9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0201 	bic.w	r2, r2, #1
 8008d7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2220      	movs	r2, #32
 8008d88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e00f      	b.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69da      	ldr	r2, [r3, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4013      	ands	r3, r2
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	bf0c      	ite	eq
 8008dac:	2301      	moveq	r3, #1
 8008dae:	2300      	movne	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d092      	beq.n	8008ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	f107 001c 	add.w	r0, r7, #28
 8008dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d126      	bne.n	8008e2a <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <USB_CoreInit+0xb8>)
 8008dee:	4013      	ands	r3, r2
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f043 0210 	orr.w	r2, r3, #16
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d105      	bne.n	8008e1e <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa52 	bl	80092c8 <USB_CoreReset>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]
 8008e28:	e010      	b.n	8008e4c <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa46 	bl	80092c8 <USB_CoreReset>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d10b      	bne.n	8008e6a <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f043 0206 	orr.w	r2, r3, #6
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f043 0220 	orr.w	r2, r3, #32
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e76:	b004      	add	sp, #16
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	ffbdffbf 	.word	0xffbdffbf

08008e80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e80:	b480      	push	{r7}
 8008e82:	b083      	sub	sp, #12
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f023 0201 	bic.w	r2, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d106      	bne.n	8008ece <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	60da      	str	r2, [r3, #12]
 8008ecc:	e00b      	b.n	8008ee6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d106      	bne.n	8008ee2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	60da      	str	r2, [r3, #12]
 8008ee0:	e001      	b.n	8008ee6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e003      	b.n	8008eee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008ee6:	2032      	movs	r0, #50	; 0x32
 8008ee8:	f7fa fe74 	bl	8003bd4 <HAL_Delay>

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3708      	adds	r7, #8
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
	...

08008ef8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ef8:	b084      	sub	sp, #16
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b086      	sub	sp, #24
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f12:	2300      	movs	r3, #0
 8008f14:	613b      	str	r3, [r7, #16]
 8008f16:	e009      	b.n	8008f2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	3340      	adds	r3, #64	; 0x40
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	2200      	movs	r2, #0
 8008f24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	613b      	str	r3, [r7, #16]
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b0e      	cmp	r3, #14
 8008f30:	d9f2      	bls.n	8008f18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d11c      	bne.n	8008f72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f46:	f043 0302 	orr.w	r3, r3, #2
 8008f4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	e005      	b.n	8008f7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f84:	461a      	mov	r2, r3
 8008f86:	2300      	movs	r3, #0
 8008f88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f90:	4619      	mov	r1, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f98:	461a      	mov	r2, r3
 8008f9a:	680b      	ldr	r3, [r1, #0]
 8008f9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d10c      	bne.n	8008fbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008faa:	2100      	movs	r1, #0
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f959 	bl	8009264 <USB_SetDevSpeed>
 8008fb2:	e018      	b.n	8008fe6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f954 	bl	8009264 <USB_SetDevSpeed>
 8008fbc:	e013      	b.n	8008fe6 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d10c      	bne.n	8008fde <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fca:	2100      	movs	r1, #0
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f949 	bl	8009264 <USB_SetDevSpeed>
 8008fd2:	e008      	b.n	8008fe6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f944 	bl	8009264 <USB_SetDevSpeed>
 8008fdc:	e003      	b.n	8008fe6 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008fde:	2103      	movs	r1, #3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f93f 	bl	8009264 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fe6:	2110      	movs	r1, #16
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f8f3 	bl	80091d4 <USB_FlushTxFifo>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f911 	bl	8009220 <USB_FlushRxFifo>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900e:	461a      	mov	r2, r3
 8009010:	2300      	movs	r3, #0
 8009012:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901a:	461a      	mov	r2, r3
 800901c:	2300      	movs	r3, #0
 800901e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009026:	461a      	mov	r2, r3
 8009028:	2300      	movs	r3, #0
 800902a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902c:	2300      	movs	r3, #0
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	e043      	b.n	80090ba <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009048:	d118      	bne.n	800907c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10a      	bne.n	8009066 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	461a      	mov	r2, r3
 800905e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009062:	6013      	str	r3, [r2, #0]
 8009064:	e013      	b.n	800908e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009072:	461a      	mov	r2, r3
 8009074:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e008      	b.n	800908e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	461a      	mov	r2, r3
 800908a:	2300      	movs	r3, #0
 800908c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909a:	461a      	mov	r2, r3
 800909c:	2300      	movs	r3, #0
 800909e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	461a      	mov	r2, r3
 80090ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	3301      	adds	r3, #1
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d3b7      	bcc.n	8009032 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090c2:	2300      	movs	r3, #0
 80090c4:	613b      	str	r3, [r7, #16]
 80090c6:	e043      	b.n	8009150 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090de:	d118      	bne.n	8009112 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	461a      	mov	r2, r3
 80090f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	e013      	b.n	8009124 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009108:	461a      	mov	r2, r3
 800910a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	e008      	b.n	8009124 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911e:	461a      	mov	r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009130:	461a      	mov	r2, r3
 8009132:	2300      	movs	r3, #0
 8009134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009142:	461a      	mov	r2, r3
 8009144:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009148:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]
 8009150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	429a      	cmp	r2, r3
 8009156:	d3b7      	bcc.n	80090c8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800916a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009178:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	2b00      	cmp	r3, #0
 800917e:	d105      	bne.n	800918c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	f043 0210 	orr.w	r2, r3, #16
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	699a      	ldr	r2, [r3, #24]
 8009190:	4b0e      	ldr	r3, [pc, #56]	; (80091cc <USB_DevInit+0x2d4>)
 8009192:	4313      	orrs	r3, r2
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	f043 0208 	orr.w	r2, r3, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d105      	bne.n	80091bc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	699a      	ldr	r2, [r3, #24]
 80091b4:	4b06      	ldr	r3, [pc, #24]	; (80091d0 <USB_DevInit+0x2d8>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3718      	adds	r7, #24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091c8:	b004      	add	sp, #16
 80091ca:	4770      	bx	lr
 80091cc:	803c3800 	.word	0x803c3800
 80091d0:	40000004 	.word	0x40000004

080091d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	019b      	lsls	r3, r3, #6
 80091e6:	f043 0220 	orr.w	r2, r3, #32
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3301      	adds	r3, #1
 80091f2:	60fb      	str	r3, [r7, #12]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a09      	ldr	r2, [pc, #36]	; (800921c <USB_FlushTxFifo+0x48>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d901      	bls.n	8009200 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e006      	b.n	800920e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b20      	cmp	r3, #32
 800920a:	d0f0      	beq.n	80091ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	00030d40 	.word	0x00030d40

08009220 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2210      	movs	r2, #16
 8009230:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4a09      	ldr	r2, [pc, #36]	; (8009260 <USB_FlushRxFifo+0x40>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d901      	bls.n	8009244 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e006      	b.n	8009252 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b10      	cmp	r3, #16
 800924e:	d0f0      	beq.n	8009232 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	00030d40 	.word	0x00030d40

08009264 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	78fb      	ldrb	r3, [r7, #3]
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009284:	4313      	orrs	r3, r2
 8009286:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b0:	f043 0302 	orr.w	r3, r3, #2
 80092b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80092b6:	2003      	movs	r0, #3
 80092b8:	f7fa fc8c 	bl	8003bd4 <HAL_Delay>

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3301      	adds	r3, #1
 80092d8:	60fb      	str	r3, [r7, #12]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4a13      	ldr	r2, [pc, #76]	; (800932c <USB_CoreReset+0x64>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d901      	bls.n	80092e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092e2:	2303      	movs	r3, #3
 80092e4:	e01b      	b.n	800931e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	daf2      	bge.n	80092d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	f043 0201 	orr.w	r2, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3301      	adds	r3, #1
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4a09      	ldr	r2, [pc, #36]	; (800932c <USB_CoreReset+0x64>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d901      	bls.n	8009310 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800930c:	2303      	movs	r3, #3
 800930e:	e006      	b.n	800931e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b01      	cmp	r3, #1
 800931a:	d0f0      	beq.n	80092fe <USB_CoreReset+0x36>

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3714      	adds	r7, #20
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	00030d40 	.word	0x00030d40

08009330 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009334:	bf00      	nop
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
	...

08009340 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009346:	f3ef 8305 	mrs	r3, IPSR
 800934a:	60bb      	str	r3, [r7, #8]
  return(result);
 800934c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10f      	bne.n	8009372 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009352:	f3ef 8310 	mrs	r3, PRIMASK
 8009356:	607b      	str	r3, [r7, #4]
  return(result);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d105      	bne.n	800936a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800935e:	f3ef 8311 	mrs	r3, BASEPRI
 8009362:	603b      	str	r3, [r7, #0]
  return(result);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <osKernelInitialize+0x3a>
 800936a:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <osKernelInitialize+0x64>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d103      	bne.n	800937a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009372:	f06f 0305 	mvn.w	r3, #5
 8009376:	60fb      	str	r3, [r7, #12]
 8009378:	e00c      	b.n	8009394 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <osKernelInitialize+0x64>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d105      	bne.n	800938e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <osKernelInitialize+0x64>)
 8009384:	2201      	movs	r2, #1
 8009386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e002      	b.n	8009394 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800938e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009392:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009394:	68fb      	ldr	r3, [r7, #12]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	200003fc 	.word	0x200003fc

080093a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ae:	f3ef 8305 	mrs	r3, IPSR
 80093b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80093b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10f      	bne.n	80093da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ba:	f3ef 8310 	mrs	r3, PRIMASK
 80093be:	607b      	str	r3, [r7, #4]
  return(result);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d105      	bne.n	80093d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80093c6:	f3ef 8311 	mrs	r3, BASEPRI
 80093ca:	603b      	str	r3, [r7, #0]
  return(result);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <osKernelStart+0x3a>
 80093d2:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <osKernelStart+0x68>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d103      	bne.n	80093e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80093da:	f06f 0305 	mvn.w	r3, #5
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	e010      	b.n	8009404 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093e2:	4b0b      	ldr	r3, [pc, #44]	; (8009410 <osKernelStart+0x68>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d109      	bne.n	80093fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093ea:	f7ff ffa1 	bl	8009330 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093ee:	4b08      	ldr	r3, [pc, #32]	; (8009410 <osKernelStart+0x68>)
 80093f0:	2202      	movs	r2, #2
 80093f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093f4:	f001 f98e 	bl	800a714 <vTaskStartScheduler>
      stat = osOK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	e002      	b.n	8009404 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80093fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009402:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009404:	68fb      	ldr	r3, [r7, #12]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200003fc 	.word	0x200003fc

08009414 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941a:	f3ef 8305 	mrs	r3, IPSR
 800941e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009420:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10f      	bne.n	8009446 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009426:	f3ef 8310 	mrs	r3, PRIMASK
 800942a:	607b      	str	r3, [r7, #4]
  return(result);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d105      	bne.n	800943e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009432:	f3ef 8311 	mrs	r3, BASEPRI
 8009436:	603b      	str	r3, [r7, #0]
  return(result);
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d007      	beq.n	800944e <osKernelGetTickCount+0x3a>
 800943e:	4b08      	ldr	r3, [pc, #32]	; (8009460 <osKernelGetTickCount+0x4c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d103      	bne.n	800944e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009446:	f001 fa89 	bl	800a95c <xTaskGetTickCountFromISR>
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	e002      	b.n	8009454 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800944e:	f001 fa75 	bl	800a93c <xTaskGetTickCount>
 8009452:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009454:	68fb      	ldr	r3, [r7, #12]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200003fc 	.word	0x200003fc

08009464 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009464:	b480      	push	{r7}
 8009466:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009468:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800946c:	4618      	mov	r0, r3
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009478:	b580      	push	{r7, lr}
 800947a:	b090      	sub	sp, #64	; 0x40
 800947c:	af04      	add	r7, sp, #16
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009484:	2300      	movs	r3, #0
 8009486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009488:	f3ef 8305 	mrs	r3, IPSR
 800948c:	61fb      	str	r3, [r7, #28]
  return(result);
 800948e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 808f 	bne.w	80095b4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009496:	f3ef 8310 	mrs	r3, PRIMASK
 800949a:	61bb      	str	r3, [r7, #24]
  return(result);
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d105      	bne.n	80094ae <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094a2:	f3ef 8311 	mrs	r3, BASEPRI
 80094a6:	617b      	str	r3, [r7, #20]
  return(result);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d003      	beq.n	80094b6 <osThreadNew+0x3e>
 80094ae:	4b44      	ldr	r3, [pc, #272]	; (80095c0 <osThreadNew+0x148>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d07e      	beq.n	80095b4 <osThreadNew+0x13c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d07b      	beq.n	80095b4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80094c0:	2318      	movs	r3, #24
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80094c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d045      	beq.n	8009560 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <osThreadNew+0x6a>
        name = attr->name;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d002      	beq.n	80094f0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d008      	beq.n	8009508 <osThreadNew+0x90>
 80094f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f8:	2b38      	cmp	r3, #56	; 0x38
 80094fa:	d805      	bhi.n	8009508 <osThreadNew+0x90>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d001      	beq.n	800950c <osThreadNew+0x94>
        return (NULL);
 8009508:	2300      	movs	r3, #0
 800950a:	e054      	b.n	80095b6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d003      	beq.n	800951c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	695b      	ldr	r3, [r3, #20]
 8009518:	089b      	lsrs	r3, r3, #2
 800951a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00e      	beq.n	8009542 <osThreadNew+0xca>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	2b5b      	cmp	r3, #91	; 0x5b
 800952a:	d90a      	bls.n	8009542 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009530:	2b00      	cmp	r3, #0
 8009532:	d006      	beq.n	8009542 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <osThreadNew+0xca>
        mem = 1;
 800953c:	2301      	movs	r3, #1
 800953e:	623b      	str	r3, [r7, #32]
 8009540:	e010      	b.n	8009564 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10c      	bne.n	8009564 <osThreadNew+0xec>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d108      	bne.n	8009564 <osThreadNew+0xec>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d104      	bne.n	8009564 <osThreadNew+0xec>
          mem = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	623b      	str	r3, [r7, #32]
 800955e:	e001      	b.n	8009564 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009560:	2300      	movs	r3, #0
 8009562:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d110      	bne.n	800958c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009572:	9202      	str	r2, [sp, #8]
 8009574:	9301      	str	r3, [sp, #4]
 8009576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800957e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 fe6b 	bl	800a25c <xTaskCreateStatic>
 8009586:	4603      	mov	r3, r0
 8009588:	613b      	str	r3, [r7, #16]
 800958a:	e013      	b.n	80095b4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d110      	bne.n	80095b4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	b29a      	uxth	r2, r3
 8009596:	f107 0310 	add.w	r3, r7, #16
 800959a:	9301      	str	r3, [sp, #4]
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 feb9 	bl	800a31c <xTaskCreate>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d001      	beq.n	80095b4 <osThreadNew+0x13c>
          hTask = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80095b4:	693b      	ldr	r3, [r7, #16]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3730      	adds	r7, #48	; 0x30
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	200003fc 	.word	0x200003fc

080095c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095cc:	f3ef 8305 	mrs	r3, IPSR
 80095d0:	613b      	str	r3, [r7, #16]
  return(result);
 80095d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10f      	bne.n	80095f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095d8:	f3ef 8310 	mrs	r3, PRIMASK
 80095dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d105      	bne.n	80095f0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095e4:	f3ef 8311 	mrs	r3, BASEPRI
 80095e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d007      	beq.n	8009600 <osDelay+0x3c>
 80095f0:	4b0a      	ldr	r3, [pc, #40]	; (800961c <osDelay+0x58>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d103      	bne.n	8009600 <osDelay+0x3c>
    stat = osErrorISR;
 80095f8:	f06f 0305 	mvn.w	r3, #5
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	e007      	b.n	8009610 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009600:	2300      	movs	r3, #0
 8009602:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d002      	beq.n	8009610 <osDelay+0x4c>
      vTaskDelay(ticks);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f001 f84c 	bl	800a6a8 <vTaskDelay>
    }
  }

  return (stat);
 8009610:	697b      	ldr	r3, [r7, #20]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200003fc 	.word	0x200003fc

08009620 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009628:	f3ef 8305 	mrs	r3, IPSR
 800962c:	617b      	str	r3, [r7, #20]
  return(result);
 800962e:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10f      	bne.n	8009654 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009634:	f3ef 8310 	mrs	r3, PRIMASK
 8009638:	613b      	str	r3, [r7, #16]
  return(result);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d105      	bne.n	800964c <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009640:	f3ef 8311 	mrs	r3, BASEPRI
 8009644:	60fb      	str	r3, [r7, #12]
  return(result);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d007      	beq.n	800965c <osDelayUntil+0x3c>
 800964c:	4b13      	ldr	r3, [pc, #76]	; (800969c <osDelayUntil+0x7c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d103      	bne.n	800965c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009654:	f06f 0305 	mvn.w	r3, #5
 8009658:	61fb      	str	r3, [r7, #28]
 800965a:	e019      	b.n	8009690 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8009660:	f001 f96c 	bl	800a93c <xTaskGetTickCount>
 8009664:	4603      	mov	r3, r0
 8009666:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <osDelayUntil+0x6a>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	db06      	blt.n	800968a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800967c:	f107 0308 	add.w	r3, r7, #8
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 ff90 	bl	800a5a8 <vTaskDelayUntil>
 8009688:	e002      	b.n	8009690 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800968a:	f06f 0303 	mvn.w	r3, #3
 800968e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009690:	69fb      	ldr	r3, [r7, #28]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3720      	adds	r7, #32
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	200003fc 	.word	0x200003fc

080096a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a07      	ldr	r2, [pc, #28]	; (80096cc <vApplicationGetIdleTaskMemory+0x2c>)
 80096b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4a06      	ldr	r2, [pc, #24]	; (80096d0 <vApplicationGetIdleTaskMemory+0x30>)
 80096b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2280      	movs	r2, #128	; 0x80
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20000400 	.word	0x20000400
 80096d0:	2000045c 	.word	0x2000045c

080096d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4a07      	ldr	r2, [pc, #28]	; (8009700 <vApplicationGetTimerTaskMemory+0x2c>)
 80096e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a06      	ldr	r2, [pc, #24]	; (8009704 <vApplicationGetTimerTaskMemory+0x30>)
 80096ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	2000065c 	.word	0x2000065c
 8009704:	200006b8 	.word	0x200006b8

08009708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f103 0208 	add.w	r2, r3, #8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0208 	add.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c0:	d103      	bne.n	80097ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e00c      	b.n	80097e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3308      	adds	r3, #8
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e002      	b.n	80097d8 <vListInsert+0x2e>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d2f6      	bcs.n	80097d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
}
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6892      	ldr	r2, [r2, #8]
 8009832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	429a      	cmp	r2, r3
 8009846:	d103      	bne.n	8009850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10b      	bne.n	800989c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	b672      	cpsid	i
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	b662      	cpsie	i
 8009898:	60bb      	str	r3, [r7, #8]
 800989a:	e7fe      	b.n	800989a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800989c:	f002 f9b4 	bl	800bc08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	68f9      	ldr	r1, [r7, #12]
 80098aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098ac:	fb01 f303 	mul.w	r3, r1, r3
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098cc:	3b01      	subs	r3, #1
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	441a      	add	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	22ff      	movs	r2, #255	; 0xff
 80098e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	22ff      	movs	r2, #255	; 0xff
 80098e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d114      	bne.n	800991c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01a      	beq.n	8009930 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3310      	adds	r3, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f001 f9a8 	bl	800ac54 <xTaskRemoveFromEventList>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d012      	beq.n	8009930 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800990a:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <xQueueGenericReset+0xd0>)
 800990c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009910:	601a      	str	r2, [r3, #0]
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	e009      	b.n	8009930 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3310      	adds	r3, #16
 8009920:	4618      	mov	r0, r3
 8009922:	f7ff fef1 	bl	8009708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	3324      	adds	r3, #36	; 0x24
 800992a:	4618      	mov	r0, r3
 800992c:	f7ff feec 	bl	8009708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009930:	f002 f99c 	bl	800bc6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009934:	2301      	movs	r3, #1
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	e000ed04 	.word	0xe000ed04

08009944 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08e      	sub	sp, #56	; 0x38
 8009948:	af02      	add	r7, sp, #8
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10b      	bne.n	8009970 <xQueueGenericCreateStatic+0x2c>
 8009958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995c:	b672      	cpsid	i
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	b662      	cpsie	i
 800996c:	62bb      	str	r3, [r7, #40]	; 0x28
 800996e:	e7fe      	b.n	800996e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <xQueueGenericCreateStatic+0x4a>
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
 800998c:	e7fe      	b.n	800998c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <xQueueGenericCreateStatic+0x56>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d001      	beq.n	800999e <xQueueGenericCreateStatic+0x5a>
 800999a:	2301      	movs	r3, #1
 800999c:	e000      	b.n	80099a0 <xQueueGenericCreateStatic+0x5c>
 800999e:	2300      	movs	r3, #0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <xQueueGenericCreateStatic+0x78>
 80099a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a8:	b672      	cpsid	i
 80099aa:	f383 8811 	msr	BASEPRI, r3
 80099ae:	f3bf 8f6f 	isb	sy
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	b662      	cpsie	i
 80099b8:	623b      	str	r3, [r7, #32]
 80099ba:	e7fe      	b.n	80099ba <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <xQueueGenericCreateStatic+0x84>
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <xQueueGenericCreateStatic+0x88>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e000      	b.n	80099ce <xQueueGenericCreateStatic+0x8a>
 80099cc:	2300      	movs	r3, #0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10b      	bne.n	80099ea <xQueueGenericCreateStatic+0xa6>
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	b672      	cpsid	i
 80099d8:	f383 8811 	msr	BASEPRI, r3
 80099dc:	f3bf 8f6f 	isb	sy
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	b662      	cpsie	i
 80099e6:	61fb      	str	r3, [r7, #28]
 80099e8:	e7fe      	b.n	80099e8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099ea:	2350      	movs	r3, #80	; 0x50
 80099ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b50      	cmp	r3, #80	; 0x50
 80099f2:	d00b      	beq.n	8009a0c <xQueueGenericCreateStatic+0xc8>
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	b672      	cpsid	i
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	b662      	cpsie	i
 8009a08:	61bb      	str	r3, [r7, #24]
 8009a0a:	e7fe      	b.n	8009a0a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d00d      	beq.n	8009a34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	68b9      	ldr	r1, [r7, #8]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f000 f805 	bl	8009a3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3730      	adds	r7, #48	; 0x30
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	60f8      	str	r0, [r7, #12]
 8009a46:	60b9      	str	r1, [r7, #8]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	e002      	b.n	8009a60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	69b8      	ldr	r0, [r7, #24]
 8009a70:	f7ff fefe 	bl	8009870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	78fa      	ldrb	r2, [r7, #3]
 8009a78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b08e      	sub	sp, #56	; 0x38
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a92:	2300      	movs	r3, #0
 8009a94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d10b      	bne.n	8009ab8 <xQueueGenericSend+0x34>
 8009aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa4:	b672      	cpsid	i
 8009aa6:	f383 8811 	msr	BASEPRI, r3
 8009aaa:	f3bf 8f6f 	isb	sy
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	b662      	cpsie	i
 8009ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab6:	e7fe      	b.n	8009ab6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <xQueueGenericSend+0x42>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <xQueueGenericSend+0x46>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <xQueueGenericSend+0x48>
 8009aca:	2300      	movs	r3, #0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10b      	bne.n	8009ae8 <xQueueGenericSend+0x64>
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	b672      	cpsid	i
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	b662      	cpsie	i
 8009ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ae6:	e7fe      	b.n	8009ae6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d103      	bne.n	8009af6 <xQueueGenericSend+0x72>
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d101      	bne.n	8009afa <xQueueGenericSend+0x76>
 8009af6:	2301      	movs	r3, #1
 8009af8:	e000      	b.n	8009afc <xQueueGenericSend+0x78>
 8009afa:	2300      	movs	r3, #0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10b      	bne.n	8009b18 <xQueueGenericSend+0x94>
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	623b      	str	r3, [r7, #32]
 8009b16:	e7fe      	b.n	8009b16 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b18:	f001 fa5a 	bl	800afd0 <xTaskGetSchedulerState>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d102      	bne.n	8009b28 <xQueueGenericSend+0xa4>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <xQueueGenericSend+0xa8>
 8009b28:	2301      	movs	r3, #1
 8009b2a:	e000      	b.n	8009b2e <xQueueGenericSend+0xaa>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10b      	bne.n	8009b4a <xQueueGenericSend+0xc6>
 8009b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b36:	b672      	cpsid	i
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	b662      	cpsie	i
 8009b46:	61fb      	str	r3, [r7, #28]
 8009b48:	e7fe      	b.n	8009b48 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b4a:	f002 f85d 	bl	800bc08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d302      	bcc.n	8009b60 <xQueueGenericSend+0xdc>
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d129      	bne.n	8009bb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	68b9      	ldr	r1, [r7, #8]
 8009b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b66:	f000 fa0d 	bl	8009f84 <prvCopyDataToQueue>
 8009b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d010      	beq.n	8009b96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b76:	3324      	adds	r3, #36	; 0x24
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 f86b 	bl	800ac54 <xTaskRemoveFromEventList>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d013      	beq.n	8009bac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b84:	4b3f      	ldr	r3, [pc, #252]	; (8009c84 <xQueueGenericSend+0x200>)
 8009b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	e00a      	b.n	8009bac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b9c:	4b39      	ldr	r3, [pc, #228]	; (8009c84 <xQueueGenericSend+0x200>)
 8009b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	f3bf 8f4f 	dsb	sy
 8009ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009bac:	f002 f85e 	bl	800bc6c <vPortExitCritical>
				return pdPASS;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e063      	b.n	8009c7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009bba:	f002 f857 	bl	800bc6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e05c      	b.n	8009c7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d106      	bne.n	8009bd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bc8:	f107 0314 	add.w	r3, r7, #20
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f001 f8a5 	bl	800ad1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bd6:	f002 f849 	bl	800bc6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bda:	f000 fe03 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bde:	f002 f813 	bl	800bc08 <vPortEnterCritical>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bee:	d103      	bne.n	8009bf8 <xQueueGenericSend+0x174>
 8009bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bfe:	b25b      	sxtb	r3, r3
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c04:	d103      	bne.n	8009c0e <xQueueGenericSend+0x18a>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c0e:	f002 f82d 	bl	800bc6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c12:	1d3a      	adds	r2, r7, #4
 8009c14:	f107 0314 	add.w	r3, r7, #20
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 f894 	bl	800ad48 <xTaskCheckForTimeOut>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d124      	bne.n	8009c70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c28:	f000 faa4 	bl	800a174 <prvIsQueueFull>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d018      	beq.n	8009c64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	3310      	adds	r3, #16
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	4611      	mov	r1, r2
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 ffb8 	bl	800abb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c42:	f000 fa2f 	bl	800a0a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c46:	f000 fddb 	bl	800a800 <xTaskResumeAll>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f47f af7c 	bne.w	8009b4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009c52:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <xQueueGenericSend+0x200>)
 8009c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	f3bf 8f4f 	dsb	sy
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	e772      	b.n	8009b4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c66:	f000 fa1d 	bl	800a0a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c6a:	f000 fdc9 	bl	800a800 <xTaskResumeAll>
 8009c6e:	e76c      	b.n	8009b4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c72:	f000 fa17 	bl	800a0a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c76:	f000 fdc3 	bl	800a800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3738      	adds	r7, #56	; 0x38
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000ed04 	.word	0xe000ed04

08009c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08e      	sub	sp, #56	; 0x38
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <xQueueGenericSendFromISR+0x30>
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	b672      	cpsid	i
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	b662      	cpsie	i
 8009cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8009cb6:	e7fe      	b.n	8009cb6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d103      	bne.n	8009cc6 <xQueueGenericSendFromISR+0x3e>
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <xQueueGenericSendFromISR+0x42>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <xQueueGenericSendFromISR+0x44>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d10b      	bne.n	8009ce8 <xQueueGenericSendFromISR+0x60>
 8009cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd4:	b672      	cpsid	i
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	b662      	cpsie	i
 8009ce4:	623b      	str	r3, [r7, #32]
 8009ce6:	e7fe      	b.n	8009ce6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d103      	bne.n	8009cf6 <xQueueGenericSendFromISR+0x6e>
 8009cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <xQueueGenericSendFromISR+0x72>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <xQueueGenericSendFromISR+0x74>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10b      	bne.n	8009d18 <xQueueGenericSendFromISR+0x90>
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	b672      	cpsid	i
 8009d06:	f383 8811 	msr	BASEPRI, r3
 8009d0a:	f3bf 8f6f 	isb	sy
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	b662      	cpsie	i
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e7fe      	b.n	8009d16 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d18:	f002 f856 	bl	800bdc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d1c:	f3ef 8211 	mrs	r2, BASEPRI
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	b672      	cpsid	i
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	b662      	cpsie	i
 8009d34:	61ba      	str	r2, [r7, #24]
 8009d36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d302      	bcc.n	8009d4e <xQueueGenericSendFromISR+0xc6>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d12c      	bne.n	8009da8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d58:	683a      	ldr	r2, [r7, #0]
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d5e:	f000 f911 	bl	8009f84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d6a:	d112      	bne.n	8009d92 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d016      	beq.n	8009da2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d76:	3324      	adds	r3, #36	; 0x24
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 ff6b 	bl	800ac54 <xTaskRemoveFromEventList>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00e      	beq.n	8009da2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00b      	beq.n	8009da2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]
 8009d90:	e007      	b.n	8009da2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d96:	3301      	adds	r3, #1
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	b25a      	sxtb	r2, r3
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009da2:	2301      	movs	r3, #1
 8009da4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009da6:	e001      	b.n	8009dac <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	637b      	str	r3, [r7, #52]	; 0x34
 8009dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3738      	adds	r7, #56	; 0x38
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08c      	sub	sp, #48	; 0x30
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <xQueueReceive+0x32>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	b672      	cpsid	i
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	b662      	cpsie	i
 8009dee:	623b      	str	r3, [r7, #32]
 8009df0:	e7fe      	b.n	8009df0 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d103      	bne.n	8009e00 <xQueueReceive+0x40>
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <xQueueReceive+0x44>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e000      	b.n	8009e06 <xQueueReceive+0x46>
 8009e04:	2300      	movs	r3, #0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d10b      	bne.n	8009e22 <xQueueReceive+0x62>
 8009e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e0e:	b672      	cpsid	i
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	b662      	cpsie	i
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	e7fe      	b.n	8009e20 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e22:	f001 f8d5 	bl	800afd0 <xTaskGetSchedulerState>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d102      	bne.n	8009e32 <xQueueReceive+0x72>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d101      	bne.n	8009e36 <xQueueReceive+0x76>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e000      	b.n	8009e38 <xQueueReceive+0x78>
 8009e36:	2300      	movs	r3, #0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d10b      	bne.n	8009e54 <xQueueReceive+0x94>
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	61bb      	str	r3, [r7, #24]
 8009e52:	e7fe      	b.n	8009e52 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e54:	f001 fed8 	bl	800bc08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01f      	beq.n	8009ea4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e64:	68b9      	ldr	r1, [r7, #8]
 8009e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e68:	f000 f8f6 	bl	800a058 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	1e5a      	subs	r2, r3, #1
 8009e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00f      	beq.n	8009e9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	3310      	adds	r3, #16
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fee7 	bl	800ac54 <xTaskRemoveFromEventList>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d007      	beq.n	8009e9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e8c:	4b3c      	ldr	r3, [pc, #240]	; (8009f80 <xQueueReceive+0x1c0>)
 8009e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	f3bf 8f4f 	dsb	sy
 8009e98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e9c:	f001 fee6 	bl	800bc6c <vPortExitCritical>
				return pdPASS;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e069      	b.n	8009f78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eaa:	f001 fedf 	bl	800bc6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	e062      	b.n	8009f78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009eb8:	f107 0310 	add.w	r3, r7, #16
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f000 ff2d 	bl	800ad1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ec6:	f001 fed1 	bl	800bc6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eca:	f000 fc8b 	bl	800a7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ece:	f001 fe9b 	bl	800bc08 <vPortEnterCritical>
 8009ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ed8:	b25b      	sxtb	r3, r3
 8009eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ede:	d103      	bne.n	8009ee8 <xQueueReceive+0x128>
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef4:	d103      	bne.n	8009efe <xQueueReceive+0x13e>
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009efe:	f001 feb5 	bl	800bc6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f02:	1d3a      	adds	r2, r7, #4
 8009f04:	f107 0310 	add.w	r3, r7, #16
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 ff1c 	bl	800ad48 <xTaskCheckForTimeOut>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d123      	bne.n	8009f5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f18:	f000 f916 	bl	800a148 <prvIsQueueEmpty>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d017      	beq.n	8009f52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	3324      	adds	r3, #36	; 0x24
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 fe40 	bl	800abb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f32:	f000 f8b7 	bl	800a0a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f36:	f000 fc63 	bl	800a800 <xTaskResumeAll>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d189      	bne.n	8009e54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009f40:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <xQueueReceive+0x1c0>)
 8009f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	e780      	b.n	8009e54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f54:	f000 f8a6 	bl	800a0a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f58:	f000 fc52 	bl	800a800 <xTaskResumeAll>
 8009f5c:	e77a      	b.n	8009e54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f60:	f000 f8a0 	bl	800a0a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f64:	f000 fc4c 	bl	800a800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f6a:	f000 f8ed 	bl	800a148 <prvIsQueueEmpty>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f43f af6f 	beq.w	8009e54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3730      	adds	r7, #48	; 0x30
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	e000ed04 	.word	0xe000ed04

08009f84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10d      	bne.n	8009fbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d14d      	bne.n	800a046 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f001 f82c 	bl	800b00c <xTaskPriorityDisinherit>
 8009fb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	e043      	b.n	800a046 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d119      	bne.n	8009ff8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6858      	ldr	r0, [r3, #4]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	461a      	mov	r2, r3
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	f002 f9f8 	bl	800c3c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	685a      	ldr	r2, [r3, #4]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	441a      	add	r2, r3
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685a      	ldr	r2, [r3, #4]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d32b      	bcc.n	800a046 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	605a      	str	r2, [r3, #4]
 8009ff6:	e026      	b.n	800a046 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68d8      	ldr	r0, [r3, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	461a      	mov	r2, r3
 800a002:	68b9      	ldr	r1, [r7, #8]
 800a004:	f002 f9de 	bl	800c3c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	425b      	negs	r3, r3
 800a012:	441a      	add	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	68da      	ldr	r2, [r3, #12]
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	429a      	cmp	r2, r3
 800a022:	d207      	bcs.n	800a034 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	689a      	ldr	r2, [r3, #8]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	425b      	negs	r3, r3
 800a02e:	441a      	add	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d105      	bne.n	800a046 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	3b01      	subs	r3, #1
 800a044:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a04e:	697b      	ldr	r3, [r7, #20]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a066:	2b00      	cmp	r3, #0
 800a068:	d018      	beq.n	800a09c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a072:	441a      	add	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	68da      	ldr	r2, [r3, #12]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	429a      	cmp	r2, r3
 800a082:	d303      	bcc.n	800a08c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68d9      	ldr	r1, [r3, #12]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	461a      	mov	r2, r3
 800a096:	6838      	ldr	r0, [r7, #0]
 800a098:	f002 f994 	bl	800c3c4 <memcpy>
	}
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0ac:	f001 fdac 	bl	800bc08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0b8:	e011      	b.n	800a0de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d012      	beq.n	800a0e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3324      	adds	r3, #36	; 0x24
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fdc4 	bl	800ac54 <xTaskRemoveFromEventList>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a0d2:	f000 fe9d 	bl	800ae10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a0d6:	7bfb      	ldrb	r3, [r7, #15]
 800a0d8:	3b01      	subs	r3, #1
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dce9      	bgt.n	800a0ba <prvUnlockQueue+0x16>
 800a0e6:	e000      	b.n	800a0ea <prvUnlockQueue+0x46>
					break;
 800a0e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	22ff      	movs	r2, #255	; 0xff
 800a0ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0f2:	f001 fdbb 	bl	800bc6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0f6:	f001 fd87 	bl	800bc08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a100:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a102:	e011      	b.n	800a128 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	691b      	ldr	r3, [r3, #16]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d012      	beq.n	800a132 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3310      	adds	r3, #16
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fd9f 	bl	800ac54 <xTaskRemoveFromEventList>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a11c:	f000 fe78 	bl	800ae10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a120:	7bbb      	ldrb	r3, [r7, #14]
 800a122:	3b01      	subs	r3, #1
 800a124:	b2db      	uxtb	r3, r3
 800a126:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dce9      	bgt.n	800a104 <prvUnlockQueue+0x60>
 800a130:	e000      	b.n	800a134 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a132:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	22ff      	movs	r2, #255	; 0xff
 800a138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a13c:	f001 fd96 	bl	800bc6c <vPortExitCritical>
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a150:	f001 fd5a 	bl	800bc08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a15c:	2301      	movs	r3, #1
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	e001      	b.n	800a166 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a162:	2300      	movs	r3, #0
 800a164:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a166:	f001 fd81 	bl	800bc6c <vPortExitCritical>

	return xReturn;
 800a16a:	68fb      	ldr	r3, [r7, #12]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a17c:	f001 fd44 	bl	800bc08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d102      	bne.n	800a192 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	e001      	b.n	800a196 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a192:	2300      	movs	r3, #0
 800a194:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a196:	f001 fd69 	bl	800bc6c <vPortExitCritical>

	return xReturn;
 800a19a:	68fb      	ldr	r3, [r7, #12]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e014      	b.n	800a1de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a1b4:	4a0e      	ldr	r2, [pc, #56]	; (800a1f0 <vQueueAddToRegistry+0x4c>)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a1c0:	490b      	ldr	r1, [pc, #44]	; (800a1f0 <vQueueAddToRegistry+0x4c>)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a1ca:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <vQueueAddToRegistry+0x4c>)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	4413      	add	r3, r2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a1d6:	e005      	b.n	800a1e4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3301      	adds	r3, #1
 800a1dc:	60fb      	str	r3, [r7, #12]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b07      	cmp	r3, #7
 800a1e2:	d9e7      	bls.n	800a1b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1e4:	bf00      	nop
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	200053b0 	.word	0x200053b0

0800a1f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b086      	sub	sp, #24
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a204:	f001 fd00 	bl	800bc08 <vPortEnterCritical>
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a20e:	b25b      	sxtb	r3, r3
 800a210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a214:	d103      	bne.n	800a21e <vQueueWaitForMessageRestricted+0x2a>
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a224:	b25b      	sxtb	r3, r3
 800a226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a22a:	d103      	bne.n	800a234 <vQueueWaitForMessageRestricted+0x40>
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a234:	f001 fd1a 	bl	800bc6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d106      	bne.n	800a24e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	68b9      	ldr	r1, [r7, #8]
 800a248:	4618      	mov	r0, r3
 800a24a:	f000 fcd7 	bl	800abfc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a24e:	6978      	ldr	r0, [r7, #20]
 800a250:	f7ff ff28 	bl	800a0a4 <prvUnlockQueue>
	}
 800a254:	bf00      	nop
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08e      	sub	sp, #56	; 0x38
 800a260:	af04      	add	r7, sp, #16
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10b      	bne.n	800a288 <xTaskCreateStatic+0x2c>
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	b672      	cpsid	i
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	b662      	cpsie	i
 800a284:	623b      	str	r3, [r7, #32]
 800a286:	e7fe      	b.n	800a286 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10b      	bne.n	800a2a6 <xTaskCreateStatic+0x4a>
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	b672      	cpsid	i
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	b662      	cpsie	i
 800a2a2:	61fb      	str	r3, [r7, #28]
 800a2a4:	e7fe      	b.n	800a2a4 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a2a6:	235c      	movs	r3, #92	; 0x5c
 800a2a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2b5c      	cmp	r3, #92	; 0x5c
 800a2ae:	d00b      	beq.n	800a2c8 <xTaskCreateStatic+0x6c>
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	b672      	cpsid	i
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	b662      	cpsie	i
 800a2c4:	61bb      	str	r3, [r7, #24]
 800a2c6:	e7fe      	b.n	800a2c6 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a2c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01e      	beq.n	800a30e <xTaskCreateStatic+0xb2>
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d01b      	beq.n	800a30e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	f107 0314 	add.w	r3, r7, #20
 800a2f4:	9301      	str	r3, [sp, #4]
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	68b9      	ldr	r1, [r7, #8]
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 f850 	bl	800a3a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a308:	f000 f8de 	bl	800a4c8 <prvAddNewTaskToReadyList>
 800a30c:	e001      	b.n	800a312 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a312:	697b      	ldr	r3, [r7, #20]
	}
 800a314:	4618      	mov	r0, r3
 800a316:	3728      	adds	r7, #40	; 0x28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b08c      	sub	sp, #48	; 0x30
 800a320:	af04      	add	r7, sp, #16
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	603b      	str	r3, [r7, #0]
 800a328:	4613      	mov	r3, r2
 800a32a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a32c:	88fb      	ldrh	r3, [r7, #6]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4618      	mov	r0, r3
 800a332:	f001 fd8b 	bl	800be4c <pvPortMalloc>
 800a336:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00e      	beq.n	800a35c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a33e:	205c      	movs	r0, #92	; 0x5c
 800a340:	f001 fd84 	bl	800be4c <pvPortMalloc>
 800a344:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	631a      	str	r2, [r3, #48]	; 0x30
 800a352:	e005      	b.n	800a360 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a354:	6978      	ldr	r0, [r7, #20]
 800a356:	f001 fe41 	bl	800bfdc <vPortFree>
 800a35a:	e001      	b.n	800a360 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a35c:	2300      	movs	r3, #0
 800a35e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a360:	69fb      	ldr	r3, [r7, #28]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d017      	beq.n	800a396 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a36e:	88fa      	ldrh	r2, [r7, #6]
 800a370:	2300      	movs	r3, #0
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	9302      	str	r3, [sp, #8]
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 f80e 	bl	800a3a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a38a:	69f8      	ldr	r0, [r7, #28]
 800a38c:	f000 f89c 	bl	800a4c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a390:	2301      	movs	r3, #1
 800a392:	61bb      	str	r3, [r7, #24]
 800a394:	e002      	b.n	800a39c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a39a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a39c:	69bb      	ldr	r3, [r7, #24]
	}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3720      	adds	r7, #32
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b088      	sub	sp, #32
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	607a      	str	r2, [r7, #4]
 800a3b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	461a      	mov	r2, r3
 800a3be:	21a5      	movs	r1, #165	; 0xa5
 800a3c0:	f002 f80b 	bl	800c3da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3c8:	6879      	ldr	r1, [r7, #4]
 800a3ca:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a3ce:	440b      	add	r3, r1
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	f023 0307 	bic.w	r3, r3, #7
 800a3dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <prvInitialiseNewTask+0x5a>
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	b672      	cpsid	i
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	b662      	cpsie	i
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e7fe      	b.n	800a3fe <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01f      	beq.n	800a446 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
 800a40a:	e012      	b.n	800a432 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a40c:	68ba      	ldr	r2, [r7, #8]
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	4413      	add	r3, r2
 800a412:	7819      	ldrb	r1, [r3, #0]
 800a414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	4413      	add	r3, r2
 800a41a:	3334      	adds	r3, #52	; 0x34
 800a41c:	460a      	mov	r2, r1
 800a41e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	4413      	add	r3, r2
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d006      	beq.n	800a43a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3301      	adds	r3, #1
 800a430:	61fb      	str	r3, [r7, #28]
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	2b0f      	cmp	r3, #15
 800a436:	d9e9      	bls.n	800a40c <prvInitialiseNewTask+0x66>
 800a438:	e000      	b.n	800a43c <prvInitialiseNewTask+0x96>
			{
				break;
 800a43a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a444:	e003      	b.n	800a44e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	2b37      	cmp	r3, #55	; 0x37
 800a452:	d901      	bls.n	800a458 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a454:	2337      	movs	r3, #55	; 0x37
 800a456:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a45c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a462:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	2200      	movs	r2, #0
 800a468:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	3304      	adds	r3, #4
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff f96a 	bl	8009748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a476:	3318      	adds	r3, #24
 800a478:	4618      	mov	r0, r3
 800a47a:	f7ff f965 	bl	8009748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a482:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a492:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	2200      	movs	r2, #0
 800a498:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a4a2:	683a      	ldr	r2, [r7, #0]
 800a4a4:	68f9      	ldr	r1, [r7, #12]
 800a4a6:	69b8      	ldr	r0, [r7, #24]
 800a4a8:	f001 faa6 	bl	800b9f8 <pxPortInitialiseStack>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d002      	beq.n	800a4be <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4be:	bf00      	nop
 800a4c0:	3720      	adds	r7, #32
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4d0:	f001 fb9a 	bl	800bc08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4d4:	4b2d      	ldr	r3, [pc, #180]	; (800a58c <prvAddNewTaskToReadyList+0xc4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	4a2c      	ldr	r2, [pc, #176]	; (800a58c <prvAddNewTaskToReadyList+0xc4>)
 800a4dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4de:	4b2c      	ldr	r3, [pc, #176]	; (800a590 <prvAddNewTaskToReadyList+0xc8>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4e6:	4a2a      	ldr	r2, [pc, #168]	; (800a590 <prvAddNewTaskToReadyList+0xc8>)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4ec:	4b27      	ldr	r3, [pc, #156]	; (800a58c <prvAddNewTaskToReadyList+0xc4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d110      	bne.n	800a516 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4f4:	f000 fcb0 	bl	800ae58 <prvInitialiseTaskLists>
 800a4f8:	e00d      	b.n	800a516 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4fa:	4b26      	ldr	r3, [pc, #152]	; (800a594 <prvAddNewTaskToReadyList+0xcc>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a502:	4b23      	ldr	r3, [pc, #140]	; (800a590 <prvAddNewTaskToReadyList+0xc8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d802      	bhi.n	800a516 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a510:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <prvAddNewTaskToReadyList+0xc8>)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a516:	4b20      	ldr	r3, [pc, #128]	; (800a598 <prvAddNewTaskToReadyList+0xd0>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	4a1e      	ldr	r2, [pc, #120]	; (800a598 <prvAddNewTaskToReadyList+0xd0>)
 800a51e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a520:	4b1d      	ldr	r3, [pc, #116]	; (800a598 <prvAddNewTaskToReadyList+0xd0>)
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52c:	4b1b      	ldr	r3, [pc, #108]	; (800a59c <prvAddNewTaskToReadyList+0xd4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	429a      	cmp	r2, r3
 800a532:	d903      	bls.n	800a53c <prvAddNewTaskToReadyList+0x74>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	4a18      	ldr	r2, [pc, #96]	; (800a59c <prvAddNewTaskToReadyList+0xd4>)
 800a53a:	6013      	str	r3, [r2, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a15      	ldr	r2, [pc, #84]	; (800a5a0 <prvAddNewTaskToReadyList+0xd8>)
 800a54a:	441a      	add	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3304      	adds	r3, #4
 800a550:	4619      	mov	r1, r3
 800a552:	4610      	mov	r0, r2
 800a554:	f7ff f905 	bl	8009762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a558:	f001 fb88 	bl	800bc6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a55c:	4b0d      	ldr	r3, [pc, #52]	; (800a594 <prvAddNewTaskToReadyList+0xcc>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00e      	beq.n	800a582 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvAddNewTaskToReadyList+0xc8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56e:	429a      	cmp	r2, r3
 800a570:	d207      	bcs.n	800a582 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a572:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <prvAddNewTaskToReadyList+0xdc>)
 800a574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20000f8c 	.word	0x20000f8c
 800a590:	20000ab8 	.word	0x20000ab8
 800a594:	20000f98 	.word	0x20000f98
 800a598:	20000fa8 	.word	0x20000fa8
 800a59c:	20000f94 	.word	0x20000f94
 800a5a0:	20000abc 	.word	0x20000abc
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	; 0x28
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10b      	bne.n	800a5d4 <vTaskDelayUntil+0x2c>
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	b672      	cpsid	i
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	b662      	cpsie	i
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	e7fe      	b.n	800a5d2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <vTaskDelayUntil+0x4a>
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	b672      	cpsid	i
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	b662      	cpsie	i
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	e7fe      	b.n	800a5f0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800a5f2:	4b2a      	ldr	r3, [pc, #168]	; (800a69c <vTaskDelayUntil+0xf4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00b      	beq.n	800a612 <vTaskDelayUntil+0x6a>
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	b672      	cpsid	i
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	b662      	cpsie	i
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	e7fe      	b.n	800a610 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800a612:	f000 f8e7 	bl	800a7e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a616:	4b22      	ldr	r3, [pc, #136]	; (800a6a0 <vTaskDelayUntil+0xf8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	4413      	add	r3, r2
 800a624:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6a3a      	ldr	r2, [r7, #32]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d20b      	bcs.n	800a648 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	429a      	cmp	r2, r3
 800a638:	d211      	bcs.n	800a65e <vTaskDelayUntil+0xb6>
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d90d      	bls.n	800a65e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a642:	2301      	movs	r3, #1
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
 800a646:	e00a      	b.n	800a65e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	69fa      	ldr	r2, [r7, #28]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d303      	bcc.n	800a65a <vTaskDelayUntil+0xb2>
 800a652:	69fa      	ldr	r2, [r7, #28]
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	429a      	cmp	r2, r3
 800a658:	d901      	bls.n	800a65e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69fa      	ldr	r2, [r7, #28]
 800a662:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	2b00      	cmp	r3, #0
 800a668:	d006      	beq.n	800a678 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a66a:	69fa      	ldr	r2, [r7, #28]
 800a66c:	6a3b      	ldr	r3, [r7, #32]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	2100      	movs	r1, #0
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fe18 	bl	800b2a8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a678:	f000 f8c2 	bl	800a800 <xTaskResumeAll>
 800a67c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d107      	bne.n	800a694 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <vTaskDelayUntil+0xfc>)
 800a686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a694:	bf00      	nop
 800a696:	3728      	adds	r7, #40	; 0x28
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	20000fb4 	.word	0x20000fb4
 800a6a0:	20000f90 	.word	0x20000f90
 800a6a4:	e000ed04 	.word	0xe000ed04

0800a6a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d018      	beq.n	800a6ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6ba:	4b14      	ldr	r3, [pc, #80]	; (800a70c <vTaskDelay+0x64>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00b      	beq.n	800a6da <vTaskDelay+0x32>
 800a6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	60bb      	str	r3, [r7, #8]
 800a6d8:	e7fe      	b.n	800a6d8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800a6da:	f000 f883 	bl	800a7e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6de:	2100      	movs	r1, #0
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 fde1 	bl	800b2a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6e6:	f000 f88b 	bl	800a800 <xTaskResumeAll>
 800a6ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d107      	bne.n	800a702 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a6f2:	4b07      	ldr	r3, [pc, #28]	; (800a710 <vTaskDelay+0x68>)
 800a6f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	f3bf 8f4f 	dsb	sy
 800a6fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	20000fb4 	.word	0x20000fb4
 800a710:	e000ed04 	.word	0xe000ed04

0800a714 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08a      	sub	sp, #40	; 0x28
 800a718:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a722:	463a      	mov	r2, r7
 800a724:	1d39      	adds	r1, r7, #4
 800a726:	f107 0308 	add.w	r3, r7, #8
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe ffb8 	bl	80096a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68ba      	ldr	r2, [r7, #8]
 800a736:	9202      	str	r2, [sp, #8]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	2300      	movs	r3, #0
 800a740:	460a      	mov	r2, r1
 800a742:	4922      	ldr	r1, [pc, #136]	; (800a7cc <vTaskStartScheduler+0xb8>)
 800a744:	4822      	ldr	r0, [pc, #136]	; (800a7d0 <vTaskStartScheduler+0xbc>)
 800a746:	f7ff fd89 	bl	800a25c <xTaskCreateStatic>
 800a74a:	4602      	mov	r2, r0
 800a74c:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <vTaskStartScheduler+0xc0>)
 800a74e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a750:	4b20      	ldr	r3, [pc, #128]	; (800a7d4 <vTaskStartScheduler+0xc0>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a758:	2301      	movs	r3, #1
 800a75a:	617b      	str	r3, [r7, #20]
 800a75c:	e001      	b.n	800a762 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a75e:	2300      	movs	r3, #0
 800a760:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d102      	bne.n	800a76e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a768:	f000 fdf2 	bl	800b350 <xTimerCreateTimerTask>
 800a76c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b01      	cmp	r3, #1
 800a772:	d117      	bne.n	800a7a4 <vTaskStartScheduler+0x90>
 800a774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a778:	b672      	cpsid	i
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	b662      	cpsie	i
 800a788:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a78a:	4b13      	ldr	r3, [pc, #76]	; (800a7d8 <vTaskStartScheduler+0xc4>)
 800a78c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a790:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <vTaskStartScheduler+0xc8>)
 800a794:	2201      	movs	r2, #1
 800a796:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a798:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <vTaskStartScheduler+0xcc>)
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a79e:	f001 f9b7 	bl	800bb10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7a2:	e00f      	b.n	800a7c4 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7aa:	d10b      	bne.n	800a7c4 <vTaskStartScheduler+0xb0>
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	60fb      	str	r3, [r7, #12]
 800a7c2:	e7fe      	b.n	800a7c2 <vTaskStartScheduler+0xae>
}
 800a7c4:	bf00      	nop
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	0800f940 	.word	0x0800f940
 800a7d0:	0800ae29 	.word	0x0800ae29
 800a7d4:	20000fb0 	.word	0x20000fb0
 800a7d8:	20000fac 	.word	0x20000fac
 800a7dc:	20000f98 	.word	0x20000f98
 800a7e0:	20000f90 	.word	0x20000f90

0800a7e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a7e8:	4b04      	ldr	r3, [pc, #16]	; (800a7fc <vTaskSuspendAll+0x18>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	4a03      	ldr	r2, [pc, #12]	; (800a7fc <vTaskSuspendAll+0x18>)
 800a7f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a7f2:	bf00      	nop
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	20000fb4 	.word	0x20000fb4

0800a800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a80e:	4b42      	ldr	r3, [pc, #264]	; (800a918 <xTaskResumeAll+0x118>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10b      	bne.n	800a82e <xTaskResumeAll+0x2e>
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	b672      	cpsid	i
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	b662      	cpsie	i
 800a82a:	603b      	str	r3, [r7, #0]
 800a82c:	e7fe      	b.n	800a82c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a82e:	f001 f9eb 	bl	800bc08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a832:	4b39      	ldr	r3, [pc, #228]	; (800a918 <xTaskResumeAll+0x118>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a37      	ldr	r2, [pc, #220]	; (800a918 <xTaskResumeAll+0x118>)
 800a83a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a83c:	4b36      	ldr	r3, [pc, #216]	; (800a918 <xTaskResumeAll+0x118>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d162      	bne.n	800a90a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a844:	4b35      	ldr	r3, [pc, #212]	; (800a91c <xTaskResumeAll+0x11c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d05e      	beq.n	800a90a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a84c:	e02f      	b.n	800a8ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a84e:	4b34      	ldr	r3, [pc, #208]	; (800a920 <xTaskResumeAll+0x120>)
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3318      	adds	r3, #24
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe ffde 	bl	800981c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3304      	adds	r3, #4
 800a864:	4618      	mov	r0, r3
 800a866:	f7fe ffd9 	bl	800981c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86e:	4b2d      	ldr	r3, [pc, #180]	; (800a924 <xTaskResumeAll+0x124>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	429a      	cmp	r2, r3
 800a874:	d903      	bls.n	800a87e <xTaskResumeAll+0x7e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	4a2a      	ldr	r2, [pc, #168]	; (800a924 <xTaskResumeAll+0x124>)
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4a27      	ldr	r2, [pc, #156]	; (800a928 <xTaskResumeAll+0x128>)
 800a88c:	441a      	add	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3304      	adds	r3, #4
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f7fe ff64 	bl	8009762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a89e:	4b23      	ldr	r3, [pc, #140]	; (800a92c <xTaskResumeAll+0x12c>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d302      	bcc.n	800a8ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a8a8:	4b21      	ldr	r3, [pc, #132]	; (800a930 <xTaskResumeAll+0x130>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ae:	4b1c      	ldr	r3, [pc, #112]	; (800a920 <xTaskResumeAll+0x120>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1cb      	bne.n	800a84e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d001      	beq.n	800a8c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8bc:	f000 fb68 	bl	800af90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a8c0:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <xTaskResumeAll+0x134>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d010      	beq.n	800a8ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8cc:	f000 f858 	bl	800a980 <xTaskIncrementTick>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d002      	beq.n	800a8dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a8d6:	4b16      	ldr	r3, [pc, #88]	; (800a930 <xTaskResumeAll+0x130>)
 800a8d8:	2201      	movs	r2, #1
 800a8da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1f1      	bne.n	800a8cc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <xTaskResumeAll+0x134>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8ee:	4b10      	ldr	r3, [pc, #64]	; (800a930 <xTaskResumeAll+0x130>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8fa:	4b0f      	ldr	r3, [pc, #60]	; (800a938 <xTaskResumeAll+0x138>)
 800a8fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a900:	601a      	str	r2, [r3, #0]
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a90a:	f001 f9af 	bl	800bc6c <vPortExitCritical>

	return xAlreadyYielded;
 800a90e:	68bb      	ldr	r3, [r7, #8]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20000fb4 	.word	0x20000fb4
 800a91c:	20000f8c 	.word	0x20000f8c
 800a920:	20000f4c 	.word	0x20000f4c
 800a924:	20000f94 	.word	0x20000f94
 800a928:	20000abc 	.word	0x20000abc
 800a92c:	20000ab8 	.word	0x20000ab8
 800a930:	20000fa0 	.word	0x20000fa0
 800a934:	20000f9c 	.word	0x20000f9c
 800a938:	e000ed04 	.word	0xe000ed04

0800a93c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a942:	4b05      	ldr	r3, [pc, #20]	; (800a958 <xTaskGetTickCount+0x1c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a948:	687b      	ldr	r3, [r7, #4]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000f90 	.word	0x20000f90

0800a95c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a962:	f001 fa31 	bl	800bdc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a966:	2300      	movs	r3, #0
 800a968:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a96a:	4b04      	ldr	r3, [pc, #16]	; (800a97c <xTaskGetTickCountFromISR+0x20>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a970:	683b      	ldr	r3, [r7, #0]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000f90 	.word	0x20000f90

0800a980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a986:	2300      	movs	r3, #0
 800a988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a98a:	4b4f      	ldr	r3, [pc, #316]	; (800aac8 <xTaskIncrementTick+0x148>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 808a 	bne.w	800aaa8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a994:	4b4d      	ldr	r3, [pc, #308]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	3301      	adds	r3, #1
 800a99a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a99c:	4a4b      	ldr	r2, [pc, #300]	; (800aacc <xTaskIncrementTick+0x14c>)
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d121      	bne.n	800a9ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9a8:	4b49      	ldr	r3, [pc, #292]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00b      	beq.n	800a9ca <xTaskIncrementTick+0x4a>
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	b672      	cpsid	i
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	b662      	cpsie	i
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	e7fe      	b.n	800a9c8 <xTaskIncrementTick+0x48>
 800a9ca:	4b41      	ldr	r3, [pc, #260]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	4b40      	ldr	r3, [pc, #256]	; (800aad4 <xTaskIncrementTick+0x154>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a3e      	ldr	r2, [pc, #248]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	4a3e      	ldr	r2, [pc, #248]	; (800aad4 <xTaskIncrementTick+0x154>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6013      	str	r3, [r2, #0]
 800a9de:	4b3e      	ldr	r3, [pc, #248]	; (800aad8 <xTaskIncrementTick+0x158>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	4a3c      	ldr	r2, [pc, #240]	; (800aad8 <xTaskIncrementTick+0x158>)
 800a9e6:	6013      	str	r3, [r2, #0]
 800a9e8:	f000 fad2 	bl	800af90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9ec:	4b3b      	ldr	r3, [pc, #236]	; (800aadc <xTaskIncrementTick+0x15c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d349      	bcc.n	800aa8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9f6:	4b36      	ldr	r3, [pc, #216]	; (800aad0 <xTaskIncrementTick+0x150>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa00:	4b36      	ldr	r3, [pc, #216]	; (800aadc <xTaskIncrementTick+0x15c>)
 800aa02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa06:	601a      	str	r2, [r3, #0]
					break;
 800aa08:	e03f      	b.n	800aa8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa0a:	4b31      	ldr	r3, [pc, #196]	; (800aad0 <xTaskIncrementTick+0x150>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d203      	bcs.n	800aa2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa22:	4a2e      	ldr	r2, [pc, #184]	; (800aadc <xTaskIncrementTick+0x15c>)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aa28:	e02f      	b.n	800aa8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	3304      	adds	r3, #4
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fef4 	bl	800981c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d004      	beq.n	800aa46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	3318      	adds	r3, #24
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe feeb 	bl	800981c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa4a:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <xTaskIncrementTick+0x160>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d903      	bls.n	800aa5a <xTaskIncrementTick+0xda>
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	4a22      	ldr	r2, [pc, #136]	; (800aae0 <xTaskIncrementTick+0x160>)
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5e:	4613      	mov	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	4a1f      	ldr	r2, [pc, #124]	; (800aae4 <xTaskIncrementTick+0x164>)
 800aa68:	441a      	add	r2, r3
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	4619      	mov	r1, r3
 800aa70:	4610      	mov	r0, r2
 800aa72:	f7fe fe76 	bl	8009762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7a:	4b1b      	ldr	r3, [pc, #108]	; (800aae8 <xTaskIncrementTick+0x168>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3b8      	bcc.n	800a9f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aa84:	2301      	movs	r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa88:	e7b5      	b.n	800a9f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa8a:	4b17      	ldr	r3, [pc, #92]	; (800aae8 <xTaskIncrementTick+0x168>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	4914      	ldr	r1, [pc, #80]	; (800aae4 <xTaskIncrementTick+0x164>)
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d907      	bls.n	800aab2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	617b      	str	r3, [r7, #20]
 800aaa6:	e004      	b.n	800aab2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aaa8:	4b10      	ldr	r3, [pc, #64]	; (800aaec <xTaskIncrementTick+0x16c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3301      	adds	r3, #1
 800aaae:	4a0f      	ldr	r2, [pc, #60]	; (800aaec <xTaskIncrementTick+0x16c>)
 800aab0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aab2:	4b0f      	ldr	r3, [pc, #60]	; (800aaf0 <xTaskIncrementTick+0x170>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aabe:	697b      	ldr	r3, [r7, #20]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	20000fb4 	.word	0x20000fb4
 800aacc:	20000f90 	.word	0x20000f90
 800aad0:	20000f44 	.word	0x20000f44
 800aad4:	20000f48 	.word	0x20000f48
 800aad8:	20000fa4 	.word	0x20000fa4
 800aadc:	20000fac 	.word	0x20000fac
 800aae0:	20000f94 	.word	0x20000f94
 800aae4:	20000abc 	.word	0x20000abc
 800aae8:	20000ab8 	.word	0x20000ab8
 800aaec:	20000f9c 	.word	0x20000f9c
 800aaf0:	20000fa0 	.word	0x20000fa0

0800aaf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aafa:	4b28      	ldr	r3, [pc, #160]	; (800ab9c <vTaskSwitchContext+0xa8>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab02:	4b27      	ldr	r3, [pc, #156]	; (800aba0 <vTaskSwitchContext+0xac>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab08:	e042      	b.n	800ab90 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ab0a:	4b25      	ldr	r3, [pc, #148]	; (800aba0 <vTaskSwitchContext+0xac>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab10:	4b24      	ldr	r3, [pc, #144]	; (800aba4 <vTaskSwitchContext+0xb0>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	60fb      	str	r3, [r7, #12]
 800ab16:	e011      	b.n	800ab3c <vTaskSwitchContext+0x48>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10b      	bne.n	800ab36 <vTaskSwitchContext+0x42>
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	b672      	cpsid	i
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	b662      	cpsie	i
 800ab32:	607b      	str	r3, [r7, #4]
 800ab34:	e7fe      	b.n	800ab34 <vTaskSwitchContext+0x40>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	491a      	ldr	r1, [pc, #104]	; (800aba8 <vTaskSwitchContext+0xb4>)
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4613      	mov	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	440b      	add	r3, r1
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d0e3      	beq.n	800ab18 <vTaskSwitchContext+0x24>
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	4613      	mov	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <vTaskSwitchContext+0xb4>)
 800ab5c:	4413      	add	r3, r2
 800ab5e:	60bb      	str	r3, [r7, #8]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	685a      	ldr	r2, [r3, #4]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	3308      	adds	r3, #8
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d104      	bne.n	800ab80 <vTaskSwitchContext+0x8c>
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	605a      	str	r2, [r3, #4]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	4a09      	ldr	r2, [pc, #36]	; (800abac <vTaskSwitchContext+0xb8>)
 800ab88:	6013      	str	r3, [r2, #0]
 800ab8a:	4a06      	ldr	r2, [pc, #24]	; (800aba4 <vTaskSwitchContext+0xb0>)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6013      	str	r3, [r2, #0]
}
 800ab90:	bf00      	nop
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	20000fb4 	.word	0x20000fb4
 800aba0:	20000fa0 	.word	0x20000fa0
 800aba4:	20000f94 	.word	0x20000f94
 800aba8:	20000abc 	.word	0x20000abc
 800abac:	20000ab8 	.word	0x20000ab8

0800abb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10b      	bne.n	800abd8 <vTaskPlaceOnEventList+0x28>
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	b672      	cpsid	i
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	b662      	cpsie	i
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	e7fe      	b.n	800abd6 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abd8:	4b07      	ldr	r3, [pc, #28]	; (800abf8 <vTaskPlaceOnEventList+0x48>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	3318      	adds	r3, #24
 800abde:	4619      	mov	r1, r3
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f7fe fde2 	bl	80097aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abe6:	2101      	movs	r1, #1
 800abe8:	6838      	ldr	r0, [r7, #0]
 800abea:	f000 fb5d 	bl	800b2a8 <prvAddCurrentTaskToDelayedList>
}
 800abee:	bf00      	nop
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20000ab8 	.word	0x20000ab8

0800abfc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <vTaskPlaceOnEventListRestricted+0x2a>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	b672      	cpsid	i
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	b662      	cpsie	i
 800ac22:	617b      	str	r3, [r7, #20]
 800ac24:	e7fe      	b.n	800ac24 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac26:	4b0a      	ldr	r3, [pc, #40]	; (800ac50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	3318      	adds	r3, #24
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7fe fd97 	bl	8009762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d002      	beq.n	800ac40 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ac3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	68b8      	ldr	r0, [r7, #8]
 800ac44:	f000 fb30 	bl	800b2a8 <prvAddCurrentTaskToDelayedList>
	}
 800ac48:	bf00      	nop
 800ac4a:	3718      	adds	r7, #24
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000ab8 	.word	0x20000ab8

0800ac54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b086      	sub	sp, #24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <xTaskRemoveFromEventList+0x2e>
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	b672      	cpsid	i
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	b662      	cpsie	i
 800ac7e:	60fb      	str	r3, [r7, #12]
 800ac80:	e7fe      	b.n	800ac80 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	3318      	adds	r3, #24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fdc8 	bl	800981c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac8c:	4b1d      	ldr	r3, [pc, #116]	; (800ad04 <xTaskRemoveFromEventList+0xb0>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d11d      	bne.n	800acd0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fdbf 	bl	800981c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	4b19      	ldr	r3, [pc, #100]	; (800ad08 <xTaskRemoveFromEventList+0xb4>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d903      	bls.n	800acb2 <xTaskRemoveFromEventList+0x5e>
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acae:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <xTaskRemoveFromEventList+0xb4>)
 800acb0:	6013      	str	r3, [r2, #0]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb6:	4613      	mov	r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4a13      	ldr	r2, [pc, #76]	; (800ad0c <xTaskRemoveFromEventList+0xb8>)
 800acc0:	441a      	add	r2, r3
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3304      	adds	r3, #4
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7fe fd4a 	bl	8009762 <vListInsertEnd>
 800acce:	e005      	b.n	800acdc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	3318      	adds	r3, #24
 800acd4:	4619      	mov	r1, r3
 800acd6:	480e      	ldr	r0, [pc, #56]	; (800ad10 <xTaskRemoveFromEventList+0xbc>)
 800acd8:	f7fe fd43 	bl	8009762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace0:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <xTaskRemoveFromEventList+0xc0>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d905      	bls.n	800acf6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acea:	2301      	movs	r3, #1
 800acec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acee:	4b0a      	ldr	r3, [pc, #40]	; (800ad18 <xTaskRemoveFromEventList+0xc4>)
 800acf0:	2201      	movs	r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	e001      	b.n	800acfa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acfa:	697b      	ldr	r3, [r7, #20]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}
 800ad04:	20000fb4 	.word	0x20000fb4
 800ad08:	20000f94 	.word	0x20000f94
 800ad0c:	20000abc 	.word	0x20000abc
 800ad10:	20000f4c 	.word	0x20000f4c
 800ad14:	20000ab8 	.word	0x20000ab8
 800ad18:	20000fa0 	.word	0x20000fa0

0800ad1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad24:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <vTaskInternalSetTimeOutState+0x24>)
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <vTaskInternalSetTimeOutState+0x28>)
 800ad2e:	681a      	ldr	r2, [r3, #0]
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	605a      	str	r2, [r3, #4]
}
 800ad34:	bf00      	nop
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	20000fa4 	.word	0x20000fa4
 800ad44:	20000f90 	.word	0x20000f90

0800ad48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10b      	bne.n	800ad70 <xTaskCheckForTimeOut+0x28>
 800ad58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5c:	b672      	cpsid	i
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	b662      	cpsie	i
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	e7fe      	b.n	800ad6e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10b      	bne.n	800ad8e <xTaskCheckForTimeOut+0x46>
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	b672      	cpsid	i
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	b662      	cpsie	i
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	e7fe      	b.n	800ad8c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800ad8e:	f000 ff3b 	bl	800bc08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad92:	4b1d      	ldr	r3, [pc, #116]	; (800ae08 <xTaskCheckForTimeOut+0xc0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adaa:	d102      	bne.n	800adb2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
 800adb0:	e023      	b.n	800adfa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	4b15      	ldr	r3, [pc, #84]	; (800ae0c <xTaskCheckForTimeOut+0xc4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d007      	beq.n	800adce <xTaskCheckForTimeOut+0x86>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	69ba      	ldr	r2, [r7, #24]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d302      	bcc.n	800adce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	61fb      	str	r3, [r7, #28]
 800adcc:	e015      	b.n	800adfa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	429a      	cmp	r2, r3
 800add6:	d20b      	bcs.n	800adf0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	1ad2      	subs	r2, r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ff99 	bl	800ad1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adea:	2300      	movs	r3, #0
 800adec:	61fb      	str	r3, [r7, #28]
 800adee:	e004      	b.n	800adfa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adf6:	2301      	movs	r3, #1
 800adf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adfa:	f000 ff37 	bl	800bc6c <vPortExitCritical>

	return xReturn;
 800adfe:	69fb      	ldr	r3, [r7, #28]
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3720      	adds	r7, #32
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}
 800ae08:	20000f90 	.word	0x20000f90
 800ae0c:	20000fa4 	.word	0x20000fa4

0800ae10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae10:	b480      	push	{r7}
 800ae12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae14:	4b03      	ldr	r3, [pc, #12]	; (800ae24 <vTaskMissedYield+0x14>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	601a      	str	r2, [r3, #0]
}
 800ae1a:	bf00      	nop
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	20000fa0 	.word	0x20000fa0

0800ae28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae30:	f000 f852 	bl	800aed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae34:	4b06      	ldr	r3, [pc, #24]	; (800ae50 <prvIdleTask+0x28>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d9f9      	bls.n	800ae30 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae3c:	4b05      	ldr	r3, [pc, #20]	; (800ae54 <prvIdleTask+0x2c>)
 800ae3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae4c:	e7f0      	b.n	800ae30 <prvIdleTask+0x8>
 800ae4e:	bf00      	nop
 800ae50:	20000abc 	.word	0x20000abc
 800ae54:	e000ed04 	.word	0xe000ed04

0800ae58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
 800ae62:	e00c      	b.n	800ae7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	4613      	mov	r3, r2
 800ae68:	009b      	lsls	r3, r3, #2
 800ae6a:	4413      	add	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4a12      	ldr	r2, [pc, #72]	; (800aeb8 <prvInitialiseTaskLists+0x60>)
 800ae70:	4413      	add	r3, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fe fc48 	bl	8009708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	607b      	str	r3, [r7, #4]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2b37      	cmp	r3, #55	; 0x37
 800ae82:	d9ef      	bls.n	800ae64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae84:	480d      	ldr	r0, [pc, #52]	; (800aebc <prvInitialiseTaskLists+0x64>)
 800ae86:	f7fe fc3f 	bl	8009708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae8a:	480d      	ldr	r0, [pc, #52]	; (800aec0 <prvInitialiseTaskLists+0x68>)
 800ae8c:	f7fe fc3c 	bl	8009708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae90:	480c      	ldr	r0, [pc, #48]	; (800aec4 <prvInitialiseTaskLists+0x6c>)
 800ae92:	f7fe fc39 	bl	8009708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae96:	480c      	ldr	r0, [pc, #48]	; (800aec8 <prvInitialiseTaskLists+0x70>)
 800ae98:	f7fe fc36 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae9c:	480b      	ldr	r0, [pc, #44]	; (800aecc <prvInitialiseTaskLists+0x74>)
 800ae9e:	f7fe fc33 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <prvInitialiseTaskLists+0x78>)
 800aea4:	4a05      	ldr	r2, [pc, #20]	; (800aebc <prvInitialiseTaskLists+0x64>)
 800aea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <prvInitialiseTaskLists+0x7c>)
 800aeaa:	4a05      	ldr	r2, [pc, #20]	; (800aec0 <prvInitialiseTaskLists+0x68>)
 800aeac:	601a      	str	r2, [r3, #0]
}
 800aeae:	bf00      	nop
 800aeb0:	3708      	adds	r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	20000abc 	.word	0x20000abc
 800aebc:	20000f1c 	.word	0x20000f1c
 800aec0:	20000f30 	.word	0x20000f30
 800aec4:	20000f4c 	.word	0x20000f4c
 800aec8:	20000f60 	.word	0x20000f60
 800aecc:	20000f78 	.word	0x20000f78
 800aed0:	20000f44 	.word	0x20000f44
 800aed4:	20000f48 	.word	0x20000f48

0800aed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aede:	e019      	b.n	800af14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aee0:	f000 fe92 	bl	800bc08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aee4:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <prvCheckTasksWaitingTermination+0x4c>)
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3304      	adds	r3, #4
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7fe fc93 	bl	800981c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aef6:	4b0c      	ldr	r3, [pc, #48]	; (800af28 <prvCheckTasksWaitingTermination+0x50>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	4a0a      	ldr	r2, [pc, #40]	; (800af28 <prvCheckTasksWaitingTermination+0x50>)
 800aefe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <prvCheckTasksWaitingTermination+0x54>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3b01      	subs	r3, #1
 800af06:	4a09      	ldr	r2, [pc, #36]	; (800af2c <prvCheckTasksWaitingTermination+0x54>)
 800af08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af0a:	f000 feaf 	bl	800bc6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f80e 	bl	800af30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af14:	4b05      	ldr	r3, [pc, #20]	; (800af2c <prvCheckTasksWaitingTermination+0x54>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e1      	bne.n	800aee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	20000f60 	.word	0x20000f60
 800af28:	20000f8c 	.word	0x20000f8c
 800af2c:	20000f74 	.word	0x20000f74

0800af30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af30:	b580      	push	{r7, lr}
 800af32:	b084      	sub	sp, #16
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d108      	bne.n	800af54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	4618      	mov	r0, r3
 800af48:	f001 f848 	bl	800bfdc <vPortFree>
				vPortFree( pxTCB );
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 f845 	bl	800bfdc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af52:	e019      	b.n	800af88 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d103      	bne.n	800af66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f83c 	bl	800bfdc <vPortFree>
	}
 800af64:	e010      	b.n	800af88 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d00b      	beq.n	800af88 <prvDeleteTCB+0x58>
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	b672      	cpsid	i
 800af76:	f383 8811 	msr	BASEPRI, r3
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	b662      	cpsie	i
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	e7fe      	b.n	800af86 <prvDeleteTCB+0x56>
	}
 800af88:	bf00      	nop
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af90:	b480      	push	{r7}
 800af92:	b083      	sub	sp, #12
 800af94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af96:	4b0c      	ldr	r3, [pc, #48]	; (800afc8 <prvResetNextTaskUnblockTime+0x38>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d104      	bne.n	800afaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800afa0:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <prvResetNextTaskUnblockTime+0x3c>)
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800afa8:	e008      	b.n	800afbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afaa:	4b07      	ldr	r3, [pc, #28]	; (800afc8 <prvResetNextTaskUnblockTime+0x38>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	4a04      	ldr	r2, [pc, #16]	; (800afcc <prvResetNextTaskUnblockTime+0x3c>)
 800afba:	6013      	str	r3, [r2, #0]
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	20000f44 	.word	0x20000f44
 800afcc:	20000fac 	.word	0x20000fac

0800afd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afd6:	4b0b      	ldr	r3, [pc, #44]	; (800b004 <xTaskGetSchedulerState+0x34>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d102      	bne.n	800afe4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afde:	2301      	movs	r3, #1
 800afe0:	607b      	str	r3, [r7, #4]
 800afe2:	e008      	b.n	800aff6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afe4:	4b08      	ldr	r3, [pc, #32]	; (800b008 <xTaskGetSchedulerState+0x38>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afec:	2302      	movs	r3, #2
 800afee:	607b      	str	r3, [r7, #4]
 800aff0:	e001      	b.n	800aff6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aff2:	2300      	movs	r3, #0
 800aff4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aff6:	687b      	ldr	r3, [r7, #4]
	}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	20000f98 	.word	0x20000f98
 800b008:	20000fb4 	.word	0x20000fb4

0800b00c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d058      	beq.n	800b0d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b022:	4b2f      	ldr	r3, [pc, #188]	; (800b0e0 <xTaskPriorityDisinherit+0xd4>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d00b      	beq.n	800b044 <xTaskPriorityDisinherit+0x38>
 800b02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b030:	b672      	cpsid	i
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	b662      	cpsie	i
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	e7fe      	b.n	800b042 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10b      	bne.n	800b064 <xTaskPriorityDisinherit+0x58>
 800b04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b050:	b672      	cpsid	i
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	b662      	cpsie	i
 800b060:	60bb      	str	r3, [r7, #8]
 800b062:	e7fe      	b.n	800b062 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b076:	429a      	cmp	r2, r3
 800b078:	d02c      	beq.n	800b0d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d128      	bne.n	800b0d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	3304      	adds	r3, #4
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fbc8 	bl	800981c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a4:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <xTaskPriorityDisinherit+0xd8>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d903      	bls.n	800b0b4 <xTaskPriorityDisinherit+0xa8>
 800b0ac:	693b      	ldr	r3, [r7, #16]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	4a0c      	ldr	r2, [pc, #48]	; (800b0e4 <xTaskPriorityDisinherit+0xd8>)
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4a09      	ldr	r2, [pc, #36]	; (800b0e8 <xTaskPriorityDisinherit+0xdc>)
 800b0c2:	441a      	add	r2, r3
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	3304      	adds	r3, #4
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7fe fb49 	bl	8009762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0d4:	697b      	ldr	r3, [r7, #20]
	}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20000ab8 	.word	0x20000ab8
 800b0e4:	20000f94 	.word	0x20000f94
 800b0e8:	20000abc 	.word	0x20000abc

0800b0ec <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b0f6:	f000 fd87 	bl	800bc08 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b0fa:	4b1e      	ldr	r3, [pc, #120]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b100:	2b00      	cmp	r3, #0
 800b102:	d113      	bne.n	800b12c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b104:	4b1b      	ldr	r3, [pc, #108]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00b      	beq.n	800b12c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b114:	2101      	movs	r1, #1
 800b116:	6838      	ldr	r0, [r7, #0]
 800b118:	f000 f8c6 	bl	800b2a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b11c:	4b16      	ldr	r3, [pc, #88]	; (800b178 <ulTaskNotifyTake+0x8c>)
 800b11e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	f3bf 8f4f 	dsb	sy
 800b128:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b12c:	f000 fd9e 	bl	800bc6c <vPortExitCritical>

		taskENTER_CRITICAL();
 800b130:	f000 fd6a 	bl	800bc08 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b134:	4b0f      	ldr	r3, [pc, #60]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00c      	beq.n	800b15c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b148:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2200      	movs	r2, #0
 800b14e:	655a      	str	r2, [r3, #84]	; 0x54
 800b150:	e004      	b.n	800b15c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b152:	4b08      	ldr	r3, [pc, #32]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	3a01      	subs	r2, #1
 800b15a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b15c:	4b05      	ldr	r3, [pc, #20]	; (800b174 <ulTaskNotifyTake+0x88>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b166:	f000 fd81 	bl	800bc6c <vPortExitCritical>

		return ulReturn;
 800b16a:	68fb      	ldr	r3, [r7, #12]
	}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000ab8 	.word	0x20000ab8
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08a      	sub	sp, #40	; 0x28
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10b      	bne.n	800b1a4 <vTaskNotifyGiveFromISR+0x28>
 800b18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b190:	b672      	cpsid	i
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	b662      	cpsie	i
 800b1a0:	61bb      	str	r3, [r7, #24]
 800b1a2:	e7fe      	b.n	800b1a2 <vTaskNotifyGiveFromISR+0x26>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b1a4:	f000 fe10 	bl	800bdc8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800b1ac:	f3ef 8211 	mrs	r2, BASEPRI
 800b1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b4:	b672      	cpsid	i
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	b662      	cpsie	i
 800b1c4:	617a      	str	r2, [r7, #20]
 800b1c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b1c8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b1ca:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b1d2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e4:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b1e6:	7ffb      	ldrb	r3, [r7, #31]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d147      	bne.n	800b27c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00b      	beq.n	800b20c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	b672      	cpsid	i
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	b662      	cpsie	i
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	e7fe      	b.n	800b20a <vTaskNotifyGiveFromISR+0x8e>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b20c:	4b20      	ldr	r3, [pc, #128]	; (800b290 <vTaskNotifyGiveFromISR+0x114>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d11d      	bne.n	800b250 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	3304      	adds	r3, #4
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fe faff 	bl	800981c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4b1c      	ldr	r3, [pc, #112]	; (800b294 <vTaskNotifyGiveFromISR+0x118>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d903      	bls.n	800b232 <vTaskNotifyGiveFromISR+0xb6>
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	4a19      	ldr	r2, [pc, #100]	; (800b294 <vTaskNotifyGiveFromISR+0x118>)
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	4613      	mov	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4a16      	ldr	r2, [pc, #88]	; (800b298 <vTaskNotifyGiveFromISR+0x11c>)
 800b240:	441a      	add	r2, r3
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	3304      	adds	r3, #4
 800b246:	4619      	mov	r1, r3
 800b248:	4610      	mov	r0, r2
 800b24a:	f7fe fa8a 	bl	8009762 <vListInsertEnd>
 800b24e:	e005      	b.n	800b25c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	3318      	adds	r3, #24
 800b254:	4619      	mov	r1, r3
 800b256:	4811      	ldr	r0, [pc, #68]	; (800b29c <vTaskNotifyGiveFromISR+0x120>)
 800b258:	f7fe fa83 	bl	8009762 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b260:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <vTaskNotifyGiveFromISR+0x124>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b266:	429a      	cmp	r2, r3
 800b268:	d908      	bls.n	800b27c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2201      	movs	r2, #1
 800b274:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <vTaskNotifyGiveFromISR+0x128>)
 800b278:	2201      	movs	r2, #1
 800b27a:	601a      	str	r2, [r3, #0]
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800b286:	bf00      	nop
 800b288:	3728      	adds	r7, #40	; 0x28
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	20000fb4 	.word	0x20000fb4
 800b294:	20000f94 	.word	0x20000f94
 800b298:	20000abc 	.word	0x20000abc
 800b29c:	20000f4c 	.word	0x20000f4c
 800b2a0:	20000ab8 	.word	0x20000ab8
 800b2a4:	20000fa0 	.word	0x20000fa0

0800b2a8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2b2:	4b21      	ldr	r3, [pc, #132]	; (800b338 <prvAddCurrentTaskToDelayedList+0x90>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2b8:	4b20      	ldr	r3, [pc, #128]	; (800b33c <prvAddCurrentTaskToDelayedList+0x94>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3304      	adds	r3, #4
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fe faac 	bl	800981c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ca:	d10a      	bne.n	800b2e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d007      	beq.n	800b2e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2d2:	4b1a      	ldr	r3, [pc, #104]	; (800b33c <prvAddCurrentTaskToDelayedList+0x94>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4819      	ldr	r0, [pc, #100]	; (800b340 <prvAddCurrentTaskToDelayedList+0x98>)
 800b2dc:	f7fe fa41 	bl	8009762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2e0:	e026      	b.n	800b330 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2ea:	4b14      	ldr	r3, [pc, #80]	; (800b33c <prvAddCurrentTaskToDelayedList+0x94>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d209      	bcs.n	800b30e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2fa:	4b12      	ldr	r3, [pc, #72]	; (800b344 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	4b0f      	ldr	r3, [pc, #60]	; (800b33c <prvAddCurrentTaskToDelayedList+0x94>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	3304      	adds	r3, #4
 800b304:	4619      	mov	r1, r3
 800b306:	4610      	mov	r0, r2
 800b308:	f7fe fa4f 	bl	80097aa <vListInsert>
}
 800b30c:	e010      	b.n	800b330 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b30e:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	4b0a      	ldr	r3, [pc, #40]	; (800b33c <prvAddCurrentTaskToDelayedList+0x94>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f7fe fa45 	bl	80097aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	68ba      	ldr	r2, [r7, #8]
 800b326:	429a      	cmp	r2, r3
 800b328:	d202      	bcs.n	800b330 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b32a:	4a08      	ldr	r2, [pc, #32]	; (800b34c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	6013      	str	r3, [r2, #0]
}
 800b330:	bf00      	nop
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	20000f90 	.word	0x20000f90
 800b33c:	20000ab8 	.word	0x20000ab8
 800b340:	20000f78 	.word	0x20000f78
 800b344:	20000f48 	.word	0x20000f48
 800b348:	20000f44 	.word	0x20000f44
 800b34c:	20000fac 	.word	0x20000fac

0800b350 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b356:	2300      	movs	r3, #0
 800b358:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b35a:	f000 fb0d 	bl	800b978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b35e:	4b1d      	ldr	r3, [pc, #116]	; (800b3d4 <xTimerCreateTimerTask+0x84>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d021      	beq.n	800b3aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b36a:	2300      	movs	r3, #0
 800b36c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b36e:	1d3a      	adds	r2, r7, #4
 800b370:	f107 0108 	add.w	r1, r7, #8
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4618      	mov	r0, r3
 800b37a:	f7fe f9ab 	bl	80096d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	9202      	str	r2, [sp, #8]
 800b386:	9301      	str	r3, [sp, #4]
 800b388:	2302      	movs	r3, #2
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	2300      	movs	r3, #0
 800b38e:	460a      	mov	r2, r1
 800b390:	4911      	ldr	r1, [pc, #68]	; (800b3d8 <xTimerCreateTimerTask+0x88>)
 800b392:	4812      	ldr	r0, [pc, #72]	; (800b3dc <xTimerCreateTimerTask+0x8c>)
 800b394:	f7fe ff62 	bl	800a25c <xTaskCreateStatic>
 800b398:	4602      	mov	r2, r0
 800b39a:	4b11      	ldr	r3, [pc, #68]	; (800b3e0 <xTimerCreateTimerTask+0x90>)
 800b39c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b39e:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <xTimerCreateTimerTask+0x90>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d001      	beq.n	800b3aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10b      	bne.n	800b3c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b4:	b672      	cpsid	i
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	b662      	cpsie	i
 800b3c4:	613b      	str	r3, [r7, #16]
 800b3c6:	e7fe      	b.n	800b3c6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 800b3c8:	697b      	ldr	r3, [r7, #20]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	20000fe8 	.word	0x20000fe8
 800b3d8:	0800f948 	.word	0x0800f948
 800b3dc:	0800b51d 	.word	0x0800b51d
 800b3e0:	20000fec 	.word	0x20000fec

0800b3e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b08a      	sub	sp, #40	; 0x28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
 800b3f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10b      	bne.n	800b414 <xTimerGenericCommand+0x30>
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	b672      	cpsid	i
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	b662      	cpsie	i
 800b410:	623b      	str	r3, [r7, #32]
 800b412:	e7fe      	b.n	800b412 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b414:	4b19      	ldr	r3, [pc, #100]	; (800b47c <xTimerGenericCommand+0x98>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d02a      	beq.n	800b472 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b05      	cmp	r3, #5
 800b42c:	dc18      	bgt.n	800b460 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b42e:	f7ff fdcf 	bl	800afd0 <xTaskGetSchedulerState>
 800b432:	4603      	mov	r3, r0
 800b434:	2b02      	cmp	r3, #2
 800b436:	d109      	bne.n	800b44c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b438:	4b10      	ldr	r3, [pc, #64]	; (800b47c <xTimerGenericCommand+0x98>)
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	f107 0110 	add.w	r1, r7, #16
 800b440:	2300      	movs	r3, #0
 800b442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b444:	f7fe fb1e 	bl	8009a84 <xQueueGenericSend>
 800b448:	6278      	str	r0, [r7, #36]	; 0x24
 800b44a:	e012      	b.n	800b472 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <xTimerGenericCommand+0x98>)
 800b44e:	6818      	ldr	r0, [r3, #0]
 800b450:	f107 0110 	add.w	r1, r7, #16
 800b454:	2300      	movs	r3, #0
 800b456:	2200      	movs	r2, #0
 800b458:	f7fe fb14 	bl	8009a84 <xQueueGenericSend>
 800b45c:	6278      	str	r0, [r7, #36]	; 0x24
 800b45e:	e008      	b.n	800b472 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b460:	4b06      	ldr	r3, [pc, #24]	; (800b47c <xTimerGenericCommand+0x98>)
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	f107 0110 	add.w	r1, r7, #16
 800b468:	2300      	movs	r3, #0
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	f7fe fc0c 	bl	8009c88 <xQueueGenericSendFromISR>
 800b470:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b474:	4618      	mov	r0, r3
 800b476:	3728      	adds	r7, #40	; 0x28
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	20000fe8 	.word	0x20000fe8

0800b480 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af02      	add	r7, sp, #8
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b48a:	4b23      	ldr	r3, [pc, #140]	; (800b518 <prvProcessExpiredTimer+0x98>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	3304      	adds	r3, #4
 800b498:	4618      	mov	r0, r3
 800b49a:	f7fe f9bf 	bl	800981c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4a4:	f003 0304 	and.w	r3, r3, #4
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d023      	beq.n	800b4f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	699a      	ldr	r2, [r3, #24]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	18d1      	adds	r1, r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	6978      	ldr	r0, [r7, #20]
 800b4ba:	f000 f8d3 	bl	800b664 <prvInsertTimerInActiveList>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d020      	beq.n	800b506 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	2100      	movs	r1, #0
 800b4ce:	6978      	ldr	r0, [r7, #20]
 800b4d0:	f7ff ff88 	bl	800b3e4 <xTimerGenericCommand>
 800b4d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d114      	bne.n	800b506 <prvProcessExpiredTimer+0x86>
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	b672      	cpsid	i
 800b4e2:	f383 8811 	msr	BASEPRI, r3
 800b4e6:	f3bf 8f6f 	isb	sy
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	b662      	cpsie	i
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	e7fe      	b.n	800b4f2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4fa:	f023 0301 	bic.w	r3, r3, #1
 800b4fe:	b2da      	uxtb	r2, r3
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	6978      	ldr	r0, [r7, #20]
 800b50c:	4798      	blx	r3
}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	20000fe0 	.word	0x20000fe0

0800b51c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b524:	f107 0308 	add.w	r3, r7, #8
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 f857 	bl	800b5dc <prvGetNextExpireTime>
 800b52e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4619      	mov	r1, r3
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f803 	bl	800b540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b53a:	f000 f8d5 	bl	800b6e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b53e:	e7f1      	b.n	800b524 <prvTimerTask+0x8>

0800b540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b54a:	f7ff f94b 	bl	800a7e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	4618      	mov	r0, r3
 800b554:	f000 f866 	bl	800b624 <prvSampleTimeNow>
 800b558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d130      	bne.n	800b5c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10a      	bne.n	800b57c <prvProcessTimerOrBlockTask+0x3c>
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d806      	bhi.n	800b57c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b56e:	f7ff f947 	bl	800a800 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b572:	68f9      	ldr	r1, [r7, #12]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f7ff ff83 	bl	800b480 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b57a:	e024      	b.n	800b5c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d008      	beq.n	800b594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <prvProcessTimerOrBlockTask+0x90>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <prvProcessTimerOrBlockTask+0x50>
 800b58c:	2301      	movs	r3, #1
 800b58e:	e000      	b.n	800b592 <prvProcessTimerOrBlockTask+0x52>
 800b590:	2300      	movs	r3, #0
 800b592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b594:	4b0f      	ldr	r3, [pc, #60]	; (800b5d4 <prvProcessTimerOrBlockTask+0x94>)
 800b596:	6818      	ldr	r0, [r3, #0]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	f7fe fe27 	bl	800a1f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5a6:	f7ff f92b 	bl	800a800 <xTaskResumeAll>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5b0:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <prvProcessTimerOrBlockTask+0x98>)
 800b5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5b6:	601a      	str	r2, [r3, #0]
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	f3bf 8f6f 	isb	sy
}
 800b5c0:	e001      	b.n	800b5c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5c2:	f7ff f91d 	bl	800a800 <xTaskResumeAll>
}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20000fe4 	.word	0x20000fe4
 800b5d4:	20000fe8 	.word	0x20000fe8
 800b5d8:	e000ed04 	.word	0xe000ed04

0800b5dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <prvGetNextExpireTime+0x44>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d101      	bne.n	800b5f2 <prvGetNextExpireTime+0x16>
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	e000      	b.n	800b5f4 <prvGetNextExpireTime+0x18>
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d105      	bne.n	800b60c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b600:	4b07      	ldr	r3, [pc, #28]	; (800b620 <prvGetNextExpireTime+0x44>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	68db      	ldr	r3, [r3, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	60fb      	str	r3, [r7, #12]
 800b60a:	e001      	b.n	800b610 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b610:	68fb      	ldr	r3, [r7, #12]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	20000fe0 	.word	0x20000fe0

0800b624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b62c:	f7ff f986 	bl	800a93c <xTaskGetTickCount>
 800b630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <prvSampleTimeNow+0x3c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d205      	bcs.n	800b648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b63c:	f000 f936 	bl	800b8ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
 800b646:	e002      	b.n	800b64e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2200      	movs	r2, #0
 800b64c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b64e:	4a04      	ldr	r2, [pc, #16]	; (800b660 <prvSampleTimeNow+0x3c>)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b654:	68fb      	ldr	r3, [r7, #12]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	20000ff0 	.word	0x20000ff0

0800b664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
 800b66a:	60f8      	str	r0, [r7, #12]
 800b66c:	60b9      	str	r1, [r7, #8]
 800b66e:	607a      	str	r2, [r7, #4]
 800b670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	68ba      	ldr	r2, [r7, #8]
 800b67a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	429a      	cmp	r2, r3
 800b688:	d812      	bhi.n	800b6b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	1ad2      	subs	r2, r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	429a      	cmp	r2, r3
 800b696:	d302      	bcc.n	800b69e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b698:	2301      	movs	r3, #1
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	e01b      	b.n	800b6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b69e:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <prvInsertTimerInActiveList+0x7c>)
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7fe f87e 	bl	80097aa <vListInsert>
 800b6ae:	e012      	b.n	800b6d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d206      	bcs.n	800b6c6 <prvInsertTimerInActiveList+0x62>
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
 800b6c4:	e007      	b.n	800b6d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6c6:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <prvInsertTimerInActiveList+0x80>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	f7fe f86a 	bl	80097aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6d6:	697b      	ldr	r3, [r7, #20]
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3718      	adds	r7, #24
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	20000fe4 	.word	0x20000fe4
 800b6e4:	20000fe0 	.word	0x20000fe0

0800b6e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08e      	sub	sp, #56	; 0x38
 800b6ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6ee:	e0cc      	b.n	800b88a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da19      	bge.n	800b72a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6f6:	1d3b      	adds	r3, r7, #4
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10b      	bne.n	800b71a <prvProcessReceivedCommands+0x32>
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	b672      	cpsid	i
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	b662      	cpsie	i
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e7fe      	b.n	800b718 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b720:	6850      	ldr	r0, [r2, #4]
 800b722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b724:	6892      	ldr	r2, [r2, #8]
 800b726:	4611      	mov	r1, r2
 800b728:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f2c0 80ab 	blt.w	800b888 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d004      	beq.n	800b748 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f7fe f86a 	bl	800981c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b748:	463b      	mov	r3, r7
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff ff6a 	bl	800b624 <prvSampleTimeNow>
 800b750:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b09      	cmp	r3, #9
 800b756:	f200 8098 	bhi.w	800b88a <prvProcessReceivedCommands+0x1a2>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <prvProcessReceivedCommands+0x78>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b789 	.word	0x0800b789
 800b764:	0800b789 	.word	0x0800b789
 800b768:	0800b789 	.word	0x0800b789
 800b76c:	0800b7ff 	.word	0x0800b7ff
 800b770:	0800b813 	.word	0x0800b813
 800b774:	0800b85f 	.word	0x0800b85f
 800b778:	0800b789 	.word	0x0800b789
 800b77c:	0800b789 	.word	0x0800b789
 800b780:	0800b7ff 	.word	0x0800b7ff
 800b784:	0800b813 	.word	0x0800b813
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b78e:	f043 0301 	orr.w	r3, r3, #1
 800b792:	b2da      	uxtb	r2, r3
 800b794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b79a:	68ba      	ldr	r2, [r7, #8]
 800b79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	18d1      	adds	r1, r2, r3
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7a8:	f7ff ff5c 	bl	800b664 <prvInsertTimerInActiveList>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d06b      	beq.n	800b88a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b4:	6a1b      	ldr	r3, [r3, #32]
 800b7b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d060      	beq.n	800b88a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7c8:	68ba      	ldr	r2, [r7, #8]
 800b7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	441a      	add	r2, r3
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7da:	f7ff fe03 	bl	800b3e4 <xTimerGenericCommand>
 800b7de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d151      	bne.n	800b88a <prvProcessReceivedCommands+0x1a2>
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	b672      	cpsid	i
 800b7ec:	f383 8811 	msr	BASEPRI, r3
 800b7f0:	f3bf 8f6f 	isb	sy
 800b7f4:	f3bf 8f4f 	dsb	sy
 800b7f8:	b662      	cpsie	i
 800b7fa:	61bb      	str	r3, [r7, #24]
 800b7fc:	e7fe      	b.n	800b7fc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b810:	e03b      	b.n	800b88a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b818:	f043 0301 	orr.w	r3, r3, #1
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10b      	bne.n	800b84a <prvProcessReceivedCommands+0x162>
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	b672      	cpsid	i
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	b662      	cpsie	i
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e7fe      	b.n	800b848 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84c:	699a      	ldr	r2, [r3, #24]
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	18d1      	adds	r1, r2, r3
 800b852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b858:	f7ff ff04 	bl	800b664 <prvInsertTimerInActiveList>
					break;
 800b85c:	e015      	b.n	800b88a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d103      	bne.n	800b874 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b86e:	f000 fbb5 	bl	800bfdc <vPortFree>
 800b872:	e00a      	b.n	800b88a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b87a:	f023 0301 	bic.w	r3, r3, #1
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b886:	e000      	b.n	800b88a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <prvProcessReceivedCommands+0x1c0>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	1d39      	adds	r1, r7, #4
 800b890:	2200      	movs	r2, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f7fe fa94 	bl	8009dc0 <xQueueReceive>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f47f af28 	bne.w	800b6f0 <prvProcessReceivedCommands+0x8>
	}
}
 800b8a0:	bf00      	nop
 800b8a2:	3730      	adds	r7, #48	; 0x30
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20000fe8 	.word	0x20000fe8

0800b8ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8b2:	e049      	b.n	800b948 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8b4:	4b2e      	ldr	r3, [pc, #184]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8be:	4b2c      	ldr	r3, [pc, #176]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fd ffa5 	bl	800981c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	68f8      	ldr	r0, [r7, #12]
 800b8d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0304 	and.w	r3, r3, #4
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d02f      	beq.n	800b948 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	693a      	ldr	r2, [r7, #16]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d90e      	bls.n	800b918 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b906:	4b1a      	ldr	r3, [pc, #104]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3304      	adds	r3, #4
 800b90e:	4619      	mov	r1, r3
 800b910:	4610      	mov	r0, r2
 800b912:	f7fd ff4a 	bl	80097aa <vListInsert>
 800b916:	e017      	b.n	800b948 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b918:	2300      	movs	r3, #0
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	2300      	movs	r3, #0
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	2100      	movs	r1, #0
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff fd5e 	bl	800b3e4 <xTimerGenericCommand>
 800b928:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10b      	bne.n	800b948 <prvSwitchTimerLists+0x9c>
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	b672      	cpsid	i
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	b662      	cpsie	i
 800b944:	603b      	str	r3, [r7, #0]
 800b946:	e7fe      	b.n	800b946 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b948:	4b09      	ldr	r3, [pc, #36]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1b0      	bne.n	800b8b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b952:	4b07      	ldr	r3, [pc, #28]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b958:	4b06      	ldr	r3, [pc, #24]	; (800b974 <prvSwitchTimerLists+0xc8>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a04      	ldr	r2, [pc, #16]	; (800b970 <prvSwitchTimerLists+0xc4>)
 800b95e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b960:	4a04      	ldr	r2, [pc, #16]	; (800b974 <prvSwitchTimerLists+0xc8>)
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6013      	str	r3, [r2, #0]
}
 800b966:	bf00      	nop
 800b968:	3718      	adds	r7, #24
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20000fe0 	.word	0x20000fe0
 800b974:	20000fe4 	.word	0x20000fe4

0800b978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b97e:	f000 f943 	bl	800bc08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b982:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <prvCheckForValidListAndQueue+0x60>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d120      	bne.n	800b9cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b98a:	4814      	ldr	r0, [pc, #80]	; (800b9dc <prvCheckForValidListAndQueue+0x64>)
 800b98c:	f7fd febc 	bl	8009708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b990:	4813      	ldr	r0, [pc, #76]	; (800b9e0 <prvCheckForValidListAndQueue+0x68>)
 800b992:	f7fd feb9 	bl	8009708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b996:	4b13      	ldr	r3, [pc, #76]	; (800b9e4 <prvCheckForValidListAndQueue+0x6c>)
 800b998:	4a10      	ldr	r2, [pc, #64]	; (800b9dc <prvCheckForValidListAndQueue+0x64>)
 800b99a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b99c:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <prvCheckForValidListAndQueue+0x70>)
 800b99e:	4a10      	ldr	r2, [pc, #64]	; (800b9e0 <prvCheckForValidListAndQueue+0x68>)
 800b9a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	4b11      	ldr	r3, [pc, #68]	; (800b9ec <prvCheckForValidListAndQueue+0x74>)
 800b9a8:	4a11      	ldr	r2, [pc, #68]	; (800b9f0 <prvCheckForValidListAndQueue+0x78>)
 800b9aa:	2110      	movs	r1, #16
 800b9ac:	200a      	movs	r0, #10
 800b9ae:	f7fd ffc9 	bl	8009944 <xQueueGenericCreateStatic>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4b08      	ldr	r3, [pc, #32]	; (800b9d8 <prvCheckForValidListAndQueue+0x60>)
 800b9b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <prvCheckForValidListAndQueue+0x60>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9c0:	4b05      	ldr	r3, [pc, #20]	; (800b9d8 <prvCheckForValidListAndQueue+0x60>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	490b      	ldr	r1, [pc, #44]	; (800b9f4 <prvCheckForValidListAndQueue+0x7c>)
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7fe fbec 	bl	800a1a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9cc:	f000 f94e 	bl	800bc6c <vPortExitCritical>
}
 800b9d0:	bf00      	nop
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}
 800b9d6:	bf00      	nop
 800b9d8:	20000fe8 	.word	0x20000fe8
 800b9dc:	20000fb8 	.word	0x20000fb8
 800b9e0:	20000fcc 	.word	0x20000fcc
 800b9e4:	20000fe0 	.word	0x20000fe0
 800b9e8:	20000fe4 	.word	0x20000fe4
 800b9ec:	20001094 	.word	0x20001094
 800b9f0:	20000ff4 	.word	0x20000ff4
 800b9f4:	0800f950 	.word	0x0800f950

0800b9f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3b04      	subs	r3, #4
 800ba08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3b04      	subs	r3, #4
 800ba16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	f023 0201 	bic.w	r2, r3, #1
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	3b04      	subs	r3, #4
 800ba26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba28:	4a0c      	ldr	r2, [pc, #48]	; (800ba5c <pxPortInitialiseStack+0x64>)
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	3b14      	subs	r3, #20
 800ba32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3b04      	subs	r3, #4
 800ba3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f06f 0202 	mvn.w	r2, #2
 800ba46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3b20      	subs	r3, #32
 800ba4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	0800ba61 	.word	0x0800ba61

0800ba60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba6a:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <prvTaskExitError+0x58>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba72:	d00b      	beq.n	800ba8c <prvTaskExitError+0x2c>
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	b672      	cpsid	i
 800ba7a:	f383 8811 	msr	BASEPRI, r3
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f3bf 8f4f 	dsb	sy
 800ba86:	b662      	cpsie	i
 800ba88:	60fb      	str	r3, [r7, #12]
 800ba8a:	e7fe      	b.n	800ba8a <prvTaskExitError+0x2a>
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	b672      	cpsid	i
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	b662      	cpsie	i
 800baa0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800baa2:	bf00      	nop
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0fc      	beq.n	800baa4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800baaa:	bf00      	nop
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	2000000c 	.word	0x2000000c
 800babc:	00000000 	.word	0x00000000

0800bac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <pxCurrentTCBConst2>)
 800bac2:	6819      	ldr	r1, [r3, #0]
 800bac4:	6808      	ldr	r0, [r1, #0]
 800bac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baca:	f380 8809 	msr	PSP, r0
 800bace:	f3bf 8f6f 	isb	sy
 800bad2:	f04f 0000 	mov.w	r0, #0
 800bad6:	f380 8811 	msr	BASEPRI, r0
 800bada:	4770      	bx	lr
 800badc:	f3af 8000 	nop.w

0800bae0 <pxCurrentTCBConst2>:
 800bae0:	20000ab8 	.word	0x20000ab8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop

0800bae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bae8:	4808      	ldr	r0, [pc, #32]	; (800bb0c <prvPortStartFirstTask+0x24>)
 800baea:	6800      	ldr	r0, [r0, #0]
 800baec:	6800      	ldr	r0, [r0, #0]
 800baee:	f380 8808 	msr	MSP, r0
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	f380 8814 	msr	CONTROL, r0
 800bafa:	b662      	cpsie	i
 800bafc:	b661      	cpsie	f
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	df00      	svc	0
 800bb08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb0a:	bf00      	nop
 800bb0c:	e000ed08 	.word	0xe000ed08

0800bb10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb16:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <xPortStartScheduler+0xe0>)
 800bb18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	22ff      	movs	r2, #255	; 0xff
 800bb26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	4b2e      	ldr	r3, [pc, #184]	; (800bbf4 <xPortStartScheduler+0xe4>)
 800bb3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb3e:	4b2e      	ldr	r3, [pc, #184]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb40:	2207      	movs	r2, #7
 800bb42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb44:	e009      	b.n	800bb5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bb46:	4b2c      	ldr	r3, [pc, #176]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	4a2a      	ldr	r2, [pc, #168]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb50:	78fb      	ldrb	r3, [r7, #3]
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	005b      	lsls	r3, r3, #1
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb5a:	78fb      	ldrb	r3, [r7, #3]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b80      	cmp	r3, #128	; 0x80
 800bb64:	d0ef      	beq.n	800bb46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb66:	4b24      	ldr	r3, [pc, #144]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f1c3 0307 	rsb	r3, r3, #7
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d00b      	beq.n	800bb8a <xPortStartScheduler+0x7a>
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	b672      	cpsid	i
 800bb78:	f383 8811 	msr	BASEPRI, r3
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f3bf 8f4f 	dsb	sy
 800bb84:	b662      	cpsie	i
 800bb86:	60bb      	str	r3, [r7, #8]
 800bb88:	e7fe      	b.n	800bb88 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb8a:	4b1b      	ldr	r3, [pc, #108]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	021b      	lsls	r3, r3, #8
 800bb90:	4a19      	ldr	r2, [pc, #100]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb94:	4b18      	ldr	r3, [pc, #96]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb9c:	4a16      	ldr	r2, [pc, #88]	; (800bbf8 <xPortStartScheduler+0xe8>)
 800bb9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bba8:	4b14      	ldr	r3, [pc, #80]	; (800bbfc <xPortStartScheduler+0xec>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a13      	ldr	r2, [pc, #76]	; (800bbfc <xPortStartScheduler+0xec>)
 800bbae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bbb2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bbb4:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <xPortStartScheduler+0xec>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a10      	ldr	r2, [pc, #64]	; (800bbfc <xPortStartScheduler+0xec>)
 800bbba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbbe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbc0:	f000 f8d4 	bl	800bd6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <xPortStartScheduler+0xf0>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbca:	f000 f8f3 	bl	800bdb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <xPortStartScheduler+0xf4>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a0c      	ldr	r2, [pc, #48]	; (800bc04 <xPortStartScheduler+0xf4>)
 800bbd4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbd8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbda:	f7ff ff85 	bl	800bae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbde:	f7fe ff89 	bl	800aaf4 <vTaskSwitchContext>
	prvTaskExitError();
 800bbe2:	f7ff ff3d 	bl	800ba60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	e000e400 	.word	0xe000e400
 800bbf4:	200010e4 	.word	0x200010e4
 800bbf8:	200010e8 	.word	0x200010e8
 800bbfc:	e000ed20 	.word	0xe000ed20
 800bc00:	2000000c 	.word	0x2000000c
 800bc04:	e000ef34 	.word	0xe000ef34

0800bc08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	b672      	cpsid	i
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	b662      	cpsie	i
 800bc22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc24:	4b0f      	ldr	r3, [pc, #60]	; (800bc64 <vPortEnterCritical+0x5c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	4a0e      	ldr	r2, [pc, #56]	; (800bc64 <vPortEnterCritical+0x5c>)
 800bc2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <vPortEnterCritical+0x5c>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d110      	bne.n	800bc58 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <vPortEnterCritical+0x60>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00b      	beq.n	800bc58 <vPortEnterCritical+0x50>
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	b672      	cpsid	i
 800bc46:	f383 8811 	msr	BASEPRI, r3
 800bc4a:	f3bf 8f6f 	isb	sy
 800bc4e:	f3bf 8f4f 	dsb	sy
 800bc52:	b662      	cpsie	i
 800bc54:	603b      	str	r3, [r7, #0]
 800bc56:	e7fe      	b.n	800bc56 <vPortEnterCritical+0x4e>
	}
}
 800bc58:	bf00      	nop
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr
 800bc64:	2000000c 	.word	0x2000000c
 800bc68:	e000ed04 	.word	0xe000ed04

0800bc6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc72:	4b12      	ldr	r3, [pc, #72]	; (800bcbc <vPortExitCritical+0x50>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10b      	bne.n	800bc92 <vPortExitCritical+0x26>
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	b672      	cpsid	i
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	b662      	cpsie	i
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	e7fe      	b.n	800bc90 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800bc92:	4b0a      	ldr	r3, [pc, #40]	; (800bcbc <vPortExitCritical+0x50>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <vPortExitCritical+0x50>)
 800bc9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc9c:	4b07      	ldr	r3, [pc, #28]	; (800bcbc <vPortExitCritical+0x50>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d104      	bne.n	800bcae <vPortExitCritical+0x42>
 800bca4:	2300      	movs	r3, #0
 800bca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bcae:	bf00      	nop
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	2000000c 	.word	0x2000000c

0800bcc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcc0:	f3ef 8009 	mrs	r0, PSP
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <pxCurrentTCBConst>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f01e 0f10 	tst.w	lr, #16
 800bcd0:	bf08      	it	eq
 800bcd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcda:	6010      	str	r0, [r2, #0]
 800bcdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bce4:	b672      	cpsid	i
 800bce6:	f380 8811 	msr	BASEPRI, r0
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	f3bf 8f6f 	isb	sy
 800bcf2:	b662      	cpsie	i
 800bcf4:	f7fe fefe 	bl	800aaf4 <vTaskSwitchContext>
 800bcf8:	f04f 0000 	mov.w	r0, #0
 800bcfc:	f380 8811 	msr	BASEPRI, r0
 800bd00:	bc09      	pop	{r0, r3}
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	6808      	ldr	r0, [r1, #0]
 800bd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f01e 0f10 	tst.w	lr, #16
 800bd0e:	bf08      	it	eq
 800bd10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd14:	f380 8809 	msr	PSP, r0
 800bd18:	f3bf 8f6f 	isb	sy
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop

0800bd20 <pxCurrentTCBConst>:
 800bd20:	20000ab8 	.word	0x20000ab8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop

0800bd28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	b672      	cpsid	i
 800bd34:	f383 8811 	msr	BASEPRI, r3
 800bd38:	f3bf 8f6f 	isb	sy
 800bd3c:	f3bf 8f4f 	dsb	sy
 800bd40:	b662      	cpsie	i
 800bd42:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd44:	f7fe fe1c 	bl	800a980 <xTaskIncrementTick>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d003      	beq.n	800bd56 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <SysTick_Handler+0x40>)
 800bd50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd54:	601a      	str	r2, [r3, #0]
 800bd56:	2300      	movs	r3, #0
 800bd58:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <vPortSetupTimerInterrupt+0x34>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <vPortSetupTimerInterrupt+0x38>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <vPortSetupTimerInterrupt+0x3c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <vPortSetupTimerInterrupt+0x40>)
 800bd82:	fba2 2303 	umull	r2, r3, r2, r3
 800bd86:	099b      	lsrs	r3, r3, #6
 800bd88:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <vPortSetupTimerInterrupt+0x44>)
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <vPortSetupTimerInterrupt+0x34>)
 800bd90:	2207      	movs	r2, #7
 800bd92:	601a      	str	r2, [r3, #0]
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	e000e010 	.word	0xe000e010
 800bda4:	e000e018 	.word	0xe000e018
 800bda8:	20000000 	.word	0x20000000
 800bdac:	10624dd3 	.word	0x10624dd3
 800bdb0:	e000e014 	.word	0xe000e014

0800bdb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdc4 <vPortEnableVFP+0x10>
 800bdb8:	6801      	ldr	r1, [r0, #0]
 800bdba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdbe:	6001      	str	r1, [r0, #0]
 800bdc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdc2:	bf00      	nop
 800bdc4:	e000ed88 	.word	0xe000ed88

0800bdc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdce:	f3ef 8305 	mrs	r3, IPSR
 800bdd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d915      	bls.n	800be06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdda:	4a18      	ldr	r2, [pc, #96]	; (800be3c <vPortValidateInterruptPriority+0x74>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4413      	add	r3, r2
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bde4:	4b16      	ldr	r3, [pc, #88]	; (800be40 <vPortValidateInterruptPriority+0x78>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	7afa      	ldrb	r2, [r7, #11]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d20b      	bcs.n	800be06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	b672      	cpsid	i
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	b662      	cpsie	i
 800be02:	607b      	str	r3, [r7, #4]
 800be04:	e7fe      	b.n	800be04 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <vPortValidateInterruptPriority+0x7c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be0e:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <vPortValidateInterruptPriority+0x80>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	429a      	cmp	r2, r3
 800be14:	d90b      	bls.n	800be2e <vPortValidateInterruptPriority+0x66>
 800be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1a:	b672      	cpsid	i
 800be1c:	f383 8811 	msr	BASEPRI, r3
 800be20:	f3bf 8f6f 	isb	sy
 800be24:	f3bf 8f4f 	dsb	sy
 800be28:	b662      	cpsie	i
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	e7fe      	b.n	800be2c <vPortValidateInterruptPriority+0x64>
	}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	e000e3f0 	.word	0xe000e3f0
 800be40:	200010e4 	.word	0x200010e4
 800be44:	e000ed0c 	.word	0xe000ed0c
 800be48:	200010e8 	.word	0x200010e8

0800be4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b08a      	sub	sp, #40	; 0x28
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be54:	2300      	movs	r3, #0
 800be56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be58:	f7fe fcc4 	bl	800a7e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be5c:	4b5a      	ldr	r3, [pc, #360]	; (800bfc8 <pvPortMalloc+0x17c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be64:	f000 f916 	bl	800c094 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be68:	4b58      	ldr	r3, [pc, #352]	; (800bfcc <pvPortMalloc+0x180>)
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4013      	ands	r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	f040 8090 	bne.w	800bf96 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01e      	beq.n	800beba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800be7c:	2208      	movs	r2, #8
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f003 0307 	and.w	r3, r3, #7
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d015      	beq.n	800beba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f023 0307 	bic.w	r3, r3, #7
 800be94:	3308      	adds	r3, #8
 800be96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00b      	beq.n	800beba <pvPortMalloc+0x6e>
 800bea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea6:	b672      	cpsid	i
 800bea8:	f383 8811 	msr	BASEPRI, r3
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	b662      	cpsie	i
 800beb6:	617b      	str	r3, [r7, #20]
 800beb8:	e7fe      	b.n	800beb8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d06a      	beq.n	800bf96 <pvPortMalloc+0x14a>
 800bec0:	4b43      	ldr	r3, [pc, #268]	; (800bfd0 <pvPortMalloc+0x184>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d865      	bhi.n	800bf96 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800beca:	4b42      	ldr	r3, [pc, #264]	; (800bfd4 <pvPortMalloc+0x188>)
 800becc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bece:	4b41      	ldr	r3, [pc, #260]	; (800bfd4 <pvPortMalloc+0x188>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bed4:	e004      	b.n	800bee0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d903      	bls.n	800bef2 <pvPortMalloc+0xa6>
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1f1      	bne.n	800bed6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bef2:	4b35      	ldr	r3, [pc, #212]	; (800bfc8 <pvPortMalloc+0x17c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef8:	429a      	cmp	r2, r3
 800befa:	d04c      	beq.n	800bf96 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2208      	movs	r2, #8
 800bf02:	4413      	add	r3, r2
 800bf04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	685a      	ldr	r2, [r3, #4]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	1ad2      	subs	r2, r2, r3
 800bf16:	2308      	movs	r3, #8
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d920      	bls.n	800bf60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4413      	add	r3, r2
 800bf24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf26:	69bb      	ldr	r3, [r7, #24]
 800bf28:	f003 0307 	and.w	r3, r3, #7
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00b      	beq.n	800bf48 <pvPortMalloc+0xfc>
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	b672      	cpsid	i
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	b662      	cpsie	i
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	e7fe      	b.n	800bf46 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	1ad2      	subs	r2, r2, r3
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf5a:	69b8      	ldr	r0, [r7, #24]
 800bf5c:	f000 f8fc 	bl	800c158 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf60:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	4a19      	ldr	r2, [pc, #100]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf6e:	4b18      	ldr	r3, [pc, #96]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <pvPortMalloc+0x18c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d203      	bcs.n	800bf82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf7a:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <pvPortMalloc+0x184>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	4a16      	ldr	r2, [pc, #88]	; (800bfd8 <pvPortMalloc+0x18c>)
 800bf80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <pvPortMalloc+0x180>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf96:	f7fe fc33 	bl	800a800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	f003 0307 	and.w	r3, r3, #7
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <pvPortMalloc+0x170>
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	b672      	cpsid	i
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	b662      	cpsie	i
 800bfb8:	60fb      	str	r3, [r7, #12]
 800bfba:	e7fe      	b.n	800bfba <pvPortMalloc+0x16e>
	return pvReturn;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20004cf4 	.word	0x20004cf4
 800bfcc:	20004d00 	.word	0x20004d00
 800bfd0:	20004cf8 	.word	0x20004cf8
 800bfd4:	20004cec 	.word	0x20004cec
 800bfd8:	20004cfc 	.word	0x20004cfc

0800bfdc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d04a      	beq.n	800c084 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bfee:	2308      	movs	r3, #8
 800bff0:	425b      	negs	r3, r3
 800bff2:	697a      	ldr	r2, [r7, #20]
 800bff4:	4413      	add	r3, r2
 800bff6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	4b22      	ldr	r3, [pc, #136]	; (800c08c <vPortFree+0xb0>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4013      	ands	r3, r2
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10b      	bne.n	800c022 <vPortFree+0x46>
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	b672      	cpsid	i
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	b662      	cpsie	i
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	e7fe      	b.n	800c020 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00b      	beq.n	800c042 <vPortFree+0x66>
 800c02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c02e:	b672      	cpsid	i
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	b662      	cpsie	i
 800c03e:	60bb      	str	r3, [r7, #8]
 800c040:	e7fe      	b.n	800c040 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	4b11      	ldr	r3, [pc, #68]	; (800c08c <vPortFree+0xb0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d019      	beq.n	800c084 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d115      	bne.n	800c084 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	4b0b      	ldr	r3, [pc, #44]	; (800c08c <vPortFree+0xb0>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	43db      	mvns	r3, r3
 800c062:	401a      	ands	r2, r3
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c068:	f7fe fbbc 	bl	800a7e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <vPortFree+0xb4>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4413      	add	r3, r2
 800c076:	4a06      	ldr	r2, [pc, #24]	; (800c090 <vPortFree+0xb4>)
 800c078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c07a:	6938      	ldr	r0, [r7, #16]
 800c07c:	f000 f86c 	bl	800c158 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c080:	f7fe fbbe 	bl	800a800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c084:	bf00      	nop
 800c086:	3718      	adds	r7, #24
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20004d00 	.word	0x20004d00
 800c090:	20004cf8 	.word	0x20004cf8

0800c094 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c094:	b480      	push	{r7}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c09a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c09e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0a0:	4b27      	ldr	r3, [pc, #156]	; (800c140 <prvHeapInit+0xac>)
 800c0a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00c      	beq.n	800c0c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	3307      	adds	r3, #7
 800c0b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f023 0307 	bic.w	r3, r3, #7
 800c0ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a1f      	ldr	r2, [pc, #124]	; (800c140 <prvHeapInit+0xac>)
 800c0c4:	4413      	add	r3, r2
 800c0c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0cc:	4a1d      	ldr	r2, [pc, #116]	; (800c144 <prvHeapInit+0xb0>)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0d2:	4b1c      	ldr	r3, [pc, #112]	; (800c144 <prvHeapInit+0xb0>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	4413      	add	r3, r2
 800c0de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0e0:	2208      	movs	r2, #8
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f023 0307 	bic.w	r3, r3, #7
 800c0ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4a15      	ldr	r2, [pc, #84]	; (800c148 <prvHeapInit+0xb4>)
 800c0f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <prvHeapInit+0xb4>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c0fe:	4b12      	ldr	r3, [pc, #72]	; (800c148 <prvHeapInit+0xb4>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c114:	4b0c      	ldr	r3, [pc, #48]	; (800c148 <prvHeapInit+0xb4>)
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	4a0a      	ldr	r2, [pc, #40]	; (800c14c <prvHeapInit+0xb8>)
 800c122:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	4a09      	ldr	r2, [pc, #36]	; (800c150 <prvHeapInit+0xbc>)
 800c12a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <prvHeapInit+0xc0>)
 800c12e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c132:	601a      	str	r2, [r3, #0]
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	200010ec 	.word	0x200010ec
 800c144:	20004cec 	.word	0x20004cec
 800c148:	20004cf4 	.word	0x20004cf4
 800c14c:	20004cfc 	.word	0x20004cfc
 800c150:	20004cf8 	.word	0x20004cf8
 800c154:	20004d00 	.word	0x20004d00

0800c158 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c160:	4b28      	ldr	r3, [pc, #160]	; (800c204 <prvInsertBlockIntoFreeList+0xac>)
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	e002      	b.n	800c16c <prvInsertBlockIntoFreeList+0x14>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	60fb      	str	r3, [r7, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	429a      	cmp	r2, r3
 800c174:	d8f7      	bhi.n	800c166 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	4413      	add	r3, r2
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	429a      	cmp	r2, r3
 800c186:	d108      	bne.n	800c19a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	441a      	add	r2, r3
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	441a      	add	r2, r3
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d118      	bne.n	800c1e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	4b15      	ldr	r3, [pc, #84]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d00d      	beq.n	800c1d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685a      	ldr	r2, [r3, #4]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	441a      	add	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	e008      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1d6:	4b0c      	ldr	r3, [pc, #48]	; (800c208 <prvInsertBlockIntoFreeList+0xb0>)
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e003      	b.n	800c1e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d002      	beq.n	800c1f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1f6:	bf00      	nop
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	20004cec 	.word	0x20004cec
 800c208:	20004cf4 	.word	0x20004cf4

0800c20c <__cxa_guard_acquire>:
 800c20c:	6803      	ldr	r3, [r0, #0]
 800c20e:	07db      	lsls	r3, r3, #31
 800c210:	d406      	bmi.n	800c220 <__cxa_guard_acquire+0x14>
 800c212:	7843      	ldrb	r3, [r0, #1]
 800c214:	b103      	cbz	r3, 800c218 <__cxa_guard_acquire+0xc>
 800c216:	deff      	udf	#255	; 0xff
 800c218:	2301      	movs	r3, #1
 800c21a:	7043      	strb	r3, [r0, #1]
 800c21c:	4618      	mov	r0, r3
 800c21e:	4770      	bx	lr
 800c220:	2000      	movs	r0, #0
 800c222:	4770      	bx	lr

0800c224 <__cxa_guard_release>:
 800c224:	2301      	movs	r3, #1
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	4770      	bx	lr

0800c22a <__cxa_pure_virtual>:
 800c22a:	b508      	push	{r3, lr}
 800c22c:	f000 f80c 	bl	800c248 <_ZSt9terminatev>

0800c230 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c230:	b508      	push	{r3, lr}
 800c232:	4780      	blx	r0
 800c234:	f000 f894 	bl	800c360 <abort>

0800c238 <_ZSt13get_terminatev>:
 800c238:	4b02      	ldr	r3, [pc, #8]	; (800c244 <_ZSt13get_terminatev+0xc>)
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	f3bf 8f5b 	dmb	ish
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	20000010 	.word	0x20000010

0800c248 <_ZSt9terminatev>:
 800c248:	b508      	push	{r3, lr}
 800c24a:	f7ff fff5 	bl	800c238 <_ZSt13get_terminatev>
 800c24e:	f7ff ffef 	bl	800c230 <_ZN10__cxxabiv111__terminateEPFvvE>
 800c252:	0000      	movs	r0, r0
 800c254:	0000      	movs	r0, r0
	...

0800c258 <floor>:
 800c258:	ec51 0b10 	vmov	r0, r1, d0
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c264:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c268:	2e13      	cmp	r6, #19
 800c26a:	460c      	mov	r4, r1
 800c26c:	ee10 5a10 	vmov	r5, s0
 800c270:	4680      	mov	r8, r0
 800c272:	dc34      	bgt.n	800c2de <floor+0x86>
 800c274:	2e00      	cmp	r6, #0
 800c276:	da16      	bge.n	800c2a6 <floor+0x4e>
 800c278:	a335      	add	r3, pc, #212	; (adr r3, 800c350 <floor+0xf8>)
 800c27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27e:	f7f4 f82d 	bl	80002dc <__adddf3>
 800c282:	2200      	movs	r2, #0
 800c284:	2300      	movs	r3, #0
 800c286:	f7f4 fc6f 	bl	8000b68 <__aeabi_dcmpgt>
 800c28a:	b148      	cbz	r0, 800c2a0 <floor+0x48>
 800c28c:	2c00      	cmp	r4, #0
 800c28e:	da59      	bge.n	800c344 <floor+0xec>
 800c290:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c294:	4a30      	ldr	r2, [pc, #192]	; (800c358 <floor+0x100>)
 800c296:	432b      	orrs	r3, r5
 800c298:	2500      	movs	r5, #0
 800c29a:	42ab      	cmp	r3, r5
 800c29c:	bf18      	it	ne
 800c29e:	4614      	movne	r4, r2
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	e025      	b.n	800c2f2 <floor+0x9a>
 800c2a6:	4f2d      	ldr	r7, [pc, #180]	; (800c35c <floor+0x104>)
 800c2a8:	4137      	asrs	r7, r6
 800c2aa:	ea01 0307 	and.w	r3, r1, r7
 800c2ae:	4303      	orrs	r3, r0
 800c2b0:	d01f      	beq.n	800c2f2 <floor+0x9a>
 800c2b2:	a327      	add	r3, pc, #156	; (adr r3, 800c350 <floor+0xf8>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	f7f4 f810 	bl	80002dc <__adddf3>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f7f4 fc52 	bl	8000b68 <__aeabi_dcmpgt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d0eb      	beq.n	800c2a0 <floor+0x48>
 800c2c8:	2c00      	cmp	r4, #0
 800c2ca:	bfbe      	ittt	lt
 800c2cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c2d0:	fa43 f606 	asrlt.w	r6, r3, r6
 800c2d4:	19a4      	addlt	r4, r4, r6
 800c2d6:	ea24 0407 	bic.w	r4, r4, r7
 800c2da:	2500      	movs	r5, #0
 800c2dc:	e7e0      	b.n	800c2a0 <floor+0x48>
 800c2de:	2e33      	cmp	r6, #51	; 0x33
 800c2e0:	dd0b      	ble.n	800c2fa <floor+0xa2>
 800c2e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c2e6:	d104      	bne.n	800c2f2 <floor+0x9a>
 800c2e8:	ee10 2a10 	vmov	r2, s0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	f7f3 fff5 	bl	80002dc <__adddf3>
 800c2f2:	ec41 0b10 	vmov	d0, r0, r1
 800c2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c2fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c302:	fa23 f707 	lsr.w	r7, r3, r7
 800c306:	4207      	tst	r7, r0
 800c308:	d0f3      	beq.n	800c2f2 <floor+0x9a>
 800c30a:	a311      	add	r3, pc, #68	; (adr r3, 800c350 <floor+0xf8>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f3 ffe4 	bl	80002dc <__adddf3>
 800c314:	2200      	movs	r2, #0
 800c316:	2300      	movs	r3, #0
 800c318:	f7f4 fc26 	bl	8000b68 <__aeabi_dcmpgt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d0bf      	beq.n	800c2a0 <floor+0x48>
 800c320:	2c00      	cmp	r4, #0
 800c322:	da02      	bge.n	800c32a <floor+0xd2>
 800c324:	2e14      	cmp	r6, #20
 800c326:	d103      	bne.n	800c330 <floor+0xd8>
 800c328:	3401      	adds	r4, #1
 800c32a:	ea25 0507 	bic.w	r5, r5, r7
 800c32e:	e7b7      	b.n	800c2a0 <floor+0x48>
 800c330:	2301      	movs	r3, #1
 800c332:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c336:	fa03 f606 	lsl.w	r6, r3, r6
 800c33a:	4435      	add	r5, r6
 800c33c:	4545      	cmp	r5, r8
 800c33e:	bf38      	it	cc
 800c340:	18e4      	addcc	r4, r4, r3
 800c342:	e7f2      	b.n	800c32a <floor+0xd2>
 800c344:	2500      	movs	r5, #0
 800c346:	462c      	mov	r4, r5
 800c348:	e7aa      	b.n	800c2a0 <floor+0x48>
 800c34a:	bf00      	nop
 800c34c:	f3af 8000 	nop.w
 800c350:	8800759c 	.word	0x8800759c
 800c354:	7e37e43c 	.word	0x7e37e43c
 800c358:	bff00000 	.word	0xbff00000
 800c35c:	000fffff 	.word	0x000fffff

0800c360 <abort>:
 800c360:	b508      	push	{r3, lr}
 800c362:	2006      	movs	r0, #6
 800c364:	f000 fd42 	bl	800cdec <raise>
 800c368:	2001      	movs	r0, #1
 800c36a:	f7f7 fb19 	bl	80039a0 <_exit>
	...

0800c370 <__errno>:
 800c370:	4b01      	ldr	r3, [pc, #4]	; (800c378 <__errno+0x8>)
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	20000014 	.word	0x20000014

0800c37c <__libc_init_array>:
 800c37c:	b570      	push	{r4, r5, r6, lr}
 800c37e:	4e0d      	ldr	r6, [pc, #52]	; (800c3b4 <__libc_init_array+0x38>)
 800c380:	4c0d      	ldr	r4, [pc, #52]	; (800c3b8 <__libc_init_array+0x3c>)
 800c382:	1ba4      	subs	r4, r4, r6
 800c384:	10a4      	asrs	r4, r4, #2
 800c386:	2500      	movs	r5, #0
 800c388:	42a5      	cmp	r5, r4
 800c38a:	d109      	bne.n	800c3a0 <__libc_init_array+0x24>
 800c38c:	4e0b      	ldr	r6, [pc, #44]	; (800c3bc <__libc_init_array+0x40>)
 800c38e:	4c0c      	ldr	r4, [pc, #48]	; (800c3c0 <__libc_init_array+0x44>)
 800c390:	f002 fbf2 	bl	800eb78 <_init>
 800c394:	1ba4      	subs	r4, r4, r6
 800c396:	10a4      	asrs	r4, r4, #2
 800c398:	2500      	movs	r5, #0
 800c39a:	42a5      	cmp	r5, r4
 800c39c:	d105      	bne.n	800c3aa <__libc_init_array+0x2e>
 800c39e:	bd70      	pop	{r4, r5, r6, pc}
 800c3a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3a4:	4798      	blx	r3
 800c3a6:	3501      	adds	r5, #1
 800c3a8:	e7ee      	b.n	800c388 <__libc_init_array+0xc>
 800c3aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c3ae:	4798      	blx	r3
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	e7f2      	b.n	800c39a <__libc_init_array+0x1e>
 800c3b4:	0800fcf0 	.word	0x0800fcf0
 800c3b8:	0800fcf0 	.word	0x0800fcf0
 800c3bc:	0800fcf0 	.word	0x0800fcf0
 800c3c0:	0800fcf4 	.word	0x0800fcf4

0800c3c4 <memcpy>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	1e43      	subs	r3, r0, #1
 800c3c8:	440a      	add	r2, r1
 800c3ca:	4291      	cmp	r1, r2
 800c3cc:	d100      	bne.n	800c3d0 <memcpy+0xc>
 800c3ce:	bd10      	pop	{r4, pc}
 800c3d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3d8:	e7f7      	b.n	800c3ca <memcpy+0x6>

0800c3da <memset>:
 800c3da:	4402      	add	r2, r0
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d100      	bne.n	800c3e4 <memset+0xa>
 800c3e2:	4770      	bx	lr
 800c3e4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3e8:	e7f9      	b.n	800c3de <memset+0x4>

0800c3ea <__cvt>:
 800c3ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ee:	ec55 4b10 	vmov	r4, r5, d0
 800c3f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c3f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c3f8:	2d00      	cmp	r5, #0
 800c3fa:	460e      	mov	r6, r1
 800c3fc:	4691      	mov	r9, r2
 800c3fe:	4619      	mov	r1, r3
 800c400:	bfb8      	it	lt
 800c402:	4622      	movlt	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	f027 0720 	bic.w	r7, r7, #32
 800c40a:	bfbb      	ittet	lt
 800c40c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c410:	461d      	movlt	r5, r3
 800c412:	2300      	movge	r3, #0
 800c414:	232d      	movlt	r3, #45	; 0x2d
 800c416:	bfb8      	it	lt
 800c418:	4614      	movlt	r4, r2
 800c41a:	2f46      	cmp	r7, #70	; 0x46
 800c41c:	700b      	strb	r3, [r1, #0]
 800c41e:	d004      	beq.n	800c42a <__cvt+0x40>
 800c420:	2f45      	cmp	r7, #69	; 0x45
 800c422:	d100      	bne.n	800c426 <__cvt+0x3c>
 800c424:	3601      	adds	r6, #1
 800c426:	2102      	movs	r1, #2
 800c428:	e000      	b.n	800c42c <__cvt+0x42>
 800c42a:	2103      	movs	r1, #3
 800c42c:	ab03      	add	r3, sp, #12
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	ab02      	add	r3, sp, #8
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	4632      	mov	r2, r6
 800c436:	4653      	mov	r3, sl
 800c438:	ec45 4b10 	vmov	d0, r4, r5
 800c43c:	f000 fe40 	bl	800d0c0 <_dtoa_r>
 800c440:	2f47      	cmp	r7, #71	; 0x47
 800c442:	4680      	mov	r8, r0
 800c444:	d102      	bne.n	800c44c <__cvt+0x62>
 800c446:	f019 0f01 	tst.w	r9, #1
 800c44a:	d026      	beq.n	800c49a <__cvt+0xb0>
 800c44c:	2f46      	cmp	r7, #70	; 0x46
 800c44e:	eb08 0906 	add.w	r9, r8, r6
 800c452:	d111      	bne.n	800c478 <__cvt+0x8e>
 800c454:	f898 3000 	ldrb.w	r3, [r8]
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	d10a      	bne.n	800c472 <__cvt+0x88>
 800c45c:	2200      	movs	r2, #0
 800c45e:	2300      	movs	r3, #0
 800c460:	4620      	mov	r0, r4
 800c462:	4629      	mov	r1, r5
 800c464:	f7f4 fb58 	bl	8000b18 <__aeabi_dcmpeq>
 800c468:	b918      	cbnz	r0, 800c472 <__cvt+0x88>
 800c46a:	f1c6 0601 	rsb	r6, r6, #1
 800c46e:	f8ca 6000 	str.w	r6, [sl]
 800c472:	f8da 3000 	ldr.w	r3, [sl]
 800c476:	4499      	add	r9, r3
 800c478:	2200      	movs	r2, #0
 800c47a:	2300      	movs	r3, #0
 800c47c:	4620      	mov	r0, r4
 800c47e:	4629      	mov	r1, r5
 800c480:	f7f4 fb4a 	bl	8000b18 <__aeabi_dcmpeq>
 800c484:	b938      	cbnz	r0, 800c496 <__cvt+0xac>
 800c486:	2230      	movs	r2, #48	; 0x30
 800c488:	9b03      	ldr	r3, [sp, #12]
 800c48a:	454b      	cmp	r3, r9
 800c48c:	d205      	bcs.n	800c49a <__cvt+0xb0>
 800c48e:	1c59      	adds	r1, r3, #1
 800c490:	9103      	str	r1, [sp, #12]
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	e7f8      	b.n	800c488 <__cvt+0x9e>
 800c496:	f8cd 900c 	str.w	r9, [sp, #12]
 800c49a:	9b03      	ldr	r3, [sp, #12]
 800c49c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c49e:	eba3 0308 	sub.w	r3, r3, r8
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	6013      	str	r3, [r2, #0]
 800c4a6:	b004      	add	sp, #16
 800c4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c4ac <__exponent>:
 800c4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	bfba      	itte	lt
 800c4b4:	4249      	neglt	r1, r1
 800c4b6:	232d      	movlt	r3, #45	; 0x2d
 800c4b8:	232b      	movge	r3, #43	; 0x2b
 800c4ba:	2909      	cmp	r1, #9
 800c4bc:	f804 2b02 	strb.w	r2, [r4], #2
 800c4c0:	7043      	strb	r3, [r0, #1]
 800c4c2:	dd20      	ble.n	800c506 <__exponent+0x5a>
 800c4c4:	f10d 0307 	add.w	r3, sp, #7
 800c4c8:	461f      	mov	r7, r3
 800c4ca:	260a      	movs	r6, #10
 800c4cc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4d0:	fb06 1115 	mls	r1, r6, r5, r1
 800c4d4:	3130      	adds	r1, #48	; 0x30
 800c4d6:	2d09      	cmp	r5, #9
 800c4d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c4dc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c4e0:	4629      	mov	r1, r5
 800c4e2:	dc09      	bgt.n	800c4f8 <__exponent+0x4c>
 800c4e4:	3130      	adds	r1, #48	; 0x30
 800c4e6:	3b02      	subs	r3, #2
 800c4e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c4ec:	42bb      	cmp	r3, r7
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	d304      	bcc.n	800c4fc <__exponent+0x50>
 800c4f2:	1a10      	subs	r0, r2, r0
 800c4f4:	b003      	add	sp, #12
 800c4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	e7e7      	b.n	800c4cc <__exponent+0x20>
 800c4fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c500:	f804 2b01 	strb.w	r2, [r4], #1
 800c504:	e7f2      	b.n	800c4ec <__exponent+0x40>
 800c506:	2330      	movs	r3, #48	; 0x30
 800c508:	4419      	add	r1, r3
 800c50a:	7083      	strb	r3, [r0, #2]
 800c50c:	1d02      	adds	r2, r0, #4
 800c50e:	70c1      	strb	r1, [r0, #3]
 800c510:	e7ef      	b.n	800c4f2 <__exponent+0x46>
	...

0800c514 <_printf_float>:
 800c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c518:	b08d      	sub	sp, #52	; 0x34
 800c51a:	460c      	mov	r4, r1
 800c51c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c520:	4616      	mov	r6, r2
 800c522:	461f      	mov	r7, r3
 800c524:	4605      	mov	r5, r0
 800c526:	f001 fcfd 	bl	800df24 <_localeconv_r>
 800c52a:	6803      	ldr	r3, [r0, #0]
 800c52c:	9304      	str	r3, [sp, #16]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7f3 fe76 	bl	8000220 <strlen>
 800c534:	2300      	movs	r3, #0
 800c536:	930a      	str	r3, [sp, #40]	; 0x28
 800c538:	f8d8 3000 	ldr.w	r3, [r8]
 800c53c:	9005      	str	r0, [sp, #20]
 800c53e:	3307      	adds	r3, #7
 800c540:	f023 0307 	bic.w	r3, r3, #7
 800c544:	f103 0208 	add.w	r2, r3, #8
 800c548:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c54c:	f8d4 b000 	ldr.w	fp, [r4]
 800c550:	f8c8 2000 	str.w	r2, [r8]
 800c554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c558:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c55c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c560:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c564:	9307      	str	r3, [sp, #28]
 800c566:	f8cd 8018 	str.w	r8, [sp, #24]
 800c56a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c56e:	4ba7      	ldr	r3, [pc, #668]	; (800c80c <_printf_float+0x2f8>)
 800c570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c574:	f7f4 fb02 	bl	8000b7c <__aeabi_dcmpun>
 800c578:	bb70      	cbnz	r0, 800c5d8 <_printf_float+0xc4>
 800c57a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c57e:	4ba3      	ldr	r3, [pc, #652]	; (800c80c <_printf_float+0x2f8>)
 800c580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c584:	f7f4 fadc 	bl	8000b40 <__aeabi_dcmple>
 800c588:	bb30      	cbnz	r0, 800c5d8 <_printf_float+0xc4>
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	4640      	mov	r0, r8
 800c590:	4649      	mov	r1, r9
 800c592:	f7f4 facb 	bl	8000b2c <__aeabi_dcmplt>
 800c596:	b110      	cbz	r0, 800c59e <_printf_float+0x8a>
 800c598:	232d      	movs	r3, #45	; 0x2d
 800c59a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c59e:	4a9c      	ldr	r2, [pc, #624]	; (800c810 <_printf_float+0x2fc>)
 800c5a0:	4b9c      	ldr	r3, [pc, #624]	; (800c814 <_printf_float+0x300>)
 800c5a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c5a6:	bf8c      	ite	hi
 800c5a8:	4690      	movhi	r8, r2
 800c5aa:	4698      	movls	r8, r3
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	f02b 0204 	bic.w	r2, fp, #4
 800c5b2:	6123      	str	r3, [r4, #16]
 800c5b4:	6022      	str	r2, [r4, #0]
 800c5b6:	f04f 0900 	mov.w	r9, #0
 800c5ba:	9700      	str	r7, [sp, #0]
 800c5bc:	4633      	mov	r3, r6
 800c5be:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5c0:	4621      	mov	r1, r4
 800c5c2:	4628      	mov	r0, r5
 800c5c4:	f000 f9e6 	bl	800c994 <_printf_common>
 800c5c8:	3001      	adds	r0, #1
 800c5ca:	f040 808d 	bne.w	800c6e8 <_printf_float+0x1d4>
 800c5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d2:	b00d      	add	sp, #52	; 0x34
 800c5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d8:	4642      	mov	r2, r8
 800c5da:	464b      	mov	r3, r9
 800c5dc:	4640      	mov	r0, r8
 800c5de:	4649      	mov	r1, r9
 800c5e0:	f7f4 facc 	bl	8000b7c <__aeabi_dcmpun>
 800c5e4:	b110      	cbz	r0, 800c5ec <_printf_float+0xd8>
 800c5e6:	4a8c      	ldr	r2, [pc, #560]	; (800c818 <_printf_float+0x304>)
 800c5e8:	4b8c      	ldr	r3, [pc, #560]	; (800c81c <_printf_float+0x308>)
 800c5ea:	e7da      	b.n	800c5a2 <_printf_float+0x8e>
 800c5ec:	6861      	ldr	r1, [r4, #4]
 800c5ee:	1c4b      	adds	r3, r1, #1
 800c5f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c5f4:	a80a      	add	r0, sp, #40	; 0x28
 800c5f6:	d13e      	bne.n	800c676 <_printf_float+0x162>
 800c5f8:	2306      	movs	r3, #6
 800c5fa:	6063      	str	r3, [r4, #4]
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c602:	ab09      	add	r3, sp, #36	; 0x24
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	ec49 8b10 	vmov	d0, r8, r9
 800c60a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c60e:	6022      	str	r2, [r4, #0]
 800c610:	f8cd a004 	str.w	sl, [sp, #4]
 800c614:	6861      	ldr	r1, [r4, #4]
 800c616:	4628      	mov	r0, r5
 800c618:	f7ff fee7 	bl	800c3ea <__cvt>
 800c61c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c620:	2b47      	cmp	r3, #71	; 0x47
 800c622:	4680      	mov	r8, r0
 800c624:	d109      	bne.n	800c63a <_printf_float+0x126>
 800c626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c628:	1cd8      	adds	r0, r3, #3
 800c62a:	db02      	blt.n	800c632 <_printf_float+0x11e>
 800c62c:	6862      	ldr	r2, [r4, #4]
 800c62e:	4293      	cmp	r3, r2
 800c630:	dd47      	ble.n	800c6c2 <_printf_float+0x1ae>
 800c632:	f1aa 0a02 	sub.w	sl, sl, #2
 800c636:	fa5f fa8a 	uxtb.w	sl, sl
 800c63a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c63e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c640:	d824      	bhi.n	800c68c <_printf_float+0x178>
 800c642:	3901      	subs	r1, #1
 800c644:	4652      	mov	r2, sl
 800c646:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c64a:	9109      	str	r1, [sp, #36]	; 0x24
 800c64c:	f7ff ff2e 	bl	800c4ac <__exponent>
 800c650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c652:	1813      	adds	r3, r2, r0
 800c654:	2a01      	cmp	r2, #1
 800c656:	4681      	mov	r9, r0
 800c658:	6123      	str	r3, [r4, #16]
 800c65a:	dc02      	bgt.n	800c662 <_printf_float+0x14e>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	07d1      	lsls	r1, r2, #31
 800c660:	d501      	bpl.n	800c666 <_printf_float+0x152>
 800c662:	3301      	adds	r3, #1
 800c664:	6123      	str	r3, [r4, #16]
 800c666:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d0a5      	beq.n	800c5ba <_printf_float+0xa6>
 800c66e:	232d      	movs	r3, #45	; 0x2d
 800c670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c674:	e7a1      	b.n	800c5ba <_printf_float+0xa6>
 800c676:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c67a:	f000 8177 	beq.w	800c96c <_printf_float+0x458>
 800c67e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c682:	d1bb      	bne.n	800c5fc <_printf_float+0xe8>
 800c684:	2900      	cmp	r1, #0
 800c686:	d1b9      	bne.n	800c5fc <_printf_float+0xe8>
 800c688:	2301      	movs	r3, #1
 800c68a:	e7b6      	b.n	800c5fa <_printf_float+0xe6>
 800c68c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c690:	d119      	bne.n	800c6c6 <_printf_float+0x1b2>
 800c692:	2900      	cmp	r1, #0
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	dd0c      	ble.n	800c6b2 <_printf_float+0x19e>
 800c698:	6121      	str	r1, [r4, #16]
 800c69a:	b913      	cbnz	r3, 800c6a2 <_printf_float+0x18e>
 800c69c:	6822      	ldr	r2, [r4, #0]
 800c69e:	07d2      	lsls	r2, r2, #31
 800c6a0:	d502      	bpl.n	800c6a8 <_printf_float+0x194>
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	440b      	add	r3, r1
 800c6a6:	6123      	str	r3, [r4, #16]
 800c6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800c6ac:	f04f 0900 	mov.w	r9, #0
 800c6b0:	e7d9      	b.n	800c666 <_printf_float+0x152>
 800c6b2:	b913      	cbnz	r3, 800c6ba <_printf_float+0x1a6>
 800c6b4:	6822      	ldr	r2, [r4, #0]
 800c6b6:	07d0      	lsls	r0, r2, #31
 800c6b8:	d501      	bpl.n	800c6be <_printf_float+0x1aa>
 800c6ba:	3302      	adds	r3, #2
 800c6bc:	e7f3      	b.n	800c6a6 <_printf_float+0x192>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e7f1      	b.n	800c6a6 <_printf_float+0x192>
 800c6c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c6c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	db05      	blt.n	800c6da <_printf_float+0x1c6>
 800c6ce:	6822      	ldr	r2, [r4, #0]
 800c6d0:	6123      	str	r3, [r4, #16]
 800c6d2:	07d1      	lsls	r1, r2, #31
 800c6d4:	d5e8      	bpl.n	800c6a8 <_printf_float+0x194>
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	e7e5      	b.n	800c6a6 <_printf_float+0x192>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	bfd4      	ite	le
 800c6de:	f1c3 0302 	rsble	r3, r3, #2
 800c6e2:	2301      	movgt	r3, #1
 800c6e4:	4413      	add	r3, r2
 800c6e6:	e7de      	b.n	800c6a6 <_printf_float+0x192>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	055a      	lsls	r2, r3, #21
 800c6ec:	d407      	bmi.n	800c6fe <_printf_float+0x1ea>
 800c6ee:	6923      	ldr	r3, [r4, #16]
 800c6f0:	4642      	mov	r2, r8
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	47b8      	blx	r7
 800c6f8:	3001      	adds	r0, #1
 800c6fa:	d12b      	bne.n	800c754 <_printf_float+0x240>
 800c6fc:	e767      	b.n	800c5ce <_printf_float+0xba>
 800c6fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c702:	f240 80dc 	bls.w	800c8be <_printf_float+0x3aa>
 800c706:	2200      	movs	r2, #0
 800c708:	2300      	movs	r3, #0
 800c70a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c70e:	f7f4 fa03 	bl	8000b18 <__aeabi_dcmpeq>
 800c712:	2800      	cmp	r0, #0
 800c714:	d033      	beq.n	800c77e <_printf_float+0x26a>
 800c716:	2301      	movs	r3, #1
 800c718:	4a41      	ldr	r2, [pc, #260]	; (800c820 <_printf_float+0x30c>)
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f af54 	beq.w	800c5ce <_printf_float+0xba>
 800c726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c72a:	429a      	cmp	r2, r3
 800c72c:	db02      	blt.n	800c734 <_printf_float+0x220>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	07d8      	lsls	r0, r3, #31
 800c732:	d50f      	bpl.n	800c754 <_printf_float+0x240>
 800c734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c738:	4631      	mov	r1, r6
 800c73a:	4628      	mov	r0, r5
 800c73c:	47b8      	blx	r7
 800c73e:	3001      	adds	r0, #1
 800c740:	f43f af45 	beq.w	800c5ce <_printf_float+0xba>
 800c744:	f04f 0800 	mov.w	r8, #0
 800c748:	f104 091a 	add.w	r9, r4, #26
 800c74c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c74e:	3b01      	subs	r3, #1
 800c750:	4543      	cmp	r3, r8
 800c752:	dc09      	bgt.n	800c768 <_printf_float+0x254>
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	079b      	lsls	r3, r3, #30
 800c758:	f100 8103 	bmi.w	800c962 <_printf_float+0x44e>
 800c75c:	68e0      	ldr	r0, [r4, #12]
 800c75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c760:	4298      	cmp	r0, r3
 800c762:	bfb8      	it	lt
 800c764:	4618      	movlt	r0, r3
 800c766:	e734      	b.n	800c5d2 <_printf_float+0xbe>
 800c768:	2301      	movs	r3, #1
 800c76a:	464a      	mov	r2, r9
 800c76c:	4631      	mov	r1, r6
 800c76e:	4628      	mov	r0, r5
 800c770:	47b8      	blx	r7
 800c772:	3001      	adds	r0, #1
 800c774:	f43f af2b 	beq.w	800c5ce <_printf_float+0xba>
 800c778:	f108 0801 	add.w	r8, r8, #1
 800c77c:	e7e6      	b.n	800c74c <_printf_float+0x238>
 800c77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c780:	2b00      	cmp	r3, #0
 800c782:	dc2b      	bgt.n	800c7dc <_printf_float+0x2c8>
 800c784:	2301      	movs	r3, #1
 800c786:	4a26      	ldr	r2, [pc, #152]	; (800c820 <_printf_float+0x30c>)
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	47b8      	blx	r7
 800c78e:	3001      	adds	r0, #1
 800c790:	f43f af1d 	beq.w	800c5ce <_printf_float+0xba>
 800c794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c796:	b923      	cbnz	r3, 800c7a2 <_printf_float+0x28e>
 800c798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c79a:	b913      	cbnz	r3, 800c7a2 <_printf_float+0x28e>
 800c79c:	6823      	ldr	r3, [r4, #0]
 800c79e:	07d9      	lsls	r1, r3, #31
 800c7a0:	d5d8      	bpl.n	800c754 <_printf_float+0x240>
 800c7a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b8      	blx	r7
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	f43f af0e 	beq.w	800c5ce <_printf_float+0xba>
 800c7b2:	f04f 0900 	mov.w	r9, #0
 800c7b6:	f104 0a1a 	add.w	sl, r4, #26
 800c7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7bc:	425b      	negs	r3, r3
 800c7be:	454b      	cmp	r3, r9
 800c7c0:	dc01      	bgt.n	800c7c6 <_printf_float+0x2b2>
 800c7c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c4:	e794      	b.n	800c6f0 <_printf_float+0x1dc>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	4652      	mov	r2, sl
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	47b8      	blx	r7
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	f43f aefc 	beq.w	800c5ce <_printf_float+0xba>
 800c7d6:	f109 0901 	add.w	r9, r9, #1
 800c7da:	e7ee      	b.n	800c7ba <_printf_float+0x2a6>
 800c7dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	bfa8      	it	ge
 800c7e4:	461a      	movge	r2, r3
 800c7e6:	2a00      	cmp	r2, #0
 800c7e8:	4691      	mov	r9, r2
 800c7ea:	dd07      	ble.n	800c7fc <_printf_float+0x2e8>
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4642      	mov	r2, r8
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	47b8      	blx	r7
 800c7f6:	3001      	adds	r0, #1
 800c7f8:	f43f aee9 	beq.w	800c5ce <_printf_float+0xba>
 800c7fc:	f104 031a 	add.w	r3, r4, #26
 800c800:	f04f 0b00 	mov.w	fp, #0
 800c804:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c808:	9306      	str	r3, [sp, #24]
 800c80a:	e015      	b.n	800c838 <_printf_float+0x324>
 800c80c:	7fefffff 	.word	0x7fefffff
 800c810:	0800fa2c 	.word	0x0800fa2c
 800c814:	0800fa28 	.word	0x0800fa28
 800c818:	0800fa34 	.word	0x0800fa34
 800c81c:	0800fa30 	.word	0x0800fa30
 800c820:	0800fa38 	.word	0x0800fa38
 800c824:	2301      	movs	r3, #1
 800c826:	9a06      	ldr	r2, [sp, #24]
 800c828:	4631      	mov	r1, r6
 800c82a:	4628      	mov	r0, r5
 800c82c:	47b8      	blx	r7
 800c82e:	3001      	adds	r0, #1
 800c830:	f43f aecd 	beq.w	800c5ce <_printf_float+0xba>
 800c834:	f10b 0b01 	add.w	fp, fp, #1
 800c838:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c83c:	ebaa 0309 	sub.w	r3, sl, r9
 800c840:	455b      	cmp	r3, fp
 800c842:	dcef      	bgt.n	800c824 <_printf_float+0x310>
 800c844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c848:	429a      	cmp	r2, r3
 800c84a:	44d0      	add	r8, sl
 800c84c:	db15      	blt.n	800c87a <_printf_float+0x366>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	07da      	lsls	r2, r3, #31
 800c852:	d412      	bmi.n	800c87a <_printf_float+0x366>
 800c854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c856:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c858:	eba3 020a 	sub.w	r2, r3, sl
 800c85c:	eba3 0a01 	sub.w	sl, r3, r1
 800c860:	4592      	cmp	sl, r2
 800c862:	bfa8      	it	ge
 800c864:	4692      	movge	sl, r2
 800c866:	f1ba 0f00 	cmp.w	sl, #0
 800c86a:	dc0e      	bgt.n	800c88a <_printf_float+0x376>
 800c86c:	f04f 0800 	mov.w	r8, #0
 800c870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c874:	f104 091a 	add.w	r9, r4, #26
 800c878:	e019      	b.n	800c8ae <_printf_float+0x39a>
 800c87a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c87e:	4631      	mov	r1, r6
 800c880:	4628      	mov	r0, r5
 800c882:	47b8      	blx	r7
 800c884:	3001      	adds	r0, #1
 800c886:	d1e5      	bne.n	800c854 <_printf_float+0x340>
 800c888:	e6a1      	b.n	800c5ce <_printf_float+0xba>
 800c88a:	4653      	mov	r3, sl
 800c88c:	4642      	mov	r2, r8
 800c88e:	4631      	mov	r1, r6
 800c890:	4628      	mov	r0, r5
 800c892:	47b8      	blx	r7
 800c894:	3001      	adds	r0, #1
 800c896:	d1e9      	bne.n	800c86c <_printf_float+0x358>
 800c898:	e699      	b.n	800c5ce <_printf_float+0xba>
 800c89a:	2301      	movs	r3, #1
 800c89c:	464a      	mov	r2, r9
 800c89e:	4631      	mov	r1, r6
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b8      	blx	r7
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f43f ae92 	beq.w	800c5ce <_printf_float+0xba>
 800c8aa:	f108 0801 	add.w	r8, r8, #1
 800c8ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8b2:	1a9b      	subs	r3, r3, r2
 800c8b4:	eba3 030a 	sub.w	r3, r3, sl
 800c8b8:	4543      	cmp	r3, r8
 800c8ba:	dcee      	bgt.n	800c89a <_printf_float+0x386>
 800c8bc:	e74a      	b.n	800c754 <_printf_float+0x240>
 800c8be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8c0:	2a01      	cmp	r2, #1
 800c8c2:	dc01      	bgt.n	800c8c8 <_printf_float+0x3b4>
 800c8c4:	07db      	lsls	r3, r3, #31
 800c8c6:	d53a      	bpl.n	800c93e <_printf_float+0x42a>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4642      	mov	r2, r8
 800c8cc:	4631      	mov	r1, r6
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	47b8      	blx	r7
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	f43f ae7b 	beq.w	800c5ce <_printf_float+0xba>
 800c8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4628      	mov	r0, r5
 800c8e0:	47b8      	blx	r7
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	f108 0801 	add.w	r8, r8, #1
 800c8e8:	f43f ae71 	beq.w	800c5ce <_printf_float+0xba>
 800c8ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c8f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f7f4 f90d 	bl	8000b18 <__aeabi_dcmpeq>
 800c8fe:	b9c8      	cbnz	r0, 800c934 <_printf_float+0x420>
 800c900:	4653      	mov	r3, sl
 800c902:	4642      	mov	r2, r8
 800c904:	4631      	mov	r1, r6
 800c906:	4628      	mov	r0, r5
 800c908:	47b8      	blx	r7
 800c90a:	3001      	adds	r0, #1
 800c90c:	d10e      	bne.n	800c92c <_printf_float+0x418>
 800c90e:	e65e      	b.n	800c5ce <_printf_float+0xba>
 800c910:	2301      	movs	r3, #1
 800c912:	4652      	mov	r2, sl
 800c914:	4631      	mov	r1, r6
 800c916:	4628      	mov	r0, r5
 800c918:	47b8      	blx	r7
 800c91a:	3001      	adds	r0, #1
 800c91c:	f43f ae57 	beq.w	800c5ce <_printf_float+0xba>
 800c920:	f108 0801 	add.w	r8, r8, #1
 800c924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c926:	3b01      	subs	r3, #1
 800c928:	4543      	cmp	r3, r8
 800c92a:	dcf1      	bgt.n	800c910 <_printf_float+0x3fc>
 800c92c:	464b      	mov	r3, r9
 800c92e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c932:	e6de      	b.n	800c6f2 <_printf_float+0x1de>
 800c934:	f04f 0800 	mov.w	r8, #0
 800c938:	f104 0a1a 	add.w	sl, r4, #26
 800c93c:	e7f2      	b.n	800c924 <_printf_float+0x410>
 800c93e:	2301      	movs	r3, #1
 800c940:	e7df      	b.n	800c902 <_printf_float+0x3ee>
 800c942:	2301      	movs	r3, #1
 800c944:	464a      	mov	r2, r9
 800c946:	4631      	mov	r1, r6
 800c948:	4628      	mov	r0, r5
 800c94a:	47b8      	blx	r7
 800c94c:	3001      	adds	r0, #1
 800c94e:	f43f ae3e 	beq.w	800c5ce <_printf_float+0xba>
 800c952:	f108 0801 	add.w	r8, r8, #1
 800c956:	68e3      	ldr	r3, [r4, #12]
 800c958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c95a:	1a9b      	subs	r3, r3, r2
 800c95c:	4543      	cmp	r3, r8
 800c95e:	dcf0      	bgt.n	800c942 <_printf_float+0x42e>
 800c960:	e6fc      	b.n	800c75c <_printf_float+0x248>
 800c962:	f04f 0800 	mov.w	r8, #0
 800c966:	f104 0919 	add.w	r9, r4, #25
 800c96a:	e7f4      	b.n	800c956 <_printf_float+0x442>
 800c96c:	2900      	cmp	r1, #0
 800c96e:	f43f ae8b 	beq.w	800c688 <_printf_float+0x174>
 800c972:	2300      	movs	r3, #0
 800c974:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c978:	ab09      	add	r3, sp, #36	; 0x24
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	ec49 8b10 	vmov	d0, r8, r9
 800c980:	6022      	str	r2, [r4, #0]
 800c982:	f8cd a004 	str.w	sl, [sp, #4]
 800c986:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c98a:	4628      	mov	r0, r5
 800c98c:	f7ff fd2d 	bl	800c3ea <__cvt>
 800c990:	4680      	mov	r8, r0
 800c992:	e648      	b.n	800c626 <_printf_float+0x112>

0800c994 <_printf_common>:
 800c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c998:	4691      	mov	r9, r2
 800c99a:	461f      	mov	r7, r3
 800c99c:	688a      	ldr	r2, [r1, #8]
 800c99e:	690b      	ldr	r3, [r1, #16]
 800c9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	bfb8      	it	lt
 800c9a8:	4613      	movlt	r3, r2
 800c9aa:	f8c9 3000 	str.w	r3, [r9]
 800c9ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9b2:	4606      	mov	r6, r0
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	b112      	cbz	r2, 800c9be <_printf_common+0x2a>
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	f8c9 3000 	str.w	r3, [r9]
 800c9be:	6823      	ldr	r3, [r4, #0]
 800c9c0:	0699      	lsls	r1, r3, #26
 800c9c2:	bf42      	ittt	mi
 800c9c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c9c8:	3302      	addmi	r3, #2
 800c9ca:	f8c9 3000 	strmi.w	r3, [r9]
 800c9ce:	6825      	ldr	r5, [r4, #0]
 800c9d0:	f015 0506 	ands.w	r5, r5, #6
 800c9d4:	d107      	bne.n	800c9e6 <_printf_common+0x52>
 800c9d6:	f104 0a19 	add.w	sl, r4, #25
 800c9da:	68e3      	ldr	r3, [r4, #12]
 800c9dc:	f8d9 2000 	ldr.w	r2, [r9]
 800c9e0:	1a9b      	subs	r3, r3, r2
 800c9e2:	42ab      	cmp	r3, r5
 800c9e4:	dc28      	bgt.n	800ca38 <_printf_common+0xa4>
 800c9e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c9ea:	6822      	ldr	r2, [r4, #0]
 800c9ec:	3300      	adds	r3, #0
 800c9ee:	bf18      	it	ne
 800c9f0:	2301      	movne	r3, #1
 800c9f2:	0692      	lsls	r2, r2, #26
 800c9f4:	d42d      	bmi.n	800ca52 <_printf_common+0xbe>
 800c9f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	4630      	mov	r0, r6
 800c9fe:	47c0      	blx	r8
 800ca00:	3001      	adds	r0, #1
 800ca02:	d020      	beq.n	800ca46 <_printf_common+0xb2>
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	68e5      	ldr	r5, [r4, #12]
 800ca08:	f8d9 2000 	ldr.w	r2, [r9]
 800ca0c:	f003 0306 	and.w	r3, r3, #6
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	bf08      	it	eq
 800ca14:	1aad      	subeq	r5, r5, r2
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	6922      	ldr	r2, [r4, #16]
 800ca1a:	bf0c      	ite	eq
 800ca1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca20:	2500      	movne	r5, #0
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bfc4      	itt	gt
 800ca26:	1a9b      	subgt	r3, r3, r2
 800ca28:	18ed      	addgt	r5, r5, r3
 800ca2a:	f04f 0900 	mov.w	r9, #0
 800ca2e:	341a      	adds	r4, #26
 800ca30:	454d      	cmp	r5, r9
 800ca32:	d11a      	bne.n	800ca6a <_printf_common+0xd6>
 800ca34:	2000      	movs	r0, #0
 800ca36:	e008      	b.n	800ca4a <_printf_common+0xb6>
 800ca38:	2301      	movs	r3, #1
 800ca3a:	4652      	mov	r2, sl
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4630      	mov	r0, r6
 800ca40:	47c0      	blx	r8
 800ca42:	3001      	adds	r0, #1
 800ca44:	d103      	bne.n	800ca4e <_printf_common+0xba>
 800ca46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca4e:	3501      	adds	r5, #1
 800ca50:	e7c3      	b.n	800c9da <_printf_common+0x46>
 800ca52:	18e1      	adds	r1, r4, r3
 800ca54:	1c5a      	adds	r2, r3, #1
 800ca56:	2030      	movs	r0, #48	; 0x30
 800ca58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca5c:	4422      	add	r2, r4
 800ca5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca66:	3302      	adds	r3, #2
 800ca68:	e7c5      	b.n	800c9f6 <_printf_common+0x62>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4639      	mov	r1, r7
 800ca70:	4630      	mov	r0, r6
 800ca72:	47c0      	blx	r8
 800ca74:	3001      	adds	r0, #1
 800ca76:	d0e6      	beq.n	800ca46 <_printf_common+0xb2>
 800ca78:	f109 0901 	add.w	r9, r9, #1
 800ca7c:	e7d8      	b.n	800ca30 <_printf_common+0x9c>
	...

0800ca80 <_printf_i>:
 800ca80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ca88:	460c      	mov	r4, r1
 800ca8a:	7e09      	ldrb	r1, [r1, #24]
 800ca8c:	b085      	sub	sp, #20
 800ca8e:	296e      	cmp	r1, #110	; 0x6e
 800ca90:	4617      	mov	r7, r2
 800ca92:	4606      	mov	r6, r0
 800ca94:	4698      	mov	r8, r3
 800ca96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca98:	f000 80b3 	beq.w	800cc02 <_printf_i+0x182>
 800ca9c:	d822      	bhi.n	800cae4 <_printf_i+0x64>
 800ca9e:	2963      	cmp	r1, #99	; 0x63
 800caa0:	d036      	beq.n	800cb10 <_printf_i+0x90>
 800caa2:	d80a      	bhi.n	800caba <_printf_i+0x3a>
 800caa4:	2900      	cmp	r1, #0
 800caa6:	f000 80b9 	beq.w	800cc1c <_printf_i+0x19c>
 800caaa:	2958      	cmp	r1, #88	; 0x58
 800caac:	f000 8083 	beq.w	800cbb6 <_printf_i+0x136>
 800cab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cab4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cab8:	e032      	b.n	800cb20 <_printf_i+0xa0>
 800caba:	2964      	cmp	r1, #100	; 0x64
 800cabc:	d001      	beq.n	800cac2 <_printf_i+0x42>
 800cabe:	2969      	cmp	r1, #105	; 0x69
 800cac0:	d1f6      	bne.n	800cab0 <_printf_i+0x30>
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	6813      	ldr	r3, [r2, #0]
 800cac6:	0605      	lsls	r5, r0, #24
 800cac8:	f103 0104 	add.w	r1, r3, #4
 800cacc:	d52a      	bpl.n	800cb24 <_printf_i+0xa4>
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	da03      	bge.n	800cade <_printf_i+0x5e>
 800cad6:	222d      	movs	r2, #45	; 0x2d
 800cad8:	425b      	negs	r3, r3
 800cada:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cade:	486f      	ldr	r0, [pc, #444]	; (800cc9c <_printf_i+0x21c>)
 800cae0:	220a      	movs	r2, #10
 800cae2:	e039      	b.n	800cb58 <_printf_i+0xd8>
 800cae4:	2973      	cmp	r1, #115	; 0x73
 800cae6:	f000 809d 	beq.w	800cc24 <_printf_i+0x1a4>
 800caea:	d808      	bhi.n	800cafe <_printf_i+0x7e>
 800caec:	296f      	cmp	r1, #111	; 0x6f
 800caee:	d020      	beq.n	800cb32 <_printf_i+0xb2>
 800caf0:	2970      	cmp	r1, #112	; 0x70
 800caf2:	d1dd      	bne.n	800cab0 <_printf_i+0x30>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	f043 0320 	orr.w	r3, r3, #32
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	e003      	b.n	800cb06 <_printf_i+0x86>
 800cafe:	2975      	cmp	r1, #117	; 0x75
 800cb00:	d017      	beq.n	800cb32 <_printf_i+0xb2>
 800cb02:	2978      	cmp	r1, #120	; 0x78
 800cb04:	d1d4      	bne.n	800cab0 <_printf_i+0x30>
 800cb06:	2378      	movs	r3, #120	; 0x78
 800cb08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb0c:	4864      	ldr	r0, [pc, #400]	; (800cca0 <_printf_i+0x220>)
 800cb0e:	e055      	b.n	800cbbc <_printf_i+0x13c>
 800cb10:	6813      	ldr	r3, [r2, #0]
 800cb12:	1d19      	adds	r1, r3, #4
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6011      	str	r1, [r2, #0]
 800cb18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb20:	2301      	movs	r3, #1
 800cb22:	e08c      	b.n	800cc3e <_printf_i+0x1be>
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6011      	str	r1, [r2, #0]
 800cb28:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb2c:	bf18      	it	ne
 800cb2e:	b21b      	sxthne	r3, r3
 800cb30:	e7cf      	b.n	800cad2 <_printf_i+0x52>
 800cb32:	6813      	ldr	r3, [r2, #0]
 800cb34:	6825      	ldr	r5, [r4, #0]
 800cb36:	1d18      	adds	r0, r3, #4
 800cb38:	6010      	str	r0, [r2, #0]
 800cb3a:	0628      	lsls	r0, r5, #24
 800cb3c:	d501      	bpl.n	800cb42 <_printf_i+0xc2>
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	e002      	b.n	800cb48 <_printf_i+0xc8>
 800cb42:	0668      	lsls	r0, r5, #25
 800cb44:	d5fb      	bpl.n	800cb3e <_printf_i+0xbe>
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	4854      	ldr	r0, [pc, #336]	; (800cc9c <_printf_i+0x21c>)
 800cb4a:	296f      	cmp	r1, #111	; 0x6f
 800cb4c:	bf14      	ite	ne
 800cb4e:	220a      	movne	r2, #10
 800cb50:	2208      	moveq	r2, #8
 800cb52:	2100      	movs	r1, #0
 800cb54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb58:	6865      	ldr	r5, [r4, #4]
 800cb5a:	60a5      	str	r5, [r4, #8]
 800cb5c:	2d00      	cmp	r5, #0
 800cb5e:	f2c0 8095 	blt.w	800cc8c <_printf_i+0x20c>
 800cb62:	6821      	ldr	r1, [r4, #0]
 800cb64:	f021 0104 	bic.w	r1, r1, #4
 800cb68:	6021      	str	r1, [r4, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d13d      	bne.n	800cbea <_printf_i+0x16a>
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	f040 808e 	bne.w	800cc90 <_printf_i+0x210>
 800cb74:	4665      	mov	r5, ip
 800cb76:	2a08      	cmp	r2, #8
 800cb78:	d10b      	bne.n	800cb92 <_printf_i+0x112>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	07db      	lsls	r3, r3, #31
 800cb7e:	d508      	bpl.n	800cb92 <_printf_i+0x112>
 800cb80:	6923      	ldr	r3, [r4, #16]
 800cb82:	6862      	ldr	r2, [r4, #4]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	bfde      	ittt	le
 800cb88:	2330      	movle	r3, #48	; 0x30
 800cb8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb8e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cb92:	ebac 0305 	sub.w	r3, ip, r5
 800cb96:	6123      	str	r3, [r4, #16]
 800cb98:	f8cd 8000 	str.w	r8, [sp]
 800cb9c:	463b      	mov	r3, r7
 800cb9e:	aa03      	add	r2, sp, #12
 800cba0:	4621      	mov	r1, r4
 800cba2:	4630      	mov	r0, r6
 800cba4:	f7ff fef6 	bl	800c994 <_printf_common>
 800cba8:	3001      	adds	r0, #1
 800cbaa:	d14d      	bne.n	800cc48 <_printf_i+0x1c8>
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbb0:	b005      	add	sp, #20
 800cbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	4839      	ldr	r0, [pc, #228]	; (800cc9c <_printf_i+0x21c>)
 800cbb8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cbbc:	6813      	ldr	r3, [r2, #0]
 800cbbe:	6821      	ldr	r1, [r4, #0]
 800cbc0:	1d1d      	adds	r5, r3, #4
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	6015      	str	r5, [r2, #0]
 800cbc6:	060a      	lsls	r2, r1, #24
 800cbc8:	d50b      	bpl.n	800cbe2 <_printf_i+0x162>
 800cbca:	07ca      	lsls	r2, r1, #31
 800cbcc:	bf44      	itt	mi
 800cbce:	f041 0120 	orrmi.w	r1, r1, #32
 800cbd2:	6021      	strmi	r1, [r4, #0]
 800cbd4:	b91b      	cbnz	r3, 800cbde <_printf_i+0x15e>
 800cbd6:	6822      	ldr	r2, [r4, #0]
 800cbd8:	f022 0220 	bic.w	r2, r2, #32
 800cbdc:	6022      	str	r2, [r4, #0]
 800cbde:	2210      	movs	r2, #16
 800cbe0:	e7b7      	b.n	800cb52 <_printf_i+0xd2>
 800cbe2:	064d      	lsls	r5, r1, #25
 800cbe4:	bf48      	it	mi
 800cbe6:	b29b      	uxthmi	r3, r3
 800cbe8:	e7ef      	b.n	800cbca <_printf_i+0x14a>
 800cbea:	4665      	mov	r5, ip
 800cbec:	fbb3 f1f2 	udiv	r1, r3, r2
 800cbf0:	fb02 3311 	mls	r3, r2, r1, r3
 800cbf4:	5cc3      	ldrb	r3, [r0, r3]
 800cbf6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	2900      	cmp	r1, #0
 800cbfe:	d1f5      	bne.n	800cbec <_printf_i+0x16c>
 800cc00:	e7b9      	b.n	800cb76 <_printf_i+0xf6>
 800cc02:	6813      	ldr	r3, [r2, #0]
 800cc04:	6825      	ldr	r5, [r4, #0]
 800cc06:	6961      	ldr	r1, [r4, #20]
 800cc08:	1d18      	adds	r0, r3, #4
 800cc0a:	6010      	str	r0, [r2, #0]
 800cc0c:	0628      	lsls	r0, r5, #24
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	d501      	bpl.n	800cc16 <_printf_i+0x196>
 800cc12:	6019      	str	r1, [r3, #0]
 800cc14:	e002      	b.n	800cc1c <_printf_i+0x19c>
 800cc16:	066a      	lsls	r2, r5, #25
 800cc18:	d5fb      	bpl.n	800cc12 <_printf_i+0x192>
 800cc1a:	8019      	strh	r1, [r3, #0]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	6123      	str	r3, [r4, #16]
 800cc20:	4665      	mov	r5, ip
 800cc22:	e7b9      	b.n	800cb98 <_printf_i+0x118>
 800cc24:	6813      	ldr	r3, [r2, #0]
 800cc26:	1d19      	adds	r1, r3, #4
 800cc28:	6011      	str	r1, [r2, #0]
 800cc2a:	681d      	ldr	r5, [r3, #0]
 800cc2c:	6862      	ldr	r2, [r4, #4]
 800cc2e:	2100      	movs	r1, #0
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7f3 fafd 	bl	8000230 <memchr>
 800cc36:	b108      	cbz	r0, 800cc3c <_printf_i+0x1bc>
 800cc38:	1b40      	subs	r0, r0, r5
 800cc3a:	6060      	str	r0, [r4, #4]
 800cc3c:	6863      	ldr	r3, [r4, #4]
 800cc3e:	6123      	str	r3, [r4, #16]
 800cc40:	2300      	movs	r3, #0
 800cc42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc46:	e7a7      	b.n	800cb98 <_printf_i+0x118>
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	462a      	mov	r2, r5
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4630      	mov	r0, r6
 800cc50:	47c0      	blx	r8
 800cc52:	3001      	adds	r0, #1
 800cc54:	d0aa      	beq.n	800cbac <_printf_i+0x12c>
 800cc56:	6823      	ldr	r3, [r4, #0]
 800cc58:	079b      	lsls	r3, r3, #30
 800cc5a:	d413      	bmi.n	800cc84 <_printf_i+0x204>
 800cc5c:	68e0      	ldr	r0, [r4, #12]
 800cc5e:	9b03      	ldr	r3, [sp, #12]
 800cc60:	4298      	cmp	r0, r3
 800cc62:	bfb8      	it	lt
 800cc64:	4618      	movlt	r0, r3
 800cc66:	e7a3      	b.n	800cbb0 <_printf_i+0x130>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	464a      	mov	r2, r9
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	4630      	mov	r0, r6
 800cc70:	47c0      	blx	r8
 800cc72:	3001      	adds	r0, #1
 800cc74:	d09a      	beq.n	800cbac <_printf_i+0x12c>
 800cc76:	3501      	adds	r5, #1
 800cc78:	68e3      	ldr	r3, [r4, #12]
 800cc7a:	9a03      	ldr	r2, [sp, #12]
 800cc7c:	1a9b      	subs	r3, r3, r2
 800cc7e:	42ab      	cmp	r3, r5
 800cc80:	dcf2      	bgt.n	800cc68 <_printf_i+0x1e8>
 800cc82:	e7eb      	b.n	800cc5c <_printf_i+0x1dc>
 800cc84:	2500      	movs	r5, #0
 800cc86:	f104 0919 	add.w	r9, r4, #25
 800cc8a:	e7f5      	b.n	800cc78 <_printf_i+0x1f8>
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d1ac      	bne.n	800cbea <_printf_i+0x16a>
 800cc90:	7803      	ldrb	r3, [r0, #0]
 800cc92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cc96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc9a:	e76c      	b.n	800cb76 <_printf_i+0xf6>
 800cc9c:	0800fa3a 	.word	0x0800fa3a
 800cca0:	0800fa4b 	.word	0x0800fa4b

0800cca4 <iprintf>:
 800cca4:	b40f      	push	{r0, r1, r2, r3}
 800cca6:	4b0a      	ldr	r3, [pc, #40]	; (800ccd0 <iprintf+0x2c>)
 800cca8:	b513      	push	{r0, r1, r4, lr}
 800ccaa:	681c      	ldr	r4, [r3, #0]
 800ccac:	b124      	cbz	r4, 800ccb8 <iprintf+0x14>
 800ccae:	69a3      	ldr	r3, [r4, #24]
 800ccb0:	b913      	cbnz	r3, 800ccb8 <iprintf+0x14>
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f001 f8ac 	bl	800de10 <__sinit>
 800ccb8:	ab05      	add	r3, sp, #20
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	68a1      	ldr	r1, [r4, #8]
 800ccbe:	9301      	str	r3, [sp, #4]
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f001 fd65 	bl	800e790 <_vfiprintf_r>
 800ccc6:	b002      	add	sp, #8
 800ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cccc:	b004      	add	sp, #16
 800ccce:	4770      	bx	lr
 800ccd0:	20000014 	.word	0x20000014

0800ccd4 <_puts_r>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	460e      	mov	r6, r1
 800ccd8:	4605      	mov	r5, r0
 800ccda:	b118      	cbz	r0, 800cce4 <_puts_r+0x10>
 800ccdc:	6983      	ldr	r3, [r0, #24]
 800ccde:	b90b      	cbnz	r3, 800cce4 <_puts_r+0x10>
 800cce0:	f001 f896 	bl	800de10 <__sinit>
 800cce4:	69ab      	ldr	r3, [r5, #24]
 800cce6:	68ac      	ldr	r4, [r5, #8]
 800cce8:	b913      	cbnz	r3, 800ccf0 <_puts_r+0x1c>
 800ccea:	4628      	mov	r0, r5
 800ccec:	f001 f890 	bl	800de10 <__sinit>
 800ccf0:	4b23      	ldr	r3, [pc, #140]	; (800cd80 <_puts_r+0xac>)
 800ccf2:	429c      	cmp	r4, r3
 800ccf4:	d117      	bne.n	800cd26 <_puts_r+0x52>
 800ccf6:	686c      	ldr	r4, [r5, #4]
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	071b      	lsls	r3, r3, #28
 800ccfc:	d51d      	bpl.n	800cd3a <_puts_r+0x66>
 800ccfe:	6923      	ldr	r3, [r4, #16]
 800cd00:	b1db      	cbz	r3, 800cd3a <_puts_r+0x66>
 800cd02:	3e01      	subs	r6, #1
 800cd04:	68a3      	ldr	r3, [r4, #8]
 800cd06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	60a3      	str	r3, [r4, #8]
 800cd0e:	b9e9      	cbnz	r1, 800cd4c <_puts_r+0x78>
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	da2e      	bge.n	800cd72 <_puts_r+0x9e>
 800cd14:	4622      	mov	r2, r4
 800cd16:	210a      	movs	r1, #10
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f000 f883 	bl	800ce24 <__swbuf_r>
 800cd1e:	3001      	adds	r0, #1
 800cd20:	d011      	beq.n	800cd46 <_puts_r+0x72>
 800cd22:	200a      	movs	r0, #10
 800cd24:	e011      	b.n	800cd4a <_puts_r+0x76>
 800cd26:	4b17      	ldr	r3, [pc, #92]	; (800cd84 <_puts_r+0xb0>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	d101      	bne.n	800cd30 <_puts_r+0x5c>
 800cd2c:	68ac      	ldr	r4, [r5, #8]
 800cd2e:	e7e3      	b.n	800ccf8 <_puts_r+0x24>
 800cd30:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <_puts_r+0xb4>)
 800cd32:	429c      	cmp	r4, r3
 800cd34:	bf08      	it	eq
 800cd36:	68ec      	ldreq	r4, [r5, #12]
 800cd38:	e7de      	b.n	800ccf8 <_puts_r+0x24>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 f8c3 	bl	800cec8 <__swsetup_r>
 800cd42:	2800      	cmp	r0, #0
 800cd44:	d0dd      	beq.n	800cd02 <_puts_r+0x2e>
 800cd46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd4a:	bd70      	pop	{r4, r5, r6, pc}
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	da04      	bge.n	800cd5a <_puts_r+0x86>
 800cd50:	69a2      	ldr	r2, [r4, #24]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	dc06      	bgt.n	800cd64 <_puts_r+0x90>
 800cd56:	290a      	cmp	r1, #10
 800cd58:	d004      	beq.n	800cd64 <_puts_r+0x90>
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	7019      	strb	r1, [r3, #0]
 800cd62:	e7cf      	b.n	800cd04 <_puts_r+0x30>
 800cd64:	4622      	mov	r2, r4
 800cd66:	4628      	mov	r0, r5
 800cd68:	f000 f85c 	bl	800ce24 <__swbuf_r>
 800cd6c:	3001      	adds	r0, #1
 800cd6e:	d1c9      	bne.n	800cd04 <_puts_r+0x30>
 800cd70:	e7e9      	b.n	800cd46 <_puts_r+0x72>
 800cd72:	6823      	ldr	r3, [r4, #0]
 800cd74:	200a      	movs	r0, #10
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	6022      	str	r2, [r4, #0]
 800cd7a:	7018      	strb	r0, [r3, #0]
 800cd7c:	e7e5      	b.n	800cd4a <_puts_r+0x76>
 800cd7e:	bf00      	nop
 800cd80:	0800fa8c 	.word	0x0800fa8c
 800cd84:	0800faac 	.word	0x0800faac
 800cd88:	0800fa6c 	.word	0x0800fa6c

0800cd8c <puts>:
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <puts+0xc>)
 800cd8e:	4601      	mov	r1, r0
 800cd90:	6818      	ldr	r0, [r3, #0]
 800cd92:	f7ff bf9f 	b.w	800ccd4 <_puts_r>
 800cd96:	bf00      	nop
 800cd98:	20000014 	.word	0x20000014

0800cd9c <_raise_r>:
 800cd9c:	291f      	cmp	r1, #31
 800cd9e:	b538      	push	{r3, r4, r5, lr}
 800cda0:	4604      	mov	r4, r0
 800cda2:	460d      	mov	r5, r1
 800cda4:	d904      	bls.n	800cdb0 <_raise_r+0x14>
 800cda6:	2316      	movs	r3, #22
 800cda8:	6003      	str	r3, [r0, #0]
 800cdaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdae:	bd38      	pop	{r3, r4, r5, pc}
 800cdb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cdb2:	b112      	cbz	r2, 800cdba <_raise_r+0x1e>
 800cdb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdb8:	b94b      	cbnz	r3, 800cdce <_raise_r+0x32>
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 f830 	bl	800ce20 <_getpid_r>
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4601      	mov	r1, r0
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdca:	f000 b817 	b.w	800cdfc <_kill_r>
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d00a      	beq.n	800cde8 <_raise_r+0x4c>
 800cdd2:	1c59      	adds	r1, r3, #1
 800cdd4:	d103      	bne.n	800cdde <_raise_r+0x42>
 800cdd6:	2316      	movs	r3, #22
 800cdd8:	6003      	str	r3, [r0, #0]
 800cdda:	2001      	movs	r0, #1
 800cddc:	e7e7      	b.n	800cdae <_raise_r+0x12>
 800cdde:	2400      	movs	r4, #0
 800cde0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cde4:	4628      	mov	r0, r5
 800cde6:	4798      	blx	r3
 800cde8:	2000      	movs	r0, #0
 800cdea:	e7e0      	b.n	800cdae <_raise_r+0x12>

0800cdec <raise>:
 800cdec:	4b02      	ldr	r3, [pc, #8]	; (800cdf8 <raise+0xc>)
 800cdee:	4601      	mov	r1, r0
 800cdf0:	6818      	ldr	r0, [r3, #0]
 800cdf2:	f7ff bfd3 	b.w	800cd9c <_raise_r>
 800cdf6:	bf00      	nop
 800cdf8:	20000014 	.word	0x20000014

0800cdfc <_kill_r>:
 800cdfc:	b538      	push	{r3, r4, r5, lr}
 800cdfe:	4c07      	ldr	r4, [pc, #28]	; (800ce1c <_kill_r+0x20>)
 800ce00:	2300      	movs	r3, #0
 800ce02:	4605      	mov	r5, r0
 800ce04:	4608      	mov	r0, r1
 800ce06:	4611      	mov	r1, r2
 800ce08:	6023      	str	r3, [r4, #0]
 800ce0a:	f7f6 fdb9 	bl	8003980 <_kill>
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	d102      	bne.n	800ce18 <_kill_r+0x1c>
 800ce12:	6823      	ldr	r3, [r4, #0]
 800ce14:	b103      	cbz	r3, 800ce18 <_kill_r+0x1c>
 800ce16:	602b      	str	r3, [r5, #0]
 800ce18:	bd38      	pop	{r3, r4, r5, pc}
 800ce1a:	bf00      	nop
 800ce1c:	200053f0 	.word	0x200053f0

0800ce20 <_getpid_r>:
 800ce20:	f7f6 bda6 	b.w	8003970 <_getpid>

0800ce24 <__swbuf_r>:
 800ce24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce26:	460e      	mov	r6, r1
 800ce28:	4614      	mov	r4, r2
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	b118      	cbz	r0, 800ce36 <__swbuf_r+0x12>
 800ce2e:	6983      	ldr	r3, [r0, #24]
 800ce30:	b90b      	cbnz	r3, 800ce36 <__swbuf_r+0x12>
 800ce32:	f000 ffed 	bl	800de10 <__sinit>
 800ce36:	4b21      	ldr	r3, [pc, #132]	; (800cebc <__swbuf_r+0x98>)
 800ce38:	429c      	cmp	r4, r3
 800ce3a:	d12a      	bne.n	800ce92 <__swbuf_r+0x6e>
 800ce3c:	686c      	ldr	r4, [r5, #4]
 800ce3e:	69a3      	ldr	r3, [r4, #24]
 800ce40:	60a3      	str	r3, [r4, #8]
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	071a      	lsls	r2, r3, #28
 800ce46:	d52e      	bpl.n	800cea6 <__swbuf_r+0x82>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	b363      	cbz	r3, 800cea6 <__swbuf_r+0x82>
 800ce4c:	6923      	ldr	r3, [r4, #16]
 800ce4e:	6820      	ldr	r0, [r4, #0]
 800ce50:	1ac0      	subs	r0, r0, r3
 800ce52:	6963      	ldr	r3, [r4, #20]
 800ce54:	b2f6      	uxtb	r6, r6
 800ce56:	4283      	cmp	r3, r0
 800ce58:	4637      	mov	r7, r6
 800ce5a:	dc04      	bgt.n	800ce66 <__swbuf_r+0x42>
 800ce5c:	4621      	mov	r1, r4
 800ce5e:	4628      	mov	r0, r5
 800ce60:	f000 ff6c 	bl	800dd3c <_fflush_r>
 800ce64:	bb28      	cbnz	r0, 800ceb2 <__swbuf_r+0x8e>
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	3b01      	subs	r3, #1
 800ce6a:	60a3      	str	r3, [r4, #8]
 800ce6c:	6823      	ldr	r3, [r4, #0]
 800ce6e:	1c5a      	adds	r2, r3, #1
 800ce70:	6022      	str	r2, [r4, #0]
 800ce72:	701e      	strb	r6, [r3, #0]
 800ce74:	6963      	ldr	r3, [r4, #20]
 800ce76:	3001      	adds	r0, #1
 800ce78:	4283      	cmp	r3, r0
 800ce7a:	d004      	beq.n	800ce86 <__swbuf_r+0x62>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	07db      	lsls	r3, r3, #31
 800ce80:	d519      	bpl.n	800ceb6 <__swbuf_r+0x92>
 800ce82:	2e0a      	cmp	r6, #10
 800ce84:	d117      	bne.n	800ceb6 <__swbuf_r+0x92>
 800ce86:	4621      	mov	r1, r4
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f000 ff57 	bl	800dd3c <_fflush_r>
 800ce8e:	b190      	cbz	r0, 800ceb6 <__swbuf_r+0x92>
 800ce90:	e00f      	b.n	800ceb2 <__swbuf_r+0x8e>
 800ce92:	4b0b      	ldr	r3, [pc, #44]	; (800cec0 <__swbuf_r+0x9c>)
 800ce94:	429c      	cmp	r4, r3
 800ce96:	d101      	bne.n	800ce9c <__swbuf_r+0x78>
 800ce98:	68ac      	ldr	r4, [r5, #8]
 800ce9a:	e7d0      	b.n	800ce3e <__swbuf_r+0x1a>
 800ce9c:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <__swbuf_r+0xa0>)
 800ce9e:	429c      	cmp	r4, r3
 800cea0:	bf08      	it	eq
 800cea2:	68ec      	ldreq	r4, [r5, #12]
 800cea4:	e7cb      	b.n	800ce3e <__swbuf_r+0x1a>
 800cea6:	4621      	mov	r1, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f000 f80d 	bl	800cec8 <__swsetup_r>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0cc      	beq.n	800ce4c <__swbuf_r+0x28>
 800ceb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ceba:	bf00      	nop
 800cebc:	0800fa8c 	.word	0x0800fa8c
 800cec0:	0800faac 	.word	0x0800faac
 800cec4:	0800fa6c 	.word	0x0800fa6c

0800cec8 <__swsetup_r>:
 800cec8:	4b32      	ldr	r3, [pc, #200]	; (800cf94 <__swsetup_r+0xcc>)
 800ceca:	b570      	push	{r4, r5, r6, lr}
 800cecc:	681d      	ldr	r5, [r3, #0]
 800cece:	4606      	mov	r6, r0
 800ced0:	460c      	mov	r4, r1
 800ced2:	b125      	cbz	r5, 800cede <__swsetup_r+0x16>
 800ced4:	69ab      	ldr	r3, [r5, #24]
 800ced6:	b913      	cbnz	r3, 800cede <__swsetup_r+0x16>
 800ced8:	4628      	mov	r0, r5
 800ceda:	f000 ff99 	bl	800de10 <__sinit>
 800cede:	4b2e      	ldr	r3, [pc, #184]	; (800cf98 <__swsetup_r+0xd0>)
 800cee0:	429c      	cmp	r4, r3
 800cee2:	d10f      	bne.n	800cf04 <__swsetup_r+0x3c>
 800cee4:	686c      	ldr	r4, [r5, #4]
 800cee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	0715      	lsls	r5, r2, #28
 800ceee:	d42c      	bmi.n	800cf4a <__swsetup_r+0x82>
 800cef0:	06d0      	lsls	r0, r2, #27
 800cef2:	d411      	bmi.n	800cf18 <__swsetup_r+0x50>
 800cef4:	2209      	movs	r2, #9
 800cef6:	6032      	str	r2, [r6, #0]
 800cef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf02:	e03e      	b.n	800cf82 <__swsetup_r+0xba>
 800cf04:	4b25      	ldr	r3, [pc, #148]	; (800cf9c <__swsetup_r+0xd4>)
 800cf06:	429c      	cmp	r4, r3
 800cf08:	d101      	bne.n	800cf0e <__swsetup_r+0x46>
 800cf0a:	68ac      	ldr	r4, [r5, #8]
 800cf0c:	e7eb      	b.n	800cee6 <__swsetup_r+0x1e>
 800cf0e:	4b24      	ldr	r3, [pc, #144]	; (800cfa0 <__swsetup_r+0xd8>)
 800cf10:	429c      	cmp	r4, r3
 800cf12:	bf08      	it	eq
 800cf14:	68ec      	ldreq	r4, [r5, #12]
 800cf16:	e7e6      	b.n	800cee6 <__swsetup_r+0x1e>
 800cf18:	0751      	lsls	r1, r2, #29
 800cf1a:	d512      	bpl.n	800cf42 <__swsetup_r+0x7a>
 800cf1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf1e:	b141      	cbz	r1, 800cf32 <__swsetup_r+0x6a>
 800cf20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf24:	4299      	cmp	r1, r3
 800cf26:	d002      	beq.n	800cf2e <__swsetup_r+0x66>
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f001 fb5f 	bl	800e5ec <_free_r>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	6363      	str	r3, [r4, #52]	; 0x34
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf38:	81a3      	strh	r3, [r4, #12]
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	6063      	str	r3, [r4, #4]
 800cf3e:	6923      	ldr	r3, [r4, #16]
 800cf40:	6023      	str	r3, [r4, #0]
 800cf42:	89a3      	ldrh	r3, [r4, #12]
 800cf44:	f043 0308 	orr.w	r3, r3, #8
 800cf48:	81a3      	strh	r3, [r4, #12]
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	b94b      	cbnz	r3, 800cf62 <__swsetup_r+0x9a>
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf58:	d003      	beq.n	800cf62 <__swsetup_r+0x9a>
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f001 f813 	bl	800df88 <__smakebuf_r>
 800cf62:	89a2      	ldrh	r2, [r4, #12]
 800cf64:	f012 0301 	ands.w	r3, r2, #1
 800cf68:	d00c      	beq.n	800cf84 <__swsetup_r+0xbc>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	60a3      	str	r3, [r4, #8]
 800cf6e:	6963      	ldr	r3, [r4, #20]
 800cf70:	425b      	negs	r3, r3
 800cf72:	61a3      	str	r3, [r4, #24]
 800cf74:	6923      	ldr	r3, [r4, #16]
 800cf76:	b953      	cbnz	r3, 800cf8e <__swsetup_r+0xc6>
 800cf78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cf80:	d1ba      	bne.n	800cef8 <__swsetup_r+0x30>
 800cf82:	bd70      	pop	{r4, r5, r6, pc}
 800cf84:	0792      	lsls	r2, r2, #30
 800cf86:	bf58      	it	pl
 800cf88:	6963      	ldrpl	r3, [r4, #20]
 800cf8a:	60a3      	str	r3, [r4, #8]
 800cf8c:	e7f2      	b.n	800cf74 <__swsetup_r+0xac>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e7f7      	b.n	800cf82 <__swsetup_r+0xba>
 800cf92:	bf00      	nop
 800cf94:	20000014 	.word	0x20000014
 800cf98:	0800fa8c 	.word	0x0800fa8c
 800cf9c:	0800faac 	.word	0x0800faac
 800cfa0:	0800fa6c 	.word	0x0800fa6c

0800cfa4 <quorem>:
 800cfa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	6903      	ldr	r3, [r0, #16]
 800cfaa:	690c      	ldr	r4, [r1, #16]
 800cfac:	42a3      	cmp	r3, r4
 800cfae:	4680      	mov	r8, r0
 800cfb0:	f2c0 8082 	blt.w	800d0b8 <quorem+0x114>
 800cfb4:	3c01      	subs	r4, #1
 800cfb6:	f101 0714 	add.w	r7, r1, #20
 800cfba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cfbe:	f100 0614 	add.w	r6, r0, #20
 800cfc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cfc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cfca:	eb06 030c 	add.w	r3, r6, ip
 800cfce:	3501      	adds	r5, #1
 800cfd0:	eb07 090c 	add.w	r9, r7, ip
 800cfd4:	9301      	str	r3, [sp, #4]
 800cfd6:	fbb0 f5f5 	udiv	r5, r0, r5
 800cfda:	b395      	cbz	r5, 800d042 <quorem+0x9e>
 800cfdc:	f04f 0a00 	mov.w	sl, #0
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	46b6      	mov	lr, r6
 800cfe4:	46d3      	mov	fp, sl
 800cfe6:	f850 2b04 	ldr.w	r2, [r0], #4
 800cfea:	b293      	uxth	r3, r2
 800cfec:	fb05 a303 	mla	r3, r5, r3, sl
 800cff0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	ebab 0303 	sub.w	r3, fp, r3
 800cffa:	0c12      	lsrs	r2, r2, #16
 800cffc:	f8de b000 	ldr.w	fp, [lr]
 800d000:	fb05 a202 	mla	r2, r5, r2, sl
 800d004:	fa13 f38b 	uxtah	r3, r3, fp
 800d008:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d00c:	fa1f fb82 	uxth.w	fp, r2
 800d010:	f8de 2000 	ldr.w	r2, [lr]
 800d014:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d018:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d022:	4581      	cmp	r9, r0
 800d024:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d028:	f84e 3b04 	str.w	r3, [lr], #4
 800d02c:	d2db      	bcs.n	800cfe6 <quorem+0x42>
 800d02e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d032:	b933      	cbnz	r3, 800d042 <quorem+0x9e>
 800d034:	9b01      	ldr	r3, [sp, #4]
 800d036:	3b04      	subs	r3, #4
 800d038:	429e      	cmp	r6, r3
 800d03a:	461a      	mov	r2, r3
 800d03c:	d330      	bcc.n	800d0a0 <quorem+0xfc>
 800d03e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d042:	4640      	mov	r0, r8
 800d044:	f001 f9fe 	bl	800e444 <__mcmp>
 800d048:	2800      	cmp	r0, #0
 800d04a:	db25      	blt.n	800d098 <quorem+0xf4>
 800d04c:	3501      	adds	r5, #1
 800d04e:	4630      	mov	r0, r6
 800d050:	f04f 0c00 	mov.w	ip, #0
 800d054:	f857 2b04 	ldr.w	r2, [r7], #4
 800d058:	f8d0 e000 	ldr.w	lr, [r0]
 800d05c:	b293      	uxth	r3, r2
 800d05e:	ebac 0303 	sub.w	r3, ip, r3
 800d062:	0c12      	lsrs	r2, r2, #16
 800d064:	fa13 f38e 	uxtah	r3, r3, lr
 800d068:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d06c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d070:	b29b      	uxth	r3, r3
 800d072:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d076:	45b9      	cmp	r9, r7
 800d078:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d07c:	f840 3b04 	str.w	r3, [r0], #4
 800d080:	d2e8      	bcs.n	800d054 <quorem+0xb0>
 800d082:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d086:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d08a:	b92a      	cbnz	r2, 800d098 <quorem+0xf4>
 800d08c:	3b04      	subs	r3, #4
 800d08e:	429e      	cmp	r6, r3
 800d090:	461a      	mov	r2, r3
 800d092:	d30b      	bcc.n	800d0ac <quorem+0x108>
 800d094:	f8c8 4010 	str.w	r4, [r8, #16]
 800d098:	4628      	mov	r0, r5
 800d09a:	b003      	add	sp, #12
 800d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a0:	6812      	ldr	r2, [r2, #0]
 800d0a2:	3b04      	subs	r3, #4
 800d0a4:	2a00      	cmp	r2, #0
 800d0a6:	d1ca      	bne.n	800d03e <quorem+0x9a>
 800d0a8:	3c01      	subs	r4, #1
 800d0aa:	e7c5      	b.n	800d038 <quorem+0x94>
 800d0ac:	6812      	ldr	r2, [r2, #0]
 800d0ae:	3b04      	subs	r3, #4
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	d1ef      	bne.n	800d094 <quorem+0xf0>
 800d0b4:	3c01      	subs	r4, #1
 800d0b6:	e7ea      	b.n	800d08e <quorem+0xea>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	e7ee      	b.n	800d09a <quorem+0xf6>
 800d0bc:	0000      	movs	r0, r0
	...

0800d0c0 <_dtoa_r>:
 800d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	ec57 6b10 	vmov	r6, r7, d0
 800d0c8:	b097      	sub	sp, #92	; 0x5c
 800d0ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d0cc:	9106      	str	r1, [sp, #24]
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d0d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d0d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d0d8:	e9cd 6700 	strd	r6, r7, [sp]
 800d0dc:	b93d      	cbnz	r5, 800d0ee <_dtoa_r+0x2e>
 800d0de:	2010      	movs	r0, #16
 800d0e0:	f000 ff92 	bl	800e008 <malloc>
 800d0e4:	6260      	str	r0, [r4, #36]	; 0x24
 800d0e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0ea:	6005      	str	r5, [r0, #0]
 800d0ec:	60c5      	str	r5, [r0, #12]
 800d0ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0f0:	6819      	ldr	r1, [r3, #0]
 800d0f2:	b151      	cbz	r1, 800d10a <_dtoa_r+0x4a>
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	604a      	str	r2, [r1, #4]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	4093      	lsls	r3, r2
 800d0fc:	608b      	str	r3, [r1, #8]
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ffbe 	bl	800e080 <_Bfree>
 800d104:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d106:	2200      	movs	r2, #0
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	1e3b      	subs	r3, r7, #0
 800d10c:	bfbb      	ittet	lt
 800d10e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d112:	9301      	strlt	r3, [sp, #4]
 800d114:	2300      	movge	r3, #0
 800d116:	2201      	movlt	r2, #1
 800d118:	bfac      	ite	ge
 800d11a:	f8c8 3000 	strge.w	r3, [r8]
 800d11e:	f8c8 2000 	strlt.w	r2, [r8]
 800d122:	4baf      	ldr	r3, [pc, #700]	; (800d3e0 <_dtoa_r+0x320>)
 800d124:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d128:	ea33 0308 	bics.w	r3, r3, r8
 800d12c:	d114      	bne.n	800d158 <_dtoa_r+0x98>
 800d12e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d130:	f242 730f 	movw	r3, #9999	; 0x270f
 800d134:	6013      	str	r3, [r2, #0]
 800d136:	9b00      	ldr	r3, [sp, #0]
 800d138:	b923      	cbnz	r3, 800d144 <_dtoa_r+0x84>
 800d13a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d13e:	2800      	cmp	r0, #0
 800d140:	f000 8542 	beq.w	800dbc8 <_dtoa_r+0xb08>
 800d144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d146:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d3f4 <_dtoa_r+0x334>
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 8544 	beq.w	800dbd8 <_dtoa_r+0xb18>
 800d150:	f10b 0303 	add.w	r3, fp, #3
 800d154:	f000 bd3e 	b.w	800dbd4 <_dtoa_r+0xb14>
 800d158:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d15c:	2200      	movs	r2, #0
 800d15e:	2300      	movs	r3, #0
 800d160:	4630      	mov	r0, r6
 800d162:	4639      	mov	r1, r7
 800d164:	f7f3 fcd8 	bl	8000b18 <__aeabi_dcmpeq>
 800d168:	4681      	mov	r9, r0
 800d16a:	b168      	cbz	r0, 800d188 <_dtoa_r+0xc8>
 800d16c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d16e:	2301      	movs	r3, #1
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 8524 	beq.w	800dbc2 <_dtoa_r+0xb02>
 800d17a:	4b9a      	ldr	r3, [pc, #616]	; (800d3e4 <_dtoa_r+0x324>)
 800d17c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d17e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d182:	6013      	str	r3, [r2, #0]
 800d184:	f000 bd28 	b.w	800dbd8 <_dtoa_r+0xb18>
 800d188:	aa14      	add	r2, sp, #80	; 0x50
 800d18a:	a915      	add	r1, sp, #84	; 0x54
 800d18c:	ec47 6b10 	vmov	d0, r6, r7
 800d190:	4620      	mov	r0, r4
 800d192:	f001 f9ce 	bl	800e532 <__d2b>
 800d196:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d19a:	9004      	str	r0, [sp, #16]
 800d19c:	2d00      	cmp	r5, #0
 800d19e:	d07c      	beq.n	800d29a <_dtoa_r+0x1da>
 800d1a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d1a8:	46b2      	mov	sl, r6
 800d1aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d1ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d1b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	4b8b      	ldr	r3, [pc, #556]	; (800d3e8 <_dtoa_r+0x328>)
 800d1ba:	4650      	mov	r0, sl
 800d1bc:	4659      	mov	r1, fp
 800d1be:	f7f3 f88b 	bl	80002d8 <__aeabi_dsub>
 800d1c2:	a381      	add	r3, pc, #516	; (adr r3, 800d3c8 <_dtoa_r+0x308>)
 800d1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c8:	f7f3 fa3e 	bl	8000648 <__aeabi_dmul>
 800d1cc:	a380      	add	r3, pc, #512	; (adr r3, 800d3d0 <_dtoa_r+0x310>)
 800d1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d2:	f7f3 f883 	bl	80002dc <__adddf3>
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	4628      	mov	r0, r5
 800d1da:	460f      	mov	r7, r1
 800d1dc:	f7f3 f9ca 	bl	8000574 <__aeabi_i2d>
 800d1e0:	a37d      	add	r3, pc, #500	; (adr r3, 800d3d8 <_dtoa_r+0x318>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	f7f3 fa2f 	bl	8000648 <__aeabi_dmul>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	4639      	mov	r1, r7
 800d1f2:	f7f3 f873 	bl	80002dc <__adddf3>
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	460f      	mov	r7, r1
 800d1fa:	f7f3 fcd5 	bl	8000ba8 <__aeabi_d2iz>
 800d1fe:	2200      	movs	r2, #0
 800d200:	4682      	mov	sl, r0
 800d202:	2300      	movs	r3, #0
 800d204:	4630      	mov	r0, r6
 800d206:	4639      	mov	r1, r7
 800d208:	f7f3 fc90 	bl	8000b2c <__aeabi_dcmplt>
 800d20c:	b148      	cbz	r0, 800d222 <_dtoa_r+0x162>
 800d20e:	4650      	mov	r0, sl
 800d210:	f7f3 f9b0 	bl	8000574 <__aeabi_i2d>
 800d214:	4632      	mov	r2, r6
 800d216:	463b      	mov	r3, r7
 800d218:	f7f3 fc7e 	bl	8000b18 <__aeabi_dcmpeq>
 800d21c:	b908      	cbnz	r0, 800d222 <_dtoa_r+0x162>
 800d21e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d222:	f1ba 0f16 	cmp.w	sl, #22
 800d226:	d859      	bhi.n	800d2dc <_dtoa_r+0x21c>
 800d228:	4970      	ldr	r1, [pc, #448]	; (800d3ec <_dtoa_r+0x32c>)
 800d22a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d232:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d236:	f7f3 fc97 	bl	8000b68 <__aeabi_dcmpgt>
 800d23a:	2800      	cmp	r0, #0
 800d23c:	d050      	beq.n	800d2e0 <_dtoa_r+0x220>
 800d23e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d242:	2300      	movs	r3, #0
 800d244:	930f      	str	r3, [sp, #60]	; 0x3c
 800d246:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d248:	1b5d      	subs	r5, r3, r5
 800d24a:	f1b5 0801 	subs.w	r8, r5, #1
 800d24e:	bf49      	itett	mi
 800d250:	f1c5 0301 	rsbmi	r3, r5, #1
 800d254:	2300      	movpl	r3, #0
 800d256:	9305      	strmi	r3, [sp, #20]
 800d258:	f04f 0800 	movmi.w	r8, #0
 800d25c:	bf58      	it	pl
 800d25e:	9305      	strpl	r3, [sp, #20]
 800d260:	f1ba 0f00 	cmp.w	sl, #0
 800d264:	db3e      	blt.n	800d2e4 <_dtoa_r+0x224>
 800d266:	2300      	movs	r3, #0
 800d268:	44d0      	add	r8, sl
 800d26a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d26e:	9307      	str	r3, [sp, #28]
 800d270:	9b06      	ldr	r3, [sp, #24]
 800d272:	2b09      	cmp	r3, #9
 800d274:	f200 8090 	bhi.w	800d398 <_dtoa_r+0x2d8>
 800d278:	2b05      	cmp	r3, #5
 800d27a:	bfc4      	itt	gt
 800d27c:	3b04      	subgt	r3, #4
 800d27e:	9306      	strgt	r3, [sp, #24]
 800d280:	9b06      	ldr	r3, [sp, #24]
 800d282:	f1a3 0302 	sub.w	r3, r3, #2
 800d286:	bfcc      	ite	gt
 800d288:	2500      	movgt	r5, #0
 800d28a:	2501      	movle	r5, #1
 800d28c:	2b03      	cmp	r3, #3
 800d28e:	f200 808f 	bhi.w	800d3b0 <_dtoa_r+0x2f0>
 800d292:	e8df f003 	tbb	[pc, r3]
 800d296:	7f7d      	.short	0x7f7d
 800d298:	7131      	.short	0x7131
 800d29a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d29e:	441d      	add	r5, r3
 800d2a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d2a4:	2820      	cmp	r0, #32
 800d2a6:	dd13      	ble.n	800d2d0 <_dtoa_r+0x210>
 800d2a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d2ac:	9b00      	ldr	r3, [sp, #0]
 800d2ae:	fa08 f800 	lsl.w	r8, r8, r0
 800d2b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d2b6:	fa23 f000 	lsr.w	r0, r3, r0
 800d2ba:	ea48 0000 	orr.w	r0, r8, r0
 800d2be:	f7f3 f949 	bl	8000554 <__aeabi_ui2d>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	4682      	mov	sl, r0
 800d2c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d2ca:	3d01      	subs	r5, #1
 800d2cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800d2ce:	e772      	b.n	800d1b6 <_dtoa_r+0xf6>
 800d2d0:	9b00      	ldr	r3, [sp, #0]
 800d2d2:	f1c0 0020 	rsb	r0, r0, #32
 800d2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800d2da:	e7f0      	b.n	800d2be <_dtoa_r+0x1fe>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e7b1      	b.n	800d244 <_dtoa_r+0x184>
 800d2e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d2e2:	e7b0      	b.n	800d246 <_dtoa_r+0x186>
 800d2e4:	9b05      	ldr	r3, [sp, #20]
 800d2e6:	eba3 030a 	sub.w	r3, r3, sl
 800d2ea:	9305      	str	r3, [sp, #20]
 800d2ec:	f1ca 0300 	rsb	r3, sl, #0
 800d2f0:	9307      	str	r3, [sp, #28]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d2f6:	e7bb      	b.n	800d270 <_dtoa_r+0x1b0>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d2fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	dd59      	ble.n	800d3b6 <_dtoa_r+0x2f6>
 800d302:	9302      	str	r3, [sp, #8]
 800d304:	4699      	mov	r9, r3
 800d306:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d308:	2200      	movs	r2, #0
 800d30a:	6072      	str	r2, [r6, #4]
 800d30c:	2204      	movs	r2, #4
 800d30e:	f102 0014 	add.w	r0, r2, #20
 800d312:	4298      	cmp	r0, r3
 800d314:	6871      	ldr	r1, [r6, #4]
 800d316:	d953      	bls.n	800d3c0 <_dtoa_r+0x300>
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 fe7d 	bl	800e018 <_Balloc>
 800d31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d320:	6030      	str	r0, [r6, #0]
 800d322:	f1b9 0f0e 	cmp.w	r9, #14
 800d326:	f8d3 b000 	ldr.w	fp, [r3]
 800d32a:	f200 80e6 	bhi.w	800d4fa <_dtoa_r+0x43a>
 800d32e:	2d00      	cmp	r5, #0
 800d330:	f000 80e3 	beq.w	800d4fa <_dtoa_r+0x43a>
 800d334:	ed9d 7b00 	vldr	d7, [sp]
 800d338:	f1ba 0f00 	cmp.w	sl, #0
 800d33c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d340:	dd74      	ble.n	800d42c <_dtoa_r+0x36c>
 800d342:	4a2a      	ldr	r2, [pc, #168]	; (800d3ec <_dtoa_r+0x32c>)
 800d344:	f00a 030f 	and.w	r3, sl, #15
 800d348:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d34c:	ed93 7b00 	vldr	d7, [r3]
 800d350:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d354:	06f0      	lsls	r0, r6, #27
 800d356:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d35a:	d565      	bpl.n	800d428 <_dtoa_r+0x368>
 800d35c:	4b24      	ldr	r3, [pc, #144]	; (800d3f0 <_dtoa_r+0x330>)
 800d35e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d362:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d366:	f7f3 fa99 	bl	800089c <__aeabi_ddiv>
 800d36a:	e9cd 0100 	strd	r0, r1, [sp]
 800d36e:	f006 060f 	and.w	r6, r6, #15
 800d372:	2503      	movs	r5, #3
 800d374:	4f1e      	ldr	r7, [pc, #120]	; (800d3f0 <_dtoa_r+0x330>)
 800d376:	e04c      	b.n	800d412 <_dtoa_r+0x352>
 800d378:	2301      	movs	r3, #1
 800d37a:	930a      	str	r3, [sp, #40]	; 0x28
 800d37c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d37e:	4453      	add	r3, sl
 800d380:	f103 0901 	add.w	r9, r3, #1
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	464b      	mov	r3, r9
 800d388:	2b01      	cmp	r3, #1
 800d38a:	bfb8      	it	lt
 800d38c:	2301      	movlt	r3, #1
 800d38e:	e7ba      	b.n	800d306 <_dtoa_r+0x246>
 800d390:	2300      	movs	r3, #0
 800d392:	e7b2      	b.n	800d2fa <_dtoa_r+0x23a>
 800d394:	2300      	movs	r3, #0
 800d396:	e7f0      	b.n	800d37a <_dtoa_r+0x2ba>
 800d398:	2501      	movs	r5, #1
 800d39a:	2300      	movs	r3, #0
 800d39c:	9306      	str	r3, [sp, #24]
 800d39e:	950a      	str	r5, [sp, #40]	; 0x28
 800d3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3a4:	9302      	str	r3, [sp, #8]
 800d3a6:	4699      	mov	r9, r3
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2312      	movs	r3, #18
 800d3ac:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3ae:	e7aa      	b.n	800d306 <_dtoa_r+0x246>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800d3b4:	e7f4      	b.n	800d3a0 <_dtoa_r+0x2e0>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	9302      	str	r3, [sp, #8]
 800d3ba:	4699      	mov	r9, r3
 800d3bc:	461a      	mov	r2, r3
 800d3be:	e7f5      	b.n	800d3ac <_dtoa_r+0x2ec>
 800d3c0:	3101      	adds	r1, #1
 800d3c2:	6071      	str	r1, [r6, #4]
 800d3c4:	0052      	lsls	r2, r2, #1
 800d3c6:	e7a2      	b.n	800d30e <_dtoa_r+0x24e>
 800d3c8:	636f4361 	.word	0x636f4361
 800d3cc:	3fd287a7 	.word	0x3fd287a7
 800d3d0:	8b60c8b3 	.word	0x8b60c8b3
 800d3d4:	3fc68a28 	.word	0x3fc68a28
 800d3d8:	509f79fb 	.word	0x509f79fb
 800d3dc:	3fd34413 	.word	0x3fd34413
 800d3e0:	7ff00000 	.word	0x7ff00000
 800d3e4:	0800fa39 	.word	0x0800fa39
 800d3e8:	3ff80000 	.word	0x3ff80000
 800d3ec:	0800faf8 	.word	0x0800faf8
 800d3f0:	0800fad0 	.word	0x0800fad0
 800d3f4:	0800fa65 	.word	0x0800fa65
 800d3f8:	07f1      	lsls	r1, r6, #31
 800d3fa:	d508      	bpl.n	800d40e <_dtoa_r+0x34e>
 800d3fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d400:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d404:	f7f3 f920 	bl	8000648 <__aeabi_dmul>
 800d408:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d40c:	3501      	adds	r5, #1
 800d40e:	1076      	asrs	r6, r6, #1
 800d410:	3708      	adds	r7, #8
 800d412:	2e00      	cmp	r6, #0
 800d414:	d1f0      	bne.n	800d3f8 <_dtoa_r+0x338>
 800d416:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d41a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d41e:	f7f3 fa3d 	bl	800089c <__aeabi_ddiv>
 800d422:	e9cd 0100 	strd	r0, r1, [sp]
 800d426:	e01a      	b.n	800d45e <_dtoa_r+0x39e>
 800d428:	2502      	movs	r5, #2
 800d42a:	e7a3      	b.n	800d374 <_dtoa_r+0x2b4>
 800d42c:	f000 80a0 	beq.w	800d570 <_dtoa_r+0x4b0>
 800d430:	f1ca 0600 	rsb	r6, sl, #0
 800d434:	4b9f      	ldr	r3, [pc, #636]	; (800d6b4 <_dtoa_r+0x5f4>)
 800d436:	4fa0      	ldr	r7, [pc, #640]	; (800d6b8 <_dtoa_r+0x5f8>)
 800d438:	f006 020f 	and.w	r2, r6, #15
 800d43c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d444:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d448:	f7f3 f8fe 	bl	8000648 <__aeabi_dmul>
 800d44c:	e9cd 0100 	strd	r0, r1, [sp]
 800d450:	1136      	asrs	r6, r6, #4
 800d452:	2300      	movs	r3, #0
 800d454:	2502      	movs	r5, #2
 800d456:	2e00      	cmp	r6, #0
 800d458:	d17f      	bne.n	800d55a <_dtoa_r+0x49a>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d1e1      	bne.n	800d422 <_dtoa_r+0x362>
 800d45e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d460:	2b00      	cmp	r3, #0
 800d462:	f000 8087 	beq.w	800d574 <_dtoa_r+0x4b4>
 800d466:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d46a:	2200      	movs	r2, #0
 800d46c:	4b93      	ldr	r3, [pc, #588]	; (800d6bc <_dtoa_r+0x5fc>)
 800d46e:	4630      	mov	r0, r6
 800d470:	4639      	mov	r1, r7
 800d472:	f7f3 fb5b 	bl	8000b2c <__aeabi_dcmplt>
 800d476:	2800      	cmp	r0, #0
 800d478:	d07c      	beq.n	800d574 <_dtoa_r+0x4b4>
 800d47a:	f1b9 0f00 	cmp.w	r9, #0
 800d47e:	d079      	beq.n	800d574 <_dtoa_r+0x4b4>
 800d480:	9b02      	ldr	r3, [sp, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	dd35      	ble.n	800d4f2 <_dtoa_r+0x432>
 800d486:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d48a:	9308      	str	r3, [sp, #32]
 800d48c:	4639      	mov	r1, r7
 800d48e:	2200      	movs	r2, #0
 800d490:	4b8b      	ldr	r3, [pc, #556]	; (800d6c0 <_dtoa_r+0x600>)
 800d492:	4630      	mov	r0, r6
 800d494:	f7f3 f8d8 	bl	8000648 <__aeabi_dmul>
 800d498:	e9cd 0100 	strd	r0, r1, [sp]
 800d49c:	9f02      	ldr	r7, [sp, #8]
 800d49e:	3501      	adds	r5, #1
 800d4a0:	4628      	mov	r0, r5
 800d4a2:	f7f3 f867 	bl	8000574 <__aeabi_i2d>
 800d4a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4aa:	f7f3 f8cd 	bl	8000648 <__aeabi_dmul>
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	4b84      	ldr	r3, [pc, #528]	; (800d6c4 <_dtoa_r+0x604>)
 800d4b2:	f7f2 ff13 	bl	80002dc <__adddf3>
 800d4b6:	4605      	mov	r5, r0
 800d4b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d4bc:	2f00      	cmp	r7, #0
 800d4be:	d15d      	bne.n	800d57c <_dtoa_r+0x4bc>
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	4b81      	ldr	r3, [pc, #516]	; (800d6c8 <_dtoa_r+0x608>)
 800d4c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4c8:	f7f2 ff06 	bl	80002d8 <__aeabi_dsub>
 800d4cc:	462a      	mov	r2, r5
 800d4ce:	4633      	mov	r3, r6
 800d4d0:	e9cd 0100 	strd	r0, r1, [sp]
 800d4d4:	f7f3 fb48 	bl	8000b68 <__aeabi_dcmpgt>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	f040 8288 	bne.w	800d9ee <_dtoa_r+0x92e>
 800d4de:	462a      	mov	r2, r5
 800d4e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d4e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d4e8:	f7f3 fb20 	bl	8000b2c <__aeabi_dcmplt>
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	f040 827c 	bne.w	800d9ea <_dtoa_r+0x92a>
 800d4f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d4f6:	e9cd 2300 	strd	r2, r3, [sp]
 800d4fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f2c0 8150 	blt.w	800d7a2 <_dtoa_r+0x6e2>
 800d502:	f1ba 0f0e 	cmp.w	sl, #14
 800d506:	f300 814c 	bgt.w	800d7a2 <_dtoa_r+0x6e2>
 800d50a:	4b6a      	ldr	r3, [pc, #424]	; (800d6b4 <_dtoa_r+0x5f4>)
 800d50c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d510:	ed93 7b00 	vldr	d7, [r3]
 800d514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d516:	2b00      	cmp	r3, #0
 800d518:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d51c:	f280 80d8 	bge.w	800d6d0 <_dtoa_r+0x610>
 800d520:	f1b9 0f00 	cmp.w	r9, #0
 800d524:	f300 80d4 	bgt.w	800d6d0 <_dtoa_r+0x610>
 800d528:	f040 825e 	bne.w	800d9e8 <_dtoa_r+0x928>
 800d52c:	2200      	movs	r2, #0
 800d52e:	4b66      	ldr	r3, [pc, #408]	; (800d6c8 <_dtoa_r+0x608>)
 800d530:	ec51 0b17 	vmov	r0, r1, d7
 800d534:	f7f3 f888 	bl	8000648 <__aeabi_dmul>
 800d538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d53c:	f7f3 fb0a 	bl	8000b54 <__aeabi_dcmpge>
 800d540:	464f      	mov	r7, r9
 800d542:	464e      	mov	r6, r9
 800d544:	2800      	cmp	r0, #0
 800d546:	f040 8234 	bne.w	800d9b2 <_dtoa_r+0x8f2>
 800d54a:	2331      	movs	r3, #49	; 0x31
 800d54c:	f10b 0501 	add.w	r5, fp, #1
 800d550:	f88b 3000 	strb.w	r3, [fp]
 800d554:	f10a 0a01 	add.w	sl, sl, #1
 800d558:	e22f      	b.n	800d9ba <_dtoa_r+0x8fa>
 800d55a:	07f2      	lsls	r2, r6, #31
 800d55c:	d505      	bpl.n	800d56a <_dtoa_r+0x4aa>
 800d55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d562:	f7f3 f871 	bl	8000648 <__aeabi_dmul>
 800d566:	3501      	adds	r5, #1
 800d568:	2301      	movs	r3, #1
 800d56a:	1076      	asrs	r6, r6, #1
 800d56c:	3708      	adds	r7, #8
 800d56e:	e772      	b.n	800d456 <_dtoa_r+0x396>
 800d570:	2502      	movs	r5, #2
 800d572:	e774      	b.n	800d45e <_dtoa_r+0x39e>
 800d574:	f8cd a020 	str.w	sl, [sp, #32]
 800d578:	464f      	mov	r7, r9
 800d57a:	e791      	b.n	800d4a0 <_dtoa_r+0x3e0>
 800d57c:	4b4d      	ldr	r3, [pc, #308]	; (800d6b4 <_dtoa_r+0x5f4>)
 800d57e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d582:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d047      	beq.n	800d61c <_dtoa_r+0x55c>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	2000      	movs	r0, #0
 800d592:	494e      	ldr	r1, [pc, #312]	; (800d6cc <_dtoa_r+0x60c>)
 800d594:	f7f3 f982 	bl	800089c <__aeabi_ddiv>
 800d598:	462a      	mov	r2, r5
 800d59a:	4633      	mov	r3, r6
 800d59c:	f7f2 fe9c 	bl	80002d8 <__aeabi_dsub>
 800d5a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d5a4:	465d      	mov	r5, fp
 800d5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5aa:	f7f3 fafd 	bl	8000ba8 <__aeabi_d2iz>
 800d5ae:	4606      	mov	r6, r0
 800d5b0:	f7f2 ffe0 	bl	8000574 <__aeabi_i2d>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5bc:	f7f2 fe8c 	bl	80002d8 <__aeabi_dsub>
 800d5c0:	3630      	adds	r6, #48	; 0x30
 800d5c2:	f805 6b01 	strb.w	r6, [r5], #1
 800d5c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d5ca:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ce:	f7f3 faad 	bl	8000b2c <__aeabi_dcmplt>
 800d5d2:	2800      	cmp	r0, #0
 800d5d4:	d163      	bne.n	800d69e <_dtoa_r+0x5de>
 800d5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5da:	2000      	movs	r0, #0
 800d5dc:	4937      	ldr	r1, [pc, #220]	; (800d6bc <_dtoa_r+0x5fc>)
 800d5de:	f7f2 fe7b 	bl	80002d8 <__aeabi_dsub>
 800d5e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d5e6:	f7f3 faa1 	bl	8000b2c <__aeabi_dcmplt>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f040 80b7 	bne.w	800d75e <_dtoa_r+0x69e>
 800d5f0:	eba5 030b 	sub.w	r3, r5, fp
 800d5f4:	429f      	cmp	r7, r3
 800d5f6:	f77f af7c 	ble.w	800d4f2 <_dtoa_r+0x432>
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	4b30      	ldr	r3, [pc, #192]	; (800d6c0 <_dtoa_r+0x600>)
 800d5fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d602:	f7f3 f821 	bl	8000648 <__aeabi_dmul>
 800d606:	2200      	movs	r2, #0
 800d608:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d60c:	4b2c      	ldr	r3, [pc, #176]	; (800d6c0 <_dtoa_r+0x600>)
 800d60e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d612:	f7f3 f819 	bl	8000648 <__aeabi_dmul>
 800d616:	e9cd 0100 	strd	r0, r1, [sp]
 800d61a:	e7c4      	b.n	800d5a6 <_dtoa_r+0x4e6>
 800d61c:	462a      	mov	r2, r5
 800d61e:	4633      	mov	r3, r6
 800d620:	f7f3 f812 	bl	8000648 <__aeabi_dmul>
 800d624:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d628:	eb0b 0507 	add.w	r5, fp, r7
 800d62c:	465e      	mov	r6, fp
 800d62e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d632:	f7f3 fab9 	bl	8000ba8 <__aeabi_d2iz>
 800d636:	4607      	mov	r7, r0
 800d638:	f7f2 ff9c 	bl	8000574 <__aeabi_i2d>
 800d63c:	3730      	adds	r7, #48	; 0x30
 800d63e:	4602      	mov	r2, r0
 800d640:	460b      	mov	r3, r1
 800d642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d646:	f7f2 fe47 	bl	80002d8 <__aeabi_dsub>
 800d64a:	f806 7b01 	strb.w	r7, [r6], #1
 800d64e:	42ae      	cmp	r6, r5
 800d650:	e9cd 0100 	strd	r0, r1, [sp]
 800d654:	f04f 0200 	mov.w	r2, #0
 800d658:	d126      	bne.n	800d6a8 <_dtoa_r+0x5e8>
 800d65a:	4b1c      	ldr	r3, [pc, #112]	; (800d6cc <_dtoa_r+0x60c>)
 800d65c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d660:	f7f2 fe3c 	bl	80002dc <__adddf3>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d66c:	f7f3 fa7c 	bl	8000b68 <__aeabi_dcmpgt>
 800d670:	2800      	cmp	r0, #0
 800d672:	d174      	bne.n	800d75e <_dtoa_r+0x69e>
 800d674:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d678:	2000      	movs	r0, #0
 800d67a:	4914      	ldr	r1, [pc, #80]	; (800d6cc <_dtoa_r+0x60c>)
 800d67c:	f7f2 fe2c 	bl	80002d8 <__aeabi_dsub>
 800d680:	4602      	mov	r2, r0
 800d682:	460b      	mov	r3, r1
 800d684:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d688:	f7f3 fa50 	bl	8000b2c <__aeabi_dcmplt>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	f43f af30 	beq.w	800d4f2 <_dtoa_r+0x432>
 800d692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d696:	2b30      	cmp	r3, #48	; 0x30
 800d698:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d69c:	d002      	beq.n	800d6a4 <_dtoa_r+0x5e4>
 800d69e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d6a2:	e04a      	b.n	800d73a <_dtoa_r+0x67a>
 800d6a4:	4615      	mov	r5, r2
 800d6a6:	e7f4      	b.n	800d692 <_dtoa_r+0x5d2>
 800d6a8:	4b05      	ldr	r3, [pc, #20]	; (800d6c0 <_dtoa_r+0x600>)
 800d6aa:	f7f2 ffcd 	bl	8000648 <__aeabi_dmul>
 800d6ae:	e9cd 0100 	strd	r0, r1, [sp]
 800d6b2:	e7bc      	b.n	800d62e <_dtoa_r+0x56e>
 800d6b4:	0800faf8 	.word	0x0800faf8
 800d6b8:	0800fad0 	.word	0x0800fad0
 800d6bc:	3ff00000 	.word	0x3ff00000
 800d6c0:	40240000 	.word	0x40240000
 800d6c4:	401c0000 	.word	0x401c0000
 800d6c8:	40140000 	.word	0x40140000
 800d6cc:	3fe00000 	.word	0x3fe00000
 800d6d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d6d4:	465d      	mov	r5, fp
 800d6d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f3 f8dd 	bl	800089c <__aeabi_ddiv>
 800d6e2:	f7f3 fa61 	bl	8000ba8 <__aeabi_d2iz>
 800d6e6:	4680      	mov	r8, r0
 800d6e8:	f7f2 ff44 	bl	8000574 <__aeabi_i2d>
 800d6ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6f0:	f7f2 ffaa 	bl	8000648 <__aeabi_dmul>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d700:	f7f2 fdea 	bl	80002d8 <__aeabi_dsub>
 800d704:	f805 6b01 	strb.w	r6, [r5], #1
 800d708:	eba5 060b 	sub.w	r6, r5, fp
 800d70c:	45b1      	cmp	r9, r6
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	d139      	bne.n	800d788 <_dtoa_r+0x6c8>
 800d714:	f7f2 fde2 	bl	80002dc <__adddf3>
 800d718:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	f7f3 fa22 	bl	8000b68 <__aeabi_dcmpgt>
 800d724:	b9c8      	cbnz	r0, 800d75a <_dtoa_r+0x69a>
 800d726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d72a:	4630      	mov	r0, r6
 800d72c:	4639      	mov	r1, r7
 800d72e:	f7f3 f9f3 	bl	8000b18 <__aeabi_dcmpeq>
 800d732:	b110      	cbz	r0, 800d73a <_dtoa_r+0x67a>
 800d734:	f018 0f01 	tst.w	r8, #1
 800d738:	d10f      	bne.n	800d75a <_dtoa_r+0x69a>
 800d73a:	9904      	ldr	r1, [sp, #16]
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 fc9f 	bl	800e080 <_Bfree>
 800d742:	2300      	movs	r3, #0
 800d744:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d746:	702b      	strb	r3, [r5, #0]
 800d748:	f10a 0301 	add.w	r3, sl, #1
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 8241 	beq.w	800dbd8 <_dtoa_r+0xb18>
 800d756:	601d      	str	r5, [r3, #0]
 800d758:	e23e      	b.n	800dbd8 <_dtoa_r+0xb18>
 800d75a:	f8cd a020 	str.w	sl, [sp, #32]
 800d75e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d762:	2a39      	cmp	r2, #57	; 0x39
 800d764:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d768:	d108      	bne.n	800d77c <_dtoa_r+0x6bc>
 800d76a:	459b      	cmp	fp, r3
 800d76c:	d10a      	bne.n	800d784 <_dtoa_r+0x6c4>
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	3301      	adds	r3, #1
 800d772:	9308      	str	r3, [sp, #32]
 800d774:	2330      	movs	r3, #48	; 0x30
 800d776:	f88b 3000 	strb.w	r3, [fp]
 800d77a:	465b      	mov	r3, fp
 800d77c:	781a      	ldrb	r2, [r3, #0]
 800d77e:	3201      	adds	r2, #1
 800d780:	701a      	strb	r2, [r3, #0]
 800d782:	e78c      	b.n	800d69e <_dtoa_r+0x5de>
 800d784:	461d      	mov	r5, r3
 800d786:	e7ea      	b.n	800d75e <_dtoa_r+0x69e>
 800d788:	2200      	movs	r2, #0
 800d78a:	4b9b      	ldr	r3, [pc, #620]	; (800d9f8 <_dtoa_r+0x938>)
 800d78c:	f7f2 ff5c 	bl	8000648 <__aeabi_dmul>
 800d790:	2200      	movs	r2, #0
 800d792:	2300      	movs	r3, #0
 800d794:	4606      	mov	r6, r0
 800d796:	460f      	mov	r7, r1
 800d798:	f7f3 f9be 	bl	8000b18 <__aeabi_dcmpeq>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d09a      	beq.n	800d6d6 <_dtoa_r+0x616>
 800d7a0:	e7cb      	b.n	800d73a <_dtoa_r+0x67a>
 800d7a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7a4:	2a00      	cmp	r2, #0
 800d7a6:	f000 808b 	beq.w	800d8c0 <_dtoa_r+0x800>
 800d7aa:	9a06      	ldr	r2, [sp, #24]
 800d7ac:	2a01      	cmp	r2, #1
 800d7ae:	dc6e      	bgt.n	800d88e <_dtoa_r+0x7ce>
 800d7b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d7b2:	2a00      	cmp	r2, #0
 800d7b4:	d067      	beq.n	800d886 <_dtoa_r+0x7c6>
 800d7b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d7ba:	9f07      	ldr	r7, [sp, #28]
 800d7bc:	9d05      	ldr	r5, [sp, #20]
 800d7be:	9a05      	ldr	r2, [sp, #20]
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	441a      	add	r2, r3
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	9205      	str	r2, [sp, #20]
 800d7c8:	4498      	add	r8, r3
 800d7ca:	f000 fcf9 	bl	800e1c0 <__i2b>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	dd0c      	ble.n	800d7ee <_dtoa_r+0x72e>
 800d7d4:	f1b8 0f00 	cmp.w	r8, #0
 800d7d8:	dd09      	ble.n	800d7ee <_dtoa_r+0x72e>
 800d7da:	4545      	cmp	r5, r8
 800d7dc:	9a05      	ldr	r2, [sp, #20]
 800d7de:	462b      	mov	r3, r5
 800d7e0:	bfa8      	it	ge
 800d7e2:	4643      	movge	r3, r8
 800d7e4:	1ad2      	subs	r2, r2, r3
 800d7e6:	9205      	str	r2, [sp, #20]
 800d7e8:	1aed      	subs	r5, r5, r3
 800d7ea:	eba8 0803 	sub.w	r8, r8, r3
 800d7ee:	9b07      	ldr	r3, [sp, #28]
 800d7f0:	b1eb      	cbz	r3, 800d82e <_dtoa_r+0x76e>
 800d7f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d067      	beq.n	800d8c8 <_dtoa_r+0x808>
 800d7f8:	b18f      	cbz	r7, 800d81e <_dtoa_r+0x75e>
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	4620      	mov	r0, r4
 800d800:	f000 fd7e 	bl	800e300 <__pow5mult>
 800d804:	9a04      	ldr	r2, [sp, #16]
 800d806:	4601      	mov	r1, r0
 800d808:	4606      	mov	r6, r0
 800d80a:	4620      	mov	r0, r4
 800d80c:	f000 fce1 	bl	800e1d2 <__multiply>
 800d810:	9904      	ldr	r1, [sp, #16]
 800d812:	9008      	str	r0, [sp, #32]
 800d814:	4620      	mov	r0, r4
 800d816:	f000 fc33 	bl	800e080 <_Bfree>
 800d81a:	9b08      	ldr	r3, [sp, #32]
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	9b07      	ldr	r3, [sp, #28]
 800d820:	1bda      	subs	r2, r3, r7
 800d822:	d004      	beq.n	800d82e <_dtoa_r+0x76e>
 800d824:	9904      	ldr	r1, [sp, #16]
 800d826:	4620      	mov	r0, r4
 800d828:	f000 fd6a 	bl	800e300 <__pow5mult>
 800d82c:	9004      	str	r0, [sp, #16]
 800d82e:	2101      	movs	r1, #1
 800d830:	4620      	mov	r0, r4
 800d832:	f000 fcc5 	bl	800e1c0 <__i2b>
 800d836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d838:	4607      	mov	r7, r0
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f000 81d0 	beq.w	800dbe0 <_dtoa_r+0xb20>
 800d840:	461a      	mov	r2, r3
 800d842:	4601      	mov	r1, r0
 800d844:	4620      	mov	r0, r4
 800d846:	f000 fd5b 	bl	800e300 <__pow5mult>
 800d84a:	9b06      	ldr	r3, [sp, #24]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	4607      	mov	r7, r0
 800d850:	dc40      	bgt.n	800d8d4 <_dtoa_r+0x814>
 800d852:	9b00      	ldr	r3, [sp, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d139      	bne.n	800d8cc <_dtoa_r+0x80c>
 800d858:	9b01      	ldr	r3, [sp, #4]
 800d85a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d136      	bne.n	800d8d0 <_dtoa_r+0x810>
 800d862:	9b01      	ldr	r3, [sp, #4]
 800d864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d868:	0d1b      	lsrs	r3, r3, #20
 800d86a:	051b      	lsls	r3, r3, #20
 800d86c:	b12b      	cbz	r3, 800d87a <_dtoa_r+0x7ba>
 800d86e:	9b05      	ldr	r3, [sp, #20]
 800d870:	3301      	adds	r3, #1
 800d872:	9305      	str	r3, [sp, #20]
 800d874:	f108 0801 	add.w	r8, r8, #1
 800d878:	2301      	movs	r3, #1
 800d87a:	9307      	str	r3, [sp, #28]
 800d87c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d12a      	bne.n	800d8d8 <_dtoa_r+0x818>
 800d882:	2001      	movs	r0, #1
 800d884:	e030      	b.n	800d8e8 <_dtoa_r+0x828>
 800d886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d888:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d88c:	e795      	b.n	800d7ba <_dtoa_r+0x6fa>
 800d88e:	9b07      	ldr	r3, [sp, #28]
 800d890:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d894:	42bb      	cmp	r3, r7
 800d896:	bfbf      	itttt	lt
 800d898:	9b07      	ldrlt	r3, [sp, #28]
 800d89a:	9707      	strlt	r7, [sp, #28]
 800d89c:	1afa      	sublt	r2, r7, r3
 800d89e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d8a0:	bfbb      	ittet	lt
 800d8a2:	189b      	addlt	r3, r3, r2
 800d8a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d8a6:	1bdf      	subge	r7, r3, r7
 800d8a8:	2700      	movlt	r7, #0
 800d8aa:	f1b9 0f00 	cmp.w	r9, #0
 800d8ae:	bfb5      	itete	lt
 800d8b0:	9b05      	ldrlt	r3, [sp, #20]
 800d8b2:	9d05      	ldrge	r5, [sp, #20]
 800d8b4:	eba3 0509 	sublt.w	r5, r3, r9
 800d8b8:	464b      	movge	r3, r9
 800d8ba:	bfb8      	it	lt
 800d8bc:	2300      	movlt	r3, #0
 800d8be:	e77e      	b.n	800d7be <_dtoa_r+0x6fe>
 800d8c0:	9f07      	ldr	r7, [sp, #28]
 800d8c2:	9d05      	ldr	r5, [sp, #20]
 800d8c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d8c6:	e783      	b.n	800d7d0 <_dtoa_r+0x710>
 800d8c8:	9a07      	ldr	r2, [sp, #28]
 800d8ca:	e7ab      	b.n	800d824 <_dtoa_r+0x764>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	e7d4      	b.n	800d87a <_dtoa_r+0x7ba>
 800d8d0:	9b00      	ldr	r3, [sp, #0]
 800d8d2:	e7d2      	b.n	800d87a <_dtoa_r+0x7ba>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	9307      	str	r3, [sp, #28]
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d8de:	6918      	ldr	r0, [r3, #16]
 800d8e0:	f000 fc20 	bl	800e124 <__hi0bits>
 800d8e4:	f1c0 0020 	rsb	r0, r0, #32
 800d8e8:	4440      	add	r0, r8
 800d8ea:	f010 001f 	ands.w	r0, r0, #31
 800d8ee:	d047      	beq.n	800d980 <_dtoa_r+0x8c0>
 800d8f0:	f1c0 0320 	rsb	r3, r0, #32
 800d8f4:	2b04      	cmp	r3, #4
 800d8f6:	dd3b      	ble.n	800d970 <_dtoa_r+0x8b0>
 800d8f8:	9b05      	ldr	r3, [sp, #20]
 800d8fa:	f1c0 001c 	rsb	r0, r0, #28
 800d8fe:	4403      	add	r3, r0
 800d900:	9305      	str	r3, [sp, #20]
 800d902:	4405      	add	r5, r0
 800d904:	4480      	add	r8, r0
 800d906:	9b05      	ldr	r3, [sp, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	dd05      	ble.n	800d918 <_dtoa_r+0x858>
 800d90c:	461a      	mov	r2, r3
 800d90e:	9904      	ldr	r1, [sp, #16]
 800d910:	4620      	mov	r0, r4
 800d912:	f000 fd43 	bl	800e39c <__lshift>
 800d916:	9004      	str	r0, [sp, #16]
 800d918:	f1b8 0f00 	cmp.w	r8, #0
 800d91c:	dd05      	ble.n	800d92a <_dtoa_r+0x86a>
 800d91e:	4639      	mov	r1, r7
 800d920:	4642      	mov	r2, r8
 800d922:	4620      	mov	r0, r4
 800d924:	f000 fd3a 	bl	800e39c <__lshift>
 800d928:	4607      	mov	r7, r0
 800d92a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d92c:	b353      	cbz	r3, 800d984 <_dtoa_r+0x8c4>
 800d92e:	4639      	mov	r1, r7
 800d930:	9804      	ldr	r0, [sp, #16]
 800d932:	f000 fd87 	bl	800e444 <__mcmp>
 800d936:	2800      	cmp	r0, #0
 800d938:	da24      	bge.n	800d984 <_dtoa_r+0x8c4>
 800d93a:	2300      	movs	r3, #0
 800d93c:	220a      	movs	r2, #10
 800d93e:	9904      	ldr	r1, [sp, #16]
 800d940:	4620      	mov	r0, r4
 800d942:	f000 fbb4 	bl	800e0ae <__multadd>
 800d946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d948:	9004      	str	r0, [sp, #16]
 800d94a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 814d 	beq.w	800dbee <_dtoa_r+0xb2e>
 800d954:	2300      	movs	r3, #0
 800d956:	4631      	mov	r1, r6
 800d958:	220a      	movs	r2, #10
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 fba7 	bl	800e0ae <__multadd>
 800d960:	9b02      	ldr	r3, [sp, #8]
 800d962:	2b00      	cmp	r3, #0
 800d964:	4606      	mov	r6, r0
 800d966:	dc4f      	bgt.n	800da08 <_dtoa_r+0x948>
 800d968:	9b06      	ldr	r3, [sp, #24]
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	dd4c      	ble.n	800da08 <_dtoa_r+0x948>
 800d96e:	e011      	b.n	800d994 <_dtoa_r+0x8d4>
 800d970:	d0c9      	beq.n	800d906 <_dtoa_r+0x846>
 800d972:	9a05      	ldr	r2, [sp, #20]
 800d974:	331c      	adds	r3, #28
 800d976:	441a      	add	r2, r3
 800d978:	9205      	str	r2, [sp, #20]
 800d97a:	441d      	add	r5, r3
 800d97c:	4498      	add	r8, r3
 800d97e:	e7c2      	b.n	800d906 <_dtoa_r+0x846>
 800d980:	4603      	mov	r3, r0
 800d982:	e7f6      	b.n	800d972 <_dtoa_r+0x8b2>
 800d984:	f1b9 0f00 	cmp.w	r9, #0
 800d988:	dc38      	bgt.n	800d9fc <_dtoa_r+0x93c>
 800d98a:	9b06      	ldr	r3, [sp, #24]
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	dd35      	ble.n	800d9fc <_dtoa_r+0x93c>
 800d990:	f8cd 9008 	str.w	r9, [sp, #8]
 800d994:	9b02      	ldr	r3, [sp, #8]
 800d996:	b963      	cbnz	r3, 800d9b2 <_dtoa_r+0x8f2>
 800d998:	4639      	mov	r1, r7
 800d99a:	2205      	movs	r2, #5
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 fb86 	bl	800e0ae <__multadd>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4607      	mov	r7, r0
 800d9a6:	9804      	ldr	r0, [sp, #16]
 800d9a8:	f000 fd4c 	bl	800e444 <__mcmp>
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	f73f adcc 	bgt.w	800d54a <_dtoa_r+0x48a>
 800d9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9b4:	465d      	mov	r5, fp
 800d9b6:	ea6f 0a03 	mvn.w	sl, r3
 800d9ba:	f04f 0900 	mov.w	r9, #0
 800d9be:	4639      	mov	r1, r7
 800d9c0:	4620      	mov	r0, r4
 800d9c2:	f000 fb5d 	bl	800e080 <_Bfree>
 800d9c6:	2e00      	cmp	r6, #0
 800d9c8:	f43f aeb7 	beq.w	800d73a <_dtoa_r+0x67a>
 800d9cc:	f1b9 0f00 	cmp.w	r9, #0
 800d9d0:	d005      	beq.n	800d9de <_dtoa_r+0x91e>
 800d9d2:	45b1      	cmp	r9, r6
 800d9d4:	d003      	beq.n	800d9de <_dtoa_r+0x91e>
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f000 fb51 	bl	800e080 <_Bfree>
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f000 fb4d 	bl	800e080 <_Bfree>
 800d9e6:	e6a8      	b.n	800d73a <_dtoa_r+0x67a>
 800d9e8:	2700      	movs	r7, #0
 800d9ea:	463e      	mov	r6, r7
 800d9ec:	e7e1      	b.n	800d9b2 <_dtoa_r+0x8f2>
 800d9ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d9f2:	463e      	mov	r6, r7
 800d9f4:	e5a9      	b.n	800d54a <_dtoa_r+0x48a>
 800d9f6:	bf00      	nop
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	f000 80fa 	beq.w	800dbfc <_dtoa_r+0xb3c>
 800da08:	2d00      	cmp	r5, #0
 800da0a:	dd05      	ble.n	800da18 <_dtoa_r+0x958>
 800da0c:	4631      	mov	r1, r6
 800da0e:	462a      	mov	r2, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f000 fcc3 	bl	800e39c <__lshift>
 800da16:	4606      	mov	r6, r0
 800da18:	9b07      	ldr	r3, [sp, #28]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d04c      	beq.n	800dab8 <_dtoa_r+0x9f8>
 800da1e:	6871      	ldr	r1, [r6, #4]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 faf9 	bl	800e018 <_Balloc>
 800da26:	6932      	ldr	r2, [r6, #16]
 800da28:	3202      	adds	r2, #2
 800da2a:	4605      	mov	r5, r0
 800da2c:	0092      	lsls	r2, r2, #2
 800da2e:	f106 010c 	add.w	r1, r6, #12
 800da32:	300c      	adds	r0, #12
 800da34:	f7fe fcc6 	bl	800c3c4 <memcpy>
 800da38:	2201      	movs	r2, #1
 800da3a:	4629      	mov	r1, r5
 800da3c:	4620      	mov	r0, r4
 800da3e:	f000 fcad 	bl	800e39c <__lshift>
 800da42:	9b00      	ldr	r3, [sp, #0]
 800da44:	f8cd b014 	str.w	fp, [sp, #20]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	46b1      	mov	r9, r6
 800da4e:	9307      	str	r3, [sp, #28]
 800da50:	4606      	mov	r6, r0
 800da52:	4639      	mov	r1, r7
 800da54:	9804      	ldr	r0, [sp, #16]
 800da56:	f7ff faa5 	bl	800cfa4 <quorem>
 800da5a:	4649      	mov	r1, r9
 800da5c:	4605      	mov	r5, r0
 800da5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800da62:	9804      	ldr	r0, [sp, #16]
 800da64:	f000 fcee 	bl	800e444 <__mcmp>
 800da68:	4632      	mov	r2, r6
 800da6a:	9000      	str	r0, [sp, #0]
 800da6c:	4639      	mov	r1, r7
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fd02 	bl	800e478 <__mdiff>
 800da74:	68c3      	ldr	r3, [r0, #12]
 800da76:	4602      	mov	r2, r0
 800da78:	bb03      	cbnz	r3, 800dabc <_dtoa_r+0x9fc>
 800da7a:	4601      	mov	r1, r0
 800da7c:	9008      	str	r0, [sp, #32]
 800da7e:	9804      	ldr	r0, [sp, #16]
 800da80:	f000 fce0 	bl	800e444 <__mcmp>
 800da84:	9a08      	ldr	r2, [sp, #32]
 800da86:	4603      	mov	r3, r0
 800da88:	4611      	mov	r1, r2
 800da8a:	4620      	mov	r0, r4
 800da8c:	9308      	str	r3, [sp, #32]
 800da8e:	f000 faf7 	bl	800e080 <_Bfree>
 800da92:	9b08      	ldr	r3, [sp, #32]
 800da94:	b9a3      	cbnz	r3, 800dac0 <_dtoa_r+0xa00>
 800da96:	9a06      	ldr	r2, [sp, #24]
 800da98:	b992      	cbnz	r2, 800dac0 <_dtoa_r+0xa00>
 800da9a:	9a07      	ldr	r2, [sp, #28]
 800da9c:	b982      	cbnz	r2, 800dac0 <_dtoa_r+0xa00>
 800da9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800daa2:	d029      	beq.n	800daf8 <_dtoa_r+0xa38>
 800daa4:	9b00      	ldr	r3, [sp, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	dd01      	ble.n	800daae <_dtoa_r+0x9ee>
 800daaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800daae:	9b05      	ldr	r3, [sp, #20]
 800dab0:	1c5d      	adds	r5, r3, #1
 800dab2:	f883 8000 	strb.w	r8, [r3]
 800dab6:	e782      	b.n	800d9be <_dtoa_r+0x8fe>
 800dab8:	4630      	mov	r0, r6
 800daba:	e7c2      	b.n	800da42 <_dtoa_r+0x982>
 800dabc:	2301      	movs	r3, #1
 800dabe:	e7e3      	b.n	800da88 <_dtoa_r+0x9c8>
 800dac0:	9a00      	ldr	r2, [sp, #0]
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	db04      	blt.n	800dad0 <_dtoa_r+0xa10>
 800dac6:	d125      	bne.n	800db14 <_dtoa_r+0xa54>
 800dac8:	9a06      	ldr	r2, [sp, #24]
 800daca:	bb1a      	cbnz	r2, 800db14 <_dtoa_r+0xa54>
 800dacc:	9a07      	ldr	r2, [sp, #28]
 800dace:	bb0a      	cbnz	r2, 800db14 <_dtoa_r+0xa54>
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	ddec      	ble.n	800daae <_dtoa_r+0x9ee>
 800dad4:	2201      	movs	r2, #1
 800dad6:	9904      	ldr	r1, [sp, #16]
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 fc5f 	bl	800e39c <__lshift>
 800dade:	4639      	mov	r1, r7
 800dae0:	9004      	str	r0, [sp, #16]
 800dae2:	f000 fcaf 	bl	800e444 <__mcmp>
 800dae6:	2800      	cmp	r0, #0
 800dae8:	dc03      	bgt.n	800daf2 <_dtoa_r+0xa32>
 800daea:	d1e0      	bne.n	800daae <_dtoa_r+0x9ee>
 800daec:	f018 0f01 	tst.w	r8, #1
 800daf0:	d0dd      	beq.n	800daae <_dtoa_r+0x9ee>
 800daf2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800daf6:	d1d8      	bne.n	800daaa <_dtoa_r+0x9ea>
 800daf8:	9b05      	ldr	r3, [sp, #20]
 800dafa:	9a05      	ldr	r2, [sp, #20]
 800dafc:	1c5d      	adds	r5, r3, #1
 800dafe:	2339      	movs	r3, #57	; 0x39
 800db00:	7013      	strb	r3, [r2, #0]
 800db02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800db06:	2b39      	cmp	r3, #57	; 0x39
 800db08:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800db0c:	d04f      	beq.n	800dbae <_dtoa_r+0xaee>
 800db0e:	3301      	adds	r3, #1
 800db10:	7013      	strb	r3, [r2, #0]
 800db12:	e754      	b.n	800d9be <_dtoa_r+0x8fe>
 800db14:	9a05      	ldr	r2, [sp, #20]
 800db16:	2b00      	cmp	r3, #0
 800db18:	f102 0501 	add.w	r5, r2, #1
 800db1c:	dd06      	ble.n	800db2c <_dtoa_r+0xa6c>
 800db1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800db22:	d0e9      	beq.n	800daf8 <_dtoa_r+0xa38>
 800db24:	f108 0801 	add.w	r8, r8, #1
 800db28:	9b05      	ldr	r3, [sp, #20]
 800db2a:	e7c2      	b.n	800dab2 <_dtoa_r+0x9f2>
 800db2c:	9a02      	ldr	r2, [sp, #8]
 800db2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800db32:	eba5 030b 	sub.w	r3, r5, fp
 800db36:	4293      	cmp	r3, r2
 800db38:	d021      	beq.n	800db7e <_dtoa_r+0xabe>
 800db3a:	2300      	movs	r3, #0
 800db3c:	220a      	movs	r2, #10
 800db3e:	9904      	ldr	r1, [sp, #16]
 800db40:	4620      	mov	r0, r4
 800db42:	f000 fab4 	bl	800e0ae <__multadd>
 800db46:	45b1      	cmp	r9, r6
 800db48:	9004      	str	r0, [sp, #16]
 800db4a:	f04f 0300 	mov.w	r3, #0
 800db4e:	f04f 020a 	mov.w	r2, #10
 800db52:	4649      	mov	r1, r9
 800db54:	4620      	mov	r0, r4
 800db56:	d105      	bne.n	800db64 <_dtoa_r+0xaa4>
 800db58:	f000 faa9 	bl	800e0ae <__multadd>
 800db5c:	4681      	mov	r9, r0
 800db5e:	4606      	mov	r6, r0
 800db60:	9505      	str	r5, [sp, #20]
 800db62:	e776      	b.n	800da52 <_dtoa_r+0x992>
 800db64:	f000 faa3 	bl	800e0ae <__multadd>
 800db68:	4631      	mov	r1, r6
 800db6a:	4681      	mov	r9, r0
 800db6c:	2300      	movs	r3, #0
 800db6e:	220a      	movs	r2, #10
 800db70:	4620      	mov	r0, r4
 800db72:	f000 fa9c 	bl	800e0ae <__multadd>
 800db76:	4606      	mov	r6, r0
 800db78:	e7f2      	b.n	800db60 <_dtoa_r+0xaa0>
 800db7a:	f04f 0900 	mov.w	r9, #0
 800db7e:	2201      	movs	r2, #1
 800db80:	9904      	ldr	r1, [sp, #16]
 800db82:	4620      	mov	r0, r4
 800db84:	f000 fc0a 	bl	800e39c <__lshift>
 800db88:	4639      	mov	r1, r7
 800db8a:	9004      	str	r0, [sp, #16]
 800db8c:	f000 fc5a 	bl	800e444 <__mcmp>
 800db90:	2800      	cmp	r0, #0
 800db92:	dcb6      	bgt.n	800db02 <_dtoa_r+0xa42>
 800db94:	d102      	bne.n	800db9c <_dtoa_r+0xadc>
 800db96:	f018 0f01 	tst.w	r8, #1
 800db9a:	d1b2      	bne.n	800db02 <_dtoa_r+0xa42>
 800db9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dba0:	2b30      	cmp	r3, #48	; 0x30
 800dba2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dba6:	f47f af0a 	bne.w	800d9be <_dtoa_r+0x8fe>
 800dbaa:	4615      	mov	r5, r2
 800dbac:	e7f6      	b.n	800db9c <_dtoa_r+0xadc>
 800dbae:	4593      	cmp	fp, r2
 800dbb0:	d105      	bne.n	800dbbe <_dtoa_r+0xafe>
 800dbb2:	2331      	movs	r3, #49	; 0x31
 800dbb4:	f10a 0a01 	add.w	sl, sl, #1
 800dbb8:	f88b 3000 	strb.w	r3, [fp]
 800dbbc:	e6ff      	b.n	800d9be <_dtoa_r+0x8fe>
 800dbbe:	4615      	mov	r5, r2
 800dbc0:	e79f      	b.n	800db02 <_dtoa_r+0xa42>
 800dbc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dc28 <_dtoa_r+0xb68>
 800dbc6:	e007      	b.n	800dbd8 <_dtoa_r+0xb18>
 800dbc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dc2c <_dtoa_r+0xb6c>
 800dbce:	b11b      	cbz	r3, 800dbd8 <_dtoa_r+0xb18>
 800dbd0:	f10b 0308 	add.w	r3, fp, #8
 800dbd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dbd6:	6013      	str	r3, [r2, #0]
 800dbd8:	4658      	mov	r0, fp
 800dbda:	b017      	add	sp, #92	; 0x5c
 800dbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe0:	9b06      	ldr	r3, [sp, #24]
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	f77f ae35 	ble.w	800d852 <_dtoa_r+0x792>
 800dbe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbea:	9307      	str	r3, [sp, #28]
 800dbec:	e649      	b.n	800d882 <_dtoa_r+0x7c2>
 800dbee:	9b02      	ldr	r3, [sp, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dc03      	bgt.n	800dbfc <_dtoa_r+0xb3c>
 800dbf4:	9b06      	ldr	r3, [sp, #24]
 800dbf6:	2b02      	cmp	r3, #2
 800dbf8:	f73f aecc 	bgt.w	800d994 <_dtoa_r+0x8d4>
 800dbfc:	465d      	mov	r5, fp
 800dbfe:	4639      	mov	r1, r7
 800dc00:	9804      	ldr	r0, [sp, #16]
 800dc02:	f7ff f9cf 	bl	800cfa4 <quorem>
 800dc06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dc0a:	f805 8b01 	strb.w	r8, [r5], #1
 800dc0e:	9a02      	ldr	r2, [sp, #8]
 800dc10:	eba5 030b 	sub.w	r3, r5, fp
 800dc14:	429a      	cmp	r2, r3
 800dc16:	ddb0      	ble.n	800db7a <_dtoa_r+0xaba>
 800dc18:	2300      	movs	r3, #0
 800dc1a:	220a      	movs	r2, #10
 800dc1c:	9904      	ldr	r1, [sp, #16]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f000 fa45 	bl	800e0ae <__multadd>
 800dc24:	9004      	str	r0, [sp, #16]
 800dc26:	e7ea      	b.n	800dbfe <_dtoa_r+0xb3e>
 800dc28:	0800fa38 	.word	0x0800fa38
 800dc2c:	0800fa5c 	.word	0x0800fa5c

0800dc30 <__sflush_r>:
 800dc30:	898a      	ldrh	r2, [r1, #12]
 800dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc36:	4605      	mov	r5, r0
 800dc38:	0710      	lsls	r0, r2, #28
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	d458      	bmi.n	800dcf0 <__sflush_r+0xc0>
 800dc3e:	684b      	ldr	r3, [r1, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dc05      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc02      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	d0f9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dc56:	2300      	movs	r3, #0
 800dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc5c:	682f      	ldr	r7, [r5, #0]
 800dc5e:	6a21      	ldr	r1, [r4, #32]
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	d032      	beq.n	800dcca <__sflush_r+0x9a>
 800dc64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	075a      	lsls	r2, r3, #29
 800dc6a:	d505      	bpl.n	800dc78 <__sflush_r+0x48>
 800dc6c:	6863      	ldr	r3, [r4, #4]
 800dc6e:	1ac0      	subs	r0, r0, r3
 800dc70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc72:	b10b      	cbz	r3, 800dc78 <__sflush_r+0x48>
 800dc74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc76:	1ac0      	subs	r0, r0, r3
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc7e:	6a21      	ldr	r1, [r4, #32]
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b0      	blx	r6
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	d106      	bne.n	800dc98 <__sflush_r+0x68>
 800dc8a:	6829      	ldr	r1, [r5, #0]
 800dc8c:	291d      	cmp	r1, #29
 800dc8e:	d848      	bhi.n	800dd22 <__sflush_r+0xf2>
 800dc90:	4a29      	ldr	r2, [pc, #164]	; (800dd38 <__sflush_r+0x108>)
 800dc92:	40ca      	lsrs	r2, r1
 800dc94:	07d6      	lsls	r6, r2, #31
 800dc96:	d544      	bpl.n	800dd22 <__sflush_r+0xf2>
 800dc98:	2200      	movs	r2, #0
 800dc9a:	6062      	str	r2, [r4, #4]
 800dc9c:	04d9      	lsls	r1, r3, #19
 800dc9e:	6922      	ldr	r2, [r4, #16]
 800dca0:	6022      	str	r2, [r4, #0]
 800dca2:	d504      	bpl.n	800dcae <__sflush_r+0x7e>
 800dca4:	1c42      	adds	r2, r0, #1
 800dca6:	d101      	bne.n	800dcac <__sflush_r+0x7c>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	b903      	cbnz	r3, 800dcae <__sflush_r+0x7e>
 800dcac:	6560      	str	r0, [r4, #84]	; 0x54
 800dcae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb0:	602f      	str	r7, [r5, #0]
 800dcb2:	2900      	cmp	r1, #0
 800dcb4:	d0c9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcba:	4299      	cmp	r1, r3
 800dcbc:	d002      	beq.n	800dcc4 <__sflush_r+0x94>
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 fc94 	bl	800e5ec <_free_r>
 800dcc4:	2000      	movs	r0, #0
 800dcc6:	6360      	str	r0, [r4, #52]	; 0x34
 800dcc8:	e7c0      	b.n	800dc4c <__sflush_r+0x1c>
 800dcca:	2301      	movs	r3, #1
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b0      	blx	r6
 800dcd0:	1c41      	adds	r1, r0, #1
 800dcd2:	d1c8      	bne.n	800dc66 <__sflush_r+0x36>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0c5      	beq.n	800dc66 <__sflush_r+0x36>
 800dcda:	2b1d      	cmp	r3, #29
 800dcdc:	d001      	beq.n	800dce2 <__sflush_r+0xb2>
 800dcde:	2b16      	cmp	r3, #22
 800dce0:	d101      	bne.n	800dce6 <__sflush_r+0xb6>
 800dce2:	602f      	str	r7, [r5, #0]
 800dce4:	e7b1      	b.n	800dc4a <__sflush_r+0x1a>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	e7ad      	b.n	800dc4c <__sflush_r+0x1c>
 800dcf0:	690f      	ldr	r7, [r1, #16]
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	d0a9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcf6:	0793      	lsls	r3, r2, #30
 800dcf8:	680e      	ldr	r6, [r1, #0]
 800dcfa:	bf08      	it	eq
 800dcfc:	694b      	ldreq	r3, [r1, #20]
 800dcfe:	600f      	str	r7, [r1, #0]
 800dd00:	bf18      	it	ne
 800dd02:	2300      	movne	r3, #0
 800dd04:	eba6 0807 	sub.w	r8, r6, r7
 800dd08:	608b      	str	r3, [r1, #8]
 800dd0a:	f1b8 0f00 	cmp.w	r8, #0
 800dd0e:	dd9c      	ble.n	800dc4a <__sflush_r+0x1a>
 800dd10:	4643      	mov	r3, r8
 800dd12:	463a      	mov	r2, r7
 800dd14:	6a21      	ldr	r1, [r4, #32]
 800dd16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	dc06      	bgt.n	800dd2e <__sflush_r+0xfe>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd2c:	e78e      	b.n	800dc4c <__sflush_r+0x1c>
 800dd2e:	4407      	add	r7, r0
 800dd30:	eba8 0800 	sub.w	r8, r8, r0
 800dd34:	e7e9      	b.n	800dd0a <__sflush_r+0xda>
 800dd36:	bf00      	nop
 800dd38:	20400001 	.word	0x20400001

0800dd3c <_fflush_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	690b      	ldr	r3, [r1, #16]
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b1db      	cbz	r3, 800dd7e <_fflush_r+0x42>
 800dd46:	b118      	cbz	r0, 800dd50 <_fflush_r+0x14>
 800dd48:	6983      	ldr	r3, [r0, #24]
 800dd4a:	b90b      	cbnz	r3, 800dd50 <_fflush_r+0x14>
 800dd4c:	f000 f860 	bl	800de10 <__sinit>
 800dd50:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <_fflush_r+0x48>)
 800dd52:	429c      	cmp	r4, r3
 800dd54:	d109      	bne.n	800dd6a <_fflush_r+0x2e>
 800dd56:	686c      	ldr	r4, [r5, #4]
 800dd58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd5c:	b17b      	cbz	r3, 800dd7e <_fflush_r+0x42>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4628      	mov	r0, r5
 800dd62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd66:	f7ff bf63 	b.w	800dc30 <__sflush_r>
 800dd6a:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <_fflush_r+0x4c>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	d101      	bne.n	800dd74 <_fflush_r+0x38>
 800dd70:	68ac      	ldr	r4, [r5, #8]
 800dd72:	e7f1      	b.n	800dd58 <_fflush_r+0x1c>
 800dd74:	4b05      	ldr	r3, [pc, #20]	; (800dd8c <_fflush_r+0x50>)
 800dd76:	429c      	cmp	r4, r3
 800dd78:	bf08      	it	eq
 800dd7a:	68ec      	ldreq	r4, [r5, #12]
 800dd7c:	e7ec      	b.n	800dd58 <_fflush_r+0x1c>
 800dd7e:	2000      	movs	r0, #0
 800dd80:	bd38      	pop	{r3, r4, r5, pc}
 800dd82:	bf00      	nop
 800dd84:	0800fa8c 	.word	0x0800fa8c
 800dd88:	0800faac 	.word	0x0800faac
 800dd8c:	0800fa6c 	.word	0x0800fa6c

0800dd90 <std>:
 800dd90:	2300      	movs	r3, #0
 800dd92:	b510      	push	{r4, lr}
 800dd94:	4604      	mov	r4, r0
 800dd96:	e9c0 3300 	strd	r3, r3, [r0]
 800dd9a:	6083      	str	r3, [r0, #8]
 800dd9c:	8181      	strh	r1, [r0, #12]
 800dd9e:	6643      	str	r3, [r0, #100]	; 0x64
 800dda0:	81c2      	strh	r2, [r0, #14]
 800dda2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dda6:	6183      	str	r3, [r0, #24]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	2208      	movs	r2, #8
 800ddac:	305c      	adds	r0, #92	; 0x5c
 800ddae:	f7fe fb14 	bl	800c3da <memset>
 800ddb2:	4b05      	ldr	r3, [pc, #20]	; (800ddc8 <std+0x38>)
 800ddb4:	6263      	str	r3, [r4, #36]	; 0x24
 800ddb6:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <std+0x3c>)
 800ddb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddba:	4b05      	ldr	r3, [pc, #20]	; (800ddd0 <std+0x40>)
 800ddbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddbe:	4b05      	ldr	r3, [pc, #20]	; (800ddd4 <std+0x44>)
 800ddc0:	6224      	str	r4, [r4, #32]
 800ddc2:	6323      	str	r3, [r4, #48]	; 0x30
 800ddc4:	bd10      	pop	{r4, pc}
 800ddc6:	bf00      	nop
 800ddc8:	0800e9dd 	.word	0x0800e9dd
 800ddcc:	0800e9ff 	.word	0x0800e9ff
 800ddd0:	0800ea37 	.word	0x0800ea37
 800ddd4:	0800ea5b 	.word	0x0800ea5b

0800ddd8 <_cleanup_r>:
 800ddd8:	4901      	ldr	r1, [pc, #4]	; (800dde0 <_cleanup_r+0x8>)
 800ddda:	f000 b885 	b.w	800dee8 <_fwalk_reent>
 800ddde:	bf00      	nop
 800dde0:	0800dd3d 	.word	0x0800dd3d

0800dde4 <__sfmoreglue>:
 800dde4:	b570      	push	{r4, r5, r6, lr}
 800dde6:	1e4a      	subs	r2, r1, #1
 800dde8:	2568      	movs	r5, #104	; 0x68
 800ddea:	4355      	muls	r5, r2
 800ddec:	460e      	mov	r6, r1
 800ddee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddf2:	f000 fc49 	bl	800e688 <_malloc_r>
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	b140      	cbz	r0, 800de0c <__sfmoreglue+0x28>
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	e9c0 1600 	strd	r1, r6, [r0]
 800de00:	300c      	adds	r0, #12
 800de02:	60a0      	str	r0, [r4, #8]
 800de04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de08:	f7fe fae7 	bl	800c3da <memset>
 800de0c:	4620      	mov	r0, r4
 800de0e:	bd70      	pop	{r4, r5, r6, pc}

0800de10 <__sinit>:
 800de10:	6983      	ldr	r3, [r0, #24]
 800de12:	b510      	push	{r4, lr}
 800de14:	4604      	mov	r4, r0
 800de16:	bb33      	cbnz	r3, 800de66 <__sinit+0x56>
 800de18:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800de1c:	6503      	str	r3, [r0, #80]	; 0x50
 800de1e:	4b12      	ldr	r3, [pc, #72]	; (800de68 <__sinit+0x58>)
 800de20:	4a12      	ldr	r2, [pc, #72]	; (800de6c <__sinit+0x5c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6282      	str	r2, [r0, #40]	; 0x28
 800de26:	4298      	cmp	r0, r3
 800de28:	bf04      	itt	eq
 800de2a:	2301      	moveq	r3, #1
 800de2c:	6183      	streq	r3, [r0, #24]
 800de2e:	f000 f81f 	bl	800de70 <__sfp>
 800de32:	6060      	str	r0, [r4, #4]
 800de34:	4620      	mov	r0, r4
 800de36:	f000 f81b 	bl	800de70 <__sfp>
 800de3a:	60a0      	str	r0, [r4, #8]
 800de3c:	4620      	mov	r0, r4
 800de3e:	f000 f817 	bl	800de70 <__sfp>
 800de42:	2200      	movs	r2, #0
 800de44:	60e0      	str	r0, [r4, #12]
 800de46:	2104      	movs	r1, #4
 800de48:	6860      	ldr	r0, [r4, #4]
 800de4a:	f7ff ffa1 	bl	800dd90 <std>
 800de4e:	2201      	movs	r2, #1
 800de50:	2109      	movs	r1, #9
 800de52:	68a0      	ldr	r0, [r4, #8]
 800de54:	f7ff ff9c 	bl	800dd90 <std>
 800de58:	2202      	movs	r2, #2
 800de5a:	2112      	movs	r1, #18
 800de5c:	68e0      	ldr	r0, [r4, #12]
 800de5e:	f7ff ff97 	bl	800dd90 <std>
 800de62:	2301      	movs	r3, #1
 800de64:	61a3      	str	r3, [r4, #24]
 800de66:	bd10      	pop	{r4, pc}
 800de68:	0800fa24 	.word	0x0800fa24
 800de6c:	0800ddd9 	.word	0x0800ddd9

0800de70 <__sfp>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	4b1b      	ldr	r3, [pc, #108]	; (800dee0 <__sfp+0x70>)
 800de74:	681e      	ldr	r6, [r3, #0]
 800de76:	69b3      	ldr	r3, [r6, #24]
 800de78:	4607      	mov	r7, r0
 800de7a:	b913      	cbnz	r3, 800de82 <__sfp+0x12>
 800de7c:	4630      	mov	r0, r6
 800de7e:	f7ff ffc7 	bl	800de10 <__sinit>
 800de82:	3648      	adds	r6, #72	; 0x48
 800de84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de88:	3b01      	subs	r3, #1
 800de8a:	d503      	bpl.n	800de94 <__sfp+0x24>
 800de8c:	6833      	ldr	r3, [r6, #0]
 800de8e:	b133      	cbz	r3, 800de9e <__sfp+0x2e>
 800de90:	6836      	ldr	r6, [r6, #0]
 800de92:	e7f7      	b.n	800de84 <__sfp+0x14>
 800de94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de98:	b16d      	cbz	r5, 800deb6 <__sfp+0x46>
 800de9a:	3468      	adds	r4, #104	; 0x68
 800de9c:	e7f4      	b.n	800de88 <__sfp+0x18>
 800de9e:	2104      	movs	r1, #4
 800dea0:	4638      	mov	r0, r7
 800dea2:	f7ff ff9f 	bl	800dde4 <__sfmoreglue>
 800dea6:	6030      	str	r0, [r6, #0]
 800dea8:	2800      	cmp	r0, #0
 800deaa:	d1f1      	bne.n	800de90 <__sfp+0x20>
 800deac:	230c      	movs	r3, #12
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	4604      	mov	r4, r0
 800deb2:	4620      	mov	r0, r4
 800deb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb6:	4b0b      	ldr	r3, [pc, #44]	; (800dee4 <__sfp+0x74>)
 800deb8:	6665      	str	r5, [r4, #100]	; 0x64
 800deba:	e9c4 5500 	strd	r5, r5, [r4]
 800debe:	60a5      	str	r5, [r4, #8]
 800dec0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dec4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dec8:	2208      	movs	r2, #8
 800deca:	4629      	mov	r1, r5
 800decc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ded0:	f7fe fa83 	bl	800c3da <memset>
 800ded4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ded8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dedc:	e7e9      	b.n	800deb2 <__sfp+0x42>
 800dede:	bf00      	nop
 800dee0:	0800fa24 	.word	0x0800fa24
 800dee4:	ffff0001 	.word	0xffff0001

0800dee8 <_fwalk_reent>:
 800dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deec:	4680      	mov	r8, r0
 800deee:	4689      	mov	r9, r1
 800def0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800def4:	2600      	movs	r6, #0
 800def6:	b914      	cbnz	r4, 800defe <_fwalk_reent+0x16>
 800def8:	4630      	mov	r0, r6
 800defa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800defe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800df02:	3f01      	subs	r7, #1
 800df04:	d501      	bpl.n	800df0a <_fwalk_reent+0x22>
 800df06:	6824      	ldr	r4, [r4, #0]
 800df08:	e7f5      	b.n	800def6 <_fwalk_reent+0xe>
 800df0a:	89ab      	ldrh	r3, [r5, #12]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d907      	bls.n	800df20 <_fwalk_reent+0x38>
 800df10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df14:	3301      	adds	r3, #1
 800df16:	d003      	beq.n	800df20 <_fwalk_reent+0x38>
 800df18:	4629      	mov	r1, r5
 800df1a:	4640      	mov	r0, r8
 800df1c:	47c8      	blx	r9
 800df1e:	4306      	orrs	r6, r0
 800df20:	3568      	adds	r5, #104	; 0x68
 800df22:	e7ee      	b.n	800df02 <_fwalk_reent+0x1a>

0800df24 <_localeconv_r>:
 800df24:	4b04      	ldr	r3, [pc, #16]	; (800df38 <_localeconv_r+0x14>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	6a18      	ldr	r0, [r3, #32]
 800df2a:	4b04      	ldr	r3, [pc, #16]	; (800df3c <_localeconv_r+0x18>)
 800df2c:	2800      	cmp	r0, #0
 800df2e:	bf08      	it	eq
 800df30:	4618      	moveq	r0, r3
 800df32:	30f0      	adds	r0, #240	; 0xf0
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	20000014 	.word	0x20000014
 800df3c:	20000078 	.word	0x20000078

0800df40 <__swhatbuf_r>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	460e      	mov	r6, r1
 800df44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df48:	2900      	cmp	r1, #0
 800df4a:	b096      	sub	sp, #88	; 0x58
 800df4c:	4614      	mov	r4, r2
 800df4e:	461d      	mov	r5, r3
 800df50:	da07      	bge.n	800df62 <__swhatbuf_r+0x22>
 800df52:	2300      	movs	r3, #0
 800df54:	602b      	str	r3, [r5, #0]
 800df56:	89b3      	ldrh	r3, [r6, #12]
 800df58:	061a      	lsls	r2, r3, #24
 800df5a:	d410      	bmi.n	800df7e <__swhatbuf_r+0x3e>
 800df5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df60:	e00e      	b.n	800df80 <__swhatbuf_r+0x40>
 800df62:	466a      	mov	r2, sp
 800df64:	f000 fda0 	bl	800eaa8 <_fstat_r>
 800df68:	2800      	cmp	r0, #0
 800df6a:	dbf2      	blt.n	800df52 <__swhatbuf_r+0x12>
 800df6c:	9a01      	ldr	r2, [sp, #4]
 800df6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df76:	425a      	negs	r2, r3
 800df78:	415a      	adcs	r2, r3
 800df7a:	602a      	str	r2, [r5, #0]
 800df7c:	e7ee      	b.n	800df5c <__swhatbuf_r+0x1c>
 800df7e:	2340      	movs	r3, #64	; 0x40
 800df80:	2000      	movs	r0, #0
 800df82:	6023      	str	r3, [r4, #0]
 800df84:	b016      	add	sp, #88	; 0x58
 800df86:	bd70      	pop	{r4, r5, r6, pc}

0800df88 <__smakebuf_r>:
 800df88:	898b      	ldrh	r3, [r1, #12]
 800df8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df8c:	079d      	lsls	r5, r3, #30
 800df8e:	4606      	mov	r6, r0
 800df90:	460c      	mov	r4, r1
 800df92:	d507      	bpl.n	800dfa4 <__smakebuf_r+0x1c>
 800df94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	6123      	str	r3, [r4, #16]
 800df9c:	2301      	movs	r3, #1
 800df9e:	6163      	str	r3, [r4, #20]
 800dfa0:	b002      	add	sp, #8
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}
 800dfa4:	ab01      	add	r3, sp, #4
 800dfa6:	466a      	mov	r2, sp
 800dfa8:	f7ff ffca 	bl	800df40 <__swhatbuf_r>
 800dfac:	9900      	ldr	r1, [sp, #0]
 800dfae:	4605      	mov	r5, r0
 800dfb0:	4630      	mov	r0, r6
 800dfb2:	f000 fb69 	bl	800e688 <_malloc_r>
 800dfb6:	b948      	cbnz	r0, 800dfcc <__smakebuf_r+0x44>
 800dfb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfbc:	059a      	lsls	r2, r3, #22
 800dfbe:	d4ef      	bmi.n	800dfa0 <__smakebuf_r+0x18>
 800dfc0:	f023 0303 	bic.w	r3, r3, #3
 800dfc4:	f043 0302 	orr.w	r3, r3, #2
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	e7e3      	b.n	800df94 <__smakebuf_r+0xc>
 800dfcc:	4b0d      	ldr	r3, [pc, #52]	; (800e004 <__smakebuf_r+0x7c>)
 800dfce:	62b3      	str	r3, [r6, #40]	; 0x28
 800dfd0:	89a3      	ldrh	r3, [r4, #12]
 800dfd2:	6020      	str	r0, [r4, #0]
 800dfd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd8:	81a3      	strh	r3, [r4, #12]
 800dfda:	9b00      	ldr	r3, [sp, #0]
 800dfdc:	6163      	str	r3, [r4, #20]
 800dfde:	9b01      	ldr	r3, [sp, #4]
 800dfe0:	6120      	str	r0, [r4, #16]
 800dfe2:	b15b      	cbz	r3, 800dffc <__smakebuf_r+0x74>
 800dfe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfe8:	4630      	mov	r0, r6
 800dfea:	f000 fd6f 	bl	800eacc <_isatty_r>
 800dfee:	b128      	cbz	r0, 800dffc <__smakebuf_r+0x74>
 800dff0:	89a3      	ldrh	r3, [r4, #12]
 800dff2:	f023 0303 	bic.w	r3, r3, #3
 800dff6:	f043 0301 	orr.w	r3, r3, #1
 800dffa:	81a3      	strh	r3, [r4, #12]
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	431d      	orrs	r5, r3
 800e000:	81a5      	strh	r5, [r4, #12]
 800e002:	e7cd      	b.n	800dfa0 <__smakebuf_r+0x18>
 800e004:	0800ddd9 	.word	0x0800ddd9

0800e008 <malloc>:
 800e008:	4b02      	ldr	r3, [pc, #8]	; (800e014 <malloc+0xc>)
 800e00a:	4601      	mov	r1, r0
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	f000 bb3b 	b.w	800e688 <_malloc_r>
 800e012:	bf00      	nop
 800e014:	20000014 	.word	0x20000014

0800e018 <_Balloc>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e01c:	4604      	mov	r4, r0
 800e01e:	460e      	mov	r6, r1
 800e020:	b93d      	cbnz	r5, 800e032 <_Balloc+0x1a>
 800e022:	2010      	movs	r0, #16
 800e024:	f7ff fff0 	bl	800e008 <malloc>
 800e028:	6260      	str	r0, [r4, #36]	; 0x24
 800e02a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e02e:	6005      	str	r5, [r0, #0]
 800e030:	60c5      	str	r5, [r0, #12]
 800e032:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e034:	68eb      	ldr	r3, [r5, #12]
 800e036:	b183      	cbz	r3, 800e05a <_Balloc+0x42>
 800e038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e040:	b9b8      	cbnz	r0, 800e072 <_Balloc+0x5a>
 800e042:	2101      	movs	r1, #1
 800e044:	fa01 f506 	lsl.w	r5, r1, r6
 800e048:	1d6a      	adds	r2, r5, #5
 800e04a:	0092      	lsls	r2, r2, #2
 800e04c:	4620      	mov	r0, r4
 800e04e:	f000 fabf 	bl	800e5d0 <_calloc_r>
 800e052:	b160      	cbz	r0, 800e06e <_Balloc+0x56>
 800e054:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e058:	e00e      	b.n	800e078 <_Balloc+0x60>
 800e05a:	2221      	movs	r2, #33	; 0x21
 800e05c:	2104      	movs	r1, #4
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 fab6 	bl	800e5d0 <_calloc_r>
 800e064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e066:	60e8      	str	r0, [r5, #12]
 800e068:	68db      	ldr	r3, [r3, #12]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d1e4      	bne.n	800e038 <_Balloc+0x20>
 800e06e:	2000      	movs	r0, #0
 800e070:	bd70      	pop	{r4, r5, r6, pc}
 800e072:	6802      	ldr	r2, [r0, #0]
 800e074:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e078:	2300      	movs	r3, #0
 800e07a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e07e:	e7f7      	b.n	800e070 <_Balloc+0x58>

0800e080 <_Bfree>:
 800e080:	b570      	push	{r4, r5, r6, lr}
 800e082:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e084:	4606      	mov	r6, r0
 800e086:	460d      	mov	r5, r1
 800e088:	b93c      	cbnz	r4, 800e09a <_Bfree+0x1a>
 800e08a:	2010      	movs	r0, #16
 800e08c:	f7ff ffbc 	bl	800e008 <malloc>
 800e090:	6270      	str	r0, [r6, #36]	; 0x24
 800e092:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e096:	6004      	str	r4, [r0, #0]
 800e098:	60c4      	str	r4, [r0, #12]
 800e09a:	b13d      	cbz	r5, 800e0ac <_Bfree+0x2c>
 800e09c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e09e:	686a      	ldr	r2, [r5, #4]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0a6:	6029      	str	r1, [r5, #0]
 800e0a8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e0ac:	bd70      	pop	{r4, r5, r6, pc}

0800e0ae <__multadd>:
 800e0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b2:	690d      	ldr	r5, [r1, #16]
 800e0b4:	461f      	mov	r7, r3
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	460c      	mov	r4, r1
 800e0ba:	f101 0c14 	add.w	ip, r1, #20
 800e0be:	2300      	movs	r3, #0
 800e0c0:	f8dc 0000 	ldr.w	r0, [ip]
 800e0c4:	b281      	uxth	r1, r0
 800e0c6:	fb02 7101 	mla	r1, r2, r1, r7
 800e0ca:	0c0f      	lsrs	r7, r1, #16
 800e0cc:	0c00      	lsrs	r0, r0, #16
 800e0ce:	fb02 7000 	mla	r0, r2, r0, r7
 800e0d2:	b289      	uxth	r1, r1
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e0da:	429d      	cmp	r5, r3
 800e0dc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e0e0:	f84c 1b04 	str.w	r1, [ip], #4
 800e0e4:	dcec      	bgt.n	800e0c0 <__multadd+0x12>
 800e0e6:	b1d7      	cbz	r7, 800e11e <__multadd+0x70>
 800e0e8:	68a3      	ldr	r3, [r4, #8]
 800e0ea:	42ab      	cmp	r3, r5
 800e0ec:	dc12      	bgt.n	800e114 <__multadd+0x66>
 800e0ee:	6861      	ldr	r1, [r4, #4]
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	3101      	adds	r1, #1
 800e0f4:	f7ff ff90 	bl	800e018 <_Balloc>
 800e0f8:	6922      	ldr	r2, [r4, #16]
 800e0fa:	3202      	adds	r2, #2
 800e0fc:	f104 010c 	add.w	r1, r4, #12
 800e100:	4680      	mov	r8, r0
 800e102:	0092      	lsls	r2, r2, #2
 800e104:	300c      	adds	r0, #12
 800e106:	f7fe f95d 	bl	800c3c4 <memcpy>
 800e10a:	4621      	mov	r1, r4
 800e10c:	4630      	mov	r0, r6
 800e10e:	f7ff ffb7 	bl	800e080 <_Bfree>
 800e112:	4644      	mov	r4, r8
 800e114:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e118:	3501      	adds	r5, #1
 800e11a:	615f      	str	r7, [r3, #20]
 800e11c:	6125      	str	r5, [r4, #16]
 800e11e:	4620      	mov	r0, r4
 800e120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e124 <__hi0bits>:
 800e124:	0c02      	lsrs	r2, r0, #16
 800e126:	0412      	lsls	r2, r2, #16
 800e128:	4603      	mov	r3, r0
 800e12a:	b9b2      	cbnz	r2, 800e15a <__hi0bits+0x36>
 800e12c:	0403      	lsls	r3, r0, #16
 800e12e:	2010      	movs	r0, #16
 800e130:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e134:	bf04      	itt	eq
 800e136:	021b      	lsleq	r3, r3, #8
 800e138:	3008      	addeq	r0, #8
 800e13a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e13e:	bf04      	itt	eq
 800e140:	011b      	lsleq	r3, r3, #4
 800e142:	3004      	addeq	r0, #4
 800e144:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e148:	bf04      	itt	eq
 800e14a:	009b      	lsleq	r3, r3, #2
 800e14c:	3002      	addeq	r0, #2
 800e14e:	2b00      	cmp	r3, #0
 800e150:	db06      	blt.n	800e160 <__hi0bits+0x3c>
 800e152:	005b      	lsls	r3, r3, #1
 800e154:	d503      	bpl.n	800e15e <__hi0bits+0x3a>
 800e156:	3001      	adds	r0, #1
 800e158:	4770      	bx	lr
 800e15a:	2000      	movs	r0, #0
 800e15c:	e7e8      	b.n	800e130 <__hi0bits+0xc>
 800e15e:	2020      	movs	r0, #32
 800e160:	4770      	bx	lr

0800e162 <__lo0bits>:
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	f013 0207 	ands.w	r2, r3, #7
 800e168:	4601      	mov	r1, r0
 800e16a:	d00b      	beq.n	800e184 <__lo0bits+0x22>
 800e16c:	07da      	lsls	r2, r3, #31
 800e16e:	d423      	bmi.n	800e1b8 <__lo0bits+0x56>
 800e170:	0798      	lsls	r0, r3, #30
 800e172:	bf49      	itett	mi
 800e174:	085b      	lsrmi	r3, r3, #1
 800e176:	089b      	lsrpl	r3, r3, #2
 800e178:	2001      	movmi	r0, #1
 800e17a:	600b      	strmi	r3, [r1, #0]
 800e17c:	bf5c      	itt	pl
 800e17e:	600b      	strpl	r3, [r1, #0]
 800e180:	2002      	movpl	r0, #2
 800e182:	4770      	bx	lr
 800e184:	b298      	uxth	r0, r3
 800e186:	b9a8      	cbnz	r0, 800e1b4 <__lo0bits+0x52>
 800e188:	0c1b      	lsrs	r3, r3, #16
 800e18a:	2010      	movs	r0, #16
 800e18c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e190:	bf04      	itt	eq
 800e192:	0a1b      	lsreq	r3, r3, #8
 800e194:	3008      	addeq	r0, #8
 800e196:	071a      	lsls	r2, r3, #28
 800e198:	bf04      	itt	eq
 800e19a:	091b      	lsreq	r3, r3, #4
 800e19c:	3004      	addeq	r0, #4
 800e19e:	079a      	lsls	r2, r3, #30
 800e1a0:	bf04      	itt	eq
 800e1a2:	089b      	lsreq	r3, r3, #2
 800e1a4:	3002      	addeq	r0, #2
 800e1a6:	07da      	lsls	r2, r3, #31
 800e1a8:	d402      	bmi.n	800e1b0 <__lo0bits+0x4e>
 800e1aa:	085b      	lsrs	r3, r3, #1
 800e1ac:	d006      	beq.n	800e1bc <__lo0bits+0x5a>
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	600b      	str	r3, [r1, #0]
 800e1b2:	4770      	bx	lr
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	e7e9      	b.n	800e18c <__lo0bits+0x2a>
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	4770      	bx	lr
 800e1bc:	2020      	movs	r0, #32
 800e1be:	4770      	bx	lr

0800e1c0 <__i2b>:
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	f7ff ff27 	bl	800e018 <_Balloc>
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	6144      	str	r4, [r0, #20]
 800e1ce:	6102      	str	r2, [r0, #16]
 800e1d0:	bd10      	pop	{r4, pc}

0800e1d2 <__multiply>:
 800e1d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d6:	4614      	mov	r4, r2
 800e1d8:	690a      	ldr	r2, [r1, #16]
 800e1da:	6923      	ldr	r3, [r4, #16]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	bfb8      	it	lt
 800e1e0:	460b      	movlt	r3, r1
 800e1e2:	4688      	mov	r8, r1
 800e1e4:	bfbc      	itt	lt
 800e1e6:	46a0      	movlt	r8, r4
 800e1e8:	461c      	movlt	r4, r3
 800e1ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e1f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1fa:	eb07 0609 	add.w	r6, r7, r9
 800e1fe:	42b3      	cmp	r3, r6
 800e200:	bfb8      	it	lt
 800e202:	3101      	addlt	r1, #1
 800e204:	f7ff ff08 	bl	800e018 <_Balloc>
 800e208:	f100 0514 	add.w	r5, r0, #20
 800e20c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e210:	462b      	mov	r3, r5
 800e212:	2200      	movs	r2, #0
 800e214:	4573      	cmp	r3, lr
 800e216:	d316      	bcc.n	800e246 <__multiply+0x74>
 800e218:	f104 0214 	add.w	r2, r4, #20
 800e21c:	f108 0114 	add.w	r1, r8, #20
 800e220:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e224:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	9b00      	ldr	r3, [sp, #0]
 800e22c:	9201      	str	r2, [sp, #4]
 800e22e:	4293      	cmp	r3, r2
 800e230:	d80c      	bhi.n	800e24c <__multiply+0x7a>
 800e232:	2e00      	cmp	r6, #0
 800e234:	dd03      	ble.n	800e23e <__multiply+0x6c>
 800e236:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d05d      	beq.n	800e2fa <__multiply+0x128>
 800e23e:	6106      	str	r6, [r0, #16]
 800e240:	b003      	add	sp, #12
 800e242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e246:	f843 2b04 	str.w	r2, [r3], #4
 800e24a:	e7e3      	b.n	800e214 <__multiply+0x42>
 800e24c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e250:	f1bb 0f00 	cmp.w	fp, #0
 800e254:	d023      	beq.n	800e29e <__multiply+0xcc>
 800e256:	4689      	mov	r9, r1
 800e258:	46ac      	mov	ip, r5
 800e25a:	f04f 0800 	mov.w	r8, #0
 800e25e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e262:	f8dc a000 	ldr.w	sl, [ip]
 800e266:	b2a3      	uxth	r3, r4
 800e268:	fa1f fa8a 	uxth.w	sl, sl
 800e26c:	fb0b a303 	mla	r3, fp, r3, sl
 800e270:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e274:	f8dc 4000 	ldr.w	r4, [ip]
 800e278:	4443      	add	r3, r8
 800e27a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e27e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e282:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e286:	46e2      	mov	sl, ip
 800e288:	b29b      	uxth	r3, r3
 800e28a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e28e:	454f      	cmp	r7, r9
 800e290:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e294:	f84a 3b04 	str.w	r3, [sl], #4
 800e298:	d82b      	bhi.n	800e2f2 <__multiply+0x120>
 800e29a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e29e:	9b01      	ldr	r3, [sp, #4]
 800e2a0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e2a4:	3204      	adds	r2, #4
 800e2a6:	f1ba 0f00 	cmp.w	sl, #0
 800e2aa:	d020      	beq.n	800e2ee <__multiply+0x11c>
 800e2ac:	682b      	ldr	r3, [r5, #0]
 800e2ae:	4689      	mov	r9, r1
 800e2b0:	46a8      	mov	r8, r5
 800e2b2:	f04f 0b00 	mov.w	fp, #0
 800e2b6:	f8b9 c000 	ldrh.w	ip, [r9]
 800e2ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e2be:	fb0a 440c 	mla	r4, sl, ip, r4
 800e2c2:	445c      	add	r4, fp
 800e2c4:	46c4      	mov	ip, r8
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e2cc:	f84c 3b04 	str.w	r3, [ip], #4
 800e2d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e2d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e2d8:	0c1b      	lsrs	r3, r3, #16
 800e2da:	fb0a b303 	mla	r3, sl, r3, fp
 800e2de:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e2e2:	454f      	cmp	r7, r9
 800e2e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e2e8:	d805      	bhi.n	800e2f6 <__multiply+0x124>
 800e2ea:	f8c8 3004 	str.w	r3, [r8, #4]
 800e2ee:	3504      	adds	r5, #4
 800e2f0:	e79b      	b.n	800e22a <__multiply+0x58>
 800e2f2:	46d4      	mov	ip, sl
 800e2f4:	e7b3      	b.n	800e25e <__multiply+0x8c>
 800e2f6:	46e0      	mov	r8, ip
 800e2f8:	e7dd      	b.n	800e2b6 <__multiply+0xe4>
 800e2fa:	3e01      	subs	r6, #1
 800e2fc:	e799      	b.n	800e232 <__multiply+0x60>
	...

0800e300 <__pow5mult>:
 800e300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e304:	4615      	mov	r5, r2
 800e306:	f012 0203 	ands.w	r2, r2, #3
 800e30a:	4606      	mov	r6, r0
 800e30c:	460f      	mov	r7, r1
 800e30e:	d007      	beq.n	800e320 <__pow5mult+0x20>
 800e310:	3a01      	subs	r2, #1
 800e312:	4c21      	ldr	r4, [pc, #132]	; (800e398 <__pow5mult+0x98>)
 800e314:	2300      	movs	r3, #0
 800e316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e31a:	f7ff fec8 	bl	800e0ae <__multadd>
 800e31e:	4607      	mov	r7, r0
 800e320:	10ad      	asrs	r5, r5, #2
 800e322:	d035      	beq.n	800e390 <__pow5mult+0x90>
 800e324:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e326:	b93c      	cbnz	r4, 800e338 <__pow5mult+0x38>
 800e328:	2010      	movs	r0, #16
 800e32a:	f7ff fe6d 	bl	800e008 <malloc>
 800e32e:	6270      	str	r0, [r6, #36]	; 0x24
 800e330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e334:	6004      	str	r4, [r0, #0]
 800e336:	60c4      	str	r4, [r0, #12]
 800e338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e340:	b94c      	cbnz	r4, 800e356 <__pow5mult+0x56>
 800e342:	f240 2171 	movw	r1, #625	; 0x271
 800e346:	4630      	mov	r0, r6
 800e348:	f7ff ff3a 	bl	800e1c0 <__i2b>
 800e34c:	2300      	movs	r3, #0
 800e34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e352:	4604      	mov	r4, r0
 800e354:	6003      	str	r3, [r0, #0]
 800e356:	f04f 0800 	mov.w	r8, #0
 800e35a:	07eb      	lsls	r3, r5, #31
 800e35c:	d50a      	bpl.n	800e374 <__pow5mult+0x74>
 800e35e:	4639      	mov	r1, r7
 800e360:	4622      	mov	r2, r4
 800e362:	4630      	mov	r0, r6
 800e364:	f7ff ff35 	bl	800e1d2 <__multiply>
 800e368:	4639      	mov	r1, r7
 800e36a:	4681      	mov	r9, r0
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff fe87 	bl	800e080 <_Bfree>
 800e372:	464f      	mov	r7, r9
 800e374:	106d      	asrs	r5, r5, #1
 800e376:	d00b      	beq.n	800e390 <__pow5mult+0x90>
 800e378:	6820      	ldr	r0, [r4, #0]
 800e37a:	b938      	cbnz	r0, 800e38c <__pow5mult+0x8c>
 800e37c:	4622      	mov	r2, r4
 800e37e:	4621      	mov	r1, r4
 800e380:	4630      	mov	r0, r6
 800e382:	f7ff ff26 	bl	800e1d2 <__multiply>
 800e386:	6020      	str	r0, [r4, #0]
 800e388:	f8c0 8000 	str.w	r8, [r0]
 800e38c:	4604      	mov	r4, r0
 800e38e:	e7e4      	b.n	800e35a <__pow5mult+0x5a>
 800e390:	4638      	mov	r0, r7
 800e392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e396:	bf00      	nop
 800e398:	0800fbc0 	.word	0x0800fbc0

0800e39c <__lshift>:
 800e39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a0:	460c      	mov	r4, r1
 800e3a2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3a6:	6923      	ldr	r3, [r4, #16]
 800e3a8:	6849      	ldr	r1, [r1, #4]
 800e3aa:	eb0a 0903 	add.w	r9, sl, r3
 800e3ae:	68a3      	ldr	r3, [r4, #8]
 800e3b0:	4607      	mov	r7, r0
 800e3b2:	4616      	mov	r6, r2
 800e3b4:	f109 0501 	add.w	r5, r9, #1
 800e3b8:	42ab      	cmp	r3, r5
 800e3ba:	db32      	blt.n	800e422 <__lshift+0x86>
 800e3bc:	4638      	mov	r0, r7
 800e3be:	f7ff fe2b 	bl	800e018 <_Balloc>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	f100 0114 	add.w	r1, r0, #20
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	4553      	cmp	r3, sl
 800e3ce:	db2b      	blt.n	800e428 <__lshift+0x8c>
 800e3d0:	6920      	ldr	r0, [r4, #16]
 800e3d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3d6:	f104 0314 	add.w	r3, r4, #20
 800e3da:	f016 021f 	ands.w	r2, r6, #31
 800e3de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3e6:	d025      	beq.n	800e434 <__lshift+0x98>
 800e3e8:	f1c2 0e20 	rsb	lr, r2, #32
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	681e      	ldr	r6, [r3, #0]
 800e3f0:	468a      	mov	sl, r1
 800e3f2:	4096      	lsls	r6, r2
 800e3f4:	4330      	orrs	r0, r6
 800e3f6:	f84a 0b04 	str.w	r0, [sl], #4
 800e3fa:	f853 0b04 	ldr.w	r0, [r3], #4
 800e3fe:	459c      	cmp	ip, r3
 800e400:	fa20 f00e 	lsr.w	r0, r0, lr
 800e404:	d814      	bhi.n	800e430 <__lshift+0x94>
 800e406:	6048      	str	r0, [r1, #4]
 800e408:	b108      	cbz	r0, 800e40e <__lshift+0x72>
 800e40a:	f109 0502 	add.w	r5, r9, #2
 800e40e:	3d01      	subs	r5, #1
 800e410:	4638      	mov	r0, r7
 800e412:	f8c8 5010 	str.w	r5, [r8, #16]
 800e416:	4621      	mov	r1, r4
 800e418:	f7ff fe32 	bl	800e080 <_Bfree>
 800e41c:	4640      	mov	r0, r8
 800e41e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e422:	3101      	adds	r1, #1
 800e424:	005b      	lsls	r3, r3, #1
 800e426:	e7c7      	b.n	800e3b8 <__lshift+0x1c>
 800e428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e42c:	3301      	adds	r3, #1
 800e42e:	e7cd      	b.n	800e3cc <__lshift+0x30>
 800e430:	4651      	mov	r1, sl
 800e432:	e7dc      	b.n	800e3ee <__lshift+0x52>
 800e434:	3904      	subs	r1, #4
 800e436:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43a:	f841 2f04 	str.w	r2, [r1, #4]!
 800e43e:	459c      	cmp	ip, r3
 800e440:	d8f9      	bhi.n	800e436 <__lshift+0x9a>
 800e442:	e7e4      	b.n	800e40e <__lshift+0x72>

0800e444 <__mcmp>:
 800e444:	6903      	ldr	r3, [r0, #16]
 800e446:	690a      	ldr	r2, [r1, #16]
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	b530      	push	{r4, r5, lr}
 800e44c:	d10c      	bne.n	800e468 <__mcmp+0x24>
 800e44e:	0092      	lsls	r2, r2, #2
 800e450:	3014      	adds	r0, #20
 800e452:	3114      	adds	r1, #20
 800e454:	1884      	adds	r4, r0, r2
 800e456:	4411      	add	r1, r2
 800e458:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e45c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e460:	4295      	cmp	r5, r2
 800e462:	d003      	beq.n	800e46c <__mcmp+0x28>
 800e464:	d305      	bcc.n	800e472 <__mcmp+0x2e>
 800e466:	2301      	movs	r3, #1
 800e468:	4618      	mov	r0, r3
 800e46a:	bd30      	pop	{r4, r5, pc}
 800e46c:	42a0      	cmp	r0, r4
 800e46e:	d3f3      	bcc.n	800e458 <__mcmp+0x14>
 800e470:	e7fa      	b.n	800e468 <__mcmp+0x24>
 800e472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e476:	e7f7      	b.n	800e468 <__mcmp+0x24>

0800e478 <__mdiff>:
 800e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e47c:	460d      	mov	r5, r1
 800e47e:	4607      	mov	r7, r0
 800e480:	4611      	mov	r1, r2
 800e482:	4628      	mov	r0, r5
 800e484:	4614      	mov	r4, r2
 800e486:	f7ff ffdd 	bl	800e444 <__mcmp>
 800e48a:	1e06      	subs	r6, r0, #0
 800e48c:	d108      	bne.n	800e4a0 <__mdiff+0x28>
 800e48e:	4631      	mov	r1, r6
 800e490:	4638      	mov	r0, r7
 800e492:	f7ff fdc1 	bl	800e018 <_Balloc>
 800e496:	2301      	movs	r3, #1
 800e498:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4a0:	bfa4      	itt	ge
 800e4a2:	4623      	movge	r3, r4
 800e4a4:	462c      	movge	r4, r5
 800e4a6:	4638      	mov	r0, r7
 800e4a8:	6861      	ldr	r1, [r4, #4]
 800e4aa:	bfa6      	itte	ge
 800e4ac:	461d      	movge	r5, r3
 800e4ae:	2600      	movge	r6, #0
 800e4b0:	2601      	movlt	r6, #1
 800e4b2:	f7ff fdb1 	bl	800e018 <_Balloc>
 800e4b6:	692b      	ldr	r3, [r5, #16]
 800e4b8:	60c6      	str	r6, [r0, #12]
 800e4ba:	6926      	ldr	r6, [r4, #16]
 800e4bc:	f105 0914 	add.w	r9, r5, #20
 800e4c0:	f104 0214 	add.w	r2, r4, #20
 800e4c4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e4c8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e4cc:	f100 0514 	add.w	r5, r0, #20
 800e4d0:	f04f 0e00 	mov.w	lr, #0
 800e4d4:	f852 ab04 	ldr.w	sl, [r2], #4
 800e4d8:	f859 4b04 	ldr.w	r4, [r9], #4
 800e4dc:	fa1e f18a 	uxtah	r1, lr, sl
 800e4e0:	b2a3      	uxth	r3, r4
 800e4e2:	1ac9      	subs	r1, r1, r3
 800e4e4:	0c23      	lsrs	r3, r4, #16
 800e4e6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e4ea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e4ee:	b289      	uxth	r1, r1
 800e4f0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e4f4:	45c8      	cmp	r8, r9
 800e4f6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e4fa:	4694      	mov	ip, r2
 800e4fc:	f845 3b04 	str.w	r3, [r5], #4
 800e500:	d8e8      	bhi.n	800e4d4 <__mdiff+0x5c>
 800e502:	45bc      	cmp	ip, r7
 800e504:	d304      	bcc.n	800e510 <__mdiff+0x98>
 800e506:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e50a:	b183      	cbz	r3, 800e52e <__mdiff+0xb6>
 800e50c:	6106      	str	r6, [r0, #16]
 800e50e:	e7c5      	b.n	800e49c <__mdiff+0x24>
 800e510:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e514:	fa1e f381 	uxtah	r3, lr, r1
 800e518:	141a      	asrs	r2, r3, #16
 800e51a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e51e:	b29b      	uxth	r3, r3
 800e520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e524:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e528:	f845 3b04 	str.w	r3, [r5], #4
 800e52c:	e7e9      	b.n	800e502 <__mdiff+0x8a>
 800e52e:	3e01      	subs	r6, #1
 800e530:	e7e9      	b.n	800e506 <__mdiff+0x8e>

0800e532 <__d2b>:
 800e532:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e536:	460e      	mov	r6, r1
 800e538:	2101      	movs	r1, #1
 800e53a:	ec59 8b10 	vmov	r8, r9, d0
 800e53e:	4615      	mov	r5, r2
 800e540:	f7ff fd6a 	bl	800e018 <_Balloc>
 800e544:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e548:	4607      	mov	r7, r0
 800e54a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e54e:	bb34      	cbnz	r4, 800e59e <__d2b+0x6c>
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	f1b8 0300 	subs.w	r3, r8, #0
 800e556:	d027      	beq.n	800e5a8 <__d2b+0x76>
 800e558:	a802      	add	r0, sp, #8
 800e55a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e55e:	f7ff fe00 	bl	800e162 <__lo0bits>
 800e562:	9900      	ldr	r1, [sp, #0]
 800e564:	b1f0      	cbz	r0, 800e5a4 <__d2b+0x72>
 800e566:	9a01      	ldr	r2, [sp, #4]
 800e568:	f1c0 0320 	rsb	r3, r0, #32
 800e56c:	fa02 f303 	lsl.w	r3, r2, r3
 800e570:	430b      	orrs	r3, r1
 800e572:	40c2      	lsrs	r2, r0
 800e574:	617b      	str	r3, [r7, #20]
 800e576:	9201      	str	r2, [sp, #4]
 800e578:	9b01      	ldr	r3, [sp, #4]
 800e57a:	61bb      	str	r3, [r7, #24]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	bf14      	ite	ne
 800e580:	2102      	movne	r1, #2
 800e582:	2101      	moveq	r1, #1
 800e584:	6139      	str	r1, [r7, #16]
 800e586:	b1c4      	cbz	r4, 800e5ba <__d2b+0x88>
 800e588:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e58c:	4404      	add	r4, r0
 800e58e:	6034      	str	r4, [r6, #0]
 800e590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e594:	6028      	str	r0, [r5, #0]
 800e596:	4638      	mov	r0, r7
 800e598:	b003      	add	sp, #12
 800e59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e59e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5a2:	e7d5      	b.n	800e550 <__d2b+0x1e>
 800e5a4:	6179      	str	r1, [r7, #20]
 800e5a6:	e7e7      	b.n	800e578 <__d2b+0x46>
 800e5a8:	a801      	add	r0, sp, #4
 800e5aa:	f7ff fdda 	bl	800e162 <__lo0bits>
 800e5ae:	9b01      	ldr	r3, [sp, #4]
 800e5b0:	617b      	str	r3, [r7, #20]
 800e5b2:	2101      	movs	r1, #1
 800e5b4:	6139      	str	r1, [r7, #16]
 800e5b6:	3020      	adds	r0, #32
 800e5b8:	e7e5      	b.n	800e586 <__d2b+0x54>
 800e5ba:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e5be:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5c2:	6030      	str	r0, [r6, #0]
 800e5c4:	6918      	ldr	r0, [r3, #16]
 800e5c6:	f7ff fdad 	bl	800e124 <__hi0bits>
 800e5ca:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e5ce:	e7e1      	b.n	800e594 <__d2b+0x62>

0800e5d0 <_calloc_r>:
 800e5d0:	b538      	push	{r3, r4, r5, lr}
 800e5d2:	fb02 f401 	mul.w	r4, r2, r1
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	f000 f856 	bl	800e688 <_malloc_r>
 800e5dc:	4605      	mov	r5, r0
 800e5de:	b118      	cbz	r0, 800e5e8 <_calloc_r+0x18>
 800e5e0:	4622      	mov	r2, r4
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	f7fd fef9 	bl	800c3da <memset>
 800e5e8:	4628      	mov	r0, r5
 800e5ea:	bd38      	pop	{r3, r4, r5, pc}

0800e5ec <_free_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	2900      	cmp	r1, #0
 800e5f2:	d045      	beq.n	800e680 <_free_r+0x94>
 800e5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5f8:	1f0c      	subs	r4, r1, #4
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	bfb8      	it	lt
 800e5fe:	18e4      	addlt	r4, r4, r3
 800e600:	f000 fa98 	bl	800eb34 <__malloc_lock>
 800e604:	4a1f      	ldr	r2, [pc, #124]	; (800e684 <_free_r+0x98>)
 800e606:	6813      	ldr	r3, [r2, #0]
 800e608:	4610      	mov	r0, r2
 800e60a:	b933      	cbnz	r3, 800e61a <_free_r+0x2e>
 800e60c:	6063      	str	r3, [r4, #4]
 800e60e:	6014      	str	r4, [r2, #0]
 800e610:	4628      	mov	r0, r5
 800e612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e616:	f000 ba8e 	b.w	800eb36 <__malloc_unlock>
 800e61a:	42a3      	cmp	r3, r4
 800e61c:	d90c      	bls.n	800e638 <_free_r+0x4c>
 800e61e:	6821      	ldr	r1, [r4, #0]
 800e620:	1862      	adds	r2, r4, r1
 800e622:	4293      	cmp	r3, r2
 800e624:	bf04      	itt	eq
 800e626:	681a      	ldreq	r2, [r3, #0]
 800e628:	685b      	ldreq	r3, [r3, #4]
 800e62a:	6063      	str	r3, [r4, #4]
 800e62c:	bf04      	itt	eq
 800e62e:	1852      	addeq	r2, r2, r1
 800e630:	6022      	streq	r2, [r4, #0]
 800e632:	6004      	str	r4, [r0, #0]
 800e634:	e7ec      	b.n	800e610 <_free_r+0x24>
 800e636:	4613      	mov	r3, r2
 800e638:	685a      	ldr	r2, [r3, #4]
 800e63a:	b10a      	cbz	r2, 800e640 <_free_r+0x54>
 800e63c:	42a2      	cmp	r2, r4
 800e63e:	d9fa      	bls.n	800e636 <_free_r+0x4a>
 800e640:	6819      	ldr	r1, [r3, #0]
 800e642:	1858      	adds	r0, r3, r1
 800e644:	42a0      	cmp	r0, r4
 800e646:	d10b      	bne.n	800e660 <_free_r+0x74>
 800e648:	6820      	ldr	r0, [r4, #0]
 800e64a:	4401      	add	r1, r0
 800e64c:	1858      	adds	r0, r3, r1
 800e64e:	4282      	cmp	r2, r0
 800e650:	6019      	str	r1, [r3, #0]
 800e652:	d1dd      	bne.n	800e610 <_free_r+0x24>
 800e654:	6810      	ldr	r0, [r2, #0]
 800e656:	6852      	ldr	r2, [r2, #4]
 800e658:	605a      	str	r2, [r3, #4]
 800e65a:	4401      	add	r1, r0
 800e65c:	6019      	str	r1, [r3, #0]
 800e65e:	e7d7      	b.n	800e610 <_free_r+0x24>
 800e660:	d902      	bls.n	800e668 <_free_r+0x7c>
 800e662:	230c      	movs	r3, #12
 800e664:	602b      	str	r3, [r5, #0]
 800e666:	e7d3      	b.n	800e610 <_free_r+0x24>
 800e668:	6820      	ldr	r0, [r4, #0]
 800e66a:	1821      	adds	r1, r4, r0
 800e66c:	428a      	cmp	r2, r1
 800e66e:	bf04      	itt	eq
 800e670:	6811      	ldreq	r1, [r2, #0]
 800e672:	6852      	ldreq	r2, [r2, #4]
 800e674:	6062      	str	r2, [r4, #4]
 800e676:	bf04      	itt	eq
 800e678:	1809      	addeq	r1, r1, r0
 800e67a:	6021      	streq	r1, [r4, #0]
 800e67c:	605c      	str	r4, [r3, #4]
 800e67e:	e7c7      	b.n	800e610 <_free_r+0x24>
 800e680:	bd38      	pop	{r3, r4, r5, pc}
 800e682:	bf00      	nop
 800e684:	20004d04 	.word	0x20004d04

0800e688 <_malloc_r>:
 800e688:	b570      	push	{r4, r5, r6, lr}
 800e68a:	1ccd      	adds	r5, r1, #3
 800e68c:	f025 0503 	bic.w	r5, r5, #3
 800e690:	3508      	adds	r5, #8
 800e692:	2d0c      	cmp	r5, #12
 800e694:	bf38      	it	cc
 800e696:	250c      	movcc	r5, #12
 800e698:	2d00      	cmp	r5, #0
 800e69a:	4606      	mov	r6, r0
 800e69c:	db01      	blt.n	800e6a2 <_malloc_r+0x1a>
 800e69e:	42a9      	cmp	r1, r5
 800e6a0:	d903      	bls.n	800e6aa <_malloc_r+0x22>
 800e6a2:	230c      	movs	r3, #12
 800e6a4:	6033      	str	r3, [r6, #0]
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	bd70      	pop	{r4, r5, r6, pc}
 800e6aa:	f000 fa43 	bl	800eb34 <__malloc_lock>
 800e6ae:	4a21      	ldr	r2, [pc, #132]	; (800e734 <_malloc_r+0xac>)
 800e6b0:	6814      	ldr	r4, [r2, #0]
 800e6b2:	4621      	mov	r1, r4
 800e6b4:	b991      	cbnz	r1, 800e6dc <_malloc_r+0x54>
 800e6b6:	4c20      	ldr	r4, [pc, #128]	; (800e738 <_malloc_r+0xb0>)
 800e6b8:	6823      	ldr	r3, [r4, #0]
 800e6ba:	b91b      	cbnz	r3, 800e6c4 <_malloc_r+0x3c>
 800e6bc:	4630      	mov	r0, r6
 800e6be:	f000 f97d 	bl	800e9bc <_sbrk_r>
 800e6c2:	6020      	str	r0, [r4, #0]
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f000 f978 	bl	800e9bc <_sbrk_r>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d124      	bne.n	800e71a <_malloc_r+0x92>
 800e6d0:	230c      	movs	r3, #12
 800e6d2:	6033      	str	r3, [r6, #0]
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f000 fa2e 	bl	800eb36 <__malloc_unlock>
 800e6da:	e7e4      	b.n	800e6a6 <_malloc_r+0x1e>
 800e6dc:	680b      	ldr	r3, [r1, #0]
 800e6de:	1b5b      	subs	r3, r3, r5
 800e6e0:	d418      	bmi.n	800e714 <_malloc_r+0x8c>
 800e6e2:	2b0b      	cmp	r3, #11
 800e6e4:	d90f      	bls.n	800e706 <_malloc_r+0x7e>
 800e6e6:	600b      	str	r3, [r1, #0]
 800e6e8:	50cd      	str	r5, [r1, r3]
 800e6ea:	18cc      	adds	r4, r1, r3
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	f000 fa22 	bl	800eb36 <__malloc_unlock>
 800e6f2:	f104 000b 	add.w	r0, r4, #11
 800e6f6:	1d23      	adds	r3, r4, #4
 800e6f8:	f020 0007 	bic.w	r0, r0, #7
 800e6fc:	1ac3      	subs	r3, r0, r3
 800e6fe:	d0d3      	beq.n	800e6a8 <_malloc_r+0x20>
 800e700:	425a      	negs	r2, r3
 800e702:	50e2      	str	r2, [r4, r3]
 800e704:	e7d0      	b.n	800e6a8 <_malloc_r+0x20>
 800e706:	428c      	cmp	r4, r1
 800e708:	684b      	ldr	r3, [r1, #4]
 800e70a:	bf16      	itet	ne
 800e70c:	6063      	strne	r3, [r4, #4]
 800e70e:	6013      	streq	r3, [r2, #0]
 800e710:	460c      	movne	r4, r1
 800e712:	e7eb      	b.n	800e6ec <_malloc_r+0x64>
 800e714:	460c      	mov	r4, r1
 800e716:	6849      	ldr	r1, [r1, #4]
 800e718:	e7cc      	b.n	800e6b4 <_malloc_r+0x2c>
 800e71a:	1cc4      	adds	r4, r0, #3
 800e71c:	f024 0403 	bic.w	r4, r4, #3
 800e720:	42a0      	cmp	r0, r4
 800e722:	d005      	beq.n	800e730 <_malloc_r+0xa8>
 800e724:	1a21      	subs	r1, r4, r0
 800e726:	4630      	mov	r0, r6
 800e728:	f000 f948 	bl	800e9bc <_sbrk_r>
 800e72c:	3001      	adds	r0, #1
 800e72e:	d0cf      	beq.n	800e6d0 <_malloc_r+0x48>
 800e730:	6025      	str	r5, [r4, #0]
 800e732:	e7db      	b.n	800e6ec <_malloc_r+0x64>
 800e734:	20004d04 	.word	0x20004d04
 800e738:	20004d08 	.word	0x20004d08

0800e73c <__sfputc_r>:
 800e73c:	6893      	ldr	r3, [r2, #8]
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b00      	cmp	r3, #0
 800e742:	b410      	push	{r4}
 800e744:	6093      	str	r3, [r2, #8]
 800e746:	da08      	bge.n	800e75a <__sfputc_r+0x1e>
 800e748:	6994      	ldr	r4, [r2, #24]
 800e74a:	42a3      	cmp	r3, r4
 800e74c:	db01      	blt.n	800e752 <__sfputc_r+0x16>
 800e74e:	290a      	cmp	r1, #10
 800e750:	d103      	bne.n	800e75a <__sfputc_r+0x1e>
 800e752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e756:	f7fe bb65 	b.w	800ce24 <__swbuf_r>
 800e75a:	6813      	ldr	r3, [r2, #0]
 800e75c:	1c58      	adds	r0, r3, #1
 800e75e:	6010      	str	r0, [r2, #0]
 800e760:	7019      	strb	r1, [r3, #0]
 800e762:	4608      	mov	r0, r1
 800e764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <__sfputs_r>:
 800e76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	4614      	mov	r4, r2
 800e772:	18d5      	adds	r5, r2, r3
 800e774:	42ac      	cmp	r4, r5
 800e776:	d101      	bne.n	800e77c <__sfputs_r+0x12>
 800e778:	2000      	movs	r0, #0
 800e77a:	e007      	b.n	800e78c <__sfputs_r+0x22>
 800e77c:	463a      	mov	r2, r7
 800e77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e782:	4630      	mov	r0, r6
 800e784:	f7ff ffda 	bl	800e73c <__sfputc_r>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d1f3      	bne.n	800e774 <__sfputs_r+0xa>
 800e78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e790 <_vfiprintf_r>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	460c      	mov	r4, r1
 800e796:	b09d      	sub	sp, #116	; 0x74
 800e798:	4617      	mov	r7, r2
 800e79a:	461d      	mov	r5, r3
 800e79c:	4606      	mov	r6, r0
 800e79e:	b118      	cbz	r0, 800e7a8 <_vfiprintf_r+0x18>
 800e7a0:	6983      	ldr	r3, [r0, #24]
 800e7a2:	b90b      	cbnz	r3, 800e7a8 <_vfiprintf_r+0x18>
 800e7a4:	f7ff fb34 	bl	800de10 <__sinit>
 800e7a8:	4b7c      	ldr	r3, [pc, #496]	; (800e99c <_vfiprintf_r+0x20c>)
 800e7aa:	429c      	cmp	r4, r3
 800e7ac:	d158      	bne.n	800e860 <_vfiprintf_r+0xd0>
 800e7ae:	6874      	ldr	r4, [r6, #4]
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	0718      	lsls	r0, r3, #28
 800e7b4:	d55e      	bpl.n	800e874 <_vfiprintf_r+0xe4>
 800e7b6:	6923      	ldr	r3, [r4, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d05b      	beq.n	800e874 <_vfiprintf_r+0xe4>
 800e7bc:	2300      	movs	r3, #0
 800e7be:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c0:	2320      	movs	r3, #32
 800e7c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e7c6:	2330      	movs	r3, #48	; 0x30
 800e7c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e7cc:	9503      	str	r5, [sp, #12]
 800e7ce:	f04f 0b01 	mov.w	fp, #1
 800e7d2:	46b8      	mov	r8, r7
 800e7d4:	4645      	mov	r5, r8
 800e7d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e7da:	b10b      	cbz	r3, 800e7e0 <_vfiprintf_r+0x50>
 800e7dc:	2b25      	cmp	r3, #37	; 0x25
 800e7de:	d154      	bne.n	800e88a <_vfiprintf_r+0xfa>
 800e7e0:	ebb8 0a07 	subs.w	sl, r8, r7
 800e7e4:	d00b      	beq.n	800e7fe <_vfiprintf_r+0x6e>
 800e7e6:	4653      	mov	r3, sl
 800e7e8:	463a      	mov	r2, r7
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7ff ffbc 	bl	800e76a <__sfputs_r>
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	f000 80c2 	beq.w	800e97c <_vfiprintf_r+0x1ec>
 800e7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7fa:	4453      	add	r3, sl
 800e7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e7fe:	f898 3000 	ldrb.w	r3, [r8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	f000 80ba 	beq.w	800e97c <_vfiprintf_r+0x1ec>
 800e808:	2300      	movs	r3, #0
 800e80a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e80e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e812:	9304      	str	r3, [sp, #16]
 800e814:	9307      	str	r3, [sp, #28]
 800e816:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e81a:	931a      	str	r3, [sp, #104]	; 0x68
 800e81c:	46a8      	mov	r8, r5
 800e81e:	2205      	movs	r2, #5
 800e820:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e824:	485e      	ldr	r0, [pc, #376]	; (800e9a0 <_vfiprintf_r+0x210>)
 800e826:	f7f1 fd03 	bl	8000230 <memchr>
 800e82a:	9b04      	ldr	r3, [sp, #16]
 800e82c:	bb78      	cbnz	r0, 800e88e <_vfiprintf_r+0xfe>
 800e82e:	06d9      	lsls	r1, r3, #27
 800e830:	bf44      	itt	mi
 800e832:	2220      	movmi	r2, #32
 800e834:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e838:	071a      	lsls	r2, r3, #28
 800e83a:	bf44      	itt	mi
 800e83c:	222b      	movmi	r2, #43	; 0x2b
 800e83e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e842:	782a      	ldrb	r2, [r5, #0]
 800e844:	2a2a      	cmp	r2, #42	; 0x2a
 800e846:	d02a      	beq.n	800e89e <_vfiprintf_r+0x10e>
 800e848:	9a07      	ldr	r2, [sp, #28]
 800e84a:	46a8      	mov	r8, r5
 800e84c:	2000      	movs	r0, #0
 800e84e:	250a      	movs	r5, #10
 800e850:	4641      	mov	r1, r8
 800e852:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e856:	3b30      	subs	r3, #48	; 0x30
 800e858:	2b09      	cmp	r3, #9
 800e85a:	d969      	bls.n	800e930 <_vfiprintf_r+0x1a0>
 800e85c:	b360      	cbz	r0, 800e8b8 <_vfiprintf_r+0x128>
 800e85e:	e024      	b.n	800e8aa <_vfiprintf_r+0x11a>
 800e860:	4b50      	ldr	r3, [pc, #320]	; (800e9a4 <_vfiprintf_r+0x214>)
 800e862:	429c      	cmp	r4, r3
 800e864:	d101      	bne.n	800e86a <_vfiprintf_r+0xda>
 800e866:	68b4      	ldr	r4, [r6, #8]
 800e868:	e7a2      	b.n	800e7b0 <_vfiprintf_r+0x20>
 800e86a:	4b4f      	ldr	r3, [pc, #316]	; (800e9a8 <_vfiprintf_r+0x218>)
 800e86c:	429c      	cmp	r4, r3
 800e86e:	bf08      	it	eq
 800e870:	68f4      	ldreq	r4, [r6, #12]
 800e872:	e79d      	b.n	800e7b0 <_vfiprintf_r+0x20>
 800e874:	4621      	mov	r1, r4
 800e876:	4630      	mov	r0, r6
 800e878:	f7fe fb26 	bl	800cec8 <__swsetup_r>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d09d      	beq.n	800e7bc <_vfiprintf_r+0x2c>
 800e880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e884:	b01d      	add	sp, #116	; 0x74
 800e886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e88a:	46a8      	mov	r8, r5
 800e88c:	e7a2      	b.n	800e7d4 <_vfiprintf_r+0x44>
 800e88e:	4a44      	ldr	r2, [pc, #272]	; (800e9a0 <_vfiprintf_r+0x210>)
 800e890:	1a80      	subs	r0, r0, r2
 800e892:	fa0b f000 	lsl.w	r0, fp, r0
 800e896:	4318      	orrs	r0, r3
 800e898:	9004      	str	r0, [sp, #16]
 800e89a:	4645      	mov	r5, r8
 800e89c:	e7be      	b.n	800e81c <_vfiprintf_r+0x8c>
 800e89e:	9a03      	ldr	r2, [sp, #12]
 800e8a0:	1d11      	adds	r1, r2, #4
 800e8a2:	6812      	ldr	r2, [r2, #0]
 800e8a4:	9103      	str	r1, [sp, #12]
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	db01      	blt.n	800e8ae <_vfiprintf_r+0x11e>
 800e8aa:	9207      	str	r2, [sp, #28]
 800e8ac:	e004      	b.n	800e8b8 <_vfiprintf_r+0x128>
 800e8ae:	4252      	negs	r2, r2
 800e8b0:	f043 0302 	orr.w	r3, r3, #2
 800e8b4:	9207      	str	r2, [sp, #28]
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	f898 3000 	ldrb.w	r3, [r8]
 800e8bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e8be:	d10e      	bne.n	800e8de <_vfiprintf_r+0x14e>
 800e8c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800e8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e8c6:	d138      	bne.n	800e93a <_vfiprintf_r+0x1aa>
 800e8c8:	9b03      	ldr	r3, [sp, #12]
 800e8ca:	1d1a      	adds	r2, r3, #4
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	9203      	str	r2, [sp, #12]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	bfb8      	it	lt
 800e8d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e8d8:	f108 0802 	add.w	r8, r8, #2
 800e8dc:	9305      	str	r3, [sp, #20]
 800e8de:	4d33      	ldr	r5, [pc, #204]	; (800e9ac <_vfiprintf_r+0x21c>)
 800e8e0:	f898 1000 	ldrb.w	r1, [r8]
 800e8e4:	2203      	movs	r2, #3
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	f7f1 fca2 	bl	8000230 <memchr>
 800e8ec:	b140      	cbz	r0, 800e900 <_vfiprintf_r+0x170>
 800e8ee:	2340      	movs	r3, #64	; 0x40
 800e8f0:	1b40      	subs	r0, r0, r5
 800e8f2:	fa03 f000 	lsl.w	r0, r3, r0
 800e8f6:	9b04      	ldr	r3, [sp, #16]
 800e8f8:	4303      	orrs	r3, r0
 800e8fa:	f108 0801 	add.w	r8, r8, #1
 800e8fe:	9304      	str	r3, [sp, #16]
 800e900:	f898 1000 	ldrb.w	r1, [r8]
 800e904:	482a      	ldr	r0, [pc, #168]	; (800e9b0 <_vfiprintf_r+0x220>)
 800e906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e90a:	2206      	movs	r2, #6
 800e90c:	f108 0701 	add.w	r7, r8, #1
 800e910:	f7f1 fc8e 	bl	8000230 <memchr>
 800e914:	2800      	cmp	r0, #0
 800e916:	d037      	beq.n	800e988 <_vfiprintf_r+0x1f8>
 800e918:	4b26      	ldr	r3, [pc, #152]	; (800e9b4 <_vfiprintf_r+0x224>)
 800e91a:	bb1b      	cbnz	r3, 800e964 <_vfiprintf_r+0x1d4>
 800e91c:	9b03      	ldr	r3, [sp, #12]
 800e91e:	3307      	adds	r3, #7
 800e920:	f023 0307 	bic.w	r3, r3, #7
 800e924:	3308      	adds	r3, #8
 800e926:	9303      	str	r3, [sp, #12]
 800e928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e92a:	444b      	add	r3, r9
 800e92c:	9309      	str	r3, [sp, #36]	; 0x24
 800e92e:	e750      	b.n	800e7d2 <_vfiprintf_r+0x42>
 800e930:	fb05 3202 	mla	r2, r5, r2, r3
 800e934:	2001      	movs	r0, #1
 800e936:	4688      	mov	r8, r1
 800e938:	e78a      	b.n	800e850 <_vfiprintf_r+0xc0>
 800e93a:	2300      	movs	r3, #0
 800e93c:	f108 0801 	add.w	r8, r8, #1
 800e940:	9305      	str	r3, [sp, #20]
 800e942:	4619      	mov	r1, r3
 800e944:	250a      	movs	r5, #10
 800e946:	4640      	mov	r0, r8
 800e948:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e94c:	3a30      	subs	r2, #48	; 0x30
 800e94e:	2a09      	cmp	r2, #9
 800e950:	d903      	bls.n	800e95a <_vfiprintf_r+0x1ca>
 800e952:	2b00      	cmp	r3, #0
 800e954:	d0c3      	beq.n	800e8de <_vfiprintf_r+0x14e>
 800e956:	9105      	str	r1, [sp, #20]
 800e958:	e7c1      	b.n	800e8de <_vfiprintf_r+0x14e>
 800e95a:	fb05 2101 	mla	r1, r5, r1, r2
 800e95e:	2301      	movs	r3, #1
 800e960:	4680      	mov	r8, r0
 800e962:	e7f0      	b.n	800e946 <_vfiprintf_r+0x1b6>
 800e964:	ab03      	add	r3, sp, #12
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	4622      	mov	r2, r4
 800e96a:	4b13      	ldr	r3, [pc, #76]	; (800e9b8 <_vfiprintf_r+0x228>)
 800e96c:	a904      	add	r1, sp, #16
 800e96e:	4630      	mov	r0, r6
 800e970:	f7fd fdd0 	bl	800c514 <_printf_float>
 800e974:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e978:	4681      	mov	r9, r0
 800e97a:	d1d5      	bne.n	800e928 <_vfiprintf_r+0x198>
 800e97c:	89a3      	ldrh	r3, [r4, #12]
 800e97e:	065b      	lsls	r3, r3, #25
 800e980:	f53f af7e 	bmi.w	800e880 <_vfiprintf_r+0xf0>
 800e984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e986:	e77d      	b.n	800e884 <_vfiprintf_r+0xf4>
 800e988:	ab03      	add	r3, sp, #12
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	4622      	mov	r2, r4
 800e98e:	4b0a      	ldr	r3, [pc, #40]	; (800e9b8 <_vfiprintf_r+0x228>)
 800e990:	a904      	add	r1, sp, #16
 800e992:	4630      	mov	r0, r6
 800e994:	f7fe f874 	bl	800ca80 <_printf_i>
 800e998:	e7ec      	b.n	800e974 <_vfiprintf_r+0x1e4>
 800e99a:	bf00      	nop
 800e99c:	0800fa8c 	.word	0x0800fa8c
 800e9a0:	0800fbcc 	.word	0x0800fbcc
 800e9a4:	0800faac 	.word	0x0800faac
 800e9a8:	0800fa6c 	.word	0x0800fa6c
 800e9ac:	0800fbd2 	.word	0x0800fbd2
 800e9b0:	0800fbd6 	.word	0x0800fbd6
 800e9b4:	0800c515 	.word	0x0800c515
 800e9b8:	0800e76b 	.word	0x0800e76b

0800e9bc <_sbrk_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4c06      	ldr	r4, [pc, #24]	; (800e9d8 <_sbrk_r+0x1c>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4605      	mov	r5, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	6023      	str	r3, [r4, #0]
 800e9c8:	f7f5 f862 	bl	8003a90 <_sbrk>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d102      	bne.n	800e9d6 <_sbrk_r+0x1a>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	b103      	cbz	r3, 800e9d6 <_sbrk_r+0x1a>
 800e9d4:	602b      	str	r3, [r5, #0]
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	200053f0 	.word	0x200053f0

0800e9dc <__sread>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	460c      	mov	r4, r1
 800e9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9e4:	f000 f8a8 	bl	800eb38 <_read_r>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	bfab      	itete	ge
 800e9ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e9f0:	181b      	addge	r3, r3, r0
 800e9f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9f6:	bfac      	ite	ge
 800e9f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9fa:	81a3      	strhlt	r3, [r4, #12]
 800e9fc:	bd10      	pop	{r4, pc}

0800e9fe <__swrite>:
 800e9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea02:	461f      	mov	r7, r3
 800ea04:	898b      	ldrh	r3, [r1, #12]
 800ea06:	05db      	lsls	r3, r3, #23
 800ea08:	4605      	mov	r5, r0
 800ea0a:	460c      	mov	r4, r1
 800ea0c:	4616      	mov	r6, r2
 800ea0e:	d505      	bpl.n	800ea1c <__swrite+0x1e>
 800ea10:	2302      	movs	r3, #2
 800ea12:	2200      	movs	r2, #0
 800ea14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea18:	f000 f868 	bl	800eaec <_lseek_r>
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ea26:	81a3      	strh	r3, [r4, #12]
 800ea28:	4632      	mov	r2, r6
 800ea2a:	463b      	mov	r3, r7
 800ea2c:	4628      	mov	r0, r5
 800ea2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea32:	f000 b817 	b.w	800ea64 <_write_r>

0800ea36 <__sseek>:
 800ea36:	b510      	push	{r4, lr}
 800ea38:	460c      	mov	r4, r1
 800ea3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea3e:	f000 f855 	bl	800eaec <_lseek_r>
 800ea42:	1c43      	adds	r3, r0, #1
 800ea44:	89a3      	ldrh	r3, [r4, #12]
 800ea46:	bf15      	itete	ne
 800ea48:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea52:	81a3      	strheq	r3, [r4, #12]
 800ea54:	bf18      	it	ne
 800ea56:	81a3      	strhne	r3, [r4, #12]
 800ea58:	bd10      	pop	{r4, pc}

0800ea5a <__sclose>:
 800ea5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea5e:	f000 b813 	b.w	800ea88 <_close_r>
	...

0800ea64 <_write_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4c07      	ldr	r4, [pc, #28]	; (800ea84 <_write_r+0x20>)
 800ea68:	4605      	mov	r5, r0
 800ea6a:	4608      	mov	r0, r1
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	2200      	movs	r2, #0
 800ea70:	6022      	str	r2, [r4, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	f7f4 ffbb 	bl	80039ee <_write>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_write_r+0x1e>
 800ea7c:	6823      	ldr	r3, [r4, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_write_r+0x1e>
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	200053f0 	.word	0x200053f0

0800ea88 <_close_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4c06      	ldr	r4, [pc, #24]	; (800eaa4 <_close_r+0x1c>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4605      	mov	r5, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	6023      	str	r3, [r4, #0]
 800ea94:	f7f4 ffc7 	bl	8003a26 <_close>
 800ea98:	1c43      	adds	r3, r0, #1
 800ea9a:	d102      	bne.n	800eaa2 <_close_r+0x1a>
 800ea9c:	6823      	ldr	r3, [r4, #0]
 800ea9e:	b103      	cbz	r3, 800eaa2 <_close_r+0x1a>
 800eaa0:	602b      	str	r3, [r5, #0]
 800eaa2:	bd38      	pop	{r3, r4, r5, pc}
 800eaa4:	200053f0 	.word	0x200053f0

0800eaa8 <_fstat_r>:
 800eaa8:	b538      	push	{r3, r4, r5, lr}
 800eaaa:	4c07      	ldr	r4, [pc, #28]	; (800eac8 <_fstat_r+0x20>)
 800eaac:	2300      	movs	r3, #0
 800eaae:	4605      	mov	r5, r0
 800eab0:	4608      	mov	r0, r1
 800eab2:	4611      	mov	r1, r2
 800eab4:	6023      	str	r3, [r4, #0]
 800eab6:	f7f4 ffc2 	bl	8003a3e <_fstat>
 800eaba:	1c43      	adds	r3, r0, #1
 800eabc:	d102      	bne.n	800eac4 <_fstat_r+0x1c>
 800eabe:	6823      	ldr	r3, [r4, #0]
 800eac0:	b103      	cbz	r3, 800eac4 <_fstat_r+0x1c>
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	bd38      	pop	{r3, r4, r5, pc}
 800eac6:	bf00      	nop
 800eac8:	200053f0 	.word	0x200053f0

0800eacc <_isatty_r>:
 800eacc:	b538      	push	{r3, r4, r5, lr}
 800eace:	4c06      	ldr	r4, [pc, #24]	; (800eae8 <_isatty_r+0x1c>)
 800ead0:	2300      	movs	r3, #0
 800ead2:	4605      	mov	r5, r0
 800ead4:	4608      	mov	r0, r1
 800ead6:	6023      	str	r3, [r4, #0]
 800ead8:	f7f4 ffc1 	bl	8003a5e <_isatty>
 800eadc:	1c43      	adds	r3, r0, #1
 800eade:	d102      	bne.n	800eae6 <_isatty_r+0x1a>
 800eae0:	6823      	ldr	r3, [r4, #0]
 800eae2:	b103      	cbz	r3, 800eae6 <_isatty_r+0x1a>
 800eae4:	602b      	str	r3, [r5, #0]
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	200053f0 	.word	0x200053f0

0800eaec <_lseek_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4c07      	ldr	r4, [pc, #28]	; (800eb0c <_lseek_r+0x20>)
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	4608      	mov	r0, r1
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	6022      	str	r2, [r4, #0]
 800eafa:	461a      	mov	r2, r3
 800eafc:	f7f4 ffba 	bl	8003a74 <_lseek>
 800eb00:	1c43      	adds	r3, r0, #1
 800eb02:	d102      	bne.n	800eb0a <_lseek_r+0x1e>
 800eb04:	6823      	ldr	r3, [r4, #0]
 800eb06:	b103      	cbz	r3, 800eb0a <_lseek_r+0x1e>
 800eb08:	602b      	str	r3, [r5, #0]
 800eb0a:	bd38      	pop	{r3, r4, r5, pc}
 800eb0c:	200053f0 	.word	0x200053f0

0800eb10 <__ascii_mbtowc>:
 800eb10:	b082      	sub	sp, #8
 800eb12:	b901      	cbnz	r1, 800eb16 <__ascii_mbtowc+0x6>
 800eb14:	a901      	add	r1, sp, #4
 800eb16:	b142      	cbz	r2, 800eb2a <__ascii_mbtowc+0x1a>
 800eb18:	b14b      	cbz	r3, 800eb2e <__ascii_mbtowc+0x1e>
 800eb1a:	7813      	ldrb	r3, [r2, #0]
 800eb1c:	600b      	str	r3, [r1, #0]
 800eb1e:	7812      	ldrb	r2, [r2, #0]
 800eb20:	1c10      	adds	r0, r2, #0
 800eb22:	bf18      	it	ne
 800eb24:	2001      	movne	r0, #1
 800eb26:	b002      	add	sp, #8
 800eb28:	4770      	bx	lr
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	e7fb      	b.n	800eb26 <__ascii_mbtowc+0x16>
 800eb2e:	f06f 0001 	mvn.w	r0, #1
 800eb32:	e7f8      	b.n	800eb26 <__ascii_mbtowc+0x16>

0800eb34 <__malloc_lock>:
 800eb34:	4770      	bx	lr

0800eb36 <__malloc_unlock>:
 800eb36:	4770      	bx	lr

0800eb38 <_read_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4c07      	ldr	r4, [pc, #28]	; (800eb58 <_read_r+0x20>)
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	4608      	mov	r0, r1
 800eb40:	4611      	mov	r1, r2
 800eb42:	2200      	movs	r2, #0
 800eb44:	6022      	str	r2, [r4, #0]
 800eb46:	461a      	mov	r2, r3
 800eb48:	f7f4 ff34 	bl	80039b4 <_read>
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	d102      	bne.n	800eb56 <_read_r+0x1e>
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	b103      	cbz	r3, 800eb56 <_read_r+0x1e>
 800eb54:	602b      	str	r3, [r5, #0]
 800eb56:	bd38      	pop	{r3, r4, r5, pc}
 800eb58:	200053f0 	.word	0x200053f0

0800eb5c <__ascii_wctomb>:
 800eb5c:	b149      	cbz	r1, 800eb72 <__ascii_wctomb+0x16>
 800eb5e:	2aff      	cmp	r2, #255	; 0xff
 800eb60:	bf85      	ittet	hi
 800eb62:	238a      	movhi	r3, #138	; 0x8a
 800eb64:	6003      	strhi	r3, [r0, #0]
 800eb66:	700a      	strbls	r2, [r1, #0]
 800eb68:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800eb6c:	bf98      	it	ls
 800eb6e:	2001      	movls	r0, #1
 800eb70:	4770      	bx	lr
 800eb72:	4608      	mov	r0, r1
 800eb74:	4770      	bx	lr
	...

0800eb78 <_init>:
 800eb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb7a:	bf00      	nop
 800eb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb7e:	bc08      	pop	{r3}
 800eb80:	469e      	mov	lr, r3
 800eb82:	4770      	bx	lr

0800eb84 <_fini>:
 800eb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb86:	bf00      	nop
 800eb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb8a:	bc08      	pop	{r3}
 800eb8c:	469e      	mov	lr, r3
 800eb8e:	4770      	bx	lr
