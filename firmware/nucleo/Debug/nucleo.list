
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f58c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c14  0800f770  0800f770  0001f770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011384  08011384  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011384  08011384  00021384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801138c  0801138c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801138c  0801138c  0002138c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011390  08011390  00021390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011394  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005130  200001e4  08011578  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005314  08011578  00035314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003322c  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b2a  00000000  00000000  00063440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  00069f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  0006be90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a6bf  00000000  00000000  0006dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026038  00000000  00000000  0009819f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f537b  00000000  00000000  000be1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  001b3552  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000920c  00000000  00000000  001b3618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000d8  00000000  00000000  001bc824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f754 	.word	0x0800f754

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800f754 	.word	0x0800f754

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <_ZN7EncoderC1Ev+0x2c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	080106e8 	.word	0x080106e8

08000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffdd 	bl	8000f90 <_ZN7EncoderC1Ev>
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	829a      	strh	r2, [r3, #20]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	619a      	str	r2, [r3, #24]
{

}
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	080106d8 	.word	0x080106d8

08001004 <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8f5 	bl	80011fc <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 800101a:	b590      	push	{r4, r7, lr}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 8001022:	687c      	ldr	r4, [r7, #4]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f89f 	bl	8001168 <_ZN7AS5048A10ReadAngle_Ev>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	4620      	mov	r0, r4
 8001034:	f000 f9e8 	bl	8001408 <_ZN7Encoder9set_angleEf>
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}

08001040 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
	uint8_t par = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	2b0e      	cmp	r3, #14
 8001058:	d810      	bhi.n	800107c <_ZN7AS5048A15CalcEvenParity_Et+0x3c>
		par ^= ((val >> shift) & 0x1);
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	fa42 f303 	asr.w	r3, r2, r3
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b25a      	sxtb	r2, r3
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4053      	eors	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	3301      	adds	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e7eb      	b.n	8001054 <_ZN7AS5048A15CalcEvenParity_Et+0x14>
	}
	return par;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a0:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 80010a2:	787b      	ldrb	r3, [r7, #1]
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffbf 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80010c2:	4603      	mov	r3, r0
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	81fb      	strh	r3, [r7, #14]
	return pack;
 80010d2:	89fb      	ldrh	r3, [r7, #14]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010ee:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffa3 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80010fa:	4603      	mov	r3, r0
 80010fc:	03db      	lsls	r3, r3, #15
 80010fe:	b21a      	sxth	r2, r3
 8001100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
 8001108:	81fb      	strh	r3, [r7, #14]
	return pack;
 800110a:	89fb      	ldrh	r3, [r7, #14]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 800112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112e:	e016      	b.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff83 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	13db      	asrs	r3, r3, #15
 8001142:	429a      	cmp	r2, r3
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	e003      	b.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 8001170:	2201      	movs	r2, #1
 8001172:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff87 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 800117c:	4603      	mov	r3, r0
 800117e:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f85d 	bl	8001244 <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffa5 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8001192:	4603      	mov	r3, r0
 8001194:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 8001196:	89bb      	ldrh	r3, [r7, #12]
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f87c 	bl	8001298 <_ZN7AS5048A21SPITransmitReceive16_Et>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffb5 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 80011aa:	4603      	mov	r3, r0
 80011ac:	817b      	strh	r3, [r7, #10]
	return raw_angle_val * 360.0 / DATA_MAX;
 80011ae:	897b      	ldrh	r3, [r7, #10]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9df 	bl	8000574 <__aeabi_i2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <_ZN7AS5048A10ReadAngle_Ev+0x90>)
 80011bc:	f7ff fa44 	bl	8000648 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	a309      	add	r3, pc, #36	; (adr r3, 80011f0 <_ZN7AS5048A10ReadAngle_Ev+0x88>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fb65 	bl	800089c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0d 	bl	8000bf8 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	ee07 3a90 	vmov	s15, r3
}
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40cfff80 	.word	0x40cfff80
 80011f8:	40768000 	.word	0x40768000

080011fc <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 8001204:	2201      	movs	r2, #1
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff3e 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 800120e:	4603      	mov	r3, r0
 8001210:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f814 	bl	8001244 <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff5c 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8001224:	4603      	mov	r3, r0
 8001226:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001228:	89bb      	ldrh	r3, [r7, #12]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f833 	bl	8001298 <_ZN7AS5048A21SPITransmitReceive16_Et>
 8001232:	4603      	mov	r3, r0
 8001234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001238:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 800123a:	897b      	ldrh	r3, [r7, #10]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6918      	ldr	r0, [r3, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8a9b      	ldrh	r3, [r3, #20]
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	f004 fa8b 	bl	8005784 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68d8      	ldr	r0, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f107 010c 	add.w	r1, r7, #12
 800127a:	2202      	movs	r2, #2
 800127c:	f005 fd10 	bl	8006ca0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6918      	ldr	r0, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8a9b      	ldrh	r3, [r3, #20]
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	f004 fa7a 	bl	8005784 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6918      	ldr	r0, [r3, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a9b      	ldrh	r3, [r3, #20]
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	f004 fa61 	bl	8005784 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68d8      	ldr	r0, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2302      	movs	r3, #2
 80012d6:	f005 fe49 	bl	8006f6c <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6918      	ldr	r0, [r3, #16]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8a9b      	ldrh	r3, [r3, #20]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f004 fa4d 	bl	8005784 <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 80012ee:	7a3b      	ldrb	r3, [r7, #8]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 80012fe:	7a7b      	ldrb	r3, [r7, #9]
 8001300:	b29a      	uxth	r2, r3
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4313      	orrs	r3, r2
 8001306:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001308:	89fb      	ldrh	r3, [r7, #14]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0 * floor(raw_angle / 360.0);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff f939 	bl	8000598 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff f934 	bl	8000598 <__aeabi_f2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001336:	f7ff fab1 	bl	800089c <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b17 	vmov	d7, r2, r3
 8001342:	eeb0 0a47 	vmov.f32	s0, s14
 8001346:	eef0 0a67 	vmov.f32	s1, s15
 800134a:	f00b fbf1 	bl	800cb30 <floor>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001358:	f7ff f976 	bl	8000648 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7fe ffb8 	bl	80002d8 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc42 	bl	8000bf8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]
	if (wrapped_angle < 0) {
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d507      	bpl.n	8001396 <_ZN7Encoder10WrapAngle_Ef+0x82>
		wrapped_angle += 360.0;
 8001386:	edd7 7a03 	vldr	s15, [r7, #12]
 800138a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013ac <_ZN7Encoder10WrapAngle_Ef+0x98>
 800138e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001392:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	ee07 3a90 	vmov	s15, r3
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40768000 	.word	0x40768000
 80013ac:	43b40000 	.word	0x43b40000

080013b0 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 80013bc:	ed97 0a00 	vldr	s0, [r7]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffa7 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff8d 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 8001414:	ed97 0a00 	vldr	s0, [r7]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff7b 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 800141e:	eef0 7a40 	vmov.f32	s15, s0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN13CurrentSensor9LinkToADCEPtS0_S0_>:
 * is being transferred to a buffer via DMA.
 * @param[in] adc_counts_u_in Reference pointing to location in ADC buffer for phase U current.
 * @param[in] adc_counts_v_in Reference pointing to location in ADC buffer for phase V current.
 * @param[in] adc_counts_w_in Reference pointing to location in ADC buffer for phase W current.
 */
void CurrentSensor::LinkToADC(uint16_t* adc_counts_u_in, uint16_t* adc_counts_v_in, uint16_t* adc_counts_w_in) {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
	adc_counts_u_ = adc_counts_u_in;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	61da      	str	r2, [r3, #28]
	adc_counts_v_ = adc_counts_v_in;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	621a      	str	r2, [r3, #32]
	adc_counts_w_ = adc_counts_w_in;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_ZN13CurrentSensor12ReadCurrentsEv>:

void CurrentSensor::ReadCurrents() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	curr_u = (static_cast<float>(*adc_counts_u_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_ * MA_PER_A;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	899b      	ldrh	r3, [r3, #12]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	edd3 7a04 	vldr	s15, [r3, #16]
 8001488:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001492:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed93 7a06 	vldr	s14, [r3, #24]
 800149c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001550 <_ZN13CurrentSensor12ReadCurrentsEv+0xf4>
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	curr_v = (static_cast<float>(*adc_counts_v_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_ * MA_PER_A;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	899b      	ldrh	r3, [r3, #12]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80014dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ea:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001550 <_ZN13CurrentSensor12ReadCurrentsEv+0xf4>
 80014ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	edc3 7a01 	vstr	s15, [r3, #4]
	curr_w = (static_cast<float>(*adc_counts_w_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_ * MA_PER_A;;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	899b      	ldrh	r3, [r3, #12]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	edd3 7a04 	vldr	s15, [r3, #16]
 800151c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	edd3 7a05 	vldr	s15, [r3, #20]
 8001526:	ee77 6a67 	vsub.f32	s13, s14, s15
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001534:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001550 <_ZN13CurrentSensor12ReadCurrentsEv+0xf4>
 8001538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	447a0000 	.word	0x447a0000

08001554 <_ZN10HalfBridge18set_target_currentEf>:

/**
 * @brief Sets the target current of the half-bridge.
 * @param[in] target_current Target current, in milliamps.
 */
void HalfBridge::set_target_current(float target_current) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	ed87 0a00 	vstr	s0, [r7]
	target_current_ = target_current;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	605a      	str	r2, [r3, #4]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_ZN10HalfBridge11get_op_modeEv>:

/**
 * @brief Returns the operation mode of the half-bridge.
 * @retval Halfbridge operation mode.
 */
HalfBridge::OpMode HalfBridge::get_op_mode() {
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	return op_mode_;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7b1b      	ldrb	r3, [r3, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_ZN9STSPIN8304InitEv>:
const float kDutyCycleMin = 0.05f; // allow current measurement during D

/**
 * @brief Initializes the relevant channel of the STSPIN320 half-bridge.
 */
void STSPIN830::Init() {
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	pid_last_update_us = GetTickMicros(); // enable time intervals to be passed to PID controller
 8001592:	f000 fa71 	bl	8001a78 <_Z13GetTickMicrosv>
 8001596:	4602      	mov	r2, r0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
	HAL_TIM_PWM_Start(timer_, timer_channel_id_); // get the party started
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f006 f8d0 	bl	800774c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_channel_id_); // get the (complementary) party started
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f007 f986 	bl	80088c8 <HAL_TIMEx_PWMN_Start>
	is_initialized_ = true;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <_ZN9STSPIN8306UpdateEv>:

/**
 * Updates the PWM period of the half bridge based on the measured current. Should be called by the ConversionCplt callback
 * of the ADC, which should in turn have been called by a reset trigger event from the half bridge timer.
 */
void STSPIN830::Update() {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if (!is_initialized_) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80015da:	f083 0301 	eor.w	r3, r3, #1
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f040 80e6 	bne.w	80017b2 <_ZN9STSPIN8306UpdateEv+0x1e6>
		// Don't run until the important stuff is set up!
		return;
	}
	// Calculate current
	float curr_sense_adc_voltage = static_cast<float>(curr_sense_adc_counts_) / kADCMaxCounts * kADCMaxVolts;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f6:	eddf 6a71 	vldr	s13, [pc, #452]	; 80017bc <_ZN9STSPIN8306UpdateEv+0x1f0>
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80017c0 <_ZN9STSPIN8306UpdateEv+0x1f4>
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	edc7 7a03 	vstr	s15, [r7, #12]
	current_ma_ = (curr_sense_adc_voltage - kADCOffsetVolts) / kADCGain * 1000;
 800160a:	edd7 7a03 	vldr	s15, [r7, #12]
 800160e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80017c4 <_ZN9STSPIN8306UpdateEv+0x1f8>
 8001612:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001616:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80017c8 <_ZN9STSPIN8306UpdateEv+0x1fc>
 800161a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800161e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80017cc <_ZN9STSPIN8306UpdateEv+0x200>
 8001622:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edc3 7a07 	vstr	s15, [r3, #28]
	// TODO: set break bit for the PWM if current too large, enter FAULT state
	// Update target current
	uint32_t curr_time_us = GetTickMicros();
 800162c:	f000 fa24 	bl	8001a78 <_Z13GetTickMicrosv>
 8001630:	60b8      	str	r0, [r7, #8]
	// Calculate duty cycle for closed loop control
	duty_cycle_ -= pid.Update(target_current_ - current_ma_, (curr_time_us - pid_last_update_us) / 1000.0f);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a01 	vldr	s14, [r3, #4]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a07 	vldr	s15, [r3, #28]
 8001644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001658:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 80017cc <_ZN9STSPIN8306UpdateEv+0x200>
 800165c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001660:	eef0 0a66 	vmov.f32	s1, s13
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	4608      	mov	r0, r1
 800166a:	f000 f8f7 	bl	800185c <_ZN13PIDController6UpdateEff>
 800166e:	eeb0 7a40 	vmov.f32	s14, s0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001678:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (duty_cycle_ > kDutyCycleMax) {
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001688:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80017d0 <_ZN9STSPIN8306UpdateEv+0x204>
 800168c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	dd03      	ble.n	800169e <_ZN9STSPIN8306UpdateEv+0xd2>
		duty_cycle_ = kDutyCycleMax;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <_ZN9STSPIN8306UpdateEv+0x208>)
 800169a:	625a      	str	r2, [r3, #36]	; 0x24
 800169c:	e00c      	b.n	80016b8 <_ZN9STSPIN8306UpdateEv+0xec>
	} else if (duty_cycle_ < kDutyCycleMin) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016a4:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80017d8 <_ZN9STSPIN8306UpdateEv+0x20c>
 80016a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d502      	bpl.n	80016b8 <_ZN9STSPIN8306UpdateEv+0xec>
		duty_cycle_ = kDutyCycleMin;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a49      	ldr	r2, [pc, #292]	; (80017dc <_ZN9STSPIN8306UpdateEv+0x210>)
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	pid_last_update_us = curr_time_us;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	621a      	str	r2, [r3, #32]
	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_channel_id_, static_cast<uint16_t>(duty_cycle_ * kPulseMax));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d110      	bne.n	80016e8 <_ZN9STSPIN8306UpdateEv+0x11c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016cc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 80016d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d8:	ee17 3a90 	vmov	r3, s15
 80016dc:	b29a      	uxth	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
 80016e6:	e065      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d110      	bne.n	8001712 <_ZN9STSPIN8306UpdateEv+0x146>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016f6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 80016fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001702:	ee17 3a90 	vmov	r3, s15
 8001706:	b29a      	uxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
 8001710:	e050      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	2b08      	cmp	r3, #8
 8001718:	d110      	bne.n	800173c <_ZN9STSPIN8306UpdateEv+0x170>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001720:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 8001724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800172c:	ee17 3a90 	vmov	r3, s15
 8001730:	b29a      	uxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c
 800173a:	e03b      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	2b0c      	cmp	r3, #12
 8001742:	d110      	bne.n	8001766 <_ZN9STSPIN8306UpdateEv+0x19a>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800174a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001756:	ee17 3a90 	vmov	r3, s15
 800175a:	b29a      	uxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
 8001764:	e026      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	2b10      	cmp	r3, #16
 800176c:	d110      	bne.n	8001790 <_ZN9STSPIN8306UpdateEv+0x1c4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001774:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	ee17 3a90 	vmov	r3, s15
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	659a      	str	r2, [r3, #88]	; 0x58
 800178e:	e011      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001796:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80017e0 <_ZN9STSPIN8306UpdateEv+0x214>
 800179a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b0:	e000      	b.n	80017b4 <_ZN9STSPIN8306UpdateEv+0x1e8>
		return;
 80017b2:	bf00      	nop
}
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	457ff000 	.word	0x457ff000
 80017c0:	40533333 	.word	0x40533333
 80017c4:	3fc7ae14 	.word	0x3fc7ae14
 80017c8:	3f014121 	.word	0x3f014121
 80017cc:	447a0000 	.word	0x447a0000
 80017d0:	3f733333 	.word	0x3f733333
 80017d4:	3f733333 	.word	0x3f733333
 80017d8:	3d4ccccd 	.word	0x3d4ccccd
 80017dc:	3d4ccccd 	.word	0x3d4ccccd
 80017e0:	461c4000 	.word	0x461c4000

080017e4 <_ZN13PIDControllerC1Efffff>:
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] ramp_in Maximum ramp (derivative) of output.
 * @param[in] limit_in Maximum value of output.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, float ramp_in, float limit_in)
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6178      	str	r0, [r7, #20]
 80017ec:	ed87 0a04 	vstr	s0, [r7, #16]
 80017f0:	edc7 0a03 	vstr	s1, [r7, #12]
 80017f4:	ed87 1a02 	vstr	s2, [r7, #8]
 80017f8:	edc7 1a01 	vstr	s3, [r7, #4]
 80017fc:	ed87 2a00 	vstr	s4, [r7]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, ramp(ramp_in)
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){}
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	edd7 7a00 	vldr	s15, [r7]
 800181c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	dd01      	ble.n	800182a <_ZN13PIDControllerC1Efffff+0x46>
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	e000      	b.n	800182c <_ZN13PIDControllerC1Efffff+0x48>
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <_ZN13PIDControllerC1Efffff+0x74>)
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	6113      	str	r3, [r2, #16]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	4618      	mov	r0, r3
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	447a0000 	.word	0x447a0000

0800185c <_ZN13PIDController6UpdateEff>:
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 * @retval Calculated output response of PID controller.
 */
float PIDController::Update(float error, float ms_since_last_update) {
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	ed87 0a02 	vstr	s0, [r7, #8]
 8001868:	edc7 0a01 	vstr	s1, [r7, #4]
	if (ms_since_last_update <= 0.0f) {
 800186c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001870:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d802      	bhi.n	8001880 <_ZN13PIDController6UpdateEff+0x24>
		return 0; // only allow updates with positive time steps (avoid errors for i, d)
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e0dc      	b.n	8001a3a <_ZN13PIDController6UpdateEff+0x1de>
	}

	float p = k_p * error;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ed97 7a02 	vldr	s14, [r7, #8]
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188e:	edc7 7a06 	vstr	s15, [r7, #24]
	float i = i_error_ + k_i * ((error + prev_error_)*ms_since_last_update/2); // Tustin's method (trapezoidal integration)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	ed93 7a05 	vldr	s14, [r3, #20]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	edd3 6a01 	vldr	s13, [r3, #4]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	ed93 6a07 	vldr	s12, [r3, #28]
 80018a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80018b0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80018b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	edc7 7a05 	vstr	s15, [r7, #20]
	i = CONSTRAIN(i, -limit, limit); // integral anti-windup
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80018ce:	eef1 7a67 	vneg.f32	s15, s15
 80018d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d505      	bpl.n	80018ec <_ZN13PIDController6UpdateEff+0x90>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018e6:	eef1 7a67 	vneg.f32	s15, s15
 80018ea:	e00f      	b.n	800190c <_ZN13PIDController6UpdateEff+0xb0>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f2:	ed97 7a05 	vldr	s14, [r7, #20]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd03      	ble.n	8001908 <_ZN13PIDController6UpdateEff+0xac>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	edd3 7a04 	vldr	s15, [r3, #16]
 8001906:	e001      	b.n	800190c <_ZN13PIDController6UpdateEff+0xb0>
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	edc7 7a05 	vstr	s15, [r7, #20]
	float d = k_d * (error - prev_error_) / ms_since_last_update;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	ed93 7a02 	vldr	s14, [r3, #8]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 7a07 	vldr	s15, [r3, #28]
 800191c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001920:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001924:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001928:	ed97 7a01 	vldr	s14, [r7, #4]
 800192c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001930:	edc7 7a04 	vstr	s15, [r7, #16]

	float output = CONSTRAIN(p + i + d, -limit, limit); // sum and constrain output
 8001934:	ed97 7a06 	vldr	s14, [r7, #24]
 8001938:	edd7 7a05 	vldr	s15, [r7, #20]
 800193c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001940:	edd7 7a04 	vldr	s15, [r7, #16]
 8001944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	edd3 7a04 	vldr	s15, [r3, #16]
 800194e:	eef1 7a67 	vneg.f32	s15, s15
 8001952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195a:	d505      	bpl.n	8001968 <_ZN13PIDController6UpdateEff+0x10c>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001962:	eef1 7a67 	vneg.f32	s15, s15
 8001966:	e01f      	b.n	80019a8 <_ZN13PIDController6UpdateEff+0x14c>
 8001968:	ed97 7a06 	vldr	s14, [r7, #24]
 800196c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001974:	edd7 7a04 	vldr	s15, [r7, #16]
 8001978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001982:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd03      	ble.n	8001994 <_ZN13PIDController6UpdateEff+0x138>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001992:	e009      	b.n	80019a8 <_ZN13PIDController6UpdateEff+0x14c>
 8001994:	ed97 7a06 	vldr	s14, [r7, #24]
 8001998:	edd7 7a05 	vldr	s15, [r7, #20]
 800199c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a8:	edc7 7a07 	vstr	s15, [r7, #28]

	if (ramp > 0.0f) { // output ramp is defined
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80019b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ba:	dd34      	ble.n	8001a26 <_ZN13PIDController6UpdateEff+0x1ca>
		if (output - prev_output_ > ramp) {
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	edd3 7a06 	vldr	s15, [r3, #24]
 80019c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80019c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dd0a      	ble.n	80019f0 <_ZN13PIDController6UpdateEff+0x194>
			output = prev_output_ + ramp; // rail to positive ramp
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ea:	edc7 7a07 	vstr	s15, [r7, #28]
 80019ee:	e01a      	b.n	8001a26 <_ZN13PIDController6UpdateEff+0x1ca>
		} else if (output - prev_output_ < -ramp) {
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80019fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a04:	eef1 7a67 	vneg.f32	s15, s15
 8001a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d509      	bpl.n	8001a26 <_ZN13PIDController6UpdateEff+0x1ca>
			output = prev_output_ - ramp; // rail to negative ramp
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	// save stuff for next round
	prev_error_ = error;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	61da      	str	r2, [r3, #28]
	prev_output_ = output;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	619a      	str	r2, [r3, #24]
	i_error_ = i;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	615a      	str	r2, [r3, #20]

	return output;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	ee07 3a90 	vmov	s15, r3
}
 8001a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a42:	3724      	adds	r7, #36	; 0x24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	i_error_ = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
	prev_error_ = 0;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
	prev_output_ = 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_Z13GetTickMicrosv>:

/**
 * Utility function that returns the current time in microseconds.
 * @retval Current uptime, in microseconds.
 */
uint32_t GetTickMicros() {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	return HAL_GetTick() * 1000 - SysTick->VAL / ((SysTick->LOAD + 1) / 1000);
 8001a7c:	f002 fc50 	bl	8004320 <HAL_GetTick>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a86:	fb02 f203 	mul.w	r2, r2, r3
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <_Z13GetTickMicrosv+0x30>)
 8001a8c:	6899      	ldr	r1, [r3, #8]
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <_Z13GetTickMicrosv+0x30>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	3301      	adds	r3, #1
 8001a94:	4805      	ldr	r0, [pc, #20]	; (8001aac <_Z13GetTickMicrosv+0x34>)
 8001a96:	fba0 0303 	umull	r0, r3, r0, r3
 8001a9a:	099b      	lsrs	r3, r3, #6
 8001a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa0:	1ad3      	subs	r3, r2, r3
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010
 8001aac:	10624dd3 	.word	0x10624dd3

08001ab0 <_ZN10HalfBridgeC1Ev>:
#ifndef MOTOR_INC_HALF_BRIDGE_HH_
#define MOTOR_INC_HALF_BRIDGE_HH_

#include <stdint.h>

class HalfBridge {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <_ZN10HalfBridgeC1Ev+0x34>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	731a      	strb	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	08010750 	.word	0x08010750

08001ae8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>:
	 * @param[in] timer_channel_id 			Identifier of the channel on the HAL timer being used for the EN/IN pin PWM.
	 * @param[in] curr_sense_adc_voltage	Pointer to the ADC current sense value, to be updated continuously over DMA.
	 * 										Passed as a const reference; will not be changed by the STSPIN830. Is a count
	 * 										out of the full resolution of the ADC.
	 */
	STSPIN830(
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
		uint32_t timer_channel_id,
		const volatile uint16_t& curr_sense_adc_voltage)
		: timer_(timer)
		, timer_channel_id_(timer_channel_id)
		, curr_sense_adc_counts_(curr_sense_adc_voltage)
		, pid(0.0005f, 0.0f, 0.000f, 0.0, 0.0){};
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ffd9 	bl	8001ab0 <_ZN10HalfBridgeC1Ev>
 8001afe:	4a19      	ldr	r2, [pc, #100]	; (8001b64 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x7c>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	619a      	str	r2, [r3, #24]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b32:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	332c      	adds	r3, #44	; 0x2c
 8001b40:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8001b68 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8001b44:	eddf 1a08 	vldr	s3, [pc, #32]	; 8001b68 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8001b48:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001b68 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8001b4c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8001b68 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8001b50:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001b6c <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x84>
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe45 	bl	80017e4 <_ZN13PIDControllerC1Efffff>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	080106f8 	.word	0x080106f8
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	3a03126f 	.word	0x3a03126f

08001b70 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	static STSPIN830 half_bridge_u(
		half_bridge_pwm_timer,  // PWM timer
		TIM_CHANNEL_1,			// PWM timer channel
		curr_sense_adc_buf[0] /* curr_sense_adc_voltage */);
 8001b74:	4b4f      	ldr	r3, [pc, #316]	; (8001cb4 <main_run+0x144>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f3bf 8f5b 	dmb	ish
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf0c      	ite	eq
 8001b86:	2301      	moveq	r3, #1
 8001b88:	2300      	movne	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d014      	beq.n	8001bba <main_run+0x4a>
 8001b90:	4848      	ldr	r0, [pc, #288]	; (8001cb4 <main_run+0x144>)
 8001b92:	f00a ffa7 	bl	800cae4 <__cxa_guard_acquire>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <main_run+0x4a>
 8001ba6:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <main_run+0x148>)
 8001ba8:	6819      	ldr	r1, [r3, #0]
 8001baa:	4b44      	ldr	r3, [pc, #272]	; (8001cbc <main_run+0x14c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	4844      	ldr	r0, [pc, #272]	; (8001cc0 <main_run+0x150>)
 8001bb0:	f7ff ff9a 	bl	8001ae8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>
 8001bb4:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <main_run+0x144>)
 8001bb6:	f00a ffa1 	bl	800cafc <__cxa_guard_release>
	g_half_bridge_u = &half_bridge_u;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <main_run+0x154>)
 8001bbc:	4a40      	ldr	r2, [pc, #256]	; (8001cc0 <main_run+0x150>)
 8001bbe:	601a      	str	r2, [r3, #0]
	g_half_bridge_u->Init();
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <main_run+0x154>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <main_run+0x154>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4798      	blx	r3

	static STSPIN830 half_bridge_v(
			half_bridge_pwm_timer,  // PWM timer
			TIM_CHANNEL_2,			// PWM timer channel
			curr_sense_adc_buf[1] /* curr_sense_adc_voltage */);
 8001bd0:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <main_run+0x158>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	f3bf 8f5b 	dmb	ish
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf0c      	ite	eq
 8001be2:	2301      	moveq	r3, #1
 8001be4:	2300      	movne	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d014      	beq.n	8001c16 <main_run+0xa6>
 8001bec:	4836      	ldr	r0, [pc, #216]	; (8001cc8 <main_run+0x158>)
 8001bee:	f00a ff79 	bl	800cae4 <__cxa_guard_acquire>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bf14      	ite	ne
 8001bf8:	2301      	movne	r3, #1
 8001bfa:	2300      	moveq	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <main_run+0xa6>
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <main_run+0x148>)
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <main_run+0x15c>)
 8001c08:	2204      	movs	r2, #4
 8001c0a:	4831      	ldr	r0, [pc, #196]	; (8001cd0 <main_run+0x160>)
 8001c0c:	f7ff ff6c 	bl	8001ae8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>
 8001c10:	482d      	ldr	r0, [pc, #180]	; (8001cc8 <main_run+0x158>)
 8001c12:	f00a ff73 	bl	800cafc <__cxa_guard_release>
	g_half_bridge_v = &half_bridge_v;
 8001c16:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <main_run+0x164>)
 8001c18:	4a2d      	ldr	r2, [pc, #180]	; (8001cd0 <main_run+0x160>)
 8001c1a:	601a      	str	r2, [r3, #0]
	g_half_bridge_v->Init();
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <main_run+0x164>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <main_run+0x164>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4798      	blx	r3

	static STSPIN830 half_bridge_w(
			half_bridge_pwm_timer,  // PWM timer
			TIM_CHANNEL_3,			// PWM timer channel
			curr_sense_adc_buf[2] /* curr_sense_adc_voltage */);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <main_run+0x168>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	f3bf 8f5b 	dmb	ish
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d014      	beq.n	8001c72 <main_run+0x102>
 8001c48:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <main_run+0x168>)
 8001c4a:	f00a ff4b 	bl	800cae4 <__cxa_guard_acquire>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <main_run+0x102>
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <main_run+0x148>)
 8001c60:	6819      	ldr	r1, [r3, #0]
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <main_run+0x16c>)
 8001c64:	2208      	movs	r2, #8
 8001c66:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <main_run+0x170>)
 8001c68:	f7ff ff3e 	bl	8001ae8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>
 8001c6c:	481a      	ldr	r0, [pc, #104]	; (8001cd8 <main_run+0x168>)
 8001c6e:	f00a ff45 	bl	800cafc <__cxa_guard_release>
	g_half_bridge_w = &half_bridge_w;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <main_run+0x174>)
 8001c74:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <main_run+0x170>)
 8001c76:	601a      	str	r2, [r3, #0]
	g_half_bridge_w->Init();
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <main_run+0x174>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <main_run+0x174>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4610      	mov	r0, r2
 8001c86:	4798      	blx	r3

#ifdef RUN_TESTS
	RunAllTests();
 8001c88:	f000 f954 	bl	8001f34 <_Z11RunAllTestsv>
#endif

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);
 8001c8c:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <main_run+0x178>)
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4816      	ldr	r0, [pc, #88]	; (8001cec <main_run+0x17c>)
 8001c92:	f007 ffc9 	bl	8009c28 <osThreadNew>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4a15      	ldr	r2, [pc, #84]	; (8001cf0 <main_run+0x180>)
 8001c9a:	6013      	str	r3, [r2, #0]
	motor_control_task_handle = osThreadNew(StartMotorControlTask, NULL, &motor_control_task_attrs);
 8001c9c:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <main_run+0x184>)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <main_run+0x188>)
 8001ca2:	f007 ffc1 	bl	8009c28 <osThreadNew>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <main_run+0x18c>)
 8001caa:	6013      	str	r3, [r2, #0]

	return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000260 	.word	0x20000260
 8001cb8:	20004c20 	.word	0x20004c20
 8001cbc:	20000304 	.word	0x20000304
 8001cc0:	20000214 	.word	0x20000214
 8001cc4:	20000208 	.word	0x20000208
 8001cc8:	200002b0 	.word	0x200002b0
 8001ccc:	20000306 	.word	0x20000306
 8001cd0:	20000264 	.word	0x20000264
 8001cd4:	2000020c 	.word	0x2000020c
 8001cd8:	20000300 	.word	0x20000300
 8001cdc:	20000308 	.word	0x20000308
 8001ce0:	200002b4 	.word	0x200002b4
 8001ce4:	20000210 	.word	0x20000210
 8001ce8:	08010700 	.word	0x08010700
 8001cec:	08001d65 	.word	0x08001d65
 8001cf0:	20000200 	.word	0x20000200
 8001cf4:	08010724 	.word	0x08010724
 8001cf8:	08001ec5 	.word	0x08001ec5
 8001cfc:	20000204 	.word	0x20000204

08001d00 <_Z9WrapAnglef>:

// NOTE: this only works for angles from -720 to 720 deg!
float WrapAngle(float theta) {
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	ed87 0a01 	vstr	s0, [r7, #4]
	if (theta > 360.0f) {
 8001d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d0e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d60 <_Z9WrapAnglef+0x60>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd08      	ble.n	8001d2e <_Z9WrapAnglef+0x2e>
		theta -= 360.0f;
 8001d1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d20:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001d60 <_Z9WrapAnglef+0x60>
 8001d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001d28:	edc7 7a01 	vstr	s15, [r7, #4]
 8001d2c:	e00e      	b.n	8001d4c <_Z9WrapAnglef+0x4c>
	} else if (theta < 0.0f) {
 8001d2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d507      	bpl.n	8001d4c <_Z9WrapAnglef+0x4c>
		theta += 360.0f;
 8001d3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001d60 <_Z9WrapAnglef+0x60>
 8001d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d48:	edc7 7a01 	vstr	s15, [r7, #4]
	}
	return theta;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	ee07 3a90 	vmov	s15, r3
}
 8001d52:	eeb0 0a67 	vmov.f32	s0, s15
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	43b40000 	.word	0x43b40000

08001d64 <_Z10startTask1Pv>:

void startTask1(void * argument) {
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b089      	sub	sp, #36	; 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	// Currents to toggle between
	float theta = 0;
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
	float dtheta = 1;
 8001d72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d76:	61bb      	str	r3, [r7, #24]
	float max_current = 200; // [mA]
 8001d78:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <_Z10startTask1Pv+0x138>)
 8001d7a:	617b      	str	r3, [r7, #20]

	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
 8001d7c:	f007 ff22 	bl	8009bc4 <osKernelGetTickCount>
 8001d80:	6138      	str	r0, [r7, #16]
		uint32_t osTickFreq = osKernelGetTickFreq();
 8001d82:	f007 ff47 	bl	8009c14 <osKernelGetTickFreq>
 8001d86:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	4845      	ldr	r0, [pc, #276]	; (8001ea0 <_Z10startTask1Pv+0x13c>)
 8001d8c:	f003 fd13 	bl	80057b6 <HAL_GPIO_TogglePin>

		// Wrap theta
		theta = WrapAngle(theta + dtheta);
 8001d90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001da0:	f7ff ffae 	bl	8001d00 <_Z9WrapAnglef>
 8001da4:	ed87 0a07 	vstr	s0, [r7, #28]

		g_half_bridge_u->set_target_current(arm_sin_f32(theta * 2 * 3.1415f / 360.0f) * max_current);
 8001da8:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <_Z10startTask1Pv+0x140>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461c      	mov	r4, r3
 8001dae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001db2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001db6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001ea8 <_Z10startTask1Pv+0x144>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001eac <_Z10startTask1Pv+0x148>
 8001dc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dc6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dca:	f00a fe47 	bl	800ca5c <arm_sin_f32>
 8001dce:	eeb0 7a40 	vmov.f32	s14, s0
 8001dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	4620      	mov	r0, r4
 8001de0:	f7ff fbb8 	bl	8001554 <_ZN10HalfBridge18set_target_currentEf>
		g_half_bridge_v->set_target_current(arm_sin_f32(WrapAngle(theta + 120.0f) * 2 * 3.1415f / 360.0f) * max_current);
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <_Z10startTask1Pv+0x14c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	461c      	mov	r4, r3
 8001dea:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dee:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001eb4 <_Z10startTask1Pv+0x150>
 8001df2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	f7ff ff81 	bl	8001d00 <_Z9WrapAnglef>
 8001dfe:	eef0 7a40 	vmov.f32	s15, s0
 8001e02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e06:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001ea8 <_Z10startTask1Pv+0x144>
 8001e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0e:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001eac <_Z10startTask1Pv+0x148>
 8001e12:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e16:	eeb0 0a47 	vmov.f32	s0, s14
 8001e1a:	f00a fe1f 	bl	800ca5c <arm_sin_f32>
 8001e1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7ff fb90 	bl	8001554 <_ZN10HalfBridge18set_target_currentEf>
//		float i_w = arm_sin_f32(WrapAngle(theta + 240.0f) * 2 * 3.1415f / 360.0f) * max_current;
//		g_half_bridge_w->set_target_current(i_w > 0 ? 500: -500);
		g_half_bridge_w->set_target_current(arm_sin_f32(WrapAngle(theta + 240.0f) * 2 * 3.1415f / 360.0f) * max_current);
 8001e34:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <_Z10startTask1Pv+0x154>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	461c      	mov	r4, r3
 8001e3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e3e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ebc <_Z10startTask1Pv+0x158>
 8001e42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e46:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4a:	f7ff ff59 	bl	8001d00 <_Z9WrapAnglef>
 8001e4e:	eef0 7a40 	vmov.f32	s15, s0
 8001e52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e56:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ea8 <_Z10startTask1Pv+0x144>
 8001e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5e:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001eac <_Z10startTask1Pv+0x148>
 8001e62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e66:	eeb0 0a47 	vmov.f32	s0, s14
 8001e6a:	f00a fdf7 	bl	800ca5c <arm_sin_f32>
 8001e6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f7ff fb68 	bl	8001554 <_ZN10HalfBridge18set_target_currentEf>

		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a0e      	ldr	r2, [pc, #56]	; (8001ec0 <_Z10startTask1Pv+0x15c>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	099a      	lsrs	r2, r3, #6
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f007 ff9c 	bl	8009dd0 <osDelayUntil>
	}
 8001e98:	e770      	b.n	8001d7c <_Z10startTask1Pv+0x18>
 8001e9a:	bf00      	nop
 8001e9c:	43480000 	.word	0x43480000
 8001ea0:	40020400 	.word	0x40020400
 8001ea4:	20000208 	.word	0x20000208
 8001ea8:	40490e56 	.word	0x40490e56
 8001eac:	43b40000 	.word	0x43b40000
 8001eb0:	2000020c 	.word	0x2000020c
 8001eb4:	42f00000 	.word	0x42f00000
 8001eb8:	20000210 	.word	0x20000210
 8001ebc:	43700000 	.word	0x43700000
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <_Z21StartMotorControlTaskPv>:
}

void StartMotorControlTask(void * argument) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

	while (1) {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	2140      	movs	r1, #64	; 0x40
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <_Z21StartMotorControlTaskPv+0x60>)
 8001ed2:	f003 fc57 	bl	8005784 <HAL_GPIO_WritePin>
		g_half_bridge_u->Update();
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <_Z21StartMotorControlTaskPv+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_Z21StartMotorControlTaskPv+0x64>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4798      	blx	r3
		g_half_bridge_v->Update();
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_Z21StartMotorControlTaskPv+0x68>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <_Z21StartMotorControlTaskPv+0x68>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3304      	adds	r3, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4798      	blx	r3
		g_half_bridge_w->Update();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <_Z21StartMotorControlTaskPv+0x6c>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <_Z21StartMotorControlTaskPv+0x6c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4798      	blx	r3
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2140      	movs	r1, #64	; 0x40
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <_Z21StartMotorControlTaskPv+0x60>)
 8001f12:	f003 fc37 	bl	8005784 <HAL_GPIO_WritePin>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait indefinitely for run notification, clear notifications (set to 0) upon receiving one
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f009 fcee 	bl	800b8fc <ulTaskNotifyTake>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001f20:	e7d4      	b.n	8001ecc <_Z21StartMotorControlTaskPv+0x8>
 8001f22:	bf00      	nop
 8001f24:	40021800 	.word	0x40021800
 8001f28:	20000208 	.word	0x20000208
 8001f2c:	2000020c 	.word	0x2000020c
 8001f30:	20000210 	.word	0x20000210

08001f34 <_Z11RunAllTestsv>:
	}
}

#ifdef RUN_TESTS
void RunAllTests() {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	TestEncoderAll();
 8001f38:	f000 fca6 	bl	8002888 <_Z14TestEncoderAllv>
	TestPIDControllerAll();
 8001f3c:	f001 f916 	bl	800316c <_Z20TestPIDControllerAllv>
	TestHalfBridgeAll();
 8001f40:	f000 fd34 	bl	80029ac <_Z17TestHalfBridgeAllv>
	TestCurrentSensorAll();
 8001f44:	f000 f9be 	bl	80022c4 <_Z20TestCurrentSensorAllv>

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZN13CurrentSensorC1Etfff>:
	float curr_u{0}; // [mA] current measured by current sensor
	float curr_v{0};
	float curr_w{0};

	// Consturctor
	CurrentSensor(
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6178      	str	r0, [r7, #20]
 8001f54:	460b      	mov	r3, r1
 8001f56:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f5a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f5e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001f62:	827b      	strh	r3, [r7, #18]
		float adc_offset_volts_in,
		float adc_gain_in)
		: adc_max_counts_(adc_max_counts_in)
		, adc_max_volts_(adc_max_volts_in)
		, adc_offset_volts_(adc_offset_volts_in)
		, adc_gain_(adc_gain_in){};
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	8a7a      	ldrh	r2, [r7, #18]
 8001f80:	819a      	strh	r2, [r3, #12]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	611a      	str	r2, [r3, #16]
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	615a      	str	r2, [r3, #20]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	371c      	adds	r7, #28
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_Z18CurrentsAreCorrect13CurrentSensorfff>:
 */

#include "test_framework.hh"
#include "test_current_sensor.hh"

bool CurrentsAreCorrect(CurrentSensor current_sensor, float curr_u_expect, float curr_v_expect, float curr_w_expect) {
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	b5b0      	push	{r4, r5, r7, lr}
 8001fb8:	b086      	sub	sp, #24
 8001fba:	af02      	add	r7, sp, #8
 8001fbc:	f107 0420 	add.w	r4, r7, #32
 8001fc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001fc4:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fc8:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fcc:	ed87 1a01 	vstr	s2, [r7, #4]
	if (current_sensor.curr_u != curr_u_expect) {
 8001fd0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fd4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fd8:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe0:	d013      	beq.n	800200a <_Z18CurrentsAreCorrect13CurrentSensorfff+0x56>
		T_FAIL_PRINT("Incorrect phase U current: expected %f but got %f.\r\n", curr_u_expect, current_sensor.curr_u);
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7fe fad8 	bl	8000598 <__aeabi_f2d>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fad2 	bl	8000598 <__aeabi_f2d>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	e9cd 2300 	strd	r2, r3, [sp]
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	462b      	mov	r3, r5
 8002000:	4823      	ldr	r0, [pc, #140]	; (8002090 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xdc>)
 8002002:	f00b fac7 	bl	800d594 <iprintf>
		return false;
 8002006:	2300      	movs	r3, #0
 8002008:	e03a      	b.n	8002080 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.curr_v != curr_v_expect) {
 800200a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800200e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002012:	eeb4 7a67 	vcmp.f32	s14, s15
 8002016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201a:	d013      	beq.n	8002044 <_Z18CurrentsAreCorrect13CurrentSensorfff+0x90>
		T_FAIL_PRINT("Incorrect phase V current: expected %f but got %f.\r\n", curr_v_expect, current_sensor.curr_v);
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f7fe fabb 	bl	8000598 <__aeabi_f2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fab5 	bl	8000598 <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	e9cd 2300 	strd	r2, r3, [sp]
 8002036:	4622      	mov	r2, r4
 8002038:	462b      	mov	r3, r5
 800203a:	4816      	ldr	r0, [pc, #88]	; (8002094 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe0>)
 800203c:	f00b faaa 	bl	800d594 <iprintf>
		return false;
 8002040:	2300      	movs	r3, #0
 8002042:	e01d      	b.n	8002080 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.curr_w != curr_w_expect) {
 8002044:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002048:	ed97 7a01 	vldr	s14, [r7, #4]
 800204c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	d013      	beq.n	800207e <_Z18CurrentsAreCorrect13CurrentSensorfff+0xca>
		T_FAIL_PRINT("Incorrect phase W current: expected %f but got %f.\r\n", curr_w_expect, current_sensor.curr_w);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe fa9e 	bl	8000598 <__aeabi_f2d>
 800205c:	4604      	mov	r4, r0
 800205e:	460d      	mov	r5, r1
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa98 	bl	8000598 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9cd 2300 	strd	r2, r3, [sp]
 8002070:	4622      	mov	r2, r4
 8002072:	462b      	mov	r3, r5
 8002074:	4808      	ldr	r0, [pc, #32]	; (8002098 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe4>)
 8002076:	f00b fa8d 	bl	800d594 <iprintf>
		return false;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	}
	return true;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800208a:	b004      	add	sp, #16
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	0800f790 	.word	0x0800f790
 8002094:	0800f7e0 	.word	0x0800f7e0
 8002098:	0800f830 	.word	0x0800f830

0800209c <_Z24TestCurrentSensorCurrentv>:

bool TestCurrentSensorCurrent() {
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b09a      	sub	sp, #104	; 0x68
 80020a0:	af06      	add	r7, sp, #24
	TEST_PRINT("Simulate Current through Current Sensor.\r\n");
 80020a2:	4881      	ldr	r0, [pc, #516]	; (80022a8 <_Z24TestCurrentSensorCurrentv+0x20c>)
 80020a4:	f00b fafc 	bl	800d6a0 <puts>
	uint16_t csense_adc_counts[3] = {0};
 80020a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	809a      	strh	r2, [r3, #4]

	uint16_t adc_max_counts = 0xFFF;
 80020b2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80020b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	float adc_max_volts = 3.3f;
 80020ba:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <_Z24TestCurrentSensorCurrentv+0x210>)
 80020bc:	64bb      	str	r3, [r7, #72]	; 0x48
	float adc_offset = 1.56f;
 80020be:	4b7c      	ldr	r3, [pc, #496]	; (80022b0 <_Z24TestCurrentSensorCurrentv+0x214>)
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
	float adc_gain = 0.33f;
 80020c2:	4b7c      	ldr	r3, [pc, #496]	; (80022b4 <_Z24TestCurrentSensorCurrentv+0x218>)
 80020c4:	643b      	str	r3, [r7, #64]	; 0x40
	CurrentSensor current_sensor(adc_max_counts, adc_max_volts, adc_offset, adc_gain);
 80020c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 80020d0:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 80020d4:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ff36 	bl	8001f4c <_ZN13CurrentSensorC1Etfff>
	current_sensor.LinkToADC(&(csense_adc_counts[0]), &(csense_adc_counts[1]), &(csense_adc_counts[2]));
 80020e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e4:	1d1c      	adds	r4, r3, #4
 80020e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ea:	1c9a      	adds	r2, r3, #2
 80020ec:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80020f0:	1d38      	adds	r0, r7, #4
 80020f2:	4623      	mov	r3, r4
 80020f4:	f7ff f99c 	bl	8001430 <_ZN13CurrentSensor9LinkToADCEPtS0_S0_>

	T_TEST_PRINT("Current sense ADC counts at 0.\r\n");
 80020f8:	486f      	ldr	r0, [pc, #444]	; (80022b8 <_Z24TestCurrentSensorCurrentv+0x21c>)
 80020fa:	f00b fad1 	bl	800d6a0 <puts>
	current_sensor.ReadCurrents();
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff f9ab 	bl	800145c <_ZN13CurrentSensor12ReadCurrentsEv>
	float curr_u_expect = -adc_offset / adc_gain * 1000;
 8002106:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800210a:	eef1 6a67 	vneg.f32	s13, s15
 800210e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002116:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 800211a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float curr_v_expect = -adc_offset / adc_gain * 1000;
 8002122:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002126:	eef1 6a67 	vneg.f32	s13, s15
 800212a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800212e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002132:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 8002136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float curr_w_expect = -adc_offset / adc_gain * 1000;
 800213e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002142:	eef1 6a67 	vneg.f32	s13, s15
 8002146:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800214a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800214e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 8002152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002156:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, curr_u_expect, curr_v_expect, curr_w_expect)) {
 800215a:	466d      	mov	r5, sp
 800215c:	f107 0414 	add.w	r4, r7, #20
 8002160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002162:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002164:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002168:	e885 0003 	stmia.w	r5, {r0, r1}
 800216c:	1d3b      	adds	r3, r7, #4
 800216e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002170:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002174:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002178:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800217c:	f7ff ff1a 	bl	8001fb4 <_Z18CurrentsAreCorrect13CurrentSensorfff>
 8002180:	4603      	mov	r3, r0
 8002182:	f083 0301 	eor.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <_Z24TestCurrentSensorCurrentv+0xf4>
		return false;
 800218c:	2300      	movs	r3, #0
 800218e:	e087      	b.n	80022a0 <_Z24TestCurrentSensorCurrentv+0x204>
	}

	T_TEST_PRINT("Current sense ADC counts at random values.\r\n");
 8002190:	484b      	ldr	r0, [pc, #300]	; (80022c0 <_Z24TestCurrentSensorCurrentv+0x224>)
 8002192:	f00b fa85 	bl	800d6a0 <puts>
	csense_adc_counts[0] = 156;
 8002196:	239c      	movs	r3, #156	; 0x9c
 8002198:	85bb      	strh	r3, [r7, #44]	; 0x2c
	csense_adc_counts[1] = 0xFFF;
 800219a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800219e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	csense_adc_counts[2] = 2934;
 80021a0:	f640 3376 	movw	r3, #2934	; 0xb76
 80021a4:	863b      	strh	r3, [r7, #48]	; 0x30
	current_sensor.ReadCurrents();
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff f957 	bl	800145c <_ZN13CurrentSensor12ReadCurrentsEv>
	curr_u_expect = (static_cast<float>(csense_adc_counts[0]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 80021ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80021b0:	ee07 3a90 	vmov	s15, r3
 80021b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021d8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80021dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	curr_v_expect = (static_cast<float>(csense_adc_counts[1]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 80021ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002206:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800220a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002212:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002216:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800221a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	curr_w_expect = (static_cast<float>(csense_adc_counts[2]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 800222a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800222c:	ee07 3a90 	vmov	s15, r3
 8002230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002244:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800224c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002254:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80022bc <_Z24TestCurrentSensorCurrentv+0x220>
 8002260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002264:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, curr_u_expect, curr_v_expect, curr_w_expect)) {
 8002268:	466d      	mov	r5, sp
 800226a:	f107 0414 	add.w	r4, r7, #20
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002276:	e885 0003 	stmia.w	r5, {r0, r1}
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800227e:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002282:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002286:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800228a:	f7ff fe93 	bl	8001fb4 <_Z18CurrentsAreCorrect13CurrentSensorfff>
 800228e:	4603      	mov	r3, r0
 8002290:	f083 0301 	eor.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <_Z24TestCurrentSensorCurrentv+0x202>
		return false;
 800229a:	2300      	movs	r3, #0
 800229c:	e000      	b.n	80022a0 <_Z24TestCurrentSensorCurrentv+0x204>
	}
	return true;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3750      	adds	r7, #80	; 0x50
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdb0      	pop	{r4, r5, r7, pc}
 80022a8:	0800f880 	.word	0x0800f880
 80022ac:	40533333 	.word	0x40533333
 80022b0:	3fc7ae14 	.word	0x3fc7ae14
 80022b4:	3ea8f5c3 	.word	0x3ea8f5c3
 80022b8:	0800f8bc 	.word	0x0800f8bc
 80022bc:	447a0000 	.word	0x447a0000
 80022c0:	0800f8f0 	.word	0x0800f8f0

080022c4 <_Z20TestCurrentSensorAllv>:

void TestCurrentSensorAll() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
	bool csense_passed = true;
 80022ca:	2301      	movs	r3, #1
 80022cc:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test CurrentSensor Class");
 80022ce:	490e      	ldr	r1, [pc, #56]	; (8002308 <_Z20TestCurrentSensorAllv+0x44>)
 80022d0:	480e      	ldr	r0, [pc, #56]	; (800230c <_Z20TestCurrentSensorAllv+0x48>)
 80022d2:	f00b f95f 	bl	800d594 <iprintf>
	csense_passed &= TestCurrentSensorCurrent();
 80022d6:	f7ff fee1 	bl	800209c <_Z24TestCurrentSensorCurrentv>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf14      	ite	ne
 80022e6:	2301      	movne	r3, #1
 80022e8:	2300      	moveq	r3, #0
 80022ea:	71fb      	strb	r3, [r7, #7]
	if (csense_passed) {
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <_Z20TestCurrentSensorAllv+0x36>
		PASS_PRINT("CurrentSensor Class\r\n");
 80022f2:	4807      	ldr	r0, [pc, #28]	; (8002310 <_Z20TestCurrentSensorAllv+0x4c>)
 80022f4:	f00b f9d4 	bl	800d6a0 <puts>
	} else {
		FAIL_PRINT("CurrentSensor Class\r\n");
	}
}
 80022f8:	e002      	b.n	8002300 <_Z20TestCurrentSensorAllv+0x3c>
		FAIL_PRINT("CurrentSensor Class\r\n");
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <_Z20TestCurrentSensorAllv+0x50>)
 80022fc:	f00b f9d0 	bl	800d6a0 <puts>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	0800f930 	.word	0x0800f930
 800230c:	0800f94c 	.word	0x0800f94c
 8002310:	0800f960 	.word	0x0800f960
 8002314:	0800f98c 	.word	0x0800f98c

08002318 <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 800231e:	4816      	ldr	r0, [pc, #88]	; (8002378 <_Z17TestEncoderCreatev+0x60>)
 8002320:	f00b f9be 	bl	800d6a0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002324:	2300      	movs	r3, #0
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002330:	8bfb      	ldrh	r3, [r7, #30]
 8002332:	4638      	mov	r0, r7
 8002334:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002338:	9200      	str	r2, [sp, #0]
 800233a:	6a3a      	ldr	r2, [r7, #32]
 800233c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233e:	f7fe fe3f 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8002342:	463b      	mov	r3, r7
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff f847 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 800234a:	eef0 7a40 	vmov.f32	s15, s0
 800234e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002352:	ee17 3a90 	vmov	r3, s15
 8002356:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 8002358:	8bbb      	ldrh	r3, [r7, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <_Z17TestEncoderCreatev+0x56>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 800235e:	8bbb      	ldrh	r3, [r7, #28]
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <_Z17TestEncoderCreatev+0x64>)
 8002366:	f00b f915 	bl	800d594 <iprintf>
		return false;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <_Z17TestEncoderCreatev+0x58>
	}

	return true;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	0800f9b8 	.word	0x0800f9b8
 800237c:	0800f9d8 	.word	0x0800f9d8

08002380 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b08e      	sub	sp, #56	; 0x38
 8002384:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 8002386:	4839      	ldr	r0, [pc, #228]	; (800246c <_Z15TestEncoderZerov+0xec>)
 8002388:	f00b f98a 	bl	800d6a0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002390:	2300      	movs	r3, #0
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002398:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800239a:	4638      	mov	r0, r7
 800239c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80023a0:	9200      	str	r2, [sp, #0]
 80023a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a6:	f7fe fe0b 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 80023aa:	4831      	ldr	r0, [pc, #196]	; (8002470 <_Z15TestEncoderZerov+0xf0>)
 80023ac:	f00b f978 	bl	800d6a0 <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 80023b0:	463b      	mov	r3, r7
 80023b2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002474 <_Z15TestEncoderZerov+0xf4>
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fffa 	bl	80013b0 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 80023bc:	463b      	mov	r3, r7
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f80a 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 80023c4:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 80023c8:	4b2b      	ldr	r3, [pc, #172]	; (8002478 <_Z15TestEncoderZerov+0xf8>)
 80023ca:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 80023cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80023d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80023d4:	eeb4 7a67 	vcmp.f32	s14, s15
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d012      	beq.n	8002404 <_Z15TestEncoderZerov+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 80023de:	69f8      	ldr	r0, [r7, #28]
 80023e0:	f7fe f8da 	bl	8000598 <__aeabi_f2d>
 80023e4:	4604      	mov	r4, r0
 80023e6:	460d      	mov	r5, r1
 80023e8:	6a38      	ldr	r0, [r7, #32]
 80023ea:	f7fe f8d5 	bl	8000598 <__aeabi_f2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	e9cd 2300 	strd	r2, r3, [sp]
 80023f6:	4622      	mov	r2, r4
 80023f8:	462b      	mov	r3, r5
 80023fa:	4820      	ldr	r0, [pc, #128]	; (800247c <_Z15TestEncoderZerov+0xfc>)
 80023fc:	f00b f8ca 	bl	800d594 <iprintf>
		return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e02e      	b.n	8002462 <_Z15TestEncoderZerov+0xe2>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 8002404:	481e      	ldr	r0, [pc, #120]	; (8002480 <_Z15TestEncoderZerov+0x100>)
 8002406:	f00b f94b 	bl	800d6a0 <puts>
	enc.set_zero_angle(3600);
 800240a:	463b      	mov	r3, r7
 800240c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002484 <_Z15TestEncoderZerov+0x104>
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe ffcd 	bl	80013b0 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8002416:	463b      	mov	r3, r7
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe ffdd 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 800241e:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002428:	ed97 7a08 	vldr	s14, [r7, #32]
 800242c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002430:	eeb4 7a67 	vcmp.f32	s14, s15
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	d012      	beq.n	8002460 <_Z15TestEncoderZerov+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 800243a:	69f8      	ldr	r0, [r7, #28]
 800243c:	f7fe f8ac 	bl	8000598 <__aeabi_f2d>
 8002440:	4604      	mov	r4, r0
 8002442:	460d      	mov	r5, r1
 8002444:	6a38      	ldr	r0, [r7, #32]
 8002446:	f7fe f8a7 	bl	8000598 <__aeabi_f2d>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	e9cd 2300 	strd	r2, r3, [sp]
 8002452:	4622      	mov	r2, r4
 8002454:	462b      	mov	r3, r5
 8002456:	4809      	ldr	r0, [pc, #36]	; (800247c <_Z15TestEncoderZerov+0xfc>)
 8002458:	f00b f89c 	bl	800d594 <iprintf>
		return false;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <_Z15TestEncoderZerov+0xe2>
	}

	return true;
 8002460:	2301      	movs	r3, #1
}
 8002462:	4618      	mov	r0, r3
 8002464:	3730      	adds	r7, #48	; 0x30
 8002466:	46bd      	mov	sp, r7
 8002468:	bdb0      	pop	{r4, r5, r7, pc}
 800246a:	bf00      	nop
 800246c:	0800fa34 	.word	0x0800fa34
 8002470:	0800fa54 	.word	0x0800fa54
 8002474:	425c0000 	.word	0x425c0000
 8002478:	43988000 	.word	0x43988000
 800247c:	0800fa84 	.word	0x0800fa84
 8002480:	0800fac8 	.word	0x0800fac8
 8002484:	45610000 	.word	0x45610000

08002488 <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 800248e:	4838      	ldr	r0, [pc, #224]	; (8002570 <_Z16TestEncoderAnglev+0xe8>)
 8002490:	f00b f906 	bl	800d6a0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80024a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024a2:	4638      	mov	r0, r7
 80024a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80024a8:	9200      	str	r2, [sp, #0]
 80024aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ae:	f7fe fd87 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 80024b2:	4830      	ldr	r0, [pc, #192]	; (8002574 <_Z16TestEncoderAnglev+0xec>)
 80024b4:	f00b f8f4 	bl	800d6a0 <puts>
	enc.set_angle(450.5);
 80024b8:	463b      	mov	r3, r7
 80024ba:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002578 <_Z16TestEncoderAnglev+0xf0>
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe ffa2 	bl	8001408 <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 80024c4:	463b      	mov	r3, r7
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe ff86 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 80024cc:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <_Z16TestEncoderAnglev+0xf4>)
 80024d2:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 80024d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80024d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d012      	beq.n	800250c <_Z16TestEncoderAnglev+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 80024e6:	69f8      	ldr	r0, [r7, #28]
 80024e8:	f7fe f856 	bl	8000598 <__aeabi_f2d>
 80024ec:	4604      	mov	r4, r0
 80024ee:	460d      	mov	r5, r1
 80024f0:	6a38      	ldr	r0, [r7, #32]
 80024f2:	f7fe f851 	bl	8000598 <__aeabi_f2d>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	e9cd 2300 	strd	r2, r3, [sp]
 80024fe:	4622      	mov	r2, r4
 8002500:	462b      	mov	r3, r5
 8002502:	481f      	ldr	r0, [pc, #124]	; (8002580 <_Z16TestEncoderAnglev+0xf8>)
 8002504:	f00b f846 	bl	800d594 <iprintf>
		return false;
 8002508:	2300      	movs	r3, #0
 800250a:	e02d      	b.n	8002568 <_Z16TestEncoderAnglev+0xe0>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 800250c:	481d      	ldr	r0, [pc, #116]	; (8002584 <_Z16TestEncoderAnglev+0xfc>)
 800250e:	f00b f8c7 	bl	800d6a0 <puts>
	enc.set_angle(-500.9);
 8002512:	463b      	mov	r3, r7
 8002514:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002588 <_Z16TestEncoderAnglev+0x100>
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe ff75 	bl	8001408 <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 800251e:	463b      	mov	r3, r7
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe ff59 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 8002526:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <_Z16TestEncoderAnglev+0x104>)
 800252c:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 800252e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002532:	edd7 7a07 	vldr	s15, [r7, #28]
 8002536:	eeb4 7a67 	vcmp.f32	s14, s15
 800253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253e:	d012      	beq.n	8002566 <_Z16TestEncoderAnglev+0xde>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002540:	69f8      	ldr	r0, [r7, #28]
 8002542:	f7fe f829 	bl	8000598 <__aeabi_f2d>
 8002546:	4604      	mov	r4, r0
 8002548:	460d      	mov	r5, r1
 800254a:	6a38      	ldr	r0, [r7, #32]
 800254c:	f7fe f824 	bl	8000598 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	e9cd 2300 	strd	r2, r3, [sp]
 8002558:	4622      	mov	r2, r4
 800255a:	462b      	mov	r3, r5
 800255c:	4808      	ldr	r0, [pc, #32]	; (8002580 <_Z16TestEncoderAnglev+0xf8>)
 800255e:	f00b f819 	bl	800d594 <iprintf>
		return false;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <_Z16TestEncoderAnglev+0xe0>
	}

	return true;
 8002566:	2301      	movs	r3, #1
}
 8002568:	4618      	mov	r0, r3
 800256a:	3730      	adds	r7, #48	; 0x30
 800256c:	46bd      	mov	sp, r7
 800256e:	bdb0      	pop	{r4, r5, r7, pc}
 8002570:	0800fb00 	.word	0x0800fb00
 8002574:	0800fb24 	.word	0x0800fb24
 8002578:	43e14000 	.word	0x43e14000
 800257c:	42b50000 	.word	0x42b50000
 8002580:	0800fa84 	.word	0x0800fa84
 8002584:	0800fb4c 	.word	0x0800fb4c
 8002588:	c3fa7333 	.word	0xc3fa7333
 800258c:	435b199a 	.word	0x435b199a

08002590 <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 8002590:	b580      	push	{r7, lr}
 8002592:	b08c      	sub	sp, #48	; 0x30
 8002594:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 8002596:	483c      	ldr	r0, [pc, #240]	; (8002688 <_Z17TestAS5048AParityv+0xf8>)
 8002598:	f00b f882 	bl	800d6a0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80025a8:	8bfb      	ldrh	r3, [r7, #30]
 80025aa:	4638      	mov	r0, r7
 80025ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	6a3a      	ldr	r2, [r7, #32]
 80025b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b6:	f7fe fd03 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 80025ba:	4834      	ldr	r0, [pc, #208]	; (800268c <_Z17TestAS5048AParityv+0xfc>)
 80025bc:	f00b f870 	bl	800d6a0 <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 80025c0:	463b      	mov	r3, r7
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fd3b 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80025ca:	4603      	mov	r3, r0
 80025cc:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 80025d2:	7f7a      	ldrb	r2, [r7, #29]
 80025d4:	7f3b      	ldrb	r3, [r7, #28]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d007      	beq.n	80025ea <_Z17TestAS5048AParityv+0x5a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 80025da:	7f3b      	ldrb	r3, [r7, #28]
 80025dc:	7f7a      	ldrb	r2, [r7, #29]
 80025de:	4619      	mov	r1, r3
 80025e0:	482b      	ldr	r0, [pc, #172]	; (8002690 <_Z17TestAS5048AParityv+0x100>)
 80025e2:	f00a ffd7 	bl	800d594 <iprintf>
		return false;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e04a      	b.n	8002680 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 80025ea:	482a      	ldr	r0, [pc, #168]	; (8002694 <_Z17TestAS5048AParityv+0x104>)
 80025ec:	f00b f858 	bl	800d6a0 <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 80025f0:	463b      	mov	r3, r7
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe fd23 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80025fa:	4603      	mov	r3, r0
 80025fc:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 80025fe:	2301      	movs	r3, #1
 8002600:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002602:	7f7a      	ldrb	r2, [r7, #29]
 8002604:	7f3b      	ldrb	r3, [r7, #28]
 8002606:	429a      	cmp	r2, r3
 8002608:	d007      	beq.n	800261a <_Z17TestAS5048AParityv+0x8a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 800260a:	7f3b      	ldrb	r3, [r7, #28]
 800260c:	7f7a      	ldrb	r2, [r7, #29]
 800260e:	4619      	mov	r1, r3
 8002610:	481f      	ldr	r0, [pc, #124]	; (8002690 <_Z17TestAS5048AParityv+0x100>)
 8002612:	f00a ffbf 	bl	800d594 <iprintf>
		return false;
 8002616:	2300      	movs	r3, #0
 8002618:	e032      	b.n	8002680 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 800261a:	481f      	ldr	r0, [pc, #124]	; (8002698 <_Z17TestAS5048AParityv+0x108>)
 800261c:	f00b f840 	bl	800d6a0 <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8002620:	463b      	mov	r3, r7
 8002622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd0a 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 800262c:	4603      	mov	r3, r0
 800262e:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8002630:	2301      	movs	r3, #1
 8002632:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002634:	7f7a      	ldrb	r2, [r7, #29]
 8002636:	7f3b      	ldrb	r3, [r7, #28]
 8002638:	429a      	cmp	r2, r3
 800263a:	d007      	beq.n	800264c <_Z17TestAS5048AParityv+0xbc>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 800263c:	7f3b      	ldrb	r3, [r7, #28]
 800263e:	7f7a      	ldrb	r2, [r7, #29]
 8002640:	4619      	mov	r1, r3
 8002642:	4813      	ldr	r0, [pc, #76]	; (8002690 <_Z17TestAS5048AParityv+0x100>)
 8002644:	f00a ffa6 	bl	800d594 <iprintf>
		return false;
 8002648:	2300      	movs	r3, #0
 800264a:	e019      	b.n	8002680 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 800264c:	4813      	ldr	r0, [pc, #76]	; (800269c <_Z17TestAS5048AParityv+0x10c>)
 800264e:	f00b f827 	bl	800d6a0 <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 8002652:	463b      	mov	r3, r7
 8002654:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fcf1 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 800265e:	4603      	mov	r3, r0
 8002660:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8002666:	7f7a      	ldrb	r2, [r7, #29]
 8002668:	7f3b      	ldrb	r3, [r7, #28]
 800266a:	429a      	cmp	r2, r3
 800266c:	d007      	beq.n	800267e <_Z17TestAS5048AParityv+0xee>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 800266e:	7f3b      	ldrb	r3, [r7, #28]
 8002670:	7f7a      	ldrb	r2, [r7, #29]
 8002672:	4619      	mov	r1, r3
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <_Z17TestAS5048AParityv+0x100>)
 8002676:	f00a ff8d 	bl	800d594 <iprintf>
		return false;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <_Z17TestAS5048AParityv+0xf0>
	}

	return true;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	0800fb74 	.word	0x0800fb74
 800268c:	0800fba4 	.word	0x0800fba4
 8002690:	0800fbcc 	.word	0x0800fbcc
 8002694:	0800fc14 	.word	0x0800fc14
 8002698:	0800fc3c 	.word	0x0800fc3c
 800269c:	0800fc6c 	.word	0x0800fc6c

080026a0 <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08e      	sub	sp, #56	; 0x38
 80026a4:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 80026a6:	486d      	ldr	r0, [pc, #436]	; (800285c <_Z18TestAS5048APacketsv+0x1bc>)
 80026a8:	f00a fffa 	bl	800d6a0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80026b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80026ba:	4638      	mov	r0, r7
 80026bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026c0:	9200      	str	r2, [sp, #0]
 80026c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026c6:	f7fe fc7b 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 80026ca:	4865      	ldr	r0, [pc, #404]	; (8002860 <_Z18TestAS5048APacketsv+0x1c0>)
 80026cc:	f00a ffe8 	bl	800d6a0 <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 80026d0:	463b      	mov	r3, r7
 80026d2:	2201      	movs	r2, #1
 80026d4:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fcd6 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 80026de:	4603      	mov	r3, r0
 80026e0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 80026e2:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 80026e6:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 80026e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d007      	beq.n	8002700 <_Z18TestAS5048APacketsv+0x60>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 80026f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026f4:	4619      	mov	r1, r3
 80026f6:	485b      	ldr	r0, [pc, #364]	; (8002864 <_Z18TestAS5048APacketsv+0x1c4>)
 80026f8:	f00a ff4c 	bl	800d594 <iprintf>
		return false;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e0a9      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8002700:	4859      	ldr	r0, [pc, #356]	; (8002868 <_Z18TestAS5048APacketsv+0x1c8>)
 8002702:	f00a ffcd 	bl	800d6a0 <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 8002706:	463b      	mov	r3, r7
 8002708:	2200      	movs	r2, #0
 800270a:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 800270e:	4618      	mov	r0, r3
 8002710:	f7fe fcbb 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 8002714:	4603      	mov	r3, r0
 8002716:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8002718:	f643 63ef 	movw	r3, #16111	; 0x3eef
 800271c:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 800271e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002722:	429a      	cmp	r2, r3
 8002724:	d007      	beq.n	8002736 <_Z18TestAS5048APacketsv+0x96>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8002726:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002728:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800272a:	4619      	mov	r1, r3
 800272c:	484d      	ldr	r0, [pc, #308]	; (8002864 <_Z18TestAS5048APacketsv+0x1c4>)
 800272e:	f00a ff31 	bl	800d594 <iprintf>
		return false;
 8002732:	2300      	movs	r3, #0
 8002734:	e08e      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 8002736:	484d      	ldr	r0, [pc, #308]	; (800286c <_Z18TestAS5048APacketsv+0x1cc>)
 8002738:	f00a ffb2 	bl	800d6a0 <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 800273c:	463b      	mov	r3, r7
 800273e:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fcca 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8002748:	4603      	mov	r3, r0
 800274a:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 800274c:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002750:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8002752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002754:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002756:	429a      	cmp	r2, r3
 8002758:	d007      	beq.n	800276a <_Z18TestAS5048APacketsv+0xca>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 800275a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800275c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800275e:	4619      	mov	r1, r3
 8002760:	4843      	ldr	r0, [pc, #268]	; (8002870 <_Z18TestAS5048APacketsv+0x1d0>)
 8002762:	f00a ff17 	bl	800d594 <iprintf>
		return false;
 8002766:	2300      	movs	r3, #0
 8002768:	e074      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 800276a:	4842      	ldr	r0, [pc, #264]	; (8002874 <_Z18TestAS5048APacketsv+0x1d4>)
 800276c:	f00a ff98 	bl	800d6a0 <puts>
	uint16_t received_pack = 0b1001111010101101;
 8002770:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8002774:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 8002776:	8c3a      	ldrh	r2, [r7, #32]
 8002778:	463b      	mov	r3, r7
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7fe fcc9 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002782:	4603      	mov	r3, r0
 8002784:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 8002786:	f641 63ad 	movw	r3, #7853	; 0x1ead
 800278a:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 800278c:	8bfa      	ldrh	r2, [r7, #30]
 800278e:	8bbb      	ldrh	r3, [r7, #28]
 8002790:	429a      	cmp	r2, r3
 8002792:	d007      	beq.n	80027a4 <_Z18TestAS5048APacketsv+0x104>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002794:	8bbb      	ldrh	r3, [r7, #28]
 8002796:	8bfa      	ldrh	r2, [r7, #30]
 8002798:	4619      	mov	r1, r3
 800279a:	4837      	ldr	r0, [pc, #220]	; (8002878 <_Z18TestAS5048APacketsv+0x1d8>)
 800279c:	f00a fefa 	bl	800d594 <iprintf>
		return false;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e057      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 80027a4:	4835      	ldr	r0, [pc, #212]	; (800287c <_Z18TestAS5048APacketsv+0x1dc>)
 80027a6:	f00a ff7b 	bl	800d6a0 <puts>
	received_pack = 0b0001111010101101;
 80027aa:	f641 63ad 	movw	r3, #7853	; 0x1ead
 80027ae:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 80027b0:	8c3a      	ldrh	r2, [r7, #32]
 80027b2:	463b      	mov	r3, r7
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fcac 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 80027bc:	4603      	mov	r3, r0
 80027be:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80027c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c4:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80027c6:	8bfa      	ldrh	r2, [r7, #30]
 80027c8:	8bbb      	ldrh	r3, [r7, #28]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d007      	beq.n	80027de <_Z18TestAS5048APacketsv+0x13e>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80027ce:	8bbb      	ldrh	r3, [r7, #28]
 80027d0:	8bfa      	ldrh	r2, [r7, #30]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4828      	ldr	r0, [pc, #160]	; (8002878 <_Z18TestAS5048APacketsv+0x1d8>)
 80027d6:	f00a fedd 	bl	800d594 <iprintf>
		return false;
 80027da:	2300      	movs	r3, #0
 80027dc:	e03a      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 80027de:	4828      	ldr	r0, [pc, #160]	; (8002880 <_Z18TestAS5048APacketsv+0x1e0>)
 80027e0:	f00a ff5e 	bl	800d6a0 <puts>
	received_pack = 0b0101111010101101;
 80027e4:	f645 63ad 	movw	r3, #24237	; 0x5ead
 80027e8:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 80027ea:	8c3a      	ldrh	r2, [r7, #32]
 80027ec:	463b      	mov	r3, r7
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc8f 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 80027f6:	4603      	mov	r3, r0
 80027f8:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80027fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027fe:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8002800:	8bfa      	ldrh	r2, [r7, #30]
 8002802:	8bbb      	ldrh	r3, [r7, #28]
 8002804:	429a      	cmp	r2, r3
 8002806:	d007      	beq.n	8002818 <_Z18TestAS5048APacketsv+0x178>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002808:	8bbb      	ldrh	r3, [r7, #28]
 800280a:	8bfa      	ldrh	r2, [r7, #30]
 800280c:	4619      	mov	r1, r3
 800280e:	481a      	ldr	r0, [pc, #104]	; (8002878 <_Z18TestAS5048APacketsv+0x1d8>)
 8002810:	f00a fec0 	bl	800d594 <iprintf>
		return false;
 8002814:	2300      	movs	r3, #0
 8002816:	e01d      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 8002818:	481a      	ldr	r0, [pc, #104]	; (8002884 <_Z18TestAS5048APacketsv+0x1e4>)
 800281a:	f00a ff41 	bl	800d6a0 <puts>
	received_pack = 0b1101111010101101;
 800281e:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8002822:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8002824:	8c3a      	ldrh	r2, [r7, #32]
 8002826:	463b      	mov	r3, r7
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe fc72 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8002830:	4603      	mov	r3, r0
 8002832:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8002834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002838:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 800283a:	8bfa      	ldrh	r2, [r7, #30]
 800283c:	8bbb      	ldrh	r3, [r7, #28]
 800283e:	429a      	cmp	r2, r3
 8002840:	d007      	beq.n	8002852 <_Z18TestAS5048APacketsv+0x1b2>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8002842:	8bbb      	ldrh	r3, [r7, #28]
 8002844:	8bfa      	ldrh	r2, [r7, #30]
 8002846:	4619      	mov	r1, r3
 8002848:	480b      	ldr	r0, [pc, #44]	; (8002878 <_Z18TestAS5048APacketsv+0x1d8>)
 800284a:	f00a fea3 	bl	800d594 <iprintf>
		return false;
 800284e:	2300      	movs	r3, #0
 8002850:	e000      	b.n	8002854 <_Z18TestAS5048APacketsv+0x1b4>
	}

	return true;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	3730      	adds	r7, #48	; 0x30
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	0800fca0 	.word	0x0800fca0
 8002860:	0800fcd4 	.word	0x0800fcd4
 8002864:	0800fd08 	.word	0x0800fd08
 8002868:	0800fd58 	.word	0x0800fd58
 800286c:	0800fd8c 	.word	0x0800fd8c
 8002870:	0800fdb8 	.word	0x0800fdb8
 8002874:	0800fe04 	.word	0x0800fe04
 8002878:	0800fe3c 	.word	0x0800fe3c
 800287c:	0800fe80 	.word	0x0800fe80
 8002880:	0800febc 	.word	0x0800febc
 8002884:	0800fef4 	.word	0x0800fef4

08002888 <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 800288e:	2301      	movs	r3, #1
 8002890:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 8002892:	492c      	ldr	r1, [pc, #176]	; (8002944 <_Z14TestEncoderAllv+0xbc>)
 8002894:	482c      	ldr	r0, [pc, #176]	; (8002948 <_Z14TestEncoderAllv+0xc0>)
 8002896:	f00a fe7d 	bl	800d594 <iprintf>
	enc_passed &= TestEncoderCreate();
 800289a:	f7ff fd3d 	bl	8002318 <_Z17TestEncoderCreatev>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	bf14      	ite	ne
 80028aa:	2301      	movne	r3, #1
 80028ac:	2300      	moveq	r3, #0
 80028ae:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 80028b0:	f7ff fd66 	bl	8002380 <_Z15TestEncoderZerov>
 80028b4:	4603      	mov	r3, r0
 80028b6:	461a      	mov	r2, r3
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 80028c6:	f7ff fddf 	bl	8002488 <_Z16TestEncoderAnglev>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 80028e2:	481a      	ldr	r0, [pc, #104]	; (800294c <_Z14TestEncoderAllv+0xc4>)
 80028e4:	f00a fedc 	bl	800d6a0 <puts>
 80028e8:	e002      	b.n	80028f0 <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 80028ea:	4819      	ldr	r0, [pc, #100]	; (8002950 <_Z14TestEncoderAllv+0xc8>)
 80028ec:	f00a fed8 	bl	800d6a0 <puts>
	}

	L_PRINT("Test AS5048A Class");
 80028f0:	4918      	ldr	r1, [pc, #96]	; (8002954 <_Z14TestEncoderAllv+0xcc>)
 80028f2:	4815      	ldr	r0, [pc, #84]	; (8002948 <_Z14TestEncoderAllv+0xc0>)
 80028f4:	f00a fe4e 	bl	800d594 <iprintf>
	bool as5048a_passed = true;
 80028f8:	2301      	movs	r3, #1
 80028fa:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 80028fc:	f7ff fe48 	bl	8002590 <_Z17TestAS5048AParityv>
 8002900:	4603      	mov	r3, r0
 8002902:	461a      	mov	r2, r3
 8002904:	79bb      	ldrb	r3, [r7, #6]
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 8002912:	f7ff fec5 	bl	80026a0 <_Z18TestAS5048APacketsv>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	79bb      	ldrb	r3, [r7, #6]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8002928:	79bb      	ldrb	r3, [r7, #6]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <_Z14TestEncoderAllv+0xd0>)
 8002930:	f00a feb6 	bl	800d6a0 <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 8002934:	e002      	b.n	800293c <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 8002936:	4809      	ldr	r0, [pc, #36]	; (800295c <_Z14TestEncoderAllv+0xd4>)
 8002938:	f00a feb2 	bl	800d6a0 <puts>
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	0800ff38 	.word	0x0800ff38
 8002948:	0800ff4c 	.word	0x0800ff4c
 800294c:	0800ff60 	.word	0x0800ff60
 8002950:	0800ff88 	.word	0x0800ff88
 8002954:	0800ffb0 	.word	0x0800ffb0
 8002958:	0800ffc4 	.word	0x0800ffc4
 800295c:	0800ffec 	.word	0x0800ffec

08002960 <_Z20TestHalfBridgeCreatev>:

/**
 * Test Setup Instructions
 */

bool TestHalfBridgeCreate() {
 8002960:	b580      	push	{r7, lr}
 8002962:	b096      	sub	sp, #88	; 0x58
 8002964:	af00      	add	r7, sp, #0
	TIM_HandleTypeDef * dummy_timer = NULL;
 8002966:	2300      	movs	r3, #0
 8002968:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t dummy_timer_id = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t adc_buf[1];
	STSPIN830 half_bridge(
			dummy_timer,
			dummy_timer_id,
			adc_buf[0]);
 800296e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002972:	4638      	mov	r0, r7
 8002974:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002978:	f7ff f8b6 	bl	8001ae8 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>

	if (half_bridge.get_op_mode() != HalfBridge::OFF) {
 800297c:	463b      	mov	r3, r7
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fdf7 	bl	8001572 <_ZN10HalfBridge11get_op_modeEv>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d004      	beq.n	800299e <_Z20TestHalfBridgeCreatev+0x3e>
		FAIL_PRINT("HalfBridge not initialized in OFF op mode.\r\n");
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <_Z20TestHalfBridgeCreatev+0x48>)
 8002996:	f00a fe83 	bl	800d6a0 <puts>
		return false;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <_Z20TestHalfBridgeCreatev+0x40>
	}
	return true;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3758      	adds	r7, #88	; 0x58
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	08010014 	.word	0x08010014

080029ac <_Z17TestHalfBridgeAllv>:
	}
}
#endif


void TestHalfBridgeAll() {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
	L_PRINT("Test HalfBridge Class");
 80029b2:	490f      	ldr	r1, [pc, #60]	; (80029f0 <_Z17TestHalfBridgeAllv+0x44>)
 80029b4:	480f      	ldr	r0, [pc, #60]	; (80029f4 <_Z17TestHalfBridgeAllv+0x48>)
 80029b6:	f00a fded 	bl	800d594 <iprintf>
	bool hb_passed = true;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
	hb_passed &= TestHalfBridgeCreate();
 80029be:	f7ff ffcf 	bl	8002960 <_Z20TestHalfBridgeCreatev>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf14      	ite	ne
 80029ce:	2301      	movne	r3, #1
 80029d0:	2300      	moveq	r3, #0
 80029d2:	71fb      	strb	r3, [r7, #7]
#ifdef HARDWARE_TEST
	hb_passed &= TestHalfBridgeHardware();
#endif
	if (hb_passed) {
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <_Z17TestHalfBridgeAllv+0x36>
		PASS_PRINT("HalfBridge Class\r\n");
 80029da:	4807      	ldr	r0, [pc, #28]	; (80029f8 <_Z17TestHalfBridgeAllv+0x4c>)
 80029dc:	f00a fe60 	bl	800d6a0 <puts>
	} else {
		FAIL_PRINT("HalfBridge Class\r\n");
	}

}
 80029e0:	e002      	b.n	80029e8 <_Z17TestHalfBridgeAllv+0x3c>
		FAIL_PRINT("HalfBridge Class\r\n");
 80029e2:	4806      	ldr	r0, [pc, #24]	; (80029fc <_Z17TestHalfBridgeAllv+0x50>)
 80029e4:	f00a fe5c 	bl	800d6a0 <puts>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	08010058 	.word	0x08010058
 80029f4:	08010070 	.word	0x08010070
 80029f8:	08010084 	.word	0x08010084
 80029fc:	080100b0 	.word	0x080100b0

08002a00 <_Z23TestPIDControllerCreatev>:
#include "pid_controller.hh"
#include "foc_utils.hh"

const float kErrorMargin = 0.01;

bool TestPIDControllerCreate() {
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b090      	sub	sp, #64	; 0x40
 8002a04:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 8002a06:	485a      	ldr	r0, [pc, #360]	; (8002b70 <_Z23TestPIDControllerCreatev+0x170>)
 8002a08:	f00a fe4a 	bl	800d6a0 <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 8002a0c:	4859      	ldr	r0, [pc, #356]	; (8002b74 <_Z23TestPIDControllerCreatev+0x174>)
 8002a0e:	f00a fe47 	bl	800d6a0 <puts>
	float k_p = 1.2;
 8002a12:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <_Z23TestPIDControllerCreatev+0x178>)
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
	float k_i = 3.4;
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <_Z23TestPIDControllerCreatev+0x17c>)
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
	float k_d = 5.6;
 8002a1a:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <_Z23TestPIDControllerCreatev+0x180>)
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ramp = 5.1;
 8002a1e:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <_Z23TestPIDControllerCreatev+0x184>)
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
	float limit = 2.2;
 8002a22:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <_Z23TestPIDControllerCreatev+0x188>)
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController pid(k_p, k_i, k_d, ramp, limit);
 8002a26:	1d3b      	adds	r3, r7, #4
 8002a28:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 8002a2c:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8002a30:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8002a34:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8002a38:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fe fed1 	bl	80017e4 <_ZN13PIDControllerC1Efffff>

	if (pid.k_p != k_p) {
 8002a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002a4a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a52:	d013      	beq.n	8002a7c <_Z23TestPIDControllerCreatev+0x7c>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8002a54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a56:	f7fd fd9f 	bl	8000598 <__aeabi_f2d>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	460d      	mov	r5, r1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd99 	bl	8000598 <__aeabi_f2d>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	e9cd 2300 	strd	r2, r3, [sp]
 8002a6e:	4622      	mov	r2, r4
 8002a70:	462b      	mov	r3, r5
 8002a72:	4846      	ldr	r0, [pc, #280]	; (8002b8c <_Z23TestPIDControllerCreatev+0x18c>)
 8002a74:	f00a fd8e 	bl	800d594 <iprintf>
		return false;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e074      	b.n	8002b66 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_i != k_i) {
 8002a7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a80:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002a84:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8c:	d013      	beq.n	8002ab6 <_Z23TestPIDControllerCreatev+0xb6>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 8002a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a90:	f7fd fd82 	bl	8000598 <__aeabi_f2d>
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	e9cd 2300 	strd	r2, r3, [sp]
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	462b      	mov	r3, r5
 8002aac:	4838      	ldr	r0, [pc, #224]	; (8002b90 <_Z23TestPIDControllerCreatev+0x190>)
 8002aae:	f00a fd71 	bl	800d594 <iprintf>
		return false;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	e057      	b.n	8002b66 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_d != k_d) {
 8002ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002abe:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d013      	beq.n	8002af0 <_Z23TestPIDControllerCreatev+0xf0>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 8002ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aca:	f7fd fd65 	bl	8000598 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd5f 	bl	8000598 <__aeabi_f2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	e9cd 2300 	strd	r2, r3, [sp]
 8002ae2:	4622      	mov	r2, r4
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	482b      	ldr	r0, [pc, #172]	; (8002b94 <_Z23TestPIDControllerCreatev+0x194>)
 8002ae8:	f00a fd54 	bl	800d594 <iprintf>
		return false;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e03a      	b.n	8002b66 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.ramp != ramp) {
 8002af0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002af8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	d013      	beq.n	8002b2a <_Z23TestPIDControllerCreatev+0x12a>
		T_FAIL_PRINT("Incorrect ramp, constructed with %f but got %f.\r\n", ramp, pid.ramp);
 8002b02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b04:	f7fd fd48 	bl	8000598 <__aeabi_f2d>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	460d      	mov	r5, r1
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fd42 	bl	8000598 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	e9cd 2300 	strd	r2, r3, [sp]
 8002b1c:	4622      	mov	r2, r4
 8002b1e:	462b      	mov	r3, r5
 8002b20:	481d      	ldr	r0, [pc, #116]	; (8002b98 <_Z23TestPIDControllerCreatev+0x198>)
 8002b22:	f00a fd37 	bl	800d594 <iprintf>
		return false;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e01d      	b.n	8002b66 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.limit != limit) {
 8002b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002b32:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3a:	d013      	beq.n	8002b64 <_Z23TestPIDControllerCreatev+0x164>
		T_FAIL_PRINT("Incorrect limit, constructed with %f but got %f.\r\n", limit, pid.limit);
 8002b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b3e:	f7fd fd2b 	bl	8000598 <__aeabi_f2d>
 8002b42:	4604      	mov	r4, r0
 8002b44:	460d      	mov	r5, r1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fd25 	bl	8000598 <__aeabi_f2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9cd 2300 	strd	r2, r3, [sp]
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4810      	ldr	r0, [pc, #64]	; (8002b9c <_Z23TestPIDControllerCreatev+0x19c>)
 8002b5c:	f00a fd1a 	bl	800d594 <iprintf>
		return false;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <_Z23TestPIDControllerCreatev+0x166>
}

	return true;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3738      	adds	r7, #56	; 0x38
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	080100dc 	.word	0x080100dc
 8002b74:	08010104 	.word	0x08010104
 8002b78:	3f99999a 	.word	0x3f99999a
 8002b7c:	4059999a 	.word	0x4059999a
 8002b80:	40b33333 	.word	0x40b33333
 8002b84:	40a33333 	.word	0x40a33333
 8002b88:	400ccccd 	.word	0x400ccccd
 8002b8c:	08010134 	.word	0x08010134
 8002b90:	08010180 	.word	0x08010180
 8002b94:	080101cc 	.word	0x080101cc
 8002b98:	08010218 	.word	0x08010218
 8002b9c:	08010264 	.word	0x08010264

08002ba0 <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b092      	sub	sp, #72	; 0x48
 8002ba4:	af02      	add	r7, sp, #8
	float state = 0;
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	63fb      	str	r3, [r7, #60]	; 0x3c
	float target = 0;
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	63bb      	str	r3, [r7, #56]	; 0x38
	float output = 0;
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	637b      	str	r3, [r7, #52]	; 0x34

	float ramp = 0;
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
	float limit = 0;
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

	TEST_PRINT("Test PID Controller Response.\r\n");
 8002bc4:	48b7      	ldr	r0, [pc, #732]	; (8002ea4 <_Z25TestPIDControllerResponsev+0x304>)
 8002bc6:	f00a fd6b 	bl	800d6a0 <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 8002bca:	48b7      	ldr	r0, [pc, #732]	; (8002ea8 <_Z25TestPIDControllerResponsev+0x308>)
 8002bcc:	f00a fd68 	bl	800d6a0 <puts>
	PIDController pid = PIDController(0, 0, 0, ramp, limit);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 8002bd6:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 8002bda:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8002eac <_Z25TestPIDControllerResponsev+0x30c>
 8002bde:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8002eac <_Z25TestPIDControllerResponsev+0x30c>
 8002be2:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002eac <_Z25TestPIDControllerResponsev+0x30c>
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fdfc 	bl	80017e4 <_ZN13PIDControllerC1Efffff>
	output = pid.Update(0.0f, 10.0f);
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002bf2:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8002eac <_Z25TestPIDControllerResponsev+0x30c>
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fe30 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002bfc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	if (output != 0) {
 8002c00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002c04:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	d00f      	beq.n	8002c2e <_Z25TestPIDControllerResponsev+0x8e>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, output);
 8002c0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c10:	f7fd fcc2 	bl	8000598 <__aeabi_f2d>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	e9cd 2300 	strd	r2, r3, [sp]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	48a2      	ldr	r0, [pc, #648]	; (8002eb0 <_Z25TestPIDControllerResponsev+0x310>)
 8002c26:	f00a fcb5 	bl	800d594 <iprintf>
		return false;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	e282      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 8002c2e:	48a1      	ldr	r0, [pc, #644]	; (8002eb4 <_Z25TestPIDControllerResponsev+0x314>)
 8002c30:	f00a fd36 	bl	800d6a0 <puts>
	state = 1.0;
 8002c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c38:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 2.0;
 8002c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	pid.k_p = 5.0;
 8002c40:	4b9d      	ldr	r3, [pc, #628]	; (8002eb8 <_Z25TestPIDControllerResponsev+0x318>)
 8002c42:	607b      	str	r3, [r7, #4]
	output = pid.Update(state - target, 10.5);
 8002c44:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002c48:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	eef2 0a05 	vmov.f32	s1, #37	; 0x41280000  10.5
 8002c56:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fdfe 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002c60:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float expect_output = (1.0 - 2.0) * 5.0;
 8002c64:	4b95      	ldr	r3, [pc, #596]	; (8002ebc <_Z25TestPIDControllerResponsev+0x31c>)
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
	if (output != expect_output) {
 8002c68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002c6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002c70:	eeb4 7a67 	vcmp.f32	s14, s15
 8002c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c78:	d012      	beq.n	8002ca0 <_Z25TestPIDControllerResponsev+0x100>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 8002c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c7c:	f7fd fc8c 	bl	8000598 <__aeabi_f2d>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c86:	f7fd fc87 	bl	8000598 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	e9cd 2300 	strd	r2, r3, [sp]
 8002c92:	4622      	mov	r2, r4
 8002c94:	462b      	mov	r3, r5
 8002c96:	488a      	ldr	r0, [pc, #552]	; (8002ec0 <_Z25TestPIDControllerResponsev+0x320>)
 8002c98:	f00a fc7c 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e249      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 8002ca0:	4888      	ldr	r0, [pc, #544]	; (8002ec4 <_Z25TestPIDControllerResponsev+0x324>)
 8002ca2:	f00a fcfd 	bl	800d6a0 <puts>
	float prev_error = state - target;
 8002ca6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002caa:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid.k_p = 0;
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
	pid.k_i = 3;
 8002cbc:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <_Z25TestPIDControllerResponsev+0x328>)
 8002cbe:	60bb      	str	r3, [r7, #8]
	target = 98.5;
 8002cc0:	4b82      	ldr	r3, [pc, #520]	; (8002ecc <_Z25TestPIDControllerResponsev+0x32c>)
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 70;
 8002cc4:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <_Z25TestPIDControllerResponsev+0x330>)
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 10.7);
 8002cc8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002ccc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd4:	1d3b      	adds	r3, r7, #4
 8002cd6:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8002ed4 <_Z25TestPIDControllerResponsev+0x334>
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fdbc 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002ce4:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = pid.k_i * (prev_error + (state - target)) * 10.7f / 2.0f;
 8002ce8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002cec:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002cf0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002cf4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cf8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d04:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002ed4 <_Z25TestPIDControllerResponsev+0x334>
 8002d08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d0c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d14:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8002d18:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002d1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	dd13      	ble.n	8002d52 <_Z25TestPIDControllerResponsev+0x1b2>
 8002d2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002d2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d36:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002ed8 <_Z25TestPIDControllerResponsev+0x338>
 8002d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	bf4c      	ite	mi
 8002d44:	2301      	movmi	r3, #1
 8002d46:	2300      	movpl	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f083 0301 	eor.w	r3, r3, #1
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	e012      	b.n	8002d78 <_Z25TestPIDControllerResponsev+0x1d8>
 8002d52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002d56:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002ed8 <_Z25TestPIDControllerResponsev+0x338>
 8002d62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6a:	bf4c      	ite	mi
 8002d6c:	2301      	movmi	r3, #1
 8002d6e:	2300      	movpl	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f083 0301 	eor.w	r3, r3, #1
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <_Z25TestPIDControllerResponsev+0x202>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 8002d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7e:	f7fd fc0b 	bl	8000598 <__aeabi_f2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d88:	f7fd fc06 	bl	8000598 <__aeabi_f2d>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	e9cd 2300 	strd	r2, r3, [sp]
 8002d94:	4622      	mov	r2, r4
 8002d96:	462b      	mov	r3, r5
 8002d98:	4850      	ldr	r0, [pc, #320]	; (8002edc <_Z25TestPIDControllerResponsev+0x33c>)
 8002d9a:	f00a fbfb 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	e1c8      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 8002da2:	484f      	ldr	r0, [pc, #316]	; (8002ee0 <_Z25TestPIDControllerResponsev+0x340>)
 8002da4:	f00a fc7c 	bl	800d6a0 <puts>
	prev_error = state - target;
 8002da8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002dac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002db4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	target = 2;
 8002db8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 5;
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <_Z25TestPIDControllerResponsev+0x318>)
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 11.9);
 8002dc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002dc6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	eddf 0a44 	vldr	s1, [pc, #272]	; 8002ee4 <_Z25TestPIDControllerResponsev+0x344>
 8002dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fd3f 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002dde:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output += pid.k_i * (prev_error + (state - target)) * 11.9f / 2.0f;
 8002de2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002de6:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002dea:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002dee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002df2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfe:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002ee4 <_Z25TestPIDControllerResponsev+0x344>
 8002e02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e16:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8002e1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	dd13      	ble.n	8002e54 <_Z25TestPIDControllerResponsev+0x2b4>
 8002e2c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002e30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e38:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ed8 <_Z25TestPIDControllerResponsev+0x338>
 8002e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	bf4c      	ite	mi
 8002e46:	2301      	movmi	r3, #1
 8002e48:	2300      	movpl	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e012      	b.n	8002e7a <_Z25TestPIDControllerResponsev+0x2da>
 8002e54:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002e58:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e60:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002ed8 <_Z25TestPIDControllerResponsev+0x338>
 8002e64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6c:	bf4c      	ite	mi
 8002e6e:	2301      	movmi	r3, #1
 8002e70:	2300      	movpl	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d036      	beq.n	8002eec <_Z25TestPIDControllerResponsev+0x34c>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 8002e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e80:	f7fd fb8a 	bl	8000598 <__aeabi_f2d>
 8002e84:	4604      	mov	r4, r0
 8002e86:	460d      	mov	r5, r1
 8002e88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	e9cd 2300 	strd	r2, r3, [sp]
 8002e96:	4622      	mov	r2, r4
 8002e98:	462b      	mov	r3, r5
 8002e9a:	4813      	ldr	r0, [pc, #76]	; (8002ee8 <_Z25TestPIDControllerResponsev+0x348>)
 8002e9c:	f00a fb7a 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e147      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
 8002ea4:	080102b0 	.word	0x080102b0
 8002ea8:	080102e0 	.word	0x080102e0
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	08010320 	.word	0x08010320
 8002eb4:	08010374 	.word	0x08010374
 8002eb8:	40a00000 	.word	0x40a00000
 8002ebc:	c0a00000 	.word	0xc0a00000
 8002ec0:	08010394 	.word	0x08010394
 8002ec4:	080103e4 	.word	0x080103e4
 8002ec8:	40400000 	.word	0x40400000
 8002ecc:	42c50000 	.word	0x42c50000
 8002ed0:	428c0000 	.word	0x428c0000
 8002ed4:	412b3333 	.word	0x412b3333
 8002ed8:	3c23d70a 	.word	0x3c23d70a
 8002edc:	08010404 	.word	0x08010404
 8002ee0:	08010454 	.word	0x08010454
 8002ee4:	413e6666 	.word	0x413e6666
 8002ee8:	08010474 	.word	0x08010474
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 8002eec:	4893      	ldr	r0, [pc, #588]	; (800313c <_Z25TestPIDControllerResponsev+0x59c>)
 8002eee:	f00a fbd7 	bl	800d6a0 <puts>
	pid.Reset();
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe fda9 	bl	8001a4c <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	607b      	str	r3, [r7, #4]
	pid.k_i = 0;
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
	pid.k_d = 0;
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
	output = pid.Update(5.0, 1.2);
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8003140 <_Z25TestPIDControllerResponsev+0x5a0>
 8002f12:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fca0 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002f1c:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8002f26:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f36:	dd13      	ble.n	8002f60 <_Z25TestPIDControllerResponsev+0x3c0>
 8002f38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002f3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 8002f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	bf4c      	ite	mi
 8002f52:	2301      	movmi	r3, #1
 8002f54:	2300      	movpl	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e012      	b.n	8002f86 <_Z25TestPIDControllerResponsev+0x3e6>
 8002f60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002f64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 8002f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	bf4c      	ite	mi
 8002f7a:	2301      	movmi	r3, #1
 8002f7c:	2300      	movpl	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f083 0301 	eor.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <_Z25TestPIDControllerResponsev+0x410>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 8002f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f8c:	f7fd fb04 	bl	8000598 <__aeabi_f2d>
 8002f90:	4604      	mov	r4, r0
 8002f92:	460d      	mov	r5, r1
 8002f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f96:	f7fd faff 	bl	8000598 <__aeabi_f2d>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8002fa2:	4622      	mov	r2, r4
 8002fa4:	462b      	mov	r3, r5
 8002fa6:	4868      	ldr	r0, [pc, #416]	; (8003148 <_Z25TestPIDControllerResponsev+0x5a8>)
 8002fa8:	f00a faf4 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 8002fac:	2300      	movs	r3, #0
 8002fae:	e0c1      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 8002fb0:	4866      	ldr	r0, [pc, #408]	; (800314c <_Z25TestPIDControllerResponsev+0x5ac>)
 8002fb2:	f00a fb75 	bl	800d6a0 <puts>
	state = 0;
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 0;
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8002fc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002fc6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002fca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fce:	1d3b      	adds	r3, r7, #4
 8002fd0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fe fc3f 	bl	800185c <_ZN13PIDController6UpdateEff>
 8002fde:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8002fe8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002fec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ff8:	dd13      	ble.n	8003022 <_Z25TestPIDControllerResponsev+0x482>
 8002ffa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002ffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003002:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003006:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 800300a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003012:	bf4c      	ite	mi
 8003014:	2301      	movmi	r3, #1
 8003016:	2300      	movpl	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	e012      	b.n	8003048 <_Z25TestPIDControllerResponsev+0x4a8>
 8003022:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003026:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800302a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 8003032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303a:	bf4c      	ite	mi
 800303c:	2301      	movmi	r3, #1
 800303e:	2300      	movpl	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <_Z25TestPIDControllerResponsev+0x4d2>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 800304c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304e:	f7fd faa3 	bl	8000598 <__aeabi_f2d>
 8003052:	4604      	mov	r4, r0
 8003054:	460d      	mov	r5, r1
 8003056:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003058:	f7fd fa9e 	bl	8000598 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	e9cd 2300 	strd	r2, r3, [sp]
 8003064:	4622      	mov	r2, r4
 8003066:	462b      	mov	r3, r5
 8003068:	4839      	ldr	r0, [pc, #228]	; (8003150 <_Z25TestPIDControllerResponsev+0x5b0>)
 800306a:	f00a fa93 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 800306e:	2300      	movs	r3, #0
 8003070:	e060      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 8003072:	4838      	ldr	r0, [pc, #224]	; (8003154 <_Z25TestPIDControllerResponsev+0x5b4>)
 8003074:	f00a fb14 	bl	800d6a0 <puts>
	pid.k_d = 13.5;
 8003078:	4b37      	ldr	r3, [pc, #220]	; (8003158 <_Z25TestPIDControllerResponsev+0x5b8>)
 800307a:	60fb      	str	r3, [r7, #12]
	state = -487.3;
 800307c:	4b37      	ldr	r3, [pc, #220]	; (800315c <_Z25TestPIDControllerResponsev+0x5bc>)
 800307e:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 22;
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <_Z25TestPIDControllerResponsev+0x5c0>)
 8003082:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 8003084:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003088:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800308c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003096:	eeb0 0a67 	vmov.f32	s0, s15
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fbde 	bl	800185c <_ZN13PIDController6UpdateEff>
 80030a0:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = (-487.3 - 22) * 13.5 / 10;
 80030a4:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <_Z25TestPIDControllerResponsev+0x5c4>)
 80030a6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 80030a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80030ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	dd13      	ble.n	80030e2 <_Z25TestPIDControllerResponsev+0x542>
 80030ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80030be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 80030ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	bf4c      	ite	mi
 80030d4:	2301      	movmi	r3, #1
 80030d6:	2300      	movpl	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f083 0301 	eor.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e012      	b.n	8003108 <_Z25TestPIDControllerResponsev+0x568>
 80030e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80030e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80030ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003144 <_Z25TestPIDControllerResponsev+0x5a4>
 80030f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	bf4c      	ite	mi
 80030fc:	2301      	movmi	r3, #1
 80030fe:	2300      	movpl	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f083 0301 	eor.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d012      	beq.n	8003132 <_Z25TestPIDControllerResponsev+0x592>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 800310c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310e:	f7fd fa43 	bl	8000598 <__aeabi_f2d>
 8003112:	4604      	mov	r4, r0
 8003114:	460d      	mov	r5, r1
 8003116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003118:	f7fd fa3e 	bl	8000598 <__aeabi_f2d>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	e9cd 2300 	strd	r2, r3, [sp]
 8003124:	4622      	mov	r2, r4
 8003126:	462b      	mov	r3, r5
 8003128:	480f      	ldr	r0, [pc, #60]	; (8003168 <_Z25TestPIDControllerResponsev+0x5c8>)
 800312a:	f00a fa33 	bl	800d594 <iprintf>
				expect_output, output);
		return false;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <_Z25TestPIDControllerResponsev+0x594>
	}

	// TODO: test ramp and limit

	return true;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3740      	adds	r7, #64	; 0x40
 8003138:	46bd      	mov	sp, r7
 800313a:	bdb0      	pop	{r4, r5, r7, pc}
 800313c:	080104c4 	.word	0x080104c4
 8003140:	3f99999a 	.word	0x3f99999a
 8003144:	3c23d70a 	.word	0x3c23d70a
 8003148:	080104e8 	.word	0x080104e8
 800314c:	08010538 	.word	0x08010538
 8003150:	0801055c 	.word	0x0801055c
 8003154:	080105ac 	.word	0x080105ac
 8003158:	41580000 	.word	0x41580000
 800315c:	c3f3a666 	.word	0xc3f3a666
 8003160:	41b00000 	.word	0x41b00000
 8003164:	c42be385 	.word	0xc42be385
 8003168:	080105cc 	.word	0x080105cc

0800316c <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 8003172:	4915      	ldr	r1, [pc, #84]	; (80031c8 <_Z20TestPIDControllerAllv+0x5c>)
 8003174:	4815      	ldr	r0, [pc, #84]	; (80031cc <_Z20TestPIDControllerAllv+0x60>)
 8003176:	f00a fa0d 	bl	800d594 <iprintf>
	bool pid_passed = true;
 800317a:	2301      	movs	r3, #1
 800317c:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 800317e:	f7ff fc3f 	bl	8002a00 <_Z23TestPIDControllerCreatev>
 8003182:	4603      	mov	r3, r0
 8003184:	461a      	mov	r2, r3
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	bf14      	ite	ne
 800318e:	2301      	movne	r3, #1
 8003190:	2300      	moveq	r3, #0
 8003192:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 8003194:	f7ff fd04 	bl	8002ba0 <_Z25TestPIDControllerResponsev>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf14      	ite	ne
 80031a4:	2301      	movne	r3, #1
 80031a6:	2300      	moveq	r3, #0
 80031a8:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 80031b0:	4807      	ldr	r0, [pc, #28]	; (80031d0 <_Z20TestPIDControllerAllv+0x64>)
 80031b2:	f00a fa75 	bl	800d6a0 <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 80031b6:	e002      	b.n	80031be <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 80031b8:	4806      	ldr	r0, [pc, #24]	; (80031d4 <_Z20TestPIDControllerAllv+0x68>)
 80031ba:	f00a fa71 	bl	800d6a0 <puts>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	0801061c 	.word	0x0801061c
 80031cc:	08010638 	.word	0x08010638
 80031d0:	0801064c 	.word	0x0801064c
 80031d4:	0801067c 	.word	0x0801067c

080031d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dbprint_uart = &huart3;
 80031dc:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <main+0x80>)
 80031de:	4a1f      	ldr	r2, [pc, #124]	; (800325c <main+0x84>)
 80031e0:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 80031e2:	4b1f      	ldr	r3, [pc, #124]	; (8003260 <main+0x88>)
 80031e4:	4a1f      	ldr	r2, [pc, #124]	; (8003264 <main+0x8c>)
 80031e6:	601a      	str	r2, [r3, #0]
	half_bridge_pwm_timer = &htim1;
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <main+0x90>)
 80031ea:	4a20      	ldr	r2, [pc, #128]	; (800326c <main+0x94>)
 80031ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ee:	f001 f876 	bl	80042de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031f2:	f000 f84b 	bl	800328c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031f6:	f000 fbad 	bl	8003954 <MX_GPIO_Init>
  MX_DMA_Init();
 80031fa:	f000 fb8d 	bl	8003918 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80031fe:	f000 fb2d 	bl	800385c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003202:	f000 fb5b 	bl	80038bc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8003206:	f000 f945 	bl	8003494 <MX_SPI5_Init>
  MX_ADC1_Init();
 800320a:	f000 f8d5 	bl	80033b8 <MX_ADC1_Init>
  MX_TIM4_Init();
 800320e:	f000 faaf 	bl	8003770 <MX_TIM4_Init>
  MX_TIM1_Init();
 8003212:	f000 f97d 	bl	8003510 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003216:	f000 fa3f 	bl	8003698 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 800321a:	2201      	movs	r2, #1
 800321c:	2110      	movs	r1, #16
 800321e:	4814      	ldr	r0, [pc, #80]	; (8003270 <main+0x98>)
 8003220:	f002 fab0 	bl	8005784 <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curr_sense_adc_buf, ADC_BUF_LEN) != HAL_OK) {
 8003224:	2203      	movs	r2, #3
 8003226:	4913      	ldr	r1, [pc, #76]	; (8003274 <main+0x9c>)
 8003228:	4813      	ldr	r0, [pc, #76]	; (8003278 <main+0xa0>)
 800322a:	f001 f8ed 	bl	8004408 <HAL_ADC_Start_DMA>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <main+0x60>
  	  Error_Handler();
 8003234:	f000 fc9c 	bl	8003b70 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim4);
 8003238:	4810      	ldr	r0, [pc, #64]	; (800327c <main+0xa4>)
 800323a:	f004 f9f3 	bl	8007624 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800323e:	f006 fc57 	bl	8009af0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003242:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <main+0xa8>)
 8003244:	2100      	movs	r1, #0
 8003246:	480f      	ldr	r0, [pc, #60]	; (8003284 <main+0xac>)
 8003248:	f006 fcee 	bl	8009c28 <osThreadNew>
 800324c:	4603      	mov	r3, r0
 800324e:	4a0e      	ldr	r2, [pc, #56]	; (8003288 <main+0xb0>)
 8003250:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003252:	f006 fc81 	bl	8009b58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003256:	e7fe      	b.n	8003256 <main+0x7e>
 8003258:	2000527c 	.word	0x2000527c
 800325c:	20004ccc 	.word	0x20004ccc
 8003260:	20005150 	.word	0x20005150
 8003264:	20004c28 	.word	0x20004c28
 8003268:	20004c20 	.word	0x20004c20
 800326c:	200051fc 	.word	0x200051fc
 8003270:	40020000 	.word	0x40020000
 8003274:	20000304 	.word	0x20000304
 8003278:	20005154 	.word	0x20005154
 800327c:	20004c8c 	.word	0x20004c8c
 8003280:	08010758 	.word	0x08010758
 8003284:	08003b35 	.word	0x08003b35
 8003288:	20004c24 	.word	0x20004c24

0800328c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b0b4      	sub	sp, #208	; 0xd0
 8003290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003292:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003296:	2230      	movs	r2, #48	; 0x30
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f009 fd08 	bl	800ccb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	2280      	movs	r2, #128	; 0x80
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f009 fcf9 	bl	800ccb0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80032be:	f002 fbdd 	bl	8005a7c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	4b3a      	ldr	r3, [pc, #232]	; (80033ac <SystemClock_Config+0x120>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	4a39      	ldr	r2, [pc, #228]	; (80033ac <SystemClock_Config+0x120>)
 80032c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032cc:	6413      	str	r3, [r2, #64]	; 0x40
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <SystemClock_Config+0x120>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <SystemClock_Config+0x124>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <SystemClock_Config+0x124>)
 80032e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <SystemClock_Config+0x124>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003300:	2302      	movs	r3, #2
 8003302:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003306:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800330a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800330e:	2304      	movs	r3, #4
 8003310:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003314:	23d8      	movs	r3, #216	; 0xd8
 8003316:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800331a:	2302      	movs	r3, #2
 800331c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8003320:	2309      	movs	r3, #9
 8003322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003326:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800332a:	4618      	mov	r0, r3
 800332c:	f002 fc06 	bl	8005b3c <HAL_RCC_OscConfig>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003336:	f000 fc1b 	bl	8003b70 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800333a:	f002 fbaf 	bl	8005a9c <HAL_PWREx_EnableOverDrive>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003344:	f000 fc14 	bl	8003b70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003348:	230f      	movs	r3, #15
 800334a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334e:	2302      	movs	r3, #2
 8003350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003354:	2300      	movs	r3, #0
 8003356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800335a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800335e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800336a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800336e:	2107      	movs	r1, #7
 8003370:	4618      	mov	r0, r3
 8003372:	f002 fe87 	bl	8006084 <HAL_RCC_ClockConfig>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800337c:	f000 fbf8 	bl	8003b70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <SystemClock_Config+0x128>)
 8003382:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003384:	2300      	movs	r3, #0
 8003386:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800338e:	f107 030c 	add.w	r3, r7, #12
 8003392:	4618      	mov	r0, r3
 8003394:	f003 f8aa 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800339e:	f000 fbe7 	bl	8003b70 <Error_Handler>
  }
}
 80033a2:	bf00      	nop
 80033a4:	37d0      	adds	r7, #208	; 0xd0
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40007000 	.word	0x40007000
 80033b4:	00200100 	.word	0x00200100

080033b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <MX_ADC1_Init+0xd4>)
 80033cc:	4a30      	ldr	r2, [pc, #192]	; (8003490 <MX_ADC1_Init+0xd8>)
 80033ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <MX_ADC1_Init+0xd4>)
 80033d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <MX_ADC1_Init+0xd4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <MX_ADC1_Init+0xd4>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <MX_ADC1_Init+0xd4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <MX_ADC1_Init+0xd4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <MX_ADC1_Init+0xd4>)
 80033f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <MX_ADC1_Init+0xd4>)
 80033fc:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8003400:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <MX_ADC1_Init+0xd4>)
 8003404:	2200      	movs	r2, #0
 8003406:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <MX_ADC1_Init+0xd4>)
 800340a:	2203      	movs	r2, #3
 800340c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800340e:	4b1f      	ldr	r3, [pc, #124]	; (800348c <MX_ADC1_Init+0xd4>)
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003416:	4b1d      	ldr	r3, [pc, #116]	; (800348c <MX_ADC1_Init+0xd4>)
 8003418:	2200      	movs	r2, #0
 800341a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800341c:	481b      	ldr	r0, [pc, #108]	; (800348c <MX_ADC1_Init+0xd4>)
 800341e:	f000 ffaf 	bl	8004380 <HAL_ADC_Init>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8003428:	f000 fba2 	bl	8003b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800342c:	2301      	movs	r3, #1
 800342e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003430:	2301      	movs	r3, #1
 8003432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003434:	2301      	movs	r3, #1
 8003436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003438:	463b      	mov	r3, r7
 800343a:	4619      	mov	r1, r3
 800343c:	4813      	ldr	r0, [pc, #76]	; (800348c <MX_ADC1_Init+0xd4>)
 800343e:	f001 f8e5 	bl	800460c <HAL_ADC_ConfigChannel>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8003448:	f000 fb92 	bl	8003b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800344c:	2309      	movs	r3, #9
 800344e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003450:	2302      	movs	r3, #2
 8003452:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003454:	463b      	mov	r3, r7
 8003456:	4619      	mov	r1, r3
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <MX_ADC1_Init+0xd4>)
 800345a:	f001 f8d7 	bl	800460c <HAL_ADC_ConfigChannel>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8003464:	f000 fb84 	bl	8003b70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003468:	2308      	movs	r3, #8
 800346a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800346c:	2303      	movs	r3, #3
 800346e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003470:	463b      	mov	r3, r7
 8003472:	4619      	mov	r1, r3
 8003474:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_ADC1_Init+0xd4>)
 8003476:	f001 f8c9 	bl	800460c <HAL_ADC_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003480:	f000 fb76 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20005154 	.word	0x20005154
 8003490:	40012000 	.word	0x40012000

08003494 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <MX_SPI5_Init+0x74>)
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <MX_SPI5_Init+0x78>)
 800349c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <MX_SPI5_Init+0x74>)
 80034a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034a4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80034a6:	4b18      	ldr	r3, [pc, #96]	; (8003508 <MX_SPI5_Init+0x74>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80034ac:	4b16      	ldr	r3, [pc, #88]	; (8003508 <MX_SPI5_Init+0x74>)
 80034ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034b2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <MX_SPI5_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80034ba:	4b13      	ldr	r3, [pc, #76]	; (8003508 <MX_SPI5_Init+0x74>)
 80034bc:	2201      	movs	r2, #1
 80034be:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <MX_SPI5_Init+0x74>)
 80034c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c6:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80034c8:	4b0f      	ldr	r3, [pc, #60]	; (8003508 <MX_SPI5_Init+0x74>)
 80034ca:	2218      	movs	r2, #24
 80034cc:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ce:	4b0e      	ldr	r3, [pc, #56]	; (8003508 <MX_SPI5_Init+0x74>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <MX_SPI5_Init+0x74>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034da:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <MX_SPI5_Init+0x74>)
 80034dc:	2200      	movs	r2, #0
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80034e0:	4b09      	ldr	r3, [pc, #36]	; (8003508 <MX_SPI5_Init+0x74>)
 80034e2:	2207      	movs	r2, #7
 80034e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034e6:	4b08      	ldr	r3, [pc, #32]	; (8003508 <MX_SPI5_Init+0x74>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <MX_SPI5_Init+0x74>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <MX_SPI5_Init+0x74>)
 80034f4:	f003 fb42 	bl	8006b7c <HAL_SPI_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80034fe:	f000 fb37 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20004c28 	.word	0x20004c28
 800350c:	40015000 	.word	0x40015000

08003510 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b09a      	sub	sp, #104	; 0x68
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003516:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003524:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003530:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	611a      	str	r2, [r3, #16]
 8003540:	615a      	str	r2, [r3, #20]
 8003542:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	222c      	movs	r2, #44	; 0x2c
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f009 fbb0 	bl	800ccb0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <MX_TIM1_Init+0x180>)
 8003552:	4a50      	ldr	r2, [pc, #320]	; (8003694 <MX_TIM1_Init+0x184>)
 8003554:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003556:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <MX_TIM1_Init+0x180>)
 8003558:	2200      	movs	r2, #0
 800355a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800355c:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <MX_TIM1_Init+0x180>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <MX_TIM1_Init+0x180>)
 8003564:	f242 7210 	movw	r2, #10000	; 0x2710
 8003568:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800356a:	4b49      	ldr	r3, [pc, #292]	; (8003690 <MX_TIM1_Init+0x180>)
 800356c:	2200      	movs	r2, #0
 800356e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003570:	4b47      	ldr	r3, [pc, #284]	; (8003690 <MX_TIM1_Init+0x180>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003576:	4b46      	ldr	r3, [pc, #280]	; (8003690 <MX_TIM1_Init+0x180>)
 8003578:	2280      	movs	r2, #128	; 0x80
 800357a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800357c:	4844      	ldr	r0, [pc, #272]	; (8003690 <MX_TIM1_Init+0x180>)
 800357e:	f004 f825 	bl	80075cc <HAL_TIM_Base_Init>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003588:	f000 faf2 	bl	8003b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800358c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003590:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003596:	4619      	mov	r1, r3
 8003598:	483d      	ldr	r0, [pc, #244]	; (8003690 <MX_TIM1_Init+0x180>)
 800359a:	f004 fc17 	bl	8007dcc <HAL_TIM_ConfigClockSource>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80035a4:	f000 fae4 	bl	8003b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035a8:	4839      	ldr	r0, [pc, #228]	; (8003690 <MX_TIM1_Init+0x180>)
 80035aa:	f004 f89a 	bl	80076e2 <HAL_TIM_PWM_Init>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80035b4:	f000 fadc 	bl	8003b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80035b8:	2320      	movs	r3, #32
 80035ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035c0:	2300      	movs	r3, #0
 80035c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035c8:	4619      	mov	r1, r3
 80035ca:	4831      	ldr	r0, [pc, #196]	; (8003690 <MX_TIM1_Init+0x180>)
 80035cc:	f005 f9ac 	bl	8008928 <HAL_TIMEx_MasterConfigSynchronization>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80035d6:	f000 facb 	bl	8003b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80035da:	2370      	movs	r3, #112	; 0x70
 80035dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035e2:	2300      	movs	r3, #0
 80035e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035e6:	2300      	movs	r3, #0
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035ea:	2300      	movs	r3, #0
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035fa:	2200      	movs	r2, #0
 80035fc:	4619      	mov	r1, r3
 80035fe:	4824      	ldr	r0, [pc, #144]	; (8003690 <MX_TIM1_Init+0x180>)
 8003600:	f004 facc 	bl	8007b9c <HAL_TIM_PWM_ConfigChannel>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800360a:	f000 fab1 	bl	8003b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800360e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003612:	2204      	movs	r2, #4
 8003614:	4619      	mov	r1, r3
 8003616:	481e      	ldr	r0, [pc, #120]	; (8003690 <MX_TIM1_Init+0x180>)
 8003618:	f004 fac0 	bl	8007b9c <HAL_TIM_PWM_ConfigChannel>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003622:	f000 faa5 	bl	8003b70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003626:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800362a:	2208      	movs	r2, #8
 800362c:	4619      	mov	r1, r3
 800362e:	4818      	ldr	r0, [pc, #96]	; (8003690 <MX_TIM1_Init+0x180>)
 8003630:	f004 fab4 	bl	8007b9c <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800363a:	f000 fa99 	bl	8003b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800363e:	2300      	movs	r3, #0
 8003640:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 800364a:	234b      	movs	r3, #75	; 0x4b
 800364c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003652:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003656:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4807      	ldr	r0, [pc, #28]	; (8003690 <MX_TIM1_Init+0x180>)
 8003674:	f005 f9e6 	bl	8008a44 <HAL_TIMEx_ConfigBreakDeadTime>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800367e:	f000 fa77 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003682:	4803      	ldr	r0, [pc, #12]	; (8003690 <MX_TIM1_Init+0x180>)
 8003684:	f000 fbba 	bl	8003dfc <HAL_TIM_MspPostInit>

}
 8003688:	bf00      	nop
 800368a:	3768      	adds	r7, #104	; 0x68
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200051fc 	.word	0x200051fc
 8003694:	40010000 	.word	0x40010000

08003698 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	; 0x30
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800369e:	f107 0320 	add.w	r3, r7, #32
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	60da      	str	r2, [r3, #12]
 80036ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036bc:	463b      	mov	r3, r7
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036c6:	4b29      	ldr	r3, [pc, #164]	; (800376c <MX_TIM2_Init+0xd4>)
 80036c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <MX_TIM2_Init+0xd4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <MX_TIM2_Init+0xd4>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <MX_TIM2_Init+0xd4>)
 80036dc:	2296      	movs	r2, #150	; 0x96
 80036de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e0:	4b22      	ldr	r3, [pc, #136]	; (800376c <MX_TIM2_Init+0xd4>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <MX_TIM2_Init+0xd4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036ec:	481f      	ldr	r0, [pc, #124]	; (800376c <MX_TIM2_Init+0xd4>)
 80036ee:	f003 ff6d 	bl	80075cc <HAL_TIM_Base_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80036f8:	f000 fa3a 	bl	8003b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003700:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003702:	f107 0320 	add.w	r3, r7, #32
 8003706:	4619      	mov	r1, r3
 8003708:	4818      	ldr	r0, [pc, #96]	; (800376c <MX_TIM2_Init+0xd4>)
 800370a:	f004 fb5f 	bl	8007dcc <HAL_TIM_ConfigClockSource>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003714:	f000 fa2c 	bl	8003b70 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8003718:	2108      	movs	r1, #8
 800371a:	4814      	ldr	r0, [pc, #80]	; (800376c <MX_TIM2_Init+0xd4>)
 800371c:	f004 f85a 	bl	80077d4 <HAL_TIM_OnePulse_Init>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003726:	f000 fa23 	bl	8003b70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800372a:	2306      	movs	r3, #6
 800372c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003732:	f107 030c 	add.w	r3, r7, #12
 8003736:	4619      	mov	r1, r3
 8003738:	480c      	ldr	r0, [pc, #48]	; (800376c <MX_TIM2_Init+0xd4>)
 800373a:	f004 fc0d 	bl	8007f58 <HAL_TIM_SlaveConfigSynchro>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8003744:	f000 fa14 	bl	8003b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003748:	2320      	movs	r3, #32
 800374a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374c:	2300      	movs	r3, #0
 800374e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003750:	463b      	mov	r3, r7
 8003752:	4619      	mov	r1, r3
 8003754:	4805      	ldr	r0, [pc, #20]	; (800376c <MX_TIM2_Init+0xd4>)
 8003756:	f005 f8e7 	bl	8008928 <HAL_TIMEx_MasterConfigSynchronization>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003760:	f000 fa06 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003764:	bf00      	nop
 8003766:	3730      	adds	r7, #48	; 0x30
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	2000523c 	.word	0x2000523c

08003770 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08e      	sub	sp, #56	; 0x38
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003790:	463b      	mov	r3, r7
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	611a      	str	r2, [r3, #16]
 800379e:	615a      	str	r2, [r3, #20]
 80037a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037a2:	4b2c      	ldr	r3, [pc, #176]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037a4:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <MX_TIM4_Init+0xe8>)
 80037a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 80037a8:	4b2a      	ldr	r3, [pc, #168]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037aa:	f245 4260 	movw	r2, #21600	; 0x5460
 80037ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b0:	4b28      	ldr	r3, [pc, #160]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80037ca:	4822      	ldr	r0, [pc, #136]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037cc:	f003 fefe 	bl	80075cc <HAL_TIM_Base_Init>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80037d6:	f000 f9cb 	bl	8003b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80037e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e4:	4619      	mov	r1, r3
 80037e6:	481b      	ldr	r0, [pc, #108]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037e8:	f004 faf0 	bl	8007dcc <HAL_TIM_ConfigClockSource>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80037f2:	f000 f9bd 	bl	8003b70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80037f6:	4817      	ldr	r0, [pc, #92]	; (8003854 <MX_TIM4_Init+0xe4>)
 80037f8:	f003 ff3e 	bl	8007678 <HAL_TIM_OC_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8003802:	f000 f9b5 	bl	8003b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003806:	2320      	movs	r3, #32
 8003808:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380a:	2300      	movs	r3, #0
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800380e:	f107 031c 	add.w	r3, r7, #28
 8003812:	4619      	mov	r1, r3
 8003814:	480f      	ldr	r0, [pc, #60]	; (8003854 <MX_TIM4_Init+0xe4>)
 8003816:	f005 f887 	bl	8008928 <HAL_TIMEx_MasterConfigSynchronization>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8003820:	f000 f9a6 	bl	8003b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003834:	463b      	mov	r3, r7
 8003836:	220c      	movs	r2, #12
 8003838:	4619      	mov	r1, r3
 800383a:	4806      	ldr	r0, [pc, #24]	; (8003854 <MX_TIM4_Init+0xe4>)
 800383c:	f004 f930 	bl	8007aa0 <HAL_TIM_OC_ConfigChannel>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003846:	f000 f993 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800384a:	bf00      	nop
 800384c:	3738      	adds	r7, #56	; 0x38
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20004c8c 	.word	0x20004c8c
 8003858:	40000800 	.word	0x40000800

0800385c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <MX_USART3_UART_Init+0x5c>)
 8003864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800386c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003882:	220c      	movs	r2, #12
 8003884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 800389a:	2200      	movs	r2, #0
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800389e:	4805      	ldr	r0, [pc, #20]	; (80038b4 <MX_USART3_UART_Init+0x58>)
 80038a0:	f005 f991 	bl	8008bc6 <HAL_UART_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038aa:	f000 f961 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20004ccc 	.word	0x20004ccc
 80038b8:	40004800 	.word	0x40004800

080038bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80038c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038ca:	2206      	movs	r2, #6
 80038cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038d6:	2202      	movs	r2, #2
 80038d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80038da:	4b0e      	ldr	r3, [pc, #56]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038dc:	2200      	movs	r2, #0
 80038de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80038f2:	4b08      	ldr	r3, [pc, #32]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80038fe:	4805      	ldr	r0, [pc, #20]	; (8003914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003900:	f001 ff73 	bl	80057ea <HAL_PCD_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800390a:	f000 f931 	bl	8003b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20004d4c 	.word	0x20004d4c

08003918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <MX_DMA_Init+0x38>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <MX_DMA_Init+0x38>)
 8003924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <MX_DMA_Init+0x38>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2105      	movs	r1, #5
 800393a:	2038      	movs	r0, #56	; 0x38
 800393c:	f001 f9e4 	bl	8004d08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003940:	2038      	movs	r0, #56	; 0x38
 8003942:	f001 f9fd 	bl	8004d40 <HAL_NVIC_EnableIRQ>

}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395a:	f107 031c 	add.w	r3, r7, #28
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800396a:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <MX_GPIO_Init+0x154>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	4a4e      	ldr	r2, [pc, #312]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003970:	f043 0304 	orr.w	r3, r3, #4
 8003974:	6313      	str	r3, [r2, #48]	; 0x30
 8003976:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a48      	ldr	r2, [pc, #288]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003988:	f043 0320 	orr.w	r3, r3, #32
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b46      	ldr	r3, [pc, #280]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <MX_GPIO_Init+0x154>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a42      	ldr	r2, [pc, #264]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a3c      	ldr	r2, [pc, #240]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b3a      	ldr	r3, [pc, #232]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	4b37      	ldr	r3, [pc, #220]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a36      	ldr	r2, [pc, #216]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b34      	ldr	r3, [pc, #208]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	4a30      	ldr	r2, [pc, #192]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	6313      	str	r3, [r2, #48]	; 0x30
 80039ee:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039fa:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <MX_GPIO_Init+0x154>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	4a2a      	ldr	r2, [pc, #168]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a04:	6313      	str	r3, [r2, #48]	; 0x30
 8003a06:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <MX_GPIO_Init+0x154>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	603b      	str	r3, [r7, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2110      	movs	r1, #16
 8003a16:	4825      	ldr	r0, [pc, #148]	; (8003aac <MX_GPIO_Init+0x158>)
 8003a18:	f001 feb4 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2140      	movs	r1, #64	; 0x40
 8003a20:	4823      	ldr	r0, [pc, #140]	; (8003ab0 <MX_GPIO_Init+0x15c>)
 8003a22:	f001 feaf 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a26:	2200      	movs	r2, #0
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	4822      	ldr	r0, [pc, #136]	; (8003ab4 <MX_GPIO_Init+0x160>)
 8003a2c:	f001 feaa 	bl	8005784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a36:	4b20      	ldr	r3, [pc, #128]	; (8003ab8 <MX_GPIO_Init+0x164>)
 8003a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	4619      	mov	r1, r3
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <MX_GPIO_Init+0x168>)
 8003a46:	f001 fd01 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 8003a4a:	2310      	movs	r3, #16
 8003a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a56:	2302      	movs	r3, #2
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4812      	ldr	r0, [pc, #72]	; (8003aac <MX_GPIO_Init+0x158>)
 8003a62:	f001 fcf3 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a66:	2340      	movs	r3, #64	; 0x40
 8003a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a76:	f107 031c 	add.w	r3, r7, #28
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	480c      	ldr	r0, [pc, #48]	; (8003ab0 <MX_GPIO_Init+0x15c>)
 8003a7e:	f001 fce5 	bl	800544c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a86:	2301      	movs	r3, #1
 8003a88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003a92:	f107 031c 	add.w	r3, r7, #28
 8003a96:	4619      	mov	r1, r3
 8003a98:	4806      	ldr	r0, [pc, #24]	; (8003ab4 <MX_GPIO_Init+0x160>)
 8003a9a:	f001 fcd7 	bl	800544c <HAL_GPIO_Init>

}
 8003a9e:	bf00      	nop
 8003aa0:	3730      	adds	r7, #48	; 0x30
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40020000 	.word	0x40020000
 8003ab0:	40021800 	.word	0x40021800
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	10110000 	.word	0x10110000
 8003abc:	40020800 	.word	0x40020800

08003ac0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8003ac8:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <__io_putchar+0x24>)
 8003aca:	6818      	ldr	r0, [r3, #0]
 8003acc:	1d39      	adds	r1, r7, #4
 8003ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f005 f8c5 	bl	8008c62 <HAL_UART_Transmit>

  return ch;
 8003ad8:	687b      	ldr	r3, [r7, #4]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	2000527c 	.word	0x2000527c

08003ae8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
//  printf("hay\r\n");
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	60fb      	str	r3, [r7, #12]
	if (motor_control_task_handle != NULL) {
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_ADC_ConvCpltCallback+0x44>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_ADC_ConvCpltCallback+0x3a>
		vTaskNotifyGiveFromISR(motor_control_task_handle, &xHigherPriorityTaskWoken);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_ADC_ConvCpltCallback+0x44>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f107 020c 	add.w	r2, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f007 ff40 	bl	800b98c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d007      	beq.n	8003b22 <HAL_ADC_ConvCpltCallback+0x3a>
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_ADC_ConvCpltCallback+0x48>)
 8003b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
	}
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000204 	.word	0x20000204
 8003b30:	e000ed04 	.word	0xe000ed04

08003b34 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  main_run();
 8003b3c:	f7fe f818 	bl	8001b70 <main_run>
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  osDelay(1000);
 8003b40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b44:	f006 f916 	bl	8009d74 <osDelay>
 8003b48:	e7fa      	b.n	8003b40 <StartDefaultTask+0xc>
	...

08003b4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b5e:	f000 fbcb 	bl	80042f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40001000 	.word	0x40001000

08003b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b74:	b672      	cpsid	i
}
 8003b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <Error_Handler+0x8>
	...

08003b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_MspInit+0x4c>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	210f      	movs	r1, #15
 8003bb6:	f06f 0001 	mvn.w	r0, #1
 8003bba:	f001 f8a5 	bl	8004d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023800 	.word	0x40023800

08003bcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_ADC_MspInit+0x104>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d16c      	bne.n	8003cc8 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bee:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	4a38      	ldr	r2, [pc, #224]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfa:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	613b      	str	r3, [r7, #16]
 8003c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	4a32      	ldr	r2, [pc, #200]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6313      	str	r3, [r2, #48]	; 0x30
 8003c12:	4b30      	ldr	r3, [pc, #192]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1e:	4b2d      	ldr	r3, [pc, #180]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	6313      	str	r3, [r2, #48]	; 0x30
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_ADC_MspInit+0x108>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	60bb      	str	r3, [r7, #8]
 8003c34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CURR_FB_U_Pin;
 8003c36:	2302      	movs	r3, #2
 8003c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURR_FB_U_GPIO_Port, &GPIO_InitStruct);
 8003c42:	f107 0314 	add.w	r3, r7, #20
 8003c46:	4619      	mov	r1, r3
 8003c48:	4823      	ldr	r0, [pc, #140]	; (8003cd8 <HAL_ADC_MspInit+0x10c>)
 8003c4a:	f001 fbff 	bl	800544c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_W_Pin|CURR_FB_V_Pin;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c52:	2303      	movs	r3, #3
 8003c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481e      	ldr	r0, [pc, #120]	; (8003cdc <HAL_ADC_MspInit+0x110>)
 8003c62:	f001 fbf3 	bl	800544c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c68:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_ADC_MspInit+0x118>)
 8003c6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003c6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c78:	4b19      	ldr	r3, [pc, #100]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c96:	4b12      	ldr	r3, [pc, #72]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ca4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cac:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003cae:	f001 f855 	bl	8004d5c <HAL_DMA_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8003cb8:	f7ff ff5a 	bl	8003b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003cc0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cc2:	4a07      	ldr	r2, [pc, #28]	; (8003ce0 <HAL_ADC_MspInit+0x114>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cc8:	bf00      	nop
 8003cca:	3728      	adds	r7, #40	; 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40012000 	.word	0x40012000
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40020000 	.word	0x40020000
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	2000519c 	.word	0x2000519c
 8003ce4:	40026410 	.word	0x40026410

08003ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	; 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf0:	f107 0314 	add.w	r3, r7, #20
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_SPI_MspInit+0x7c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d128      	bne.n	8003d5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003d0a:	4b17      	ldr	r3, [pc, #92]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0e:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d14:	6453      	str	r3, [r2, #68]	; 0x44
 8003d16:	4b14      	ldr	r3, [pc, #80]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d22:	4b11      	ldr	r3, [pc, #68]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a10      	ldr	r2, [pc, #64]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	4b0e      	ldr	r3, [pc, #56]	; (8003d68 <HAL_SPI_MspInit+0x80>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8003d3a:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8003d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d40:	2302      	movs	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	4619      	mov	r1, r3
 8003d56:	4805      	ldr	r0, [pc, #20]	; (8003d6c <HAL_SPI_MspInit+0x84>)
 8003d58:	f001 fb78 	bl	800544c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003d5c:	bf00      	nop
 8003d5e:	3728      	adds	r7, #40	; 0x28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40015000 	.word	0x40015000
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	40021400 	.word	0x40021400

08003d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_TIM_Base_MspInit+0x80>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10c      	bne.n	8003d9c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d8e:	4b19      	ldr	r3, [pc, #100]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d9a:	e022      	b.n	8003de2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	6413      	str	r3, [r2, #64]	; 0x40
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
}
 8003dbe:	e010      	b.n	8003de2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <HAL_TIM_Base_MspInit+0x88>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d10b      	bne.n	8003de2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_TIM_Base_MspInit+0x84>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40000800 	.word	0x40000800

08003dfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e04:	f107 0314 	add.w	r3, r7, #20
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	605a      	str	r2, [r3, #4]
 8003e0e:	609a      	str	r2, [r3, #8]
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a20      	ldr	r2, [pc, #128]	; (8003e9c <HAL_TIM_MspPostInit+0xa0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d139      	bne.n	8003e92 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a1f      	ldr	r2, [pc, #124]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e24:	f043 0302 	orr.w	r3, r3, #2
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e36:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a19      	ldr	r2, [pc, #100]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b17      	ldr	r3, [pc, #92]	; (8003ea0 <HAL_TIM_MspPostInit+0xa4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin|ENW_Pin;
 8003e4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e60:	2301      	movs	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <HAL_TIM_MspPostInit+0xa8>)
 8003e6c:	f001 faee 	bl	800544c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 8003e70:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e76:	2302      	movs	r3, #2
 8003e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 0314 	add.w	r3, r7, #20
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4806      	ldr	r0, [pc, #24]	; (8003ea8 <HAL_TIM_MspPostInit+0xac>)
 8003e8e:	f001 fadd 	bl	800544c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e92:	bf00      	nop
 8003e94:	3728      	adds	r7, #40	; 0x28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40010000 	.word	0x40010000
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	40020000 	.word	0x40020000

08003eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_UART_MspInit+0x7c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d128      	bne.n	8003f20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ece:	4b17      	ldr	r3, [pc, #92]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a16      	ldr	r2, [pc, #88]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003eec:	f043 0308 	orr.w	r3, r3, #8
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <HAL_UART_MspInit+0x80>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003efe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f10:	2307      	movs	r3, #7
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4805      	ldr	r0, [pc, #20]	; (8003f30 <HAL_UART_MspInit+0x84>)
 8003f1c:	f001 fa96 	bl	800544c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f20:	bf00      	nop
 8003f22:	3728      	adds	r7, #40	; 0x28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40004800 	.word	0x40004800
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40020c00 	.word	0x40020c00

08003f34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	; 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 0314 	add.w	r3, r7, #20
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f54:	d134      	bne.n	8003fc0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6313      	str	r3, [r2, #48]	; 0x30
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8003f6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003f80:	230a      	movs	r3, #10
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4810      	ldr	r0, [pc, #64]	; (8003fcc <HAL_PCD_MspInit+0x98>)
 8003f8c:	f001 fa5e 	bl	800544c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003f90:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9a:	6353      	str	r3, [r2, #52]	; 0x34
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fac:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_PCD_MspInit+0x94>)
 8003fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003fc0:	bf00      	nop
 8003fc2:	3728      	adds	r7, #40	; 0x28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40020000 	.word	0x40020000

08003fd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	2036      	movs	r0, #54	; 0x36
 8003fe6:	f000 fe8f 	bl	8004d08 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003fea:	2036      	movs	r0, #54	; 0x36
 8003fec:	f000 fea8 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <HAL_InitTick+0xa0>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <HAL_InitTick+0xa0>)
 8003ff6:	f043 0310 	orr.w	r3, r3, #16
 8003ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffc:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_InitTick+0xa0>)
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004008:	f107 0210 	add.w	r2, r7, #16
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f002 fa38 	bl	8006488 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004018:	f002 fa0e 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800401c:	4603      	mov	r3, r0
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004024:	4a13      	ldr	r2, [pc, #76]	; (8004074 <HAL_InitTick+0xa4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9b      	lsrs	r3, r3, #18
 800402c:	3b01      	subs	r3, #1
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <HAL_InitTick+0xa8>)
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <HAL_InitTick+0xac>)
 8004034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <HAL_InitTick+0xa8>)
 8004038:	f240 32e7 	movw	r2, #999	; 0x3e7
 800403c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800403e:	4a0e      	ldr	r2, [pc, #56]	; (8004078 <HAL_InitTick+0xa8>)
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_InitTick+0xa8>)
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_InitTick+0xa8>)
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004050:	4809      	ldr	r0, [pc, #36]	; (8004078 <HAL_InitTick+0xa8>)
 8004052:	f003 fabb 	bl	80075cc <HAL_TIM_Base_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d104      	bne.n	8004066 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800405c:	4806      	ldr	r0, [pc, #24]	; (8004078 <HAL_InitTick+0xa8>)
 800405e:	f003 fae1 	bl	8007624 <HAL_TIM_Base_Start_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	e000      	b.n	8004068 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
}
 8004068:	4618      	mov	r0, r3
 800406a:	3730      	adds	r7, #48	; 0x30
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	431bde83 	.word	0x431bde83
 8004078:	20005280 	.word	0x20005280
 800407c:	40001000 	.word	0x40001000

08004080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004084:	e7fe      	b.n	8004084 <NMI_Handler+0x4>

08004086 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004086:	b480      	push	{r7}
 8004088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800408a:	e7fe      	b.n	800408a <HardFault_Handler+0x4>

0800408c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004090:	e7fe      	b.n	8004090 <MemManage_Handler+0x4>

08004092 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004096:	e7fe      	b.n	8004096 <BusFault_Handler+0x4>

08004098 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800409c:	e7fe      	b.n	800409c <UsageFault_Handler+0x4>

0800409e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80040b0:	4802      	ldr	r0, [pc, #8]	; (80040bc <TIM6_DAC_IRQHandler+0x10>)
 80040b2:	f003 fbd5 	bl	8007860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80040b6:	bf00      	nop
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20005280 	.word	0x20005280

080040c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040c4:	4802      	ldr	r0, [pc, #8]	; (80040d0 <DMA2_Stream0_IRQHandler+0x10>)
 80040c6:	f000 ff57 	bl	8004f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000519c 	.word	0x2000519c

080040d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
	return 1;
 80040d8:	2301      	movs	r3, #1
}
 80040da:	4618      	mov	r0, r3
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <_kill>:

int _kill(int pid, int sig)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040ee:	f008 fda7 	bl	800cc40 <__errno>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2216      	movs	r2, #22
 80040f6:	601a      	str	r2, [r3, #0]
	return -1;
 80040f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <_exit>:

void _exit (int status)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800410c:	f04f 31ff 	mov.w	r1, #4294967295
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ffe7 	bl	80040e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004116:	e7fe      	b.n	8004116 <_exit+0x12>

08004118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e00a      	b.n	8004140 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800412a:	f3af 8000 	nop.w
 800412e:	4601      	mov	r1, r0
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	60ba      	str	r2, [r7, #8]
 8004136:	b2ca      	uxtb	r2, r1
 8004138:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	3301      	adds	r3, #1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	429a      	cmp	r2, r3
 8004146:	dbf0      	blt.n	800412a <_read+0x12>
	}

return len;
 8004148:	687b      	ldr	r3, [r7, #4]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b086      	sub	sp, #24
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e009      	b.n	8004178 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	60ba      	str	r2, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fca7 	bl	8003ac0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3301      	adds	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	dbf1      	blt.n	8004164 <_write+0x12>
	}
	return len;
 8004180:	687b      	ldr	r3, [r7, #4]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <_close>:

int _close(int file)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
	return -1;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041b2:	605a      	str	r2, [r3, #4]
	return 0;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <_isatty>:

int _isatty(int file)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
	return 1;
 80041ca:	2301      	movs	r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	return 0;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041fc:	4a14      	ldr	r2, [pc, #80]	; (8004250 <_sbrk+0x5c>)
 80041fe:	4b15      	ldr	r3, [pc, #84]	; (8004254 <_sbrk+0x60>)
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <_sbrk+0x64>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d102      	bne.n	8004216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <_sbrk+0x64>)
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <_sbrk+0x68>)
 8004214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004216:	4b10      	ldr	r3, [pc, #64]	; (8004258 <_sbrk+0x64>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4413      	add	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d207      	bcs.n	8004234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004224:	f008 fd0c 	bl	800cc40 <__errno>
 8004228:	4603      	mov	r3, r0
 800422a:	220c      	movs	r2, #12
 800422c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295
 8004232:	e009      	b.n	8004248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <_sbrk+0x64>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800423a:	4b07      	ldr	r3, [pc, #28]	; (8004258 <_sbrk+0x64>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	4a05      	ldr	r2, [pc, #20]	; (8004258 <_sbrk+0x64>)
 8004244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20040000 	.word	0x20040000
 8004254:	00000400 	.word	0x00000400
 8004258:	2000030c 	.word	0x2000030c
 800425c:	20005318 	.word	0x20005318

08004260 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <SystemInit+0x28>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	4a07      	ldr	r2, [pc, #28]	; (8004288 <SystemInit+0x28>)
 800426c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SystemInit+0x28>)
 8004276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800427a:	609a      	str	r2, [r3, #8]
#endif
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800428c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004290:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004292:	e003      	b.n	800429c <LoopCopyDataInit>

08004294 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004294:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004296:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004298:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800429a:	3104      	adds	r1, #4

0800429c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800429c:	480b      	ldr	r0, [pc, #44]	; (80042cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800429e:	4b0c      	ldr	r3, [pc, #48]	; (80042d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042a4:	d3f6      	bcc.n	8004294 <CopyDataInit>
  ldr  r2, =_sbss
 80042a6:	4a0b      	ldr	r2, [pc, #44]	; (80042d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042a8:	e002      	b.n	80042b0 <LoopFillZerobss>

080042aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042ac:	f842 3b04 	str.w	r3, [r2], #4

080042b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042b4:	d3f9      	bcc.n	80042aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042b6:	f7ff ffd3 	bl	8004260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ba:	f008 fcc7 	bl	800cc4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042be:	f7fe ff8b 	bl	80031d8 <main>
  bx  lr    
 80042c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80042c4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80042c8:	08011394 	.word	0x08011394
  ldr  r0, =_sdata
 80042cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042d0:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80042d4:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80042d8:	20005314 	.word	0x20005314

080042dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042dc:	e7fe      	b.n	80042dc <ADC_IRQHandler>

080042de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042e2:	2003      	movs	r0, #3
 80042e4:	f000 fd05 	bl	8004cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fe71 	bl	8003fd0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80042ee:	f7ff fc45 	bl	8003b7c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <HAL_IncTick+0x20>)
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_IncTick+0x24>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4413      	add	r3, r2
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <HAL_IncTick+0x24>)
 800430a:	6013      	str	r3, [r2, #0]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000008 	.word	0x20000008
 800431c:	200052c0 	.word	0x200052c0

08004320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return uwTick;
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <HAL_GetTick+0x14>)
 8004326:	681b      	ldr	r3, [r3, #0]
}
 8004328:	4618      	mov	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	200052c0 	.word	0x200052c0

08004338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004340:	f7ff ffee 	bl	8004320 <HAL_GetTick>
 8004344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d005      	beq.n	800435e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <HAL_Delay+0x44>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	461a      	mov	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800435e:	bf00      	nop
 8004360:	f7ff ffde 	bl	8004320 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	429a      	cmp	r2, r3
 800436e:	d8f7      	bhi.n	8004360 <HAL_Delay+0x28>
  {
  }
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000008 	.word	0x20000008

08004380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e031      	b.n	80043fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fc14 	bl	8003bcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_ADC_Init+0x84>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	f043 0202 	orr.w	r2, r3, #2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa66 	bl	80048a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	f043 0201 	orr.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
 80043ea:	e001      	b.n	80043f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	ffffeefd 	.word	0xffffeefd

08004408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_ADC_Start_DMA+0x1e>
 8004422:	2302      	movs	r3, #2
 8004424:	e0c7      	b.n	80045b6 <HAL_ADC_Start_DMA+0x1ae>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d018      	beq.n	800446e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800444c:	4b5c      	ldr	r3, [pc, #368]	; (80045c0 <HAL_ADC_Start_DMA+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5c      	ldr	r2, [pc, #368]	; (80045c4 <HAL_ADC_Start_DMA+0x1bc>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0c9a      	lsrs	r2, r3, #18
 8004458:	4613      	mov	r3, r2
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4413      	add	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004460:	e002      	b.n	8004468 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3b01      	subs	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f9      	bne.n	8004462 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	2b01      	cmp	r3, #1
 800447a:	f040 809b 	bne.w	80045b4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_ADC_Start_DMA+0x1c0>)
 8004484:	4013      	ands	r3, r2
 8004486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b8:	d106      	bne.n	80044c8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f023 0206 	bic.w	r2, r3, #6
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	645a      	str	r2, [r3, #68]	; 0x44
 80044c6:	e002      	b.n	80044ce <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <HAL_ADC_Start_DMA+0x1c4>)
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <HAL_ADC_Start_DMA+0x1c8>)
 80044e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <HAL_ADC_Start_DMA+0x1cc>)
 80044ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004506:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004516:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	334c      	adds	r3, #76	; 0x4c
 8004522:	4619      	mov	r1, r3
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f000 fcc6 	bl	8004eb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_ADC_Start_DMA+0x1d0>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10f      	bne.n	8004558 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d136      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004554:	609a      	str	r2, [r3, #8]
 8004556:	e02d      	b.n	80045b4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_ADC_Start_DMA+0x1d4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d10e      	bne.n	8004580 <HAL_ADC_Start_DMA+0x178>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d107      	bne.n	8004580 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800457e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_ADC_Start_DMA+0x1d0>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d113      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <HAL_ADC_Start_DMA+0x1d8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10e      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x1ac>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d107      	bne.n	80045b4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80045b2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3718      	adds	r7, #24
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	20000000 	.word	0x20000000
 80045c4:	431bde83 	.word	0x431bde83
 80045c8:	fffff8fe 	.word	0xfffff8fe
 80045cc:	08004a95 	.word	0x08004a95
 80045d0:	08004b4f 	.word	0x08004b4f
 80045d4:	08004b6b 	.word	0x08004b6b
 80045d8:	40012300 	.word	0x40012300
 80045dc:	40012000 	.word	0x40012000
 80045e0:	40012200 	.word	0x40012200

080045e4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x1c>
 8004624:	2302      	movs	r3, #2
 8004626:	e12a      	b.n	800487e <HAL_ADC_ConfigChannel+0x272>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2b09      	cmp	r3, #9
 8004636:	d93a      	bls.n	80046ae <HAL_ADC_ConfigChannel+0xa2>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004640:	d035      	beq.n	80046ae <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68d9      	ldr	r1, [r3, #12]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	3b1e      	subs	r3, #30
 8004658:	2207      	movs	r2, #7
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43da      	mvns	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	400a      	ands	r2, r1
 8004666:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a87      	ldr	r2, [pc, #540]	; (800488c <HAL_ADC_ConfigChannel+0x280>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10a      	bne.n	8004688 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68d9      	ldr	r1, [r3, #12]
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	061a      	lsls	r2, r3, #24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004686:	e035      	b.n	80046f4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	4618      	mov	r0, r3
 800469a:	4603      	mov	r3, r0
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4403      	add	r3, r0
 80046a0:	3b1e      	subs	r3, #30
 80046a2:	409a      	lsls	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ac:	e022      	b.n	80046f4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6919      	ldr	r1, [r3, #16]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	2207      	movs	r2, #7
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43da      	mvns	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	400a      	ands	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6919      	ldr	r1, [r3, #16]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4618      	mov	r0, r3
 80046e4:	4603      	mov	r3, r0
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4403      	add	r3, r0
 80046ea:	409a      	lsls	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d824      	bhi.n	8004746 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	4413      	add	r3, r2
 800470c:	3b05      	subs	r3, #5
 800470e:	221f      	movs	r2, #31
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43da      	mvns	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	400a      	ands	r2, r1
 800471c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b29b      	uxth	r3, r3
 800472a:	4618      	mov	r0, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	3b05      	subs	r3, #5
 8004738:	fa00 f203 	lsl.w	r2, r0, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	635a      	str	r2, [r3, #52]	; 0x34
 8004744:	e04c      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b0c      	cmp	r3, #12
 800474c:	d824      	bhi.n	8004798 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	3b23      	subs	r3, #35	; 0x23
 8004760:	221f      	movs	r2, #31
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	400a      	ands	r2, r1
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	4618      	mov	r0, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	3b23      	subs	r3, #35	; 0x23
 800478a:	fa00 f203 	lsl.w	r2, r0, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	631a      	str	r2, [r3, #48]	; 0x30
 8004796:	e023      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	3b41      	subs	r3, #65	; 0x41
 80047aa:	221f      	movs	r2, #31
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43da      	mvns	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	400a      	ands	r2, r1
 80047b8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4618      	mov	r0, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	3b41      	subs	r3, #65	; 0x41
 80047d4:	fa00 f203 	lsl.w	r2, r0, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2a      	ldr	r2, [pc, #168]	; (8004890 <HAL_ADC_ConfigChannel+0x284>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d10a      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x1f4>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f2:	d105      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	4a26      	ldr	r2, [pc, #152]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 80047fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80047fe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a22      	ldr	r2, [pc, #136]	; (8004890 <HAL_ADC_ConfigChannel+0x284>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d109      	bne.n	800481e <HAL_ADC_ConfigChannel+0x212>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b12      	cmp	r3, #18
 8004810:	d105      	bne.n	800481e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	4a1f      	ldr	r2, [pc, #124]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 8004818:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800481c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <HAL_ADC_ConfigChannel+0x284>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d125      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x268>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a17      	ldr	r2, [pc, #92]	; (800488c <HAL_ADC_ConfigChannel+0x280>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <HAL_ADC_ConfigChannel+0x22e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b11      	cmp	r3, #17
 8004838:	d11c      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800483a:	4b16      	ldr	r3, [pc, #88]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <HAL_ADC_ConfigChannel+0x288>)
 8004840:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004844:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a10      	ldr	r2, [pc, #64]	; (800488c <HAL_ADC_ConfigChannel+0x280>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d111      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <HAL_ADC_ConfigChannel+0x28c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a11      	ldr	r2, [pc, #68]	; (800489c <HAL_ADC_ConfigChannel+0x290>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	0c9a      	lsrs	r2, r3, #18
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004866:	e002      	b.n	800486e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	3b01      	subs	r3, #1
 800486c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f9      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	10000012 	.word	0x10000012
 8004890:	40012000 	.word	0x40012000
 8004894:	40012300 	.word	0x40012300
 8004898:	20000000 	.word	0x20000000
 800489c:	431bde83 	.word	0x431bde83

080048a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80048a8:	4b78      	ldr	r3, [pc, #480]	; (8004a8c <ADC_Init+0x1ec>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a77      	ldr	r2, [pc, #476]	; (8004a8c <ADC_Init+0x1ec>)
 80048ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80048b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80048b4:	4b75      	ldr	r3, [pc, #468]	; (8004a8c <ADC_Init+0x1ec>)
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4973      	ldr	r1, [pc, #460]	; (8004a8c <ADC_Init+0x1ec>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6859      	ldr	r1, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	021a      	lsls	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80048f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6859      	ldr	r1, [r3, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	4a58      	ldr	r2, [pc, #352]	; (8004a90 <ADC_Init+0x1f0>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d022      	beq.n	800497a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6899      	ldr	r1, [r3, #8]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	e00f      	b.n	800499a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0202 	bic.w	r2, r2, #2
 80049a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6899      	ldr	r1, [r3, #8]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	005a      	lsls	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01b      	beq.n	8004a00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80049e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6859      	ldr	r1, [r3, #4]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	3b01      	subs	r3, #1
 80049f4:	035a      	lsls	r2, r3, #13
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	e007      	b.n	8004a10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	051a      	lsls	r2, r3, #20
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6899      	ldr	r1, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a52:	025a      	lsls	r2, r3, #9
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	029a      	lsls	r2, r3, #10
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40012300 	.word	0x40012300
 8004a90:	0f000001 	.word	0x0f000001

08004a94 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d13c      	bne.n	8004b28 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12b      	bne.n	8004b20 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d127      	bne.n	8004b20 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d119      	bne.n	8004b20 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0220 	bic.w	r2, r2, #32
 8004afa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7fe ffe1 	bl	8003ae8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004b26:	e00e      	b.n	8004b46 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d003      	beq.n	8004b3c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff fd5f 	bl	80045f8 <HAL_ADC_ErrorCallback>
}
 8004b3a:	e004      	b.n	8004b46 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f7ff fd41 	bl	80045e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b76:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2240      	movs	r2, #64	; 0x40
 8004b7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f043 0204 	orr.w	r2, r3, #4
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7ff fd34 	bl	80045f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bc0:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <__NVIC_SetPriorityGrouping+0x44>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <__NVIC_SetPriorityGrouping+0x40>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	60d3      	str	r3, [r2, #12]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00
 8004bdc:	05fa0000 	.word	0x05fa0000

08004be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	f003 0307 	and.w	r3, r3, #7
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	4603      	mov	r3, r0
 8004c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	db0b      	blt.n	8004c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	f003 021f 	and.w	r2, r3, #31
 8004c14:	4907      	ldr	r1, [pc, #28]	; (8004c34 <__NVIC_EnableIRQ+0x38>)
 8004c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	e000e100 	.word	0xe000e100

08004c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	6039      	str	r1, [r7, #0]
 8004c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	db0a      	blt.n	8004c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	490c      	ldr	r1, [pc, #48]	; (8004c84 <__NVIC_SetPriority+0x4c>)
 8004c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c56:	0112      	lsls	r2, r2, #4
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c60:	e00a      	b.n	8004c78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4908      	ldr	r1, [pc, #32]	; (8004c88 <__NVIC_SetPriority+0x50>)
 8004c68:	79fb      	ldrb	r3, [r7, #7]
 8004c6a:	f003 030f 	and.w	r3, r3, #15
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	0112      	lsls	r2, r2, #4
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	440b      	add	r3, r1
 8004c76:	761a      	strb	r2, [r3, #24]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	e000e100 	.word	0xe000e100
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f1c3 0307 	rsb	r3, r3, #7
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf28      	it	cs
 8004caa:	2304      	movcs	r3, #4
 8004cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3304      	adds	r3, #4
 8004cb2:	2b06      	cmp	r3, #6
 8004cb4:	d902      	bls.n	8004cbc <NVIC_EncodePriority+0x30>
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	3b03      	subs	r3, #3
 8004cba:	e000      	b.n	8004cbe <NVIC_EncodePriority+0x32>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	401a      	ands	r2, r3
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	fa01 f303 	lsl.w	r3, r1, r3
 8004cde:	43d9      	mvns	r1, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce4:	4313      	orrs	r3, r2
         );
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3724      	adds	r7, #36	; 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff4c 	bl	8004b98 <__NVIC_SetPriorityGrouping>
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
 8004d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1a:	f7ff ff61 	bl	8004be0 <__NVIC_GetPriorityGrouping>
 8004d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f7ff ffb1 	bl	8004c8c <NVIC_EncodePriority>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff ff80 	bl	8004c38 <__NVIC_SetPriority>
}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff54 	bl	8004bfc <__NVIC_EnableIRQ>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d68:	f7ff fada 	bl	8004320 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e099      	b.n	8004eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d98:	e00f      	b.n	8004dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d9a:	f7ff fac1 	bl	8004320 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b05      	cmp	r3, #5
 8004da6:	d908      	bls.n	8004dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2203      	movs	r2, #3
 8004db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e078      	b.n	8004eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e8      	bne.n	8004d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4b38      	ldr	r3, [pc, #224]	; (8004eb4 <HAL_DMA_Init+0x158>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d107      	bne.n	8004e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d117      	bne.n	8004e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00e      	beq.n	8004e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa77 	bl	8005354 <DMA_CheckFifoParam>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d008      	beq.n	8004e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2240      	movs	r2, #64	; 0x40
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e016      	b.n	8004eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fa2e 	bl	80052e8 <DMA_CalcBaseAndBitshift>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e94:	223f      	movs	r2, #63	; 0x3f
 8004e96:	409a      	lsls	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	e010803f 	.word	0xe010803f

08004eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_DMA_Start_IT+0x26>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e048      	b.n	8004f70 <HAL_DMA_Start_IT+0xb8>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d137      	bne.n	8004f62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	68b9      	ldr	r1, [r7, #8]
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f9c0 	bl	800528c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	223f      	movs	r2, #63	; 0x3f
 8004f12:	409a      	lsls	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0216 	orr.w	r2, r2, #22
 8004f26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0208 	orr.w	r2, r2, #8
 8004f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	e005      	b.n	8004f6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004f84:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <HAL_DMA_IRQHandler+0x258>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a92      	ldr	r2, [pc, #584]	; (80051d4 <HAL_DMA_IRQHandler+0x25c>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa2:	2208      	movs	r2, #8
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01a      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d013      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	409a      	lsls	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	f043 0201 	orr.w	r2, r3, #1
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d012      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005006:	2201      	movs	r2, #1
 8005008:	409a      	lsls	r2, r3
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005012:	f043 0202 	orr.w	r2, r3, #2
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	2204      	movs	r2, #4
 8005020:	409a      	lsls	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	2204      	movs	r2, #4
 800503e:	409a      	lsls	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005048:	f043 0204 	orr.w	r2, r3, #4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005054:	2210      	movs	r2, #16
 8005056:	409a      	lsls	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d043      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03c      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	2210      	movs	r2, #16
 8005074:	409a      	lsls	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d018      	beq.n	80050ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d108      	bne.n	80050a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d024      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e01f      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01b      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e016      	b.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d107      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0208 	bic.w	r2, r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	2220      	movs	r2, #32
 80050ee:	409a      	lsls	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4013      	ands	r3, r2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 808e 	beq.w	8005216 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8086 	beq.w	8005216 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	2220      	movs	r2, #32
 8005110:	409a      	lsls	r2, r3
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b05      	cmp	r3, #5
 8005120:	d136      	bne.n	8005190 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0216 	bic.w	r2, r2, #22
 8005130:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_DMA_IRQHandler+0x1da>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0208 	bic.w	r2, r2, #8
 8005160:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005166:	223f      	movs	r2, #63	; 0x3f
 8005168:	409a      	lsls	r2, r3
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d07d      	beq.n	8005282 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	4798      	blx	r3
        }
        return;
 800518e:	e078      	b.n	8005282 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01c      	beq.n	80051d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d030      	beq.n	8005216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	4798      	blx	r3
 80051bc:	e02b      	b.n	8005216 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d027      	beq.n	8005216 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4798      	blx	r3
 80051ce:	e022      	b.n	8005216 <HAL_DMA_IRQHandler+0x29e>
 80051d0:	20000000 	.word	0x20000000
 80051d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10f      	bne.n	8005206 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0210 	bic.w	r2, r2, #16
 80051f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521a:	2b00      	cmp	r3, #0
 800521c:	d032      	beq.n	8005284 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d022      	beq.n	8005270 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2205      	movs	r2, #5
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3301      	adds	r3, #1
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	429a      	cmp	r2, r3
 800524c:	d307      	bcc.n	800525e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f2      	bne.n	8005242 <HAL_DMA_IRQHandler+0x2ca>
 800525c:	e000      	b.n	8005260 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800525e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4798      	blx	r3
 8005280:	e000      	b.n	8005284 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005282:	bf00      	nop
    }
  }
}
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop

0800528c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d108      	bne.n	80052cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052ca:	e007      	b.n	80052dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	60da      	str	r2, [r3, #12]
}
 80052dc:	bf00      	nop
 80052de:	3714      	adds	r7, #20
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	3b10      	subs	r3, #16
 80052f8:	4a13      	ldr	r2, [pc, #76]	; (8005348 <DMA_CalcBaseAndBitshift+0x60>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	091b      	lsrs	r3, r3, #4
 8005300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005302:	4a12      	ldr	r2, [pc, #72]	; (800534c <DMA_CalcBaseAndBitshift+0x64>)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d908      	bls.n	8005328 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	4b0c      	ldr	r3, [pc, #48]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 800531e:	4013      	ands	r3, r2
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	659a      	str	r2, [r3, #88]	; 0x58
 8005326:	e006      	b.n	8005336 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	4b08      	ldr	r3, [pc, #32]	; (8005350 <DMA_CalcBaseAndBitshift+0x68>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	aaaaaaab 	.word	0xaaaaaaab
 800534c:	08010794 	.word	0x08010794
 8005350:	fffffc00 	.word	0xfffffc00

08005354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d11f      	bne.n	80053ae <DMA_CheckFifoParam+0x5a>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d856      	bhi.n	8005422 <DMA_CheckFifoParam+0xce>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <DMA_CheckFifoParam+0x28>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	0800538d 	.word	0x0800538d
 8005380:	0800539f 	.word	0x0800539f
 8005384:	0800538d 	.word	0x0800538d
 8005388:	08005423 	.word	0x08005423
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d046      	beq.n	8005426 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800539c:	e043      	b.n	8005426 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053a6:	d140      	bne.n	800542a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ac:	e03d      	b.n	800542a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b6:	d121      	bne.n	80053fc <DMA_CheckFifoParam+0xa8>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d837      	bhi.n	800542e <DMA_CheckFifoParam+0xda>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <DMA_CheckFifoParam+0x70>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053d5 	.word	0x080053d5
 80053c8:	080053db 	.word	0x080053db
 80053cc:	080053d5 	.word	0x080053d5
 80053d0:	080053ed 	.word	0x080053ed
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	e030      	b.n	800543c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d025      	beq.n	8005432 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053ea:	e022      	b.n	8005432 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053f4:	d11f      	bne.n	8005436 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053fa:	e01c      	b.n	8005436 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d903      	bls.n	800540a <DMA_CheckFifoParam+0xb6>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d003      	beq.n	8005410 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005408:	e018      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e015      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00e      	beq.n	800543a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e00b      	b.n	800543a <DMA_CheckFifoParam+0xe6>
      break;
 8005422:	bf00      	nop
 8005424:	e00a      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005426:	bf00      	nop
 8005428:	e008      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542a:	bf00      	nop
 800542c:	e006      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e004      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e002      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;   
 8005436:	bf00      	nop
 8005438:	e000      	b.n	800543c <DMA_CheckFifoParam+0xe8>
      break;
 800543a:	bf00      	nop
    }
  } 
  
  return status; 
 800543c:	7bfb      	ldrb	r3, [r7, #15]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop

0800544c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005462:	2300      	movs	r3, #0
 8005464:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e169      	b.n	8005740 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800546c:	2201      	movs	r2, #1
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4013      	ands	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	429a      	cmp	r2, r3
 8005486:	f040 8158 	bne.w	800573a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d00b      	beq.n	80054aa <HAL_GPIO_Init+0x5e>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800549e:	2b11      	cmp	r3, #17
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b12      	cmp	r3, #18
 80054a8:	d130      	bne.n	800550c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	2203      	movs	r2, #3
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054e0:	2201      	movs	r2, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	f003 0201 	and.w	r2, r3, #1
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	4313      	orrs	r3, r2
 8005504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	2203      	movs	r2, #3
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	43db      	mvns	r3, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4013      	ands	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	4313      	orrs	r3, r2
 8005534:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d003      	beq.n	800554c <HAL_GPIO_Init+0x100>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b12      	cmp	r3, #18
 800554a:	d123      	bne.n	8005594 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	08da      	lsrs	r2, r3, #3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3208      	adds	r2, #8
 8005554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005558:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	220f      	movs	r2, #15
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	43db      	mvns	r3, r3
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	4013      	ands	r3, r2
 800556e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4313      	orrs	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	08da      	lsrs	r2, r3, #3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3208      	adds	r2, #8
 800558e:	69b9      	ldr	r1, [r7, #24]
 8005590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f003 0203 	and.w	r2, r3, #3
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4313      	orrs	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80b2 	beq.w	800573a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055d6:	4b60      	ldr	r3, [pc, #384]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	4a5f      	ldr	r2, [pc, #380]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e0:	6453      	str	r3, [r2, #68]	; 0x44
 80055e2:	4b5d      	ldr	r3, [pc, #372]	; (8005758 <HAL_GPIO_Init+0x30c>)
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80055ee:	4a5b      	ldr	r2, [pc, #364]	; (800575c <HAL_GPIO_Init+0x310>)
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	3302      	adds	r3, #2
 80055f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	220f      	movs	r2, #15
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43db      	mvns	r3, r3
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	4013      	ands	r3, r2
 8005610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a52      	ldr	r2, [pc, #328]	; (8005760 <HAL_GPIO_Init+0x314>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <HAL_GPIO_Init+0x226>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a51      	ldr	r2, [pc, #324]	; (8005764 <HAL_GPIO_Init+0x318>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d025      	beq.n	800566e <HAL_GPIO_Init+0x222>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a50      	ldr	r2, [pc, #320]	; (8005768 <HAL_GPIO_Init+0x31c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <HAL_GPIO_Init+0x21e>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a4f      	ldr	r2, [pc, #316]	; (800576c <HAL_GPIO_Init+0x320>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d019      	beq.n	8005666 <HAL_GPIO_Init+0x21a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a4e      	ldr	r2, [pc, #312]	; (8005770 <HAL_GPIO_Init+0x324>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_GPIO_Init+0x216>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4d      	ldr	r2, [pc, #308]	; (8005774 <HAL_GPIO_Init+0x328>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d00d      	beq.n	800565e <HAL_GPIO_Init+0x212>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a4c      	ldr	r2, [pc, #304]	; (8005778 <HAL_GPIO_Init+0x32c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d007      	beq.n	800565a <HAL_GPIO_Init+0x20e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a4b      	ldr	r2, [pc, #300]	; (800577c <HAL_GPIO_Init+0x330>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_GPIO_Init+0x20a>
 8005652:	2307      	movs	r3, #7
 8005654:	e00e      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005656:	2308      	movs	r3, #8
 8005658:	e00c      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800565a:	2306      	movs	r3, #6
 800565c:	e00a      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800565e:	2305      	movs	r3, #5
 8005660:	e008      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005662:	2304      	movs	r3, #4
 8005664:	e006      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005666:	2303      	movs	r3, #3
 8005668:	e004      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800566a:	2302      	movs	r3, #2
 800566c:	e002      	b.n	8005674 <HAL_GPIO_Init+0x228>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_GPIO_Init+0x228>
 8005672:	2300      	movs	r3, #0
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	f002 0203 	and.w	r2, r2, #3
 800567a:	0092      	lsls	r2, r2, #2
 800567c:	4093      	lsls	r3, r2
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4313      	orrs	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005684:	4935      	ldr	r1, [pc, #212]	; (800575c <HAL_GPIO_Init+0x310>)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	089b      	lsrs	r3, r3, #2
 800568a:	3302      	adds	r3, #2
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005692:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	43db      	mvns	r3, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056bc:	4b30      	ldr	r3, [pc, #192]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	4013      	ands	r3, r2
 80056ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	4313      	orrs	r3, r2
 80056de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056e0:	4a27      	ldr	r2, [pc, #156]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e6:	4b26      	ldr	r3, [pc, #152]	; (8005780 <HAL_GPIO_Init+0x334>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	43db      	mvns	r3, r3
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	4013      	ands	r3, r2
 80056f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_GPIO_Init+0x334>)
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	43db      	mvns	r3, r3
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	4013      	ands	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005734:	4a12      	ldr	r2, [pc, #72]	; (8005780 <HAL_GPIO_Init+0x334>)
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b0f      	cmp	r3, #15
 8005744:	f67f ae92 	bls.w	800546c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3724      	adds	r7, #36	; 0x24
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800
 800575c:	40013800 	.word	0x40013800
 8005760:	40020000 	.word	0x40020000
 8005764:	40020400 	.word	0x40020400
 8005768:	40020800 	.word	0x40020800
 800576c:	40020c00 	.word	0x40020c00
 8005770:	40021000 	.word	0x40021000
 8005774:	40021400 	.word	0x40021400
 8005778:	40021800 	.word	0x40021800
 800577c:	40021c00 	.word	0x40021c00
 8005780:	40013c00 	.word	0x40013c00

08005784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
 8005790:	4613      	mov	r3, r2
 8005792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005794:	787b      	ldrb	r3, [r7, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579a:	887a      	ldrh	r2, [r7, #2]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80057a0:	e003      	b.n	80057aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	041a      	lsls	r2, r3, #16
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	619a      	str	r2, [r3, #24]
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695a      	ldr	r2, [r3, #20]
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d004      	beq.n	80057d8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	041a      	lsls	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80057d6:	e002      	b.n	80057de <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057d8:	887a      	ldrh	r2, [r7, #2]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	619a      	str	r2, [r3, #24]
}
 80057de:	bf00      	nop
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ec:	b08f      	sub	sp, #60	; 0x3c
 80057ee:	af0a      	add	r7, sp, #40	; 0x28
 80057f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e116      	b.n	8005a2a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fe fb8c 	bl	8003f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2203      	movs	r2, #3
 8005820:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f003 fef8 	bl	8009630 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	687e      	ldr	r6, [r7, #4]
 8005848:	466d      	mov	r5, sp
 800584a:	f106 0410 	add.w	r4, r6, #16
 800584e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800585a:	e885 0003 	stmia.w	r5, {r0, r1}
 800585e:	1d33      	adds	r3, r6, #4
 8005860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005862:	6838      	ldr	r0, [r7, #0]
 8005864:	f003 fe86 	bl	8009574 <USB_CoreInit>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e0d7      	b.n	8005a2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f003 fee6 	bl	8009652 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	e04a      	b.n	8005922 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800588c:	7bfa      	ldrb	r2, [r7, #15]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	333d      	adds	r3, #61	; 0x3d
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	333c      	adds	r3, #60	; 0x3c
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	b298      	uxth	r0, r3
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	440b      	add	r3, r1
 80058c6:	3342      	adds	r3, #66	; 0x42
 80058c8:	4602      	mov	r2, r0
 80058ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	333f      	adds	r3, #63	; 0x3f
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058e0:	7bfa      	ldrb	r2, [r7, #15]
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	4613      	mov	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	1a9b      	subs	r3, r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	440b      	add	r3, r1
 80058ee:	3344      	adds	r3, #68	; 0x44
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	3348      	adds	r3, #72	; 0x48
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	3350      	adds	r3, #80	; 0x50
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	3301      	adds	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
 8005922:	7bfa      	ldrb	r2, [r7, #15]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d3af      	bcc.n	800588c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	73fb      	strb	r3, [r7, #15]
 8005930:	e044      	b.n	80059bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800595e:	7bfa      	ldrb	r2, [r7, #15]
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	1a9b      	subs	r3, r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	6879      	ldr	r1, [r7, #4]
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	1a9b      	subs	r3, r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	440b      	add	r3, r1
 8005982:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800598a:	7bfa      	ldrb	r2, [r7, #15]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80059a0:	7bfa      	ldrb	r2, [r7, #15]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80059b2:	2200      	movs	r2, #0
 80059b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	3301      	adds	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d3b5      	bcc.n	8005932 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	603b      	str	r3, [r7, #0]
 80059cc:	687e      	ldr	r6, [r7, #4]
 80059ce:	466d      	mov	r5, sp
 80059d0:	f106 0410 	add.w	r4, r6, #16
 80059d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059e4:	1d33      	adds	r3, r6, #4
 80059e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059e8:	6838      	ldr	r0, [r7, #0]
 80059ea:	f003 fe5d 	bl	80096a8 <USB_DevInit>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e014      	b.n	8005a2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f80b 	bl	8005a34 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f004 f80f 	bl	8009a46 <USB_DevDisconnect>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005a34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	10000003 	.word	0x10000003

08005a7c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a04      	ldr	r2, [pc, #16]	; (8005a98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40007000 	.word	0x40007000

08005a9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	4b23      	ldr	r3, [pc, #140]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aaa:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8005aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab2:	4b20      	ldr	r3, [pc, #128]	; (8005b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005abe:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005aca:	f7fe fc29 	bl	8004320 <HAL_GetTick>
 8005ace:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ad0:	e009      	b.n	8005ae6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005ad2:	f7fe fc25 	bl	8004320 <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ae0:	d901      	bls.n	8005ae6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e022      	b.n	8005b2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005af2:	d1ee      	bne.n	8005ad2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005af4:	4b10      	ldr	r3, [pc, #64]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0f      	ldr	r2, [pc, #60]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b00:	f7fe fc0e 	bl	8004320 <HAL_GetTick>
 8005b04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b06:	e009      	b.n	8005b1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b08:	f7fe fc0a 	bl	8004320 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b16:	d901      	bls.n	8005b1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005b18:	2303      	movs	r3, #3
 8005b1a:	e007      	b.n	8005b2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b1c:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b28:	d1ee      	bne.n	8005b08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40023800 	.word	0x40023800
 8005b38:	40007000 	.word	0x40007000

08005b3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005b44:	2300      	movs	r3, #0
 8005b46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d101      	bne.n	8005b52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e291      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8087 	beq.w	8005c6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b60:	4b96      	ldr	r3, [pc, #600]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d00c      	beq.n	8005b86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6c:	4b93      	ldr	r3, [pc, #588]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 030c 	and.w	r3, r3, #12
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d112      	bne.n	8005b9e <HAL_RCC_OscConfig+0x62>
 8005b78:	4b90      	ldr	r3, [pc, #576]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b84:	d10b      	bne.n	8005b9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b86:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d06c      	beq.n	8005c6c <HAL_RCC_OscConfig+0x130>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d168      	bne.n	8005c6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e26b      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba6:	d106      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x7a>
 8005ba8:	4b84      	ldr	r3, [pc, #528]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a83      	ldr	r2, [pc, #524]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e02e      	b.n	8005c14 <HAL_RCC_OscConfig+0xd8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10c      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x9c>
 8005bbe:	4b7f      	ldr	r3, [pc, #508]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a7e      	ldr	r2, [pc, #504]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	4b7c      	ldr	r3, [pc, #496]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a7b      	ldr	r2, [pc, #492]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd4:	6013      	str	r3, [r2, #0]
 8005bd6:	e01d      	b.n	8005c14 <HAL_RCC_OscConfig+0xd8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005be0:	d10c      	bne.n	8005bfc <HAL_RCC_OscConfig+0xc0>
 8005be2:	4b76      	ldr	r3, [pc, #472]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a75      	ldr	r2, [pc, #468]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bec:	6013      	str	r3, [r2, #0]
 8005bee:	4b73      	ldr	r3, [pc, #460]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a72      	ldr	r2, [pc, #456]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e00b      	b.n	8005c14 <HAL_RCC_OscConfig+0xd8>
 8005bfc:	4b6f      	ldr	r3, [pc, #444]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a6e      	ldr	r2, [pc, #440]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	4b6c      	ldr	r3, [pc, #432]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a6b      	ldr	r2, [pc, #428]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d013      	beq.n	8005c44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fe fb80 	bl	8004320 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c24:	f7fe fb7c 	bl	8004320 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b64      	cmp	r3, #100	; 0x64
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e21f      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b61      	ldr	r3, [pc, #388]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0f0      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe8>
 8005c42:	e014      	b.n	8005c6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fe fb6c 	bl	8004320 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c4c:	f7fe fb68 	bl	8004320 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b64      	cmp	r3, #100	; 0x64
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e20b      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c5e:	4b57      	ldr	r3, [pc, #348]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1f0      	bne.n	8005c4c <HAL_RCC_OscConfig+0x110>
 8005c6a:	e000      	b.n	8005c6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d069      	beq.n	8005d4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c7a:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c86:	4b4d      	ldr	r3, [pc, #308]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f003 030c 	and.w	r3, r3, #12
 8005c8e:	2b08      	cmp	r3, #8
 8005c90:	d11c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x190>
 8005c92:	4b4a      	ldr	r3, [pc, #296]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d116      	bne.n	8005ccc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9e:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d005      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x17a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e1df      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cb6:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	493d      	ldr	r1, [pc, #244]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cca:	e040      	b.n	8005d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d023      	beq.n	8005d1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a38      	ldr	r2, [pc, #224]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005cda:	f043 0301 	orr.w	r3, r3, #1
 8005cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fe fb1e 	bl	8004320 <HAL_GetTick>
 8005ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce6:	e008      	b.n	8005cfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ce8:	f7fe fb1a 	bl	8004320 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e1bd      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfa:	4b30      	ldr	r3, [pc, #192]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4929      	ldr	r1, [pc, #164]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
 8005d1a:	e018      	b.n	8005d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d28:	f7fe fafa 	bl	8004320 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d30:	f7fe faf6 	bl	8004320 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e199      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d42:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0308 	and.w	r3, r3, #8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d038      	beq.n	8005dcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	695b      	ldr	r3, [r3, #20]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d019      	beq.n	8005d96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	4a15      	ldr	r2, [pc, #84]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6e:	f7fe fad7 	bl	8004320 <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d76:	f7fe fad3 	bl	8004320 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e176      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0f0      	beq.n	8005d76 <HAL_RCC_OscConfig+0x23a>
 8005d94:	e01a      	b.n	8005dcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d96:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	4a08      	ldr	r2, [pc, #32]	; (8005dbc <HAL_RCC_OscConfig+0x280>)
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fe fabd 	bl	8004320 <HAL_GetTick>
 8005da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005da8:	e00a      	b.n	8005dc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005daa:	f7fe fab9 	bl	8004320 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d903      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e15c      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
 8005dbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc0:	4b91      	ldr	r3, [pc, #580]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1ee      	bne.n	8005daa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a4 	beq.w	8005f22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dda:	4b8b      	ldr	r3, [pc, #556]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	4b88      	ldr	r3, [pc, #544]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	4a87      	ldr	r2, [pc, #540]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df0:	6413      	str	r3, [r2, #64]	; 0x40
 8005df2:	4b85      	ldr	r3, [pc, #532]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e02:	4b82      	ldr	r3, [pc, #520]	; (800600c <HAL_RCC_OscConfig+0x4d0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d118      	bne.n	8005e40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005e0e:	4b7f      	ldr	r3, [pc, #508]	; (800600c <HAL_RCC_OscConfig+0x4d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a7e      	ldr	r2, [pc, #504]	; (800600c <HAL_RCC_OscConfig+0x4d0>)
 8005e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e1a:	f7fe fa81 	bl	8004320 <HAL_GetTick>
 8005e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e20:	e008      	b.n	8005e34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e22:	f7fe fa7d 	bl	8004320 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b64      	cmp	r3, #100	; 0x64
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e120      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e34:	4b75      	ldr	r3, [pc, #468]	; (800600c <HAL_RCC_OscConfig+0x4d0>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0f0      	beq.n	8005e22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x31a>
 8005e48:	4b6f      	ldr	r3, [pc, #444]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4c:	4a6e      	ldr	r2, [pc, #440]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	6713      	str	r3, [r2, #112]	; 0x70
 8005e54:	e02d      	b.n	8005eb2 <HAL_RCC_OscConfig+0x376>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x33c>
 8005e5e:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e62:	4a69      	ldr	r2, [pc, #420]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	6713      	str	r3, [r2, #112]	; 0x70
 8005e6a:	4b67      	ldr	r3, [pc, #412]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6e:	4a66      	ldr	r2, [pc, #408]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e70:	f023 0304 	bic.w	r3, r3, #4
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70
 8005e76:	e01c      	b.n	8005eb2 <HAL_RCC_OscConfig+0x376>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2b05      	cmp	r3, #5
 8005e7e:	d10c      	bne.n	8005e9a <HAL_RCC_OscConfig+0x35e>
 8005e80:	4b61      	ldr	r3, [pc, #388]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e84:	4a60      	ldr	r2, [pc, #384]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e86:	f043 0304 	orr.w	r3, r3, #4
 8005e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8c:	4b5e      	ldr	r3, [pc, #376]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e90:	4a5d      	ldr	r2, [pc, #372]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	6713      	str	r3, [r2, #112]	; 0x70
 8005e98:	e00b      	b.n	8005eb2 <HAL_RCC_OscConfig+0x376>
 8005e9a:	4b5b      	ldr	r3, [pc, #364]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	4a5a      	ldr	r2, [pc, #360]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea6:	4b58      	ldr	r3, [pc, #352]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	4a57      	ldr	r2, [pc, #348]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005eac:	f023 0304 	bic.w	r3, r3, #4
 8005eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d015      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eba:	f7fe fa31 	bl	8004320 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec0:	e00a      	b.n	8005ed8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ec2:	f7fe fa2d 	bl	8004320 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d901      	bls.n	8005ed8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e0ce      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed8:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0ee      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x386>
 8005ee4:	e014      	b.n	8005f10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee6:	f7fe fa1b 	bl	8004320 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eec:	e00a      	b.n	8005f04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eee:	f7fe fa17 	bl	8004320 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d901      	bls.n	8005f04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005f00:	2303      	movs	r3, #3
 8005f02:	e0b8      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f04:	4b40      	ldr	r3, [pc, #256]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1ee      	bne.n	8005eee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f10:	7dfb      	ldrb	r3, [r7, #23]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d105      	bne.n	8005f22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f16:	4b3c      	ldr	r3, [pc, #240]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	4a3b      	ldr	r2, [pc, #236]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80a4 	beq.w	8006074 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f2c:	4b36      	ldr	r3, [pc, #216]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 030c 	and.w	r3, r3, #12
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d06b      	beq.n	8006010 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d149      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f40:	4b31      	ldr	r3, [pc, #196]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a30      	ldr	r2, [pc, #192]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fe f9e8 	bl	8004320 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f54:	f7fe f9e4 	bl	8004320 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e087      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1f0      	bne.n	8005f54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	019b      	lsls	r3, r3, #6
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	085b      	lsrs	r3, r3, #1
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	061b      	lsls	r3, r3, #24
 8005f96:	4313      	orrs	r3, r2
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fa0:	4b19      	ldr	r3, [pc, #100]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a18      	ldr	r2, [pc, #96]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fe f9b8 	bl	8004320 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fe f9b4 	bl	8004320 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e057      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x478>
 8005fd2:	e04f      	b.n	8006074 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0b      	ldr	r2, [pc, #44]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fe f99e 	bl	8004320 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fe f99a 	bl	8004320 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e03d      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffa:	4b03      	ldr	r3, [pc, #12]	; (8006008 <HAL_RCC_OscConfig+0x4cc>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x4ac>
 8006006:	e035      	b.n	8006074 <HAL_RCC_OscConfig+0x538>
 8006008:	40023800 	.word	0x40023800
 800600c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <HAL_RCC_OscConfig+0x544>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d028      	beq.n	8006070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d121      	bne.n	8006070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d11a      	bne.n	8006070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006046:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006048:	4293      	cmp	r3, r2
 800604a:	d111      	bne.n	8006070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	3b01      	subs	r3, #1
 800605a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d107      	bne.n	8006070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800606c:	429a      	cmp	r2, r3
 800606e:	d001      	beq.n	8006074 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800

08006084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0d0      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b6a      	ldr	r3, [pc, #424]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 030f 	and.w	r3, r3, #15
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d910      	bls.n	80060cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b67      	ldr	r3, [pc, #412]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 020f 	bic.w	r2, r3, #15
 80060b2:	4965      	ldr	r1, [pc, #404]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	4b63      	ldr	r3, [pc, #396]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 030f 	and.w	r3, r3, #15
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0b8      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060e4:	4b59      	ldr	r3, [pc, #356]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4a58      	ldr	r2, [pc, #352]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 80060ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d005      	beq.n	8006108 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060fc:	4b53      	ldr	r3, [pc, #332]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	4a52      	ldr	r2, [pc, #328]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006108:	4b50      	ldr	r3, [pc, #320]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	494d      	ldr	r1, [pc, #308]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d040      	beq.n	80061a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d107      	bne.n	800613e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800612e:	4b47      	ldr	r3, [pc, #284]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d115      	bne.n	8006166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e07f      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d107      	bne.n	8006156 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006146:	4b41      	ldr	r3, [pc, #260]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e073      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006156:	4b3d      	ldr	r3, [pc, #244]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e06b      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006166:	4b39      	ldr	r3, [pc, #228]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f023 0203 	bic.w	r2, r3, #3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4936      	ldr	r1, [pc, #216]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006178:	f7fe f8d2 	bl	8004320 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617e:	e00a      	b.n	8006196 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006180:	f7fe f8ce 	bl	8004320 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f241 3288 	movw	r2, #5000	; 0x1388
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e053      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006196:	4b2d      	ldr	r3, [pc, #180]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 020c 	and.w	r2, r3, #12
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d1eb      	bne.n	8006180 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061a8:	4b27      	ldr	r3, [pc, #156]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d210      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061b6:	4b24      	ldr	r3, [pc, #144]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f023 020f 	bic.w	r2, r3, #15
 80061be:	4922      	ldr	r1, [pc, #136]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <HAL_RCC_ClockConfig+0x1c4>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e032      	b.n	800623e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d008      	beq.n	80061f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061e4:	4b19      	ldr	r3, [pc, #100]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	4916      	ldr	r1, [pc, #88]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006202:	4b12      	ldr	r3, [pc, #72]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	490e      	ldr	r1, [pc, #56]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 8006212:	4313      	orrs	r3, r2
 8006214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006216:	f000 f821 	bl	800625c <HAL_RCC_GetSysClockFreq>
 800621a:	4602      	mov	r2, r0
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_RCC_ClockConfig+0x1c8>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	091b      	lsrs	r3, r3, #4
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	490a      	ldr	r1, [pc, #40]	; (8006250 <HAL_RCC_ClockConfig+0x1cc>)
 8006228:	5ccb      	ldrb	r3, [r1, r3]
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <HAL_RCC_ClockConfig+0x1d0>)
 8006230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <HAL_RCC_ClockConfig+0x1d4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7fd feca 	bl	8003fd0 <HAL_InitTick>

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40023c00 	.word	0x40023c00
 800624c:	40023800 	.word	0x40023800
 8006250:	0801077c 	.word	0x0801077c
 8006254:	20000000 	.word	0x20000000
 8006258:	20000004 	.word	0x20000004

0800625c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800625c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	607b      	str	r3, [r7, #4]
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	2300      	movs	r3, #0
 800626e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006274:	4b67      	ldr	r3, [pc, #412]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 030c 	and.w	r3, r3, #12
 800627c:	2b08      	cmp	r3, #8
 800627e:	d00d      	beq.n	800629c <HAL_RCC_GetSysClockFreq+0x40>
 8006280:	2b08      	cmp	r3, #8
 8006282:	f200 80bd 	bhi.w	8006400 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <HAL_RCC_GetSysClockFreq+0x34>
 800628a:	2b04      	cmp	r3, #4
 800628c:	d003      	beq.n	8006296 <HAL_RCC_GetSysClockFreq+0x3a>
 800628e:	e0b7      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006290:	4b61      	ldr	r3, [pc, #388]	; (8006418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006292:	60bb      	str	r3, [r7, #8]
      break;
 8006294:	e0b7      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006296:	4b61      	ldr	r3, [pc, #388]	; (800641c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006298:	60bb      	str	r3, [r7, #8]
      break;
 800629a:	e0b4      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800629c:	4b5d      	ldr	r3, [pc, #372]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062a6:	4b5b      	ldr	r3, [pc, #364]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d04d      	beq.n	800634e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062b2:	4b58      	ldr	r3, [pc, #352]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	099b      	lsrs	r3, r3, #6
 80062b8:	461a      	mov	r2, r3
 80062ba:	f04f 0300 	mov.w	r3, #0
 80062be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80062c2:	f04f 0100 	mov.w	r1, #0
 80062c6:	ea02 0800 	and.w	r8, r2, r0
 80062ca:	ea03 0901 	and.w	r9, r3, r1
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	014b      	lsls	r3, r1, #5
 80062dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80062e0:	0142      	lsls	r2, r0, #5
 80062e2:	4610      	mov	r0, r2
 80062e4:	4619      	mov	r1, r3
 80062e6:	ebb0 0008 	subs.w	r0, r0, r8
 80062ea:	eb61 0109 	sbc.w	r1, r1, r9
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	018b      	lsls	r3, r1, #6
 80062f8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80062fc:	0182      	lsls	r2, r0, #6
 80062fe:	1a12      	subs	r2, r2, r0
 8006300:	eb63 0301 	sbc.w	r3, r3, r1
 8006304:	f04f 0000 	mov.w	r0, #0
 8006308:	f04f 0100 	mov.w	r1, #0
 800630c:	00d9      	lsls	r1, r3, #3
 800630e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006312:	00d0      	lsls	r0, r2, #3
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	eb12 0208 	adds.w	r2, r2, r8
 800631c:	eb43 0309 	adc.w	r3, r3, r9
 8006320:	f04f 0000 	mov.w	r0, #0
 8006324:	f04f 0100 	mov.w	r1, #0
 8006328:	0259      	lsls	r1, r3, #9
 800632a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800632e:	0250      	lsls	r0, r2, #9
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4610      	mov	r0, r2
 8006336:	4619      	mov	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	461a      	mov	r2, r3
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	f7fa fcaa 	bl	8000c98 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4613      	mov	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	e04a      	b.n	80063e4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800634e:	4b31      	ldr	r3, [pc, #196]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	461a      	mov	r2, r3
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800635e:	f04f 0100 	mov.w	r1, #0
 8006362:	ea02 0400 	and.w	r4, r2, r0
 8006366:	ea03 0501 	and.w	r5, r3, r1
 800636a:	4620      	mov	r0, r4
 800636c:	4629      	mov	r1, r5
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	014b      	lsls	r3, r1, #5
 8006378:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800637c:	0142      	lsls	r2, r0, #5
 800637e:	4610      	mov	r0, r2
 8006380:	4619      	mov	r1, r3
 8006382:	1b00      	subs	r0, r0, r4
 8006384:	eb61 0105 	sbc.w	r1, r1, r5
 8006388:	f04f 0200 	mov.w	r2, #0
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	018b      	lsls	r3, r1, #6
 8006392:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006396:	0182      	lsls	r2, r0, #6
 8006398:	1a12      	subs	r2, r2, r0
 800639a:	eb63 0301 	sbc.w	r3, r3, r1
 800639e:	f04f 0000 	mov.w	r0, #0
 80063a2:	f04f 0100 	mov.w	r1, #0
 80063a6:	00d9      	lsls	r1, r3, #3
 80063a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063ac:	00d0      	lsls	r0, r2, #3
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	1912      	adds	r2, r2, r4
 80063b4:	eb45 0303 	adc.w	r3, r5, r3
 80063b8:	f04f 0000 	mov.w	r0, #0
 80063bc:	f04f 0100 	mov.w	r1, #0
 80063c0:	0299      	lsls	r1, r3, #10
 80063c2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063c6:	0290      	lsls	r0, r2, #10
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4610      	mov	r0, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	461a      	mov	r2, r3
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	f7fa fc5e 	bl	8000c98 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4613      	mov	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	0c1b      	lsrs	r3, r3, #16
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	3301      	adds	r3, #1
 80063f0:	005b      	lsls	r3, r3, #1
 80063f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	60bb      	str	r3, [r7, #8]
      break;
 80063fe:	e002      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006400:	4b05      	ldr	r3, [pc, #20]	; (8006418 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006402:	60bb      	str	r3, [r7, #8]
      break;
 8006404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006406:	68bb      	ldr	r3, [r7, #8]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	00f42400 	.word	0x00f42400
 800641c:	007a1200 	.word	0x007a1200

08006420 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <HAL_RCC_GetHCLKFreq+0x14>)
 8006426:	681b      	ldr	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000000 	.word	0x20000000

08006438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800643c:	f7ff fff0 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0a9b      	lsrs	r3, r3, #10
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <HAL_RCC_GetPCLK1Freq+0x24>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40023800 	.word	0x40023800
 800645c:	0801078c 	.word	0x0801078c

08006460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006464:	f7ff ffdc 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0b5b      	lsrs	r3, r3, #13
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4903      	ldr	r1, [pc, #12]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	0801078c 	.word	0x0801078c

08006488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220f      	movs	r2, #15
 8006496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0203 	and.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ca:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <HAL_RCC_GetClockConfig+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40023c00 	.word	0x40023c00

080064ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d012      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006510:	4b65      	ldr	r3, [pc, #404]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a64      	ldr	r2, [pc, #400]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006516:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800651a:	6093      	str	r3, [r2, #8]
 800651c:	4b62      	ldr	r3, [pc, #392]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	4960      	ldr	r1, [pc, #384]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006526:	4313      	orrs	r3, r2
 8006528:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8006532:	2301      	movs	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d017      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006542:	4b59      	ldr	r3, [pc, #356]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006548:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	4955      	ldr	r1, [pc, #340]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006560:	d101      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800656e:	2301      	movs	r3, #1
 8006570:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800657e:	4b4a      	ldr	r3, [pc, #296]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	4946      	ldr	r1, [pc, #280]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800659c:	d101      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 808b 	beq.w	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065bc:	4b3a      	ldr	r3, [pc, #232]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	4a39      	ldr	r2, [pc, #228]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c6:	6413      	str	r3, [r2, #64]	; 0x40
 80065c8:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d4:	4b35      	ldr	r3, [pc, #212]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a34      	ldr	r2, [pc, #208]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e0:	f7fd fe9e 	bl	8004320 <HAL_GetTick>
 80065e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065e8:	f7fd fe9a 	bl	8004320 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e2ba      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fa:	4b2c      	ldr	r3, [pc, #176]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0f0      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006606:	4b28      	ldr	r3, [pc, #160]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d035      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	429a      	cmp	r2, r3
 8006622:	d02e      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006624:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006644:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b01      	cmp	r3, #1
 8006656:	d114      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006658:	f7fd fe62 	bl	8004320 <HAL_GetTick>
 800665c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800665e:	e00a      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006660:	f7fd fe5e 	bl	8004320 <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e27c      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ee      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800668e:	d111      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8006690:	4b05      	ldr	r3, [pc, #20]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800669e:	400b      	ands	r3, r1
 80066a0:	4901      	ldr	r1, [pc, #4]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	608b      	str	r3, [r1, #8]
 80066a6:	e00b      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40007000 	.word	0x40007000
 80066b0:	0ffffcff 	.word	0x0ffffcff
 80066b4:	4ba3      	ldr	r3, [pc, #652]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4aa2      	ldr	r2, [pc, #648]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066be:	6093      	str	r3, [r2, #8]
 80066c0:	4ba0      	ldr	r3, [pc, #640]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066cc:	499d      	ldr	r1, [pc, #628]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0310 	and.w	r3, r3, #16
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066de:	4b99      	ldr	r3, [pc, #612]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e4:	4a97      	ldr	r2, [pc, #604]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066ee:	4b95      	ldr	r3, [pc, #596]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4992      	ldr	r1, [pc, #584]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800670c:	4b8d      	ldr	r3, [pc, #564]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800670e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	498a      	ldr	r1, [pc, #552]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800672e:	4b85      	ldr	r3, [pc, #532]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673c:	4981      	ldr	r1, [pc, #516]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006750:	4b7c      	ldr	r3, [pc, #496]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800675e:	4979      	ldr	r1, [pc, #484]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006772:	4b74      	ldr	r3, [pc, #464]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	f023 0203 	bic.w	r2, r3, #3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006780:	4970      	ldr	r1, [pc, #448]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006794:	4b6b      	ldr	r3, [pc, #428]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f023 020c 	bic.w	r2, r3, #12
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	4968      	ldr	r1, [pc, #416]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067b6:	4b63      	ldr	r3, [pc, #396]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c4:	495f      	ldr	r1, [pc, #380]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067d8:	4b5a      	ldr	r3, [pc, #360]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067e6:	4957      	ldr	r1, [pc, #348]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067fa:	4b52      	ldr	r3, [pc, #328]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80067fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006808:	494e      	ldr	r1, [pc, #312]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00a      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800681c:	4b49      	ldr	r3, [pc, #292]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682a:	4946      	ldr	r1, [pc, #280]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800682c:	4313      	orrs	r3, r2
 800682e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800683e:	4b41      	ldr	r3, [pc, #260]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006844:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684c:	493d      	ldr	r1, [pc, #244]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800684e:	4313      	orrs	r3, r2
 8006850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006860:	4b38      	ldr	r3, [pc, #224]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686e:	4935      	ldr	r1, [pc, #212]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006870:	4313      	orrs	r3, r2
 8006872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006882:	4b30      	ldr	r3, [pc, #192]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006888:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006890:	492c      	ldr	r1, [pc, #176]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006892:	4313      	orrs	r3, r2
 8006894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800689c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a0:	d101      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c0:	4920      	ldr	r1, [pc, #128]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80068d4:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e2:	4918      	ldr	r1, [pc, #96]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80068f6:	4b13      	ldr	r3, [pc, #76]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006904:	490f      	ldr	r1, [pc, #60]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d005      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800691a:	f040 809c 	bne.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800691e:	4b09      	ldr	r3, [pc, #36]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a08      	ldr	r2, [pc, #32]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006924:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006928:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692a:	f7fd fcf9 	bl	8004320 <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006930:	e00a      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006932:	f7fd fcf5 	bl	8004320 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b64      	cmp	r3, #100	; 0x64
 800693e:	d903      	bls.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e115      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8006944:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006948:	4b8b      	ldr	r3, [pc, #556]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ee      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d017      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	d113      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006968:	4b83      	ldr	r3, [pc, #524]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800696a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800696e:	0e1b      	lsrs	r3, r3, #24
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	019a      	lsls	r2, r3, #6
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	061b      	lsls	r3, r3, #24
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	071b      	lsls	r3, r3, #28
 8006988:	497b      	ldr	r1, [pc, #492]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800698a:	4313      	orrs	r3, r2
 800698c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d004      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a4:	d00a      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d024      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069ba:	d11f      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069bc:	4b6e      	ldr	r3, [pc, #440]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	0f1b      	lsrs	r3, r3, #28
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	019a      	lsls	r2, r3, #6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	061b      	lsls	r3, r3, #24
 80069d6:	431a      	orrs	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	071b      	lsls	r3, r3, #28
 80069dc:	4966      	ldr	r1, [pc, #408]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e4:	4b64      	ldr	r3, [pc, #400]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ea:	f023 021f 	bic.w	r2, r3, #31
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	4960      	ldr	r1, [pc, #384]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	019a      	lsls	r2, r3, #6
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	061b      	lsls	r3, r3, #24
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	071b      	lsls	r3, r3, #28
 8006a1c:	4956      	ldr	r1, [pc, #344]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a24:	4b54      	ldr	r3, [pc, #336]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a53      	ldr	r2, [pc, #332]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a30:	f7fd fc76 	bl	8004320 <HAL_GetTick>
 8006a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a36:	e008      	b.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a38:	f7fd fc72 	bl	8004320 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	2b64      	cmp	r3, #100	; 0x64
 8006a44:	d901      	bls.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e092      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a4a:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0f0      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	f040 8088 	bne.w	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a5e:	4b46      	ldr	r3, [pc, #280]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a45      	ldr	r2, [pc, #276]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a6a:	f7fd fc59 	bl	8004320 <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a72:	f7fd fc55 	bl	8004320 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b64      	cmp	r3, #100	; 0x64
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e075      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a84:	4b3c      	ldr	r3, [pc, #240]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a90:	d0ef      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d024      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d120      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006aba:	4b2f      	ldr	r3, [pc, #188]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac0:	0c1b      	lsrs	r3, r3, #16
 8006ac2:	f003 0303 	and.w	r3, r3, #3
 8006ac6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	019a      	lsls	r2, r3, #6
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	061b      	lsls	r3, r3, #24
 8006ada:	4927      	ldr	r1, [pc, #156]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ae2:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	4920      	ldr	r1, [pc, #128]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d018      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b10:	d113      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b12:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b18:	0e1b      	lsrs	r3, r3, #24
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	019a      	lsls	r2, r3, #6
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	041b      	lsls	r3, r3, #16
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	4911      	ldr	r1, [pc, #68]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a0e      	ldr	r2, [pc, #56]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b46:	f7fd fbeb 	bl	8004320 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b4e:	f7fd fbe7 	bl	8004320 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b64      	cmp	r3, #100	; 0x64
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e007      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b6c:	d1ef      	bne.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40023800 	.word	0x40023800

08006b7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e084      	b.n	8006c98 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fd f89d 	bl	8003ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bce:	d902      	bls.n	8006bd6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e002      	b.n	8006bdc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bda:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006be4:	d007      	beq.n	8006bf6 <HAL_SPI_Init+0x7a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bee:	d002      	beq.n	8006bf6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10b      	bne.n	8006c16 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c06:	d903      	bls.n	8006c10 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c0e:	e002      	b.n	8006c16 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	ea42 0103 	orr.w	r1, r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	0c1b      	lsrs	r3, r3, #16
 8006c56:	f003 0204 	and.w	r2, r3, #4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	ea42 0103 	orr.w	r1, r2, r3
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69da      	ldr	r2, [r3, #28]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b088      	sub	sp, #32
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	603b      	str	r3, [r7, #0]
 8006cac:	4613      	mov	r3, r2
 8006cae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_SPI_Transmit+0x22>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e150      	b.n	8006f64 <HAL_SPI_Transmit+0x2c4>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cca:	f7fd fb29 	bl	8004320 <HAL_GetTick>
 8006cce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ce4:	e135      	b.n	8006f52 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_SPI_Transmit+0x52>
 8006cec:	88fb      	ldrh	r3, [r7, #6]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d102      	bne.n	8006cf8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cf6:	e12c      	b.n	8006f52 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2203      	movs	r2, #3
 8006cfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	88fa      	ldrh	r2, [r7, #6]
 8006d16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2200      	movs	r2, #0
 8006d38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	d107      	bne.n	8006d54 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5e:	2b40      	cmp	r3, #64	; 0x40
 8006d60:	d007      	beq.n	8006d72 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d7a:	d94b      	bls.n	8006e14 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_SPI_Transmit+0xea>
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d13e      	bne.n	8006e08 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	881a      	ldrh	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dae:	e02b      	b.n	8006e08 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d112      	bne.n	8006de4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	881a      	ldrh	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	1c9a      	adds	r2, r3, #2
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006de2:	e011      	b.n	8006e08 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de4:	f7fd fa9c 	bl	8004320 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d803      	bhi.n	8006dfc <HAL_SPI_Transmit+0x15c>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d102      	bne.n	8006e02 <HAL_SPI_Transmit+0x162>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d102      	bne.n	8006e08 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e06:	e0a4      	b.n	8006f52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ce      	bne.n	8006db0 <HAL_SPI_Transmit+0x110>
 8006e12:	e07c      	b.n	8006f0e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x182>
 8006e1c:	8afb      	ldrh	r3, [r7, #22]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d170      	bne.n	8006f04 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d912      	bls.n	8006e52 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	881a      	ldrh	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3c:	1c9a      	adds	r2, r3, #2
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	3b02      	subs	r3, #2
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e50:	e058      	b.n	8006f04 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	7812      	ldrb	r2, [r2, #0]
 8006e5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e78:	e044      	b.n	8006f04 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d12b      	bne.n	8006ee0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d912      	bls.n	8006eb8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	881a      	ldrh	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	1c9a      	adds	r2, r3, #2
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eac:	b29b      	uxth	r3, r3
 8006eae:	3b02      	subs	r3, #2
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eb6:	e025      	b.n	8006f04 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	7812      	ldrb	r2, [r2, #0]
 8006ec4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ede:	e011      	b.n	8006f04 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ee0:	f7fd fa1e 	bl	8004320 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d803      	bhi.n	8006ef8 <HAL_SPI_Transmit+0x258>
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef6:	d102      	bne.n	8006efe <HAL_SPI_Transmit+0x25e>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f02:	e026      	b.n	8006f52 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1b5      	bne.n	8006e7a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fb14 	bl	8007540 <SPI_EndRxTxTransaction>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10a      	bne.n	8006f42 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	77fb      	strb	r3, [r7, #31]
 8006f4e:	e000      	b.n	8006f52 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006f50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3720      	adds	r7, #32
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
 8006f78:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_SPI_TransmitReceive+0x26>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e1fb      	b.n	800738a <HAL_SPI_TransmitReceive+0x41e>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f9a:	f7fd f9c1 	bl	8004320 <HAL_GetTick>
 8006f9e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fa6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006fb2:	887b      	ldrh	r3, [r7, #2]
 8006fb4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fb6:	7efb      	ldrb	r3, [r7, #27]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d00e      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x6e>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc2:	d106      	bne.n	8006fd2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_TransmitReceive+0x66>
 8006fcc:	7efb      	ldrb	r3, [r7, #27]
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d003      	beq.n	8006fda <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006fd8:	e1cd      	b.n	8007376 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_SPI_TransmitReceive+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <HAL_SPI_TransmitReceive+0x80>
 8006fe6:	887b      	ldrh	r3, [r7, #2]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006ff2:	e1c0      	b.n	8007376 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d003      	beq.n	8007008 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2205      	movs	r2, #5
 8007004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	887a      	ldrh	r2, [r7, #2]
 8007020:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	887a      	ldrh	r2, [r7, #2]
 800702e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	887a      	ldrh	r2, [r7, #2]
 8007034:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800704a:	d802      	bhi.n	8007052 <HAL_SPI_TransmitReceive+0xe6>
 800704c:	8a3b      	ldrh	r3, [r7, #16]
 800704e:	2b01      	cmp	r3, #1
 8007050:	d908      	bls.n	8007064 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007060:	605a      	str	r2, [r3, #4]
 8007062:	e007      	b.n	8007074 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007072:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d007      	beq.n	8007092 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800709a:	d97c      	bls.n	8007196 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x13e>
 80070a4:	8a7b      	ldrh	r3, [r7, #18]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d169      	bne.n	800717e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ae:	881a      	ldrh	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80070ce:	e056      	b.n	800717e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 0302 	and.w	r3, r3, #2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d11b      	bne.n	8007116 <HAL_SPI_TransmitReceive+0x1aa>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <HAL_SPI_TransmitReceive+0x1aa>
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d113      	bne.n	8007116 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f2:	881a      	ldrh	r2, [r3, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	1c9a      	adds	r2, r3, #2
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b01      	cmp	r3, #1
 8007122:	d11c      	bne.n	800715e <HAL_SPI_TransmitReceive+0x1f2>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800712a:	b29b      	uxth	r3, r3
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	b292      	uxth	r2, r2
 800713c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	1c9a      	adds	r2, r3, #2
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800715a:	2301      	movs	r3, #1
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800715e:	f7fd f8df 	bl	8004320 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800716a:	429a      	cmp	r2, r3
 800716c:	d807      	bhi.n	800717e <HAL_SPI_TransmitReceive+0x212>
 800716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d003      	beq.n	800717e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800717c:	e0fb      	b.n	8007376 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007182:	b29b      	uxth	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1a3      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x164>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800718e:	b29b      	uxth	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d19d      	bne.n	80070d0 <HAL_SPI_TransmitReceive+0x164>
 8007194:	e0df      	b.n	8007356 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <HAL_SPI_TransmitReceive+0x23a>
 800719e:	8a7b      	ldrh	r3, [r7, #18]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	f040 80cb 	bne.w	800733c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d912      	bls.n	80071d6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b4:	881a      	ldrh	r2, [r3, #0]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	3b02      	subs	r3, #2
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071d4:	e0b2      	b.n	800733c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	330c      	adds	r3, #12
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071fc:	e09e      	b.n	800733c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b02      	cmp	r3, #2
 800720a:	d134      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x30a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d02f      	beq.n	8007276 <HAL_SPI_TransmitReceive+0x30a>
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b01      	cmp	r3, #1
 800721a:	d12c      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b01      	cmp	r3, #1
 8007224:	d912      	bls.n	800724c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	881a      	ldrh	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	1c9a      	adds	r2, r3, #2
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b02      	subs	r3, #2
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	87da      	strh	r2, [r3, #62]	; 0x3e
 800724a:	e012      	b.n	8007272 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	7812      	ldrb	r2, [r2, #0]
 8007258:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	1c5a      	adds	r2, r3, #1
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007268:	b29b      	uxth	r3, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	d148      	bne.n	8007316 <HAL_SPI_TransmitReceive+0x3aa>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800728a:	b29b      	uxth	r3, r3
 800728c:	2b00      	cmp	r3, #0
 800728e:	d042      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007296:	b29b      	uxth	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	d923      	bls.n	80072e4 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	b292      	uxth	r2, r2
 80072a8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b02      	subs	r3, #2
 80072be:	b29a      	uxth	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d81f      	bhi.n	8007312 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	e016      	b.n	8007312 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f103 020c 	add.w	r2, r3, #12
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f0:	7812      	ldrb	r2, [r2, #0]
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007306:	b29b      	uxth	r3, r3
 8007308:	3b01      	subs	r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007312:	2301      	movs	r3, #1
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007316:	f7fd f803 	bl	8004320 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	429a      	cmp	r2, r3
 8007324:	d803      	bhi.n	800732e <HAL_SPI_TransmitReceive+0x3c2>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d102      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x3c8>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800733a:	e01c      	b.n	8007376 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007340:	b29b      	uxth	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	f47f af5b 	bne.w	80071fe <HAL_SPI_TransmitReceive+0x292>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	f47f af54 	bne.w	80071fe <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007356:	69fa      	ldr	r2, [r7, #28]
 8007358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f8f0 	bl	8007540 <SPI_EndRxTxTransaction>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d006      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2220      	movs	r2, #32
 8007370:	661a      	str	r2, [r3, #96]	; 0x60
 8007372:	e000      	b.n	8007376 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007374:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800738a:	4618      	mov	r0, r3
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	603b      	str	r3, [r7, #0]
 800739e:	4613      	mov	r3, r2
 80073a0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073a2:	e04c      	b.n	800743e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073aa:	d048      	beq.n	800743e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80073ac:	f7fc ffb8 	bl	8004320 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d902      	bls.n	80073c2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d13d      	bne.n	800743e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073da:	d111      	bne.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e4:	d004      	beq.n	80073f0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ee:	d107      	bne.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d10f      	bne.n	800742a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e00f      	b.n	800745e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	429a      	cmp	r2, r3
 800744c:	bf0c      	ite	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	2300      	movne	r3, #0
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	429a      	cmp	r2, r3
 800745a:	d1a3      	bne.n	80073a4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
 8007472:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007474:	e057      	b.n	8007526 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800747c:	d106      	bne.n	800748c <SPI_WaitFifoStateUntilTimeout+0x26>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	330c      	adds	r3, #12
 800748a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d048      	beq.n	8007526 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007494:	f7fc ff44 	bl	8004320 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d902      	bls.n	80074aa <SPI_WaitFifoStateUntilTimeout+0x44>
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d13d      	bne.n	8007526 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074c2:	d111      	bne.n	80074e8 <SPI_WaitFifoStateUntilTimeout+0x82>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074cc:	d004      	beq.n	80074d8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d6:	d107      	bne.n	80074e8 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f0:	d10f      	bne.n	8007512 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007510:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e008      	b.n	8007538 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4013      	ands	r3, r2
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d19f      	bne.n	8007476 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2200      	movs	r2, #0
 8007554:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff ff84 	bl	8007466 <SPI_WaitFifoStateUntilTimeout>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d007      	beq.n	8007574 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007568:	f043 0220 	orr.w	r2, r3, #32
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e027      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2200      	movs	r2, #0
 800757c:	2180      	movs	r1, #128	; 0x80
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7ff ff07 	bl	8007392 <SPI_WaitFlagStateUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d007      	beq.n	800759a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758e:	f043 0220 	orr.w	r2, r3, #32
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e014      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	9300      	str	r3, [sp, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff ff5d 	bl	8007466 <SPI_WaitFifoStateUntilTimeout>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d007      	beq.n	80075c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b6:	f043 0220 	orr.w	r2, r3, #32
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e000      	b.n	80075c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e01d      	b.n	800761a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fc fbbc 	bl	8003d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2202      	movs	r2, #2
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f000 fd0e 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689a      	ldr	r2, [r3, #8]
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <HAL_TIM_Base_Start_IT+0x50>)
 8007644:	4013      	ands	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b06      	cmp	r3, #6
 800764c:	d00b      	beq.n	8007666 <HAL_TIM_Base_Start_IT+0x42>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007654:	d007      	beq.n	8007666 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f042 0201 	orr.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	00010007 	.word	0x00010007

08007678 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d101      	bne.n	800768a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e01d      	b.n	80076c6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f815 	bl	80076ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f000 fcb8 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b083      	sub	sp, #12
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80076d6:	bf00      	nop
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e01d      	b.n	8007730 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f815 	bl	8007738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2202      	movs	r2, #2
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f000 fc83 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2201      	movs	r2, #1
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f001 f88c 	bl	800887c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_TIM_PWM_Start+0x7c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d004      	beq.n	8007778 <HAL_TIM_PWM_Start+0x2c>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a16      	ldr	r2, [pc, #88]	; (80077cc <HAL_TIM_PWM_Start+0x80>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d101      	bne.n	800777c <HAL_TIM_PWM_Start+0x30>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <HAL_TIM_PWM_Start+0x32>
 800777c:	2300      	movs	r3, #0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <HAL_TIM_PWM_Start+0x84>)
 800779a:	4013      	ands	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d00b      	beq.n	80077bc <HAL_TIM_PWM_Start+0x70>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077aa:	d007      	beq.n	80077bc <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f042 0201 	orr.w	r2, r2, #1
 80077ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	40010000 	.word	0x40010000
 80077cc:	40010400 	.word	0x40010400
 80077d0:	00010007 	.word	0x00010007

080077d4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e02d      	b.n	8007844 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f825 	bl	800784c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2202      	movs	r2, #2
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f000 fc09 	bl	800802c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0208 	bic.w	r2, r2, #8
 8007828:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d122      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b02      	cmp	r3, #2
 8007882:	d11b      	bne.n	80078bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0202 	mvn.w	r2, #2
 800788c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fba4 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 80078a8:	e005      	b.n	80078b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fb96 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fba7 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d122      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d11b      	bne.n	8007910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0204 	mvn.w	r2, #4
 80078e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fb7a 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 80078fc:	e005      	b.n	800790a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fb6c 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fb7d 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b08      	cmp	r3, #8
 800791c:	d122      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f003 0308 	and.w	r3, r3, #8
 8007928:	2b08      	cmp	r3, #8
 800792a:	d11b      	bne.n	8007964 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f06f 0208 	mvn.w	r2, #8
 8007934:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2204      	movs	r2, #4
 800793a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fb50 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 8007950:	e005      	b.n	800795e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fb42 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb53 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	2b10      	cmp	r3, #16
 8007970:	d122      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b10      	cmp	r3, #16
 800797e:	d11b      	bne.n	80079b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f06f 0210 	mvn.w	r2, #16
 8007988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2208      	movs	r2, #8
 800798e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fb26 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 80079a4:	e005      	b.n	80079b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fb18 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fb29 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d10e      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f003 0301 	and.w	r3, r3, #1
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f06f 0201 	mvn.w	r2, #1
 80079dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fc f8b4 	bl	8003b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ee:	2b80      	cmp	r3, #128	; 0x80
 80079f0:	d10e      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fc:	2b80      	cmp	r3, #128	; 0x80
 80079fe:	d107      	bne.n	8007a10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 f8a2 	bl	8008b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a1e:	d10e      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d107      	bne.n	8007a3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 f895 	bl	8008b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d10e      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d107      	bne.n	8007a6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fad7 	bl	8008018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 0320 	and.w	r3, r3, #32
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d10e      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	d107      	bne.n	8007a96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f06f 0220 	mvn.w	r2, #32
 8007a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f855 	bl	8008b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a96:	bf00      	nop
 8007a98:	3708      	adds	r7, #8
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_OC_ConfigChannel+0x1a>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e06c      	b.n	8007b94 <HAL_TIM_OC_ConfigChannel+0xf4>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b14      	cmp	r3, #20
 8007ace:	d857      	bhi.n	8007b80 <HAL_TIM_OC_ConfigChannel+0xe0>
 8007ad0:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007b81 	.word	0x08007b81
 8007ae0:	08007b81 	.word	0x08007b81
 8007ae4:	08007b81 	.word	0x08007b81
 8007ae8:	08007b3b 	.word	0x08007b3b
 8007aec:	08007b81 	.word	0x08007b81
 8007af0:	08007b81 	.word	0x08007b81
 8007af4:	08007b81 	.word	0x08007b81
 8007af8:	08007b49 	.word	0x08007b49
 8007afc:	08007b81 	.word	0x08007b81
 8007b00:	08007b81 	.word	0x08007b81
 8007b04:	08007b81 	.word	0x08007b81
 8007b08:	08007b57 	.word	0x08007b57
 8007b0c:	08007b81 	.word	0x08007b81
 8007b10:	08007b81 	.word	0x08007b81
 8007b14:	08007b81 	.word	0x08007b81
 8007b18:	08007b65 	.word	0x08007b65
 8007b1c:	08007b81 	.word	0x08007b81
 8007b20:	08007b81 	.word	0x08007b81
 8007b24:	08007b81 	.word	0x08007b81
 8007b28:	08007b73 	.word	0x08007b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fb1a 	bl	800816c <TIM_OC1_SetConfig>
      break;
 8007b38:	e023      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fb85 	bl	8008250 <TIM_OC2_SetConfig>
      break;
 8007b46:	e01c      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fbf6 	bl	8008340 <TIM_OC3_SetConfig>
      break;
 8007b54:	e015      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68b9      	ldr	r1, [r7, #8]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 fc65 	bl	800842c <TIM_OC4_SetConfig>
      break;
 8007b62:	e00e      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fcb6 	bl	80084dc <TIM_OC5_SetConfig>
      break;
 8007b70:	e007      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fd01 	bl	8008580 <TIM_OC6_SetConfig>
      break;
 8007b7e:	e000      	b.n	8007b82 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8007b80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e105      	b.n	8007dc2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b14      	cmp	r3, #20
 8007bca:	f200 80f0 	bhi.w	8007dae <HAL_TIM_PWM_ConfigChannel+0x212>
 8007bce:	a201      	add	r2, pc, #4	; (adr r2, 8007bd4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007c29 	.word	0x08007c29
 8007bd8:	08007daf 	.word	0x08007daf
 8007bdc:	08007daf 	.word	0x08007daf
 8007be0:	08007daf 	.word	0x08007daf
 8007be4:	08007c69 	.word	0x08007c69
 8007be8:	08007daf 	.word	0x08007daf
 8007bec:	08007daf 	.word	0x08007daf
 8007bf0:	08007daf 	.word	0x08007daf
 8007bf4:	08007cab 	.word	0x08007cab
 8007bf8:	08007daf 	.word	0x08007daf
 8007bfc:	08007daf 	.word	0x08007daf
 8007c00:	08007daf 	.word	0x08007daf
 8007c04:	08007ceb 	.word	0x08007ceb
 8007c08:	08007daf 	.word	0x08007daf
 8007c0c:	08007daf 	.word	0x08007daf
 8007c10:	08007daf 	.word	0x08007daf
 8007c14:	08007d2d 	.word	0x08007d2d
 8007c18:	08007daf 	.word	0x08007daf
 8007c1c:	08007daf 	.word	0x08007daf
 8007c20:	08007daf 	.word	0x08007daf
 8007c24:	08007d6d 	.word	0x08007d6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68b9      	ldr	r1, [r7, #8]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fa9c 	bl	800816c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699a      	ldr	r2, [r3, #24]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f042 0208 	orr.w	r2, r2, #8
 8007c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f022 0204 	bic.w	r2, r2, #4
 8007c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6999      	ldr	r1, [r3, #24]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	691a      	ldr	r2, [r3, #16]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	619a      	str	r2, [r3, #24]
      break;
 8007c66:	e0a3      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 faee 	bl	8008250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	699a      	ldr	r2, [r3, #24]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6999      	ldr	r1, [r3, #24]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	021a      	lsls	r2, r3, #8
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	619a      	str	r2, [r3, #24]
      break;
 8007ca8:	e082      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fb45 	bl	8008340 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69da      	ldr	r2, [r3, #28]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0208 	orr.w	r2, r2, #8
 8007cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0204 	bic.w	r2, r2, #4
 8007cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69d9      	ldr	r1, [r3, #28]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	691a      	ldr	r2, [r3, #16]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	61da      	str	r2, [r3, #28]
      break;
 8007ce8:	e062      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68b9      	ldr	r1, [r7, #8]
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f000 fb9b 	bl	800842c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69da      	ldr	r2, [r3, #28]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69d9      	ldr	r1, [r3, #28]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	021a      	lsls	r2, r3, #8
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	61da      	str	r2, [r3, #28]
      break;
 8007d2a:	e041      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68b9      	ldr	r1, [r7, #8]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 fbd2 	bl	80084dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0208 	orr.w	r2, r2, #8
 8007d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f022 0204 	bic.w	r2, r2, #4
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d6a:	e021      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68b9      	ldr	r1, [r7, #8]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fc04 	bl	8008580 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	021a      	lsls	r2, r3, #8
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dac:	e000      	b.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007dae:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_TIM_ConfigClockSource+0x18>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0b3      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x180>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	4b55      	ldr	r3, [pc, #340]	; (8007f54 <HAL_TIM_ConfigClockSource+0x188>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e1c:	d03e      	beq.n	8007e9c <HAL_TIM_ConfigClockSource+0xd0>
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e22:	f200 8087 	bhi.w	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2a:	f000 8085 	beq.w	8007f38 <HAL_TIM_ConfigClockSource+0x16c>
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e32:	d87f      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e34:	2b70      	cmp	r3, #112	; 0x70
 8007e36:	d01a      	beq.n	8007e6e <HAL_TIM_ConfigClockSource+0xa2>
 8007e38:	2b70      	cmp	r3, #112	; 0x70
 8007e3a:	d87b      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e3c:	2b60      	cmp	r3, #96	; 0x60
 8007e3e:	d050      	beq.n	8007ee2 <HAL_TIM_ConfigClockSource+0x116>
 8007e40:	2b60      	cmp	r3, #96	; 0x60
 8007e42:	d877      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e44:	2b50      	cmp	r3, #80	; 0x50
 8007e46:	d03c      	beq.n	8007ec2 <HAL_TIM_ConfigClockSource+0xf6>
 8007e48:	2b50      	cmp	r3, #80	; 0x50
 8007e4a:	d873      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e4c:	2b40      	cmp	r3, #64	; 0x40
 8007e4e:	d058      	beq.n	8007f02 <HAL_TIM_ConfigClockSource+0x136>
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d86f      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e54:	2b30      	cmp	r3, #48	; 0x30
 8007e56:	d064      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x156>
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d86b      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e5c:	2b20      	cmp	r3, #32
 8007e5e:	d060      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x156>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d867      	bhi.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d05c      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x156>
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d05a      	beq.n	8007f22 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007e6c:	e062      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6899      	ldr	r1, [r3, #8]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f000 fcdd 	bl	800883c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	609a      	str	r2, [r3, #8]
      break;
 8007e9a:	e04e      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	6899      	ldr	r1, [r3, #8]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f000 fcc6 	bl	800883c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ebe:	609a      	str	r2, [r3, #8]
      break;
 8007ec0:	e03b      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6859      	ldr	r1, [r3, #4]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f000 fc3a 	bl	8008748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2150      	movs	r1, #80	; 0x50
 8007eda:	4618      	mov	r0, r3
 8007edc:	f000 fc93 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007ee0:	e02b      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	6859      	ldr	r1, [r3, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f000 fc59 	bl	80087a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2160      	movs	r1, #96	; 0x60
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fc83 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007f00:	e01b      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	6859      	ldr	r1, [r3, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	f000 fc1a 	bl	8008748 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 fc73 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007f20:	e00b      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	f000 fc6a 	bl	8008806 <TIM_ITRx_SetConfig>
      break;
 8007f32:	e002      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f34:	bf00      	nop
 8007f36:	e000      	b.n	8007f3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	fffeff88 	.word	0xfffeff88

08007f58 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e031      	b.n	8007fd4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fb50 	bl	8008628 <TIM_SlaveTimer_SetConfig>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e018      	b.n	8007fd4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68da      	ldr	r2, [r3, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fc0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a40      	ldr	r2, [pc, #256]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804a:	d00f      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3d      	ldr	r2, [pc, #244]	; (8008144 <TIM_Base_SetConfig+0x118>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00b      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3c      	ldr	r2, [pc, #240]	; (8008148 <TIM_Base_SetConfig+0x11c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d007      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a3b      	ldr	r2, [pc, #236]	; (800814c <TIM_Base_SetConfig+0x120>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3a      	ldr	r2, [pc, #232]	; (8008150 <TIM_Base_SetConfig+0x124>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d108      	bne.n	800807e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2f      	ldr	r2, [pc, #188]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d02b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808c:	d027      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2c      	ldr	r2, [pc, #176]	; (8008144 <TIM_Base_SetConfig+0x118>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d023      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2b      	ldr	r2, [pc, #172]	; (8008148 <TIM_Base_SetConfig+0x11c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2a      	ldr	r2, [pc, #168]	; (800814c <TIM_Base_SetConfig+0x120>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <TIM_Base_SetConfig+0x124>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a28      	ldr	r2, [pc, #160]	; (8008154 <TIM_Base_SetConfig+0x128>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a27      	ldr	r2, [pc, #156]	; (8008158 <TIM_Base_SetConfig+0x12c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a26      	ldr	r2, [pc, #152]	; (800815c <TIM_Base_SetConfig+0x130>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a25      	ldr	r2, [pc, #148]	; (8008160 <TIM_Base_SetConfig+0x134>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a24      	ldr	r2, [pc, #144]	; (8008164 <TIM_Base_SetConfig+0x138>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <TIM_Base_SetConfig+0x13c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <TIM_Base_SetConfig+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d103      	bne.n	800812c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	615a      	str	r2, [r3, #20]
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40010000 	.word	0x40010000
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	40010400 	.word	0x40010400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800
 8008160:	40001800 	.word	0x40001800
 8008164:	40001c00 	.word	0x40001c00
 8008168:	40002000 	.word	0x40002000

0800816c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0201 	bic.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4b2b      	ldr	r3, [pc, #172]	; (8008244 <TIM_OC1_SetConfig+0xd8>)
 8008198:	4013      	ands	r3, r2
 800819a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f023 0302 	bic.w	r3, r3, #2
 80081b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a21      	ldr	r2, [pc, #132]	; (8008248 <TIM_OC1_SetConfig+0xdc>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC1_SetConfig+0x64>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a20      	ldr	r2, [pc, #128]	; (800824c <TIM_OC1_SetConfig+0xe0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10c      	bne.n	80081ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f023 0308 	bic.w	r3, r3, #8
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a16      	ldr	r2, [pc, #88]	; (8008248 <TIM_OC1_SetConfig+0xdc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_OC1_SetConfig+0x8e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a15      	ldr	r2, [pc, #84]	; (800824c <TIM_OC1_SetConfig+0xe0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d111      	bne.n	800821e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	fffeff8f 	.word	0xfffeff8f
 8008248:	40010000 	.word	0x40010000
 800824c:	40010400 	.word	0x40010400

08008250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f023 0210 	bic.w	r2, r3, #16
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4b2e      	ldr	r3, [pc, #184]	; (8008334 <TIM_OC2_SetConfig+0xe4>)
 800827c:	4013      	ands	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	021b      	lsls	r3, r3, #8
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f023 0320 	bic.w	r3, r3, #32
 800829a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	011b      	lsls	r3, r3, #4
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a23      	ldr	r2, [pc, #140]	; (8008338 <TIM_OC2_SetConfig+0xe8>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d003      	beq.n	80082b8 <TIM_OC2_SetConfig+0x68>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a22      	ldr	r2, [pc, #136]	; (800833c <TIM_OC2_SetConfig+0xec>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d10d      	bne.n	80082d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	011b      	lsls	r3, r3, #4
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	4a18      	ldr	r2, [pc, #96]	; (8008338 <TIM_OC2_SetConfig+0xe8>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d003      	beq.n	80082e4 <TIM_OC2_SetConfig+0x94>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a17      	ldr	r2, [pc, #92]	; (800833c <TIM_OC2_SetConfig+0xec>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d113      	bne.n	800830c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	feff8fff 	.word	0xfeff8fff
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400

08008340 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4b2d      	ldr	r3, [pc, #180]	; (8008420 <TIM_OC3_SetConfig+0xe0>)
 800836c:	4013      	ands	r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	021b      	lsls	r3, r3, #8
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a22      	ldr	r2, [pc, #136]	; (8008424 <TIM_OC3_SetConfig+0xe4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d003      	beq.n	80083a6 <TIM_OC3_SetConfig+0x66>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a21      	ldr	r2, [pc, #132]	; (8008428 <TIM_OC3_SetConfig+0xe8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10d      	bne.n	80083c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	021b      	lsls	r3, r3, #8
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a17      	ldr	r2, [pc, #92]	; (8008424 <TIM_OC3_SetConfig+0xe4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d003      	beq.n	80083d2 <TIM_OC3_SetConfig+0x92>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a16      	ldr	r2, [pc, #88]	; (8008428 <TIM_OC3_SetConfig+0xe8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d113      	bne.n	80083fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	011b      	lsls	r3, r3, #4
 80083e8:	693a      	ldr	r2, [r7, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	fffeff8f 	.word	0xfffeff8f
 8008424:	40010000 	.word	0x40010000
 8008428:	40010400 	.word	0x40010400

0800842c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4b1e      	ldr	r3, [pc, #120]	; (80084d0 <TIM_OC4_SetConfig+0xa4>)
 8008458:	4013      	ands	r3, r2
 800845a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	021b      	lsls	r3, r3, #8
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	4313      	orrs	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008476:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	031b      	lsls	r3, r3, #12
 800847e:	693a      	ldr	r2, [r7, #16]
 8008480:	4313      	orrs	r3, r2
 8008482:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a13      	ldr	r2, [pc, #76]	; (80084d4 <TIM_OC4_SetConfig+0xa8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d003      	beq.n	8008494 <TIM_OC4_SetConfig+0x68>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <TIM_OC4_SetConfig+0xac>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d109      	bne.n	80084a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800849a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	019b      	lsls	r3, r3, #6
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	621a      	str	r2, [r3, #32]
}
 80084c2:	bf00      	nop
 80084c4:	371c      	adds	r7, #28
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	feff8fff 	.word	0xfeff8fff
 80084d4:	40010000 	.word	0x40010000
 80084d8:	40010400 	.word	0x40010400

080084dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	4b1b      	ldr	r3, [pc, #108]	; (8008574 <TIM_OC5_SetConfig+0x98>)
 8008508:	4013      	ands	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800851c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	041b      	lsls	r3, r3, #16
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a12      	ldr	r2, [pc, #72]	; (8008578 <TIM_OC5_SetConfig+0x9c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_OC5_SetConfig+0x5e>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a11      	ldr	r2, [pc, #68]	; (800857c <TIM_OC5_SetConfig+0xa0>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d109      	bne.n	800854e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008540:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	695b      	ldr	r3, [r3, #20]
 8008546:	021b      	lsls	r3, r3, #8
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	621a      	str	r2, [r3, #32]
}
 8008568:	bf00      	nop
 800856a:	371c      	adds	r7, #28
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr
 8008574:	fffeff8f 	.word	0xfffeff8f
 8008578:	40010000 	.word	0x40010000
 800857c:	40010400 	.word	0x40010400

08008580 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	4b1c      	ldr	r3, [pc, #112]	; (800861c <TIM_OC6_SetConfig+0x9c>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	021b      	lsls	r3, r3, #8
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	4313      	orrs	r3, r2
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	051b      	lsls	r3, r3, #20
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a13      	ldr	r2, [pc, #76]	; (8008620 <TIM_OC6_SetConfig+0xa0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC6_SetConfig+0x60>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a12      	ldr	r2, [pc, #72]	; (8008624 <TIM_OC6_SetConfig+0xa4>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d109      	bne.n	80085f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	feff8fff 	.word	0xfeff8fff
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400

08008628 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008640:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <TIM_SlaveTimer_SetConfig+0x11c>)
 8008650:	4013      	ands	r3, r2
 8008652:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2b70      	cmp	r3, #112	; 0x70
 800866c:	d01a      	beq.n	80086a4 <TIM_SlaveTimer_SetConfig+0x7c>
 800866e:	2b70      	cmp	r3, #112	; 0x70
 8008670:	d860      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 8008672:	2b60      	cmp	r3, #96	; 0x60
 8008674:	d054      	beq.n	8008720 <TIM_SlaveTimer_SetConfig+0xf8>
 8008676:	2b60      	cmp	r3, #96	; 0x60
 8008678:	d85c      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 800867a:	2b50      	cmp	r3, #80	; 0x50
 800867c:	d046      	beq.n	800870c <TIM_SlaveTimer_SetConfig+0xe4>
 800867e:	2b50      	cmp	r3, #80	; 0x50
 8008680:	d858      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 8008682:	2b40      	cmp	r3, #64	; 0x40
 8008684:	d019      	beq.n	80086ba <TIM_SlaveTimer_SetConfig+0x92>
 8008686:	2b40      	cmp	r3, #64	; 0x40
 8008688:	d854      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 800868a:	2b30      	cmp	r3, #48	; 0x30
 800868c:	d054      	beq.n	8008738 <TIM_SlaveTimer_SetConfig+0x110>
 800868e:	2b30      	cmp	r3, #48	; 0x30
 8008690:	d850      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 8008692:	2b20      	cmp	r3, #32
 8008694:	d050      	beq.n	8008738 <TIM_SlaveTimer_SetConfig+0x110>
 8008696:	2b20      	cmp	r3, #32
 8008698:	d84c      	bhi.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d04c      	beq.n	8008738 <TIM_SlaveTimer_SetConfig+0x110>
 800869e:	2b10      	cmp	r3, #16
 80086a0:	d04a      	beq.n	8008738 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80086a2:	e047      	b.n	8008734 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	68d9      	ldr	r1, [r3, #12]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f000 f8c2 	bl	800883c <TIM_ETR_SetConfig>
      break;
 80086b8:	e03f      	b.n	800873a <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b05      	cmp	r3, #5
 80086c0:	d101      	bne.n	80086c6 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e03a      	b.n	800873c <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6a1a      	ldr	r2, [r3, #32]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086ec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	011b      	lsls	r3, r3, #4
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	621a      	str	r2, [r3, #32]
      break;
 800870a:	e016      	b.n	800873a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6899      	ldr	r1, [r3, #8]
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	461a      	mov	r2, r3
 800871a:	f000 f815 	bl	8008748 <TIM_TI1_ConfigInputStage>
      break;
 800871e:	e00c      	b.n	800873a <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	6899      	ldr	r1, [r3, #8]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	461a      	mov	r2, r3
 800872e:	f000 f83a 	bl	80087a6 <TIM_TI2_ConfigInputStage>
      break;
 8008732:	e002      	b.n	800873a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008734:	bf00      	nop
 8008736:	e000      	b.n	800873a <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8008738:	bf00      	nop
  }
  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	fffefff8 	.word	0xfffefff8

08008748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a1b      	ldr	r3, [r3, #32]
 8008758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	f023 0201 	bic.w	r2, r3, #1
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	4313      	orrs	r3, r2
 800877c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f023 030a 	bic.w	r3, r3, #10
 8008784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4313      	orrs	r3, r2
 800878c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	621a      	str	r2, [r3, #32]
}
 800879a:	bf00      	nop
 800879c:	371c      	adds	r7, #28
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b087      	sub	sp, #28
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	60f8      	str	r0, [r7, #12]
 80087ae:	60b9      	str	r1, [r7, #8]
 80087b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	f023 0210 	bic.w	r2, r3, #16
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	031b      	lsls	r3, r3, #12
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	011b      	lsls	r3, r3, #4
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	621a      	str	r2, [r3, #32]
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800881c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4313      	orrs	r3, r2
 8008824:	f043 0307 	orr.w	r3, r3, #7
 8008828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	609a      	str	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800883c:	b480      	push	{r7}
 800883e:	b087      	sub	sp, #28
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008856:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	021a      	lsls	r2, r3, #8
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	431a      	orrs	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4313      	orrs	r3, r2
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	697a      	ldr	r2, [r7, #20]
 800886e:	609a      	str	r2, [r3, #8]
}
 8008870:	bf00      	nop
 8008872:	371c      	adds	r7, #28
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800887c:	b480      	push	{r7}
 800887e:	b087      	sub	sp, #28
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2201      	movs	r2, #1
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6a1a      	ldr	r2, [r3, #32]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	43db      	mvns	r3, r3
 800889e:	401a      	ands	r2, r3
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f003 031f 	and.w	r3, r3, #31
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	fa01 f303 	lsl.w	r3, r1, r3
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
}
 80088ba:	bf00      	nop
 80088bc:	371c      	adds	r7, #28
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
	...

080088c8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2204      	movs	r2, #4
 80088d8:	6839      	ldr	r1, [r7, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f94e 	bl	8008b7c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	4b0b      	ldr	r3, [pc, #44]	; (8008924 <HAL_TIMEx_PWMN_Start+0x5c>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b06      	cmp	r3, #6
 8008900:	d00b      	beq.n	800891a <HAL_TIMEx_PWMN_Start+0x52>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008908:	d007      	beq.n	800891a <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f042 0201 	orr.w	r2, r2, #1
 8008918:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3710      	adds	r7, #16
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	00010007 	.word	0x00010007

08008928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800893c:	2302      	movs	r3, #2
 800893e:	e06d      	b.n	8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a30      	ldr	r2, [pc, #192]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d004      	beq.n	8008974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a2f      	ldr	r2, [pc, #188]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d108      	bne.n	8008986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800897a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800898c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	4313      	orrs	r3, r2
 8008996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a20      	ldr	r2, [pc, #128]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d022      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089b2:	d01d      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1d      	ldr	r2, [pc, #116]	; (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d018      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1c      	ldr	r2, [pc, #112]	; (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d013      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1a      	ldr	r2, [pc, #104]	; (8008a38 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00e      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d009      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a16      	ldr	r2, [pc, #88]	; (8008a3c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a15      	ldr	r2, [pc, #84]	; (8008a40 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d10c      	bne.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40010400 	.word	0x40010400
 8008a30:	40000400 	.word	0x40000400
 8008a34:	40000800 	.word	0x40000800
 8008a38:	40000c00 	.word	0x40000c00
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40001800 	.word	0x40001800

08008a44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e065      	b.n	8008b2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	695b      	ldr	r3, [r3, #20]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	041b      	lsls	r3, r3, #16
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a16      	ldr	r2, [pc, #88]	; (8008b38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d004      	beq.n	8008aee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a14      	ldr	r2, [pc, #80]	; (8008b3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d115      	bne.n	8008b1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	051b      	lsls	r3, r3, #20
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6a1b      	ldr	r3, [r3, #32]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400

08008b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	f003 031f 	and.w	r3, r3, #31
 8008b8e:	2204      	movs	r2, #4
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1a      	ldr	r2, [r3, #32]
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	401a      	ands	r2, r3
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb4:	431a      	orrs	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	621a      	str	r2, [r3, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	371c      	adds	r7, #28
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e040      	b.n	8008c5a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7fb f95f 	bl	8003eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2224      	movs	r2, #36	; 0x24
 8008bf2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0201 	bic.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f8bd 	bl	8008d84 <UART_SetConfig>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d101      	bne.n	8008c14 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e022      	b.n	8008c5a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb5d 	bl	80092dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f042 0201 	orr.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fbe4 	bl	8009420 <UART_CheckIdleState>
 8008c58:	4603      	mov	r3, r0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b08a      	sub	sp, #40	; 0x28
 8008c66:	af02      	add	r7, sp, #8
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	603b      	str	r3, [r7, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c76:	2b20      	cmp	r3, #32
 8008c78:	d17f      	bne.n	8008d7a <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <HAL_UART_Transmit+0x24>
 8008c80:	88fb      	ldrh	r3, [r7, #6]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e078      	b.n	8008d7c <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_UART_Transmit+0x36>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e071      	b.n	8008d7c <HAL_UART_Transmit+0x11a>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2221      	movs	r2, #33	; 0x21
 8008caa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008cac:	f7fb fb38 	bl	8004320 <HAL_GetTick>
 8008cb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	88fa      	ldrh	r2, [r7, #6]
 8008cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cca:	d108      	bne.n	8008cde <HAL_UART_Transmit+0x7c>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d104      	bne.n	8008cde <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	61bb      	str	r3, [r7, #24]
 8008cdc:	e003      	b.n	8008ce6 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008cee:	e02c      	b.n	8008d4a <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	9300      	str	r3, [sp, #0]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	2180      	movs	r1, #128	; 0x80
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 fbbf 	bl	800947e <UART_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e038      	b.n	8008d7c <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10b      	bne.n	8008d28 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	3302      	adds	r3, #2
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	e007      	b.n	8008d38 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	3301      	adds	r3, #1
 8008d36:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	3b01      	subs	r3, #1
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1cc      	bne.n	8008cf0 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2140      	movs	r1, #64	; 0x40
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fb8c 	bl	800947e <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e005      	b.n	8008d7c <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	e000      	b.n	8008d7c <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008d7a:	2302      	movs	r3, #2
  }
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b088      	sub	sp, #32
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689a      	ldr	r2, [r3, #8]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4ba7      	ldr	r3, [pc, #668]	; (8009050 <UART_SetConfig+0x2cc>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	6939      	ldr	r1, [r7, #16]
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a1b      	ldr	r3, [r3, #32]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a95      	ldr	r2, [pc, #596]	; (8009054 <UART_SetConfig+0x2d0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d120      	bne.n	8008e46 <UART_SetConfig+0xc2>
 8008e04:	4b94      	ldr	r3, [pc, #592]	; (8009058 <UART_SetConfig+0x2d4>)
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d816      	bhi.n	8008e40 <UART_SetConfig+0xbc>
 8008e12:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <UART_SetConfig+0x94>)
 8008e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e18:	08008e29 	.word	0x08008e29
 8008e1c:	08008e35 	.word	0x08008e35
 8008e20:	08008e2f 	.word	0x08008e2f
 8008e24:	08008e3b 	.word	0x08008e3b
 8008e28:	2301      	movs	r3, #1
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	e14f      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	77fb      	strb	r3, [r7, #31]
 8008e32:	e14c      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e34:	2304      	movs	r3, #4
 8008e36:	77fb      	strb	r3, [r7, #31]
 8008e38:	e149      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	77fb      	strb	r3, [r7, #31]
 8008e3e:	e146      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e40:	2310      	movs	r3, #16
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	e143      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a84      	ldr	r2, [pc, #528]	; (800905c <UART_SetConfig+0x2d8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d132      	bne.n	8008eb6 <UART_SetConfig+0x132>
 8008e50:	4b81      	ldr	r3, [pc, #516]	; (8009058 <UART_SetConfig+0x2d4>)
 8008e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e56:	f003 030c 	and.w	r3, r3, #12
 8008e5a:	2b0c      	cmp	r3, #12
 8008e5c:	d828      	bhi.n	8008eb0 <UART_SetConfig+0x12c>
 8008e5e:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <UART_SetConfig+0xe0>)
 8008e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008eb1 	.word	0x08008eb1
 8008e6c:	08008eb1 	.word	0x08008eb1
 8008e70:	08008eb1 	.word	0x08008eb1
 8008e74:	08008ea5 	.word	0x08008ea5
 8008e78:	08008eb1 	.word	0x08008eb1
 8008e7c:	08008eb1 	.word	0x08008eb1
 8008e80:	08008eb1 	.word	0x08008eb1
 8008e84:	08008e9f 	.word	0x08008e9f
 8008e88:	08008eb1 	.word	0x08008eb1
 8008e8c:	08008eb1 	.word	0x08008eb1
 8008e90:	08008eb1 	.word	0x08008eb1
 8008e94:	08008eab 	.word	0x08008eab
 8008e98:	2300      	movs	r3, #0
 8008e9a:	77fb      	strb	r3, [r7, #31]
 8008e9c:	e117      	b.n	80090ce <UART_SetConfig+0x34a>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	77fb      	strb	r3, [r7, #31]
 8008ea2:	e114      	b.n	80090ce <UART_SetConfig+0x34a>
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	77fb      	strb	r3, [r7, #31]
 8008ea8:	e111      	b.n	80090ce <UART_SetConfig+0x34a>
 8008eaa:	2308      	movs	r3, #8
 8008eac:	77fb      	strb	r3, [r7, #31]
 8008eae:	e10e      	b.n	80090ce <UART_SetConfig+0x34a>
 8008eb0:	2310      	movs	r3, #16
 8008eb2:	77fb      	strb	r3, [r7, #31]
 8008eb4:	e10b      	b.n	80090ce <UART_SetConfig+0x34a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a69      	ldr	r2, [pc, #420]	; (8009060 <UART_SetConfig+0x2dc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d120      	bne.n	8008f02 <UART_SetConfig+0x17e>
 8008ec0:	4b65      	ldr	r3, [pc, #404]	; (8009058 <UART_SetConfig+0x2d4>)
 8008ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008eca:	2b30      	cmp	r3, #48	; 0x30
 8008ecc:	d013      	beq.n	8008ef6 <UART_SetConfig+0x172>
 8008ece:	2b30      	cmp	r3, #48	; 0x30
 8008ed0:	d814      	bhi.n	8008efc <UART_SetConfig+0x178>
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d009      	beq.n	8008eea <UART_SetConfig+0x166>
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d810      	bhi.n	8008efc <UART_SetConfig+0x178>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d002      	beq.n	8008ee4 <UART_SetConfig+0x160>
 8008ede:	2b10      	cmp	r3, #16
 8008ee0:	d006      	beq.n	8008ef0 <UART_SetConfig+0x16c>
 8008ee2:	e00b      	b.n	8008efc <UART_SetConfig+0x178>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e0f1      	b.n	80090ce <UART_SetConfig+0x34a>
 8008eea:	2302      	movs	r3, #2
 8008eec:	77fb      	strb	r3, [r7, #31]
 8008eee:	e0ee      	b.n	80090ce <UART_SetConfig+0x34a>
 8008ef0:	2304      	movs	r3, #4
 8008ef2:	77fb      	strb	r3, [r7, #31]
 8008ef4:	e0eb      	b.n	80090ce <UART_SetConfig+0x34a>
 8008ef6:	2308      	movs	r3, #8
 8008ef8:	77fb      	strb	r3, [r7, #31]
 8008efa:	e0e8      	b.n	80090ce <UART_SetConfig+0x34a>
 8008efc:	2310      	movs	r3, #16
 8008efe:	77fb      	strb	r3, [r7, #31]
 8008f00:	e0e5      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a57      	ldr	r2, [pc, #348]	; (8009064 <UART_SetConfig+0x2e0>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d120      	bne.n	8008f4e <UART_SetConfig+0x1ca>
 8008f0c:	4b52      	ldr	r3, [pc, #328]	; (8009058 <UART_SetConfig+0x2d4>)
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008f16:	2bc0      	cmp	r3, #192	; 0xc0
 8008f18:	d013      	beq.n	8008f42 <UART_SetConfig+0x1be>
 8008f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f1c:	d814      	bhi.n	8008f48 <UART_SetConfig+0x1c4>
 8008f1e:	2b80      	cmp	r3, #128	; 0x80
 8008f20:	d009      	beq.n	8008f36 <UART_SetConfig+0x1b2>
 8008f22:	2b80      	cmp	r3, #128	; 0x80
 8008f24:	d810      	bhi.n	8008f48 <UART_SetConfig+0x1c4>
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d002      	beq.n	8008f30 <UART_SetConfig+0x1ac>
 8008f2a:	2b40      	cmp	r3, #64	; 0x40
 8008f2c:	d006      	beq.n	8008f3c <UART_SetConfig+0x1b8>
 8008f2e:	e00b      	b.n	8008f48 <UART_SetConfig+0x1c4>
 8008f30:	2300      	movs	r3, #0
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e0cb      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f36:	2302      	movs	r3, #2
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e0c8      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	e0c5      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f42:	2308      	movs	r3, #8
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e0c2      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	e0bf      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a45      	ldr	r2, [pc, #276]	; (8009068 <UART_SetConfig+0x2e4>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d125      	bne.n	8008fa4 <UART_SetConfig+0x220>
 8008f58:	4b3f      	ldr	r3, [pc, #252]	; (8009058 <UART_SetConfig+0x2d4>)
 8008f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f66:	d017      	beq.n	8008f98 <UART_SetConfig+0x214>
 8008f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f6c:	d817      	bhi.n	8008f9e <UART_SetConfig+0x21a>
 8008f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f72:	d00b      	beq.n	8008f8c <UART_SetConfig+0x208>
 8008f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f78:	d811      	bhi.n	8008f9e <UART_SetConfig+0x21a>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <UART_SetConfig+0x202>
 8008f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f82:	d006      	beq.n	8008f92 <UART_SetConfig+0x20e>
 8008f84:	e00b      	b.n	8008f9e <UART_SetConfig+0x21a>
 8008f86:	2300      	movs	r3, #0
 8008f88:	77fb      	strb	r3, [r7, #31]
 8008f8a:	e0a0      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	77fb      	strb	r3, [r7, #31]
 8008f90:	e09d      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f92:	2304      	movs	r3, #4
 8008f94:	77fb      	strb	r3, [r7, #31]
 8008f96:	e09a      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f98:	2308      	movs	r3, #8
 8008f9a:	77fb      	strb	r3, [r7, #31]
 8008f9c:	e097      	b.n	80090ce <UART_SetConfig+0x34a>
 8008f9e:	2310      	movs	r3, #16
 8008fa0:	77fb      	strb	r3, [r7, #31]
 8008fa2:	e094      	b.n	80090ce <UART_SetConfig+0x34a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a30      	ldr	r2, [pc, #192]	; (800906c <UART_SetConfig+0x2e8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d125      	bne.n	8008ffa <UART_SetConfig+0x276>
 8008fae:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <UART_SetConfig+0x2d4>)
 8008fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fbc:	d017      	beq.n	8008fee <UART_SetConfig+0x26a>
 8008fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008fc2:	d817      	bhi.n	8008ff4 <UART_SetConfig+0x270>
 8008fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fc8:	d00b      	beq.n	8008fe2 <UART_SetConfig+0x25e>
 8008fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fce:	d811      	bhi.n	8008ff4 <UART_SetConfig+0x270>
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <UART_SetConfig+0x258>
 8008fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd8:	d006      	beq.n	8008fe8 <UART_SetConfig+0x264>
 8008fda:	e00b      	b.n	8008ff4 <UART_SetConfig+0x270>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	77fb      	strb	r3, [r7, #31]
 8008fe0:	e075      	b.n	80090ce <UART_SetConfig+0x34a>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	77fb      	strb	r3, [r7, #31]
 8008fe6:	e072      	b.n	80090ce <UART_SetConfig+0x34a>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e06f      	b.n	80090ce <UART_SetConfig+0x34a>
 8008fee:	2308      	movs	r3, #8
 8008ff0:	77fb      	strb	r3, [r7, #31]
 8008ff2:	e06c      	b.n	80090ce <UART_SetConfig+0x34a>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	77fb      	strb	r3, [r7, #31]
 8008ff8:	e069      	b.n	80090ce <UART_SetConfig+0x34a>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a1c      	ldr	r2, [pc, #112]	; (8009070 <UART_SetConfig+0x2ec>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d137      	bne.n	8009074 <UART_SetConfig+0x2f0>
 8009004:	4b14      	ldr	r3, [pc, #80]	; (8009058 <UART_SetConfig+0x2d4>)
 8009006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800900e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009012:	d017      	beq.n	8009044 <UART_SetConfig+0x2c0>
 8009014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009018:	d817      	bhi.n	800904a <UART_SetConfig+0x2c6>
 800901a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901e:	d00b      	beq.n	8009038 <UART_SetConfig+0x2b4>
 8009020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009024:	d811      	bhi.n	800904a <UART_SetConfig+0x2c6>
 8009026:	2b00      	cmp	r3, #0
 8009028:	d003      	beq.n	8009032 <UART_SetConfig+0x2ae>
 800902a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800902e:	d006      	beq.n	800903e <UART_SetConfig+0x2ba>
 8009030:	e00b      	b.n	800904a <UART_SetConfig+0x2c6>
 8009032:	2300      	movs	r3, #0
 8009034:	77fb      	strb	r3, [r7, #31]
 8009036:	e04a      	b.n	80090ce <UART_SetConfig+0x34a>
 8009038:	2302      	movs	r3, #2
 800903a:	77fb      	strb	r3, [r7, #31]
 800903c:	e047      	b.n	80090ce <UART_SetConfig+0x34a>
 800903e:	2304      	movs	r3, #4
 8009040:	77fb      	strb	r3, [r7, #31]
 8009042:	e044      	b.n	80090ce <UART_SetConfig+0x34a>
 8009044:	2308      	movs	r3, #8
 8009046:	77fb      	strb	r3, [r7, #31]
 8009048:	e041      	b.n	80090ce <UART_SetConfig+0x34a>
 800904a:	2310      	movs	r3, #16
 800904c:	77fb      	strb	r3, [r7, #31]
 800904e:	e03e      	b.n	80090ce <UART_SetConfig+0x34a>
 8009050:	efff69f3 	.word	0xefff69f3
 8009054:	40011000 	.word	0x40011000
 8009058:	40023800 	.word	0x40023800
 800905c:	40004400 	.word	0x40004400
 8009060:	40004800 	.word	0x40004800
 8009064:	40004c00 	.word	0x40004c00
 8009068:	40005000 	.word	0x40005000
 800906c:	40011400 	.word	0x40011400
 8009070:	40007800 	.word	0x40007800
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a94      	ldr	r2, [pc, #592]	; (80092cc <UART_SetConfig+0x548>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d125      	bne.n	80090ca <UART_SetConfig+0x346>
 800907e:	4b94      	ldr	r3, [pc, #592]	; (80092d0 <UART_SetConfig+0x54c>)
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009088:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800908c:	d017      	beq.n	80090be <UART_SetConfig+0x33a>
 800908e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009092:	d817      	bhi.n	80090c4 <UART_SetConfig+0x340>
 8009094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009098:	d00b      	beq.n	80090b2 <UART_SetConfig+0x32e>
 800909a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800909e:	d811      	bhi.n	80090c4 <UART_SetConfig+0x340>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d003      	beq.n	80090ac <UART_SetConfig+0x328>
 80090a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090a8:	d006      	beq.n	80090b8 <UART_SetConfig+0x334>
 80090aa:	e00b      	b.n	80090c4 <UART_SetConfig+0x340>
 80090ac:	2300      	movs	r3, #0
 80090ae:	77fb      	strb	r3, [r7, #31]
 80090b0:	e00d      	b.n	80090ce <UART_SetConfig+0x34a>
 80090b2:	2302      	movs	r3, #2
 80090b4:	77fb      	strb	r3, [r7, #31]
 80090b6:	e00a      	b.n	80090ce <UART_SetConfig+0x34a>
 80090b8:	2304      	movs	r3, #4
 80090ba:	77fb      	strb	r3, [r7, #31]
 80090bc:	e007      	b.n	80090ce <UART_SetConfig+0x34a>
 80090be:	2308      	movs	r3, #8
 80090c0:	77fb      	strb	r3, [r7, #31]
 80090c2:	e004      	b.n	80090ce <UART_SetConfig+0x34a>
 80090c4:	2310      	movs	r3, #16
 80090c6:	77fb      	strb	r3, [r7, #31]
 80090c8:	e001      	b.n	80090ce <UART_SetConfig+0x34a>
 80090ca:	2310      	movs	r3, #16
 80090cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d6:	d17f      	bne.n	80091d8 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 80090d8:	7ffb      	ldrb	r3, [r7, #31]
 80090da:	2b08      	cmp	r3, #8
 80090dc:	d85c      	bhi.n	8009198 <UART_SetConfig+0x414>
 80090de:	a201      	add	r2, pc, #4	; (adr r2, 80090e4 <UART_SetConfig+0x360>)
 80090e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e4:	08009109 	.word	0x08009109
 80090e8:	08009129 	.word	0x08009129
 80090ec:	08009149 	.word	0x08009149
 80090f0:	08009199 	.word	0x08009199
 80090f4:	08009161 	.word	0x08009161
 80090f8:	08009199 	.word	0x08009199
 80090fc:	08009199 	.word	0x08009199
 8009100:	08009199 	.word	0x08009199
 8009104:	08009181 	.word	0x08009181
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009108:	f7fd f996 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800910c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	005a      	lsls	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	085b      	lsrs	r3, r3, #1
 8009118:	441a      	add	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009122:	b29b      	uxth	r3, r3
 8009124:	61bb      	str	r3, [r7, #24]
        break;
 8009126:	e03a      	b.n	800919e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009128:	f7fd f99a 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 800912c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	005a      	lsls	r2, r3, #1
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	441a      	add	r2, r3
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009142:	b29b      	uxth	r3, r3
 8009144:	61bb      	str	r3, [r7, #24]
        break;
 8009146:	e02a      	b.n	800919e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	085a      	lsrs	r2, r3, #1
 800914e:	4b61      	ldr	r3, [pc, #388]	; (80092d4 <UART_SetConfig+0x550>)
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6852      	ldr	r2, [r2, #4]
 8009156:	fbb3 f3f2 	udiv	r3, r3, r2
 800915a:	b29b      	uxth	r3, r3
 800915c:	61bb      	str	r3, [r7, #24]
        break;
 800915e:	e01e      	b.n	800919e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009160:	f7fd f87c 	bl	800625c <HAL_RCC_GetSysClockFreq>
 8009164:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	005a      	lsls	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	441a      	add	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	fbb2 f3f3 	udiv	r3, r2, r3
 800917a:	b29b      	uxth	r3, r3
 800917c:	61bb      	str	r3, [r7, #24]
        break;
 800917e:	e00e      	b.n	800919e <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	085b      	lsrs	r3, r3, #1
 8009186:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009192:	b29b      	uxth	r3, r3
 8009194:	61bb      	str	r3, [r7, #24]
        break;
 8009196:	e002      	b.n	800919e <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	75fb      	strb	r3, [r7, #23]
        break;
 800919c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b0f      	cmp	r3, #15
 80091a2:	d916      	bls.n	80091d2 <UART_SetConfig+0x44e>
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091aa:	d212      	bcs.n	80091d2 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	f023 030f 	bic.w	r3, r3, #15
 80091b4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	085b      	lsrs	r3, r3, #1
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	f003 0307 	and.w	r3, r3, #7
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	897b      	ldrh	r3, [r7, #10]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	897a      	ldrh	r2, [r7, #10]
 80091ce:	60da      	str	r2, [r3, #12]
 80091d0:	e070      	b.n	80092b4 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	75fb      	strb	r3, [r7, #23]
 80091d6:	e06d      	b.n	80092b4 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 80091d8:	7ffb      	ldrb	r3, [r7, #31]
 80091da:	2b08      	cmp	r3, #8
 80091dc:	d859      	bhi.n	8009292 <UART_SetConfig+0x50e>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0x460>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009227 	.word	0x08009227
 80091ec:	08009245 	.word	0x08009245
 80091f0:	08009293 	.word	0x08009293
 80091f4:	0800925d 	.word	0x0800925d
 80091f8:	08009293 	.word	0x08009293
 80091fc:	08009293 	.word	0x08009293
 8009200:	08009293 	.word	0x08009293
 8009204:	0800927b 	.word	0x0800927b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009208:	f7fd f916 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800920c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	085a      	lsrs	r2, r3, #1
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	441a      	add	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	b29b      	uxth	r3, r3
 8009222:	61bb      	str	r3, [r7, #24]
        break;
 8009224:	e038      	b.n	8009298 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009226:	f7fd f91b 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 800922a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	085a      	lsrs	r2, r3, #1
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	441a      	add	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	fbb2 f3f3 	udiv	r3, r2, r3
 800923e:	b29b      	uxth	r3, r3
 8009240:	61bb      	str	r3, [r7, #24]
        break;
 8009242:	e029      	b.n	8009298 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	085a      	lsrs	r2, r3, #1
 800924a:	4b23      	ldr	r3, [pc, #140]	; (80092d8 <UART_SetConfig+0x554>)
 800924c:	4413      	add	r3, r2
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	6852      	ldr	r2, [r2, #4]
 8009252:	fbb3 f3f2 	udiv	r3, r3, r2
 8009256:	b29b      	uxth	r3, r3
 8009258:	61bb      	str	r3, [r7, #24]
        break;
 800925a:	e01d      	b.n	8009298 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800925c:	f7fc fffe 	bl	800625c <HAL_RCC_GetSysClockFreq>
 8009260:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	085a      	lsrs	r2, r3, #1
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	441a      	add	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	fbb2 f3f3 	udiv	r3, r2, r3
 8009274:	b29b      	uxth	r3, r3
 8009276:	61bb      	str	r3, [r7, #24]
        break;
 8009278:	e00e      	b.n	8009298 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	fbb2 f3f3 	udiv	r3, r2, r3
 800928c:	b29b      	uxth	r3, r3
 800928e:	61bb      	str	r3, [r7, #24]
        break;
 8009290:	e002      	b.n	8009298 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
        break;
 8009296:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b0f      	cmp	r3, #15
 800929c:	d908      	bls.n	80092b0 <UART_SetConfig+0x52c>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092a4:	d204      	bcs.n	80092b0 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	60da      	str	r2, [r3, #12]
 80092ae:	e001      	b.n	80092b4 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80092c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3720      	adds	r7, #32
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40007c00 	.word	0x40007c00
 80092d0:	40023800 	.word	0x40023800
 80092d4:	01e84800 	.word	0x01e84800
 80092d8:	00f42400 	.word	0x00f42400

080092dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	f003 0310 	and.w	r3, r3, #16
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d01a      	beq.n	80093f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093da:	d10a      	bne.n	80093f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00a      	beq.n	8009414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	430a      	orrs	r2, r1
 8009412:	605a      	str	r2, [r3, #4]
  }
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af02      	add	r7, sp, #8
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800942e:	f7fa ff77 	bl	8004320 <HAL_GetTick>
 8009432:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 0308 	and.w	r3, r3, #8
 800943e:	2b08      	cmp	r3, #8
 8009440:	d10e      	bne.n	8009460 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f814 	bl	800947e <UART_WaitOnFlagUntilTimeout>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800945c:	2303      	movs	r3, #3
 800945e:	e00a      	b.n	8009476 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2220      	movs	r2, #32
 8009464:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	60f8      	str	r0, [r7, #12]
 8009486:	60b9      	str	r1, [r7, #8]
 8009488:	603b      	str	r3, [r7, #0]
 800948a:	4613      	mov	r3, r2
 800948c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800948e:	e05d      	b.n	800954c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d059      	beq.n	800954c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009498:	f7fa ff42 	bl	8004320 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d302      	bcc.n	80094ae <UART_WaitOnFlagUntilTimeout+0x30>
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d11b      	bne.n	80094e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2220      	movs	r2, #32
 80094d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2220      	movs	r2, #32
 80094d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e042      	b.n	800956c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d02b      	beq.n	800954c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009502:	d123      	bne.n	800954c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800950c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800951c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689a      	ldr	r2, [r3, #8]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0201 	bic.w	r2, r2, #1
 800952c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2220      	movs	r2, #32
 8009532:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2220      	movs	r2, #32
 8009538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e00f      	b.n	800956c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	69da      	ldr	r2, [r3, #28]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4013      	ands	r3, r2
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	429a      	cmp	r2, r3
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	429a      	cmp	r2, r3
 8009568:	d092      	beq.n	8009490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009574:	b084      	sub	sp, #16
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
 800957e:	f107 001c 	add.w	r0, r7, #28
 8009582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009588:	2b01      	cmp	r3, #1
 800958a:	d126      	bne.n	80095da <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	4b23      	ldr	r3, [pc, #140]	; (800962c <USB_CoreInit+0xb8>)
 800959e:	4013      	ands	r3, r2
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	f043 0210 	orr.w	r2, r3, #16
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d105      	bne.n	80095ce <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fa52 	bl	8009a78 <USB_CoreReset>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]
 80095d8:	e010      	b.n	80095fc <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fa46 	bl	8009a78 <USB_CoreReset>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d10b      	bne.n	800961a <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f043 0206 	orr.w	r2, r3, #6
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f043 0220 	orr.w	r2, r3, #32
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009626:	b004      	add	sp, #16
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	ffbdffbf 	.word	0xffbdffbf

08009630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f023 0201 	bic.w	r2, r3, #1
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	370c      	adds	r7, #12
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
 800965a:	460b      	mov	r3, r1
 800965c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d106      	bne.n	800967e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	60da      	str	r2, [r3, #12]
 800967c:	e00b      	b.n	8009696 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800967e:	78fb      	ldrb	r3, [r7, #3]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d106      	bne.n	8009692 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	60da      	str	r2, [r3, #12]
 8009690:	e001      	b.n	8009696 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e003      	b.n	800969e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009696:	2032      	movs	r0, #50	; 0x32
 8009698:	f7fa fe4e 	bl	8004338 <HAL_Delay>

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096a8:	b084      	sub	sp, #16
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b086      	sub	sp, #24
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80096b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096c2:	2300      	movs	r3, #0
 80096c4:	613b      	str	r3, [r7, #16]
 80096c6:	e009      	b.n	80096dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	3340      	adds	r3, #64	; 0x40
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	4413      	add	r3, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	3301      	adds	r3, #1
 80096da:	613b      	str	r3, [r7, #16]
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b0e      	cmp	r3, #14
 80096e0:	d9f2      	bls.n	80096c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d11c      	bne.n	8009722 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096f6:	f043 0302 	orr.w	r3, r3, #2
 80096fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009700:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	601a      	str	r2, [r3, #0]
 8009720:	e005      	b.n	800972e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009726:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009734:	461a      	mov	r2, r3
 8009736:	2300      	movs	r3, #0
 8009738:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009740:	4619      	mov	r1, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009748:	461a      	mov	r2, r3
 800974a:	680b      	ldr	r3, [r1, #0]
 800974c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2b01      	cmp	r3, #1
 8009752:	d10c      	bne.n	800976e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	2b00      	cmp	r3, #0
 8009758:	d104      	bne.n	8009764 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800975a:	2100      	movs	r1, #0
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f959 	bl	8009a14 <USB_SetDevSpeed>
 8009762:	e018      	b.n	8009796 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009764:	2101      	movs	r1, #1
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 f954 	bl	8009a14 <USB_SetDevSpeed>
 800976c:	e013      	b.n	8009796 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800976e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009770:	2b03      	cmp	r3, #3
 8009772:	d10c      	bne.n	800978e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	2b00      	cmp	r3, #0
 8009778:	d104      	bne.n	8009784 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800977a:	2100      	movs	r1, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f949 	bl	8009a14 <USB_SetDevSpeed>
 8009782:	e008      	b.n	8009796 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009784:	2101      	movs	r1, #1
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f944 	bl	8009a14 <USB_SetDevSpeed>
 800978c:	e003      	b.n	8009796 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800978e:	2103      	movs	r1, #3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f93f 	bl	8009a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009796:	2110      	movs	r1, #16
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f8f3 	bl	8009984 <USB_FlushTxFifo>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d001      	beq.n	80097a8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f911 	bl	80099d0 <USB_FlushRxFifo>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097be:	461a      	mov	r2, r3
 80097c0:	2300      	movs	r3, #0
 80097c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	461a      	mov	r2, r3
 80097cc:	2300      	movs	r3, #0
 80097ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d6:	461a      	mov	r2, r3
 80097d8:	2300      	movs	r3, #0
 80097da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097dc:	2300      	movs	r3, #0
 80097de:	613b      	str	r3, [r7, #16]
 80097e0:	e043      	b.n	800986a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f8:	d118      	bne.n	800982c <USB_DevInit+0x184>
    {
      if (i == 0U)
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800980c:	461a      	mov	r2, r3
 800980e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009812:	6013      	str	r3, [r2, #0]
 8009814:	e013      	b.n	800983e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	015a      	lsls	r2, r3, #5
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009822:	461a      	mov	r2, r3
 8009824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	e008      	b.n	800983e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009838:	461a      	mov	r2, r3
 800983a:	2300      	movs	r3, #0
 800983c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	015a      	lsls	r2, r3, #5
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4413      	add	r3, r2
 8009846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984a:	461a      	mov	r2, r3
 800984c:	2300      	movs	r3, #0
 800984e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	461a      	mov	r2, r3
 800985e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3301      	adds	r3, #1
 8009868:	613b      	str	r3, [r7, #16]
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	693a      	ldr	r2, [r7, #16]
 800986e:	429a      	cmp	r2, r3
 8009870:	d3b7      	bcc.n	80097e2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009872:	2300      	movs	r3, #0
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	e043      	b.n	8009900 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800988a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800988e:	d118      	bne.n	80098c2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10a      	bne.n	80098ac <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a2:	461a      	mov	r2, r3
 80098a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	e013      	b.n	80098d4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	015a      	lsls	r2, r3, #5
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b8:	461a      	mov	r2, r3
 80098ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098be:	6013      	str	r3, [r2, #0]
 80098c0:	e008      	b.n	80098d4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ce:	461a      	mov	r2, r3
 80098d0:	2300      	movs	r3, #0
 80098d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	461a      	mov	r2, r3
 80098e2:	2300      	movs	r3, #0
 80098e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	461a      	mov	r2, r3
 80098f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	3301      	adds	r3, #1
 80098fe:	613b      	str	r3, [r7, #16]
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	429a      	cmp	r2, r3
 8009906:	d3b7      	bcc.n	8009878 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800991a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800992a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f043 0210 	orr.w	r2, r3, #16
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <USB_DevInit+0x2d4>)
 8009942:	4313      	orrs	r3, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800994a:	2b00      	cmp	r3, #0
 800994c:	d005      	beq.n	800995a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	f043 0208 	orr.w	r2, r3, #8
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800995a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800995c:	2b01      	cmp	r3, #1
 800995e:	d105      	bne.n	800996c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	699a      	ldr	r2, [r3, #24]
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <USB_DevInit+0x2d8>)
 8009966:	4313      	orrs	r3, r2
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800996c:	7dfb      	ldrb	r3, [r7, #23]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009978:	b004      	add	sp, #16
 800997a:	4770      	bx	lr
 800997c:	803c3800 	.word	0x803c3800
 8009980:	40000004 	.word	0x40000004

08009984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009984:	b480      	push	{r7}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	019b      	lsls	r3, r3, #6
 8009996:	f043 0220 	orr.w	r2, r3, #32
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <USB_FlushTxFifo+0x48>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d901      	bls.n	80099b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e006      	b.n	80099be <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 0320 	and.w	r3, r3, #32
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d0f0      	beq.n	800999e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	00030d40 	.word	0x00030d40

080099d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2210      	movs	r2, #16
 80099e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	4a09      	ldr	r2, [pc, #36]	; (8009a10 <USB_FlushRxFifo+0x40>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d901      	bls.n	80099f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e006      	b.n	8009a02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f003 0310 	and.w	r3, r3, #16
 80099fc:	2b10      	cmp	r3, #16
 80099fe:	d0f0      	beq.n	80099e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	00030d40 	.word	0x00030d40

08009a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	68f9      	ldr	r1, [r7, #12]
 8009a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a34:	4313      	orrs	r3, r2
 8009a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a60:	f043 0302 	orr.w	r3, r3, #2
 8009a64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009a66:	2003      	movs	r0, #3
 8009a68:	f7fa fc66 	bl	8004338 <HAL_Delay>

  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	3301      	adds	r3, #1
 8009a88:	60fb      	str	r3, [r7, #12]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4a13      	ldr	r2, [pc, #76]	; (8009adc <USB_CoreReset+0x64>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e01b      	b.n	8009ace <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	daf2      	bge.n	8009a84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f043 0201 	orr.w	r2, r3, #1
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a09      	ldr	r2, [pc, #36]	; (8009adc <USB_CoreReset+0x64>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d901      	bls.n	8009ac0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e006      	b.n	8009ace <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d0f0      	beq.n	8009aae <USB_CoreReset+0x36>

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	00030d40 	.word	0x00030d40

08009ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009ae4:	bf00      	nop
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
	...

08009af0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af6:	f3ef 8305 	mrs	r3, IPSR
 8009afa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009afc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10f      	bne.n	8009b22 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b02:	f3ef 8310 	mrs	r3, PRIMASK
 8009b06:	607b      	str	r3, [r7, #4]
  return(result);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d105      	bne.n	8009b1a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b12:	603b      	str	r3, [r7, #0]
  return(result);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <osKernelInitialize+0x3a>
 8009b1a:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <osKernelInitialize+0x64>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d103      	bne.n	8009b2a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009b22:	f06f 0305 	mvn.w	r3, #5
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e00c      	b.n	8009b44 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <osKernelInitialize+0x64>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b32:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <osKernelInitialize+0x64>)
 8009b34:	2201      	movs	r2, #1
 8009b36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	e002      	b.n	8009b44 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b42:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009b44:	68fb      	ldr	r3, [r7, #12]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3714      	adds	r7, #20
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000310 	.word	0x20000310

08009b58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b5e:	f3ef 8305 	mrs	r3, IPSR
 8009b62:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10f      	bne.n	8009b8a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8009b6e:	607b      	str	r3, [r7, #4]
  return(result);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d105      	bne.n	8009b82 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b76:	f3ef 8311 	mrs	r3, BASEPRI
 8009b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d007      	beq.n	8009b92 <osKernelStart+0x3a>
 8009b82:	4b0f      	ldr	r3, [pc, #60]	; (8009bc0 <osKernelStart+0x68>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d103      	bne.n	8009b92 <osKernelStart+0x3a>
    stat = osErrorISR;
 8009b8a:	f06f 0305 	mvn.w	r3, #5
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e010      	b.n	8009bb4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b92:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <osKernelStart+0x68>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d109      	bne.n	8009bae <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b9a:	f7ff ffa1 	bl	8009ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <osKernelStart+0x68>)
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ba4:	f001 f9aa 	bl	800aefc <vTaskStartScheduler>
      stat = osOK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e002      	b.n	8009bb4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009bae:	f04f 33ff 	mov.w	r3, #4294967295
 8009bb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000310 	.word	0x20000310

08009bc4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bca:	f3ef 8305 	mrs	r3, IPSR
 8009bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10f      	bne.n	8009bf6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8009bda:	607b      	str	r3, [r7, #4]
  return(result);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d105      	bne.n	8009bee <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009be2:	f3ef 8311 	mrs	r3, BASEPRI
 8009be6:	603b      	str	r3, [r7, #0]
  return(result);
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <osKernelGetTickCount+0x3a>
 8009bee:	4b08      	ldr	r3, [pc, #32]	; (8009c10 <osKernelGetTickCount+0x4c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d103      	bne.n	8009bfe <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8009bf6:	f001 faa9 	bl	800b14c <xTaskGetTickCountFromISR>
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	e002      	b.n	8009c04 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8009bfe:	f001 fa95 	bl	800b12c <xTaskGetTickCount>
 8009c02:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8009c04:	68fb      	ldr	r3, [r7, #12]
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20000310 	.word	0x20000310

08009c14 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8009c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b090      	sub	sp, #64	; 0x40
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c38:	f3ef 8305 	mrs	r3, IPSR
 8009c3c:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c3e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 808f 	bne.w	8009d64 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c46:	f3ef 8310 	mrs	r3, PRIMASK
 8009c4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c52:	f3ef 8311 	mrs	r3, BASEPRI
 8009c56:	617b      	str	r3, [r7, #20]
  return(result);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <osThreadNew+0x3e>
 8009c5e:	4b44      	ldr	r3, [pc, #272]	; (8009d70 <osThreadNew+0x148>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d07e      	beq.n	8009d64 <osThreadNew+0x13c>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d07b      	beq.n	8009d64 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009c70:	2318      	movs	r3, #24
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009c78:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d045      	beq.n	8009d10 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <osThreadNew+0x6a>
        name = attr->name;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d002      	beq.n	8009ca0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d008      	beq.n	8009cb8 <osThreadNew+0x90>
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	2b38      	cmp	r3, #56	; 0x38
 8009caa:	d805      	bhi.n	8009cb8 <osThreadNew+0x90>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <osThreadNew+0x94>
        return (NULL);
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e054      	b.n	8009d66 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	089b      	lsrs	r3, r3, #2
 8009cca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00e      	beq.n	8009cf2 <osThreadNew+0xca>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b5b      	cmp	r3, #91	; 0x5b
 8009cda:	d90a      	bls.n	8009cf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	695b      	ldr	r3, [r3, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <osThreadNew+0xca>
        mem = 1;
 8009cec:	2301      	movs	r3, #1
 8009cee:	623b      	str	r3, [r7, #32]
 8009cf0:	e010      	b.n	8009d14 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10c      	bne.n	8009d14 <osThreadNew+0xec>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d108      	bne.n	8009d14 <osThreadNew+0xec>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d104      	bne.n	8009d14 <osThreadNew+0xec>
          mem = 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	623b      	str	r3, [r7, #32]
 8009d0e:	e001      	b.n	8009d14 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d110      	bne.n	8009d3c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009d22:	9202      	str	r2, [sp, #8]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 fe7f 	bl	800aa34 <xTaskCreateStatic>
 8009d36:	4603      	mov	r3, r0
 8009d38:	613b      	str	r3, [r7, #16]
 8009d3a:	e013      	b.n	8009d64 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d110      	bne.n	8009d64 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	f107 0310 	add.w	r3, r7, #16
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 fed0 	bl	800aafa <xTaskCreate>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d001      	beq.n	8009d64 <osThreadNew+0x13c>
          hTask = NULL;
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009d64:	693b      	ldr	r3, [r7, #16]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3730      	adds	r7, #48	; 0x30
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	20000310 	.word	0x20000310

08009d74 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d7c:	f3ef 8305 	mrs	r3, IPSR
 8009d80:	613b      	str	r3, [r7, #16]
  return(result);
 8009d82:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10f      	bne.n	8009da8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d88:	f3ef 8310 	mrs	r3, PRIMASK
 8009d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d94:	f3ef 8311 	mrs	r3, BASEPRI
 8009d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d007      	beq.n	8009db0 <osDelay+0x3c>
 8009da0:	4b0a      	ldr	r3, [pc, #40]	; (8009dcc <osDelay+0x58>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d103      	bne.n	8009db0 <osDelay+0x3c>
    stat = osErrorISR;
 8009da8:	f06f 0305 	mvn.w	r3, #5
 8009dac:	617b      	str	r3, [r7, #20]
 8009dae:	e007      	b.n	8009dc0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 f868 	bl	800ae90 <vTaskDelay>
    }
  }

  return (stat);
 8009dc0:	697b      	ldr	r3, [r7, #20]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3718      	adds	r7, #24
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000310 	.word	0x20000310

08009dd0 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b088      	sub	sp, #32
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dd8:	f3ef 8305 	mrs	r3, IPSR
 8009ddc:	617b      	str	r3, [r7, #20]
  return(result);
 8009dde:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d10f      	bne.n	8009e04 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de4:	f3ef 8310 	mrs	r3, PRIMASK
 8009de8:	613b      	str	r3, [r7, #16]
  return(result);
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d105      	bne.n	8009dfc <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009df0:	f3ef 8311 	mrs	r3, BASEPRI
 8009df4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d007      	beq.n	8009e0c <osDelayUntil+0x3c>
 8009dfc:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <osDelayUntil+0x7c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d103      	bne.n	8009e0c <osDelayUntil+0x3c>
    stat = osErrorISR;
 8009e04:	f06f 0305 	mvn.w	r3, #5
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e019      	b.n	8009e40 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8009e10:	f001 f98c 	bl	800b12c <xTaskGetTickCount>
 8009e14:	4603      	mov	r3, r0
 8009e16:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d009      	beq.n	8009e3a <osDelayUntil+0x6a>
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	db06      	blt.n	8009e3a <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	69b9      	ldr	r1, [r7, #24]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 ffa8 	bl	800ad88 <vTaskDelayUntil>
 8009e38:	e002      	b.n	8009e40 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009e3a:	f06f 0303 	mvn.w	r3, #3
 8009e3e:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8009e40:	69fb      	ldr	r3, [r7, #28]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000310 	.word	0x20000310

08009e50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4a07      	ldr	r2, [pc, #28]	; (8009e7c <vApplicationGetIdleTaskMemory+0x2c>)
 8009e60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vApplicationGetIdleTaskMemory+0x30>)
 8009e66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2280      	movs	r2, #128	; 0x80
 8009e6c:	601a      	str	r2, [r3, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	20000314 	.word	0x20000314
 8009e80:	20000370 	.word	0x20000370

08009e84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4a07      	ldr	r2, [pc, #28]	; (8009eb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <vApplicationGetTimerTaskMemory+0x30>)
 8009e9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ea2:	601a      	str	r2, [r3, #0]
}
 8009ea4:	bf00      	nop
 8009ea6:	3714      	adds	r7, #20
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	20000570 	.word	0x20000570
 8009eb4:	200005cc 	.word	0x200005cc

08009eb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f103 0208 	add.w	r2, r3, #8
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f103 0208 	add.w	r2, r3, #8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f103 0208 	add.w	r2, r3, #8
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b083      	sub	sp, #12
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f12:	b480      	push	{r7}
 8009f14:	b085      	sub	sp, #20
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	1c5a      	adds	r2, r3, #1
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
}
 8009f4e:	bf00      	nop
 8009f50:	3714      	adds	r7, #20
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b085      	sub	sp, #20
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
 8009f62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f70:	d103      	bne.n	8009f7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e00c      	b.n	8009f94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e002      	b.n	8009f88 <vListInsert+0x2e>
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	60fb      	str	r3, [r7, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d2f6      	bcs.n	8009f82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	685a      	ldr	r2, [r3, #4]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	683a      	ldr	r2, [r7, #0]
 8009fa2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6892      	ldr	r2, [r2, #8]
 8009fe2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6852      	ldr	r2, [r2, #4]
 8009fec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d103      	bne.n	800a000 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689a      	ldr	r2, [r3, #8]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	1e5a      	subs	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10c      	bne.n	800a04e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a038:	b672      	cpsid	i
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	b662      	cpsie	i
 800a048:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a04e:	f002 f9f5 	bl	800c43c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a05e:	fb01 f303 	mul.w	r3, r1, r3
 800a062:	441a      	add	r2, r3
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2200      	movs	r2, #0
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07e:	3b01      	subs	r3, #1
 800a080:	68f9      	ldr	r1, [r7, #12]
 800a082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a084:	fb01 f303 	mul.w	r3, r1, r3
 800a088:	441a      	add	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	22ff      	movs	r2, #255	; 0xff
 800a092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d114      	bne.n	800a0ce <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d01a      	beq.n	800a0e2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3310      	adds	r3, #16
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f9cd 	bl	800b450 <xTaskRemoveFromEventList>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d012      	beq.n	800a0e2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <xQueueGenericReset+0xd0>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	e009      	b.n	800a0e2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3310      	adds	r3, #16
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff fef0 	bl	8009eb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff feeb 	bl	8009eb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0e2:	f002 f9df 	bl	800c4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0e6:	2301      	movs	r3, #1
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	e000ed04 	.word	0xe000ed04

0800a0f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b08e      	sub	sp, #56	; 0x38
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10c      	bne.n	800a122 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	b672      	cpsid	i
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	b662      	cpsie	i
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10c      	bne.n	800a142 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	b672      	cpsid	i
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	b662      	cpsie	i
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <xQueueGenericCreateStatic+0x5a>
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <xQueueGenericCreateStatic+0x5e>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueGenericCreateStatic+0x60>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10c      	bne.n	800a172 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	b672      	cpsid	i
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	b662      	cpsie	i
 800a16c:	623b      	str	r3, [r7, #32]
}
 800a16e:	bf00      	nop
 800a170:	e7fe      	b.n	800a170 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <xQueueGenericCreateStatic+0x8a>
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <xQueueGenericCreateStatic+0x8e>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueGenericCreateStatic+0x90>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10c      	bne.n	800a1a2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	b672      	cpsid	i
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	b662      	cpsie	i
 800a19c:	61fb      	str	r3, [r7, #28]
}
 800a19e:	bf00      	nop
 800a1a0:	e7fe      	b.n	800a1a0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1a2:	2350      	movs	r3, #80	; 0x50
 800a1a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	2b50      	cmp	r3, #80	; 0x50
 800a1aa:	d00c      	beq.n	800a1c6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	b672      	cpsid	i
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	b662      	cpsie	i
 800a1c0:	61bb      	str	r3, [r7, #24]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	68b9      	ldr	r1, [r7, #8]
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f000 f805 	bl	800a1f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3730      	adds	r7, #48	; 0x30
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d103      	bne.n	800a214 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	69ba      	ldr	r2, [r7, #24]
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	e002      	b.n	800a21a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a226:	2101      	movs	r1, #1
 800a228:	69b8      	ldr	r0, [r7, #24]
 800a22a:	f7ff fef9 	bl	800a020 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	78fa      	ldrb	r2, [r7, #3]
 800a232:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
	...

0800a240 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08e      	sub	sp, #56	; 0x38
 800a244:	af00      	add	r7, sp, #0
 800a246:	60f8      	str	r0, [r7, #12]
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a24e:	2300      	movs	r3, #0
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10c      	bne.n	800a276 <xQueueGenericSend+0x36>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a260:	b672      	cpsid	i
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	b662      	cpsie	i
 800a270:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d103      	bne.n	800a284 <xQueueGenericSend+0x44>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d101      	bne.n	800a288 <xQueueGenericSend+0x48>
 800a284:	2301      	movs	r3, #1
 800a286:	e000      	b.n	800a28a <xQueueGenericSend+0x4a>
 800a288:	2300      	movs	r3, #0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d10c      	bne.n	800a2a8 <xQueueGenericSend+0x68>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	b672      	cpsid	i
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	b662      	cpsie	i
 800a2a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d103      	bne.n	800a2b6 <xQueueGenericSend+0x76>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d101      	bne.n	800a2ba <xQueueGenericSend+0x7a>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <xQueueGenericSend+0x7c>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10c      	bne.n	800a2da <xQueueGenericSend+0x9a>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	b672      	cpsid	i
 800a2c6:	f383 8811 	msr	BASEPRI, r3
 800a2ca:	f3bf 8f6f 	isb	sy
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	b662      	cpsie	i
 800a2d4:	623b      	str	r3, [r7, #32]
}
 800a2d6:	bf00      	nop
 800a2d8:	e7fe      	b.n	800a2d8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2da:	f001 fa7f 	bl	800b7dc <xTaskGetSchedulerState>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d102      	bne.n	800a2ea <xQueueGenericSend+0xaa>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <xQueueGenericSend+0xae>
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e000      	b.n	800a2f0 <xQueueGenericSend+0xb0>
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10c      	bne.n	800a30e <xQueueGenericSend+0xce>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	61fb      	str	r3, [r7, #28]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a30e:	f002 f895 	bl	800c43c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d302      	bcc.n	800a324 <xQueueGenericSend+0xe4>
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2b02      	cmp	r3, #2
 800a322:	d129      	bne.n	800a378 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a324:	683a      	ldr	r2, [r7, #0]
 800a326:	68b9      	ldr	r1, [r7, #8]
 800a328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a32a:	f000 fa15 	bl	800a758 <prvCopyDataToQueue>
 800a32e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d010      	beq.n	800a35a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	3324      	adds	r3, #36	; 0x24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f001 f887 	bl	800b450 <xTaskRemoveFromEventList>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d013      	beq.n	800a370 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a348:	4b3f      	ldr	r3, [pc, #252]	; (800a448 <xQueueGenericSend+0x208>)
 800a34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f3bf 8f4f 	dsb	sy
 800a354:	f3bf 8f6f 	isb	sy
 800a358:	e00a      	b.n	800a370 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d007      	beq.n	800a370 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a360:	4b39      	ldr	r3, [pc, #228]	; (800a448 <xQueueGenericSend+0x208>)
 800a362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	f3bf 8f4f 	dsb	sy
 800a36c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a370:	f002 f898 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a374:	2301      	movs	r3, #1
 800a376:	e063      	b.n	800a440 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d103      	bne.n	800a386 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a37e:	f002 f891 	bl	800c4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a382:	2300      	movs	r3, #0
 800a384:	e05c      	b.n	800a440 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d106      	bne.n	800a39a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a38c:	f107 0314 	add.w	r3, r7, #20
 800a390:	4618      	mov	r0, r3
 800a392:	f001 f8c3 	bl	800b51c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a396:	2301      	movs	r3, #1
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a39a:	f002 f883 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a39e:	f000 fe17 	bl	800afd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3a2:	f002 f84b 	bl	800c43c <vPortEnterCritical>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3ac:	b25b      	sxtb	r3, r3
 800a3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b2:	d103      	bne.n	800a3bc <xQueueGenericSend+0x17c>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3c2:	b25b      	sxtb	r3, r3
 800a3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c8:	d103      	bne.n	800a3d2 <xQueueGenericSend+0x192>
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d2:	f002 f867 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3d6:	1d3a      	adds	r2, r7, #4
 800a3d8:	f107 0314 	add.w	r3, r7, #20
 800a3dc:	4611      	mov	r1, r2
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 f8b2 	bl	800b548 <xTaskCheckForTimeOut>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d124      	bne.n	800a434 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ec:	f000 faac 	bl	800a948 <prvIsQueueFull>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d018      	beq.n	800a428 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f8:	3310      	adds	r3, #16
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 ffd2 	bl	800b3a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a406:	f000 fa37 	bl	800a878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a40a:	f000 fdef 	bl	800afec <xTaskResumeAll>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	f47f af7c 	bne.w	800a30e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a416:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <xQueueGenericSend+0x208>)
 800a418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a41c:	601a      	str	r2, [r3, #0]
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	e772      	b.n	800a30e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a42a:	f000 fa25 	bl	800a878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a42e:	f000 fddd 	bl	800afec <xTaskResumeAll>
 800a432:	e76c      	b.n	800a30e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a436:	f000 fa1f 	bl	800a878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a43a:	f000 fdd7 	bl	800afec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a43e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a440:	4618      	mov	r0, r3
 800a442:	3738      	adds	r7, #56	; 0x38
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	e000ed04 	.word	0xe000ed04

0800a44c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b08e      	sub	sp, #56	; 0x38
 800a450:	af00      	add	r7, sp, #0
 800a452:	60f8      	str	r0, [r7, #12]
 800a454:	60b9      	str	r1, [r7, #8]
 800a456:	607a      	str	r2, [r7, #4]
 800a458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10c      	bne.n	800a47e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a468:	b672      	cpsid	i
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	b662      	cpsie	i
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <xQueueGenericSendFromISR+0x40>
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <xQueueGenericSendFromISR+0x44>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <xQueueGenericSendFromISR+0x46>
 800a490:	2300      	movs	r3, #0
 800a492:	2b00      	cmp	r3, #0
 800a494:	d10c      	bne.n	800a4b0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49a:	b672      	cpsid	i
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	b662      	cpsie	i
 800a4aa:	623b      	str	r3, [r7, #32]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b02      	cmp	r3, #2
 800a4b4:	d103      	bne.n	800a4be <xQueueGenericSendFromISR+0x72>
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <xQueueGenericSendFromISR+0x76>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <xQueueGenericSendFromISR+0x78>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10c      	bne.n	800a4e2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	b672      	cpsid	i
 800a4ce:	f383 8811 	msr	BASEPRI, r3
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	f3bf 8f4f 	dsb	sy
 800a4da:	b662      	cpsie	i
 800a4dc:	61fb      	str	r3, [r7, #28]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4e2:	f002 f893 	bl	800c60c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	b672      	cpsid	i
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	b662      	cpsie	i
 800a4fe:	61ba      	str	r2, [r7, #24]
 800a500:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a502:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a50e:	429a      	cmp	r2, r3
 800a510:	d302      	bcc.n	800a518 <xQueueGenericSendFromISR+0xcc>
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d12c      	bne.n	800a572 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a528:	f000 f916 	bl	800a758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a52c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a530:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a534:	d112      	bne.n	800a55c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d016      	beq.n	800a56c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	3324      	adds	r3, #36	; 0x24
 800a542:	4618      	mov	r0, r3
 800a544:	f000 ff84 	bl	800b450 <xTaskRemoveFromEventList>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00e      	beq.n	800a56c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00b      	beq.n	800a56c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	601a      	str	r2, [r3, #0]
 800a55a:	e007      	b.n	800a56c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a55c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a560:	3301      	adds	r3, #1
 800a562:	b2db      	uxtb	r3, r3
 800a564:	b25a      	sxtb	r2, r3
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a56c:	2301      	movs	r3, #1
 800a56e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a570:	e001      	b.n	800a576 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a572:	2300      	movs	r3, #0
 800a574:	637b      	str	r3, [r7, #52]	; 0x34
 800a576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a578:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a580:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a584:	4618      	mov	r0, r3
 800a586:	3738      	adds	r7, #56	; 0x38
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08c      	sub	sp, #48	; 0x30
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a598:	2300      	movs	r3, #0
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10c      	bne.n	800a5c0 <xQueueReceive+0x34>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	b672      	cpsid	i
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	b662      	cpsie	i
 800a5ba:	623b      	str	r3, [r7, #32]
}
 800a5bc:	bf00      	nop
 800a5be:	e7fe      	b.n	800a5be <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <xQueueReceive+0x42>
 800a5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <xQueueReceive+0x46>
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e000      	b.n	800a5d4 <xQueueReceive+0x48>
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d10c      	bne.n	800a5f2 <xQueueReceive+0x66>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5dc:	b672      	cpsid	i
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	b662      	cpsie	i
 800a5ec:	61fb      	str	r3, [r7, #28]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5f2:	f001 f8f3 	bl	800b7dc <xTaskGetSchedulerState>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d102      	bne.n	800a602 <xQueueReceive+0x76>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <xQueueReceive+0x7a>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <xQueueReceive+0x7c>
 800a606:	2300      	movs	r3, #0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10c      	bne.n	800a626 <xQueueReceive+0x9a>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	b672      	cpsid	i
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	b662      	cpsie	i
 800a620:	61bb      	str	r3, [r7, #24]
}
 800a622:	bf00      	nop
 800a624:	e7fe      	b.n	800a624 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a626:	f001 ff09 	bl	800c43c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	2b00      	cmp	r3, #0
 800a634:	d01f      	beq.n	800a676 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a63a:	f000 f8f7 	bl	800a82c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a640:	1e5a      	subs	r2, r3, #1
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00f      	beq.n	800a66e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	3310      	adds	r3, #16
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fefc 	bl	800b450 <xTaskRemoveFromEventList>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d007      	beq.n	800a66e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a65e:	4b3d      	ldr	r3, [pc, #244]	; (800a754 <xQueueReceive+0x1c8>)
 800a660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a66e:	f001 ff19 	bl	800c4a4 <vPortExitCritical>
				return pdPASS;
 800a672:	2301      	movs	r3, #1
 800a674:	e069      	b.n	800a74a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d103      	bne.n	800a684 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a67c:	f001 ff12 	bl	800c4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a680:	2300      	movs	r3, #0
 800a682:	e062      	b.n	800a74a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a68a:	f107 0310 	add.w	r3, r7, #16
 800a68e:	4618      	mov	r0, r3
 800a690:	f000 ff44 	bl	800b51c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a694:	2301      	movs	r3, #1
 800a696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a698:	f001 ff04 	bl	800c4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a69c:	f000 fc98 	bl	800afd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6a0:	f001 fecc 	bl	800c43c <vPortEnterCritical>
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6aa:	b25b      	sxtb	r3, r3
 800a6ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b0:	d103      	bne.n	800a6ba <xQueueReceive+0x12e>
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6c0:	b25b      	sxtb	r3, r3
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d103      	bne.n	800a6d0 <xQueueReceive+0x144>
 800a6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6d0:	f001 fee8 	bl	800c4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6d4:	1d3a      	adds	r2, r7, #4
 800a6d6:	f107 0310 	add.w	r3, r7, #16
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f000 ff33 	bl	800b548 <xTaskCheckForTimeOut>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d123      	bne.n	800a730 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6ea:	f000 f917 	bl	800a91c <prvIsQueueEmpty>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d017      	beq.n	800a724 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	3324      	adds	r3, #36	; 0x24
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 fe53 	bl	800b3a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a704:	f000 f8b8 	bl	800a878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a708:	f000 fc70 	bl	800afec <xTaskResumeAll>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d189      	bne.n	800a626 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <xQueueReceive+0x1c8>)
 800a714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a718:	601a      	str	r2, [r3, #0]
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	f3bf 8f6f 	isb	sy
 800a722:	e780      	b.n	800a626 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a726:	f000 f8a7 	bl	800a878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a72a:	f000 fc5f 	bl	800afec <xTaskResumeAll>
 800a72e:	e77a      	b.n	800a626 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a732:	f000 f8a1 	bl	800a878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a736:	f000 fc59 	bl	800afec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73c:	f000 f8ee 	bl	800a91c <prvIsQueueEmpty>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	f43f af6f 	beq.w	800a626 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3730      	adds	r7, #48	; 0x30
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	e000ed04 	.word	0xe000ed04

0800a758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a764:	2300      	movs	r3, #0
 800a766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10d      	bne.n	800a792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d14d      	bne.n	800a81a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	4618      	mov	r0, r3
 800a784:	f001 f848 	bl	800b818 <xTaskPriorityDisinherit>
 800a788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	609a      	str	r2, [r3, #8]
 800a790:	e043      	b.n	800a81a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d119      	bne.n	800a7cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6858      	ldr	r0, [r3, #4]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	68b9      	ldr	r1, [r7, #8]
 800a7a4:	f002 fa76 	bl	800cc94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d32b      	bcc.n	800a81a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	605a      	str	r2, [r3, #4]
 800a7ca:	e026      	b.n	800a81a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	68d8      	ldr	r0, [r3, #12]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	f002 fa5c 	bl	800cc94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68da      	ldr	r2, [r3, #12]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	425b      	negs	r3, r3
 800a7e6:	441a      	add	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d207      	bcs.n	800a808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	689a      	ldr	r2, [r3, #8]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a800:	425b      	negs	r3, r3
 800a802:	441a      	add	r2, r3
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d105      	bne.n	800a81a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	3b01      	subs	r3, #1
 800a818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a822:	697b      	ldr	r3, [r7, #20]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d018      	beq.n	800a870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a846:	441a      	add	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	68da      	ldr	r2, [r3, #12]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	429a      	cmp	r2, r3
 800a856:	d303      	bcc.n	800a860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68d9      	ldr	r1, [r3, #12]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a868:	461a      	mov	r2, r3
 800a86a:	6838      	ldr	r0, [r7, #0]
 800a86c:	f002 fa12 	bl	800cc94 <memcpy>
	}
}
 800a870:	bf00      	nop
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a880:	f001 fddc 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a88a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a88c:	e011      	b.n	800a8b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a892:	2b00      	cmp	r3, #0
 800a894:	d012      	beq.n	800a8bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	3324      	adds	r3, #36	; 0x24
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fdd8 	bl	800b450 <xTaskRemoveFromEventList>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a8a6:	f000 feb5 	bl	800b614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	dce9      	bgt.n	800a88e <prvUnlockQueue+0x16>
 800a8ba:	e000      	b.n	800a8be <prvUnlockQueue+0x46>
					break;
 800a8bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	22ff      	movs	r2, #255	; 0xff
 800a8c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a8c6:	f001 fded 	bl	800c4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a8ca:	f001 fdb7 	bl	800c43c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8d6:	e011      	b.n	800a8fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d012      	beq.n	800a906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3310      	adds	r3, #16
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fdb3 	bl	800b450 <xTaskRemoveFromEventList>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a8f0:	f000 fe90 	bl	800b614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a8fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dce9      	bgt.n	800a8d8 <prvUnlockQueue+0x60>
 800a904:	e000      	b.n	800a908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	22ff      	movs	r2, #255	; 0xff
 800a90c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a910:	f001 fdc8 	bl	800c4a4 <vPortExitCritical>
}
 800a914:	bf00      	nop
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a924:	f001 fd8a 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a930:	2301      	movs	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e001      	b.n	800a93a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a93a:	f001 fdb3 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a93e:	68fb      	ldr	r3, [r7, #12]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a950:	f001 fd74 	bl	800c43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d102      	bne.n	800a966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a960:	2301      	movs	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e001      	b.n	800a96a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a966:	2300      	movs	r3, #0
 800a968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a96a:	f001 fd9b 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800a96e:	68fb      	ldr	r3, [r7, #12]
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	e014      	b.n	800a9b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a988:	4a0f      	ldr	r2, [pc, #60]	; (800a9c8 <vQueueAddToRegistry+0x50>)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10b      	bne.n	800a9ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a994:	490c      	ldr	r1, [pc, #48]	; (800a9c8 <vQueueAddToRegistry+0x50>)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	683a      	ldr	r2, [r7, #0]
 800a99a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a99e:	4a0a      	ldr	r2, [pc, #40]	; (800a9c8 <vQueueAddToRegistry+0x50>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	4413      	add	r3, r2
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a9aa:	e006      	b.n	800a9ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3301      	adds	r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b07      	cmp	r3, #7
 800a9b6:	d9e7      	bls.n	800a988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	200052c4 	.word	0x200052c4

0800a9cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9dc:	f001 fd2e 	bl	800c43c <vPortEnterCritical>
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9e6:	b25b      	sxtb	r3, r3
 800a9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ec:	d103      	bne.n	800a9f6 <vQueueWaitForMessageRestricted+0x2a>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9fc:	b25b      	sxtb	r3, r3
 800a9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa02:	d103      	bne.n	800aa0c <vQueueWaitForMessageRestricted+0x40>
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa0c:	f001 fd4a 	bl	800c4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d106      	bne.n	800aa26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3324      	adds	r3, #36	; 0x24
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	4618      	mov	r0, r3
 800aa22:	f000 fce7 	bl	800b3f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aa26:	6978      	ldr	r0, [r7, #20]
 800aa28:	f7ff ff26 	bl	800a878 <prvUnlockQueue>
	}
 800aa2c:	bf00      	nop
 800aa2e:	3718      	adds	r7, #24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b08e      	sub	sp, #56	; 0x38
 800aa38:	af04      	add	r7, sp, #16
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
 800aa40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aa42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10c      	bne.n	800aa62 <xTaskCreateStatic+0x2e>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4c:	b672      	cpsid	i
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	b662      	cpsie	i
 800aa5c:	623b      	str	r3, [r7, #32]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10c      	bne.n	800aa82 <xTaskCreateStatic+0x4e>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6c:	b672      	cpsid	i
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	b662      	cpsie	i
 800aa7c:	61fb      	str	r3, [r7, #28]
}
 800aa7e:	bf00      	nop
 800aa80:	e7fe      	b.n	800aa80 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa82:	235c      	movs	r3, #92	; 0x5c
 800aa84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b5c      	cmp	r3, #92	; 0x5c
 800aa8a:	d00c      	beq.n	800aaa6 <xTaskCreateStatic+0x72>
	__asm volatile
 800aa8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa90:	b672      	cpsid	i
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	b662      	cpsie	i
 800aaa0:	61bb      	str	r3, [r7, #24]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aaa6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d01e      	beq.n	800aaec <xTaskCreateStatic+0xb8>
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01b      	beq.n	800aaec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aabc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac0:	2202      	movs	r2, #2
 800aac2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aac6:	2300      	movs	r3, #0
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aacc:	9302      	str	r3, [sp, #8]
 800aace:	f107 0314 	add.w	r3, r7, #20
 800aad2:	9301      	str	r3, [sp, #4]
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68b9      	ldr	r1, [r7, #8]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 f850 	bl	800ab84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aae6:	f000 f8df 	bl	800aca8 <prvAddNewTaskToReadyList>
 800aaea:	e001      	b.n	800aaf0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800aaec:	2300      	movs	r3, #0
 800aaee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aaf0:	697b      	ldr	r3, [r7, #20]
	}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3728      	adds	r7, #40	; 0x28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b08c      	sub	sp, #48	; 0x30
 800aafe:	af04      	add	r7, sp, #16
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	603b      	str	r3, [r7, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ab0a:	88fb      	ldrh	r3, [r7, #6]
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 fdc0 	bl	800c694 <pvPortMalloc>
 800ab14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00e      	beq.n	800ab3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ab1c:	205c      	movs	r0, #92	; 0x5c
 800ab1e:	f001 fdb9 	bl	800c694 <pvPortMalloc>
 800ab22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ab30:	e005      	b.n	800ab3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f001 fe78 	bl	800c828 <vPortFree>
 800ab38:	e001      	b.n	800ab3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d017      	beq.n	800ab74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ab44:	69fb      	ldr	r3, [r7, #28]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ab4c:	88fa      	ldrh	r2, [r7, #6]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	9302      	str	r3, [sp, #8]
 800ab56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab58:	9301      	str	r3, [sp, #4]
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f80e 	bl	800ab84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab68:	69f8      	ldr	r0, [r7, #28]
 800ab6a:	f000 f89d 	bl	800aca8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	e002      	b.n	800ab7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab74:	f04f 33ff 	mov.w	r3, #4294967295
 800ab78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3720      	adds	r7, #32
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	21a5      	movs	r1, #165	; 0xa5
 800ab9e:	f002 f887 	bl	800ccb0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800abac:	440b      	add	r3, r1
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	4413      	add	r3, r2
 800abb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	f023 0307 	bic.w	r3, r3, #7
 800abba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	f003 0307 	and.w	r3, r3, #7
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00c      	beq.n	800abe0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	b672      	cpsid	i
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	b662      	cpsie	i
 800abda:	617b      	str	r3, [r7, #20]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d01f      	beq.n	800ac26 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abe6:	2300      	movs	r3, #0
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	e012      	b.n	800ac12 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800abec:	68ba      	ldr	r2, [r7, #8]
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	4413      	add	r3, r2
 800abf2:	7819      	ldrb	r1, [r3, #0]
 800abf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	4413      	add	r3, r2
 800abfa:	3334      	adds	r3, #52	; 0x34
 800abfc:	460a      	mov	r2, r1
 800abfe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	4413      	add	r3, r2
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d006      	beq.n	800ac1a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	61fb      	str	r3, [r7, #28]
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	2b0f      	cmp	r3, #15
 800ac16:	d9e9      	bls.n	800abec <prvInitialiseNewTask+0x68>
 800ac18:	e000      	b.n	800ac1c <prvInitialiseNewTask+0x98>
			{
				break;
 800ac1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ac24:	e003      	b.n	800ac2e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ac26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	2b37      	cmp	r3, #55	; 0x37
 800ac32:	d901      	bls.n	800ac38 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ac34:	2337      	movs	r3, #55	; 0x37
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	2200      	movs	r2, #0
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7ff f952 	bl	8009ef8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac56:	3318      	adds	r3, #24
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff f94d 	bl	8009ef8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac76:	2200      	movs	r2, #0
 800ac78:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	68f9      	ldr	r1, [r7, #12]
 800ac86:	69b8      	ldr	r0, [r7, #24]
 800ac88:	f001 fac8 	bl	800c21c <pxPortInitialiseStack>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac9e:	bf00      	nop
 800aca0:	3720      	adds	r7, #32
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b082      	sub	sp, #8
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800acb0:	f001 fbc4 	bl	800c43c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800acb4:	4b2d      	ldr	r3, [pc, #180]	; (800ad6c <prvAddNewTaskToReadyList+0xc4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	3301      	adds	r3, #1
 800acba:	4a2c      	ldr	r2, [pc, #176]	; (800ad6c <prvAddNewTaskToReadyList+0xc4>)
 800acbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800acbe:	4b2c      	ldr	r3, [pc, #176]	; (800ad70 <prvAddNewTaskToReadyList+0xc8>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d109      	bne.n	800acda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800acc6:	4a2a      	ldr	r2, [pc, #168]	; (800ad70 <prvAddNewTaskToReadyList+0xc8>)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800accc:	4b27      	ldr	r3, [pc, #156]	; (800ad6c <prvAddNewTaskToReadyList+0xc4>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d110      	bne.n	800acf6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800acd4:	f000 fcc2 	bl	800b65c <prvInitialiseTaskLists>
 800acd8:	e00d      	b.n	800acf6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800acda:	4b26      	ldr	r3, [pc, #152]	; (800ad74 <prvAddNewTaskToReadyList+0xcc>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ace2:	4b23      	ldr	r3, [pc, #140]	; (800ad70 <prvAddNewTaskToReadyList+0xc8>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	429a      	cmp	r2, r3
 800acee:	d802      	bhi.n	800acf6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acf0:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <prvAddNewTaskToReadyList+0xc8>)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acf6:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <prvAddNewTaskToReadyList+0xd0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	3301      	adds	r3, #1
 800acfc:	4a1e      	ldr	r2, [pc, #120]	; (800ad78 <prvAddNewTaskToReadyList+0xd0>)
 800acfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad00:	4b1d      	ldr	r3, [pc, #116]	; (800ad78 <prvAddNewTaskToReadyList+0xd0>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0c:	4b1b      	ldr	r3, [pc, #108]	; (800ad7c <prvAddNewTaskToReadyList+0xd4>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d903      	bls.n	800ad1c <prvAddNewTaskToReadyList+0x74>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	4a18      	ldr	r2, [pc, #96]	; (800ad7c <prvAddNewTaskToReadyList+0xd4>)
 800ad1a:	6013      	str	r3, [r2, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad20:	4613      	mov	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4a15      	ldr	r2, [pc, #84]	; (800ad80 <prvAddNewTaskToReadyList+0xd8>)
 800ad2a:	441a      	add	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f7ff f8ed 	bl	8009f12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad38:	f001 fbb4 	bl	800c4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <prvAddNewTaskToReadyList+0xcc>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00e      	beq.n	800ad62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <prvAddNewTaskToReadyList+0xc8>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d207      	bcs.n	800ad62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad52:	4b0c      	ldr	r3, [pc, #48]	; (800ad84 <prvAddNewTaskToReadyList+0xdc>)
 800ad54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad62:	bf00      	nop
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000ea0 	.word	0x20000ea0
 800ad70:	200009cc 	.word	0x200009cc
 800ad74:	20000eac 	.word	0x20000eac
 800ad78:	20000ebc 	.word	0x20000ebc
 800ad7c:	20000ea8 	.word	0x20000ea8
 800ad80:	200009d0 	.word	0x200009d0
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08a      	sub	sp, #40	; 0x28
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ad92:	2300      	movs	r3, #0
 800ad94:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d10c      	bne.n	800adb6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	b672      	cpsid	i
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	b662      	cpsie	i
 800adb0:	617b      	str	r3, [r7, #20]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10c      	bne.n	800add6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800adbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc0:	b672      	cpsid	i
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	b662      	cpsie	i
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800add6:	4b2b      	ldr	r3, [pc, #172]	; (800ae84 <vTaskDelayUntil+0xfc>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <vTaskDelayUntil+0x70>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	b672      	cpsid	i
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	b662      	cpsie	i
 800adf2:	60fb      	str	r3, [r7, #12]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800adf8:	f000 f8ea 	bl	800afd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800adfc:	4b22      	ldr	r3, [pc, #136]	; (800ae88 <vTaskDelayUntil+0x100>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	683a      	ldr	r2, [r7, #0]
 800ae08:	4413      	add	r3, r2
 800ae0a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6a3a      	ldr	r2, [r7, #32]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d20b      	bcs.n	800ae2e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	69fa      	ldr	r2, [r7, #28]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d211      	bcs.n	800ae44 <vTaskDelayUntil+0xbc>
 800ae20:	69fa      	ldr	r2, [r7, #28]
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d90d      	bls.n	800ae44 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae2c:	e00a      	b.n	800ae44 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	69fa      	ldr	r2, [r7, #28]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d303      	bcc.n	800ae40 <vTaskDelayUntil+0xb8>
 800ae38:	69fa      	ldr	r2, [r7, #28]
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d901      	bls.n	800ae44 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800ae40:	2301      	movs	r3, #1
 800ae42:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	69fa      	ldr	r2, [r7, #28]
 800ae48:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 fe2f 	bl	800babc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ae5e:	f000 f8c5 	bl	800afec <xTaskResumeAll>
 800ae62:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d107      	bne.n	800ae7a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800ae6a:	4b08      	ldr	r3, [pc, #32]	; (800ae8c <vTaskDelayUntil+0x104>)
 800ae6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	f3bf 8f4f 	dsb	sy
 800ae76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ae7a:	bf00      	nop
 800ae7c:	3728      	adds	r7, #40	; 0x28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000ec8 	.word	0x20000ec8
 800ae88:	20000ea4 	.word	0x20000ea4
 800ae8c:	e000ed04 	.word	0xe000ed04

0800ae90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d019      	beq.n	800aed6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aea2:	4b14      	ldr	r3, [pc, #80]	; (800aef4 <vTaskDelay+0x64>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <vTaskDelay+0x34>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	b672      	cpsid	i
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	b662      	cpsie	i
 800aebe:	60bb      	str	r3, [r7, #8]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800aec4:	f000 f884 	bl	800afd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aec8:	2100      	movs	r1, #0
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fdf6 	bl	800babc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aed0:	f000 f88c 	bl	800afec <xTaskResumeAll>
 800aed4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d107      	bne.n	800aeec <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800aedc:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <vTaskDelay+0x68>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeec:	bf00      	nop
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	20000ec8 	.word	0x20000ec8
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08a      	sub	sp, #40	; 0x28
 800af00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af02:	2300      	movs	r3, #0
 800af04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af0a:	463a      	mov	r2, r7
 800af0c:	1d39      	adds	r1, r7, #4
 800af0e:	f107 0308 	add.w	r3, r7, #8
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe ff9c 	bl	8009e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	9202      	str	r2, [sp, #8]
 800af20:	9301      	str	r3, [sp, #4]
 800af22:	2300      	movs	r3, #0
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	2300      	movs	r3, #0
 800af28:	460a      	mov	r2, r1
 800af2a:	4923      	ldr	r1, [pc, #140]	; (800afb8 <vTaskStartScheduler+0xbc>)
 800af2c:	4823      	ldr	r0, [pc, #140]	; (800afbc <vTaskStartScheduler+0xc0>)
 800af2e:	f7ff fd81 	bl	800aa34 <xTaskCreateStatic>
 800af32:	4603      	mov	r3, r0
 800af34:	4a22      	ldr	r2, [pc, #136]	; (800afc0 <vTaskStartScheduler+0xc4>)
 800af36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af38:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <vTaskStartScheduler+0xc4>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d002      	beq.n	800af46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af40:	2301      	movs	r3, #1
 800af42:	617b      	str	r3, [r7, #20]
 800af44:	e001      	b.n	800af4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d102      	bne.n	800af56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af50:	f000 fe08 	bl	800bb64 <xTimerCreateTimerTask>
 800af54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d118      	bne.n	800af8e <vTaskStartScheduler+0x92>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	b672      	cpsid	i
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	b662      	cpsie	i
 800af70:	613b      	str	r3, [r7, #16]
}
 800af72:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af74:	4b13      	ldr	r3, [pc, #76]	; (800afc4 <vTaskStartScheduler+0xc8>)
 800af76:	f04f 32ff 	mov.w	r2, #4294967295
 800af7a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af7c:	4b12      	ldr	r3, [pc, #72]	; (800afc8 <vTaskStartScheduler+0xcc>)
 800af7e:	2201      	movs	r2, #1
 800af80:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af82:	4b12      	ldr	r3, [pc, #72]	; (800afcc <vTaskStartScheduler+0xd0>)
 800af84:	2200      	movs	r2, #0
 800af86:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af88:	f001 f9da 	bl	800c340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af8c:	e010      	b.n	800afb0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af94:	d10c      	bne.n	800afb0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9a:	b672      	cpsid	i
 800af9c:	f383 8811 	msr	BASEPRI, r3
 800afa0:	f3bf 8f6f 	isb	sy
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	b662      	cpsie	i
 800afaa:	60fb      	str	r3, [r7, #12]
}
 800afac:	bf00      	nop
 800afae:	e7fe      	b.n	800afae <vTaskStartScheduler+0xb2>
}
 800afb0:	bf00      	nop
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	080106b8 	.word	0x080106b8
 800afbc:	0800b62d 	.word	0x0800b62d
 800afc0:	20000ec4 	.word	0x20000ec4
 800afc4:	20000ec0 	.word	0x20000ec0
 800afc8:	20000eac 	.word	0x20000eac
 800afcc:	20000ea4 	.word	0x20000ea4

0800afd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afd4:	4b04      	ldr	r3, [pc, #16]	; (800afe8 <vTaskSuspendAll+0x18>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3301      	adds	r3, #1
 800afda:	4a03      	ldr	r2, [pc, #12]	; (800afe8 <vTaskSuspendAll+0x18>)
 800afdc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afde:	bf00      	nop
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr
 800afe8:	20000ec8 	.word	0x20000ec8

0800afec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800affa:	4b43      	ldr	r3, [pc, #268]	; (800b108 <xTaskResumeAll+0x11c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10c      	bne.n	800b01c <xTaskResumeAll+0x30>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	b672      	cpsid	i
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	b662      	cpsie	i
 800b016:	603b      	str	r3, [r7, #0]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b01c:	f001 fa0e 	bl	800c43c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b020:	4b39      	ldr	r3, [pc, #228]	; (800b108 <xTaskResumeAll+0x11c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3b01      	subs	r3, #1
 800b026:	4a38      	ldr	r2, [pc, #224]	; (800b108 <xTaskResumeAll+0x11c>)
 800b028:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b02a:	4b37      	ldr	r3, [pc, #220]	; (800b108 <xTaskResumeAll+0x11c>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d162      	bne.n	800b0f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b032:	4b36      	ldr	r3, [pc, #216]	; (800b10c <xTaskResumeAll+0x120>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d05e      	beq.n	800b0f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b03a:	e02f      	b.n	800b09c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b03c:	4b34      	ldr	r3, [pc, #208]	; (800b110 <xTaskResumeAll+0x124>)
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3318      	adds	r3, #24
 800b048:	4618      	mov	r0, r3
 800b04a:	f7fe ffbf 	bl	8009fcc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	3304      	adds	r3, #4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe ffba 	bl	8009fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05c:	4b2d      	ldr	r3, [pc, #180]	; (800b114 <xTaskResumeAll+0x128>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d903      	bls.n	800b06c <xTaskResumeAll+0x80>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b068:	4a2a      	ldr	r2, [pc, #168]	; (800b114 <xTaskResumeAll+0x128>)
 800b06a:	6013      	str	r3, [r2, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b070:	4613      	mov	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	009b      	lsls	r3, r3, #2
 800b078:	4a27      	ldr	r2, [pc, #156]	; (800b118 <xTaskResumeAll+0x12c>)
 800b07a:	441a      	add	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	3304      	adds	r3, #4
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f7fe ff45 	bl	8009f12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4b23      	ldr	r3, [pc, #140]	; (800b11c <xTaskResumeAll+0x130>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	429a      	cmp	r2, r3
 800b094:	d302      	bcc.n	800b09c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b096:	4b22      	ldr	r3, [pc, #136]	; (800b120 <xTaskResumeAll+0x134>)
 800b098:	2201      	movs	r2, #1
 800b09a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b09c:	4b1c      	ldr	r3, [pc, #112]	; (800b110 <xTaskResumeAll+0x124>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d1cb      	bne.n	800b03c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0aa:	f000 fb77 	bl	800b79c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b0ae:	4b1d      	ldr	r3, [pc, #116]	; (800b124 <xTaskResumeAll+0x138>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d010      	beq.n	800b0dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0ba:	f000 f859 	bl	800b170 <xTaskIncrementTick>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b0c4:	4b16      	ldr	r3, [pc, #88]	; (800b120 <xTaskResumeAll+0x134>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d1f1      	bne.n	800b0ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b0d6:	4b13      	ldr	r3, [pc, #76]	; (800b124 <xTaskResumeAll+0x138>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0dc:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xTaskResumeAll+0x134>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0e8:	4b0f      	ldr	r3, [pc, #60]	; (800b128 <xTaskResumeAll+0x13c>)
 800b0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0f8:	f001 f9d4 	bl	800c4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20000ec8 	.word	0x20000ec8
 800b10c:	20000ea0 	.word	0x20000ea0
 800b110:	20000e60 	.word	0x20000e60
 800b114:	20000ea8 	.word	0x20000ea8
 800b118:	200009d0 	.word	0x200009d0
 800b11c:	200009cc 	.word	0x200009cc
 800b120:	20000eb4 	.word	0x20000eb4
 800b124:	20000eb0 	.word	0x20000eb0
 800b128:	e000ed04 	.word	0xe000ed04

0800b12c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b12c:	b480      	push	{r7}
 800b12e:	b083      	sub	sp, #12
 800b130:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <xTaskGetTickCount+0x1c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b138:	687b      	ldr	r3, [r7, #4]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr
 800b146:	bf00      	nop
 800b148:	20000ea4 	.word	0x20000ea4

0800b14c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b152:	f001 fa5b 	bl	800c60c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b156:	2300      	movs	r3, #0
 800b158:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b15a:	4b04      	ldr	r3, [pc, #16]	; (800b16c <xTaskGetTickCountFromISR+0x20>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b160:	683b      	ldr	r3, [r7, #0]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	20000ea4 	.word	0x20000ea4

0800b170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b17a:	4b50      	ldr	r3, [pc, #320]	; (800b2bc <xTaskIncrementTick+0x14c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f040 808b 	bne.w	800b29a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b184:	4b4e      	ldr	r3, [pc, #312]	; (800b2c0 <xTaskIncrementTick+0x150>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b18c:	4a4c      	ldr	r2, [pc, #304]	; (800b2c0 <xTaskIncrementTick+0x150>)
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d122      	bne.n	800b1de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b198:	4b4a      	ldr	r3, [pc, #296]	; (800b2c4 <xTaskIncrementTick+0x154>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d00c      	beq.n	800b1bc <xTaskIncrementTick+0x4c>
	__asm volatile
 800b1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a6:	b672      	cpsid	i
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	b662      	cpsie	i
 800b1b6:	603b      	str	r3, [r7, #0]
}
 800b1b8:	bf00      	nop
 800b1ba:	e7fe      	b.n	800b1ba <xTaskIncrementTick+0x4a>
 800b1bc:	4b41      	ldr	r3, [pc, #260]	; (800b2c4 <xTaskIncrementTick+0x154>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	60fb      	str	r3, [r7, #12]
 800b1c2:	4b41      	ldr	r3, [pc, #260]	; (800b2c8 <xTaskIncrementTick+0x158>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a3f      	ldr	r2, [pc, #252]	; (800b2c4 <xTaskIncrementTick+0x154>)
 800b1c8:	6013      	str	r3, [r2, #0]
 800b1ca:	4a3f      	ldr	r2, [pc, #252]	; (800b2c8 <xTaskIncrementTick+0x158>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6013      	str	r3, [r2, #0]
 800b1d0:	4b3e      	ldr	r3, [pc, #248]	; (800b2cc <xTaskIncrementTick+0x15c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4a3d      	ldr	r2, [pc, #244]	; (800b2cc <xTaskIncrementTick+0x15c>)
 800b1d8:	6013      	str	r3, [r2, #0]
 800b1da:	f000 fadf 	bl	800b79c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b1de:	4b3c      	ldr	r3, [pc, #240]	; (800b2d0 <xTaskIncrementTick+0x160>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d349      	bcc.n	800b27c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1e8:	4b36      	ldr	r3, [pc, #216]	; (800b2c4 <xTaskIncrementTick+0x154>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d104      	bne.n	800b1fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f2:	4b37      	ldr	r3, [pc, #220]	; (800b2d0 <xTaskIncrementTick+0x160>)
 800b1f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f8:	601a      	str	r2, [r3, #0]
					break;
 800b1fa:	e03f      	b.n	800b27c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1fc:	4b31      	ldr	r3, [pc, #196]	; (800b2c4 <xTaskIncrementTick+0x154>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	429a      	cmp	r2, r3
 800b212:	d203      	bcs.n	800b21c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b214:	4a2e      	ldr	r2, [pc, #184]	; (800b2d0 <xTaskIncrementTick+0x160>)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b21a:	e02f      	b.n	800b27c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	3304      	adds	r3, #4
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fed3 	bl	8009fcc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d004      	beq.n	800b238 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3318      	adds	r3, #24
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe feca 	bl	8009fcc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23c:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <xTaskIncrementTick+0x164>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	429a      	cmp	r2, r3
 800b242:	d903      	bls.n	800b24c <xTaskIncrementTick+0xdc>
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b248:	4a22      	ldr	r2, [pc, #136]	; (800b2d4 <xTaskIncrementTick+0x164>)
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b250:	4613      	mov	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4a1f      	ldr	r2, [pc, #124]	; (800b2d8 <xTaskIncrementTick+0x168>)
 800b25a:	441a      	add	r2, r3
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	3304      	adds	r3, #4
 800b260:	4619      	mov	r1, r3
 800b262:	4610      	mov	r0, r2
 800b264:	f7fe fe55 	bl	8009f12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26c:	4b1b      	ldr	r3, [pc, #108]	; (800b2dc <xTaskIncrementTick+0x16c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b272:	429a      	cmp	r2, r3
 800b274:	d3b8      	bcc.n	800b1e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b276:	2301      	movs	r3, #1
 800b278:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b27a:	e7b5      	b.n	800b1e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b27c:	4b17      	ldr	r3, [pc, #92]	; (800b2dc <xTaskIncrementTick+0x16c>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b282:	4915      	ldr	r1, [pc, #84]	; (800b2d8 <xTaskIncrementTick+0x168>)
 800b284:	4613      	mov	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4413      	add	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	440b      	add	r3, r1
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b01      	cmp	r3, #1
 800b292:	d907      	bls.n	800b2a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b294:	2301      	movs	r3, #1
 800b296:	617b      	str	r3, [r7, #20]
 800b298:	e004      	b.n	800b2a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b29a:	4b11      	ldr	r3, [pc, #68]	; (800b2e0 <xTaskIncrementTick+0x170>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3301      	adds	r3, #1
 800b2a0:	4a0f      	ldr	r2, [pc, #60]	; (800b2e0 <xTaskIncrementTick+0x170>)
 800b2a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b2a4:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <xTaskIncrementTick+0x174>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d001      	beq.n	800b2b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b2b0:	697b      	ldr	r3, [r7, #20]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3718      	adds	r7, #24
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20000ec8 	.word	0x20000ec8
 800b2c0:	20000ea4 	.word	0x20000ea4
 800b2c4:	20000e58 	.word	0x20000e58
 800b2c8:	20000e5c 	.word	0x20000e5c
 800b2cc:	20000eb8 	.word	0x20000eb8
 800b2d0:	20000ec0 	.word	0x20000ec0
 800b2d4:	20000ea8 	.word	0x20000ea8
 800b2d8:	200009d0 	.word	0x200009d0
 800b2dc:	200009cc 	.word	0x200009cc
 800b2e0:	20000eb0 	.word	0x20000eb0
 800b2e4:	20000eb4 	.word	0x20000eb4

0800b2e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2ee:	4b29      	ldr	r3, [pc, #164]	; (800b394 <vTaskSwitchContext+0xac>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d003      	beq.n	800b2fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2f6:	4b28      	ldr	r3, [pc, #160]	; (800b398 <vTaskSwitchContext+0xb0>)
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2fc:	e043      	b.n	800b386 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b2fe:	4b26      	ldr	r3, [pc, #152]	; (800b398 <vTaskSwitchContext+0xb0>)
 800b300:	2200      	movs	r2, #0
 800b302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b304:	4b25      	ldr	r3, [pc, #148]	; (800b39c <vTaskSwitchContext+0xb4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	e012      	b.n	800b332 <vTaskSwitchContext+0x4a>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10c      	bne.n	800b32c <vTaskSwitchContext+0x44>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	b672      	cpsid	i
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	b662      	cpsie	i
 800b326:	607b      	str	r3, [r7, #4]
}
 800b328:	bf00      	nop
 800b32a:	e7fe      	b.n	800b32a <vTaskSwitchContext+0x42>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	3b01      	subs	r3, #1
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	491b      	ldr	r1, [pc, #108]	; (800b3a0 <vTaskSwitchContext+0xb8>)
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	4613      	mov	r3, r2
 800b338:	009b      	lsls	r3, r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	440b      	add	r3, r1
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0e2      	beq.n	800b30c <vTaskSwitchContext+0x24>
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4a13      	ldr	r2, [pc, #76]	; (800b3a0 <vTaskSwitchContext+0xb8>)
 800b352:	4413      	add	r3, r2
 800b354:	60bb      	str	r3, [r7, #8]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	605a      	str	r2, [r3, #4]
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	685a      	ldr	r2, [r3, #4]
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	3308      	adds	r3, #8
 800b368:	429a      	cmp	r2, r3
 800b36a:	d104      	bne.n	800b376 <vTaskSwitchContext+0x8e>
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	685a      	ldr	r2, [r3, #4]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	605a      	str	r2, [r3, #4]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	4a09      	ldr	r2, [pc, #36]	; (800b3a4 <vTaskSwitchContext+0xbc>)
 800b37e:	6013      	str	r3, [r2, #0]
 800b380:	4a06      	ldr	r2, [pc, #24]	; (800b39c <vTaskSwitchContext+0xb4>)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6013      	str	r3, [r2, #0]
}
 800b386:	bf00      	nop
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	20000ec8 	.word	0x20000ec8
 800b398:	20000eb4 	.word	0x20000eb4
 800b39c:	20000ea8 	.word	0x20000ea8
 800b3a0:	200009d0 	.word	0x200009d0
 800b3a4:	200009cc 	.word	0x200009cc

0800b3a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10c      	bne.n	800b3d2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3bc:	b672      	cpsid	i
 800b3be:	f383 8811 	msr	BASEPRI, r3
 800b3c2:	f3bf 8f6f 	isb	sy
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	b662      	cpsie	i
 800b3cc:	60fb      	str	r3, [r7, #12]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3d2:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <vTaskPlaceOnEventList+0x48>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	3318      	adds	r3, #24
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7fe fdbd 	bl	8009f5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	6838      	ldr	r0, [r7, #0]
 800b3e4:	f000 fb6a 	bl	800babc <prvAddCurrentTaskToDelayedList>
}
 800b3e8:	bf00      	nop
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	200009cc 	.word	0x200009cc

0800b3f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10c      	bne.n	800b420 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	b672      	cpsid	i
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	b662      	cpsie	i
 800b41a:	617b      	str	r3, [r7, #20]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b420:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <vTaskPlaceOnEventListRestricted+0x58>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3318      	adds	r3, #24
 800b426:	4619      	mov	r1, r3
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7fe fd72 	bl	8009f12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b434:	f04f 33ff 	mov.w	r3, #4294967295
 800b438:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	68b8      	ldr	r0, [r7, #8]
 800b43e:	f000 fb3d 	bl	800babc <prvAddCurrentTaskToDelayedList>
	}
 800b442:	bf00      	nop
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	200009cc 	.word	0x200009cc

0800b450 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10c      	bne.n	800b480 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	b672      	cpsid	i
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	b662      	cpsie	i
 800b47a:	60fb      	str	r3, [r7, #12]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	3318      	adds	r3, #24
 800b484:	4618      	mov	r0, r3
 800b486:	f7fe fda1 	bl	8009fcc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b48a:	4b1e      	ldr	r3, [pc, #120]	; (800b504 <xTaskRemoveFromEventList+0xb4>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d11d      	bne.n	800b4ce <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	3304      	adds	r3, #4
 800b496:	4618      	mov	r0, r3
 800b498:	f7fe fd98 	bl	8009fcc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a0:	4b19      	ldr	r3, [pc, #100]	; (800b508 <xTaskRemoveFromEventList+0xb8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d903      	bls.n	800b4b0 <xTaskRemoveFromEventList+0x60>
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	4a16      	ldr	r2, [pc, #88]	; (800b508 <xTaskRemoveFromEventList+0xb8>)
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b4:	4613      	mov	r3, r2
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	4a13      	ldr	r2, [pc, #76]	; (800b50c <xTaskRemoveFromEventList+0xbc>)
 800b4be:	441a      	add	r2, r3
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	3304      	adds	r3, #4
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	4610      	mov	r0, r2
 800b4c8:	f7fe fd23 	bl	8009f12 <vListInsertEnd>
 800b4cc:	e005      	b.n	800b4da <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	3318      	adds	r3, #24
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	480e      	ldr	r0, [pc, #56]	; (800b510 <xTaskRemoveFromEventList+0xc0>)
 800b4d6:	f7fe fd1c 	bl	8009f12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4de:	4b0d      	ldr	r3, [pc, #52]	; (800b514 <xTaskRemoveFromEventList+0xc4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d905      	bls.n	800b4f4 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <xTaskRemoveFromEventList+0xc8>)
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	e001      	b.n	800b4f8 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4f8:	697b      	ldr	r3, [r7, #20]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20000ec8 	.word	0x20000ec8
 800b508:	20000ea8 	.word	0x20000ea8
 800b50c:	200009d0 	.word	0x200009d0
 800b510:	20000e60 	.word	0x20000e60
 800b514:	200009cc 	.word	0x200009cc
 800b518:	20000eb4 	.word	0x20000eb4

0800b51c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b524:	4b06      	ldr	r3, [pc, #24]	; (800b540 <vTaskInternalSetTimeOutState+0x24>)
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b52c:	4b05      	ldr	r3, [pc, #20]	; (800b544 <vTaskInternalSetTimeOutState+0x28>)
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	605a      	str	r2, [r3, #4]
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	20000eb8 	.word	0x20000eb8
 800b544:	20000ea4 	.word	0x20000ea4

0800b548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10c      	bne.n	800b572 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55c:	b672      	cpsid	i
 800b55e:	f383 8811 	msr	BASEPRI, r3
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	f3bf 8f4f 	dsb	sy
 800b56a:	b662      	cpsie	i
 800b56c:	613b      	str	r3, [r7, #16]
}
 800b56e:	bf00      	nop
 800b570:	e7fe      	b.n	800b570 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10c      	bne.n	800b592 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57c:	b672      	cpsid	i
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	b662      	cpsie	i
 800b58c:	60fb      	str	r3, [r7, #12]
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b592:	f000 ff53 	bl	800c43c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b596:	4b1d      	ldr	r3, [pc, #116]	; (800b60c <xTaskCheckForTimeOut+0xc4>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	69ba      	ldr	r2, [r7, #24]
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ae:	d102      	bne.n	800b5b6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]
 800b5b4:	e023      	b.n	800b5fe <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	4b15      	ldr	r3, [pc, #84]	; (800b610 <xTaskCheckForTimeOut+0xc8>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d007      	beq.n	800b5d2 <xTaskCheckForTimeOut+0x8a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	69ba      	ldr	r2, [r7, #24]
 800b5c8:	429a      	cmp	r2, r3
 800b5ca:	d302      	bcc.n	800b5d2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	e015      	b.n	800b5fe <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d20b      	bcs.n	800b5f4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	1ad2      	subs	r2, r2, r3
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ff97 	bl	800b51c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61fb      	str	r3, [r7, #28]
 800b5f2:	e004      	b.n	800b5fe <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b5fe:	f000 ff51 	bl	800c4a4 <vPortExitCritical>

	return xReturn;
 800b602:	69fb      	ldr	r3, [r7, #28]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000ea4 	.word	0x20000ea4
 800b610:	20000eb8 	.word	0x20000eb8

0800b614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b614:	b480      	push	{r7}
 800b616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b618:	4b03      	ldr	r3, [pc, #12]	; (800b628 <vTaskMissedYield+0x14>)
 800b61a:	2201      	movs	r2, #1
 800b61c:	601a      	str	r2, [r3, #0]
}
 800b61e:	bf00      	nop
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr
 800b628:	20000eb4 	.word	0x20000eb4

0800b62c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b634:	f000 f852 	bl	800b6dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b638:	4b06      	ldr	r3, [pc, #24]	; (800b654 <prvIdleTask+0x28>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d9f9      	bls.n	800b634 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b640:	4b05      	ldr	r3, [pc, #20]	; (800b658 <prvIdleTask+0x2c>)
 800b642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b650:	e7f0      	b.n	800b634 <prvIdleTask+0x8>
 800b652:	bf00      	nop
 800b654:	200009d0 	.word	0x200009d0
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b662:	2300      	movs	r3, #0
 800b664:	607b      	str	r3, [r7, #4]
 800b666:	e00c      	b.n	800b682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4a12      	ldr	r2, [pc, #72]	; (800b6bc <prvInitialiseTaskLists+0x60>)
 800b674:	4413      	add	r3, r2
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe fc1e 	bl	8009eb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	3301      	adds	r3, #1
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b37      	cmp	r3, #55	; 0x37
 800b686:	d9ef      	bls.n	800b668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b688:	480d      	ldr	r0, [pc, #52]	; (800b6c0 <prvInitialiseTaskLists+0x64>)
 800b68a:	f7fe fc15 	bl	8009eb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b68e:	480d      	ldr	r0, [pc, #52]	; (800b6c4 <prvInitialiseTaskLists+0x68>)
 800b690:	f7fe fc12 	bl	8009eb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b694:	480c      	ldr	r0, [pc, #48]	; (800b6c8 <prvInitialiseTaskLists+0x6c>)
 800b696:	f7fe fc0f 	bl	8009eb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b69a:	480c      	ldr	r0, [pc, #48]	; (800b6cc <prvInitialiseTaskLists+0x70>)
 800b69c:	f7fe fc0c 	bl	8009eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6a0:	480b      	ldr	r0, [pc, #44]	; (800b6d0 <prvInitialiseTaskLists+0x74>)
 800b6a2:	f7fe fc09 	bl	8009eb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6a6:	4b0b      	ldr	r3, [pc, #44]	; (800b6d4 <prvInitialiseTaskLists+0x78>)
 800b6a8:	4a05      	ldr	r2, [pc, #20]	; (800b6c0 <prvInitialiseTaskLists+0x64>)
 800b6aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6ac:	4b0a      	ldr	r3, [pc, #40]	; (800b6d8 <prvInitialiseTaskLists+0x7c>)
 800b6ae:	4a05      	ldr	r2, [pc, #20]	; (800b6c4 <prvInitialiseTaskLists+0x68>)
 800b6b0:	601a      	str	r2, [r3, #0]
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	200009d0 	.word	0x200009d0
 800b6c0:	20000e30 	.word	0x20000e30
 800b6c4:	20000e44 	.word	0x20000e44
 800b6c8:	20000e60 	.word	0x20000e60
 800b6cc:	20000e74 	.word	0x20000e74
 800b6d0:	20000e8c 	.word	0x20000e8c
 800b6d4:	20000e58 	.word	0x20000e58
 800b6d8:	20000e5c 	.word	0x20000e5c

0800b6dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6e2:	e019      	b.n	800b718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6e4:	f000 feaa 	bl	800c43c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e8:	4b10      	ldr	r3, [pc, #64]	; (800b72c <prvCheckTasksWaitingTermination+0x50>)
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	68db      	ldr	r3, [r3, #12]
 800b6ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe fc69 	bl	8009fcc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b6fa:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <prvCheckTasksWaitingTermination+0x54>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	4a0b      	ldr	r2, [pc, #44]	; (800b730 <prvCheckTasksWaitingTermination+0x54>)
 800b702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b704:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <prvCheckTasksWaitingTermination+0x58>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3b01      	subs	r3, #1
 800b70a:	4a0a      	ldr	r2, [pc, #40]	; (800b734 <prvCheckTasksWaitingTermination+0x58>)
 800b70c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b70e:	f000 fec9 	bl	800c4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f810 	bl	800b738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <prvCheckTasksWaitingTermination+0x58>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1e1      	bne.n	800b6e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b720:	bf00      	nop
 800b722:	bf00      	nop
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
 800b72a:	bf00      	nop
 800b72c:	20000e74 	.word	0x20000e74
 800b730:	20000ea0 	.word	0x20000ea0
 800b734:	20000e88 	.word	0x20000e88

0800b738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b746:	2b00      	cmp	r3, #0
 800b748:	d108      	bne.n	800b75c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74e:	4618      	mov	r0, r3
 800b750:	f001 f86a 	bl	800c828 <vPortFree>
				vPortFree( pxTCB );
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f001 f867 	bl	800c828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b75a:	e01a      	b.n	800b792 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b762:	2b01      	cmp	r3, #1
 800b764:	d103      	bne.n	800b76e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f001 f85e 	bl	800c828 <vPortFree>
	}
 800b76c:	e011      	b.n	800b792 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b774:	2b02      	cmp	r3, #2
 800b776:	d00c      	beq.n	800b792 <prvDeleteTCB+0x5a>
	__asm volatile
 800b778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77c:	b672      	cpsid	i
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	b662      	cpsie	i
 800b78c:	60fb      	str	r3, [r7, #12]
}
 800b78e:	bf00      	nop
 800b790:	e7fe      	b.n	800b790 <prvDeleteTCB+0x58>
	}
 800b792:	bf00      	nop
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b79c:	b480      	push	{r7}
 800b79e:	b083      	sub	sp, #12
 800b7a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7a2:	4b0c      	ldr	r3, [pc, #48]	; (800b7d4 <prvResetNextTaskUnblockTime+0x38>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d104      	bne.n	800b7b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7ac:	4b0a      	ldr	r3, [pc, #40]	; (800b7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7b4:	e008      	b.n	800b7c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7b6:	4b07      	ldr	r3, [pc, #28]	; (800b7d4 <prvResetNextTaskUnblockTime+0x38>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	4a04      	ldr	r2, [pc, #16]	; (800b7d8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7c6:	6013      	str	r3, [r2, #0]
}
 800b7c8:	bf00      	nop
 800b7ca:	370c      	adds	r7, #12
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr
 800b7d4:	20000e58 	.word	0x20000e58
 800b7d8:	20000ec0 	.word	0x20000ec0

0800b7dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b7e2:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <xTaskGetSchedulerState+0x34>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d102      	bne.n	800b7f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	607b      	str	r3, [r7, #4]
 800b7ee:	e008      	b.n	800b802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f0:	4b08      	ldr	r3, [pc, #32]	; (800b814 <xTaskGetSchedulerState+0x38>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	607b      	str	r3, [r7, #4]
 800b7fc:	e001      	b.n	800b802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b7fe:	2300      	movs	r3, #0
 800b800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b802:	687b      	ldr	r3, [r7, #4]
	}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20000eac 	.word	0x20000eac
 800b814:	20000ec8 	.word	0x20000ec8

0800b818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b824:	2300      	movs	r3, #0
 800b826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d05a      	beq.n	800b8e4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b82e:	4b30      	ldr	r3, [pc, #192]	; (800b8f0 <xTaskPriorityDisinherit+0xd8>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	429a      	cmp	r2, r3
 800b836:	d00c      	beq.n	800b852 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b83c:	b672      	cpsid	i
 800b83e:	f383 8811 	msr	BASEPRI, r3
 800b842:	f3bf 8f6f 	isb	sy
 800b846:	f3bf 8f4f 	dsb	sy
 800b84a:	b662      	cpsie	i
 800b84c:	60fb      	str	r3, [r7, #12]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10c      	bne.n	800b874 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	b672      	cpsid	i
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	b662      	cpsie	i
 800b86e:	60bb      	str	r3, [r7, #8]
}
 800b870:	bf00      	nop
 800b872:	e7fe      	b.n	800b872 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	1e5a      	subs	r2, r3, #1
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	429a      	cmp	r2, r3
 800b888:	d02c      	beq.n	800b8e4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d128      	bne.n	800b8e4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	3304      	adds	r3, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fb98 	bl	8009fcc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	4b0f      	ldr	r3, [pc, #60]	; (800b8f4 <xTaskPriorityDisinherit+0xdc>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d903      	bls.n	800b8c4 <xTaskPriorityDisinherit+0xac>
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c0:	4a0c      	ldr	r2, [pc, #48]	; (800b8f4 <xTaskPriorityDisinherit+0xdc>)
 800b8c2:	6013      	str	r3, [r2, #0]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	009b      	lsls	r3, r3, #2
 800b8cc:	4413      	add	r3, r2
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4a09      	ldr	r2, [pc, #36]	; (800b8f8 <xTaskPriorityDisinherit+0xe0>)
 800b8d2:	441a      	add	r2, r3
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f7fe fb19 	bl	8009f12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b8e4:	697b      	ldr	r3, [r7, #20]
	}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200009cc 	.word	0x200009cc
 800b8f4:	20000ea8 	.word	0x20000ea8
 800b8f8:	200009d0 	.word	0x200009d0

0800b8fc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b084      	sub	sp, #16
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b906:	f000 fd99 	bl	800c43c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b90a:	4b1e      	ldr	r3, [pc, #120]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b910:	2b00      	cmp	r3, #0
 800b912:	d113      	bne.n	800b93c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b914:	4b1b      	ldr	r3, [pc, #108]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00b      	beq.n	800b93c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b924:	2101      	movs	r1, #1
 800b926:	6838      	ldr	r0, [r7, #0]
 800b928:	f000 f8c8 	bl	800babc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b92c:	4b16      	ldr	r3, [pc, #88]	; (800b988 <ulTaskNotifyTake+0x8c>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b93c:	f000 fdb2 	bl	800c4a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b940:	f000 fd7c 	bl	800c43c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00c      	beq.n	800b96c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d004      	beq.n	800b962 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b958:	4b0a      	ldr	r3, [pc, #40]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2200      	movs	r2, #0
 800b95e:	655a      	str	r2, [r3, #84]	; 0x54
 800b960:	e004      	b.n	800b96c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b962:	4b08      	ldr	r3, [pc, #32]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	3a01      	subs	r2, #1
 800b96a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b96c:	4b05      	ldr	r3, [pc, #20]	; (800b984 <ulTaskNotifyTake+0x88>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800b976:	f000 fd95 	bl	800c4a4 <vPortExitCritical>

		return ulReturn;
 800b97a:	68fb      	ldr	r3, [r7, #12]
	}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	200009cc 	.word	0x200009cc
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08a      	sub	sp, #40	; 0x28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10c      	bne.n	800b9b6 <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	b672      	cpsid	i
 800b9a2:	f383 8811 	msr	BASEPRI, r3
 800b9a6:	f3bf 8f6f 	isb	sy
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	b662      	cpsie	i
 800b9b0:	61bb      	str	r3, [r7, #24]
}
 800b9b2:	bf00      	nop
 800b9b4:	e7fe      	b.n	800b9b4 <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9b6:	f000 fe29 	bl	800c60c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800b9be:	f3ef 8211 	mrs	r2, BASEPRI
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	b672      	cpsid	i
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	b662      	cpsie	i
 800b9d6:	617a      	str	r2, [r7, #20]
 800b9d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b9da:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b9dc:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b9e4:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f2:	1c5a      	adds	r2, r3, #1
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f6:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b9f8:	7ffb      	ldrb	r3, [r7, #31]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d148      	bne.n	800ba90 <vTaskNotifyGiveFromISR+0x104>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00c      	beq.n	800ba20 <vTaskNotifyGiveFromISR+0x94>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	b672      	cpsid	i
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	b662      	cpsie	i
 800ba1a:	60fb      	str	r3, [r7, #12]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba20:	4b20      	ldr	r3, [pc, #128]	; (800baa4 <vTaskNotifyGiveFromISR+0x118>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d11d      	bne.n	800ba64 <vTaskNotifyGiveFromISR+0xd8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7fe facd 	bl	8009fcc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba36:	4b1c      	ldr	r3, [pc, #112]	; (800baa8 <vTaskNotifyGiveFromISR+0x11c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d903      	bls.n	800ba46 <vTaskNotifyGiveFromISR+0xba>
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba42:	4a19      	ldr	r2, [pc, #100]	; (800baa8 <vTaskNotifyGiveFromISR+0x11c>)
 800ba44:	6013      	str	r3, [r2, #0]
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4413      	add	r3, r2
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4a16      	ldr	r2, [pc, #88]	; (800baac <vTaskNotifyGiveFromISR+0x120>)
 800ba54:	441a      	add	r2, r3
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	3304      	adds	r3, #4
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	f7fe fa58 	bl	8009f12 <vListInsertEnd>
 800ba62:	e005      	b.n	800ba70 <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	3318      	adds	r3, #24
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4811      	ldr	r0, [pc, #68]	; (800bab0 <vTaskNotifyGiveFromISR+0x124>)
 800ba6c:	f7fe fa51 	bl	8009f12 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	4b0f      	ldr	r3, [pc, #60]	; (800bab4 <vTaskNotifyGiveFromISR+0x128>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d908      	bls.n	800ba90 <vTaskNotifyGiveFromISR+0x104>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d002      	beq.n	800ba8a <vTaskNotifyGiveFromISR+0xfe>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	2201      	movs	r2, #1
 800ba88:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ba8a:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <vTaskNotifyGiveFromISR+0x12c>)
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	f383 8811 	msr	BASEPRI, r3
}
 800ba9a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ba9c:	bf00      	nop
 800ba9e:	3728      	adds	r7, #40	; 0x28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	20000ec8 	.word	0x20000ec8
 800baa8:	20000ea8 	.word	0x20000ea8
 800baac:	200009d0 	.word	0x200009d0
 800bab0:	20000e60 	.word	0x20000e60
 800bab4:	200009cc 	.word	0x200009cc
 800bab8:	20000eb4 	.word	0x20000eb4

0800babc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bac6:	4b21      	ldr	r3, [pc, #132]	; (800bb4c <prvAddCurrentTaskToDelayedList+0x90>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bacc:	4b20      	ldr	r3, [pc, #128]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	3304      	adds	r3, #4
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fa7a 	bl	8009fcc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bade:	d10a      	bne.n	800baf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bae6:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3304      	adds	r3, #4
 800baec:	4619      	mov	r1, r3
 800baee:	4819      	ldr	r0, [pc, #100]	; (800bb54 <prvAddCurrentTaskToDelayedList+0x98>)
 800baf0:	f7fe fa0f 	bl	8009f12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800baf4:	e026      	b.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4413      	add	r3, r2
 800bafc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bafe:	4b14      	ldr	r3, [pc, #80]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d209      	bcs.n	800bb22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb0e:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	4b0f      	ldr	r3, [pc, #60]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4619      	mov	r1, r3
 800bb1a:	4610      	mov	r0, r2
 800bb1c:	f7fe fa1d 	bl	8009f5a <vListInsert>
}
 800bb20:	e010      	b.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bb22:	4b0e      	ldr	r3, [pc, #56]	; (800bb5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b0a      	ldr	r3, [pc, #40]	; (800bb50 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3304      	adds	r3, #4
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f7fe fa13 	bl	8009f5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d202      	bcs.n	800bb44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bb3e:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	6013      	str	r3, [r2, #0]
}
 800bb44:	bf00      	nop
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20000ea4 	.word	0x20000ea4
 800bb50:	200009cc 	.word	0x200009cc
 800bb54:	20000e8c 	.word	0x20000e8c
 800bb58:	20000e5c 	.word	0x20000e5c
 800bb5c:	20000e58 	.word	0x20000e58
 800bb60:	20000ec0 	.word	0x20000ec0

0800bb64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b08a      	sub	sp, #40	; 0x28
 800bb68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb6e:	f000 fb15 	bl	800c19c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb72:	4b1d      	ldr	r3, [pc, #116]	; (800bbe8 <xTimerCreateTimerTask+0x84>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d021      	beq.n	800bbbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb82:	1d3a      	adds	r2, r7, #4
 800bb84:	f107 0108 	add.w	r1, r7, #8
 800bb88:	f107 030c 	add.w	r3, r7, #12
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe f979 	bl	8009e84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb92:	6879      	ldr	r1, [r7, #4]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	9202      	str	r2, [sp, #8]
 800bb9a:	9301      	str	r3, [sp, #4]
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	2300      	movs	r3, #0
 800bba2:	460a      	mov	r2, r1
 800bba4:	4911      	ldr	r1, [pc, #68]	; (800bbec <xTimerCreateTimerTask+0x88>)
 800bba6:	4812      	ldr	r0, [pc, #72]	; (800bbf0 <xTimerCreateTimerTask+0x8c>)
 800bba8:	f7fe ff44 	bl	800aa34 <xTaskCreateStatic>
 800bbac:	4603      	mov	r3, r0
 800bbae:	4a11      	ldr	r2, [pc, #68]	; (800bbf4 <xTimerCreateTimerTask+0x90>)
 800bbb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bbb2:	4b10      	ldr	r3, [pc, #64]	; (800bbf4 <xTimerCreateTimerTask+0x90>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10c      	bne.n	800bbde <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	b672      	cpsid	i
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	b662      	cpsie	i
 800bbd8:	613b      	str	r3, [r7, #16]
}
 800bbda:	bf00      	nop
 800bbdc:	e7fe      	b.n	800bbdc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bbde:	697b      	ldr	r3, [r7, #20]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20000efc 	.word	0x20000efc
 800bbec:	080106c0 	.word	0x080106c0
 800bbf0:	0800bd35 	.word	0x0800bd35
 800bbf4:	20000f00 	.word	0x20000f00

0800bbf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08a      	sub	sp, #40	; 0x28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bc06:	2300      	movs	r3, #0
 800bc08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <xTimerGenericCommand+0x32>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	b672      	cpsid	i
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	b662      	cpsie	i
 800bc24:	623b      	str	r3, [r7, #32]
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bc2a:	4b1a      	ldr	r3, [pc, #104]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d02a      	beq.n	800bc88 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b05      	cmp	r3, #5
 800bc42:	dc18      	bgt.n	800bc76 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bc44:	f7ff fdca 	bl	800b7dc <xTaskGetSchedulerState>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d109      	bne.n	800bc62 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc50:	6818      	ldr	r0, [r3, #0]
 800bc52:	f107 0110 	add.w	r1, r7, #16
 800bc56:	2300      	movs	r3, #0
 800bc58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc5a:	f7fe faf1 	bl	800a240 <xQueueGenericSend>
 800bc5e:	6278      	str	r0, [r7, #36]	; 0x24
 800bc60:	e012      	b.n	800bc88 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc62:	4b0c      	ldr	r3, [pc, #48]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f107 0110 	add.w	r1, r7, #16
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f7fe fae7 	bl	800a240 <xQueueGenericSend>
 800bc72:	6278      	str	r0, [r7, #36]	; 0x24
 800bc74:	e008      	b.n	800bc88 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc76:	4b07      	ldr	r3, [pc, #28]	; (800bc94 <xTimerGenericCommand+0x9c>)
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	f107 0110 	add.w	r1, r7, #16
 800bc7e:	2300      	movs	r3, #0
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	f7fe fbe3 	bl	800a44c <xQueueGenericSendFromISR>
 800bc86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3728      	adds	r7, #40	; 0x28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	bf00      	nop
 800bc94:	20000efc 	.word	0x20000efc

0800bc98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af02      	add	r7, sp, #8
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bca2:	4b23      	ldr	r3, [pc, #140]	; (800bd30 <prvProcessExpiredTimer+0x98>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7fe f98b 	bl	8009fcc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d024      	beq.n	800bd0e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	699a      	ldr	r2, [r3, #24]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	18d1      	adds	r1, r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	6978      	ldr	r0, [r7, #20]
 800bcd2:	f000 f8d3 	bl	800be7c <prvInsertTimerInActiveList>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d021      	beq.n	800bd20 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bcdc:	2300      	movs	r3, #0
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	2100      	movs	r1, #0
 800bce6:	6978      	ldr	r0, [r7, #20]
 800bce8:	f7ff ff86 	bl	800bbf8 <xTimerGenericCommand>
 800bcec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d115      	bne.n	800bd20 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf8:	b672      	cpsid	i
 800bcfa:	f383 8811 	msr	BASEPRI, r3
 800bcfe:	f3bf 8f6f 	isb	sy
 800bd02:	f3bf 8f4f 	dsb	sy
 800bd06:	b662      	cpsie	i
 800bd08:	60fb      	str	r3, [r7, #12]
}
 800bd0a:	bf00      	nop
 800bd0c:	e7fe      	b.n	800bd0c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd14:	f023 0301 	bic.w	r3, r3, #1
 800bd18:	b2da      	uxtb	r2, r3
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	6a1b      	ldr	r3, [r3, #32]
 800bd24:	6978      	ldr	r0, [r7, #20]
 800bd26:	4798      	blx	r3
}
 800bd28:	bf00      	nop
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20000ef4 	.word	0x20000ef4

0800bd34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd3c:	f107 0308 	add.w	r3, r7, #8
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 f857 	bl	800bdf4 <prvGetNextExpireTime>
 800bd46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 f803 	bl	800bd58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bd52:	f000 f8d5 	bl	800bf00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bd56:	e7f1      	b.n	800bd3c <prvTimerTask+0x8>

0800bd58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd62:	f7ff f935 	bl	800afd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f866 	bl	800be3c <prvSampleTimeNow>
 800bd70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d130      	bne.n	800bdda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10a      	bne.n	800bd94 <prvProcessTimerOrBlockTask+0x3c>
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d806      	bhi.n	800bd94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd86:	f7ff f931 	bl	800afec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd8a:	68f9      	ldr	r1, [r7, #12]
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff ff83 	bl	800bc98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd92:	e024      	b.n	800bdde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d008      	beq.n	800bdac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd9a:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <prvProcessTimerOrBlockTask+0x90>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <prvProcessTimerOrBlockTask+0x50>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e000      	b.n	800bdaa <prvProcessTimerOrBlockTask+0x52>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <prvProcessTimerOrBlockTask+0x94>)
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	1ad3      	subs	r3, r2, r3
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	f7fe fe07 	bl	800a9cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bdbe:	f7ff f915 	bl	800afec <xTaskResumeAll>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bdc8:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <prvProcessTimerOrBlockTask+0x98>)
 800bdca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdce:	601a      	str	r2, [r3, #0]
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	f3bf 8f6f 	isb	sy
}
 800bdd8:	e001      	b.n	800bdde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bdda:	f7ff f907 	bl	800afec <xTaskResumeAll>
}
 800bdde:	bf00      	nop
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}
 800bde6:	bf00      	nop
 800bde8:	20000ef8 	.word	0x20000ef8
 800bdec:	20000efc 	.word	0x20000efc
 800bdf0:	e000ed04 	.word	0xe000ed04

0800bdf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bdfc:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <prvGetNextExpireTime+0x44>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <prvGetNextExpireTime+0x16>
 800be06:	2201      	movs	r2, #1
 800be08:	e000      	b.n	800be0c <prvGetNextExpireTime+0x18>
 800be0a:	2200      	movs	r2, #0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d105      	bne.n	800be24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be18:	4b07      	ldr	r3, [pc, #28]	; (800be38 <prvGetNextExpireTime+0x44>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
 800be22:	e001      	b.n	800be28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800be28:	68fb      	ldr	r3, [r7, #12]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20000ef4 	.word	0x20000ef4

0800be3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b084      	sub	sp, #16
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800be44:	f7ff f972 	bl	800b12c <xTaskGetTickCount>
 800be48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800be4a:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <prvSampleTimeNow+0x3c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68fa      	ldr	r2, [r7, #12]
 800be50:	429a      	cmp	r2, r3
 800be52:	d205      	bcs.n	800be60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800be54:	f000 f93c 	bl	800c0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	e002      	b.n	800be66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be66:	4a04      	ldr	r2, [pc, #16]	; (800be78 <prvSampleTimeNow+0x3c>)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be6c:	68fb      	ldr	r3, [r7, #12]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	20000f04 	.word	0x20000f04

0800be7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
 800be88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d812      	bhi.n	800bec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	429a      	cmp	r2, r3
 800beae:	d302      	bcc.n	800beb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800beb0:	2301      	movs	r3, #1
 800beb2:	617b      	str	r3, [r7, #20]
 800beb4:	e01b      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <prvInsertTimerInActiveList+0x7c>)
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3304      	adds	r3, #4
 800bebe:	4619      	mov	r1, r3
 800bec0:	4610      	mov	r0, r2
 800bec2:	f7fe f84a 	bl	8009f5a <vListInsert>
 800bec6:	e012      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	429a      	cmp	r2, r3
 800bece:	d206      	bcs.n	800bede <prvInsertTimerInActiveList+0x62>
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d302      	bcc.n	800bede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bed8:	2301      	movs	r3, #1
 800beda:	617b      	str	r3, [r7, #20]
 800bedc:	e007      	b.n	800beee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bede:	4b07      	ldr	r3, [pc, #28]	; (800befc <prvInsertTimerInActiveList+0x80>)
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fe f836 	bl	8009f5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800beee:	697b      	ldr	r3, [r7, #20]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3718      	adds	r7, #24
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	20000ef8 	.word	0x20000ef8
 800befc:	20000ef4 	.word	0x20000ef4

0800bf00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08e      	sub	sp, #56	; 0x38
 800bf04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf06:	e0d0      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da1a      	bge.n	800bf44 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bf0e:	1d3b      	adds	r3, r7, #4
 800bf10:	3304      	adds	r3, #4
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10c      	bne.n	800bf34 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	b672      	cpsid	i
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	b662      	cpsie	i
 800bf2e:	61fb      	str	r3, [r7, #28]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3a:	6850      	ldr	r0, [r2, #4]
 800bf3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf3e:	6892      	ldr	r2, [r2, #8]
 800bf40:	4611      	mov	r1, r2
 800bf42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	f2c0 80ae 	blt.w	800c0a8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bf50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fe f835 	bl	8009fcc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf62:	463b      	mov	r3, r7
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff ff69 	bl	800be3c <prvSampleTimeNow>
 800bf6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b09      	cmp	r3, #9
 800bf70:	f200 809b 	bhi.w	800c0aa <prvProcessReceivedCommands+0x1aa>
 800bf74:	a201      	add	r2, pc, #4	; (adr r2, 800bf7c <prvProcessReceivedCommands+0x7c>)
 800bf76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf7a:	bf00      	nop
 800bf7c:	0800bfa5 	.word	0x0800bfa5
 800bf80:	0800bfa5 	.word	0x0800bfa5
 800bf84:	0800bfa5 	.word	0x0800bfa5
 800bf88:	0800c01d 	.word	0x0800c01d
 800bf8c:	0800c031 	.word	0x0800c031
 800bf90:	0800c07f 	.word	0x0800c07f
 800bf94:	0800bfa5 	.word	0x0800bfa5
 800bf98:	0800bfa5 	.word	0x0800bfa5
 800bf9c:	0800c01d 	.word	0x0800c01d
 800bfa0:	0800c031 	.word	0x0800c031
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfaa:	f043 0301 	orr.w	r3, r3, #1
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	18d1      	adds	r1, r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfc4:	f7ff ff5a 	bl	800be7c <prvInsertTimerInActiveList>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d06d      	beq.n	800c0aa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bfd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfdc:	f003 0304 	and.w	r3, r3, #4
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d062      	beq.n	800c0aa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	441a      	add	r2, r3
 800bfec:	2300      	movs	r3, #0
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	2300      	movs	r3, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bff6:	f7ff fdff 	bl	800bbf8 <xTimerGenericCommand>
 800bffa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d153      	bne.n	800c0aa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	b672      	cpsid	i
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	b662      	cpsie	i
 800c016:	61bb      	str	r3, [r7, #24]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c022:	f023 0301 	bic.w	r3, r3, #1
 800c026:	b2da      	uxtb	r2, r3
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c02e:	e03c      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c036:	f043 0301 	orr.w	r3, r3, #1
 800c03a:	b2da      	uxtb	r2, r3
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c054:	b672      	cpsid	i
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	b662      	cpsie	i
 800c064:	617b      	str	r3, [r7, #20]
}
 800c066:	bf00      	nop
 800c068:	e7fe      	b.n	800c068 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	699a      	ldr	r2, [r3, #24]
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	18d1      	adds	r1, r2, r3
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c078:	f7ff ff00 	bl	800be7c <prvInsertTimerInActiveList>
					break;
 800c07c:	e015      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c084:	f003 0302 	and.w	r3, r3, #2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d103      	bne.n	800c094 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c08c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c08e:	f000 fbcb 	bl	800c828 <vPortFree>
 800c092:	e00a      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c09a:	f023 0301 	bic.w	r3, r3, #1
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c0a6:	e000      	b.n	800c0aa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0aa:	4b08      	ldr	r3, [pc, #32]	; (800c0cc <prvProcessReceivedCommands+0x1cc>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	1d39      	adds	r1, r7, #4
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7fe fa6a 	bl	800a58c <xQueueReceive>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	f47f af24 	bne.w	800bf08 <prvProcessReceivedCommands+0x8>
	}
}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3730      	adds	r7, #48	; 0x30
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	20000efc 	.word	0x20000efc

0800c0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c0d6:	e04a      	b.n	800c16e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0d8:	4b2e      	ldr	r3, [pc, #184]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0e2:	4b2c      	ldr	r3, [pc, #176]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	68db      	ldr	r3, [r3, #12]
 800c0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7fd ff6b 	bl	8009fcc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c104:	f003 0304 	and.w	r3, r3, #4
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d030      	beq.n	800c16e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	4413      	add	r3, r2
 800c114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d90e      	bls.n	800c13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c12a:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fd ff10 	bl	8009f5a <vListInsert>
 800c13a:	e018      	b.n	800c16e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c13c:	2300      	movs	r3, #0
 800c13e:	9300      	str	r3, [sp, #0]
 800c140:	2300      	movs	r3, #0
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	2100      	movs	r1, #0
 800c146:	68f8      	ldr	r0, [r7, #12]
 800c148:	f7ff fd56 	bl	800bbf8 <xTimerGenericCommand>
 800c14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d10c      	bne.n	800c16e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c158:	b672      	cpsid	i
 800c15a:	f383 8811 	msr	BASEPRI, r3
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	b662      	cpsie	i
 800c168:	603b      	str	r3, [r7, #0]
}
 800c16a:	bf00      	nop
 800c16c:	e7fe      	b.n	800c16c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c16e:	4b09      	ldr	r3, [pc, #36]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1af      	bne.n	800c0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c178:	4b06      	ldr	r3, [pc, #24]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c17e:	4b06      	ldr	r3, [pc, #24]	; (800c198 <prvSwitchTimerLists+0xc8>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a04      	ldr	r2, [pc, #16]	; (800c194 <prvSwitchTimerLists+0xc4>)
 800c184:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c186:	4a04      	ldr	r2, [pc, #16]	; (800c198 <prvSwitchTimerLists+0xc8>)
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	6013      	str	r3, [r2, #0]
}
 800c18c:	bf00      	nop
 800c18e:	3718      	adds	r7, #24
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	20000ef4 	.word	0x20000ef4
 800c198:	20000ef8 	.word	0x20000ef8

0800c19c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b082      	sub	sp, #8
 800c1a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c1a2:	f000 f94b 	bl	800c43c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c1a6:	4b15      	ldr	r3, [pc, #84]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d120      	bne.n	800c1f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c1ae:	4814      	ldr	r0, [pc, #80]	; (800c200 <prvCheckForValidListAndQueue+0x64>)
 800c1b0:	f7fd fe82 	bl	8009eb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c1b4:	4813      	ldr	r0, [pc, #76]	; (800c204 <prvCheckForValidListAndQueue+0x68>)
 800c1b6:	f7fd fe7f 	bl	8009eb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c1ba:	4b13      	ldr	r3, [pc, #76]	; (800c208 <prvCheckForValidListAndQueue+0x6c>)
 800c1bc:	4a10      	ldr	r2, [pc, #64]	; (800c200 <prvCheckForValidListAndQueue+0x64>)
 800c1be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c1c0:	4b12      	ldr	r3, [pc, #72]	; (800c20c <prvCheckForValidListAndQueue+0x70>)
 800c1c2:	4a10      	ldr	r2, [pc, #64]	; (800c204 <prvCheckForValidListAndQueue+0x68>)
 800c1c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	4b11      	ldr	r3, [pc, #68]	; (800c210 <prvCheckForValidListAndQueue+0x74>)
 800c1cc:	4a11      	ldr	r2, [pc, #68]	; (800c214 <prvCheckForValidListAndQueue+0x78>)
 800c1ce:	2110      	movs	r1, #16
 800c1d0:	200a      	movs	r0, #10
 800c1d2:	f7fd ff8f 	bl	800a0f4 <xQueueGenericCreateStatic>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4a08      	ldr	r2, [pc, #32]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c1dc:	4b07      	ldr	r3, [pc, #28]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d005      	beq.n	800c1f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c1e4:	4b05      	ldr	r3, [pc, #20]	; (800c1fc <prvCheckForValidListAndQueue+0x60>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	490b      	ldr	r1, [pc, #44]	; (800c218 <prvCheckForValidListAndQueue+0x7c>)
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fbc4 	bl	800a978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c1f0:	f000 f958 	bl	800c4a4 <vPortExitCritical>
}
 800c1f4:	bf00      	nop
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd80      	pop	{r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000efc 	.word	0x20000efc
 800c200:	20000ecc 	.word	0x20000ecc
 800c204:	20000ee0 	.word	0x20000ee0
 800c208:	20000ef4 	.word	0x20000ef4
 800c20c:	20000ef8 	.word	0x20000ef8
 800c210:	20000fa8 	.word	0x20000fa8
 800c214:	20000f08 	.word	0x20000f08
 800c218:	080106c8 	.word	0x080106c8

0800c21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3b04      	subs	r3, #4
 800c22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3b04      	subs	r3, #4
 800c23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f023 0201 	bic.w	r2, r3, #1
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3b04      	subs	r3, #4
 800c24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c24c:	4a0c      	ldr	r2, [pc, #48]	; (800c280 <pxPortInitialiseStack+0x64>)
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3b14      	subs	r3, #20
 800c256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	3b04      	subs	r3, #4
 800c262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f06f 0202 	mvn.w	r2, #2
 800c26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3b20      	subs	r3, #32
 800c270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c272:	68fb      	ldr	r3, [r7, #12]
}
 800c274:	4618      	mov	r0, r3
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr
 800c280:	0800c285 	.word	0x0800c285

0800c284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c28e:	4b14      	ldr	r3, [pc, #80]	; (800c2e0 <prvTaskExitError+0x5c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d00c      	beq.n	800c2b2 <prvTaskExitError+0x2e>
	__asm volatile
 800c298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29c:	b672      	cpsid	i
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	b662      	cpsie	i
 800c2ac:	60fb      	str	r3, [r7, #12]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	b672      	cpsid	i
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	b662      	cpsie	i
 800c2c6:	60bb      	str	r3, [r7, #8]
}
 800c2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c2ca:	bf00      	nop
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0fc      	beq.n	800c2cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c2d2:	bf00      	nop
 800c2d4:	bf00      	nop
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	2000000c 	.word	0x2000000c
	...

0800c2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <pxCurrentTCBConst2>)
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f380 8809 	msr	PSP, r0
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f04f 0000 	mov.w	r0, #0
 800c306:	f380 8811 	msr	BASEPRI, r0
 800c30a:	4770      	bx	lr
 800c30c:	f3af 8000 	nop.w

0800c310 <pxCurrentTCBConst2>:
 800c310:	200009cc 	.word	0x200009cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c318:	4808      	ldr	r0, [pc, #32]	; (800c33c <prvPortStartFirstTask+0x24>)
 800c31a:	6800      	ldr	r0, [r0, #0]
 800c31c:	6800      	ldr	r0, [r0, #0]
 800c31e:	f380 8808 	msr	MSP, r0
 800c322:	f04f 0000 	mov.w	r0, #0
 800c326:	f380 8814 	msr	CONTROL, r0
 800c32a:	b662      	cpsie	i
 800c32c:	b661      	cpsie	f
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	df00      	svc	0
 800c338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c33a:	bf00      	nop
 800c33c:	e000ed08 	.word	0xe000ed08

0800c340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c346:	4b37      	ldr	r3, [pc, #220]	; (800c424 <xPortStartScheduler+0xe4>)
 800c348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	22ff      	movs	r2, #255	; 0xff
 800c356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c360:	78fb      	ldrb	r3, [r7, #3]
 800c362:	b2db      	uxtb	r3, r3
 800c364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	4b2f      	ldr	r3, [pc, #188]	; (800c428 <xPortStartScheduler+0xe8>)
 800c36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c36e:	4b2f      	ldr	r3, [pc, #188]	; (800c42c <xPortStartScheduler+0xec>)
 800c370:	2207      	movs	r2, #7
 800c372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c374:	e009      	b.n	800c38a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c376:	4b2d      	ldr	r3, [pc, #180]	; (800c42c <xPortStartScheduler+0xec>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	4a2b      	ldr	r2, [pc, #172]	; (800c42c <xPortStartScheduler+0xec>)
 800c37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c380:	78fb      	ldrb	r3, [r7, #3]
 800c382:	b2db      	uxtb	r3, r3
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	b2db      	uxtb	r3, r3
 800c388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38a:	78fb      	ldrb	r3, [r7, #3]
 800c38c:	b2db      	uxtb	r3, r3
 800c38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c392:	2b80      	cmp	r3, #128	; 0x80
 800c394:	d0ef      	beq.n	800c376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c396:	4b25      	ldr	r3, [pc, #148]	; (800c42c <xPortStartScheduler+0xec>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f1c3 0307 	rsb	r3, r3, #7
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d00c      	beq.n	800c3bc <xPortStartScheduler+0x7c>
	__asm volatile
 800c3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a6:	b672      	cpsid	i
 800c3a8:	f383 8811 	msr	BASEPRI, r3
 800c3ac:	f3bf 8f6f 	isb	sy
 800c3b0:	f3bf 8f4f 	dsb	sy
 800c3b4:	b662      	cpsie	i
 800c3b6:	60bb      	str	r3, [r7, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	e7fe      	b.n	800c3ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3bc:	4b1b      	ldr	r3, [pc, #108]	; (800c42c <xPortStartScheduler+0xec>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	021b      	lsls	r3, r3, #8
 800c3c2:	4a1a      	ldr	r2, [pc, #104]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c6:	4b19      	ldr	r3, [pc, #100]	; (800c42c <xPortStartScheduler+0xec>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3ce:	4a17      	ldr	r2, [pc, #92]	; (800c42c <xPortStartScheduler+0xec>)
 800c3d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3da:	4b15      	ldr	r3, [pc, #84]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a14      	ldr	r2, [pc, #80]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c3e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a11      	ldr	r2, [pc, #68]	; (800c430 <xPortStartScheduler+0xf0>)
 800c3ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c3f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3f2:	f000 f8dd 	bl	800c5b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f6:	4b0f      	ldr	r3, [pc, #60]	; (800c434 <xPortStartScheduler+0xf4>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3fc:	f000 f8fc 	bl	800c5f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <xPortStartScheduler+0xf8>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <xPortStartScheduler+0xf8>)
 800c406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c40a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c40c:	f7ff ff84 	bl	800c318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c410:	f7fe ff6a 	bl	800b2e8 <vTaskSwitchContext>
	prvTaskExitError();
 800c414:	f7ff ff36 	bl	800c284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	e000e400 	.word	0xe000e400
 800c428:	20000ff8 	.word	0x20000ff8
 800c42c:	20000ffc 	.word	0x20000ffc
 800c430:	e000ed20 	.word	0xe000ed20
 800c434:	2000000c 	.word	0x2000000c
 800c438:	e000ef34 	.word	0xe000ef34

0800c43c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c446:	b672      	cpsid	i
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	b662      	cpsie	i
 800c456:	607b      	str	r3, [r7, #4]
}
 800c458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c45a:	4b10      	ldr	r3, [pc, #64]	; (800c49c <vPortEnterCritical+0x60>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3301      	adds	r3, #1
 800c460:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <vPortEnterCritical+0x60>)
 800c462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c464:	4b0d      	ldr	r3, [pc, #52]	; (800c49c <vPortEnterCritical+0x60>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d111      	bne.n	800c490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c46c:	4b0c      	ldr	r3, [pc, #48]	; (800c4a0 <vPortEnterCritical+0x64>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00c      	beq.n	800c490 <vPortEnterCritical+0x54>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	b672      	cpsid	i
 800c47c:	f383 8811 	msr	BASEPRI, r3
 800c480:	f3bf 8f6f 	isb	sy
 800c484:	f3bf 8f4f 	dsb	sy
 800c488:	b662      	cpsie	i
 800c48a:	603b      	str	r3, [r7, #0]
}
 800c48c:	bf00      	nop
 800c48e:	e7fe      	b.n	800c48e <vPortEnterCritical+0x52>
	}
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	2000000c 	.word	0x2000000c
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4aa:	4b13      	ldr	r3, [pc, #76]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10c      	bne.n	800c4cc <vPortExitCritical+0x28>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	607b      	str	r3, [r7, #4]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	4a09      	ldr	r2, [pc, #36]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <vPortExitCritical+0x54>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d105      	bne.n	800c4ea <vPortExitCritical+0x46>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	f383 8811 	msr	BASEPRI, r3
}
 800c4e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4ea:	bf00      	nop
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr
 800c4f6:	bf00      	nop
 800c4f8:	2000000c 	.word	0x2000000c
 800c4fc:	00000000 	.word	0x00000000

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	; (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c524:	b672      	cpsid	i
 800c526:	f380 8811 	msr	BASEPRI, r0
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	b662      	cpsie	i
 800c534:	f7fe fed8 	bl	800b2e8 <vTaskSwitchContext>
 800c538:	f04f 0000 	mov.w	r0, #0
 800c53c:	f380 8811 	msr	BASEPRI, r0
 800c540:	bc09      	pop	{r0, r3}
 800c542:	6819      	ldr	r1, [r3, #0]
 800c544:	6808      	ldr	r0, [r1, #0]
 800c546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54a:	f01e 0f10 	tst.w	lr, #16
 800c54e:	bf08      	it	eq
 800c550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c554:	f380 8809 	msr	PSP, r0
 800c558:	f3bf 8f6f 	isb	sy
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop

0800c560 <pxCurrentTCBConst>:
 800c560:	200009cc 	.word	0x200009cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c572:	b672      	cpsid	i
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	b662      	cpsie	i
 800c582:	607b      	str	r3, [r7, #4]
}
 800c584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c586:	f7fe fdf3 	bl	800b170 <xTaskIncrementTick>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d003      	beq.n	800c598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <SysTick_Handler+0x44>)
 800c592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c596:	601a      	str	r2, [r3, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f383 8811 	msr	BASEPRI, r3
}
 800c5a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	e000ed04 	.word	0xe000ed04

0800c5b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b4:	4b0b      	ldr	r3, [pc, #44]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5ba:	4b0b      	ldr	r3, [pc, #44]	; (800c5e8 <vPortSetupTimerInterrupt+0x38>)
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <vPortSetupTimerInterrupt+0x3c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a0a      	ldr	r2, [pc, #40]	; (800c5f0 <vPortSetupTimerInterrupt+0x40>)
 800c5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5ca:	099b      	lsrs	r3, r3, #6
 800c5cc:	4a09      	ldr	r2, [pc, #36]	; (800c5f4 <vPortSetupTimerInterrupt+0x44>)
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5d2:	4b04      	ldr	r3, [pc, #16]	; (800c5e4 <vPortSetupTimerInterrupt+0x34>)
 800c5d4:	2207      	movs	r2, #7
 800c5d6:	601a      	str	r2, [r3, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	e000e010 	.word	0xe000e010
 800c5e8:	e000e018 	.word	0xe000e018
 800c5ec:	20000000 	.word	0x20000000
 800c5f0:	10624dd3 	.word	0x10624dd3
 800c5f4:	e000e014 	.word	0xe000e014

0800c5f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c608 <vPortEnableVFP+0x10>
 800c5fc:	6801      	ldr	r1, [r0, #0]
 800c5fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c602:	6001      	str	r1, [r0, #0]
 800c604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c606:	bf00      	nop
 800c608:	e000ed88 	.word	0xe000ed88

0800c60c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c612:	f3ef 8305 	mrs	r3, IPSR
 800c616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2b0f      	cmp	r3, #15
 800c61c:	d916      	bls.n	800c64c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61e:	4a19      	ldr	r2, [pc, #100]	; (800c684 <vPortValidateInterruptPriority+0x78>)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4413      	add	r3, r2
 800c624:	781b      	ldrb	r3, [r3, #0]
 800c626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <vPortValidateInterruptPriority+0x7c>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	7afa      	ldrb	r2, [r7, #11]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d20c      	bcs.n	800c64c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	607b      	str	r3, [r7, #4]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c64c:	4b0f      	ldr	r3, [pc, #60]	; (800c68c <vPortValidateInterruptPriority+0x80>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c654:	4b0e      	ldr	r3, [pc, #56]	; (800c690 <vPortValidateInterruptPriority+0x84>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d90c      	bls.n	800c676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c660:	b672      	cpsid	i
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	b662      	cpsie	i
 800c670:	603b      	str	r3, [r7, #0]
}
 800c672:	bf00      	nop
 800c674:	e7fe      	b.n	800c674 <vPortValidateInterruptPriority+0x68>
	}
 800c676:	bf00      	nop
 800c678:	3714      	adds	r7, #20
 800c67a:	46bd      	mov	sp, r7
 800c67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	e000e3f0 	.word	0xe000e3f0
 800c688:	20000ff8 	.word	0x20000ff8
 800c68c:	e000ed0c 	.word	0xe000ed0c
 800c690:	20000ffc 	.word	0x20000ffc

0800c694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08a      	sub	sp, #40	; 0x28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c6a0:	f7fe fc96 	bl	800afd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c6a4:	4b5b      	ldr	r3, [pc, #364]	; (800c814 <pvPortMalloc+0x180>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6ac:	f000 f91a 	bl	800c8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6b0:	4b59      	ldr	r3, [pc, #356]	; (800c818 <pvPortMalloc+0x184>)
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f040 8092 	bne.w	800c7e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d01f      	beq.n	800c704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c6c4:	2208      	movs	r2, #8
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d016      	beq.n	800c704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f023 0307 	bic.w	r3, r3, #7
 800c6dc:	3308      	adds	r3, #8
 800c6de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00c      	beq.n	800c704 <pvPortMalloc+0x70>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	b672      	cpsid	i
 800c6f0:	f383 8811 	msr	BASEPRI, r3
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	b662      	cpsie	i
 800c6fe:	617b      	str	r3, [r7, #20]
}
 800c700:	bf00      	nop
 800c702:	e7fe      	b.n	800c702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d06b      	beq.n	800c7e2 <pvPortMalloc+0x14e>
 800c70a:	4b44      	ldr	r3, [pc, #272]	; (800c81c <pvPortMalloc+0x188>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	687a      	ldr	r2, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d866      	bhi.n	800c7e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c714:	4b42      	ldr	r3, [pc, #264]	; (800c820 <pvPortMalloc+0x18c>)
 800c716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c718:	4b41      	ldr	r3, [pc, #260]	; (800c820 <pvPortMalloc+0x18c>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c71e:	e004      	b.n	800c72a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	429a      	cmp	r2, r3
 800c732:	d903      	bls.n	800c73c <pvPortMalloc+0xa8>
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1f1      	bne.n	800c720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c73c:	4b35      	ldr	r3, [pc, #212]	; (800c814 <pvPortMalloc+0x180>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c742:	429a      	cmp	r2, r3
 800c744:	d04d      	beq.n	800c7e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2208      	movs	r2, #8
 800c74c:	4413      	add	r3, r2
 800c74e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	6a3b      	ldr	r3, [r7, #32]
 800c756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	2308      	movs	r3, #8
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	429a      	cmp	r2, r3
 800c766:	d921      	bls.n	800c7ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00c      	beq.n	800c794 <pvPortMalloc+0x100>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	b672      	cpsid	i
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	b662      	cpsie	i
 800c78e:	613b      	str	r3, [r7, #16]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	1ad2      	subs	r2, r2, r3
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c7a6:	69b8      	ldr	r0, [r7, #24]
 800c7a8:	f000 f8fe 	bl	800c9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7ac:	4b1b      	ldr	r3, [pc, #108]	; (800c81c <pvPortMalloc+0x188>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	4a19      	ldr	r2, [pc, #100]	; (800c81c <pvPortMalloc+0x188>)
 800c7b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ba:	4b18      	ldr	r3, [pc, #96]	; (800c81c <pvPortMalloc+0x188>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	4b19      	ldr	r3, [pc, #100]	; (800c824 <pvPortMalloc+0x190>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d203      	bcs.n	800c7ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7c6:	4b15      	ldr	r3, [pc, #84]	; (800c81c <pvPortMalloc+0x188>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a16      	ldr	r2, [pc, #88]	; (800c824 <pvPortMalloc+0x190>)
 800c7cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	685a      	ldr	r2, [r3, #4]
 800c7d2:	4b11      	ldr	r3, [pc, #68]	; (800c818 <pvPortMalloc+0x184>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7e2:	f7fe fc03 	bl	800afec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00c      	beq.n	800c80a <pvPortMalloc+0x176>
	__asm volatile
 800c7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f4:	b672      	cpsid	i
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	b662      	cpsie	i
 800c804:	60fb      	str	r3, [r7, #12]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <pvPortMalloc+0x174>
	return pvReturn;
 800c80a:	69fb      	ldr	r3, [r7, #28]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	3728      	adds	r7, #40	; 0x28
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	20004c08 	.word	0x20004c08
 800c818:	20004c14 	.word	0x20004c14
 800c81c:	20004c0c 	.word	0x20004c0c
 800c820:	20004c00 	.word	0x20004c00
 800c824:	20004c10 	.word	0x20004c10

0800c828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d04c      	beq.n	800c8d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c83a:	2308      	movs	r3, #8
 800c83c:	425b      	negs	r3, r3
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	4b23      	ldr	r3, [pc, #140]	; (800c8dc <vPortFree+0xb4>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4013      	ands	r3, r2
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10c      	bne.n	800c870 <vPortFree+0x48>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85a:	b672      	cpsid	i
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	b662      	cpsie	i
 800c86a:	60fb      	str	r3, [r7, #12]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d00c      	beq.n	800c892 <vPortFree+0x6a>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c87c:	b672      	cpsid	i
 800c87e:	f383 8811 	msr	BASEPRI, r3
 800c882:	f3bf 8f6f 	isb	sy
 800c886:	f3bf 8f4f 	dsb	sy
 800c88a:	b662      	cpsie	i
 800c88c:	60bb      	str	r3, [r7, #8]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	4b11      	ldr	r3, [pc, #68]	; (800c8dc <vPortFree+0xb4>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4013      	ands	r3, r2
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d019      	beq.n	800c8d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d115      	bne.n	800c8d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	685a      	ldr	r2, [r3, #4]
 800c8ac:	4b0b      	ldr	r3, [pc, #44]	; (800c8dc <vPortFree+0xb4>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	43db      	mvns	r3, r3
 800c8b2:	401a      	ands	r2, r3
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8b8:	f7fe fb8a 	bl	800afd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	4b07      	ldr	r3, [pc, #28]	; (800c8e0 <vPortFree+0xb8>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	4a06      	ldr	r2, [pc, #24]	; (800c8e0 <vPortFree+0xb8>)
 800c8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8ca:	6938      	ldr	r0, [r7, #16]
 800c8cc:	f000 f86c 	bl	800c9a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c8d0:	f7fe fb8c 	bl	800afec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8d4:	bf00      	nop
 800c8d6:	3718      	adds	r7, #24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	20004c14 	.word	0x20004c14
 800c8e0:	20004c0c 	.word	0x20004c0c

0800c8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8f0:	4b27      	ldr	r3, [pc, #156]	; (800c990 <prvHeapInit+0xac>)
 800c8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00c      	beq.n	800c918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3307      	adds	r3, #7
 800c902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 0307 	bic.w	r3, r3, #7
 800c90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <prvHeapInit+0xac>)
 800c914:	4413      	add	r3, r2
 800c916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c91c:	4a1d      	ldr	r2, [pc, #116]	; (800c994 <prvHeapInit+0xb0>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c922:	4b1c      	ldr	r3, [pc, #112]	; (800c994 <prvHeapInit+0xb0>)
 800c924:	2200      	movs	r2, #0
 800c926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c930:	2208      	movs	r2, #8
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	1a9b      	subs	r3, r3, r2
 800c936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 0307 	bic.w	r3, r3, #7
 800c93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4a15      	ldr	r2, [pc, #84]	; (800c998 <prvHeapInit+0xb4>)
 800c944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <prvHeapInit+0xb4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <prvHeapInit+0xb4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c964:	4b0c      	ldr	r3, [pc, #48]	; (800c998 <prvHeapInit+0xb4>)
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	4a0a      	ldr	r2, [pc, #40]	; (800c99c <prvHeapInit+0xb8>)
 800c972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	4a09      	ldr	r2, [pc, #36]	; (800c9a0 <prvHeapInit+0xbc>)
 800c97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c97c:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <prvHeapInit+0xc0>)
 800c97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bf00      	nop
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr
 800c990:	20001000 	.word	0x20001000
 800c994:	20004c00 	.word	0x20004c00
 800c998:	20004c08 	.word	0x20004c08
 800c99c:	20004c10 	.word	0x20004c10
 800c9a0:	20004c0c 	.word	0x20004c0c
 800c9a4:	20004c14 	.word	0x20004c14

0800c9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b085      	sub	sp, #20
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9b0:	4b28      	ldr	r3, [pc, #160]	; (800ca54 <prvInsertBlockIntoFreeList+0xac>)
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e002      	b.n	800c9bc <prvInsertBlockIntoFreeList+0x14>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d8f7      	bhi.n	800c9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d108      	bne.n	800c9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	441a      	add	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	68ba      	ldr	r2, [r7, #8]
 800c9f4:	441a      	add	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d118      	bne.n	800ca30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d00d      	beq.n	800ca26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	441a      	add	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	601a      	str	r2, [r3, #0]
 800ca24:	e008      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca26:	4b0c      	ldr	r3, [pc, #48]	; (800ca58 <prvInsertBlockIntoFreeList+0xb0>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	e003      	b.n	800ca38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d002      	beq.n	800ca46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	687a      	ldr	r2, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20004c00 	.word	0x20004c00
 800ca58:	20004c08 	.word	0x20004c08

0800ca5c <arm_sin_f32>:
 800ca5c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ca60:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800cad8 <arm_sin_f32+0x7c>
 800ca64:	ee20 7a07 	vmul.f32	s14, s0, s14
 800ca68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800ca70:	d42c      	bmi.n	800cacc <arm_sin_f32+0x70>
 800ca72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca76:	eddf 6a19 	vldr	s13, [pc, #100]	; 800cadc <arm_sin_f32+0x80>
 800ca7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca82:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ca86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca8a:	db01      	blt.n	800ca90 <arm_sin_f32+0x34>
 800ca8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca90:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800ca94:	4a12      	ldr	r2, [pc, #72]	; (800cae0 <arm_sin_f32+0x84>)
 800ca96:	ee17 3a10 	vmov	r3, s14
 800ca9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa2:	ee06 3a90 	vmov	s13, r3
 800caa6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800caaa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800caae:	ed91 0a00 	vldr	s0, [r1]
 800cab2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cab6:	edd1 6a01 	vldr	s13, [r1, #4]
 800caba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cabe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cac2:	ee27 0a00 	vmul.f32	s0, s14, s0
 800cac6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800caca:	4770      	bx	lr
 800cacc:	ee17 3a90 	vmov	r3, s15
 800cad0:	3b01      	subs	r3, #1
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	e7cc      	b.n	800ca72 <arm_sin_f32+0x16>
 800cad8:	3e22f983 	.word	0x3e22f983
 800cadc:	44000000 	.word	0x44000000
 800cae0:	0801079c 	.word	0x0801079c

0800cae4 <__cxa_guard_acquire>:
 800cae4:	6803      	ldr	r3, [r0, #0]
 800cae6:	07db      	lsls	r3, r3, #31
 800cae8:	d406      	bmi.n	800caf8 <__cxa_guard_acquire+0x14>
 800caea:	7843      	ldrb	r3, [r0, #1]
 800caec:	b103      	cbz	r3, 800caf0 <__cxa_guard_acquire+0xc>
 800caee:	deff      	udf	#255	; 0xff
 800caf0:	2301      	movs	r3, #1
 800caf2:	7043      	strb	r3, [r0, #1]
 800caf4:	4618      	mov	r0, r3
 800caf6:	4770      	bx	lr
 800caf8:	2000      	movs	r0, #0
 800cafa:	4770      	bx	lr

0800cafc <__cxa_guard_release>:
 800cafc:	2301      	movs	r3, #1
 800cafe:	6003      	str	r3, [r0, #0]
 800cb00:	4770      	bx	lr

0800cb02 <__cxa_pure_virtual>:
 800cb02:	b508      	push	{r3, lr}
 800cb04:	f000 f80c 	bl	800cb20 <_ZSt9terminatev>

0800cb08 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800cb08:	b508      	push	{r3, lr}
 800cb0a:	4780      	blx	r0
 800cb0c:	f000 f890 	bl	800cc30 <abort>

0800cb10 <_ZSt13get_terminatev>:
 800cb10:	4b02      	ldr	r3, [pc, #8]	; (800cb1c <_ZSt13get_terminatev+0xc>)
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	f3bf 8f5b 	dmb	ish
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	20000010 	.word	0x20000010

0800cb20 <_ZSt9terminatev>:
 800cb20:	b508      	push	{r3, lr}
 800cb22:	f7ff fff5 	bl	800cb10 <_ZSt13get_terminatev>
 800cb26:	f7ff ffef 	bl	800cb08 <_ZN10__cxxabiv111__terminateEPFvvE>
 800cb2a:	0000      	movs	r0, r0
 800cb2c:	0000      	movs	r0, r0
	...

0800cb30 <floor>:
 800cb30:	ec51 0b10 	vmov	r0, r1, d0
 800cb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cb3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cb40:	2e13      	cmp	r6, #19
 800cb42:	ee10 5a10 	vmov	r5, s0
 800cb46:	ee10 8a10 	vmov	r8, s0
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	dc32      	bgt.n	800cbb4 <floor+0x84>
 800cb4e:	2e00      	cmp	r6, #0
 800cb50:	da14      	bge.n	800cb7c <floor+0x4c>
 800cb52:	a333      	add	r3, pc, #204	; (adr r3, 800cc20 <floor+0xf0>)
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	f7f3 fbc0 	bl	80002dc <__adddf3>
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f7f4 f802 	bl	8000b68 <__aeabi_dcmpgt>
 800cb64:	b138      	cbz	r0, 800cb76 <floor+0x46>
 800cb66:	2c00      	cmp	r4, #0
 800cb68:	da57      	bge.n	800cc1a <floor+0xea>
 800cb6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cb6e:	431d      	orrs	r5, r3
 800cb70:	d001      	beq.n	800cb76 <floor+0x46>
 800cb72:	4c2d      	ldr	r4, [pc, #180]	; (800cc28 <floor+0xf8>)
 800cb74:	2500      	movs	r5, #0
 800cb76:	4621      	mov	r1, r4
 800cb78:	4628      	mov	r0, r5
 800cb7a:	e025      	b.n	800cbc8 <floor+0x98>
 800cb7c:	4f2b      	ldr	r7, [pc, #172]	; (800cc2c <floor+0xfc>)
 800cb7e:	4137      	asrs	r7, r6
 800cb80:	ea01 0307 	and.w	r3, r1, r7
 800cb84:	4303      	orrs	r3, r0
 800cb86:	d01f      	beq.n	800cbc8 <floor+0x98>
 800cb88:	a325      	add	r3, pc, #148	; (adr r3, 800cc20 <floor+0xf0>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fba5 	bl	80002dc <__adddf3>
 800cb92:	2200      	movs	r2, #0
 800cb94:	2300      	movs	r3, #0
 800cb96:	f7f3 ffe7 	bl	8000b68 <__aeabi_dcmpgt>
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	d0eb      	beq.n	800cb76 <floor+0x46>
 800cb9e:	2c00      	cmp	r4, #0
 800cba0:	bfbe      	ittt	lt
 800cba2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cba6:	fa43 f606 	asrlt.w	r6, r3, r6
 800cbaa:	19a4      	addlt	r4, r4, r6
 800cbac:	ea24 0407 	bic.w	r4, r4, r7
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	e7e0      	b.n	800cb76 <floor+0x46>
 800cbb4:	2e33      	cmp	r6, #51	; 0x33
 800cbb6:	dd0b      	ble.n	800cbd0 <floor+0xa0>
 800cbb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cbbc:	d104      	bne.n	800cbc8 <floor+0x98>
 800cbbe:	ee10 2a10 	vmov	r2, s0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	f7f3 fb8a 	bl	80002dc <__adddf3>
 800cbc8:	ec41 0b10 	vmov	d0, r0, r1
 800cbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cbd4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbd8:	fa23 f707 	lsr.w	r7, r3, r7
 800cbdc:	4207      	tst	r7, r0
 800cbde:	d0f3      	beq.n	800cbc8 <floor+0x98>
 800cbe0:	a30f      	add	r3, pc, #60	; (adr r3, 800cc20 <floor+0xf0>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fb79 	bl	80002dc <__adddf3>
 800cbea:	2200      	movs	r2, #0
 800cbec:	2300      	movs	r3, #0
 800cbee:	f7f3 ffbb 	bl	8000b68 <__aeabi_dcmpgt>
 800cbf2:	2800      	cmp	r0, #0
 800cbf4:	d0bf      	beq.n	800cb76 <floor+0x46>
 800cbf6:	2c00      	cmp	r4, #0
 800cbf8:	da02      	bge.n	800cc00 <floor+0xd0>
 800cbfa:	2e14      	cmp	r6, #20
 800cbfc:	d103      	bne.n	800cc06 <floor+0xd6>
 800cbfe:	3401      	adds	r4, #1
 800cc00:	ea25 0507 	bic.w	r5, r5, r7
 800cc04:	e7b7      	b.n	800cb76 <floor+0x46>
 800cc06:	2301      	movs	r3, #1
 800cc08:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cc0c:	fa03 f606 	lsl.w	r6, r3, r6
 800cc10:	4435      	add	r5, r6
 800cc12:	4545      	cmp	r5, r8
 800cc14:	bf38      	it	cc
 800cc16:	18e4      	addcc	r4, r4, r3
 800cc18:	e7f2      	b.n	800cc00 <floor+0xd0>
 800cc1a:	2500      	movs	r5, #0
 800cc1c:	462c      	mov	r4, r5
 800cc1e:	e7aa      	b.n	800cb76 <floor+0x46>
 800cc20:	8800759c 	.word	0x8800759c
 800cc24:	7e37e43c 	.word	0x7e37e43c
 800cc28:	bff00000 	.word	0xbff00000
 800cc2c:	000fffff 	.word	0x000fffff

0800cc30 <abort>:
 800cc30:	b508      	push	{r3, lr}
 800cc32:	2006      	movs	r0, #6
 800cc34:	f000 fd64 	bl	800d700 <raise>
 800cc38:	2001      	movs	r0, #1
 800cc3a:	f7f7 fa63 	bl	8004104 <_exit>
	...

0800cc40 <__errno>:
 800cc40:	4b01      	ldr	r3, [pc, #4]	; (800cc48 <__errno+0x8>)
 800cc42:	6818      	ldr	r0, [r3, #0]
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	20000014 	.word	0x20000014

0800cc4c <__libc_init_array>:
 800cc4c:	b570      	push	{r4, r5, r6, lr}
 800cc4e:	4d0d      	ldr	r5, [pc, #52]	; (800cc84 <__libc_init_array+0x38>)
 800cc50:	4c0d      	ldr	r4, [pc, #52]	; (800cc88 <__libc_init_array+0x3c>)
 800cc52:	1b64      	subs	r4, r4, r5
 800cc54:	10a4      	asrs	r4, r4, #2
 800cc56:	2600      	movs	r6, #0
 800cc58:	42a6      	cmp	r6, r4
 800cc5a:	d109      	bne.n	800cc70 <__libc_init_array+0x24>
 800cc5c:	4d0b      	ldr	r5, [pc, #44]	; (800cc8c <__libc_init_array+0x40>)
 800cc5e:	4c0c      	ldr	r4, [pc, #48]	; (800cc90 <__libc_init_array+0x44>)
 800cc60:	f002 fd78 	bl	800f754 <_init>
 800cc64:	1b64      	subs	r4, r4, r5
 800cc66:	10a4      	asrs	r4, r4, #2
 800cc68:	2600      	movs	r6, #0
 800cc6a:	42a6      	cmp	r6, r4
 800cc6c:	d105      	bne.n	800cc7a <__libc_init_array+0x2e>
 800cc6e:	bd70      	pop	{r4, r5, r6, pc}
 800cc70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc74:	4798      	blx	r3
 800cc76:	3601      	adds	r6, #1
 800cc78:	e7ee      	b.n	800cc58 <__libc_init_array+0xc>
 800cc7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc7e:	4798      	blx	r3
 800cc80:	3601      	adds	r6, #1
 800cc82:	e7f2      	b.n	800cc6a <__libc_init_array+0x1e>
 800cc84:	0801138c 	.word	0x0801138c
 800cc88:	0801138c 	.word	0x0801138c
 800cc8c:	0801138c 	.word	0x0801138c
 800cc90:	08011390 	.word	0x08011390

0800cc94 <memcpy>:
 800cc94:	440a      	add	r2, r1
 800cc96:	4291      	cmp	r1, r2
 800cc98:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc9c:	d100      	bne.n	800cca0 <memcpy+0xc>
 800cc9e:	4770      	bx	lr
 800cca0:	b510      	push	{r4, lr}
 800cca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccaa:	4291      	cmp	r1, r2
 800ccac:	d1f9      	bne.n	800cca2 <memcpy+0xe>
 800ccae:	bd10      	pop	{r4, pc}

0800ccb0 <memset>:
 800ccb0:	4402      	add	r2, r0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d100      	bne.n	800ccba <memset+0xa>
 800ccb8:	4770      	bx	lr
 800ccba:	f803 1b01 	strb.w	r1, [r3], #1
 800ccbe:	e7f9      	b.n	800ccb4 <memset+0x4>

0800ccc0 <__cvt>:
 800ccc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccc4:	ec55 4b10 	vmov	r4, r5, d0
 800ccc8:	2d00      	cmp	r5, #0
 800ccca:	460e      	mov	r6, r1
 800cccc:	4619      	mov	r1, r3
 800ccce:	462b      	mov	r3, r5
 800ccd0:	bfbb      	ittet	lt
 800ccd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccd6:	461d      	movlt	r5, r3
 800ccd8:	2300      	movge	r3, #0
 800ccda:	232d      	movlt	r3, #45	; 0x2d
 800ccdc:	700b      	strb	r3, [r1, #0]
 800ccde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cce0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cce4:	4691      	mov	r9, r2
 800cce6:	f023 0820 	bic.w	r8, r3, #32
 800ccea:	bfbc      	itt	lt
 800ccec:	4622      	movlt	r2, r4
 800ccee:	4614      	movlt	r4, r2
 800ccf0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ccf4:	d005      	beq.n	800cd02 <__cvt+0x42>
 800ccf6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccfa:	d100      	bne.n	800ccfe <__cvt+0x3e>
 800ccfc:	3601      	adds	r6, #1
 800ccfe:	2102      	movs	r1, #2
 800cd00:	e000      	b.n	800cd04 <__cvt+0x44>
 800cd02:	2103      	movs	r1, #3
 800cd04:	ab03      	add	r3, sp, #12
 800cd06:	9301      	str	r3, [sp, #4]
 800cd08:	ab02      	add	r3, sp, #8
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	ec45 4b10 	vmov	d0, r4, r5
 800cd10:	4653      	mov	r3, sl
 800cd12:	4632      	mov	r2, r6
 800cd14:	f000 fe5c 	bl	800d9d0 <_dtoa_r>
 800cd18:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd1c:	4607      	mov	r7, r0
 800cd1e:	d102      	bne.n	800cd26 <__cvt+0x66>
 800cd20:	f019 0f01 	tst.w	r9, #1
 800cd24:	d022      	beq.n	800cd6c <__cvt+0xac>
 800cd26:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd2a:	eb07 0906 	add.w	r9, r7, r6
 800cd2e:	d110      	bne.n	800cd52 <__cvt+0x92>
 800cd30:	783b      	ldrb	r3, [r7, #0]
 800cd32:	2b30      	cmp	r3, #48	; 0x30
 800cd34:	d10a      	bne.n	800cd4c <__cvt+0x8c>
 800cd36:	2200      	movs	r2, #0
 800cd38:	2300      	movs	r3, #0
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	f7f3 feeb 	bl	8000b18 <__aeabi_dcmpeq>
 800cd42:	b918      	cbnz	r0, 800cd4c <__cvt+0x8c>
 800cd44:	f1c6 0601 	rsb	r6, r6, #1
 800cd48:	f8ca 6000 	str.w	r6, [sl]
 800cd4c:	f8da 3000 	ldr.w	r3, [sl]
 800cd50:	4499      	add	r9, r3
 800cd52:	2200      	movs	r2, #0
 800cd54:	2300      	movs	r3, #0
 800cd56:	4620      	mov	r0, r4
 800cd58:	4629      	mov	r1, r5
 800cd5a:	f7f3 fedd 	bl	8000b18 <__aeabi_dcmpeq>
 800cd5e:	b108      	cbz	r0, 800cd64 <__cvt+0xa4>
 800cd60:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd64:	2230      	movs	r2, #48	; 0x30
 800cd66:	9b03      	ldr	r3, [sp, #12]
 800cd68:	454b      	cmp	r3, r9
 800cd6a:	d307      	bcc.n	800cd7c <__cvt+0xbc>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd70:	1bdb      	subs	r3, r3, r7
 800cd72:	4638      	mov	r0, r7
 800cd74:	6013      	str	r3, [r2, #0]
 800cd76:	b004      	add	sp, #16
 800cd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd7c:	1c59      	adds	r1, r3, #1
 800cd7e:	9103      	str	r1, [sp, #12]
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e7f0      	b.n	800cd66 <__cvt+0xa6>

0800cd84 <__exponent>:
 800cd84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd86:	4603      	mov	r3, r0
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	bfb8      	it	lt
 800cd8c:	4249      	neglt	r1, r1
 800cd8e:	f803 2b02 	strb.w	r2, [r3], #2
 800cd92:	bfb4      	ite	lt
 800cd94:	222d      	movlt	r2, #45	; 0x2d
 800cd96:	222b      	movge	r2, #43	; 0x2b
 800cd98:	2909      	cmp	r1, #9
 800cd9a:	7042      	strb	r2, [r0, #1]
 800cd9c:	dd2a      	ble.n	800cdf4 <__exponent+0x70>
 800cd9e:	f10d 0407 	add.w	r4, sp, #7
 800cda2:	46a4      	mov	ip, r4
 800cda4:	270a      	movs	r7, #10
 800cda6:	46a6      	mov	lr, r4
 800cda8:	460a      	mov	r2, r1
 800cdaa:	fb91 f6f7 	sdiv	r6, r1, r7
 800cdae:	fb07 1516 	mls	r5, r7, r6, r1
 800cdb2:	3530      	adds	r5, #48	; 0x30
 800cdb4:	2a63      	cmp	r2, #99	; 0x63
 800cdb6:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdbe:	4631      	mov	r1, r6
 800cdc0:	dcf1      	bgt.n	800cda6 <__exponent+0x22>
 800cdc2:	3130      	adds	r1, #48	; 0x30
 800cdc4:	f1ae 0502 	sub.w	r5, lr, #2
 800cdc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdcc:	1c44      	adds	r4, r0, #1
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4561      	cmp	r1, ip
 800cdd2:	d30a      	bcc.n	800cdea <__exponent+0x66>
 800cdd4:	f10d 0209 	add.w	r2, sp, #9
 800cdd8:	eba2 020e 	sub.w	r2, r2, lr
 800cddc:	4565      	cmp	r5, ip
 800cdde:	bf88      	it	hi
 800cde0:	2200      	movhi	r2, #0
 800cde2:	4413      	add	r3, r2
 800cde4:	1a18      	subs	r0, r3, r0
 800cde6:	b003      	add	sp, #12
 800cde8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cdf2:	e7ed      	b.n	800cdd0 <__exponent+0x4c>
 800cdf4:	2330      	movs	r3, #48	; 0x30
 800cdf6:	3130      	adds	r1, #48	; 0x30
 800cdf8:	7083      	strb	r3, [r0, #2]
 800cdfa:	70c1      	strb	r1, [r0, #3]
 800cdfc:	1d03      	adds	r3, r0, #4
 800cdfe:	e7f1      	b.n	800cde4 <__exponent+0x60>

0800ce00 <_printf_float>:
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	ed2d 8b02 	vpush	{d8}
 800ce08:	b08d      	sub	sp, #52	; 0x34
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce10:	4616      	mov	r6, r2
 800ce12:	461f      	mov	r7, r3
 800ce14:	4605      	mov	r5, r0
 800ce16:	f001 fd7f 	bl	800e918 <_localeconv_r>
 800ce1a:	f8d0 a000 	ldr.w	sl, [r0]
 800ce1e:	4650      	mov	r0, sl
 800ce20:	f7f3 f9fe 	bl	8000220 <strlen>
 800ce24:	2300      	movs	r3, #0
 800ce26:	930a      	str	r3, [sp, #40]	; 0x28
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	9305      	str	r3, [sp, #20]
 800ce2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce34:	3307      	adds	r3, #7
 800ce36:	f023 0307 	bic.w	r3, r3, #7
 800ce3a:	f103 0208 	add.w	r2, r3, #8
 800ce3e:	f8c8 2000 	str.w	r2, [r8]
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce52:	9307      	str	r3, [sp, #28]
 800ce54:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce58:	ee08 0a10 	vmov	s16, r0
 800ce5c:	4b9f      	ldr	r3, [pc, #636]	; (800d0dc <_printf_float+0x2dc>)
 800ce5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce62:	f04f 32ff 	mov.w	r2, #4294967295
 800ce66:	f7f3 fe89 	bl	8000b7c <__aeabi_dcmpun>
 800ce6a:	bb88      	cbnz	r0, 800ced0 <_printf_float+0xd0>
 800ce6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce70:	4b9a      	ldr	r3, [pc, #616]	; (800d0dc <_printf_float+0x2dc>)
 800ce72:	f04f 32ff 	mov.w	r2, #4294967295
 800ce76:	f7f3 fe63 	bl	8000b40 <__aeabi_dcmple>
 800ce7a:	bb48      	cbnz	r0, 800ced0 <_printf_float+0xd0>
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2300      	movs	r3, #0
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fe52 	bl	8000b2c <__aeabi_dcmplt>
 800ce88:	b110      	cbz	r0, 800ce90 <_printf_float+0x90>
 800ce8a:	232d      	movs	r3, #45	; 0x2d
 800ce8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce90:	4b93      	ldr	r3, [pc, #588]	; (800d0e0 <_printf_float+0x2e0>)
 800ce92:	4894      	ldr	r0, [pc, #592]	; (800d0e4 <_printf_float+0x2e4>)
 800ce94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce98:	bf94      	ite	ls
 800ce9a:	4698      	movls	r8, r3
 800ce9c:	4680      	movhi	r8, r0
 800ce9e:	2303      	movs	r3, #3
 800cea0:	6123      	str	r3, [r4, #16]
 800cea2:	9b05      	ldr	r3, [sp, #20]
 800cea4:	f023 0204 	bic.w	r2, r3, #4
 800cea8:	6022      	str	r2, [r4, #0]
 800ceaa:	f04f 0900 	mov.w	r9, #0
 800ceae:	9700      	str	r7, [sp, #0]
 800ceb0:	4633      	mov	r3, r6
 800ceb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	f000 f9d8 	bl	800d26c <_printf_common>
 800cebc:	3001      	adds	r0, #1
 800cebe:	f040 8090 	bne.w	800cfe2 <_printf_float+0x1e2>
 800cec2:	f04f 30ff 	mov.w	r0, #4294967295
 800cec6:	b00d      	add	sp, #52	; 0x34
 800cec8:	ecbd 8b02 	vpop	{d8}
 800cecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced0:	4642      	mov	r2, r8
 800ced2:	464b      	mov	r3, r9
 800ced4:	4640      	mov	r0, r8
 800ced6:	4649      	mov	r1, r9
 800ced8:	f7f3 fe50 	bl	8000b7c <__aeabi_dcmpun>
 800cedc:	b140      	cbz	r0, 800cef0 <_printf_float+0xf0>
 800cede:	464b      	mov	r3, r9
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bfbc      	itt	lt
 800cee4:	232d      	movlt	r3, #45	; 0x2d
 800cee6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ceea:	487f      	ldr	r0, [pc, #508]	; (800d0e8 <_printf_float+0x2e8>)
 800ceec:	4b7f      	ldr	r3, [pc, #508]	; (800d0ec <_printf_float+0x2ec>)
 800ceee:	e7d1      	b.n	800ce94 <_printf_float+0x94>
 800cef0:	6863      	ldr	r3, [r4, #4]
 800cef2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cef6:	9206      	str	r2, [sp, #24]
 800cef8:	1c5a      	adds	r2, r3, #1
 800cefa:	d13f      	bne.n	800cf7c <_printf_float+0x17c>
 800cefc:	2306      	movs	r3, #6
 800cefe:	6063      	str	r3, [r4, #4]
 800cf00:	9b05      	ldr	r3, [sp, #20]
 800cf02:	6861      	ldr	r1, [r4, #4]
 800cf04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf08:	2300      	movs	r3, #0
 800cf0a:	9303      	str	r3, [sp, #12]
 800cf0c:	ab0a      	add	r3, sp, #40	; 0x28
 800cf0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf12:	ab09      	add	r3, sp, #36	; 0x24
 800cf14:	ec49 8b10 	vmov	d0, r8, r9
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	6022      	str	r2, [r4, #0]
 800cf1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7ff fecd 	bl	800ccc0 <__cvt>
 800cf26:	9b06      	ldr	r3, [sp, #24]
 800cf28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf2a:	2b47      	cmp	r3, #71	; 0x47
 800cf2c:	4680      	mov	r8, r0
 800cf2e:	d108      	bne.n	800cf42 <_printf_float+0x142>
 800cf30:	1cc8      	adds	r0, r1, #3
 800cf32:	db02      	blt.n	800cf3a <_printf_float+0x13a>
 800cf34:	6863      	ldr	r3, [r4, #4]
 800cf36:	4299      	cmp	r1, r3
 800cf38:	dd41      	ble.n	800cfbe <_printf_float+0x1be>
 800cf3a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf3e:	fa5f fb8b 	uxtb.w	fp, fp
 800cf42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf46:	d820      	bhi.n	800cf8a <_printf_float+0x18a>
 800cf48:	3901      	subs	r1, #1
 800cf4a:	465a      	mov	r2, fp
 800cf4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf50:	9109      	str	r1, [sp, #36]	; 0x24
 800cf52:	f7ff ff17 	bl	800cd84 <__exponent>
 800cf56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf58:	1813      	adds	r3, r2, r0
 800cf5a:	2a01      	cmp	r2, #1
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	6123      	str	r3, [r4, #16]
 800cf60:	dc02      	bgt.n	800cf68 <_printf_float+0x168>
 800cf62:	6822      	ldr	r2, [r4, #0]
 800cf64:	07d2      	lsls	r2, r2, #31
 800cf66:	d501      	bpl.n	800cf6c <_printf_float+0x16c>
 800cf68:	3301      	adds	r3, #1
 800cf6a:	6123      	str	r3, [r4, #16]
 800cf6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d09c      	beq.n	800ceae <_printf_float+0xae>
 800cf74:	232d      	movs	r3, #45	; 0x2d
 800cf76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf7a:	e798      	b.n	800ceae <_printf_float+0xae>
 800cf7c:	9a06      	ldr	r2, [sp, #24]
 800cf7e:	2a47      	cmp	r2, #71	; 0x47
 800cf80:	d1be      	bne.n	800cf00 <_printf_float+0x100>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1bc      	bne.n	800cf00 <_printf_float+0x100>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7b9      	b.n	800cefe <_printf_float+0xfe>
 800cf8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf8e:	d118      	bne.n	800cfc2 <_printf_float+0x1c2>
 800cf90:	2900      	cmp	r1, #0
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	dd0b      	ble.n	800cfae <_printf_float+0x1ae>
 800cf96:	6121      	str	r1, [r4, #16]
 800cf98:	b913      	cbnz	r3, 800cfa0 <_printf_float+0x1a0>
 800cf9a:	6822      	ldr	r2, [r4, #0]
 800cf9c:	07d0      	lsls	r0, r2, #31
 800cf9e:	d502      	bpl.n	800cfa6 <_printf_float+0x1a6>
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	440b      	add	r3, r1
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfa8:	f04f 0900 	mov.w	r9, #0
 800cfac:	e7de      	b.n	800cf6c <_printf_float+0x16c>
 800cfae:	b913      	cbnz	r3, 800cfb6 <_printf_float+0x1b6>
 800cfb0:	6822      	ldr	r2, [r4, #0]
 800cfb2:	07d2      	lsls	r2, r2, #31
 800cfb4:	d501      	bpl.n	800cfba <_printf_float+0x1ba>
 800cfb6:	3302      	adds	r3, #2
 800cfb8:	e7f4      	b.n	800cfa4 <_printf_float+0x1a4>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	e7f2      	b.n	800cfa4 <_printf_float+0x1a4>
 800cfbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc4:	4299      	cmp	r1, r3
 800cfc6:	db05      	blt.n	800cfd4 <_printf_float+0x1d4>
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	6121      	str	r1, [r4, #16]
 800cfcc:	07d8      	lsls	r0, r3, #31
 800cfce:	d5ea      	bpl.n	800cfa6 <_printf_float+0x1a6>
 800cfd0:	1c4b      	adds	r3, r1, #1
 800cfd2:	e7e7      	b.n	800cfa4 <_printf_float+0x1a4>
 800cfd4:	2900      	cmp	r1, #0
 800cfd6:	bfd4      	ite	le
 800cfd8:	f1c1 0202 	rsble	r2, r1, #2
 800cfdc:	2201      	movgt	r2, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	e7e0      	b.n	800cfa4 <_printf_float+0x1a4>
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	055a      	lsls	r2, r3, #21
 800cfe6:	d407      	bmi.n	800cff8 <_printf_float+0x1f8>
 800cfe8:	6923      	ldr	r3, [r4, #16]
 800cfea:	4642      	mov	r2, r8
 800cfec:	4631      	mov	r1, r6
 800cfee:	4628      	mov	r0, r5
 800cff0:	47b8      	blx	r7
 800cff2:	3001      	adds	r0, #1
 800cff4:	d12c      	bne.n	800d050 <_printf_float+0x250>
 800cff6:	e764      	b.n	800cec2 <_printf_float+0xc2>
 800cff8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cffc:	f240 80e0 	bls.w	800d1c0 <_printf_float+0x3c0>
 800d000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d004:	2200      	movs	r2, #0
 800d006:	2300      	movs	r3, #0
 800d008:	f7f3 fd86 	bl	8000b18 <__aeabi_dcmpeq>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d034      	beq.n	800d07a <_printf_float+0x27a>
 800d010:	4a37      	ldr	r2, [pc, #220]	; (800d0f0 <_printf_float+0x2f0>)
 800d012:	2301      	movs	r3, #1
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	47b8      	blx	r7
 800d01a:	3001      	adds	r0, #1
 800d01c:	f43f af51 	beq.w	800cec2 <_printf_float+0xc2>
 800d020:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d024:	429a      	cmp	r2, r3
 800d026:	db02      	blt.n	800d02e <_printf_float+0x22e>
 800d028:	6823      	ldr	r3, [r4, #0]
 800d02a:	07d8      	lsls	r0, r3, #31
 800d02c:	d510      	bpl.n	800d050 <_printf_float+0x250>
 800d02e:	ee18 3a10 	vmov	r3, s16
 800d032:	4652      	mov	r2, sl
 800d034:	4631      	mov	r1, r6
 800d036:	4628      	mov	r0, r5
 800d038:	47b8      	blx	r7
 800d03a:	3001      	adds	r0, #1
 800d03c:	f43f af41 	beq.w	800cec2 <_printf_float+0xc2>
 800d040:	f04f 0800 	mov.w	r8, #0
 800d044:	f104 091a 	add.w	r9, r4, #26
 800d048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04a:	3b01      	subs	r3, #1
 800d04c:	4543      	cmp	r3, r8
 800d04e:	dc09      	bgt.n	800d064 <_printf_float+0x264>
 800d050:	6823      	ldr	r3, [r4, #0]
 800d052:	079b      	lsls	r3, r3, #30
 800d054:	f100 8105 	bmi.w	800d262 <_printf_float+0x462>
 800d058:	68e0      	ldr	r0, [r4, #12]
 800d05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d05c:	4298      	cmp	r0, r3
 800d05e:	bfb8      	it	lt
 800d060:	4618      	movlt	r0, r3
 800d062:	e730      	b.n	800cec6 <_printf_float+0xc6>
 800d064:	2301      	movs	r3, #1
 800d066:	464a      	mov	r2, r9
 800d068:	4631      	mov	r1, r6
 800d06a:	4628      	mov	r0, r5
 800d06c:	47b8      	blx	r7
 800d06e:	3001      	adds	r0, #1
 800d070:	f43f af27 	beq.w	800cec2 <_printf_float+0xc2>
 800d074:	f108 0801 	add.w	r8, r8, #1
 800d078:	e7e6      	b.n	800d048 <_printf_float+0x248>
 800d07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dc39      	bgt.n	800d0f4 <_printf_float+0x2f4>
 800d080:	4a1b      	ldr	r2, [pc, #108]	; (800d0f0 <_printf_float+0x2f0>)
 800d082:	2301      	movs	r3, #1
 800d084:	4631      	mov	r1, r6
 800d086:	4628      	mov	r0, r5
 800d088:	47b8      	blx	r7
 800d08a:	3001      	adds	r0, #1
 800d08c:	f43f af19 	beq.w	800cec2 <_printf_float+0xc2>
 800d090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d094:	4313      	orrs	r3, r2
 800d096:	d102      	bne.n	800d09e <_printf_float+0x29e>
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	07d9      	lsls	r1, r3, #31
 800d09c:	d5d8      	bpl.n	800d050 <_printf_float+0x250>
 800d09e:	ee18 3a10 	vmov	r3, s16
 800d0a2:	4652      	mov	r2, sl
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	47b8      	blx	r7
 800d0aa:	3001      	adds	r0, #1
 800d0ac:	f43f af09 	beq.w	800cec2 <_printf_float+0xc2>
 800d0b0:	f04f 0900 	mov.w	r9, #0
 800d0b4:	f104 0a1a 	add.w	sl, r4, #26
 800d0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ba:	425b      	negs	r3, r3
 800d0bc:	454b      	cmp	r3, r9
 800d0be:	dc01      	bgt.n	800d0c4 <_printf_float+0x2c4>
 800d0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0c2:	e792      	b.n	800cfea <_printf_float+0x1ea>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	f43f aef7 	beq.w	800cec2 <_printf_float+0xc2>
 800d0d4:	f109 0901 	add.w	r9, r9, #1
 800d0d8:	e7ee      	b.n	800d0b8 <_printf_float+0x2b8>
 800d0da:	bf00      	nop
 800d0dc:	7fefffff 	.word	0x7fefffff
 800d0e0:	08010fa4 	.word	0x08010fa4
 800d0e4:	08010fa8 	.word	0x08010fa8
 800d0e8:	08010fb0 	.word	0x08010fb0
 800d0ec:	08010fac 	.word	0x08010fac
 800d0f0:	08010fb4 	.word	0x08010fb4
 800d0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	bfa8      	it	ge
 800d0fc:	461a      	movge	r2, r3
 800d0fe:	2a00      	cmp	r2, #0
 800d100:	4691      	mov	r9, r2
 800d102:	dc37      	bgt.n	800d174 <_printf_float+0x374>
 800d104:	f04f 0b00 	mov.w	fp, #0
 800d108:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d10c:	f104 021a 	add.w	r2, r4, #26
 800d110:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d112:	9305      	str	r3, [sp, #20]
 800d114:	eba3 0309 	sub.w	r3, r3, r9
 800d118:	455b      	cmp	r3, fp
 800d11a:	dc33      	bgt.n	800d184 <_printf_float+0x384>
 800d11c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d120:	429a      	cmp	r2, r3
 800d122:	db3b      	blt.n	800d19c <_printf_float+0x39c>
 800d124:	6823      	ldr	r3, [r4, #0]
 800d126:	07da      	lsls	r2, r3, #31
 800d128:	d438      	bmi.n	800d19c <_printf_float+0x39c>
 800d12a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d12c:	9b05      	ldr	r3, [sp, #20]
 800d12e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	eba2 0901 	sub.w	r9, r2, r1
 800d136:	4599      	cmp	r9, r3
 800d138:	bfa8      	it	ge
 800d13a:	4699      	movge	r9, r3
 800d13c:	f1b9 0f00 	cmp.w	r9, #0
 800d140:	dc35      	bgt.n	800d1ae <_printf_float+0x3ae>
 800d142:	f04f 0800 	mov.w	r8, #0
 800d146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d14a:	f104 0a1a 	add.w	sl, r4, #26
 800d14e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d152:	1a9b      	subs	r3, r3, r2
 800d154:	eba3 0309 	sub.w	r3, r3, r9
 800d158:	4543      	cmp	r3, r8
 800d15a:	f77f af79 	ble.w	800d050 <_printf_float+0x250>
 800d15e:	2301      	movs	r3, #1
 800d160:	4652      	mov	r2, sl
 800d162:	4631      	mov	r1, r6
 800d164:	4628      	mov	r0, r5
 800d166:	47b8      	blx	r7
 800d168:	3001      	adds	r0, #1
 800d16a:	f43f aeaa 	beq.w	800cec2 <_printf_float+0xc2>
 800d16e:	f108 0801 	add.w	r8, r8, #1
 800d172:	e7ec      	b.n	800d14e <_printf_float+0x34e>
 800d174:	4613      	mov	r3, r2
 800d176:	4631      	mov	r1, r6
 800d178:	4642      	mov	r2, r8
 800d17a:	4628      	mov	r0, r5
 800d17c:	47b8      	blx	r7
 800d17e:	3001      	adds	r0, #1
 800d180:	d1c0      	bne.n	800d104 <_printf_float+0x304>
 800d182:	e69e      	b.n	800cec2 <_printf_float+0xc2>
 800d184:	2301      	movs	r3, #1
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	9205      	str	r2, [sp, #20]
 800d18c:	47b8      	blx	r7
 800d18e:	3001      	adds	r0, #1
 800d190:	f43f ae97 	beq.w	800cec2 <_printf_float+0xc2>
 800d194:	9a05      	ldr	r2, [sp, #20]
 800d196:	f10b 0b01 	add.w	fp, fp, #1
 800d19a:	e7b9      	b.n	800d110 <_printf_float+0x310>
 800d19c:	ee18 3a10 	vmov	r3, s16
 800d1a0:	4652      	mov	r2, sl
 800d1a2:	4631      	mov	r1, r6
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	47b8      	blx	r7
 800d1a8:	3001      	adds	r0, #1
 800d1aa:	d1be      	bne.n	800d12a <_printf_float+0x32a>
 800d1ac:	e689      	b.n	800cec2 <_printf_float+0xc2>
 800d1ae:	9a05      	ldr	r2, [sp, #20]
 800d1b0:	464b      	mov	r3, r9
 800d1b2:	4442      	add	r2, r8
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	47b8      	blx	r7
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	d1c1      	bne.n	800d142 <_printf_float+0x342>
 800d1be:	e680      	b.n	800cec2 <_printf_float+0xc2>
 800d1c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1c2:	2a01      	cmp	r2, #1
 800d1c4:	dc01      	bgt.n	800d1ca <_printf_float+0x3ca>
 800d1c6:	07db      	lsls	r3, r3, #31
 800d1c8:	d538      	bpl.n	800d23c <_printf_float+0x43c>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4642      	mov	r2, r8
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	47b8      	blx	r7
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	f43f ae74 	beq.w	800cec2 <_printf_float+0xc2>
 800d1da:	ee18 3a10 	vmov	r3, s16
 800d1de:	4652      	mov	r2, sl
 800d1e0:	4631      	mov	r1, r6
 800d1e2:	4628      	mov	r0, r5
 800d1e4:	47b8      	blx	r7
 800d1e6:	3001      	adds	r0, #1
 800d1e8:	f43f ae6b 	beq.w	800cec2 <_printf_float+0xc2>
 800d1ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	f7f3 fc90 	bl	8000b18 <__aeabi_dcmpeq>
 800d1f8:	b9d8      	cbnz	r0, 800d232 <_printf_float+0x432>
 800d1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1fc:	f108 0201 	add.w	r2, r8, #1
 800d200:	3b01      	subs	r3, #1
 800d202:	4631      	mov	r1, r6
 800d204:	4628      	mov	r0, r5
 800d206:	47b8      	blx	r7
 800d208:	3001      	adds	r0, #1
 800d20a:	d10e      	bne.n	800d22a <_printf_float+0x42a>
 800d20c:	e659      	b.n	800cec2 <_printf_float+0xc2>
 800d20e:	2301      	movs	r3, #1
 800d210:	4652      	mov	r2, sl
 800d212:	4631      	mov	r1, r6
 800d214:	4628      	mov	r0, r5
 800d216:	47b8      	blx	r7
 800d218:	3001      	adds	r0, #1
 800d21a:	f43f ae52 	beq.w	800cec2 <_printf_float+0xc2>
 800d21e:	f108 0801 	add.w	r8, r8, #1
 800d222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d224:	3b01      	subs	r3, #1
 800d226:	4543      	cmp	r3, r8
 800d228:	dcf1      	bgt.n	800d20e <_printf_float+0x40e>
 800d22a:	464b      	mov	r3, r9
 800d22c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d230:	e6dc      	b.n	800cfec <_printf_float+0x1ec>
 800d232:	f04f 0800 	mov.w	r8, #0
 800d236:	f104 0a1a 	add.w	sl, r4, #26
 800d23a:	e7f2      	b.n	800d222 <_printf_float+0x422>
 800d23c:	2301      	movs	r3, #1
 800d23e:	4642      	mov	r2, r8
 800d240:	e7df      	b.n	800d202 <_printf_float+0x402>
 800d242:	2301      	movs	r3, #1
 800d244:	464a      	mov	r2, r9
 800d246:	4631      	mov	r1, r6
 800d248:	4628      	mov	r0, r5
 800d24a:	47b8      	blx	r7
 800d24c:	3001      	adds	r0, #1
 800d24e:	f43f ae38 	beq.w	800cec2 <_printf_float+0xc2>
 800d252:	f108 0801 	add.w	r8, r8, #1
 800d256:	68e3      	ldr	r3, [r4, #12]
 800d258:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d25a:	1a5b      	subs	r3, r3, r1
 800d25c:	4543      	cmp	r3, r8
 800d25e:	dcf0      	bgt.n	800d242 <_printf_float+0x442>
 800d260:	e6fa      	b.n	800d058 <_printf_float+0x258>
 800d262:	f04f 0800 	mov.w	r8, #0
 800d266:	f104 0919 	add.w	r9, r4, #25
 800d26a:	e7f4      	b.n	800d256 <_printf_float+0x456>

0800d26c <_printf_common>:
 800d26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d270:	4616      	mov	r6, r2
 800d272:	4699      	mov	r9, r3
 800d274:	688a      	ldr	r2, [r1, #8]
 800d276:	690b      	ldr	r3, [r1, #16]
 800d278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d27c:	4293      	cmp	r3, r2
 800d27e:	bfb8      	it	lt
 800d280:	4613      	movlt	r3, r2
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d288:	4607      	mov	r7, r0
 800d28a:	460c      	mov	r4, r1
 800d28c:	b10a      	cbz	r2, 800d292 <_printf_common+0x26>
 800d28e:	3301      	adds	r3, #1
 800d290:	6033      	str	r3, [r6, #0]
 800d292:	6823      	ldr	r3, [r4, #0]
 800d294:	0699      	lsls	r1, r3, #26
 800d296:	bf42      	ittt	mi
 800d298:	6833      	ldrmi	r3, [r6, #0]
 800d29a:	3302      	addmi	r3, #2
 800d29c:	6033      	strmi	r3, [r6, #0]
 800d29e:	6825      	ldr	r5, [r4, #0]
 800d2a0:	f015 0506 	ands.w	r5, r5, #6
 800d2a4:	d106      	bne.n	800d2b4 <_printf_common+0x48>
 800d2a6:	f104 0a19 	add.w	sl, r4, #25
 800d2aa:	68e3      	ldr	r3, [r4, #12]
 800d2ac:	6832      	ldr	r2, [r6, #0]
 800d2ae:	1a9b      	subs	r3, r3, r2
 800d2b0:	42ab      	cmp	r3, r5
 800d2b2:	dc26      	bgt.n	800d302 <_printf_common+0x96>
 800d2b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2b8:	1e13      	subs	r3, r2, #0
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	bf18      	it	ne
 800d2be:	2301      	movne	r3, #1
 800d2c0:	0692      	lsls	r2, r2, #26
 800d2c2:	d42b      	bmi.n	800d31c <_printf_common+0xb0>
 800d2c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2c8:	4649      	mov	r1, r9
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	47c0      	blx	r8
 800d2ce:	3001      	adds	r0, #1
 800d2d0:	d01e      	beq.n	800d310 <_printf_common+0xa4>
 800d2d2:	6823      	ldr	r3, [r4, #0]
 800d2d4:	68e5      	ldr	r5, [r4, #12]
 800d2d6:	6832      	ldr	r2, [r6, #0]
 800d2d8:	f003 0306 	and.w	r3, r3, #6
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	bf08      	it	eq
 800d2e0:	1aad      	subeq	r5, r5, r2
 800d2e2:	68a3      	ldr	r3, [r4, #8]
 800d2e4:	6922      	ldr	r2, [r4, #16]
 800d2e6:	bf0c      	ite	eq
 800d2e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2ec:	2500      	movne	r5, #0
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	bfc4      	itt	gt
 800d2f2:	1a9b      	subgt	r3, r3, r2
 800d2f4:	18ed      	addgt	r5, r5, r3
 800d2f6:	2600      	movs	r6, #0
 800d2f8:	341a      	adds	r4, #26
 800d2fa:	42b5      	cmp	r5, r6
 800d2fc:	d11a      	bne.n	800d334 <_printf_common+0xc8>
 800d2fe:	2000      	movs	r0, #0
 800d300:	e008      	b.n	800d314 <_printf_common+0xa8>
 800d302:	2301      	movs	r3, #1
 800d304:	4652      	mov	r2, sl
 800d306:	4649      	mov	r1, r9
 800d308:	4638      	mov	r0, r7
 800d30a:	47c0      	blx	r8
 800d30c:	3001      	adds	r0, #1
 800d30e:	d103      	bne.n	800d318 <_printf_common+0xac>
 800d310:	f04f 30ff 	mov.w	r0, #4294967295
 800d314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d318:	3501      	adds	r5, #1
 800d31a:	e7c6      	b.n	800d2aa <_printf_common+0x3e>
 800d31c:	18e1      	adds	r1, r4, r3
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	2030      	movs	r0, #48	; 0x30
 800d322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d326:	4422      	add	r2, r4
 800d328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d32c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d330:	3302      	adds	r3, #2
 800d332:	e7c7      	b.n	800d2c4 <_printf_common+0x58>
 800d334:	2301      	movs	r3, #1
 800d336:	4622      	mov	r2, r4
 800d338:	4649      	mov	r1, r9
 800d33a:	4638      	mov	r0, r7
 800d33c:	47c0      	blx	r8
 800d33e:	3001      	adds	r0, #1
 800d340:	d0e6      	beq.n	800d310 <_printf_common+0xa4>
 800d342:	3601      	adds	r6, #1
 800d344:	e7d9      	b.n	800d2fa <_printf_common+0x8e>
	...

0800d348 <_printf_i>:
 800d348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d34c:	460c      	mov	r4, r1
 800d34e:	4691      	mov	r9, r2
 800d350:	7e27      	ldrb	r7, [r4, #24]
 800d352:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d354:	2f78      	cmp	r7, #120	; 0x78
 800d356:	4680      	mov	r8, r0
 800d358:	469a      	mov	sl, r3
 800d35a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d35e:	d807      	bhi.n	800d370 <_printf_i+0x28>
 800d360:	2f62      	cmp	r7, #98	; 0x62
 800d362:	d80a      	bhi.n	800d37a <_printf_i+0x32>
 800d364:	2f00      	cmp	r7, #0
 800d366:	f000 80d8 	beq.w	800d51a <_printf_i+0x1d2>
 800d36a:	2f58      	cmp	r7, #88	; 0x58
 800d36c:	f000 80a3 	beq.w	800d4b6 <_printf_i+0x16e>
 800d370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d378:	e03a      	b.n	800d3f0 <_printf_i+0xa8>
 800d37a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d37e:	2b15      	cmp	r3, #21
 800d380:	d8f6      	bhi.n	800d370 <_printf_i+0x28>
 800d382:	a001      	add	r0, pc, #4	; (adr r0, 800d388 <_printf_i+0x40>)
 800d384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d388:	0800d3e1 	.word	0x0800d3e1
 800d38c:	0800d3f5 	.word	0x0800d3f5
 800d390:	0800d371 	.word	0x0800d371
 800d394:	0800d371 	.word	0x0800d371
 800d398:	0800d371 	.word	0x0800d371
 800d39c:	0800d371 	.word	0x0800d371
 800d3a0:	0800d3f5 	.word	0x0800d3f5
 800d3a4:	0800d371 	.word	0x0800d371
 800d3a8:	0800d371 	.word	0x0800d371
 800d3ac:	0800d371 	.word	0x0800d371
 800d3b0:	0800d371 	.word	0x0800d371
 800d3b4:	0800d501 	.word	0x0800d501
 800d3b8:	0800d425 	.word	0x0800d425
 800d3bc:	0800d4e3 	.word	0x0800d4e3
 800d3c0:	0800d371 	.word	0x0800d371
 800d3c4:	0800d371 	.word	0x0800d371
 800d3c8:	0800d523 	.word	0x0800d523
 800d3cc:	0800d371 	.word	0x0800d371
 800d3d0:	0800d425 	.word	0x0800d425
 800d3d4:	0800d371 	.word	0x0800d371
 800d3d8:	0800d371 	.word	0x0800d371
 800d3dc:	0800d4eb 	.word	0x0800d4eb
 800d3e0:	680b      	ldr	r3, [r1, #0]
 800d3e2:	1d1a      	adds	r2, r3, #4
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	600a      	str	r2, [r1, #0]
 800d3e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e0a3      	b.n	800d53c <_printf_i+0x1f4>
 800d3f4:	6825      	ldr	r5, [r4, #0]
 800d3f6:	6808      	ldr	r0, [r1, #0]
 800d3f8:	062e      	lsls	r6, r5, #24
 800d3fa:	f100 0304 	add.w	r3, r0, #4
 800d3fe:	d50a      	bpl.n	800d416 <_printf_i+0xce>
 800d400:	6805      	ldr	r5, [r0, #0]
 800d402:	600b      	str	r3, [r1, #0]
 800d404:	2d00      	cmp	r5, #0
 800d406:	da03      	bge.n	800d410 <_printf_i+0xc8>
 800d408:	232d      	movs	r3, #45	; 0x2d
 800d40a:	426d      	negs	r5, r5
 800d40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d410:	485e      	ldr	r0, [pc, #376]	; (800d58c <_printf_i+0x244>)
 800d412:	230a      	movs	r3, #10
 800d414:	e019      	b.n	800d44a <_printf_i+0x102>
 800d416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d41a:	6805      	ldr	r5, [r0, #0]
 800d41c:	600b      	str	r3, [r1, #0]
 800d41e:	bf18      	it	ne
 800d420:	b22d      	sxthne	r5, r5
 800d422:	e7ef      	b.n	800d404 <_printf_i+0xbc>
 800d424:	680b      	ldr	r3, [r1, #0]
 800d426:	6825      	ldr	r5, [r4, #0]
 800d428:	1d18      	adds	r0, r3, #4
 800d42a:	6008      	str	r0, [r1, #0]
 800d42c:	0628      	lsls	r0, r5, #24
 800d42e:	d501      	bpl.n	800d434 <_printf_i+0xec>
 800d430:	681d      	ldr	r5, [r3, #0]
 800d432:	e002      	b.n	800d43a <_printf_i+0xf2>
 800d434:	0669      	lsls	r1, r5, #25
 800d436:	d5fb      	bpl.n	800d430 <_printf_i+0xe8>
 800d438:	881d      	ldrh	r5, [r3, #0]
 800d43a:	4854      	ldr	r0, [pc, #336]	; (800d58c <_printf_i+0x244>)
 800d43c:	2f6f      	cmp	r7, #111	; 0x6f
 800d43e:	bf0c      	ite	eq
 800d440:	2308      	moveq	r3, #8
 800d442:	230a      	movne	r3, #10
 800d444:	2100      	movs	r1, #0
 800d446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d44a:	6866      	ldr	r6, [r4, #4]
 800d44c:	60a6      	str	r6, [r4, #8]
 800d44e:	2e00      	cmp	r6, #0
 800d450:	bfa2      	ittt	ge
 800d452:	6821      	ldrge	r1, [r4, #0]
 800d454:	f021 0104 	bicge.w	r1, r1, #4
 800d458:	6021      	strge	r1, [r4, #0]
 800d45a:	b90d      	cbnz	r5, 800d460 <_printf_i+0x118>
 800d45c:	2e00      	cmp	r6, #0
 800d45e:	d04d      	beq.n	800d4fc <_printf_i+0x1b4>
 800d460:	4616      	mov	r6, r2
 800d462:	fbb5 f1f3 	udiv	r1, r5, r3
 800d466:	fb03 5711 	mls	r7, r3, r1, r5
 800d46a:	5dc7      	ldrb	r7, [r0, r7]
 800d46c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d470:	462f      	mov	r7, r5
 800d472:	42bb      	cmp	r3, r7
 800d474:	460d      	mov	r5, r1
 800d476:	d9f4      	bls.n	800d462 <_printf_i+0x11a>
 800d478:	2b08      	cmp	r3, #8
 800d47a:	d10b      	bne.n	800d494 <_printf_i+0x14c>
 800d47c:	6823      	ldr	r3, [r4, #0]
 800d47e:	07df      	lsls	r7, r3, #31
 800d480:	d508      	bpl.n	800d494 <_printf_i+0x14c>
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	6861      	ldr	r1, [r4, #4]
 800d486:	4299      	cmp	r1, r3
 800d488:	bfde      	ittt	le
 800d48a:	2330      	movle	r3, #48	; 0x30
 800d48c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d490:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d494:	1b92      	subs	r2, r2, r6
 800d496:	6122      	str	r2, [r4, #16]
 800d498:	f8cd a000 	str.w	sl, [sp]
 800d49c:	464b      	mov	r3, r9
 800d49e:	aa03      	add	r2, sp, #12
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	f7ff fee2 	bl	800d26c <_printf_common>
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d14c      	bne.n	800d546 <_printf_i+0x1fe>
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	b004      	add	sp, #16
 800d4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4b6:	4835      	ldr	r0, [pc, #212]	; (800d58c <_printf_i+0x244>)
 800d4b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	680e      	ldr	r6, [r1, #0]
 800d4c0:	061f      	lsls	r7, r3, #24
 800d4c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4c6:	600e      	str	r6, [r1, #0]
 800d4c8:	d514      	bpl.n	800d4f4 <_printf_i+0x1ac>
 800d4ca:	07d9      	lsls	r1, r3, #31
 800d4cc:	bf44      	itt	mi
 800d4ce:	f043 0320 	orrmi.w	r3, r3, #32
 800d4d2:	6023      	strmi	r3, [r4, #0]
 800d4d4:	b91d      	cbnz	r5, 800d4de <_printf_i+0x196>
 800d4d6:	6823      	ldr	r3, [r4, #0]
 800d4d8:	f023 0320 	bic.w	r3, r3, #32
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	2310      	movs	r3, #16
 800d4e0:	e7b0      	b.n	800d444 <_printf_i+0xfc>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	f043 0320 	orr.w	r3, r3, #32
 800d4e8:	6023      	str	r3, [r4, #0]
 800d4ea:	2378      	movs	r3, #120	; 0x78
 800d4ec:	4828      	ldr	r0, [pc, #160]	; (800d590 <_printf_i+0x248>)
 800d4ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4f2:	e7e3      	b.n	800d4bc <_printf_i+0x174>
 800d4f4:	065e      	lsls	r6, r3, #25
 800d4f6:	bf48      	it	mi
 800d4f8:	b2ad      	uxthmi	r5, r5
 800d4fa:	e7e6      	b.n	800d4ca <_printf_i+0x182>
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	e7bb      	b.n	800d478 <_printf_i+0x130>
 800d500:	680b      	ldr	r3, [r1, #0]
 800d502:	6826      	ldr	r6, [r4, #0]
 800d504:	6960      	ldr	r0, [r4, #20]
 800d506:	1d1d      	adds	r5, r3, #4
 800d508:	600d      	str	r5, [r1, #0]
 800d50a:	0635      	lsls	r5, r6, #24
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	d501      	bpl.n	800d514 <_printf_i+0x1cc>
 800d510:	6018      	str	r0, [r3, #0]
 800d512:	e002      	b.n	800d51a <_printf_i+0x1d2>
 800d514:	0671      	lsls	r1, r6, #25
 800d516:	d5fb      	bpl.n	800d510 <_printf_i+0x1c8>
 800d518:	8018      	strh	r0, [r3, #0]
 800d51a:	2300      	movs	r3, #0
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	4616      	mov	r6, r2
 800d520:	e7ba      	b.n	800d498 <_printf_i+0x150>
 800d522:	680b      	ldr	r3, [r1, #0]
 800d524:	1d1a      	adds	r2, r3, #4
 800d526:	600a      	str	r2, [r1, #0]
 800d528:	681e      	ldr	r6, [r3, #0]
 800d52a:	6862      	ldr	r2, [r4, #4]
 800d52c:	2100      	movs	r1, #0
 800d52e:	4630      	mov	r0, r6
 800d530:	f7f2 fe7e 	bl	8000230 <memchr>
 800d534:	b108      	cbz	r0, 800d53a <_printf_i+0x1f2>
 800d536:	1b80      	subs	r0, r0, r6
 800d538:	6060      	str	r0, [r4, #4]
 800d53a:	6863      	ldr	r3, [r4, #4]
 800d53c:	6123      	str	r3, [r4, #16]
 800d53e:	2300      	movs	r3, #0
 800d540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d544:	e7a8      	b.n	800d498 <_printf_i+0x150>
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	4632      	mov	r2, r6
 800d54a:	4649      	mov	r1, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	47d0      	blx	sl
 800d550:	3001      	adds	r0, #1
 800d552:	d0ab      	beq.n	800d4ac <_printf_i+0x164>
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	079b      	lsls	r3, r3, #30
 800d558:	d413      	bmi.n	800d582 <_printf_i+0x23a>
 800d55a:	68e0      	ldr	r0, [r4, #12]
 800d55c:	9b03      	ldr	r3, [sp, #12]
 800d55e:	4298      	cmp	r0, r3
 800d560:	bfb8      	it	lt
 800d562:	4618      	movlt	r0, r3
 800d564:	e7a4      	b.n	800d4b0 <_printf_i+0x168>
 800d566:	2301      	movs	r3, #1
 800d568:	4632      	mov	r2, r6
 800d56a:	4649      	mov	r1, r9
 800d56c:	4640      	mov	r0, r8
 800d56e:	47d0      	blx	sl
 800d570:	3001      	adds	r0, #1
 800d572:	d09b      	beq.n	800d4ac <_printf_i+0x164>
 800d574:	3501      	adds	r5, #1
 800d576:	68e3      	ldr	r3, [r4, #12]
 800d578:	9903      	ldr	r1, [sp, #12]
 800d57a:	1a5b      	subs	r3, r3, r1
 800d57c:	42ab      	cmp	r3, r5
 800d57e:	dcf2      	bgt.n	800d566 <_printf_i+0x21e>
 800d580:	e7eb      	b.n	800d55a <_printf_i+0x212>
 800d582:	2500      	movs	r5, #0
 800d584:	f104 0619 	add.w	r6, r4, #25
 800d588:	e7f5      	b.n	800d576 <_printf_i+0x22e>
 800d58a:	bf00      	nop
 800d58c:	08010fb6 	.word	0x08010fb6
 800d590:	08010fc7 	.word	0x08010fc7

0800d594 <iprintf>:
 800d594:	b40f      	push	{r0, r1, r2, r3}
 800d596:	4b0a      	ldr	r3, [pc, #40]	; (800d5c0 <iprintf+0x2c>)
 800d598:	b513      	push	{r0, r1, r4, lr}
 800d59a:	681c      	ldr	r4, [r3, #0]
 800d59c:	b124      	cbz	r4, 800d5a8 <iprintf+0x14>
 800d59e:	69a3      	ldr	r3, [r4, #24]
 800d5a0:	b913      	cbnz	r3, 800d5a8 <iprintf+0x14>
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f001 f91a 	bl	800e7dc <__sinit>
 800d5a8:	ab05      	add	r3, sp, #20
 800d5aa:	9a04      	ldr	r2, [sp, #16]
 800d5ac:	68a1      	ldr	r1, [r4, #8]
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f001 fe87 	bl	800f2c4 <_vfiprintf_r>
 800d5b6:	b002      	add	sp, #8
 800d5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5bc:	b004      	add	sp, #16
 800d5be:	4770      	bx	lr
 800d5c0:	20000014 	.word	0x20000014

0800d5c4 <_puts_r>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	460e      	mov	r6, r1
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	b118      	cbz	r0, 800d5d4 <_puts_r+0x10>
 800d5cc:	6983      	ldr	r3, [r0, #24]
 800d5ce:	b90b      	cbnz	r3, 800d5d4 <_puts_r+0x10>
 800d5d0:	f001 f904 	bl	800e7dc <__sinit>
 800d5d4:	69ab      	ldr	r3, [r5, #24]
 800d5d6:	68ac      	ldr	r4, [r5, #8]
 800d5d8:	b913      	cbnz	r3, 800d5e0 <_puts_r+0x1c>
 800d5da:	4628      	mov	r0, r5
 800d5dc:	f001 f8fe 	bl	800e7dc <__sinit>
 800d5e0:	4b2c      	ldr	r3, [pc, #176]	; (800d694 <_puts_r+0xd0>)
 800d5e2:	429c      	cmp	r4, r3
 800d5e4:	d120      	bne.n	800d628 <_puts_r+0x64>
 800d5e6:	686c      	ldr	r4, [r5, #4]
 800d5e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5ea:	07db      	lsls	r3, r3, #31
 800d5ec:	d405      	bmi.n	800d5fa <_puts_r+0x36>
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	0598      	lsls	r0, r3, #22
 800d5f2:	d402      	bmi.n	800d5fa <_puts_r+0x36>
 800d5f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5f6:	f001 f994 	bl	800e922 <__retarget_lock_acquire_recursive>
 800d5fa:	89a3      	ldrh	r3, [r4, #12]
 800d5fc:	0719      	lsls	r1, r3, #28
 800d5fe:	d51d      	bpl.n	800d63c <_puts_r+0x78>
 800d600:	6923      	ldr	r3, [r4, #16]
 800d602:	b1db      	cbz	r3, 800d63c <_puts_r+0x78>
 800d604:	3e01      	subs	r6, #1
 800d606:	68a3      	ldr	r3, [r4, #8]
 800d608:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d60c:	3b01      	subs	r3, #1
 800d60e:	60a3      	str	r3, [r4, #8]
 800d610:	bb39      	cbnz	r1, 800d662 <_puts_r+0x9e>
 800d612:	2b00      	cmp	r3, #0
 800d614:	da38      	bge.n	800d688 <_puts_r+0xc4>
 800d616:	4622      	mov	r2, r4
 800d618:	210a      	movs	r1, #10
 800d61a:	4628      	mov	r0, r5
 800d61c:	f000 f88c 	bl	800d738 <__swbuf_r>
 800d620:	3001      	adds	r0, #1
 800d622:	d011      	beq.n	800d648 <_puts_r+0x84>
 800d624:	250a      	movs	r5, #10
 800d626:	e011      	b.n	800d64c <_puts_r+0x88>
 800d628:	4b1b      	ldr	r3, [pc, #108]	; (800d698 <_puts_r+0xd4>)
 800d62a:	429c      	cmp	r4, r3
 800d62c:	d101      	bne.n	800d632 <_puts_r+0x6e>
 800d62e:	68ac      	ldr	r4, [r5, #8]
 800d630:	e7da      	b.n	800d5e8 <_puts_r+0x24>
 800d632:	4b1a      	ldr	r3, [pc, #104]	; (800d69c <_puts_r+0xd8>)
 800d634:	429c      	cmp	r4, r3
 800d636:	bf08      	it	eq
 800d638:	68ec      	ldreq	r4, [r5, #12]
 800d63a:	e7d5      	b.n	800d5e8 <_puts_r+0x24>
 800d63c:	4621      	mov	r1, r4
 800d63e:	4628      	mov	r0, r5
 800d640:	f000 f8cc 	bl	800d7dc <__swsetup_r>
 800d644:	2800      	cmp	r0, #0
 800d646:	d0dd      	beq.n	800d604 <_puts_r+0x40>
 800d648:	f04f 35ff 	mov.w	r5, #4294967295
 800d64c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d64e:	07da      	lsls	r2, r3, #31
 800d650:	d405      	bmi.n	800d65e <_puts_r+0x9a>
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	059b      	lsls	r3, r3, #22
 800d656:	d402      	bmi.n	800d65e <_puts_r+0x9a>
 800d658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d65a:	f001 f963 	bl	800e924 <__retarget_lock_release_recursive>
 800d65e:	4628      	mov	r0, r5
 800d660:	bd70      	pop	{r4, r5, r6, pc}
 800d662:	2b00      	cmp	r3, #0
 800d664:	da04      	bge.n	800d670 <_puts_r+0xac>
 800d666:	69a2      	ldr	r2, [r4, #24]
 800d668:	429a      	cmp	r2, r3
 800d66a:	dc06      	bgt.n	800d67a <_puts_r+0xb6>
 800d66c:	290a      	cmp	r1, #10
 800d66e:	d004      	beq.n	800d67a <_puts_r+0xb6>
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	6022      	str	r2, [r4, #0]
 800d676:	7019      	strb	r1, [r3, #0]
 800d678:	e7c5      	b.n	800d606 <_puts_r+0x42>
 800d67a:	4622      	mov	r2, r4
 800d67c:	4628      	mov	r0, r5
 800d67e:	f000 f85b 	bl	800d738 <__swbuf_r>
 800d682:	3001      	adds	r0, #1
 800d684:	d1bf      	bne.n	800d606 <_puts_r+0x42>
 800d686:	e7df      	b.n	800d648 <_puts_r+0x84>
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	250a      	movs	r5, #10
 800d68c:	1c5a      	adds	r2, r3, #1
 800d68e:	6022      	str	r2, [r4, #0]
 800d690:	701d      	strb	r5, [r3, #0]
 800d692:	e7db      	b.n	800d64c <_puts_r+0x88>
 800d694:	0801108c 	.word	0x0801108c
 800d698:	080110ac 	.word	0x080110ac
 800d69c:	0801106c 	.word	0x0801106c

0800d6a0 <puts>:
 800d6a0:	4b02      	ldr	r3, [pc, #8]	; (800d6ac <puts+0xc>)
 800d6a2:	4601      	mov	r1, r0
 800d6a4:	6818      	ldr	r0, [r3, #0]
 800d6a6:	f7ff bf8d 	b.w	800d5c4 <_puts_r>
 800d6aa:	bf00      	nop
 800d6ac:	20000014 	.word	0x20000014

0800d6b0 <_raise_r>:
 800d6b0:	291f      	cmp	r1, #31
 800d6b2:	b538      	push	{r3, r4, r5, lr}
 800d6b4:	4604      	mov	r4, r0
 800d6b6:	460d      	mov	r5, r1
 800d6b8:	d904      	bls.n	800d6c4 <_raise_r+0x14>
 800d6ba:	2316      	movs	r3, #22
 800d6bc:	6003      	str	r3, [r0, #0]
 800d6be:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c2:	bd38      	pop	{r3, r4, r5, pc}
 800d6c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6c6:	b112      	cbz	r2, 800d6ce <_raise_r+0x1e>
 800d6c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6cc:	b94b      	cbnz	r3, 800d6e2 <_raise_r+0x32>
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	f000 f830 	bl	800d734 <_getpid_r>
 800d6d4:	462a      	mov	r2, r5
 800d6d6:	4601      	mov	r1, r0
 800d6d8:	4620      	mov	r0, r4
 800d6da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6de:	f000 b817 	b.w	800d710 <_kill_r>
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d00a      	beq.n	800d6fc <_raise_r+0x4c>
 800d6e6:	1c59      	adds	r1, r3, #1
 800d6e8:	d103      	bne.n	800d6f2 <_raise_r+0x42>
 800d6ea:	2316      	movs	r3, #22
 800d6ec:	6003      	str	r3, [r0, #0]
 800d6ee:	2001      	movs	r0, #1
 800d6f0:	e7e7      	b.n	800d6c2 <_raise_r+0x12>
 800d6f2:	2400      	movs	r4, #0
 800d6f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	4798      	blx	r3
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	e7e0      	b.n	800d6c2 <_raise_r+0x12>

0800d700 <raise>:
 800d700:	4b02      	ldr	r3, [pc, #8]	; (800d70c <raise+0xc>)
 800d702:	4601      	mov	r1, r0
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	f7ff bfd3 	b.w	800d6b0 <_raise_r>
 800d70a:	bf00      	nop
 800d70c:	20000014 	.word	0x20000014

0800d710 <_kill_r>:
 800d710:	b538      	push	{r3, r4, r5, lr}
 800d712:	4d07      	ldr	r5, [pc, #28]	; (800d730 <_kill_r+0x20>)
 800d714:	2300      	movs	r3, #0
 800d716:	4604      	mov	r4, r0
 800d718:	4608      	mov	r0, r1
 800d71a:	4611      	mov	r1, r2
 800d71c:	602b      	str	r3, [r5, #0]
 800d71e:	f7f6 fce1 	bl	80040e4 <_kill>
 800d722:	1c43      	adds	r3, r0, #1
 800d724:	d102      	bne.n	800d72c <_kill_r+0x1c>
 800d726:	682b      	ldr	r3, [r5, #0]
 800d728:	b103      	cbz	r3, 800d72c <_kill_r+0x1c>
 800d72a:	6023      	str	r3, [r4, #0]
 800d72c:	bd38      	pop	{r3, r4, r5, pc}
 800d72e:	bf00      	nop
 800d730:	20005310 	.word	0x20005310

0800d734 <_getpid_r>:
 800d734:	f7f6 bcce 	b.w	80040d4 <_getpid>

0800d738 <__swbuf_r>:
 800d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73a:	460e      	mov	r6, r1
 800d73c:	4614      	mov	r4, r2
 800d73e:	4605      	mov	r5, r0
 800d740:	b118      	cbz	r0, 800d74a <__swbuf_r+0x12>
 800d742:	6983      	ldr	r3, [r0, #24]
 800d744:	b90b      	cbnz	r3, 800d74a <__swbuf_r+0x12>
 800d746:	f001 f849 	bl	800e7dc <__sinit>
 800d74a:	4b21      	ldr	r3, [pc, #132]	; (800d7d0 <__swbuf_r+0x98>)
 800d74c:	429c      	cmp	r4, r3
 800d74e:	d12b      	bne.n	800d7a8 <__swbuf_r+0x70>
 800d750:	686c      	ldr	r4, [r5, #4]
 800d752:	69a3      	ldr	r3, [r4, #24]
 800d754:	60a3      	str	r3, [r4, #8]
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	071a      	lsls	r2, r3, #28
 800d75a:	d52f      	bpl.n	800d7bc <__swbuf_r+0x84>
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	b36b      	cbz	r3, 800d7bc <__swbuf_r+0x84>
 800d760:	6923      	ldr	r3, [r4, #16]
 800d762:	6820      	ldr	r0, [r4, #0]
 800d764:	1ac0      	subs	r0, r0, r3
 800d766:	6963      	ldr	r3, [r4, #20]
 800d768:	b2f6      	uxtb	r6, r6
 800d76a:	4283      	cmp	r3, r0
 800d76c:	4637      	mov	r7, r6
 800d76e:	dc04      	bgt.n	800d77a <__swbuf_r+0x42>
 800d770:	4621      	mov	r1, r4
 800d772:	4628      	mov	r0, r5
 800d774:	f000 ff9e 	bl	800e6b4 <_fflush_r>
 800d778:	bb30      	cbnz	r0, 800d7c8 <__swbuf_r+0x90>
 800d77a:	68a3      	ldr	r3, [r4, #8]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	60a3      	str	r3, [r4, #8]
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	1c5a      	adds	r2, r3, #1
 800d784:	6022      	str	r2, [r4, #0]
 800d786:	701e      	strb	r6, [r3, #0]
 800d788:	6963      	ldr	r3, [r4, #20]
 800d78a:	3001      	adds	r0, #1
 800d78c:	4283      	cmp	r3, r0
 800d78e:	d004      	beq.n	800d79a <__swbuf_r+0x62>
 800d790:	89a3      	ldrh	r3, [r4, #12]
 800d792:	07db      	lsls	r3, r3, #31
 800d794:	d506      	bpl.n	800d7a4 <__swbuf_r+0x6c>
 800d796:	2e0a      	cmp	r6, #10
 800d798:	d104      	bne.n	800d7a4 <__swbuf_r+0x6c>
 800d79a:	4621      	mov	r1, r4
 800d79c:	4628      	mov	r0, r5
 800d79e:	f000 ff89 	bl	800e6b4 <_fflush_r>
 800d7a2:	b988      	cbnz	r0, 800d7c8 <__swbuf_r+0x90>
 800d7a4:	4638      	mov	r0, r7
 800d7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7a8:	4b0a      	ldr	r3, [pc, #40]	; (800d7d4 <__swbuf_r+0x9c>)
 800d7aa:	429c      	cmp	r4, r3
 800d7ac:	d101      	bne.n	800d7b2 <__swbuf_r+0x7a>
 800d7ae:	68ac      	ldr	r4, [r5, #8]
 800d7b0:	e7cf      	b.n	800d752 <__swbuf_r+0x1a>
 800d7b2:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <__swbuf_r+0xa0>)
 800d7b4:	429c      	cmp	r4, r3
 800d7b6:	bf08      	it	eq
 800d7b8:	68ec      	ldreq	r4, [r5, #12]
 800d7ba:	e7ca      	b.n	800d752 <__swbuf_r+0x1a>
 800d7bc:	4621      	mov	r1, r4
 800d7be:	4628      	mov	r0, r5
 800d7c0:	f000 f80c 	bl	800d7dc <__swsetup_r>
 800d7c4:	2800      	cmp	r0, #0
 800d7c6:	d0cb      	beq.n	800d760 <__swbuf_r+0x28>
 800d7c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d7cc:	e7ea      	b.n	800d7a4 <__swbuf_r+0x6c>
 800d7ce:	bf00      	nop
 800d7d0:	0801108c 	.word	0x0801108c
 800d7d4:	080110ac 	.word	0x080110ac
 800d7d8:	0801106c 	.word	0x0801106c

0800d7dc <__swsetup_r>:
 800d7dc:	4b32      	ldr	r3, [pc, #200]	; (800d8a8 <__swsetup_r+0xcc>)
 800d7de:	b570      	push	{r4, r5, r6, lr}
 800d7e0:	681d      	ldr	r5, [r3, #0]
 800d7e2:	4606      	mov	r6, r0
 800d7e4:	460c      	mov	r4, r1
 800d7e6:	b125      	cbz	r5, 800d7f2 <__swsetup_r+0x16>
 800d7e8:	69ab      	ldr	r3, [r5, #24]
 800d7ea:	b913      	cbnz	r3, 800d7f2 <__swsetup_r+0x16>
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	f000 fff5 	bl	800e7dc <__sinit>
 800d7f2:	4b2e      	ldr	r3, [pc, #184]	; (800d8ac <__swsetup_r+0xd0>)
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	d10f      	bne.n	800d818 <__swsetup_r+0x3c>
 800d7f8:	686c      	ldr	r4, [r5, #4]
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d800:	0719      	lsls	r1, r3, #28
 800d802:	d42c      	bmi.n	800d85e <__swsetup_r+0x82>
 800d804:	06dd      	lsls	r5, r3, #27
 800d806:	d411      	bmi.n	800d82c <__swsetup_r+0x50>
 800d808:	2309      	movs	r3, #9
 800d80a:	6033      	str	r3, [r6, #0]
 800d80c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d810:	81a3      	strh	r3, [r4, #12]
 800d812:	f04f 30ff 	mov.w	r0, #4294967295
 800d816:	e03e      	b.n	800d896 <__swsetup_r+0xba>
 800d818:	4b25      	ldr	r3, [pc, #148]	; (800d8b0 <__swsetup_r+0xd4>)
 800d81a:	429c      	cmp	r4, r3
 800d81c:	d101      	bne.n	800d822 <__swsetup_r+0x46>
 800d81e:	68ac      	ldr	r4, [r5, #8]
 800d820:	e7eb      	b.n	800d7fa <__swsetup_r+0x1e>
 800d822:	4b24      	ldr	r3, [pc, #144]	; (800d8b4 <__swsetup_r+0xd8>)
 800d824:	429c      	cmp	r4, r3
 800d826:	bf08      	it	eq
 800d828:	68ec      	ldreq	r4, [r5, #12]
 800d82a:	e7e6      	b.n	800d7fa <__swsetup_r+0x1e>
 800d82c:	0758      	lsls	r0, r3, #29
 800d82e:	d512      	bpl.n	800d856 <__swsetup_r+0x7a>
 800d830:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d832:	b141      	cbz	r1, 800d846 <__swsetup_r+0x6a>
 800d834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d838:	4299      	cmp	r1, r3
 800d83a:	d002      	beq.n	800d842 <__swsetup_r+0x66>
 800d83c:	4630      	mov	r0, r6
 800d83e:	f001 fc6d 	bl	800f11c <_free_r>
 800d842:	2300      	movs	r3, #0
 800d844:	6363      	str	r3, [r4, #52]	; 0x34
 800d846:	89a3      	ldrh	r3, [r4, #12]
 800d848:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d84c:	81a3      	strh	r3, [r4, #12]
 800d84e:	2300      	movs	r3, #0
 800d850:	6063      	str	r3, [r4, #4]
 800d852:	6923      	ldr	r3, [r4, #16]
 800d854:	6023      	str	r3, [r4, #0]
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	f043 0308 	orr.w	r3, r3, #8
 800d85c:	81a3      	strh	r3, [r4, #12]
 800d85e:	6923      	ldr	r3, [r4, #16]
 800d860:	b94b      	cbnz	r3, 800d876 <__swsetup_r+0x9a>
 800d862:	89a3      	ldrh	r3, [r4, #12]
 800d864:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d86c:	d003      	beq.n	800d876 <__swsetup_r+0x9a>
 800d86e:	4621      	mov	r1, r4
 800d870:	4630      	mov	r0, r6
 800d872:	f001 f87d 	bl	800e970 <__smakebuf_r>
 800d876:	89a0      	ldrh	r0, [r4, #12]
 800d878:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d87c:	f010 0301 	ands.w	r3, r0, #1
 800d880:	d00a      	beq.n	800d898 <__swsetup_r+0xbc>
 800d882:	2300      	movs	r3, #0
 800d884:	60a3      	str	r3, [r4, #8]
 800d886:	6963      	ldr	r3, [r4, #20]
 800d888:	425b      	negs	r3, r3
 800d88a:	61a3      	str	r3, [r4, #24]
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	b943      	cbnz	r3, 800d8a2 <__swsetup_r+0xc6>
 800d890:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d894:	d1ba      	bne.n	800d80c <__swsetup_r+0x30>
 800d896:	bd70      	pop	{r4, r5, r6, pc}
 800d898:	0781      	lsls	r1, r0, #30
 800d89a:	bf58      	it	pl
 800d89c:	6963      	ldrpl	r3, [r4, #20]
 800d89e:	60a3      	str	r3, [r4, #8]
 800d8a0:	e7f4      	b.n	800d88c <__swsetup_r+0xb0>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e7f7      	b.n	800d896 <__swsetup_r+0xba>
 800d8a6:	bf00      	nop
 800d8a8:	20000014 	.word	0x20000014
 800d8ac:	0801108c 	.word	0x0801108c
 800d8b0:	080110ac 	.word	0x080110ac
 800d8b4:	0801106c 	.word	0x0801106c

0800d8b8 <quorem>:
 800d8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	6903      	ldr	r3, [r0, #16]
 800d8be:	690c      	ldr	r4, [r1, #16]
 800d8c0:	42a3      	cmp	r3, r4
 800d8c2:	4607      	mov	r7, r0
 800d8c4:	f2c0 8081 	blt.w	800d9ca <quorem+0x112>
 800d8c8:	3c01      	subs	r4, #1
 800d8ca:	f101 0814 	add.w	r8, r1, #20
 800d8ce:	f100 0514 	add.w	r5, r0, #20
 800d8d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8d6:	9301      	str	r3, [sp, #4]
 800d8d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8f0:	d331      	bcc.n	800d956 <quorem+0x9e>
 800d8f2:	f04f 0e00 	mov.w	lr, #0
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	46ac      	mov	ip, r5
 800d8fa:	46f2      	mov	sl, lr
 800d8fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800d900:	b293      	uxth	r3, r2
 800d902:	fb06 e303 	mla	r3, r6, r3, lr
 800d906:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	ebaa 0303 	sub.w	r3, sl, r3
 800d910:	0c12      	lsrs	r2, r2, #16
 800d912:	f8dc a000 	ldr.w	sl, [ip]
 800d916:	fb06 e202 	mla	r2, r6, r2, lr
 800d91a:	fa13 f38a 	uxtah	r3, r3, sl
 800d91e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d922:	fa1f fa82 	uxth.w	sl, r2
 800d926:	f8dc 2000 	ldr.w	r2, [ip]
 800d92a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d92e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d932:	b29b      	uxth	r3, r3
 800d934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d938:	4581      	cmp	r9, r0
 800d93a:	f84c 3b04 	str.w	r3, [ip], #4
 800d93e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d942:	d2db      	bcs.n	800d8fc <quorem+0x44>
 800d944:	f855 300b 	ldr.w	r3, [r5, fp]
 800d948:	b92b      	cbnz	r3, 800d956 <quorem+0x9e>
 800d94a:	9b01      	ldr	r3, [sp, #4]
 800d94c:	3b04      	subs	r3, #4
 800d94e:	429d      	cmp	r5, r3
 800d950:	461a      	mov	r2, r3
 800d952:	d32e      	bcc.n	800d9b2 <quorem+0xfa>
 800d954:	613c      	str	r4, [r7, #16]
 800d956:	4638      	mov	r0, r7
 800d958:	f001 fad0 	bl	800eefc <__mcmp>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	db24      	blt.n	800d9aa <quorem+0xf2>
 800d960:	3601      	adds	r6, #1
 800d962:	4628      	mov	r0, r5
 800d964:	f04f 0c00 	mov.w	ip, #0
 800d968:	f858 2b04 	ldr.w	r2, [r8], #4
 800d96c:	f8d0 e000 	ldr.w	lr, [r0]
 800d970:	b293      	uxth	r3, r2
 800d972:	ebac 0303 	sub.w	r3, ip, r3
 800d976:	0c12      	lsrs	r2, r2, #16
 800d978:	fa13 f38e 	uxtah	r3, r3, lr
 800d97c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d984:	b29b      	uxth	r3, r3
 800d986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d98a:	45c1      	cmp	r9, r8
 800d98c:	f840 3b04 	str.w	r3, [r0], #4
 800d990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d994:	d2e8      	bcs.n	800d968 <quorem+0xb0>
 800d996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d99e:	b922      	cbnz	r2, 800d9aa <quorem+0xf2>
 800d9a0:	3b04      	subs	r3, #4
 800d9a2:	429d      	cmp	r5, r3
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	d30a      	bcc.n	800d9be <quorem+0x106>
 800d9a8:	613c      	str	r4, [r7, #16]
 800d9aa:	4630      	mov	r0, r6
 800d9ac:	b003      	add	sp, #12
 800d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b2:	6812      	ldr	r2, [r2, #0]
 800d9b4:	3b04      	subs	r3, #4
 800d9b6:	2a00      	cmp	r2, #0
 800d9b8:	d1cc      	bne.n	800d954 <quorem+0x9c>
 800d9ba:	3c01      	subs	r4, #1
 800d9bc:	e7c7      	b.n	800d94e <quorem+0x96>
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	3b04      	subs	r3, #4
 800d9c2:	2a00      	cmp	r2, #0
 800d9c4:	d1f0      	bne.n	800d9a8 <quorem+0xf0>
 800d9c6:	3c01      	subs	r4, #1
 800d9c8:	e7eb      	b.n	800d9a2 <quorem+0xea>
 800d9ca:	2000      	movs	r0, #0
 800d9cc:	e7ee      	b.n	800d9ac <quorem+0xf4>
	...

0800d9d0 <_dtoa_r>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	ed2d 8b02 	vpush	{d8}
 800d9d8:	ec57 6b10 	vmov	r6, r7, d0
 800d9dc:	b095      	sub	sp, #84	; 0x54
 800d9de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d9e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d9e4:	9105      	str	r1, [sp, #20]
 800d9e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9f0:	b975      	cbnz	r5, 800da10 <_dtoa_r+0x40>
 800d9f2:	2010      	movs	r0, #16
 800d9f4:	f000 fffc 	bl	800e9f0 <malloc>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	6260      	str	r0, [r4, #36]	; 0x24
 800d9fc:	b920      	cbnz	r0, 800da08 <_dtoa_r+0x38>
 800d9fe:	4bb2      	ldr	r3, [pc, #712]	; (800dcc8 <_dtoa_r+0x2f8>)
 800da00:	21ea      	movs	r1, #234	; 0xea
 800da02:	48b2      	ldr	r0, [pc, #712]	; (800dccc <_dtoa_r+0x2fc>)
 800da04:	f001 fdf4 	bl	800f5f0 <__assert_func>
 800da08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da0c:	6005      	str	r5, [r0, #0]
 800da0e:	60c5      	str	r5, [r0, #12]
 800da10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da12:	6819      	ldr	r1, [r3, #0]
 800da14:	b151      	cbz	r1, 800da2c <_dtoa_r+0x5c>
 800da16:	685a      	ldr	r2, [r3, #4]
 800da18:	604a      	str	r2, [r1, #4]
 800da1a:	2301      	movs	r3, #1
 800da1c:	4093      	lsls	r3, r2
 800da1e:	608b      	str	r3, [r1, #8]
 800da20:	4620      	mov	r0, r4
 800da22:	f001 f82d 	bl	800ea80 <_Bfree>
 800da26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da28:	2200      	movs	r2, #0
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	1e3b      	subs	r3, r7, #0
 800da2e:	bfb9      	ittee	lt
 800da30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da34:	9303      	strlt	r3, [sp, #12]
 800da36:	2300      	movge	r3, #0
 800da38:	f8c8 3000 	strge.w	r3, [r8]
 800da3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800da40:	4ba3      	ldr	r3, [pc, #652]	; (800dcd0 <_dtoa_r+0x300>)
 800da42:	bfbc      	itt	lt
 800da44:	2201      	movlt	r2, #1
 800da46:	f8c8 2000 	strlt.w	r2, [r8]
 800da4a:	ea33 0309 	bics.w	r3, r3, r9
 800da4e:	d11b      	bne.n	800da88 <_dtoa_r+0xb8>
 800da50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da52:	f242 730f 	movw	r3, #9999	; 0x270f
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da5c:	4333      	orrs	r3, r6
 800da5e:	f000 857a 	beq.w	800e556 <_dtoa_r+0xb86>
 800da62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da64:	b963      	cbnz	r3, 800da80 <_dtoa_r+0xb0>
 800da66:	4b9b      	ldr	r3, [pc, #620]	; (800dcd4 <_dtoa_r+0x304>)
 800da68:	e024      	b.n	800dab4 <_dtoa_r+0xe4>
 800da6a:	4b9b      	ldr	r3, [pc, #620]	; (800dcd8 <_dtoa_r+0x308>)
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	9800      	ldr	r0, [sp, #0]
 800da76:	b015      	add	sp, #84	; 0x54
 800da78:	ecbd 8b02 	vpop	{d8}
 800da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da80:	4b94      	ldr	r3, [pc, #592]	; (800dcd4 <_dtoa_r+0x304>)
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	3303      	adds	r3, #3
 800da86:	e7f3      	b.n	800da70 <_dtoa_r+0xa0>
 800da88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800da8c:	2200      	movs	r2, #0
 800da8e:	ec51 0b17 	vmov	r0, r1, d7
 800da92:	2300      	movs	r3, #0
 800da94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800da98:	f7f3 f83e 	bl	8000b18 <__aeabi_dcmpeq>
 800da9c:	4680      	mov	r8, r0
 800da9e:	b158      	cbz	r0, 800dab8 <_dtoa_r+0xe8>
 800daa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800daa2:	2301      	movs	r3, #1
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f000 8551 	beq.w	800e550 <_dtoa_r+0xb80>
 800daae:	488b      	ldr	r0, [pc, #556]	; (800dcdc <_dtoa_r+0x30c>)
 800dab0:	6018      	str	r0, [r3, #0]
 800dab2:	1e43      	subs	r3, r0, #1
 800dab4:	9300      	str	r3, [sp, #0]
 800dab6:	e7dd      	b.n	800da74 <_dtoa_r+0xa4>
 800dab8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dabc:	aa12      	add	r2, sp, #72	; 0x48
 800dabe:	a913      	add	r1, sp, #76	; 0x4c
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 fabf 	bl	800f044 <__d2b>
 800dac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800daca:	4683      	mov	fp, r0
 800dacc:	2d00      	cmp	r5, #0
 800dace:	d07c      	beq.n	800dbca <_dtoa_r+0x1fa>
 800dad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dad2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dada:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dade:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800daea:	4b7d      	ldr	r3, [pc, #500]	; (800dce0 <_dtoa_r+0x310>)
 800daec:	2200      	movs	r2, #0
 800daee:	4630      	mov	r0, r6
 800daf0:	4639      	mov	r1, r7
 800daf2:	f7f2 fbf1 	bl	80002d8 <__aeabi_dsub>
 800daf6:	a36e      	add	r3, pc, #440	; (adr r3, 800dcb0 <_dtoa_r+0x2e0>)
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f7f2 fda4 	bl	8000648 <__aeabi_dmul>
 800db00:	a36d      	add	r3, pc, #436	; (adr r3, 800dcb8 <_dtoa_r+0x2e8>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	f7f2 fbe9 	bl	80002dc <__adddf3>
 800db0a:	4606      	mov	r6, r0
 800db0c:	4628      	mov	r0, r5
 800db0e:	460f      	mov	r7, r1
 800db10:	f7f2 fd30 	bl	8000574 <__aeabi_i2d>
 800db14:	a36a      	add	r3, pc, #424	; (adr r3, 800dcc0 <_dtoa_r+0x2f0>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fd95 	bl	8000648 <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4630      	mov	r0, r6
 800db24:	4639      	mov	r1, r7
 800db26:	f7f2 fbd9 	bl	80002dc <__adddf3>
 800db2a:	4606      	mov	r6, r0
 800db2c:	460f      	mov	r7, r1
 800db2e:	f7f3 f83b 	bl	8000ba8 <__aeabi_d2iz>
 800db32:	2200      	movs	r2, #0
 800db34:	4682      	mov	sl, r0
 800db36:	2300      	movs	r3, #0
 800db38:	4630      	mov	r0, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	f7f2 fff6 	bl	8000b2c <__aeabi_dcmplt>
 800db40:	b148      	cbz	r0, 800db56 <_dtoa_r+0x186>
 800db42:	4650      	mov	r0, sl
 800db44:	f7f2 fd16 	bl	8000574 <__aeabi_i2d>
 800db48:	4632      	mov	r2, r6
 800db4a:	463b      	mov	r3, r7
 800db4c:	f7f2 ffe4 	bl	8000b18 <__aeabi_dcmpeq>
 800db50:	b908      	cbnz	r0, 800db56 <_dtoa_r+0x186>
 800db52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db56:	f1ba 0f16 	cmp.w	sl, #22
 800db5a:	d854      	bhi.n	800dc06 <_dtoa_r+0x236>
 800db5c:	4b61      	ldr	r3, [pc, #388]	; (800dce4 <_dtoa_r+0x314>)
 800db5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db6a:	f7f2 ffdf 	bl	8000b2c <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d04b      	beq.n	800dc0a <_dtoa_r+0x23a>
 800db72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db76:	2300      	movs	r3, #0
 800db78:	930e      	str	r3, [sp, #56]	; 0x38
 800db7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800db7c:	1b5d      	subs	r5, r3, r5
 800db7e:	1e6b      	subs	r3, r5, #1
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	bf43      	ittte	mi
 800db84:	2300      	movmi	r3, #0
 800db86:	f1c5 0801 	rsbmi	r8, r5, #1
 800db8a:	9304      	strmi	r3, [sp, #16]
 800db8c:	f04f 0800 	movpl.w	r8, #0
 800db90:	f1ba 0f00 	cmp.w	sl, #0
 800db94:	db3b      	blt.n	800dc0e <_dtoa_r+0x23e>
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800db9c:	4453      	add	r3, sl
 800db9e:	9304      	str	r3, [sp, #16]
 800dba0:	2300      	movs	r3, #0
 800dba2:	9306      	str	r3, [sp, #24]
 800dba4:	9b05      	ldr	r3, [sp, #20]
 800dba6:	2b09      	cmp	r3, #9
 800dba8:	d869      	bhi.n	800dc7e <_dtoa_r+0x2ae>
 800dbaa:	2b05      	cmp	r3, #5
 800dbac:	bfc4      	itt	gt
 800dbae:	3b04      	subgt	r3, #4
 800dbb0:	9305      	strgt	r3, [sp, #20]
 800dbb2:	9b05      	ldr	r3, [sp, #20]
 800dbb4:	f1a3 0302 	sub.w	r3, r3, #2
 800dbb8:	bfcc      	ite	gt
 800dbba:	2500      	movgt	r5, #0
 800dbbc:	2501      	movle	r5, #1
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	d869      	bhi.n	800dc96 <_dtoa_r+0x2c6>
 800dbc2:	e8df f003 	tbb	[pc, r3]
 800dbc6:	4e2c      	.short	0x4e2c
 800dbc8:	5a4c      	.short	0x5a4c
 800dbca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dbce:	441d      	add	r5, r3
 800dbd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dbd4:	2b20      	cmp	r3, #32
 800dbd6:	bfc1      	itttt	gt
 800dbd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbdc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dbe0:	fa09 f303 	lslgt.w	r3, r9, r3
 800dbe4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dbe8:	bfda      	itte	le
 800dbea:	f1c3 0320 	rsble	r3, r3, #32
 800dbee:	fa06 f003 	lslle.w	r0, r6, r3
 800dbf2:	4318      	orrgt	r0, r3
 800dbf4:	f7f2 fcae 	bl	8000554 <__aeabi_ui2d>
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	4606      	mov	r6, r0
 800dbfc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc00:	3d01      	subs	r5, #1
 800dc02:	9310      	str	r3, [sp, #64]	; 0x40
 800dc04:	e771      	b.n	800daea <_dtoa_r+0x11a>
 800dc06:	2301      	movs	r3, #1
 800dc08:	e7b6      	b.n	800db78 <_dtoa_r+0x1a8>
 800dc0a:	900e      	str	r0, [sp, #56]	; 0x38
 800dc0c:	e7b5      	b.n	800db7a <_dtoa_r+0x1aa>
 800dc0e:	f1ca 0300 	rsb	r3, sl, #0
 800dc12:	9306      	str	r3, [sp, #24]
 800dc14:	2300      	movs	r3, #0
 800dc16:	eba8 080a 	sub.w	r8, r8, sl
 800dc1a:	930d      	str	r3, [sp, #52]	; 0x34
 800dc1c:	e7c2      	b.n	800dba4 <_dtoa_r+0x1d4>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	9308      	str	r3, [sp, #32]
 800dc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	dc39      	bgt.n	800dc9c <_dtoa_r+0x2cc>
 800dc28:	f04f 0901 	mov.w	r9, #1
 800dc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc30:	464b      	mov	r3, r9
 800dc32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dc36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dc38:	2200      	movs	r2, #0
 800dc3a:	6042      	str	r2, [r0, #4]
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	f102 0614 	add.w	r6, r2, #20
 800dc42:	429e      	cmp	r6, r3
 800dc44:	6841      	ldr	r1, [r0, #4]
 800dc46:	d92f      	bls.n	800dca8 <_dtoa_r+0x2d8>
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f000 fed9 	bl	800ea00 <_Balloc>
 800dc4e:	9000      	str	r0, [sp, #0]
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d14b      	bne.n	800dcec <_dtoa_r+0x31c>
 800dc54:	4b24      	ldr	r3, [pc, #144]	; (800dce8 <_dtoa_r+0x318>)
 800dc56:	4602      	mov	r2, r0
 800dc58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc5c:	e6d1      	b.n	800da02 <_dtoa_r+0x32>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e7de      	b.n	800dc20 <_dtoa_r+0x250>
 800dc62:	2300      	movs	r3, #0
 800dc64:	9308      	str	r3, [sp, #32]
 800dc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc68:	eb0a 0903 	add.w	r9, sl, r3
 800dc6c:	f109 0301 	add.w	r3, r9, #1
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	9301      	str	r3, [sp, #4]
 800dc74:	bfb8      	it	lt
 800dc76:	2301      	movlt	r3, #1
 800dc78:	e7dd      	b.n	800dc36 <_dtoa_r+0x266>
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e7f2      	b.n	800dc64 <_dtoa_r+0x294>
 800dc7e:	2501      	movs	r5, #1
 800dc80:	2300      	movs	r3, #0
 800dc82:	9305      	str	r3, [sp, #20]
 800dc84:	9508      	str	r5, [sp, #32]
 800dc86:	f04f 39ff 	mov.w	r9, #4294967295
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800dc90:	2312      	movs	r3, #18
 800dc92:	9209      	str	r2, [sp, #36]	; 0x24
 800dc94:	e7cf      	b.n	800dc36 <_dtoa_r+0x266>
 800dc96:	2301      	movs	r3, #1
 800dc98:	9308      	str	r3, [sp, #32]
 800dc9a:	e7f4      	b.n	800dc86 <_dtoa_r+0x2b6>
 800dc9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dca0:	f8cd 9004 	str.w	r9, [sp, #4]
 800dca4:	464b      	mov	r3, r9
 800dca6:	e7c6      	b.n	800dc36 <_dtoa_r+0x266>
 800dca8:	3101      	adds	r1, #1
 800dcaa:	6041      	str	r1, [r0, #4]
 800dcac:	0052      	lsls	r2, r2, #1
 800dcae:	e7c6      	b.n	800dc3e <_dtoa_r+0x26e>
 800dcb0:	636f4361 	.word	0x636f4361
 800dcb4:	3fd287a7 	.word	0x3fd287a7
 800dcb8:	8b60c8b3 	.word	0x8b60c8b3
 800dcbc:	3fc68a28 	.word	0x3fc68a28
 800dcc0:	509f79fb 	.word	0x509f79fb
 800dcc4:	3fd34413 	.word	0x3fd34413
 800dcc8:	08010fe5 	.word	0x08010fe5
 800dccc:	08010ffc 	.word	0x08010ffc
 800dcd0:	7ff00000 	.word	0x7ff00000
 800dcd4:	08010fe1 	.word	0x08010fe1
 800dcd8:	08010fd8 	.word	0x08010fd8
 800dcdc:	08010fb5 	.word	0x08010fb5
 800dce0:	3ff80000 	.word	0x3ff80000
 800dce4:	08011158 	.word	0x08011158
 800dce8:	0801105b 	.word	0x0801105b
 800dcec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcee:	9a00      	ldr	r2, [sp, #0]
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	9b01      	ldr	r3, [sp, #4]
 800dcf4:	2b0e      	cmp	r3, #14
 800dcf6:	f200 80ad 	bhi.w	800de54 <_dtoa_r+0x484>
 800dcfa:	2d00      	cmp	r5, #0
 800dcfc:	f000 80aa 	beq.w	800de54 <_dtoa_r+0x484>
 800dd00:	f1ba 0f00 	cmp.w	sl, #0
 800dd04:	dd36      	ble.n	800dd74 <_dtoa_r+0x3a4>
 800dd06:	4ac3      	ldr	r2, [pc, #780]	; (800e014 <_dtoa_r+0x644>)
 800dd08:	f00a 030f 	and.w	r3, sl, #15
 800dd0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dd10:	ed93 7b00 	vldr	d7, [r3]
 800dd14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dd18:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dd1c:	eeb0 8a47 	vmov.f32	s16, s14
 800dd20:	eef0 8a67 	vmov.f32	s17, s15
 800dd24:	d016      	beq.n	800dd54 <_dtoa_r+0x384>
 800dd26:	4bbc      	ldr	r3, [pc, #752]	; (800e018 <_dtoa_r+0x648>)
 800dd28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd30:	f7f2 fdb4 	bl	800089c <__aeabi_ddiv>
 800dd34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd38:	f007 070f 	and.w	r7, r7, #15
 800dd3c:	2503      	movs	r5, #3
 800dd3e:	4eb6      	ldr	r6, [pc, #728]	; (800e018 <_dtoa_r+0x648>)
 800dd40:	b957      	cbnz	r7, 800dd58 <_dtoa_r+0x388>
 800dd42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd46:	ec53 2b18 	vmov	r2, r3, d8
 800dd4a:	f7f2 fda7 	bl	800089c <__aeabi_ddiv>
 800dd4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd52:	e029      	b.n	800dda8 <_dtoa_r+0x3d8>
 800dd54:	2502      	movs	r5, #2
 800dd56:	e7f2      	b.n	800dd3e <_dtoa_r+0x36e>
 800dd58:	07f9      	lsls	r1, r7, #31
 800dd5a:	d508      	bpl.n	800dd6e <_dtoa_r+0x39e>
 800dd5c:	ec51 0b18 	vmov	r0, r1, d8
 800dd60:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd64:	f7f2 fc70 	bl	8000648 <__aeabi_dmul>
 800dd68:	ec41 0b18 	vmov	d8, r0, r1
 800dd6c:	3501      	adds	r5, #1
 800dd6e:	107f      	asrs	r7, r7, #1
 800dd70:	3608      	adds	r6, #8
 800dd72:	e7e5      	b.n	800dd40 <_dtoa_r+0x370>
 800dd74:	f000 80a6 	beq.w	800dec4 <_dtoa_r+0x4f4>
 800dd78:	f1ca 0600 	rsb	r6, sl, #0
 800dd7c:	4ba5      	ldr	r3, [pc, #660]	; (800e014 <_dtoa_r+0x644>)
 800dd7e:	4fa6      	ldr	r7, [pc, #664]	; (800e018 <_dtoa_r+0x648>)
 800dd80:	f006 020f 	and.w	r2, r6, #15
 800dd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd90:	f7f2 fc5a 	bl	8000648 <__aeabi_dmul>
 800dd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd98:	1136      	asrs	r6, r6, #4
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	2502      	movs	r5, #2
 800dd9e:	2e00      	cmp	r6, #0
 800dda0:	f040 8085 	bne.w	800deae <_dtoa_r+0x4de>
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1d2      	bne.n	800dd4e <_dtoa_r+0x37e>
 800dda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 808c 	beq.w	800dec8 <_dtoa_r+0x4f8>
 800ddb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddb4:	4b99      	ldr	r3, [pc, #612]	; (800e01c <_dtoa_r+0x64c>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f7f2 feb6 	bl	8000b2c <__aeabi_dcmplt>
 800ddc0:	2800      	cmp	r0, #0
 800ddc2:	f000 8081 	beq.w	800dec8 <_dtoa_r+0x4f8>
 800ddc6:	9b01      	ldr	r3, [sp, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d07d      	beq.n	800dec8 <_dtoa_r+0x4f8>
 800ddcc:	f1b9 0f00 	cmp.w	r9, #0
 800ddd0:	dd3c      	ble.n	800de4c <_dtoa_r+0x47c>
 800ddd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ddd6:	9307      	str	r3, [sp, #28]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	4b91      	ldr	r3, [pc, #580]	; (800e020 <_dtoa_r+0x650>)
 800dddc:	4630      	mov	r0, r6
 800ddde:	4639      	mov	r1, r7
 800dde0:	f7f2 fc32 	bl	8000648 <__aeabi_dmul>
 800dde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dde8:	3501      	adds	r5, #1
 800ddea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ddee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	f7f2 fbbe 	bl	8000574 <__aeabi_i2d>
 800ddf8:	4632      	mov	r2, r6
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	f7f2 fc24 	bl	8000648 <__aeabi_dmul>
 800de00:	4b88      	ldr	r3, [pc, #544]	; (800e024 <_dtoa_r+0x654>)
 800de02:	2200      	movs	r2, #0
 800de04:	f7f2 fa6a 	bl	80002dc <__adddf3>
 800de08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800de0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de10:	9303      	str	r3, [sp, #12]
 800de12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de14:	2b00      	cmp	r3, #0
 800de16:	d15c      	bne.n	800ded2 <_dtoa_r+0x502>
 800de18:	4b83      	ldr	r3, [pc, #524]	; (800e028 <_dtoa_r+0x658>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f7f2 fa5a 	bl	80002d8 <__aeabi_dsub>
 800de24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de28:	4606      	mov	r6, r0
 800de2a:	460f      	mov	r7, r1
 800de2c:	f7f2 fe9c 	bl	8000b68 <__aeabi_dcmpgt>
 800de30:	2800      	cmp	r0, #0
 800de32:	f040 8296 	bne.w	800e362 <_dtoa_r+0x992>
 800de36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800de3a:	4630      	mov	r0, r6
 800de3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fe73 	bl	8000b2c <__aeabi_dcmplt>
 800de46:	2800      	cmp	r0, #0
 800de48:	f040 8288 	bne.w	800e35c <_dtoa_r+0x98c>
 800de4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800de56:	2b00      	cmp	r3, #0
 800de58:	f2c0 8158 	blt.w	800e10c <_dtoa_r+0x73c>
 800de5c:	f1ba 0f0e 	cmp.w	sl, #14
 800de60:	f300 8154 	bgt.w	800e10c <_dtoa_r+0x73c>
 800de64:	4b6b      	ldr	r3, [pc, #428]	; (800e014 <_dtoa_r+0x644>)
 800de66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de70:	2b00      	cmp	r3, #0
 800de72:	f280 80e3 	bge.w	800e03c <_dtoa_r+0x66c>
 800de76:	9b01      	ldr	r3, [sp, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f300 80df 	bgt.w	800e03c <_dtoa_r+0x66c>
 800de7e:	f040 826d 	bne.w	800e35c <_dtoa_r+0x98c>
 800de82:	4b69      	ldr	r3, [pc, #420]	; (800e028 <_dtoa_r+0x658>)
 800de84:	2200      	movs	r2, #0
 800de86:	4640      	mov	r0, r8
 800de88:	4649      	mov	r1, r9
 800de8a:	f7f2 fbdd 	bl	8000648 <__aeabi_dmul>
 800de8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de92:	f7f2 fe5f 	bl	8000b54 <__aeabi_dcmpge>
 800de96:	9e01      	ldr	r6, [sp, #4]
 800de98:	4637      	mov	r7, r6
 800de9a:	2800      	cmp	r0, #0
 800de9c:	f040 8243 	bne.w	800e326 <_dtoa_r+0x956>
 800dea0:	9d00      	ldr	r5, [sp, #0]
 800dea2:	2331      	movs	r3, #49	; 0x31
 800dea4:	f805 3b01 	strb.w	r3, [r5], #1
 800dea8:	f10a 0a01 	add.w	sl, sl, #1
 800deac:	e23f      	b.n	800e32e <_dtoa_r+0x95e>
 800deae:	07f2      	lsls	r2, r6, #31
 800deb0:	d505      	bpl.n	800debe <_dtoa_r+0x4ee>
 800deb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800deb6:	f7f2 fbc7 	bl	8000648 <__aeabi_dmul>
 800deba:	3501      	adds	r5, #1
 800debc:	2301      	movs	r3, #1
 800debe:	1076      	asrs	r6, r6, #1
 800dec0:	3708      	adds	r7, #8
 800dec2:	e76c      	b.n	800dd9e <_dtoa_r+0x3ce>
 800dec4:	2502      	movs	r5, #2
 800dec6:	e76f      	b.n	800dda8 <_dtoa_r+0x3d8>
 800dec8:	9b01      	ldr	r3, [sp, #4]
 800deca:	f8cd a01c 	str.w	sl, [sp, #28]
 800dece:	930c      	str	r3, [sp, #48]	; 0x30
 800ded0:	e78d      	b.n	800ddee <_dtoa_r+0x41e>
 800ded2:	9900      	ldr	r1, [sp, #0]
 800ded4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ded6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ded8:	4b4e      	ldr	r3, [pc, #312]	; (800e014 <_dtoa_r+0x644>)
 800deda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dede:	4401      	add	r1, r0
 800dee0:	9102      	str	r1, [sp, #8]
 800dee2:	9908      	ldr	r1, [sp, #32]
 800dee4:	eeb0 8a47 	vmov.f32	s16, s14
 800dee8:	eef0 8a67 	vmov.f32	s17, s15
 800deec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800def0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800def4:	2900      	cmp	r1, #0
 800def6:	d045      	beq.n	800df84 <_dtoa_r+0x5b4>
 800def8:	494c      	ldr	r1, [pc, #304]	; (800e02c <_dtoa_r+0x65c>)
 800defa:	2000      	movs	r0, #0
 800defc:	f7f2 fcce 	bl	800089c <__aeabi_ddiv>
 800df00:	ec53 2b18 	vmov	r2, r3, d8
 800df04:	f7f2 f9e8 	bl	80002d8 <__aeabi_dsub>
 800df08:	9d00      	ldr	r5, [sp, #0]
 800df0a:	ec41 0b18 	vmov	d8, r0, r1
 800df0e:	4639      	mov	r1, r7
 800df10:	4630      	mov	r0, r6
 800df12:	f7f2 fe49 	bl	8000ba8 <__aeabi_d2iz>
 800df16:	900c      	str	r0, [sp, #48]	; 0x30
 800df18:	f7f2 fb2c 	bl	8000574 <__aeabi_i2d>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4630      	mov	r0, r6
 800df22:	4639      	mov	r1, r7
 800df24:	f7f2 f9d8 	bl	80002d8 <__aeabi_dsub>
 800df28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df2a:	3330      	adds	r3, #48	; 0x30
 800df2c:	f805 3b01 	strb.w	r3, [r5], #1
 800df30:	ec53 2b18 	vmov	r2, r3, d8
 800df34:	4606      	mov	r6, r0
 800df36:	460f      	mov	r7, r1
 800df38:	f7f2 fdf8 	bl	8000b2c <__aeabi_dcmplt>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d165      	bne.n	800e00c <_dtoa_r+0x63c>
 800df40:	4632      	mov	r2, r6
 800df42:	463b      	mov	r3, r7
 800df44:	4935      	ldr	r1, [pc, #212]	; (800e01c <_dtoa_r+0x64c>)
 800df46:	2000      	movs	r0, #0
 800df48:	f7f2 f9c6 	bl	80002d8 <__aeabi_dsub>
 800df4c:	ec53 2b18 	vmov	r2, r3, d8
 800df50:	f7f2 fdec 	bl	8000b2c <__aeabi_dcmplt>
 800df54:	2800      	cmp	r0, #0
 800df56:	f040 80b9 	bne.w	800e0cc <_dtoa_r+0x6fc>
 800df5a:	9b02      	ldr	r3, [sp, #8]
 800df5c:	429d      	cmp	r5, r3
 800df5e:	f43f af75 	beq.w	800de4c <_dtoa_r+0x47c>
 800df62:	4b2f      	ldr	r3, [pc, #188]	; (800e020 <_dtoa_r+0x650>)
 800df64:	ec51 0b18 	vmov	r0, r1, d8
 800df68:	2200      	movs	r2, #0
 800df6a:	f7f2 fb6d 	bl	8000648 <__aeabi_dmul>
 800df6e:	4b2c      	ldr	r3, [pc, #176]	; (800e020 <_dtoa_r+0x650>)
 800df70:	ec41 0b18 	vmov	d8, r0, r1
 800df74:	2200      	movs	r2, #0
 800df76:	4630      	mov	r0, r6
 800df78:	4639      	mov	r1, r7
 800df7a:	f7f2 fb65 	bl	8000648 <__aeabi_dmul>
 800df7e:	4606      	mov	r6, r0
 800df80:	460f      	mov	r7, r1
 800df82:	e7c4      	b.n	800df0e <_dtoa_r+0x53e>
 800df84:	ec51 0b17 	vmov	r0, r1, d7
 800df88:	f7f2 fb5e 	bl	8000648 <__aeabi_dmul>
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	9d00      	ldr	r5, [sp, #0]
 800df90:	930c      	str	r3, [sp, #48]	; 0x30
 800df92:	ec41 0b18 	vmov	d8, r0, r1
 800df96:	4639      	mov	r1, r7
 800df98:	4630      	mov	r0, r6
 800df9a:	f7f2 fe05 	bl	8000ba8 <__aeabi_d2iz>
 800df9e:	9011      	str	r0, [sp, #68]	; 0x44
 800dfa0:	f7f2 fae8 	bl	8000574 <__aeabi_i2d>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	4639      	mov	r1, r7
 800dfac:	f7f2 f994 	bl	80002d8 <__aeabi_dsub>
 800dfb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dfb2:	3330      	adds	r3, #48	; 0x30
 800dfb4:	f805 3b01 	strb.w	r3, [r5], #1
 800dfb8:	9b02      	ldr	r3, [sp, #8]
 800dfba:	429d      	cmp	r5, r3
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	460f      	mov	r7, r1
 800dfc0:	f04f 0200 	mov.w	r2, #0
 800dfc4:	d134      	bne.n	800e030 <_dtoa_r+0x660>
 800dfc6:	4b19      	ldr	r3, [pc, #100]	; (800e02c <_dtoa_r+0x65c>)
 800dfc8:	ec51 0b18 	vmov	r0, r1, d8
 800dfcc:	f7f2 f986 	bl	80002dc <__adddf3>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	4639      	mov	r1, r7
 800dfd8:	f7f2 fdc6 	bl	8000b68 <__aeabi_dcmpgt>
 800dfdc:	2800      	cmp	r0, #0
 800dfde:	d175      	bne.n	800e0cc <_dtoa_r+0x6fc>
 800dfe0:	ec53 2b18 	vmov	r2, r3, d8
 800dfe4:	4911      	ldr	r1, [pc, #68]	; (800e02c <_dtoa_r+0x65c>)
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	f7f2 f976 	bl	80002d8 <__aeabi_dsub>
 800dfec:	4602      	mov	r2, r0
 800dfee:	460b      	mov	r3, r1
 800dff0:	4630      	mov	r0, r6
 800dff2:	4639      	mov	r1, r7
 800dff4:	f7f2 fd9a 	bl	8000b2c <__aeabi_dcmplt>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f43f af27 	beq.w	800de4c <_dtoa_r+0x47c>
 800dffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e000:	1e6b      	subs	r3, r5, #1
 800e002:	930c      	str	r3, [sp, #48]	; 0x30
 800e004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e008:	2b30      	cmp	r3, #48	; 0x30
 800e00a:	d0f8      	beq.n	800dffe <_dtoa_r+0x62e>
 800e00c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e010:	e04a      	b.n	800e0a8 <_dtoa_r+0x6d8>
 800e012:	bf00      	nop
 800e014:	08011158 	.word	0x08011158
 800e018:	08011130 	.word	0x08011130
 800e01c:	3ff00000 	.word	0x3ff00000
 800e020:	40240000 	.word	0x40240000
 800e024:	401c0000 	.word	0x401c0000
 800e028:	40140000 	.word	0x40140000
 800e02c:	3fe00000 	.word	0x3fe00000
 800e030:	4baf      	ldr	r3, [pc, #700]	; (800e2f0 <_dtoa_r+0x920>)
 800e032:	f7f2 fb09 	bl	8000648 <__aeabi_dmul>
 800e036:	4606      	mov	r6, r0
 800e038:	460f      	mov	r7, r1
 800e03a:	e7ac      	b.n	800df96 <_dtoa_r+0x5c6>
 800e03c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e040:	9d00      	ldr	r5, [sp, #0]
 800e042:	4642      	mov	r2, r8
 800e044:	464b      	mov	r3, r9
 800e046:	4630      	mov	r0, r6
 800e048:	4639      	mov	r1, r7
 800e04a:	f7f2 fc27 	bl	800089c <__aeabi_ddiv>
 800e04e:	f7f2 fdab 	bl	8000ba8 <__aeabi_d2iz>
 800e052:	9002      	str	r0, [sp, #8]
 800e054:	f7f2 fa8e 	bl	8000574 <__aeabi_i2d>
 800e058:	4642      	mov	r2, r8
 800e05a:	464b      	mov	r3, r9
 800e05c:	f7f2 faf4 	bl	8000648 <__aeabi_dmul>
 800e060:	4602      	mov	r2, r0
 800e062:	460b      	mov	r3, r1
 800e064:	4630      	mov	r0, r6
 800e066:	4639      	mov	r1, r7
 800e068:	f7f2 f936 	bl	80002d8 <__aeabi_dsub>
 800e06c:	9e02      	ldr	r6, [sp, #8]
 800e06e:	9f01      	ldr	r7, [sp, #4]
 800e070:	3630      	adds	r6, #48	; 0x30
 800e072:	f805 6b01 	strb.w	r6, [r5], #1
 800e076:	9e00      	ldr	r6, [sp, #0]
 800e078:	1bae      	subs	r6, r5, r6
 800e07a:	42b7      	cmp	r7, r6
 800e07c:	4602      	mov	r2, r0
 800e07e:	460b      	mov	r3, r1
 800e080:	d137      	bne.n	800e0f2 <_dtoa_r+0x722>
 800e082:	f7f2 f92b 	bl	80002dc <__adddf3>
 800e086:	4642      	mov	r2, r8
 800e088:	464b      	mov	r3, r9
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	f7f2 fd6b 	bl	8000b68 <__aeabi_dcmpgt>
 800e092:	b9c8      	cbnz	r0, 800e0c8 <_dtoa_r+0x6f8>
 800e094:	4642      	mov	r2, r8
 800e096:	464b      	mov	r3, r9
 800e098:	4630      	mov	r0, r6
 800e09a:	4639      	mov	r1, r7
 800e09c:	f7f2 fd3c 	bl	8000b18 <__aeabi_dcmpeq>
 800e0a0:	b110      	cbz	r0, 800e0a8 <_dtoa_r+0x6d8>
 800e0a2:	9b02      	ldr	r3, [sp, #8]
 800e0a4:	07d9      	lsls	r1, r3, #31
 800e0a6:	d40f      	bmi.n	800e0c8 <_dtoa_r+0x6f8>
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	4659      	mov	r1, fp
 800e0ac:	f000 fce8 	bl	800ea80 <_Bfree>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	702b      	strb	r3, [r5, #0]
 800e0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0b6:	f10a 0001 	add.w	r0, sl, #1
 800e0ba:	6018      	str	r0, [r3, #0]
 800e0bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f43f acd8 	beq.w	800da74 <_dtoa_r+0xa4>
 800e0c4:	601d      	str	r5, [r3, #0]
 800e0c6:	e4d5      	b.n	800da74 <_dtoa_r+0xa4>
 800e0c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800e0cc:	462b      	mov	r3, r5
 800e0ce:	461d      	mov	r5, r3
 800e0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0d4:	2a39      	cmp	r2, #57	; 0x39
 800e0d6:	d108      	bne.n	800e0ea <_dtoa_r+0x71a>
 800e0d8:	9a00      	ldr	r2, [sp, #0]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d1f7      	bne.n	800e0ce <_dtoa_r+0x6fe>
 800e0de:	9a07      	ldr	r2, [sp, #28]
 800e0e0:	9900      	ldr	r1, [sp, #0]
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	9207      	str	r2, [sp, #28]
 800e0e6:	2230      	movs	r2, #48	; 0x30
 800e0e8:	700a      	strb	r2, [r1, #0]
 800e0ea:	781a      	ldrb	r2, [r3, #0]
 800e0ec:	3201      	adds	r2, #1
 800e0ee:	701a      	strb	r2, [r3, #0]
 800e0f0:	e78c      	b.n	800e00c <_dtoa_r+0x63c>
 800e0f2:	4b7f      	ldr	r3, [pc, #508]	; (800e2f0 <_dtoa_r+0x920>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f7f2 faa7 	bl	8000648 <__aeabi_dmul>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4606      	mov	r6, r0
 800e100:	460f      	mov	r7, r1
 800e102:	f7f2 fd09 	bl	8000b18 <__aeabi_dcmpeq>
 800e106:	2800      	cmp	r0, #0
 800e108:	d09b      	beq.n	800e042 <_dtoa_r+0x672>
 800e10a:	e7cd      	b.n	800e0a8 <_dtoa_r+0x6d8>
 800e10c:	9a08      	ldr	r2, [sp, #32]
 800e10e:	2a00      	cmp	r2, #0
 800e110:	f000 80c4 	beq.w	800e29c <_dtoa_r+0x8cc>
 800e114:	9a05      	ldr	r2, [sp, #20]
 800e116:	2a01      	cmp	r2, #1
 800e118:	f300 80a8 	bgt.w	800e26c <_dtoa_r+0x89c>
 800e11c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e11e:	2a00      	cmp	r2, #0
 800e120:	f000 80a0 	beq.w	800e264 <_dtoa_r+0x894>
 800e124:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e128:	9e06      	ldr	r6, [sp, #24]
 800e12a:	4645      	mov	r5, r8
 800e12c:	9a04      	ldr	r2, [sp, #16]
 800e12e:	2101      	movs	r1, #1
 800e130:	441a      	add	r2, r3
 800e132:	4620      	mov	r0, r4
 800e134:	4498      	add	r8, r3
 800e136:	9204      	str	r2, [sp, #16]
 800e138:	f000 fd5e 	bl	800ebf8 <__i2b>
 800e13c:	4607      	mov	r7, r0
 800e13e:	2d00      	cmp	r5, #0
 800e140:	dd0b      	ble.n	800e15a <_dtoa_r+0x78a>
 800e142:	9b04      	ldr	r3, [sp, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	dd08      	ble.n	800e15a <_dtoa_r+0x78a>
 800e148:	42ab      	cmp	r3, r5
 800e14a:	9a04      	ldr	r2, [sp, #16]
 800e14c:	bfa8      	it	ge
 800e14e:	462b      	movge	r3, r5
 800e150:	eba8 0803 	sub.w	r8, r8, r3
 800e154:	1aed      	subs	r5, r5, r3
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	9304      	str	r3, [sp, #16]
 800e15a:	9b06      	ldr	r3, [sp, #24]
 800e15c:	b1fb      	cbz	r3, 800e19e <_dtoa_r+0x7ce>
 800e15e:	9b08      	ldr	r3, [sp, #32]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 809f 	beq.w	800e2a4 <_dtoa_r+0x8d4>
 800e166:	2e00      	cmp	r6, #0
 800e168:	dd11      	ble.n	800e18e <_dtoa_r+0x7be>
 800e16a:	4639      	mov	r1, r7
 800e16c:	4632      	mov	r2, r6
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 fdfe 	bl	800ed70 <__pow5mult>
 800e174:	465a      	mov	r2, fp
 800e176:	4601      	mov	r1, r0
 800e178:	4607      	mov	r7, r0
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 fd52 	bl	800ec24 <__multiply>
 800e180:	4659      	mov	r1, fp
 800e182:	9007      	str	r0, [sp, #28]
 800e184:	4620      	mov	r0, r4
 800e186:	f000 fc7b 	bl	800ea80 <_Bfree>
 800e18a:	9b07      	ldr	r3, [sp, #28]
 800e18c:	469b      	mov	fp, r3
 800e18e:	9b06      	ldr	r3, [sp, #24]
 800e190:	1b9a      	subs	r2, r3, r6
 800e192:	d004      	beq.n	800e19e <_dtoa_r+0x7ce>
 800e194:	4659      	mov	r1, fp
 800e196:	4620      	mov	r0, r4
 800e198:	f000 fdea 	bl	800ed70 <__pow5mult>
 800e19c:	4683      	mov	fp, r0
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f000 fd29 	bl	800ebf8 <__i2b>
 800e1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	dd7c      	ble.n	800e2a8 <_dtoa_r+0x8d8>
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 fddc 	bl	800ed70 <__pow5mult>
 800e1b8:	9b05      	ldr	r3, [sp, #20]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	4606      	mov	r6, r0
 800e1be:	dd76      	ble.n	800e2ae <_dtoa_r+0x8de>
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9306      	str	r3, [sp, #24]
 800e1c4:	6933      	ldr	r3, [r6, #16]
 800e1c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e1ca:	6918      	ldr	r0, [r3, #16]
 800e1cc:	f000 fcc4 	bl	800eb58 <__hi0bits>
 800e1d0:	f1c0 0020 	rsb	r0, r0, #32
 800e1d4:	9b04      	ldr	r3, [sp, #16]
 800e1d6:	4418      	add	r0, r3
 800e1d8:	f010 001f 	ands.w	r0, r0, #31
 800e1dc:	f000 8086 	beq.w	800e2ec <_dtoa_r+0x91c>
 800e1e0:	f1c0 0320 	rsb	r3, r0, #32
 800e1e4:	2b04      	cmp	r3, #4
 800e1e6:	dd7f      	ble.n	800e2e8 <_dtoa_r+0x918>
 800e1e8:	f1c0 001c 	rsb	r0, r0, #28
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	4403      	add	r3, r0
 800e1f0:	4480      	add	r8, r0
 800e1f2:	4405      	add	r5, r0
 800e1f4:	9304      	str	r3, [sp, #16]
 800e1f6:	f1b8 0f00 	cmp.w	r8, #0
 800e1fa:	dd05      	ble.n	800e208 <_dtoa_r+0x838>
 800e1fc:	4659      	mov	r1, fp
 800e1fe:	4642      	mov	r2, r8
 800e200:	4620      	mov	r0, r4
 800e202:	f000 fe0f 	bl	800ee24 <__lshift>
 800e206:	4683      	mov	fp, r0
 800e208:	9b04      	ldr	r3, [sp, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	dd05      	ble.n	800e21a <_dtoa_r+0x84a>
 800e20e:	4631      	mov	r1, r6
 800e210:	461a      	mov	r2, r3
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fe06 	bl	800ee24 <__lshift>
 800e218:	4606      	mov	r6, r0
 800e21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d069      	beq.n	800e2f4 <_dtoa_r+0x924>
 800e220:	4631      	mov	r1, r6
 800e222:	4658      	mov	r0, fp
 800e224:	f000 fe6a 	bl	800eefc <__mcmp>
 800e228:	2800      	cmp	r0, #0
 800e22a:	da63      	bge.n	800e2f4 <_dtoa_r+0x924>
 800e22c:	2300      	movs	r3, #0
 800e22e:	4659      	mov	r1, fp
 800e230:	220a      	movs	r2, #10
 800e232:	4620      	mov	r0, r4
 800e234:	f000 fc46 	bl	800eac4 <__multadd>
 800e238:	9b08      	ldr	r3, [sp, #32]
 800e23a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e23e:	4683      	mov	fp, r0
 800e240:	2b00      	cmp	r3, #0
 800e242:	f000 818f 	beq.w	800e564 <_dtoa_r+0xb94>
 800e246:	4639      	mov	r1, r7
 800e248:	2300      	movs	r3, #0
 800e24a:	220a      	movs	r2, #10
 800e24c:	4620      	mov	r0, r4
 800e24e:	f000 fc39 	bl	800eac4 <__multadd>
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	4607      	mov	r7, r0
 800e258:	f300 808e 	bgt.w	800e378 <_dtoa_r+0x9a8>
 800e25c:	9b05      	ldr	r3, [sp, #20]
 800e25e:	2b02      	cmp	r3, #2
 800e260:	dc50      	bgt.n	800e304 <_dtoa_r+0x934>
 800e262:	e089      	b.n	800e378 <_dtoa_r+0x9a8>
 800e264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e26a:	e75d      	b.n	800e128 <_dtoa_r+0x758>
 800e26c:	9b01      	ldr	r3, [sp, #4]
 800e26e:	1e5e      	subs	r6, r3, #1
 800e270:	9b06      	ldr	r3, [sp, #24]
 800e272:	42b3      	cmp	r3, r6
 800e274:	bfbf      	itttt	lt
 800e276:	9b06      	ldrlt	r3, [sp, #24]
 800e278:	9606      	strlt	r6, [sp, #24]
 800e27a:	1af2      	sublt	r2, r6, r3
 800e27c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e27e:	bfb6      	itet	lt
 800e280:	189b      	addlt	r3, r3, r2
 800e282:	1b9e      	subge	r6, r3, r6
 800e284:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e286:	9b01      	ldr	r3, [sp, #4]
 800e288:	bfb8      	it	lt
 800e28a:	2600      	movlt	r6, #0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	bfb5      	itete	lt
 800e290:	eba8 0503 	sublt.w	r5, r8, r3
 800e294:	9b01      	ldrge	r3, [sp, #4]
 800e296:	2300      	movlt	r3, #0
 800e298:	4645      	movge	r5, r8
 800e29a:	e747      	b.n	800e12c <_dtoa_r+0x75c>
 800e29c:	9e06      	ldr	r6, [sp, #24]
 800e29e:	9f08      	ldr	r7, [sp, #32]
 800e2a0:	4645      	mov	r5, r8
 800e2a2:	e74c      	b.n	800e13e <_dtoa_r+0x76e>
 800e2a4:	9a06      	ldr	r2, [sp, #24]
 800e2a6:	e775      	b.n	800e194 <_dtoa_r+0x7c4>
 800e2a8:	9b05      	ldr	r3, [sp, #20]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	dc18      	bgt.n	800e2e0 <_dtoa_r+0x910>
 800e2ae:	9b02      	ldr	r3, [sp, #8]
 800e2b0:	b9b3      	cbnz	r3, 800e2e0 <_dtoa_r+0x910>
 800e2b2:	9b03      	ldr	r3, [sp, #12]
 800e2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b8:	b9a3      	cbnz	r3, 800e2e4 <_dtoa_r+0x914>
 800e2ba:	9b03      	ldr	r3, [sp, #12]
 800e2bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2c0:	0d1b      	lsrs	r3, r3, #20
 800e2c2:	051b      	lsls	r3, r3, #20
 800e2c4:	b12b      	cbz	r3, 800e2d2 <_dtoa_r+0x902>
 800e2c6:	9b04      	ldr	r3, [sp, #16]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	9304      	str	r3, [sp, #16]
 800e2cc:	f108 0801 	add.w	r8, r8, #1
 800e2d0:	2301      	movs	r3, #1
 800e2d2:	9306      	str	r3, [sp, #24]
 800e2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	f47f af74 	bne.w	800e1c4 <_dtoa_r+0x7f4>
 800e2dc:	2001      	movs	r0, #1
 800e2de:	e779      	b.n	800e1d4 <_dtoa_r+0x804>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e7f6      	b.n	800e2d2 <_dtoa_r+0x902>
 800e2e4:	9b02      	ldr	r3, [sp, #8]
 800e2e6:	e7f4      	b.n	800e2d2 <_dtoa_r+0x902>
 800e2e8:	d085      	beq.n	800e1f6 <_dtoa_r+0x826>
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	301c      	adds	r0, #28
 800e2ee:	e77d      	b.n	800e1ec <_dtoa_r+0x81c>
 800e2f0:	40240000 	.word	0x40240000
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	dc38      	bgt.n	800e36c <_dtoa_r+0x99c>
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	dd35      	ble.n	800e36c <_dtoa_r+0x99c>
 800e300:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e304:	f1b9 0f00 	cmp.w	r9, #0
 800e308:	d10d      	bne.n	800e326 <_dtoa_r+0x956>
 800e30a:	4631      	mov	r1, r6
 800e30c:	464b      	mov	r3, r9
 800e30e:	2205      	movs	r2, #5
 800e310:	4620      	mov	r0, r4
 800e312:	f000 fbd7 	bl	800eac4 <__multadd>
 800e316:	4601      	mov	r1, r0
 800e318:	4606      	mov	r6, r0
 800e31a:	4658      	mov	r0, fp
 800e31c:	f000 fdee 	bl	800eefc <__mcmp>
 800e320:	2800      	cmp	r0, #0
 800e322:	f73f adbd 	bgt.w	800dea0 <_dtoa_r+0x4d0>
 800e326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e328:	9d00      	ldr	r5, [sp, #0]
 800e32a:	ea6f 0a03 	mvn.w	sl, r3
 800e32e:	f04f 0800 	mov.w	r8, #0
 800e332:	4631      	mov	r1, r6
 800e334:	4620      	mov	r0, r4
 800e336:	f000 fba3 	bl	800ea80 <_Bfree>
 800e33a:	2f00      	cmp	r7, #0
 800e33c:	f43f aeb4 	beq.w	800e0a8 <_dtoa_r+0x6d8>
 800e340:	f1b8 0f00 	cmp.w	r8, #0
 800e344:	d005      	beq.n	800e352 <_dtoa_r+0x982>
 800e346:	45b8      	cmp	r8, r7
 800e348:	d003      	beq.n	800e352 <_dtoa_r+0x982>
 800e34a:	4641      	mov	r1, r8
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 fb97 	bl	800ea80 <_Bfree>
 800e352:	4639      	mov	r1, r7
 800e354:	4620      	mov	r0, r4
 800e356:	f000 fb93 	bl	800ea80 <_Bfree>
 800e35a:	e6a5      	b.n	800e0a8 <_dtoa_r+0x6d8>
 800e35c:	2600      	movs	r6, #0
 800e35e:	4637      	mov	r7, r6
 800e360:	e7e1      	b.n	800e326 <_dtoa_r+0x956>
 800e362:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e368:	4637      	mov	r7, r6
 800e36a:	e599      	b.n	800dea0 <_dtoa_r+0x4d0>
 800e36c:	9b08      	ldr	r3, [sp, #32]
 800e36e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e372:	2b00      	cmp	r3, #0
 800e374:	f000 80fd 	beq.w	800e572 <_dtoa_r+0xba2>
 800e378:	2d00      	cmp	r5, #0
 800e37a:	dd05      	ble.n	800e388 <_dtoa_r+0x9b8>
 800e37c:	4639      	mov	r1, r7
 800e37e:	462a      	mov	r2, r5
 800e380:	4620      	mov	r0, r4
 800e382:	f000 fd4f 	bl	800ee24 <__lshift>
 800e386:	4607      	mov	r7, r0
 800e388:	9b06      	ldr	r3, [sp, #24]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d05c      	beq.n	800e448 <_dtoa_r+0xa78>
 800e38e:	6879      	ldr	r1, [r7, #4]
 800e390:	4620      	mov	r0, r4
 800e392:	f000 fb35 	bl	800ea00 <_Balloc>
 800e396:	4605      	mov	r5, r0
 800e398:	b928      	cbnz	r0, 800e3a6 <_dtoa_r+0x9d6>
 800e39a:	4b80      	ldr	r3, [pc, #512]	; (800e59c <_dtoa_r+0xbcc>)
 800e39c:	4602      	mov	r2, r0
 800e39e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e3a2:	f7ff bb2e 	b.w	800da02 <_dtoa_r+0x32>
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	3202      	adds	r2, #2
 800e3aa:	0092      	lsls	r2, r2, #2
 800e3ac:	f107 010c 	add.w	r1, r7, #12
 800e3b0:	300c      	adds	r0, #12
 800e3b2:	f7fe fc6f 	bl	800cc94 <memcpy>
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	f000 fd32 	bl	800ee24 <__lshift>
 800e3c0:	9b00      	ldr	r3, [sp, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	9301      	str	r3, [sp, #4]
 800e3c6:	9b00      	ldr	r3, [sp, #0]
 800e3c8:	444b      	add	r3, r9
 800e3ca:	9307      	str	r3, [sp, #28]
 800e3cc:	9b02      	ldr	r3, [sp, #8]
 800e3ce:	f003 0301 	and.w	r3, r3, #1
 800e3d2:	46b8      	mov	r8, r7
 800e3d4:	9306      	str	r3, [sp, #24]
 800e3d6:	4607      	mov	r7, r0
 800e3d8:	9b01      	ldr	r3, [sp, #4]
 800e3da:	4631      	mov	r1, r6
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	4658      	mov	r0, fp
 800e3e0:	9302      	str	r3, [sp, #8]
 800e3e2:	f7ff fa69 	bl	800d8b8 <quorem>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	3330      	adds	r3, #48	; 0x30
 800e3ea:	9004      	str	r0, [sp, #16]
 800e3ec:	4641      	mov	r1, r8
 800e3ee:	4658      	mov	r0, fp
 800e3f0:	9308      	str	r3, [sp, #32]
 800e3f2:	f000 fd83 	bl	800eefc <__mcmp>
 800e3f6:	463a      	mov	r2, r7
 800e3f8:	4681      	mov	r9, r0
 800e3fa:	4631      	mov	r1, r6
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f000 fd99 	bl	800ef34 <__mdiff>
 800e402:	68c2      	ldr	r2, [r0, #12]
 800e404:	9b08      	ldr	r3, [sp, #32]
 800e406:	4605      	mov	r5, r0
 800e408:	bb02      	cbnz	r2, 800e44c <_dtoa_r+0xa7c>
 800e40a:	4601      	mov	r1, r0
 800e40c:	4658      	mov	r0, fp
 800e40e:	f000 fd75 	bl	800eefc <__mcmp>
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	4602      	mov	r2, r0
 800e416:	4629      	mov	r1, r5
 800e418:	4620      	mov	r0, r4
 800e41a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e41e:	f000 fb2f 	bl	800ea80 <_Bfree>
 800e422:	9b05      	ldr	r3, [sp, #20]
 800e424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e426:	9d01      	ldr	r5, [sp, #4]
 800e428:	ea43 0102 	orr.w	r1, r3, r2
 800e42c:	9b06      	ldr	r3, [sp, #24]
 800e42e:	430b      	orrs	r3, r1
 800e430:	9b08      	ldr	r3, [sp, #32]
 800e432:	d10d      	bne.n	800e450 <_dtoa_r+0xa80>
 800e434:	2b39      	cmp	r3, #57	; 0x39
 800e436:	d029      	beq.n	800e48c <_dtoa_r+0xabc>
 800e438:	f1b9 0f00 	cmp.w	r9, #0
 800e43c:	dd01      	ble.n	800e442 <_dtoa_r+0xa72>
 800e43e:	9b04      	ldr	r3, [sp, #16]
 800e440:	3331      	adds	r3, #49	; 0x31
 800e442:	9a02      	ldr	r2, [sp, #8]
 800e444:	7013      	strb	r3, [r2, #0]
 800e446:	e774      	b.n	800e332 <_dtoa_r+0x962>
 800e448:	4638      	mov	r0, r7
 800e44a:	e7b9      	b.n	800e3c0 <_dtoa_r+0x9f0>
 800e44c:	2201      	movs	r2, #1
 800e44e:	e7e2      	b.n	800e416 <_dtoa_r+0xa46>
 800e450:	f1b9 0f00 	cmp.w	r9, #0
 800e454:	db06      	blt.n	800e464 <_dtoa_r+0xa94>
 800e456:	9905      	ldr	r1, [sp, #20]
 800e458:	ea41 0909 	orr.w	r9, r1, r9
 800e45c:	9906      	ldr	r1, [sp, #24]
 800e45e:	ea59 0101 	orrs.w	r1, r9, r1
 800e462:	d120      	bne.n	800e4a6 <_dtoa_r+0xad6>
 800e464:	2a00      	cmp	r2, #0
 800e466:	ddec      	ble.n	800e442 <_dtoa_r+0xa72>
 800e468:	4659      	mov	r1, fp
 800e46a:	2201      	movs	r2, #1
 800e46c:	4620      	mov	r0, r4
 800e46e:	9301      	str	r3, [sp, #4]
 800e470:	f000 fcd8 	bl	800ee24 <__lshift>
 800e474:	4631      	mov	r1, r6
 800e476:	4683      	mov	fp, r0
 800e478:	f000 fd40 	bl	800eefc <__mcmp>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	9b01      	ldr	r3, [sp, #4]
 800e480:	dc02      	bgt.n	800e488 <_dtoa_r+0xab8>
 800e482:	d1de      	bne.n	800e442 <_dtoa_r+0xa72>
 800e484:	07da      	lsls	r2, r3, #31
 800e486:	d5dc      	bpl.n	800e442 <_dtoa_r+0xa72>
 800e488:	2b39      	cmp	r3, #57	; 0x39
 800e48a:	d1d8      	bne.n	800e43e <_dtoa_r+0xa6e>
 800e48c:	9a02      	ldr	r2, [sp, #8]
 800e48e:	2339      	movs	r3, #57	; 0x39
 800e490:	7013      	strb	r3, [r2, #0]
 800e492:	462b      	mov	r3, r5
 800e494:	461d      	mov	r5, r3
 800e496:	3b01      	subs	r3, #1
 800e498:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e49c:	2a39      	cmp	r2, #57	; 0x39
 800e49e:	d050      	beq.n	800e542 <_dtoa_r+0xb72>
 800e4a0:	3201      	adds	r2, #1
 800e4a2:	701a      	strb	r2, [r3, #0]
 800e4a4:	e745      	b.n	800e332 <_dtoa_r+0x962>
 800e4a6:	2a00      	cmp	r2, #0
 800e4a8:	dd03      	ble.n	800e4b2 <_dtoa_r+0xae2>
 800e4aa:	2b39      	cmp	r3, #57	; 0x39
 800e4ac:	d0ee      	beq.n	800e48c <_dtoa_r+0xabc>
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	e7c7      	b.n	800e442 <_dtoa_r+0xa72>
 800e4b2:	9a01      	ldr	r2, [sp, #4]
 800e4b4:	9907      	ldr	r1, [sp, #28]
 800e4b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e4ba:	428a      	cmp	r2, r1
 800e4bc:	d02a      	beq.n	800e514 <_dtoa_r+0xb44>
 800e4be:	4659      	mov	r1, fp
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	220a      	movs	r2, #10
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f000 fafd 	bl	800eac4 <__multadd>
 800e4ca:	45b8      	cmp	r8, r7
 800e4cc:	4683      	mov	fp, r0
 800e4ce:	f04f 0300 	mov.w	r3, #0
 800e4d2:	f04f 020a 	mov.w	r2, #10
 800e4d6:	4641      	mov	r1, r8
 800e4d8:	4620      	mov	r0, r4
 800e4da:	d107      	bne.n	800e4ec <_dtoa_r+0xb1c>
 800e4dc:	f000 faf2 	bl	800eac4 <__multadd>
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	4607      	mov	r7, r0
 800e4e4:	9b01      	ldr	r3, [sp, #4]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	e775      	b.n	800e3d8 <_dtoa_r+0xa08>
 800e4ec:	f000 faea 	bl	800eac4 <__multadd>
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	4680      	mov	r8, r0
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	220a      	movs	r2, #10
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f000 fae3 	bl	800eac4 <__multadd>
 800e4fe:	4607      	mov	r7, r0
 800e500:	e7f0      	b.n	800e4e4 <_dtoa_r+0xb14>
 800e502:	f1b9 0f00 	cmp.w	r9, #0
 800e506:	9a00      	ldr	r2, [sp, #0]
 800e508:	bfcc      	ite	gt
 800e50a:	464d      	movgt	r5, r9
 800e50c:	2501      	movle	r5, #1
 800e50e:	4415      	add	r5, r2
 800e510:	f04f 0800 	mov.w	r8, #0
 800e514:	4659      	mov	r1, fp
 800e516:	2201      	movs	r2, #1
 800e518:	4620      	mov	r0, r4
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	f000 fc82 	bl	800ee24 <__lshift>
 800e520:	4631      	mov	r1, r6
 800e522:	4683      	mov	fp, r0
 800e524:	f000 fcea 	bl	800eefc <__mcmp>
 800e528:	2800      	cmp	r0, #0
 800e52a:	dcb2      	bgt.n	800e492 <_dtoa_r+0xac2>
 800e52c:	d102      	bne.n	800e534 <_dtoa_r+0xb64>
 800e52e:	9b01      	ldr	r3, [sp, #4]
 800e530:	07db      	lsls	r3, r3, #31
 800e532:	d4ae      	bmi.n	800e492 <_dtoa_r+0xac2>
 800e534:	462b      	mov	r3, r5
 800e536:	461d      	mov	r5, r3
 800e538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e53c:	2a30      	cmp	r2, #48	; 0x30
 800e53e:	d0fa      	beq.n	800e536 <_dtoa_r+0xb66>
 800e540:	e6f7      	b.n	800e332 <_dtoa_r+0x962>
 800e542:	9a00      	ldr	r2, [sp, #0]
 800e544:	429a      	cmp	r2, r3
 800e546:	d1a5      	bne.n	800e494 <_dtoa_r+0xac4>
 800e548:	f10a 0a01 	add.w	sl, sl, #1
 800e54c:	2331      	movs	r3, #49	; 0x31
 800e54e:	e779      	b.n	800e444 <_dtoa_r+0xa74>
 800e550:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <_dtoa_r+0xbd0>)
 800e552:	f7ff baaf 	b.w	800dab4 <_dtoa_r+0xe4>
 800e556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f47f aa86 	bne.w	800da6a <_dtoa_r+0x9a>
 800e55e:	4b11      	ldr	r3, [pc, #68]	; (800e5a4 <_dtoa_r+0xbd4>)
 800e560:	f7ff baa8 	b.w	800dab4 <_dtoa_r+0xe4>
 800e564:	f1b9 0f00 	cmp.w	r9, #0
 800e568:	dc03      	bgt.n	800e572 <_dtoa_r+0xba2>
 800e56a:	9b05      	ldr	r3, [sp, #20]
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	f73f aec9 	bgt.w	800e304 <_dtoa_r+0x934>
 800e572:	9d00      	ldr	r5, [sp, #0]
 800e574:	4631      	mov	r1, r6
 800e576:	4658      	mov	r0, fp
 800e578:	f7ff f99e 	bl	800d8b8 <quorem>
 800e57c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e580:	f805 3b01 	strb.w	r3, [r5], #1
 800e584:	9a00      	ldr	r2, [sp, #0]
 800e586:	1aaa      	subs	r2, r5, r2
 800e588:	4591      	cmp	r9, r2
 800e58a:	ddba      	ble.n	800e502 <_dtoa_r+0xb32>
 800e58c:	4659      	mov	r1, fp
 800e58e:	2300      	movs	r3, #0
 800e590:	220a      	movs	r2, #10
 800e592:	4620      	mov	r0, r4
 800e594:	f000 fa96 	bl	800eac4 <__multadd>
 800e598:	4683      	mov	fp, r0
 800e59a:	e7eb      	b.n	800e574 <_dtoa_r+0xba4>
 800e59c:	0801105b 	.word	0x0801105b
 800e5a0:	08010fb4 	.word	0x08010fb4
 800e5a4:	08010fd8 	.word	0x08010fd8

0800e5a8 <__sflush_r>:
 800e5a8:	898a      	ldrh	r2, [r1, #12]
 800e5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ae:	4605      	mov	r5, r0
 800e5b0:	0710      	lsls	r0, r2, #28
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	d458      	bmi.n	800e668 <__sflush_r+0xc0>
 800e5b6:	684b      	ldr	r3, [r1, #4]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	dc05      	bgt.n	800e5c8 <__sflush_r+0x20>
 800e5bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	dc02      	bgt.n	800e5c8 <__sflush_r+0x20>
 800e5c2:	2000      	movs	r0, #0
 800e5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5ca:	2e00      	cmp	r6, #0
 800e5cc:	d0f9      	beq.n	800e5c2 <__sflush_r+0x1a>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e5d4:	682f      	ldr	r7, [r5, #0]
 800e5d6:	602b      	str	r3, [r5, #0]
 800e5d8:	d032      	beq.n	800e640 <__sflush_r+0x98>
 800e5da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	075a      	lsls	r2, r3, #29
 800e5e0:	d505      	bpl.n	800e5ee <__sflush_r+0x46>
 800e5e2:	6863      	ldr	r3, [r4, #4]
 800e5e4:	1ac0      	subs	r0, r0, r3
 800e5e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e5e8:	b10b      	cbz	r3, 800e5ee <__sflush_r+0x46>
 800e5ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e5ec:	1ac0      	subs	r0, r0, r3
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e5f4:	6a21      	ldr	r1, [r4, #32]
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b0      	blx	r6
 800e5fa:	1c43      	adds	r3, r0, #1
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	d106      	bne.n	800e60e <__sflush_r+0x66>
 800e600:	6829      	ldr	r1, [r5, #0]
 800e602:	291d      	cmp	r1, #29
 800e604:	d82c      	bhi.n	800e660 <__sflush_r+0xb8>
 800e606:	4a2a      	ldr	r2, [pc, #168]	; (800e6b0 <__sflush_r+0x108>)
 800e608:	40ca      	lsrs	r2, r1
 800e60a:	07d6      	lsls	r6, r2, #31
 800e60c:	d528      	bpl.n	800e660 <__sflush_r+0xb8>
 800e60e:	2200      	movs	r2, #0
 800e610:	6062      	str	r2, [r4, #4]
 800e612:	04d9      	lsls	r1, r3, #19
 800e614:	6922      	ldr	r2, [r4, #16]
 800e616:	6022      	str	r2, [r4, #0]
 800e618:	d504      	bpl.n	800e624 <__sflush_r+0x7c>
 800e61a:	1c42      	adds	r2, r0, #1
 800e61c:	d101      	bne.n	800e622 <__sflush_r+0x7a>
 800e61e:	682b      	ldr	r3, [r5, #0]
 800e620:	b903      	cbnz	r3, 800e624 <__sflush_r+0x7c>
 800e622:	6560      	str	r0, [r4, #84]	; 0x54
 800e624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e626:	602f      	str	r7, [r5, #0]
 800e628:	2900      	cmp	r1, #0
 800e62a:	d0ca      	beq.n	800e5c2 <__sflush_r+0x1a>
 800e62c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e630:	4299      	cmp	r1, r3
 800e632:	d002      	beq.n	800e63a <__sflush_r+0x92>
 800e634:	4628      	mov	r0, r5
 800e636:	f000 fd71 	bl	800f11c <_free_r>
 800e63a:	2000      	movs	r0, #0
 800e63c:	6360      	str	r0, [r4, #52]	; 0x34
 800e63e:	e7c1      	b.n	800e5c4 <__sflush_r+0x1c>
 800e640:	6a21      	ldr	r1, [r4, #32]
 800e642:	2301      	movs	r3, #1
 800e644:	4628      	mov	r0, r5
 800e646:	47b0      	blx	r6
 800e648:	1c41      	adds	r1, r0, #1
 800e64a:	d1c7      	bne.n	800e5dc <__sflush_r+0x34>
 800e64c:	682b      	ldr	r3, [r5, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0c4      	beq.n	800e5dc <__sflush_r+0x34>
 800e652:	2b1d      	cmp	r3, #29
 800e654:	d001      	beq.n	800e65a <__sflush_r+0xb2>
 800e656:	2b16      	cmp	r3, #22
 800e658:	d101      	bne.n	800e65e <__sflush_r+0xb6>
 800e65a:	602f      	str	r7, [r5, #0]
 800e65c:	e7b1      	b.n	800e5c2 <__sflush_r+0x1a>
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	e7ad      	b.n	800e5c4 <__sflush_r+0x1c>
 800e668:	690f      	ldr	r7, [r1, #16]
 800e66a:	2f00      	cmp	r7, #0
 800e66c:	d0a9      	beq.n	800e5c2 <__sflush_r+0x1a>
 800e66e:	0793      	lsls	r3, r2, #30
 800e670:	680e      	ldr	r6, [r1, #0]
 800e672:	bf08      	it	eq
 800e674:	694b      	ldreq	r3, [r1, #20]
 800e676:	600f      	str	r7, [r1, #0]
 800e678:	bf18      	it	ne
 800e67a:	2300      	movne	r3, #0
 800e67c:	eba6 0807 	sub.w	r8, r6, r7
 800e680:	608b      	str	r3, [r1, #8]
 800e682:	f1b8 0f00 	cmp.w	r8, #0
 800e686:	dd9c      	ble.n	800e5c2 <__sflush_r+0x1a>
 800e688:	6a21      	ldr	r1, [r4, #32]
 800e68a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e68c:	4643      	mov	r3, r8
 800e68e:	463a      	mov	r2, r7
 800e690:	4628      	mov	r0, r5
 800e692:	47b0      	blx	r6
 800e694:	2800      	cmp	r0, #0
 800e696:	dc06      	bgt.n	800e6a6 <__sflush_r+0xfe>
 800e698:	89a3      	ldrh	r3, [r4, #12]
 800e69a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e69e:	81a3      	strh	r3, [r4, #12]
 800e6a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6a4:	e78e      	b.n	800e5c4 <__sflush_r+0x1c>
 800e6a6:	4407      	add	r7, r0
 800e6a8:	eba8 0800 	sub.w	r8, r8, r0
 800e6ac:	e7e9      	b.n	800e682 <__sflush_r+0xda>
 800e6ae:	bf00      	nop
 800e6b0:	20400001 	.word	0x20400001

0800e6b4 <_fflush_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	690b      	ldr	r3, [r1, #16]
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	b913      	cbnz	r3, 800e6c4 <_fflush_r+0x10>
 800e6be:	2500      	movs	r5, #0
 800e6c0:	4628      	mov	r0, r5
 800e6c2:	bd38      	pop	{r3, r4, r5, pc}
 800e6c4:	b118      	cbz	r0, 800e6ce <_fflush_r+0x1a>
 800e6c6:	6983      	ldr	r3, [r0, #24]
 800e6c8:	b90b      	cbnz	r3, 800e6ce <_fflush_r+0x1a>
 800e6ca:	f000 f887 	bl	800e7dc <__sinit>
 800e6ce:	4b14      	ldr	r3, [pc, #80]	; (800e720 <_fflush_r+0x6c>)
 800e6d0:	429c      	cmp	r4, r3
 800e6d2:	d11b      	bne.n	800e70c <_fflush_r+0x58>
 800e6d4:	686c      	ldr	r4, [r5, #4]
 800e6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d0ef      	beq.n	800e6be <_fflush_r+0xa>
 800e6de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e6e0:	07d0      	lsls	r0, r2, #31
 800e6e2:	d404      	bmi.n	800e6ee <_fflush_r+0x3a>
 800e6e4:	0599      	lsls	r1, r3, #22
 800e6e6:	d402      	bmi.n	800e6ee <_fflush_r+0x3a>
 800e6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ea:	f000 f91a 	bl	800e922 <__retarget_lock_acquire_recursive>
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	f7ff ff59 	bl	800e5a8 <__sflush_r>
 800e6f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6f8:	07da      	lsls	r2, r3, #31
 800e6fa:	4605      	mov	r5, r0
 800e6fc:	d4e0      	bmi.n	800e6c0 <_fflush_r+0xc>
 800e6fe:	89a3      	ldrh	r3, [r4, #12]
 800e700:	059b      	lsls	r3, r3, #22
 800e702:	d4dd      	bmi.n	800e6c0 <_fflush_r+0xc>
 800e704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e706:	f000 f90d 	bl	800e924 <__retarget_lock_release_recursive>
 800e70a:	e7d9      	b.n	800e6c0 <_fflush_r+0xc>
 800e70c:	4b05      	ldr	r3, [pc, #20]	; (800e724 <_fflush_r+0x70>)
 800e70e:	429c      	cmp	r4, r3
 800e710:	d101      	bne.n	800e716 <_fflush_r+0x62>
 800e712:	68ac      	ldr	r4, [r5, #8]
 800e714:	e7df      	b.n	800e6d6 <_fflush_r+0x22>
 800e716:	4b04      	ldr	r3, [pc, #16]	; (800e728 <_fflush_r+0x74>)
 800e718:	429c      	cmp	r4, r3
 800e71a:	bf08      	it	eq
 800e71c:	68ec      	ldreq	r4, [r5, #12]
 800e71e:	e7da      	b.n	800e6d6 <_fflush_r+0x22>
 800e720:	0801108c 	.word	0x0801108c
 800e724:	080110ac 	.word	0x080110ac
 800e728:	0801106c 	.word	0x0801106c

0800e72c <std>:
 800e72c:	2300      	movs	r3, #0
 800e72e:	b510      	push	{r4, lr}
 800e730:	4604      	mov	r4, r0
 800e732:	e9c0 3300 	strd	r3, r3, [r0]
 800e736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e73a:	6083      	str	r3, [r0, #8]
 800e73c:	8181      	strh	r1, [r0, #12]
 800e73e:	6643      	str	r3, [r0, #100]	; 0x64
 800e740:	81c2      	strh	r2, [r0, #14]
 800e742:	6183      	str	r3, [r0, #24]
 800e744:	4619      	mov	r1, r3
 800e746:	2208      	movs	r2, #8
 800e748:	305c      	adds	r0, #92	; 0x5c
 800e74a:	f7fe fab1 	bl	800ccb0 <memset>
 800e74e:	4b05      	ldr	r3, [pc, #20]	; (800e764 <std+0x38>)
 800e750:	6263      	str	r3, [r4, #36]	; 0x24
 800e752:	4b05      	ldr	r3, [pc, #20]	; (800e768 <std+0x3c>)
 800e754:	62a3      	str	r3, [r4, #40]	; 0x28
 800e756:	4b05      	ldr	r3, [pc, #20]	; (800e76c <std+0x40>)
 800e758:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e75a:	4b05      	ldr	r3, [pc, #20]	; (800e770 <std+0x44>)
 800e75c:	6224      	str	r4, [r4, #32]
 800e75e:	6323      	str	r3, [r4, #48]	; 0x30
 800e760:	bd10      	pop	{r4, pc}
 800e762:	bf00      	nop
 800e764:	0800f545 	.word	0x0800f545
 800e768:	0800f567 	.word	0x0800f567
 800e76c:	0800f59f 	.word	0x0800f59f
 800e770:	0800f5c3 	.word	0x0800f5c3

0800e774 <_cleanup_r>:
 800e774:	4901      	ldr	r1, [pc, #4]	; (800e77c <_cleanup_r+0x8>)
 800e776:	f000 b8af 	b.w	800e8d8 <_fwalk_reent>
 800e77a:	bf00      	nop
 800e77c:	0800e6b5 	.word	0x0800e6b5

0800e780 <__sfmoreglue>:
 800e780:	b570      	push	{r4, r5, r6, lr}
 800e782:	1e4a      	subs	r2, r1, #1
 800e784:	2568      	movs	r5, #104	; 0x68
 800e786:	4355      	muls	r5, r2
 800e788:	460e      	mov	r6, r1
 800e78a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e78e:	f000 fd15 	bl	800f1bc <_malloc_r>
 800e792:	4604      	mov	r4, r0
 800e794:	b140      	cbz	r0, 800e7a8 <__sfmoreglue+0x28>
 800e796:	2100      	movs	r1, #0
 800e798:	e9c0 1600 	strd	r1, r6, [r0]
 800e79c:	300c      	adds	r0, #12
 800e79e:	60a0      	str	r0, [r4, #8]
 800e7a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e7a4:	f7fe fa84 	bl	800ccb0 <memset>
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}

0800e7ac <__sfp_lock_acquire>:
 800e7ac:	4801      	ldr	r0, [pc, #4]	; (800e7b4 <__sfp_lock_acquire+0x8>)
 800e7ae:	f000 b8b8 	b.w	800e922 <__retarget_lock_acquire_recursive>
 800e7b2:	bf00      	nop
 800e7b4:	2000530c 	.word	0x2000530c

0800e7b8 <__sfp_lock_release>:
 800e7b8:	4801      	ldr	r0, [pc, #4]	; (800e7c0 <__sfp_lock_release+0x8>)
 800e7ba:	f000 b8b3 	b.w	800e924 <__retarget_lock_release_recursive>
 800e7be:	bf00      	nop
 800e7c0:	2000530c 	.word	0x2000530c

0800e7c4 <__sinit_lock_acquire>:
 800e7c4:	4801      	ldr	r0, [pc, #4]	; (800e7cc <__sinit_lock_acquire+0x8>)
 800e7c6:	f000 b8ac 	b.w	800e922 <__retarget_lock_acquire_recursive>
 800e7ca:	bf00      	nop
 800e7cc:	20005307 	.word	0x20005307

0800e7d0 <__sinit_lock_release>:
 800e7d0:	4801      	ldr	r0, [pc, #4]	; (800e7d8 <__sinit_lock_release+0x8>)
 800e7d2:	f000 b8a7 	b.w	800e924 <__retarget_lock_release_recursive>
 800e7d6:	bf00      	nop
 800e7d8:	20005307 	.word	0x20005307

0800e7dc <__sinit>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	4604      	mov	r4, r0
 800e7e0:	f7ff fff0 	bl	800e7c4 <__sinit_lock_acquire>
 800e7e4:	69a3      	ldr	r3, [r4, #24]
 800e7e6:	b11b      	cbz	r3, 800e7f0 <__sinit+0x14>
 800e7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7ec:	f7ff bff0 	b.w	800e7d0 <__sinit_lock_release>
 800e7f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800e7f6:	4b13      	ldr	r3, [pc, #76]	; (800e844 <__sinit+0x68>)
 800e7f8:	4a13      	ldr	r2, [pc, #76]	; (800e848 <__sinit+0x6c>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800e7fe:	42a3      	cmp	r3, r4
 800e800:	bf04      	itt	eq
 800e802:	2301      	moveq	r3, #1
 800e804:	61a3      	streq	r3, [r4, #24]
 800e806:	4620      	mov	r0, r4
 800e808:	f000 f820 	bl	800e84c <__sfp>
 800e80c:	6060      	str	r0, [r4, #4]
 800e80e:	4620      	mov	r0, r4
 800e810:	f000 f81c 	bl	800e84c <__sfp>
 800e814:	60a0      	str	r0, [r4, #8]
 800e816:	4620      	mov	r0, r4
 800e818:	f000 f818 	bl	800e84c <__sfp>
 800e81c:	2200      	movs	r2, #0
 800e81e:	60e0      	str	r0, [r4, #12]
 800e820:	2104      	movs	r1, #4
 800e822:	6860      	ldr	r0, [r4, #4]
 800e824:	f7ff ff82 	bl	800e72c <std>
 800e828:	68a0      	ldr	r0, [r4, #8]
 800e82a:	2201      	movs	r2, #1
 800e82c:	2109      	movs	r1, #9
 800e82e:	f7ff ff7d 	bl	800e72c <std>
 800e832:	68e0      	ldr	r0, [r4, #12]
 800e834:	2202      	movs	r2, #2
 800e836:	2112      	movs	r1, #18
 800e838:	f7ff ff78 	bl	800e72c <std>
 800e83c:	2301      	movs	r3, #1
 800e83e:	61a3      	str	r3, [r4, #24]
 800e840:	e7d2      	b.n	800e7e8 <__sinit+0xc>
 800e842:	bf00      	nop
 800e844:	08010fa0 	.word	0x08010fa0
 800e848:	0800e775 	.word	0x0800e775

0800e84c <__sfp>:
 800e84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e84e:	4607      	mov	r7, r0
 800e850:	f7ff ffac 	bl	800e7ac <__sfp_lock_acquire>
 800e854:	4b1e      	ldr	r3, [pc, #120]	; (800e8d0 <__sfp+0x84>)
 800e856:	681e      	ldr	r6, [r3, #0]
 800e858:	69b3      	ldr	r3, [r6, #24]
 800e85a:	b913      	cbnz	r3, 800e862 <__sfp+0x16>
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7ff ffbd 	bl	800e7dc <__sinit>
 800e862:	3648      	adds	r6, #72	; 0x48
 800e864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e868:	3b01      	subs	r3, #1
 800e86a:	d503      	bpl.n	800e874 <__sfp+0x28>
 800e86c:	6833      	ldr	r3, [r6, #0]
 800e86e:	b30b      	cbz	r3, 800e8b4 <__sfp+0x68>
 800e870:	6836      	ldr	r6, [r6, #0]
 800e872:	e7f7      	b.n	800e864 <__sfp+0x18>
 800e874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e878:	b9d5      	cbnz	r5, 800e8b0 <__sfp+0x64>
 800e87a:	4b16      	ldr	r3, [pc, #88]	; (800e8d4 <__sfp+0x88>)
 800e87c:	60e3      	str	r3, [r4, #12]
 800e87e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e882:	6665      	str	r5, [r4, #100]	; 0x64
 800e884:	f000 f84c 	bl	800e920 <__retarget_lock_init_recursive>
 800e888:	f7ff ff96 	bl	800e7b8 <__sfp_lock_release>
 800e88c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e894:	6025      	str	r5, [r4, #0]
 800e896:	61a5      	str	r5, [r4, #24]
 800e898:	2208      	movs	r2, #8
 800e89a:	4629      	mov	r1, r5
 800e89c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e8a0:	f7fe fa06 	bl	800ccb0 <memset>
 800e8a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e8a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8b0:	3468      	adds	r4, #104	; 0x68
 800e8b2:	e7d9      	b.n	800e868 <__sfp+0x1c>
 800e8b4:	2104      	movs	r1, #4
 800e8b6:	4638      	mov	r0, r7
 800e8b8:	f7ff ff62 	bl	800e780 <__sfmoreglue>
 800e8bc:	4604      	mov	r4, r0
 800e8be:	6030      	str	r0, [r6, #0]
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d1d5      	bne.n	800e870 <__sfp+0x24>
 800e8c4:	f7ff ff78 	bl	800e7b8 <__sfp_lock_release>
 800e8c8:	230c      	movs	r3, #12
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	e7ee      	b.n	800e8ac <__sfp+0x60>
 800e8ce:	bf00      	nop
 800e8d0:	08010fa0 	.word	0x08010fa0
 800e8d4:	ffff0001 	.word	0xffff0001

0800e8d8 <_fwalk_reent>:
 800e8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8dc:	4606      	mov	r6, r0
 800e8de:	4688      	mov	r8, r1
 800e8e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e8e4:	2700      	movs	r7, #0
 800e8e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e8ea:	f1b9 0901 	subs.w	r9, r9, #1
 800e8ee:	d505      	bpl.n	800e8fc <_fwalk_reent+0x24>
 800e8f0:	6824      	ldr	r4, [r4, #0]
 800e8f2:	2c00      	cmp	r4, #0
 800e8f4:	d1f7      	bne.n	800e8e6 <_fwalk_reent+0xe>
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fc:	89ab      	ldrh	r3, [r5, #12]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d907      	bls.n	800e912 <_fwalk_reent+0x3a>
 800e902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e906:	3301      	adds	r3, #1
 800e908:	d003      	beq.n	800e912 <_fwalk_reent+0x3a>
 800e90a:	4629      	mov	r1, r5
 800e90c:	4630      	mov	r0, r6
 800e90e:	47c0      	blx	r8
 800e910:	4307      	orrs	r7, r0
 800e912:	3568      	adds	r5, #104	; 0x68
 800e914:	e7e9      	b.n	800e8ea <_fwalk_reent+0x12>
	...

0800e918 <_localeconv_r>:
 800e918:	4800      	ldr	r0, [pc, #0]	; (800e91c <_localeconv_r+0x4>)
 800e91a:	4770      	bx	lr
 800e91c:	20000168 	.word	0x20000168

0800e920 <__retarget_lock_init_recursive>:
 800e920:	4770      	bx	lr

0800e922 <__retarget_lock_acquire_recursive>:
 800e922:	4770      	bx	lr

0800e924 <__retarget_lock_release_recursive>:
 800e924:	4770      	bx	lr

0800e926 <__swhatbuf_r>:
 800e926:	b570      	push	{r4, r5, r6, lr}
 800e928:	460e      	mov	r6, r1
 800e92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e92e:	2900      	cmp	r1, #0
 800e930:	b096      	sub	sp, #88	; 0x58
 800e932:	4614      	mov	r4, r2
 800e934:	461d      	mov	r5, r3
 800e936:	da07      	bge.n	800e948 <__swhatbuf_r+0x22>
 800e938:	2300      	movs	r3, #0
 800e93a:	602b      	str	r3, [r5, #0]
 800e93c:	89b3      	ldrh	r3, [r6, #12]
 800e93e:	061a      	lsls	r2, r3, #24
 800e940:	d410      	bmi.n	800e964 <__swhatbuf_r+0x3e>
 800e942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e946:	e00e      	b.n	800e966 <__swhatbuf_r+0x40>
 800e948:	466a      	mov	r2, sp
 800e94a:	f000 fe91 	bl	800f670 <_fstat_r>
 800e94e:	2800      	cmp	r0, #0
 800e950:	dbf2      	blt.n	800e938 <__swhatbuf_r+0x12>
 800e952:	9a01      	ldr	r2, [sp, #4]
 800e954:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e958:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e95c:	425a      	negs	r2, r3
 800e95e:	415a      	adcs	r2, r3
 800e960:	602a      	str	r2, [r5, #0]
 800e962:	e7ee      	b.n	800e942 <__swhatbuf_r+0x1c>
 800e964:	2340      	movs	r3, #64	; 0x40
 800e966:	2000      	movs	r0, #0
 800e968:	6023      	str	r3, [r4, #0]
 800e96a:	b016      	add	sp, #88	; 0x58
 800e96c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e970 <__smakebuf_r>:
 800e970:	898b      	ldrh	r3, [r1, #12]
 800e972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e974:	079d      	lsls	r5, r3, #30
 800e976:	4606      	mov	r6, r0
 800e978:	460c      	mov	r4, r1
 800e97a:	d507      	bpl.n	800e98c <__smakebuf_r+0x1c>
 800e97c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	6123      	str	r3, [r4, #16]
 800e984:	2301      	movs	r3, #1
 800e986:	6163      	str	r3, [r4, #20]
 800e988:	b002      	add	sp, #8
 800e98a:	bd70      	pop	{r4, r5, r6, pc}
 800e98c:	ab01      	add	r3, sp, #4
 800e98e:	466a      	mov	r2, sp
 800e990:	f7ff ffc9 	bl	800e926 <__swhatbuf_r>
 800e994:	9900      	ldr	r1, [sp, #0]
 800e996:	4605      	mov	r5, r0
 800e998:	4630      	mov	r0, r6
 800e99a:	f000 fc0f 	bl	800f1bc <_malloc_r>
 800e99e:	b948      	cbnz	r0, 800e9b4 <__smakebuf_r+0x44>
 800e9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e9a4:	059a      	lsls	r2, r3, #22
 800e9a6:	d4ef      	bmi.n	800e988 <__smakebuf_r+0x18>
 800e9a8:	f023 0303 	bic.w	r3, r3, #3
 800e9ac:	f043 0302 	orr.w	r3, r3, #2
 800e9b0:	81a3      	strh	r3, [r4, #12]
 800e9b2:	e7e3      	b.n	800e97c <__smakebuf_r+0xc>
 800e9b4:	4b0d      	ldr	r3, [pc, #52]	; (800e9ec <__smakebuf_r+0x7c>)
 800e9b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e9b8:	89a3      	ldrh	r3, [r4, #12]
 800e9ba:	6020      	str	r0, [r4, #0]
 800e9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9c0:	81a3      	strh	r3, [r4, #12]
 800e9c2:	9b00      	ldr	r3, [sp, #0]
 800e9c4:	6163      	str	r3, [r4, #20]
 800e9c6:	9b01      	ldr	r3, [sp, #4]
 800e9c8:	6120      	str	r0, [r4, #16]
 800e9ca:	b15b      	cbz	r3, 800e9e4 <__smakebuf_r+0x74>
 800e9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f000 fe5f 	bl	800f694 <_isatty_r>
 800e9d6:	b128      	cbz	r0, 800e9e4 <__smakebuf_r+0x74>
 800e9d8:	89a3      	ldrh	r3, [r4, #12]
 800e9da:	f023 0303 	bic.w	r3, r3, #3
 800e9de:	f043 0301 	orr.w	r3, r3, #1
 800e9e2:	81a3      	strh	r3, [r4, #12]
 800e9e4:	89a0      	ldrh	r0, [r4, #12]
 800e9e6:	4305      	orrs	r5, r0
 800e9e8:	81a5      	strh	r5, [r4, #12]
 800e9ea:	e7cd      	b.n	800e988 <__smakebuf_r+0x18>
 800e9ec:	0800e775 	.word	0x0800e775

0800e9f0 <malloc>:
 800e9f0:	4b02      	ldr	r3, [pc, #8]	; (800e9fc <malloc+0xc>)
 800e9f2:	4601      	mov	r1, r0
 800e9f4:	6818      	ldr	r0, [r3, #0]
 800e9f6:	f000 bbe1 	b.w	800f1bc <_malloc_r>
 800e9fa:	bf00      	nop
 800e9fc:	20000014 	.word	0x20000014

0800ea00 <_Balloc>:
 800ea00:	b570      	push	{r4, r5, r6, lr}
 800ea02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea04:	4604      	mov	r4, r0
 800ea06:	460d      	mov	r5, r1
 800ea08:	b976      	cbnz	r6, 800ea28 <_Balloc+0x28>
 800ea0a:	2010      	movs	r0, #16
 800ea0c:	f7ff fff0 	bl	800e9f0 <malloc>
 800ea10:	4602      	mov	r2, r0
 800ea12:	6260      	str	r0, [r4, #36]	; 0x24
 800ea14:	b920      	cbnz	r0, 800ea20 <_Balloc+0x20>
 800ea16:	4b18      	ldr	r3, [pc, #96]	; (800ea78 <_Balloc+0x78>)
 800ea18:	4818      	ldr	r0, [pc, #96]	; (800ea7c <_Balloc+0x7c>)
 800ea1a:	2166      	movs	r1, #102	; 0x66
 800ea1c:	f000 fde8 	bl	800f5f0 <__assert_func>
 800ea20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea24:	6006      	str	r6, [r0, #0]
 800ea26:	60c6      	str	r6, [r0, #12]
 800ea28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea2a:	68f3      	ldr	r3, [r6, #12]
 800ea2c:	b183      	cbz	r3, 800ea50 <_Balloc+0x50>
 800ea2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea36:	b9b8      	cbnz	r0, 800ea68 <_Balloc+0x68>
 800ea38:	2101      	movs	r1, #1
 800ea3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea3e:	1d72      	adds	r2, r6, #5
 800ea40:	0092      	lsls	r2, r2, #2
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fb5a 	bl	800f0fc <_calloc_r>
 800ea48:	b160      	cbz	r0, 800ea64 <_Balloc+0x64>
 800ea4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea4e:	e00e      	b.n	800ea6e <_Balloc+0x6e>
 800ea50:	2221      	movs	r2, #33	; 0x21
 800ea52:	2104      	movs	r1, #4
 800ea54:	4620      	mov	r0, r4
 800ea56:	f000 fb51 	bl	800f0fc <_calloc_r>
 800ea5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea5c:	60f0      	str	r0, [r6, #12]
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1e4      	bne.n	800ea2e <_Balloc+0x2e>
 800ea64:	2000      	movs	r0, #0
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	6802      	ldr	r2, [r0, #0]
 800ea6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea74:	e7f7      	b.n	800ea66 <_Balloc+0x66>
 800ea76:	bf00      	nop
 800ea78:	08010fe5 	.word	0x08010fe5
 800ea7c:	080110cc 	.word	0x080110cc

0800ea80 <_Bfree>:
 800ea80:	b570      	push	{r4, r5, r6, lr}
 800ea82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea84:	4605      	mov	r5, r0
 800ea86:	460c      	mov	r4, r1
 800ea88:	b976      	cbnz	r6, 800eaa8 <_Bfree+0x28>
 800ea8a:	2010      	movs	r0, #16
 800ea8c:	f7ff ffb0 	bl	800e9f0 <malloc>
 800ea90:	4602      	mov	r2, r0
 800ea92:	6268      	str	r0, [r5, #36]	; 0x24
 800ea94:	b920      	cbnz	r0, 800eaa0 <_Bfree+0x20>
 800ea96:	4b09      	ldr	r3, [pc, #36]	; (800eabc <_Bfree+0x3c>)
 800ea98:	4809      	ldr	r0, [pc, #36]	; (800eac0 <_Bfree+0x40>)
 800ea9a:	218a      	movs	r1, #138	; 0x8a
 800ea9c:	f000 fda8 	bl	800f5f0 <__assert_func>
 800eaa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaa4:	6006      	str	r6, [r0, #0]
 800eaa6:	60c6      	str	r6, [r0, #12]
 800eaa8:	b13c      	cbz	r4, 800eaba <_Bfree+0x3a>
 800eaaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eaac:	6862      	ldr	r2, [r4, #4]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eab4:	6021      	str	r1, [r4, #0]
 800eab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eaba:	bd70      	pop	{r4, r5, r6, pc}
 800eabc:	08010fe5 	.word	0x08010fe5
 800eac0:	080110cc 	.word	0x080110cc

0800eac4 <__multadd>:
 800eac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eac8:	690e      	ldr	r6, [r1, #16]
 800eaca:	4607      	mov	r7, r0
 800eacc:	4698      	mov	r8, r3
 800eace:	460c      	mov	r4, r1
 800ead0:	f101 0014 	add.w	r0, r1, #20
 800ead4:	2300      	movs	r3, #0
 800ead6:	6805      	ldr	r5, [r0, #0]
 800ead8:	b2a9      	uxth	r1, r5
 800eada:	fb02 8101 	mla	r1, r2, r1, r8
 800eade:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eae2:	0c2d      	lsrs	r5, r5, #16
 800eae4:	fb02 c505 	mla	r5, r2, r5, ip
 800eae8:	b289      	uxth	r1, r1
 800eaea:	3301      	adds	r3, #1
 800eaec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eaf0:	429e      	cmp	r6, r3
 800eaf2:	f840 1b04 	str.w	r1, [r0], #4
 800eaf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eafa:	dcec      	bgt.n	800ead6 <__multadd+0x12>
 800eafc:	f1b8 0f00 	cmp.w	r8, #0
 800eb00:	d022      	beq.n	800eb48 <__multadd+0x84>
 800eb02:	68a3      	ldr	r3, [r4, #8]
 800eb04:	42b3      	cmp	r3, r6
 800eb06:	dc19      	bgt.n	800eb3c <__multadd+0x78>
 800eb08:	6861      	ldr	r1, [r4, #4]
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	3101      	adds	r1, #1
 800eb0e:	f7ff ff77 	bl	800ea00 <_Balloc>
 800eb12:	4605      	mov	r5, r0
 800eb14:	b928      	cbnz	r0, 800eb22 <__multadd+0x5e>
 800eb16:	4602      	mov	r2, r0
 800eb18:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <__multadd+0x8c>)
 800eb1a:	480e      	ldr	r0, [pc, #56]	; (800eb54 <__multadd+0x90>)
 800eb1c:	21b5      	movs	r1, #181	; 0xb5
 800eb1e:	f000 fd67 	bl	800f5f0 <__assert_func>
 800eb22:	6922      	ldr	r2, [r4, #16]
 800eb24:	3202      	adds	r2, #2
 800eb26:	f104 010c 	add.w	r1, r4, #12
 800eb2a:	0092      	lsls	r2, r2, #2
 800eb2c:	300c      	adds	r0, #12
 800eb2e:	f7fe f8b1 	bl	800cc94 <memcpy>
 800eb32:	4621      	mov	r1, r4
 800eb34:	4638      	mov	r0, r7
 800eb36:	f7ff ffa3 	bl	800ea80 <_Bfree>
 800eb3a:	462c      	mov	r4, r5
 800eb3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800eb40:	3601      	adds	r6, #1
 800eb42:	f8c3 8014 	str.w	r8, [r3, #20]
 800eb46:	6126      	str	r6, [r4, #16]
 800eb48:	4620      	mov	r0, r4
 800eb4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4e:	bf00      	nop
 800eb50:	0801105b 	.word	0x0801105b
 800eb54:	080110cc 	.word	0x080110cc

0800eb58 <__hi0bits>:
 800eb58:	0c03      	lsrs	r3, r0, #16
 800eb5a:	041b      	lsls	r3, r3, #16
 800eb5c:	b9d3      	cbnz	r3, 800eb94 <__hi0bits+0x3c>
 800eb5e:	0400      	lsls	r0, r0, #16
 800eb60:	2310      	movs	r3, #16
 800eb62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eb66:	bf04      	itt	eq
 800eb68:	0200      	lsleq	r0, r0, #8
 800eb6a:	3308      	addeq	r3, #8
 800eb6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800eb70:	bf04      	itt	eq
 800eb72:	0100      	lsleq	r0, r0, #4
 800eb74:	3304      	addeq	r3, #4
 800eb76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eb7a:	bf04      	itt	eq
 800eb7c:	0080      	lsleq	r0, r0, #2
 800eb7e:	3302      	addeq	r3, #2
 800eb80:	2800      	cmp	r0, #0
 800eb82:	db05      	blt.n	800eb90 <__hi0bits+0x38>
 800eb84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800eb88:	f103 0301 	add.w	r3, r3, #1
 800eb8c:	bf08      	it	eq
 800eb8e:	2320      	moveq	r3, #32
 800eb90:	4618      	mov	r0, r3
 800eb92:	4770      	bx	lr
 800eb94:	2300      	movs	r3, #0
 800eb96:	e7e4      	b.n	800eb62 <__hi0bits+0xa>

0800eb98 <__lo0bits>:
 800eb98:	6803      	ldr	r3, [r0, #0]
 800eb9a:	f013 0207 	ands.w	r2, r3, #7
 800eb9e:	4601      	mov	r1, r0
 800eba0:	d00b      	beq.n	800ebba <__lo0bits+0x22>
 800eba2:	07da      	lsls	r2, r3, #31
 800eba4:	d424      	bmi.n	800ebf0 <__lo0bits+0x58>
 800eba6:	0798      	lsls	r0, r3, #30
 800eba8:	bf49      	itett	mi
 800ebaa:	085b      	lsrmi	r3, r3, #1
 800ebac:	089b      	lsrpl	r3, r3, #2
 800ebae:	2001      	movmi	r0, #1
 800ebb0:	600b      	strmi	r3, [r1, #0]
 800ebb2:	bf5c      	itt	pl
 800ebb4:	600b      	strpl	r3, [r1, #0]
 800ebb6:	2002      	movpl	r0, #2
 800ebb8:	4770      	bx	lr
 800ebba:	b298      	uxth	r0, r3
 800ebbc:	b9b0      	cbnz	r0, 800ebec <__lo0bits+0x54>
 800ebbe:	0c1b      	lsrs	r3, r3, #16
 800ebc0:	2010      	movs	r0, #16
 800ebc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ebc6:	bf04      	itt	eq
 800ebc8:	0a1b      	lsreq	r3, r3, #8
 800ebca:	3008      	addeq	r0, #8
 800ebcc:	071a      	lsls	r2, r3, #28
 800ebce:	bf04      	itt	eq
 800ebd0:	091b      	lsreq	r3, r3, #4
 800ebd2:	3004      	addeq	r0, #4
 800ebd4:	079a      	lsls	r2, r3, #30
 800ebd6:	bf04      	itt	eq
 800ebd8:	089b      	lsreq	r3, r3, #2
 800ebda:	3002      	addeq	r0, #2
 800ebdc:	07da      	lsls	r2, r3, #31
 800ebde:	d403      	bmi.n	800ebe8 <__lo0bits+0x50>
 800ebe0:	085b      	lsrs	r3, r3, #1
 800ebe2:	f100 0001 	add.w	r0, r0, #1
 800ebe6:	d005      	beq.n	800ebf4 <__lo0bits+0x5c>
 800ebe8:	600b      	str	r3, [r1, #0]
 800ebea:	4770      	bx	lr
 800ebec:	4610      	mov	r0, r2
 800ebee:	e7e8      	b.n	800ebc2 <__lo0bits+0x2a>
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	4770      	bx	lr
 800ebf4:	2020      	movs	r0, #32
 800ebf6:	4770      	bx	lr

0800ebf8 <__i2b>:
 800ebf8:	b510      	push	{r4, lr}
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	f7ff feff 	bl	800ea00 <_Balloc>
 800ec02:	4602      	mov	r2, r0
 800ec04:	b928      	cbnz	r0, 800ec12 <__i2b+0x1a>
 800ec06:	4b05      	ldr	r3, [pc, #20]	; (800ec1c <__i2b+0x24>)
 800ec08:	4805      	ldr	r0, [pc, #20]	; (800ec20 <__i2b+0x28>)
 800ec0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec0e:	f000 fcef 	bl	800f5f0 <__assert_func>
 800ec12:	2301      	movs	r3, #1
 800ec14:	6144      	str	r4, [r0, #20]
 800ec16:	6103      	str	r3, [r0, #16]
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	bf00      	nop
 800ec1c:	0801105b 	.word	0x0801105b
 800ec20:	080110cc 	.word	0x080110cc

0800ec24 <__multiply>:
 800ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec28:	4614      	mov	r4, r2
 800ec2a:	690a      	ldr	r2, [r1, #16]
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	bfb8      	it	lt
 800ec32:	460b      	movlt	r3, r1
 800ec34:	460d      	mov	r5, r1
 800ec36:	bfbc      	itt	lt
 800ec38:	4625      	movlt	r5, r4
 800ec3a:	461c      	movlt	r4, r3
 800ec3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ec40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ec44:	68ab      	ldr	r3, [r5, #8]
 800ec46:	6869      	ldr	r1, [r5, #4]
 800ec48:	eb0a 0709 	add.w	r7, sl, r9
 800ec4c:	42bb      	cmp	r3, r7
 800ec4e:	b085      	sub	sp, #20
 800ec50:	bfb8      	it	lt
 800ec52:	3101      	addlt	r1, #1
 800ec54:	f7ff fed4 	bl	800ea00 <_Balloc>
 800ec58:	b930      	cbnz	r0, 800ec68 <__multiply+0x44>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	4b42      	ldr	r3, [pc, #264]	; (800ed68 <__multiply+0x144>)
 800ec5e:	4843      	ldr	r0, [pc, #268]	; (800ed6c <__multiply+0x148>)
 800ec60:	f240 115d 	movw	r1, #349	; 0x15d
 800ec64:	f000 fcc4 	bl	800f5f0 <__assert_func>
 800ec68:	f100 0614 	add.w	r6, r0, #20
 800ec6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ec70:	4633      	mov	r3, r6
 800ec72:	2200      	movs	r2, #0
 800ec74:	4543      	cmp	r3, r8
 800ec76:	d31e      	bcc.n	800ecb6 <__multiply+0x92>
 800ec78:	f105 0c14 	add.w	ip, r5, #20
 800ec7c:	f104 0314 	add.w	r3, r4, #20
 800ec80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ec84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ec88:	9202      	str	r2, [sp, #8]
 800ec8a:	ebac 0205 	sub.w	r2, ip, r5
 800ec8e:	3a15      	subs	r2, #21
 800ec90:	f022 0203 	bic.w	r2, r2, #3
 800ec94:	3204      	adds	r2, #4
 800ec96:	f105 0115 	add.w	r1, r5, #21
 800ec9a:	458c      	cmp	ip, r1
 800ec9c:	bf38      	it	cc
 800ec9e:	2204      	movcc	r2, #4
 800eca0:	9201      	str	r2, [sp, #4]
 800eca2:	9a02      	ldr	r2, [sp, #8]
 800eca4:	9303      	str	r3, [sp, #12]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d808      	bhi.n	800ecbc <__multiply+0x98>
 800ecaa:	2f00      	cmp	r7, #0
 800ecac:	dc55      	bgt.n	800ed5a <__multiply+0x136>
 800ecae:	6107      	str	r7, [r0, #16]
 800ecb0:	b005      	add	sp, #20
 800ecb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecb6:	f843 2b04 	str.w	r2, [r3], #4
 800ecba:	e7db      	b.n	800ec74 <__multiply+0x50>
 800ecbc:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecc0:	f1ba 0f00 	cmp.w	sl, #0
 800ecc4:	d020      	beq.n	800ed08 <__multiply+0xe4>
 800ecc6:	f105 0e14 	add.w	lr, r5, #20
 800ecca:	46b1      	mov	r9, r6
 800eccc:	2200      	movs	r2, #0
 800ecce:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ecd2:	f8d9 b000 	ldr.w	fp, [r9]
 800ecd6:	b2a1      	uxth	r1, r4
 800ecd8:	fa1f fb8b 	uxth.w	fp, fp
 800ecdc:	fb0a b101 	mla	r1, sl, r1, fp
 800ece0:	4411      	add	r1, r2
 800ece2:	f8d9 2000 	ldr.w	r2, [r9]
 800ece6:	0c24      	lsrs	r4, r4, #16
 800ece8:	0c12      	lsrs	r2, r2, #16
 800ecea:	fb0a 2404 	mla	r4, sl, r4, r2
 800ecee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ecf2:	b289      	uxth	r1, r1
 800ecf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ecf8:	45f4      	cmp	ip, lr
 800ecfa:	f849 1b04 	str.w	r1, [r9], #4
 800ecfe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed02:	d8e4      	bhi.n	800ecce <__multiply+0xaa>
 800ed04:	9901      	ldr	r1, [sp, #4]
 800ed06:	5072      	str	r2, [r6, r1]
 800ed08:	9a03      	ldr	r2, [sp, #12]
 800ed0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed0e:	3304      	adds	r3, #4
 800ed10:	f1b9 0f00 	cmp.w	r9, #0
 800ed14:	d01f      	beq.n	800ed56 <__multiply+0x132>
 800ed16:	6834      	ldr	r4, [r6, #0]
 800ed18:	f105 0114 	add.w	r1, r5, #20
 800ed1c:	46b6      	mov	lr, r6
 800ed1e:	f04f 0a00 	mov.w	sl, #0
 800ed22:	880a      	ldrh	r2, [r1, #0]
 800ed24:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ed28:	fb09 b202 	mla	r2, r9, r2, fp
 800ed2c:	4492      	add	sl, r2
 800ed2e:	b2a4      	uxth	r4, r4
 800ed30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ed34:	f84e 4b04 	str.w	r4, [lr], #4
 800ed38:	f851 4b04 	ldr.w	r4, [r1], #4
 800ed3c:	f8be 2000 	ldrh.w	r2, [lr]
 800ed40:	0c24      	lsrs	r4, r4, #16
 800ed42:	fb09 2404 	mla	r4, r9, r4, r2
 800ed46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ed4a:	458c      	cmp	ip, r1
 800ed4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ed50:	d8e7      	bhi.n	800ed22 <__multiply+0xfe>
 800ed52:	9a01      	ldr	r2, [sp, #4]
 800ed54:	50b4      	str	r4, [r6, r2]
 800ed56:	3604      	adds	r6, #4
 800ed58:	e7a3      	b.n	800eca2 <__multiply+0x7e>
 800ed5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d1a5      	bne.n	800ecae <__multiply+0x8a>
 800ed62:	3f01      	subs	r7, #1
 800ed64:	e7a1      	b.n	800ecaa <__multiply+0x86>
 800ed66:	bf00      	nop
 800ed68:	0801105b 	.word	0x0801105b
 800ed6c:	080110cc 	.word	0x080110cc

0800ed70 <__pow5mult>:
 800ed70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed74:	4615      	mov	r5, r2
 800ed76:	f012 0203 	ands.w	r2, r2, #3
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	460f      	mov	r7, r1
 800ed7e:	d007      	beq.n	800ed90 <__pow5mult+0x20>
 800ed80:	4c25      	ldr	r4, [pc, #148]	; (800ee18 <__pow5mult+0xa8>)
 800ed82:	3a01      	subs	r2, #1
 800ed84:	2300      	movs	r3, #0
 800ed86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed8a:	f7ff fe9b 	bl	800eac4 <__multadd>
 800ed8e:	4607      	mov	r7, r0
 800ed90:	10ad      	asrs	r5, r5, #2
 800ed92:	d03d      	beq.n	800ee10 <__pow5mult+0xa0>
 800ed94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ed96:	b97c      	cbnz	r4, 800edb8 <__pow5mult+0x48>
 800ed98:	2010      	movs	r0, #16
 800ed9a:	f7ff fe29 	bl	800e9f0 <malloc>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	6270      	str	r0, [r6, #36]	; 0x24
 800eda2:	b928      	cbnz	r0, 800edb0 <__pow5mult+0x40>
 800eda4:	4b1d      	ldr	r3, [pc, #116]	; (800ee1c <__pow5mult+0xac>)
 800eda6:	481e      	ldr	r0, [pc, #120]	; (800ee20 <__pow5mult+0xb0>)
 800eda8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800edac:	f000 fc20 	bl	800f5f0 <__assert_func>
 800edb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edb4:	6004      	str	r4, [r0, #0]
 800edb6:	60c4      	str	r4, [r0, #12]
 800edb8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800edbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edc0:	b94c      	cbnz	r4, 800edd6 <__pow5mult+0x66>
 800edc2:	f240 2171 	movw	r1, #625	; 0x271
 800edc6:	4630      	mov	r0, r6
 800edc8:	f7ff ff16 	bl	800ebf8 <__i2b>
 800edcc:	2300      	movs	r3, #0
 800edce:	f8c8 0008 	str.w	r0, [r8, #8]
 800edd2:	4604      	mov	r4, r0
 800edd4:	6003      	str	r3, [r0, #0]
 800edd6:	f04f 0900 	mov.w	r9, #0
 800edda:	07eb      	lsls	r3, r5, #31
 800eddc:	d50a      	bpl.n	800edf4 <__pow5mult+0x84>
 800edde:	4639      	mov	r1, r7
 800ede0:	4622      	mov	r2, r4
 800ede2:	4630      	mov	r0, r6
 800ede4:	f7ff ff1e 	bl	800ec24 <__multiply>
 800ede8:	4639      	mov	r1, r7
 800edea:	4680      	mov	r8, r0
 800edec:	4630      	mov	r0, r6
 800edee:	f7ff fe47 	bl	800ea80 <_Bfree>
 800edf2:	4647      	mov	r7, r8
 800edf4:	106d      	asrs	r5, r5, #1
 800edf6:	d00b      	beq.n	800ee10 <__pow5mult+0xa0>
 800edf8:	6820      	ldr	r0, [r4, #0]
 800edfa:	b938      	cbnz	r0, 800ee0c <__pow5mult+0x9c>
 800edfc:	4622      	mov	r2, r4
 800edfe:	4621      	mov	r1, r4
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7ff ff0f 	bl	800ec24 <__multiply>
 800ee06:	6020      	str	r0, [r4, #0]
 800ee08:	f8c0 9000 	str.w	r9, [r0]
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	e7e4      	b.n	800edda <__pow5mult+0x6a>
 800ee10:	4638      	mov	r0, r7
 800ee12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee16:	bf00      	nop
 800ee18:	08011220 	.word	0x08011220
 800ee1c:	08010fe5 	.word	0x08010fe5
 800ee20:	080110cc 	.word	0x080110cc

0800ee24 <__lshift>:
 800ee24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee28:	460c      	mov	r4, r1
 800ee2a:	6849      	ldr	r1, [r1, #4]
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee32:	68a3      	ldr	r3, [r4, #8]
 800ee34:	4607      	mov	r7, r0
 800ee36:	4691      	mov	r9, r2
 800ee38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee3c:	f108 0601 	add.w	r6, r8, #1
 800ee40:	42b3      	cmp	r3, r6
 800ee42:	db0b      	blt.n	800ee5c <__lshift+0x38>
 800ee44:	4638      	mov	r0, r7
 800ee46:	f7ff fddb 	bl	800ea00 <_Balloc>
 800ee4a:	4605      	mov	r5, r0
 800ee4c:	b948      	cbnz	r0, 800ee62 <__lshift+0x3e>
 800ee4e:	4602      	mov	r2, r0
 800ee50:	4b28      	ldr	r3, [pc, #160]	; (800eef4 <__lshift+0xd0>)
 800ee52:	4829      	ldr	r0, [pc, #164]	; (800eef8 <__lshift+0xd4>)
 800ee54:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee58:	f000 fbca 	bl	800f5f0 <__assert_func>
 800ee5c:	3101      	adds	r1, #1
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	e7ee      	b.n	800ee40 <__lshift+0x1c>
 800ee62:	2300      	movs	r3, #0
 800ee64:	f100 0114 	add.w	r1, r0, #20
 800ee68:	f100 0210 	add.w	r2, r0, #16
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	4553      	cmp	r3, sl
 800ee70:	db33      	blt.n	800eeda <__lshift+0xb6>
 800ee72:	6920      	ldr	r0, [r4, #16]
 800ee74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee78:	f104 0314 	add.w	r3, r4, #20
 800ee7c:	f019 091f 	ands.w	r9, r9, #31
 800ee80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee88:	d02b      	beq.n	800eee2 <__lshift+0xbe>
 800ee8a:	f1c9 0e20 	rsb	lr, r9, #32
 800ee8e:	468a      	mov	sl, r1
 800ee90:	2200      	movs	r2, #0
 800ee92:	6818      	ldr	r0, [r3, #0]
 800ee94:	fa00 f009 	lsl.w	r0, r0, r9
 800ee98:	4302      	orrs	r2, r0
 800ee9a:	f84a 2b04 	str.w	r2, [sl], #4
 800ee9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eea2:	459c      	cmp	ip, r3
 800eea4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eea8:	d8f3      	bhi.n	800ee92 <__lshift+0x6e>
 800eeaa:	ebac 0304 	sub.w	r3, ip, r4
 800eeae:	3b15      	subs	r3, #21
 800eeb0:	f023 0303 	bic.w	r3, r3, #3
 800eeb4:	3304      	adds	r3, #4
 800eeb6:	f104 0015 	add.w	r0, r4, #21
 800eeba:	4584      	cmp	ip, r0
 800eebc:	bf38      	it	cc
 800eebe:	2304      	movcc	r3, #4
 800eec0:	50ca      	str	r2, [r1, r3]
 800eec2:	b10a      	cbz	r2, 800eec8 <__lshift+0xa4>
 800eec4:	f108 0602 	add.w	r6, r8, #2
 800eec8:	3e01      	subs	r6, #1
 800eeca:	4638      	mov	r0, r7
 800eecc:	612e      	str	r6, [r5, #16]
 800eece:	4621      	mov	r1, r4
 800eed0:	f7ff fdd6 	bl	800ea80 <_Bfree>
 800eed4:	4628      	mov	r0, r5
 800eed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeda:	f842 0f04 	str.w	r0, [r2, #4]!
 800eede:	3301      	adds	r3, #1
 800eee0:	e7c5      	b.n	800ee6e <__lshift+0x4a>
 800eee2:	3904      	subs	r1, #4
 800eee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800eee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eeec:	459c      	cmp	ip, r3
 800eeee:	d8f9      	bhi.n	800eee4 <__lshift+0xc0>
 800eef0:	e7ea      	b.n	800eec8 <__lshift+0xa4>
 800eef2:	bf00      	nop
 800eef4:	0801105b 	.word	0x0801105b
 800eef8:	080110cc 	.word	0x080110cc

0800eefc <__mcmp>:
 800eefc:	b530      	push	{r4, r5, lr}
 800eefe:	6902      	ldr	r2, [r0, #16]
 800ef00:	690c      	ldr	r4, [r1, #16]
 800ef02:	1b12      	subs	r2, r2, r4
 800ef04:	d10e      	bne.n	800ef24 <__mcmp+0x28>
 800ef06:	f100 0314 	add.w	r3, r0, #20
 800ef0a:	3114      	adds	r1, #20
 800ef0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef1c:	42a5      	cmp	r5, r4
 800ef1e:	d003      	beq.n	800ef28 <__mcmp+0x2c>
 800ef20:	d305      	bcc.n	800ef2e <__mcmp+0x32>
 800ef22:	2201      	movs	r2, #1
 800ef24:	4610      	mov	r0, r2
 800ef26:	bd30      	pop	{r4, r5, pc}
 800ef28:	4283      	cmp	r3, r0
 800ef2a:	d3f3      	bcc.n	800ef14 <__mcmp+0x18>
 800ef2c:	e7fa      	b.n	800ef24 <__mcmp+0x28>
 800ef2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ef32:	e7f7      	b.n	800ef24 <__mcmp+0x28>

0800ef34 <__mdiff>:
 800ef34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef38:	460c      	mov	r4, r1
 800ef3a:	4606      	mov	r6, r0
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4617      	mov	r7, r2
 800ef42:	f7ff ffdb 	bl	800eefc <__mcmp>
 800ef46:	1e05      	subs	r5, r0, #0
 800ef48:	d110      	bne.n	800ef6c <__mdiff+0x38>
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f7ff fd57 	bl	800ea00 <_Balloc>
 800ef52:	b930      	cbnz	r0, 800ef62 <__mdiff+0x2e>
 800ef54:	4b39      	ldr	r3, [pc, #228]	; (800f03c <__mdiff+0x108>)
 800ef56:	4602      	mov	r2, r0
 800ef58:	f240 2132 	movw	r1, #562	; 0x232
 800ef5c:	4838      	ldr	r0, [pc, #224]	; (800f040 <__mdiff+0x10c>)
 800ef5e:	f000 fb47 	bl	800f5f0 <__assert_func>
 800ef62:	2301      	movs	r3, #1
 800ef64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	bfa4      	itt	ge
 800ef6e:	463b      	movge	r3, r7
 800ef70:	4627      	movge	r7, r4
 800ef72:	4630      	mov	r0, r6
 800ef74:	6879      	ldr	r1, [r7, #4]
 800ef76:	bfa6      	itte	ge
 800ef78:	461c      	movge	r4, r3
 800ef7a:	2500      	movge	r5, #0
 800ef7c:	2501      	movlt	r5, #1
 800ef7e:	f7ff fd3f 	bl	800ea00 <_Balloc>
 800ef82:	b920      	cbnz	r0, 800ef8e <__mdiff+0x5a>
 800ef84:	4b2d      	ldr	r3, [pc, #180]	; (800f03c <__mdiff+0x108>)
 800ef86:	4602      	mov	r2, r0
 800ef88:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ef8c:	e7e6      	b.n	800ef5c <__mdiff+0x28>
 800ef8e:	693e      	ldr	r6, [r7, #16]
 800ef90:	60c5      	str	r5, [r0, #12]
 800ef92:	6925      	ldr	r5, [r4, #16]
 800ef94:	f107 0114 	add.w	r1, r7, #20
 800ef98:	f104 0914 	add.w	r9, r4, #20
 800ef9c:	f100 0e14 	add.w	lr, r0, #20
 800efa0:	f107 0210 	add.w	r2, r7, #16
 800efa4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800efa8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800efac:	46f2      	mov	sl, lr
 800efae:	2700      	movs	r7, #0
 800efb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800efb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800efb8:	fa1f f883 	uxth.w	r8, r3
 800efbc:	fa17 f78b 	uxtah	r7, r7, fp
 800efc0:	0c1b      	lsrs	r3, r3, #16
 800efc2:	eba7 0808 	sub.w	r8, r7, r8
 800efc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800efca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800efce:	fa1f f888 	uxth.w	r8, r8
 800efd2:	141f      	asrs	r7, r3, #16
 800efd4:	454d      	cmp	r5, r9
 800efd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800efda:	f84a 3b04 	str.w	r3, [sl], #4
 800efde:	d8e7      	bhi.n	800efb0 <__mdiff+0x7c>
 800efe0:	1b2b      	subs	r3, r5, r4
 800efe2:	3b15      	subs	r3, #21
 800efe4:	f023 0303 	bic.w	r3, r3, #3
 800efe8:	3304      	adds	r3, #4
 800efea:	3415      	adds	r4, #21
 800efec:	42a5      	cmp	r5, r4
 800efee:	bf38      	it	cc
 800eff0:	2304      	movcc	r3, #4
 800eff2:	4419      	add	r1, r3
 800eff4:	4473      	add	r3, lr
 800eff6:	469e      	mov	lr, r3
 800eff8:	460d      	mov	r5, r1
 800effa:	4565      	cmp	r5, ip
 800effc:	d30e      	bcc.n	800f01c <__mdiff+0xe8>
 800effe:	f10c 0203 	add.w	r2, ip, #3
 800f002:	1a52      	subs	r2, r2, r1
 800f004:	f022 0203 	bic.w	r2, r2, #3
 800f008:	3903      	subs	r1, #3
 800f00a:	458c      	cmp	ip, r1
 800f00c:	bf38      	it	cc
 800f00e:	2200      	movcc	r2, #0
 800f010:	441a      	add	r2, r3
 800f012:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f016:	b17b      	cbz	r3, 800f038 <__mdiff+0x104>
 800f018:	6106      	str	r6, [r0, #16]
 800f01a:	e7a5      	b.n	800ef68 <__mdiff+0x34>
 800f01c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f020:	fa17 f488 	uxtah	r4, r7, r8
 800f024:	1422      	asrs	r2, r4, #16
 800f026:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f02a:	b2a4      	uxth	r4, r4
 800f02c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f030:	f84e 4b04 	str.w	r4, [lr], #4
 800f034:	1417      	asrs	r7, r2, #16
 800f036:	e7e0      	b.n	800effa <__mdiff+0xc6>
 800f038:	3e01      	subs	r6, #1
 800f03a:	e7ea      	b.n	800f012 <__mdiff+0xde>
 800f03c:	0801105b 	.word	0x0801105b
 800f040:	080110cc 	.word	0x080110cc

0800f044 <__d2b>:
 800f044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f048:	4689      	mov	r9, r1
 800f04a:	2101      	movs	r1, #1
 800f04c:	ec57 6b10 	vmov	r6, r7, d0
 800f050:	4690      	mov	r8, r2
 800f052:	f7ff fcd5 	bl	800ea00 <_Balloc>
 800f056:	4604      	mov	r4, r0
 800f058:	b930      	cbnz	r0, 800f068 <__d2b+0x24>
 800f05a:	4602      	mov	r2, r0
 800f05c:	4b25      	ldr	r3, [pc, #148]	; (800f0f4 <__d2b+0xb0>)
 800f05e:	4826      	ldr	r0, [pc, #152]	; (800f0f8 <__d2b+0xb4>)
 800f060:	f240 310a 	movw	r1, #778	; 0x30a
 800f064:	f000 fac4 	bl	800f5f0 <__assert_func>
 800f068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f06c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f070:	bb35      	cbnz	r5, 800f0c0 <__d2b+0x7c>
 800f072:	2e00      	cmp	r6, #0
 800f074:	9301      	str	r3, [sp, #4]
 800f076:	d028      	beq.n	800f0ca <__d2b+0x86>
 800f078:	4668      	mov	r0, sp
 800f07a:	9600      	str	r6, [sp, #0]
 800f07c:	f7ff fd8c 	bl	800eb98 <__lo0bits>
 800f080:	9900      	ldr	r1, [sp, #0]
 800f082:	b300      	cbz	r0, 800f0c6 <__d2b+0x82>
 800f084:	9a01      	ldr	r2, [sp, #4]
 800f086:	f1c0 0320 	rsb	r3, r0, #32
 800f08a:	fa02 f303 	lsl.w	r3, r2, r3
 800f08e:	430b      	orrs	r3, r1
 800f090:	40c2      	lsrs	r2, r0
 800f092:	6163      	str	r3, [r4, #20]
 800f094:	9201      	str	r2, [sp, #4]
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	61a3      	str	r3, [r4, #24]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bf14      	ite	ne
 800f09e:	2202      	movne	r2, #2
 800f0a0:	2201      	moveq	r2, #1
 800f0a2:	6122      	str	r2, [r4, #16]
 800f0a4:	b1d5      	cbz	r5, 800f0dc <__d2b+0x98>
 800f0a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0aa:	4405      	add	r5, r0
 800f0ac:	f8c9 5000 	str.w	r5, [r9]
 800f0b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0b4:	f8c8 0000 	str.w	r0, [r8]
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	b003      	add	sp, #12
 800f0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f0c4:	e7d5      	b.n	800f072 <__d2b+0x2e>
 800f0c6:	6161      	str	r1, [r4, #20]
 800f0c8:	e7e5      	b.n	800f096 <__d2b+0x52>
 800f0ca:	a801      	add	r0, sp, #4
 800f0cc:	f7ff fd64 	bl	800eb98 <__lo0bits>
 800f0d0:	9b01      	ldr	r3, [sp, #4]
 800f0d2:	6163      	str	r3, [r4, #20]
 800f0d4:	2201      	movs	r2, #1
 800f0d6:	6122      	str	r2, [r4, #16]
 800f0d8:	3020      	adds	r0, #32
 800f0da:	e7e3      	b.n	800f0a4 <__d2b+0x60>
 800f0dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f0e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0e4:	f8c9 0000 	str.w	r0, [r9]
 800f0e8:	6918      	ldr	r0, [r3, #16]
 800f0ea:	f7ff fd35 	bl	800eb58 <__hi0bits>
 800f0ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0f2:	e7df      	b.n	800f0b4 <__d2b+0x70>
 800f0f4:	0801105b 	.word	0x0801105b
 800f0f8:	080110cc 	.word	0x080110cc

0800f0fc <_calloc_r>:
 800f0fc:	b513      	push	{r0, r1, r4, lr}
 800f0fe:	434a      	muls	r2, r1
 800f100:	4611      	mov	r1, r2
 800f102:	9201      	str	r2, [sp, #4]
 800f104:	f000 f85a 	bl	800f1bc <_malloc_r>
 800f108:	4604      	mov	r4, r0
 800f10a:	b118      	cbz	r0, 800f114 <_calloc_r+0x18>
 800f10c:	9a01      	ldr	r2, [sp, #4]
 800f10e:	2100      	movs	r1, #0
 800f110:	f7fd fdce 	bl	800ccb0 <memset>
 800f114:	4620      	mov	r0, r4
 800f116:	b002      	add	sp, #8
 800f118:	bd10      	pop	{r4, pc}
	...

0800f11c <_free_r>:
 800f11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f11e:	2900      	cmp	r1, #0
 800f120:	d048      	beq.n	800f1b4 <_free_r+0x98>
 800f122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f126:	9001      	str	r0, [sp, #4]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	f1a1 0404 	sub.w	r4, r1, #4
 800f12e:	bfb8      	it	lt
 800f130:	18e4      	addlt	r4, r4, r3
 800f132:	f000 fae3 	bl	800f6fc <__malloc_lock>
 800f136:	4a20      	ldr	r2, [pc, #128]	; (800f1b8 <_free_r+0x9c>)
 800f138:	9801      	ldr	r0, [sp, #4]
 800f13a:	6813      	ldr	r3, [r2, #0]
 800f13c:	4615      	mov	r5, r2
 800f13e:	b933      	cbnz	r3, 800f14e <_free_r+0x32>
 800f140:	6063      	str	r3, [r4, #4]
 800f142:	6014      	str	r4, [r2, #0]
 800f144:	b003      	add	sp, #12
 800f146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f14a:	f000 badd 	b.w	800f708 <__malloc_unlock>
 800f14e:	42a3      	cmp	r3, r4
 800f150:	d90b      	bls.n	800f16a <_free_r+0x4e>
 800f152:	6821      	ldr	r1, [r4, #0]
 800f154:	1862      	adds	r2, r4, r1
 800f156:	4293      	cmp	r3, r2
 800f158:	bf04      	itt	eq
 800f15a:	681a      	ldreq	r2, [r3, #0]
 800f15c:	685b      	ldreq	r3, [r3, #4]
 800f15e:	6063      	str	r3, [r4, #4]
 800f160:	bf04      	itt	eq
 800f162:	1852      	addeq	r2, r2, r1
 800f164:	6022      	streq	r2, [r4, #0]
 800f166:	602c      	str	r4, [r5, #0]
 800f168:	e7ec      	b.n	800f144 <_free_r+0x28>
 800f16a:	461a      	mov	r2, r3
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	b10b      	cbz	r3, 800f174 <_free_r+0x58>
 800f170:	42a3      	cmp	r3, r4
 800f172:	d9fa      	bls.n	800f16a <_free_r+0x4e>
 800f174:	6811      	ldr	r1, [r2, #0]
 800f176:	1855      	adds	r5, r2, r1
 800f178:	42a5      	cmp	r5, r4
 800f17a:	d10b      	bne.n	800f194 <_free_r+0x78>
 800f17c:	6824      	ldr	r4, [r4, #0]
 800f17e:	4421      	add	r1, r4
 800f180:	1854      	adds	r4, r2, r1
 800f182:	42a3      	cmp	r3, r4
 800f184:	6011      	str	r1, [r2, #0]
 800f186:	d1dd      	bne.n	800f144 <_free_r+0x28>
 800f188:	681c      	ldr	r4, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	6053      	str	r3, [r2, #4]
 800f18e:	4421      	add	r1, r4
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	e7d7      	b.n	800f144 <_free_r+0x28>
 800f194:	d902      	bls.n	800f19c <_free_r+0x80>
 800f196:	230c      	movs	r3, #12
 800f198:	6003      	str	r3, [r0, #0]
 800f19a:	e7d3      	b.n	800f144 <_free_r+0x28>
 800f19c:	6825      	ldr	r5, [r4, #0]
 800f19e:	1961      	adds	r1, r4, r5
 800f1a0:	428b      	cmp	r3, r1
 800f1a2:	bf04      	itt	eq
 800f1a4:	6819      	ldreq	r1, [r3, #0]
 800f1a6:	685b      	ldreq	r3, [r3, #4]
 800f1a8:	6063      	str	r3, [r4, #4]
 800f1aa:	bf04      	itt	eq
 800f1ac:	1949      	addeq	r1, r1, r5
 800f1ae:	6021      	streq	r1, [r4, #0]
 800f1b0:	6054      	str	r4, [r2, #4]
 800f1b2:	e7c7      	b.n	800f144 <_free_r+0x28>
 800f1b4:	b003      	add	sp, #12
 800f1b6:	bd30      	pop	{r4, r5, pc}
 800f1b8:	20004c18 	.word	0x20004c18

0800f1bc <_malloc_r>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	1ccd      	adds	r5, r1, #3
 800f1c0:	f025 0503 	bic.w	r5, r5, #3
 800f1c4:	3508      	adds	r5, #8
 800f1c6:	2d0c      	cmp	r5, #12
 800f1c8:	bf38      	it	cc
 800f1ca:	250c      	movcc	r5, #12
 800f1cc:	2d00      	cmp	r5, #0
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	db01      	blt.n	800f1d6 <_malloc_r+0x1a>
 800f1d2:	42a9      	cmp	r1, r5
 800f1d4:	d903      	bls.n	800f1de <_malloc_r+0x22>
 800f1d6:	230c      	movs	r3, #12
 800f1d8:	6033      	str	r3, [r6, #0]
 800f1da:	2000      	movs	r0, #0
 800f1dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1de:	f000 fa8d 	bl	800f6fc <__malloc_lock>
 800f1e2:	4921      	ldr	r1, [pc, #132]	; (800f268 <_malloc_r+0xac>)
 800f1e4:	680a      	ldr	r2, [r1, #0]
 800f1e6:	4614      	mov	r4, r2
 800f1e8:	b99c      	cbnz	r4, 800f212 <_malloc_r+0x56>
 800f1ea:	4f20      	ldr	r7, [pc, #128]	; (800f26c <_malloc_r+0xb0>)
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	b923      	cbnz	r3, 800f1fa <_malloc_r+0x3e>
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f000 f996 	bl	800f524 <_sbrk_r>
 800f1f8:	6038      	str	r0, [r7, #0]
 800f1fa:	4629      	mov	r1, r5
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	f000 f991 	bl	800f524 <_sbrk_r>
 800f202:	1c43      	adds	r3, r0, #1
 800f204:	d123      	bne.n	800f24e <_malloc_r+0x92>
 800f206:	230c      	movs	r3, #12
 800f208:	6033      	str	r3, [r6, #0]
 800f20a:	4630      	mov	r0, r6
 800f20c:	f000 fa7c 	bl	800f708 <__malloc_unlock>
 800f210:	e7e3      	b.n	800f1da <_malloc_r+0x1e>
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	1b5b      	subs	r3, r3, r5
 800f216:	d417      	bmi.n	800f248 <_malloc_r+0x8c>
 800f218:	2b0b      	cmp	r3, #11
 800f21a:	d903      	bls.n	800f224 <_malloc_r+0x68>
 800f21c:	6023      	str	r3, [r4, #0]
 800f21e:	441c      	add	r4, r3
 800f220:	6025      	str	r5, [r4, #0]
 800f222:	e004      	b.n	800f22e <_malloc_r+0x72>
 800f224:	6863      	ldr	r3, [r4, #4]
 800f226:	42a2      	cmp	r2, r4
 800f228:	bf0c      	ite	eq
 800f22a:	600b      	streq	r3, [r1, #0]
 800f22c:	6053      	strne	r3, [r2, #4]
 800f22e:	4630      	mov	r0, r6
 800f230:	f000 fa6a 	bl	800f708 <__malloc_unlock>
 800f234:	f104 000b 	add.w	r0, r4, #11
 800f238:	1d23      	adds	r3, r4, #4
 800f23a:	f020 0007 	bic.w	r0, r0, #7
 800f23e:	1ac2      	subs	r2, r0, r3
 800f240:	d0cc      	beq.n	800f1dc <_malloc_r+0x20>
 800f242:	1a1b      	subs	r3, r3, r0
 800f244:	50a3      	str	r3, [r4, r2]
 800f246:	e7c9      	b.n	800f1dc <_malloc_r+0x20>
 800f248:	4622      	mov	r2, r4
 800f24a:	6864      	ldr	r4, [r4, #4]
 800f24c:	e7cc      	b.n	800f1e8 <_malloc_r+0x2c>
 800f24e:	1cc4      	adds	r4, r0, #3
 800f250:	f024 0403 	bic.w	r4, r4, #3
 800f254:	42a0      	cmp	r0, r4
 800f256:	d0e3      	beq.n	800f220 <_malloc_r+0x64>
 800f258:	1a21      	subs	r1, r4, r0
 800f25a:	4630      	mov	r0, r6
 800f25c:	f000 f962 	bl	800f524 <_sbrk_r>
 800f260:	3001      	adds	r0, #1
 800f262:	d1dd      	bne.n	800f220 <_malloc_r+0x64>
 800f264:	e7cf      	b.n	800f206 <_malloc_r+0x4a>
 800f266:	bf00      	nop
 800f268:	20004c18 	.word	0x20004c18
 800f26c:	20004c1c 	.word	0x20004c1c

0800f270 <__sfputc_r>:
 800f270:	6893      	ldr	r3, [r2, #8]
 800f272:	3b01      	subs	r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	b410      	push	{r4}
 800f278:	6093      	str	r3, [r2, #8]
 800f27a:	da08      	bge.n	800f28e <__sfputc_r+0x1e>
 800f27c:	6994      	ldr	r4, [r2, #24]
 800f27e:	42a3      	cmp	r3, r4
 800f280:	db01      	blt.n	800f286 <__sfputc_r+0x16>
 800f282:	290a      	cmp	r1, #10
 800f284:	d103      	bne.n	800f28e <__sfputc_r+0x1e>
 800f286:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f28a:	f7fe ba55 	b.w	800d738 <__swbuf_r>
 800f28e:	6813      	ldr	r3, [r2, #0]
 800f290:	1c58      	adds	r0, r3, #1
 800f292:	6010      	str	r0, [r2, #0]
 800f294:	7019      	strb	r1, [r3, #0]
 800f296:	4608      	mov	r0, r1
 800f298:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f29c:	4770      	bx	lr

0800f29e <__sfputs_r>:
 800f29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a0:	4606      	mov	r6, r0
 800f2a2:	460f      	mov	r7, r1
 800f2a4:	4614      	mov	r4, r2
 800f2a6:	18d5      	adds	r5, r2, r3
 800f2a8:	42ac      	cmp	r4, r5
 800f2aa:	d101      	bne.n	800f2b0 <__sfputs_r+0x12>
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e007      	b.n	800f2c0 <__sfputs_r+0x22>
 800f2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b4:	463a      	mov	r2, r7
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	f7ff ffda 	bl	800f270 <__sfputc_r>
 800f2bc:	1c43      	adds	r3, r0, #1
 800f2be:	d1f3      	bne.n	800f2a8 <__sfputs_r+0xa>
 800f2c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2c4 <_vfiprintf_r>:
 800f2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c8:	460d      	mov	r5, r1
 800f2ca:	b09d      	sub	sp, #116	; 0x74
 800f2cc:	4614      	mov	r4, r2
 800f2ce:	4698      	mov	r8, r3
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	b118      	cbz	r0, 800f2dc <_vfiprintf_r+0x18>
 800f2d4:	6983      	ldr	r3, [r0, #24]
 800f2d6:	b90b      	cbnz	r3, 800f2dc <_vfiprintf_r+0x18>
 800f2d8:	f7ff fa80 	bl	800e7dc <__sinit>
 800f2dc:	4b89      	ldr	r3, [pc, #548]	; (800f504 <_vfiprintf_r+0x240>)
 800f2de:	429d      	cmp	r5, r3
 800f2e0:	d11b      	bne.n	800f31a <_vfiprintf_r+0x56>
 800f2e2:	6875      	ldr	r5, [r6, #4]
 800f2e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2e6:	07d9      	lsls	r1, r3, #31
 800f2e8:	d405      	bmi.n	800f2f6 <_vfiprintf_r+0x32>
 800f2ea:	89ab      	ldrh	r3, [r5, #12]
 800f2ec:	059a      	lsls	r2, r3, #22
 800f2ee:	d402      	bmi.n	800f2f6 <_vfiprintf_r+0x32>
 800f2f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2f2:	f7ff fb16 	bl	800e922 <__retarget_lock_acquire_recursive>
 800f2f6:	89ab      	ldrh	r3, [r5, #12]
 800f2f8:	071b      	lsls	r3, r3, #28
 800f2fa:	d501      	bpl.n	800f300 <_vfiprintf_r+0x3c>
 800f2fc:	692b      	ldr	r3, [r5, #16]
 800f2fe:	b9eb      	cbnz	r3, 800f33c <_vfiprintf_r+0x78>
 800f300:	4629      	mov	r1, r5
 800f302:	4630      	mov	r0, r6
 800f304:	f7fe fa6a 	bl	800d7dc <__swsetup_r>
 800f308:	b1c0      	cbz	r0, 800f33c <_vfiprintf_r+0x78>
 800f30a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f30c:	07dc      	lsls	r4, r3, #31
 800f30e:	d50e      	bpl.n	800f32e <_vfiprintf_r+0x6a>
 800f310:	f04f 30ff 	mov.w	r0, #4294967295
 800f314:	b01d      	add	sp, #116	; 0x74
 800f316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31a:	4b7b      	ldr	r3, [pc, #492]	; (800f508 <_vfiprintf_r+0x244>)
 800f31c:	429d      	cmp	r5, r3
 800f31e:	d101      	bne.n	800f324 <_vfiprintf_r+0x60>
 800f320:	68b5      	ldr	r5, [r6, #8]
 800f322:	e7df      	b.n	800f2e4 <_vfiprintf_r+0x20>
 800f324:	4b79      	ldr	r3, [pc, #484]	; (800f50c <_vfiprintf_r+0x248>)
 800f326:	429d      	cmp	r5, r3
 800f328:	bf08      	it	eq
 800f32a:	68f5      	ldreq	r5, [r6, #12]
 800f32c:	e7da      	b.n	800f2e4 <_vfiprintf_r+0x20>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	0598      	lsls	r0, r3, #22
 800f332:	d4ed      	bmi.n	800f310 <_vfiprintf_r+0x4c>
 800f334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f336:	f7ff faf5 	bl	800e924 <__retarget_lock_release_recursive>
 800f33a:	e7e9      	b.n	800f310 <_vfiprintf_r+0x4c>
 800f33c:	2300      	movs	r3, #0
 800f33e:	9309      	str	r3, [sp, #36]	; 0x24
 800f340:	2320      	movs	r3, #32
 800f342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f346:	f8cd 800c 	str.w	r8, [sp, #12]
 800f34a:	2330      	movs	r3, #48	; 0x30
 800f34c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f510 <_vfiprintf_r+0x24c>
 800f350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f354:	f04f 0901 	mov.w	r9, #1
 800f358:	4623      	mov	r3, r4
 800f35a:	469a      	mov	sl, r3
 800f35c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f360:	b10a      	cbz	r2, 800f366 <_vfiprintf_r+0xa2>
 800f362:	2a25      	cmp	r2, #37	; 0x25
 800f364:	d1f9      	bne.n	800f35a <_vfiprintf_r+0x96>
 800f366:	ebba 0b04 	subs.w	fp, sl, r4
 800f36a:	d00b      	beq.n	800f384 <_vfiprintf_r+0xc0>
 800f36c:	465b      	mov	r3, fp
 800f36e:	4622      	mov	r2, r4
 800f370:	4629      	mov	r1, r5
 800f372:	4630      	mov	r0, r6
 800f374:	f7ff ff93 	bl	800f29e <__sfputs_r>
 800f378:	3001      	adds	r0, #1
 800f37a:	f000 80aa 	beq.w	800f4d2 <_vfiprintf_r+0x20e>
 800f37e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f380:	445a      	add	r2, fp
 800f382:	9209      	str	r2, [sp, #36]	; 0x24
 800f384:	f89a 3000 	ldrb.w	r3, [sl]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	f000 80a2 	beq.w	800f4d2 <_vfiprintf_r+0x20e>
 800f38e:	2300      	movs	r3, #0
 800f390:	f04f 32ff 	mov.w	r2, #4294967295
 800f394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f398:	f10a 0a01 	add.w	sl, sl, #1
 800f39c:	9304      	str	r3, [sp, #16]
 800f39e:	9307      	str	r3, [sp, #28]
 800f3a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3a4:	931a      	str	r3, [sp, #104]	; 0x68
 800f3a6:	4654      	mov	r4, sl
 800f3a8:	2205      	movs	r2, #5
 800f3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ae:	4858      	ldr	r0, [pc, #352]	; (800f510 <_vfiprintf_r+0x24c>)
 800f3b0:	f7f0 ff3e 	bl	8000230 <memchr>
 800f3b4:	9a04      	ldr	r2, [sp, #16]
 800f3b6:	b9d8      	cbnz	r0, 800f3f0 <_vfiprintf_r+0x12c>
 800f3b8:	06d1      	lsls	r1, r2, #27
 800f3ba:	bf44      	itt	mi
 800f3bc:	2320      	movmi	r3, #32
 800f3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3c2:	0713      	lsls	r3, r2, #28
 800f3c4:	bf44      	itt	mi
 800f3c6:	232b      	movmi	r3, #43	; 0x2b
 800f3c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3cc:	f89a 3000 	ldrb.w	r3, [sl]
 800f3d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f3d2:	d015      	beq.n	800f400 <_vfiprintf_r+0x13c>
 800f3d4:	9a07      	ldr	r2, [sp, #28]
 800f3d6:	4654      	mov	r4, sl
 800f3d8:	2000      	movs	r0, #0
 800f3da:	f04f 0c0a 	mov.w	ip, #10
 800f3de:	4621      	mov	r1, r4
 800f3e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3e4:	3b30      	subs	r3, #48	; 0x30
 800f3e6:	2b09      	cmp	r3, #9
 800f3e8:	d94e      	bls.n	800f488 <_vfiprintf_r+0x1c4>
 800f3ea:	b1b0      	cbz	r0, 800f41a <_vfiprintf_r+0x156>
 800f3ec:	9207      	str	r2, [sp, #28]
 800f3ee:	e014      	b.n	800f41a <_vfiprintf_r+0x156>
 800f3f0:	eba0 0308 	sub.w	r3, r0, r8
 800f3f4:	fa09 f303 	lsl.w	r3, r9, r3
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	9304      	str	r3, [sp, #16]
 800f3fc:	46a2      	mov	sl, r4
 800f3fe:	e7d2      	b.n	800f3a6 <_vfiprintf_r+0xe2>
 800f400:	9b03      	ldr	r3, [sp, #12]
 800f402:	1d19      	adds	r1, r3, #4
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	9103      	str	r1, [sp, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bfbb      	ittet	lt
 800f40c:	425b      	neglt	r3, r3
 800f40e:	f042 0202 	orrlt.w	r2, r2, #2
 800f412:	9307      	strge	r3, [sp, #28]
 800f414:	9307      	strlt	r3, [sp, #28]
 800f416:	bfb8      	it	lt
 800f418:	9204      	strlt	r2, [sp, #16]
 800f41a:	7823      	ldrb	r3, [r4, #0]
 800f41c:	2b2e      	cmp	r3, #46	; 0x2e
 800f41e:	d10c      	bne.n	800f43a <_vfiprintf_r+0x176>
 800f420:	7863      	ldrb	r3, [r4, #1]
 800f422:	2b2a      	cmp	r3, #42	; 0x2a
 800f424:	d135      	bne.n	800f492 <_vfiprintf_r+0x1ce>
 800f426:	9b03      	ldr	r3, [sp, #12]
 800f428:	1d1a      	adds	r2, r3, #4
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	9203      	str	r2, [sp, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	bfb8      	it	lt
 800f432:	f04f 33ff 	movlt.w	r3, #4294967295
 800f436:	3402      	adds	r4, #2
 800f438:	9305      	str	r3, [sp, #20]
 800f43a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f520 <_vfiprintf_r+0x25c>
 800f43e:	7821      	ldrb	r1, [r4, #0]
 800f440:	2203      	movs	r2, #3
 800f442:	4650      	mov	r0, sl
 800f444:	f7f0 fef4 	bl	8000230 <memchr>
 800f448:	b140      	cbz	r0, 800f45c <_vfiprintf_r+0x198>
 800f44a:	2340      	movs	r3, #64	; 0x40
 800f44c:	eba0 000a 	sub.w	r0, r0, sl
 800f450:	fa03 f000 	lsl.w	r0, r3, r0
 800f454:	9b04      	ldr	r3, [sp, #16]
 800f456:	4303      	orrs	r3, r0
 800f458:	3401      	adds	r4, #1
 800f45a:	9304      	str	r3, [sp, #16]
 800f45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f460:	482c      	ldr	r0, [pc, #176]	; (800f514 <_vfiprintf_r+0x250>)
 800f462:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f466:	2206      	movs	r2, #6
 800f468:	f7f0 fee2 	bl	8000230 <memchr>
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d03f      	beq.n	800f4f0 <_vfiprintf_r+0x22c>
 800f470:	4b29      	ldr	r3, [pc, #164]	; (800f518 <_vfiprintf_r+0x254>)
 800f472:	bb1b      	cbnz	r3, 800f4bc <_vfiprintf_r+0x1f8>
 800f474:	9b03      	ldr	r3, [sp, #12]
 800f476:	3307      	adds	r3, #7
 800f478:	f023 0307 	bic.w	r3, r3, #7
 800f47c:	3308      	adds	r3, #8
 800f47e:	9303      	str	r3, [sp, #12]
 800f480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f482:	443b      	add	r3, r7
 800f484:	9309      	str	r3, [sp, #36]	; 0x24
 800f486:	e767      	b.n	800f358 <_vfiprintf_r+0x94>
 800f488:	fb0c 3202 	mla	r2, ip, r2, r3
 800f48c:	460c      	mov	r4, r1
 800f48e:	2001      	movs	r0, #1
 800f490:	e7a5      	b.n	800f3de <_vfiprintf_r+0x11a>
 800f492:	2300      	movs	r3, #0
 800f494:	3401      	adds	r4, #1
 800f496:	9305      	str	r3, [sp, #20]
 800f498:	4619      	mov	r1, r3
 800f49a:	f04f 0c0a 	mov.w	ip, #10
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4a4:	3a30      	subs	r2, #48	; 0x30
 800f4a6:	2a09      	cmp	r2, #9
 800f4a8:	d903      	bls.n	800f4b2 <_vfiprintf_r+0x1ee>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d0c5      	beq.n	800f43a <_vfiprintf_r+0x176>
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	e7c3      	b.n	800f43a <_vfiprintf_r+0x176>
 800f4b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e7f0      	b.n	800f49e <_vfiprintf_r+0x1da>
 800f4bc:	ab03      	add	r3, sp, #12
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	4b16      	ldr	r3, [pc, #88]	; (800f51c <_vfiprintf_r+0x258>)
 800f4c4:	a904      	add	r1, sp, #16
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7fd fc9a 	bl	800ce00 <_printf_float>
 800f4cc:	4607      	mov	r7, r0
 800f4ce:	1c78      	adds	r0, r7, #1
 800f4d0:	d1d6      	bne.n	800f480 <_vfiprintf_r+0x1bc>
 800f4d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4d4:	07d9      	lsls	r1, r3, #31
 800f4d6:	d405      	bmi.n	800f4e4 <_vfiprintf_r+0x220>
 800f4d8:	89ab      	ldrh	r3, [r5, #12]
 800f4da:	059a      	lsls	r2, r3, #22
 800f4dc:	d402      	bmi.n	800f4e4 <_vfiprintf_r+0x220>
 800f4de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4e0:	f7ff fa20 	bl	800e924 <__retarget_lock_release_recursive>
 800f4e4:	89ab      	ldrh	r3, [r5, #12]
 800f4e6:	065b      	lsls	r3, r3, #25
 800f4e8:	f53f af12 	bmi.w	800f310 <_vfiprintf_r+0x4c>
 800f4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4ee:	e711      	b.n	800f314 <_vfiprintf_r+0x50>
 800f4f0:	ab03      	add	r3, sp, #12
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	462a      	mov	r2, r5
 800f4f6:	4b09      	ldr	r3, [pc, #36]	; (800f51c <_vfiprintf_r+0x258>)
 800f4f8:	a904      	add	r1, sp, #16
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f7fd ff24 	bl	800d348 <_printf_i>
 800f500:	e7e4      	b.n	800f4cc <_vfiprintf_r+0x208>
 800f502:	bf00      	nop
 800f504:	0801108c 	.word	0x0801108c
 800f508:	080110ac 	.word	0x080110ac
 800f50c:	0801106c 	.word	0x0801106c
 800f510:	0801122c 	.word	0x0801122c
 800f514:	08011236 	.word	0x08011236
 800f518:	0800ce01 	.word	0x0800ce01
 800f51c:	0800f29f 	.word	0x0800f29f
 800f520:	08011232 	.word	0x08011232

0800f524 <_sbrk_r>:
 800f524:	b538      	push	{r3, r4, r5, lr}
 800f526:	4d06      	ldr	r5, [pc, #24]	; (800f540 <_sbrk_r+0x1c>)
 800f528:	2300      	movs	r3, #0
 800f52a:	4604      	mov	r4, r0
 800f52c:	4608      	mov	r0, r1
 800f52e:	602b      	str	r3, [r5, #0]
 800f530:	f7f4 fe60 	bl	80041f4 <_sbrk>
 800f534:	1c43      	adds	r3, r0, #1
 800f536:	d102      	bne.n	800f53e <_sbrk_r+0x1a>
 800f538:	682b      	ldr	r3, [r5, #0]
 800f53a:	b103      	cbz	r3, 800f53e <_sbrk_r+0x1a>
 800f53c:	6023      	str	r3, [r4, #0]
 800f53e:	bd38      	pop	{r3, r4, r5, pc}
 800f540:	20005310 	.word	0x20005310

0800f544 <__sread>:
 800f544:	b510      	push	{r4, lr}
 800f546:	460c      	mov	r4, r1
 800f548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54c:	f000 f8e2 	bl	800f714 <_read_r>
 800f550:	2800      	cmp	r0, #0
 800f552:	bfab      	itete	ge
 800f554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f556:	89a3      	ldrhlt	r3, [r4, #12]
 800f558:	181b      	addge	r3, r3, r0
 800f55a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f55e:	bfac      	ite	ge
 800f560:	6563      	strge	r3, [r4, #84]	; 0x54
 800f562:	81a3      	strhlt	r3, [r4, #12]
 800f564:	bd10      	pop	{r4, pc}

0800f566 <__swrite>:
 800f566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f56a:	461f      	mov	r7, r3
 800f56c:	898b      	ldrh	r3, [r1, #12]
 800f56e:	05db      	lsls	r3, r3, #23
 800f570:	4605      	mov	r5, r0
 800f572:	460c      	mov	r4, r1
 800f574:	4616      	mov	r6, r2
 800f576:	d505      	bpl.n	800f584 <__swrite+0x1e>
 800f578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f57c:	2302      	movs	r3, #2
 800f57e:	2200      	movs	r2, #0
 800f580:	f000 f898 	bl	800f6b4 <_lseek_r>
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f58a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f58e:	81a3      	strh	r3, [r4, #12]
 800f590:	4632      	mov	r2, r6
 800f592:	463b      	mov	r3, r7
 800f594:	4628      	mov	r0, r5
 800f596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f59a:	f000 b817 	b.w	800f5cc <_write_r>

0800f59e <__sseek>:
 800f59e:	b510      	push	{r4, lr}
 800f5a0:	460c      	mov	r4, r1
 800f5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a6:	f000 f885 	bl	800f6b4 <_lseek_r>
 800f5aa:	1c43      	adds	r3, r0, #1
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	bf15      	itete	ne
 800f5b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5ba:	81a3      	strheq	r3, [r4, #12]
 800f5bc:	bf18      	it	ne
 800f5be:	81a3      	strhne	r3, [r4, #12]
 800f5c0:	bd10      	pop	{r4, pc}

0800f5c2 <__sclose>:
 800f5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c6:	f000 b831 	b.w	800f62c <_close_r>
	...

0800f5cc <_write_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	; (800f5ec <_write_r+0x20>)
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	602a      	str	r2, [r5, #0]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	f7f4 fdb9 	bl	8004152 <_write>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_write_r+0x1e>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_write_r+0x1e>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	20005310 	.word	0x20005310

0800f5f0 <__assert_func>:
 800f5f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f5f2:	4614      	mov	r4, r2
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	4b09      	ldr	r3, [pc, #36]	; (800f61c <__assert_func+0x2c>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	68d8      	ldr	r0, [r3, #12]
 800f5fe:	b14c      	cbz	r4, 800f614 <__assert_func+0x24>
 800f600:	4b07      	ldr	r3, [pc, #28]	; (800f620 <__assert_func+0x30>)
 800f602:	9100      	str	r1, [sp, #0]
 800f604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f608:	4906      	ldr	r1, [pc, #24]	; (800f624 <__assert_func+0x34>)
 800f60a:	462b      	mov	r3, r5
 800f60c:	f000 f81e 	bl	800f64c <fiprintf>
 800f610:	f7fd fb0e 	bl	800cc30 <abort>
 800f614:	4b04      	ldr	r3, [pc, #16]	; (800f628 <__assert_func+0x38>)
 800f616:	461c      	mov	r4, r3
 800f618:	e7f3      	b.n	800f602 <__assert_func+0x12>
 800f61a:	bf00      	nop
 800f61c:	20000014 	.word	0x20000014
 800f620:	0801123d 	.word	0x0801123d
 800f624:	0801124a 	.word	0x0801124a
 800f628:	08011278 	.word	0x08011278

0800f62c <_close_r>:
 800f62c:	b538      	push	{r3, r4, r5, lr}
 800f62e:	4d06      	ldr	r5, [pc, #24]	; (800f648 <_close_r+0x1c>)
 800f630:	2300      	movs	r3, #0
 800f632:	4604      	mov	r4, r0
 800f634:	4608      	mov	r0, r1
 800f636:	602b      	str	r3, [r5, #0]
 800f638:	f7f4 fda7 	bl	800418a <_close>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d102      	bne.n	800f646 <_close_r+0x1a>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b103      	cbz	r3, 800f646 <_close_r+0x1a>
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	20005310 	.word	0x20005310

0800f64c <fiprintf>:
 800f64c:	b40e      	push	{r1, r2, r3}
 800f64e:	b503      	push	{r0, r1, lr}
 800f650:	4601      	mov	r1, r0
 800f652:	ab03      	add	r3, sp, #12
 800f654:	4805      	ldr	r0, [pc, #20]	; (800f66c <fiprintf+0x20>)
 800f656:	f853 2b04 	ldr.w	r2, [r3], #4
 800f65a:	6800      	ldr	r0, [r0, #0]
 800f65c:	9301      	str	r3, [sp, #4]
 800f65e:	f7ff fe31 	bl	800f2c4 <_vfiprintf_r>
 800f662:	b002      	add	sp, #8
 800f664:	f85d eb04 	ldr.w	lr, [sp], #4
 800f668:	b003      	add	sp, #12
 800f66a:	4770      	bx	lr
 800f66c:	20000014 	.word	0x20000014

0800f670 <_fstat_r>:
 800f670:	b538      	push	{r3, r4, r5, lr}
 800f672:	4d07      	ldr	r5, [pc, #28]	; (800f690 <_fstat_r+0x20>)
 800f674:	2300      	movs	r3, #0
 800f676:	4604      	mov	r4, r0
 800f678:	4608      	mov	r0, r1
 800f67a:	4611      	mov	r1, r2
 800f67c:	602b      	str	r3, [r5, #0]
 800f67e:	f7f4 fd90 	bl	80041a2 <_fstat>
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	d102      	bne.n	800f68c <_fstat_r+0x1c>
 800f686:	682b      	ldr	r3, [r5, #0]
 800f688:	b103      	cbz	r3, 800f68c <_fstat_r+0x1c>
 800f68a:	6023      	str	r3, [r4, #0]
 800f68c:	bd38      	pop	{r3, r4, r5, pc}
 800f68e:	bf00      	nop
 800f690:	20005310 	.word	0x20005310

0800f694 <_isatty_r>:
 800f694:	b538      	push	{r3, r4, r5, lr}
 800f696:	4d06      	ldr	r5, [pc, #24]	; (800f6b0 <_isatty_r+0x1c>)
 800f698:	2300      	movs	r3, #0
 800f69a:	4604      	mov	r4, r0
 800f69c:	4608      	mov	r0, r1
 800f69e:	602b      	str	r3, [r5, #0]
 800f6a0:	f7f4 fd8f 	bl	80041c2 <_isatty>
 800f6a4:	1c43      	adds	r3, r0, #1
 800f6a6:	d102      	bne.n	800f6ae <_isatty_r+0x1a>
 800f6a8:	682b      	ldr	r3, [r5, #0]
 800f6aa:	b103      	cbz	r3, 800f6ae <_isatty_r+0x1a>
 800f6ac:	6023      	str	r3, [r4, #0]
 800f6ae:	bd38      	pop	{r3, r4, r5, pc}
 800f6b0:	20005310 	.word	0x20005310

0800f6b4 <_lseek_r>:
 800f6b4:	b538      	push	{r3, r4, r5, lr}
 800f6b6:	4d07      	ldr	r5, [pc, #28]	; (800f6d4 <_lseek_r+0x20>)
 800f6b8:	4604      	mov	r4, r0
 800f6ba:	4608      	mov	r0, r1
 800f6bc:	4611      	mov	r1, r2
 800f6be:	2200      	movs	r2, #0
 800f6c0:	602a      	str	r2, [r5, #0]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	f7f4 fd88 	bl	80041d8 <_lseek>
 800f6c8:	1c43      	adds	r3, r0, #1
 800f6ca:	d102      	bne.n	800f6d2 <_lseek_r+0x1e>
 800f6cc:	682b      	ldr	r3, [r5, #0]
 800f6ce:	b103      	cbz	r3, 800f6d2 <_lseek_r+0x1e>
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	bd38      	pop	{r3, r4, r5, pc}
 800f6d4:	20005310 	.word	0x20005310

0800f6d8 <__ascii_mbtowc>:
 800f6d8:	b082      	sub	sp, #8
 800f6da:	b901      	cbnz	r1, 800f6de <__ascii_mbtowc+0x6>
 800f6dc:	a901      	add	r1, sp, #4
 800f6de:	b142      	cbz	r2, 800f6f2 <__ascii_mbtowc+0x1a>
 800f6e0:	b14b      	cbz	r3, 800f6f6 <__ascii_mbtowc+0x1e>
 800f6e2:	7813      	ldrb	r3, [r2, #0]
 800f6e4:	600b      	str	r3, [r1, #0]
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	1e10      	subs	r0, r2, #0
 800f6ea:	bf18      	it	ne
 800f6ec:	2001      	movne	r0, #1
 800f6ee:	b002      	add	sp, #8
 800f6f0:	4770      	bx	lr
 800f6f2:	4610      	mov	r0, r2
 800f6f4:	e7fb      	b.n	800f6ee <__ascii_mbtowc+0x16>
 800f6f6:	f06f 0001 	mvn.w	r0, #1
 800f6fa:	e7f8      	b.n	800f6ee <__ascii_mbtowc+0x16>

0800f6fc <__malloc_lock>:
 800f6fc:	4801      	ldr	r0, [pc, #4]	; (800f704 <__malloc_lock+0x8>)
 800f6fe:	f7ff b910 	b.w	800e922 <__retarget_lock_acquire_recursive>
 800f702:	bf00      	nop
 800f704:	20005308 	.word	0x20005308

0800f708 <__malloc_unlock>:
 800f708:	4801      	ldr	r0, [pc, #4]	; (800f710 <__malloc_unlock+0x8>)
 800f70a:	f7ff b90b 	b.w	800e924 <__retarget_lock_release_recursive>
 800f70e:	bf00      	nop
 800f710:	20005308 	.word	0x20005308

0800f714 <_read_r>:
 800f714:	b538      	push	{r3, r4, r5, lr}
 800f716:	4d07      	ldr	r5, [pc, #28]	; (800f734 <_read_r+0x20>)
 800f718:	4604      	mov	r4, r0
 800f71a:	4608      	mov	r0, r1
 800f71c:	4611      	mov	r1, r2
 800f71e:	2200      	movs	r2, #0
 800f720:	602a      	str	r2, [r5, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	f7f4 fcf8 	bl	8004118 <_read>
 800f728:	1c43      	adds	r3, r0, #1
 800f72a:	d102      	bne.n	800f732 <_read_r+0x1e>
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	b103      	cbz	r3, 800f732 <_read_r+0x1e>
 800f730:	6023      	str	r3, [r4, #0]
 800f732:	bd38      	pop	{r3, r4, r5, pc}
 800f734:	20005310 	.word	0x20005310

0800f738 <__ascii_wctomb>:
 800f738:	b149      	cbz	r1, 800f74e <__ascii_wctomb+0x16>
 800f73a:	2aff      	cmp	r2, #255	; 0xff
 800f73c:	bf85      	ittet	hi
 800f73e:	238a      	movhi	r3, #138	; 0x8a
 800f740:	6003      	strhi	r3, [r0, #0]
 800f742:	700a      	strbls	r2, [r1, #0]
 800f744:	f04f 30ff 	movhi.w	r0, #4294967295
 800f748:	bf98      	it	ls
 800f74a:	2001      	movls	r0, #1
 800f74c:	4770      	bx	lr
 800f74e:	4608      	mov	r0, r1
 800f750:	4770      	bx	lr
	...

0800f754 <_init>:
 800f754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f756:	bf00      	nop
 800f758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f75a:	bc08      	pop	{r3}
 800f75c:	469e      	mov	lr, r3
 800f75e:	4770      	bx	lr

0800f760 <_fini>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	bf00      	nop
 800f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f766:	bc08      	pop	{r3}
 800f768:	469e      	mov	lr, r3
 800f76a:	4770      	bx	lr
