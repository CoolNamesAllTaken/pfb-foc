
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b140  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae0  0800b320  0800b320  0001b320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be00  0800be00  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be08  0800be08  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be08  0800be08  0001be08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be0c  0800be0c  0001be0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800be10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eac  200001e4  0800bff4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005090  0800bff4  00025090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026365  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004918  00000000  00000000  00046579  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b70  00000000  00000000  0004ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001968  00000000  00000000  0004ca08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000288f1  00000000  00000000  0004e370  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017e41  00000000  00000000  00076c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed451  00000000  00000000  0008eaa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017bef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008354  00000000  00000000  0017bf70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b308 	.word	0x0800b308

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800b308 	.word	0x0800b308

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <_ZN7EncoderC1Ev+0x2c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	0800bad4 	.word	0x0800bad4

08000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffdd 	bl	8000f98 <_ZN7EncoderC1Ev>
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	829a      	strh	r2, [r3, #20]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	619a      	str	r2, [r3, #24]
{

}
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800bac4 	.word	0x0800bac4

0800100c <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8f5 	bl	8001204 <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 800102a:	687c      	ldr	r4, [r7, #4]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f89f 	bl	8001170 <_ZN7AS5048A10ReadAngle_Ev>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	4620      	mov	r0, r4
 800103c:	f000 f9f6 	bl	800142c <_ZN7Encoder9set_angleEf>
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
	uint8_t par = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	2b0e      	cmp	r3, #14
 8001060:	d810      	bhi.n	8001084 <_ZN7AS5048A15CalcEvenParity_Et+0x3c>
		par ^= ((val >> shift) & 0x1);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	fa42 f303 	asr.w	r3, r2, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4053      	eors	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	3301      	adds	r3, #1
 8001080:	73bb      	strb	r3, [r7, #14]
 8001082:	e7eb      	b.n	800105c <_ZN7AS5048A15CalcEvenParity_Et+0x14>
	}
	return par;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
 800109e:	4613      	mov	r3, r2
 80010a0:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a8:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	039b      	lsls	r3, r3, #14
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffbf 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 80010ca:	4603      	mov	r3, r0
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	81fb      	strh	r3, [r7, #14]
	return pack;
 80010da:	89fb      	ldrh	r3, [r7, #14]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010f6:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffa3 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001102:	4603      	mov	r3, r0
 8001104:	03db      	lsls	r3, r3, #15
 8001106:	b21a      	sxth	r2, r3
 8001108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	81fb      	strh	r3, [r7, #14]
	return pack;
 8001112:	89fb      	ldrh	r3, [r7, #14]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 8001132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001136:	e016      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff83 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	13db      	asrs	r3, r3, #15
 800114a:	429a      	cmp	r2, r3
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	e003      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001164:	b29b      	uxth	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 8001178:	2201      	movs	r2, #1
 800117a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff87 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001184:	4603      	mov	r3, r0
 8001186:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f85d 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffa5 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800119a:	4603      	mov	r3, r0
 800119c:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f87c 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffb5 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
	return raw_angle_val * 360.0 / DATA_MAX;
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9db 	bl	8000574 <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <_ZN7AS5048A10ReadAngle_Ev+0x90>)
 80011c4:	f7ff fa40 	bl	8000648 <__aeabi_dmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	a309      	add	r3, pc, #36	; (adr r3, 80011f8 <_ZN7AS5048A10ReadAngle_Ev+0x88>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fb61 	bl	800089c <__aeabi_ddiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4618      	mov	r0, r3
 80011e0:	4621      	mov	r1, r4
 80011e2:	f7ff fd09 	bl	8000bf8 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40cfff80 	.word	0x40cfff80
 8001200:	40768000 	.word	0x40768000

08001204 <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff3e 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f814 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff5c 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800122c:	4603      	mov	r3, r0
 800122e:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f833 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 8001242:	897b      	ldrh	r3, [r7, #10]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	121b      	asrs	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6918      	ldr	r0, [r3, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8a9b      	ldrh	r3, [r3, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	f001 fc03 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68d8      	ldr	r0, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2202      	movs	r2, #2
 8001284:	f002 fe7e 	bl	8003f84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6918      	ldr	r0, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8a9b      	ldrh	r3, [r3, #20]
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	f001 fbf2 	bl	8002a7c <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	121b      	asrs	r3, r3, #8
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6918      	ldr	r0, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8a9b      	ldrh	r3, [r3, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	f001 fbd9 	bl	8002a7c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68d8      	ldr	r0, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	f002 ffb7 	bl	8004250 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6918      	ldr	r0, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a9b      	ldrh	r3, [r3, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f001 fbc5 	bl	8002a7c <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 80012f6:	7a3b      	ldrb	r3, [r7, #8]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001300:	4313      	orrs	r3, r2
 8001302:	b21b      	sxth	r3, r3
 8001304:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 8001306:	7a7b      	ldrb	r3, [r7, #9]
 8001308:	b29a      	uxth	r2, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4313      	orrs	r3, r2
 800130e:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001310:	89fb      	ldrh	r3, [r7, #14]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0 * floor(raw_angle / 360.0);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff f935 	bl	8000598 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff f930 	bl	8000598 <__aeabi_f2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b17 	vmov	d7, r2, r3
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	f007 fb49 	bl	80089e8 <floor>
 8001356:	ec51 0b10 	vmov	r0, r1, d0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001360:	f7ff f972 	bl	8000648 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ffb4 	bl	80002d8 <__aeabi_dsub>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	f7ff fc3e 	bl	8000bf8 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]
	if (wrapped_angle < 0) {
 8001380:	edd7 7a03 	vldr	s15, [r7, #12]
 8001384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d507      	bpl.n	800139e <_ZN7Encoder10WrapAngle_Ef+0x82>
		wrapped_angle += 360.0;
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013b4 <_ZN7Encoder10WrapAngle_Ef+0x98>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ee07 3a90 	vmov	s15, r3
}
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40768000 	.word	0x40768000
 80013b4:	43b40000 	.word	0x43b40000

080013b8 <_ZN7Encoder14set_zero_angleEv>:

/**
 * @brief Sets the current absolute encoder angle (degrees) as the zero position.
 */
void Encoder::set_zero_angle() {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	zero_angle_ = angle_;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	605a      	str	r2, [r3, #4]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 80013e0:	ed97 0a00 	vldr	s0, [r7]
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff99 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 80013ea:	eef0 7a40 	vmov.f32	s15, s0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	ed93 7a02 	vldr	s14, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff7f 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 800141e:	eef0 7a40 	vmov.f32	s15, s0
//		return angle_ - zero_angle_;
//	} else {
//		return 360.0 - zero_angle_ - angle_;
//	}

}
 8001422:	eeb0 0a67 	vmov.f32	s0, s15
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	ed87 0a00 	vstr	s0, [r7]
//	if (new_angle < 0) {
//		new_angle += 360;
//	} else if (new_angle > 360) {
//		new_angle -= 360;
//	}
	angle_ = WrapAngle_(new_angle);
 8001438:	ed97 0a00 	vldr	s0, [r7]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff6d 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 8001442:	eef0 7a40 	vmov.f32	s15, s0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

#ifdef RUN_TESTS
	RunAllTests();
 8001458:	f000 f82a 	bl	80014b0 <_Z11RunAllTestsv>
#endif

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <main_run+0x20>)
 800145e:	2100      	movs	r1, #0
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <main_run+0x24>)
 8001462:	f004 fcbb 	bl	8005ddc <osThreadNew>
 8001466:	4602      	mov	r2, r0
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <main_run+0x28>)
 800146a:	601a      	str	r2, [r3, #0]

	return 1;
 800146c:	2301      	movs	r3, #1
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	0800badc 	.word	0x0800badc
 8001478:	08001481 	.word	0x08001481
 800147c:	20000200 	.word	0x20000200

08001480 <_Z10startTask1Pv>:

void startTask1(void * argument) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
 8001488:	f004 fc76 	bl	8005d78 <osKernelGetTickCount>
 800148c:	60f8      	str	r0, [r7, #12]
		uint32_t osTickFreq = osKernelGetTickFreq();
 800148e:	f004 fc9b 	bl	8005dc8 <osKernelGetTickFreq>
 8001492:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <_Z10startTask1Pv+0x2c>)
 8001498:	f001 fb09 	bl	8002aae <HAL_GPIO_TogglePin>
		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	085a      	lsrs	r2, r3, #1
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 fd6d 	bl	8005f84 <osDelayUntil>
	}
 80014aa:	e7ed      	b.n	8001488 <_Z10startTask1Pv+0x8>
 80014ac:	40020400 	.word	0x40020400

080014b0 <_Z11RunAllTestsv>:
}

#ifdef RUN_TESTS
void RunAllTests() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	TestEncoderAll();
 80014b4:	f000 faba 	bl	8001a2c <_Z14TestEncoderAllv>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_Z17TestEncoderCreatev>:
#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08c      	sub	sp, #48	; 0x30
 80014c0:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 80014c2:	4817      	ldr	r0, [pc, #92]	; (8001520 <_Z17TestEncoderCreatev+0x64>)
 80014c4:	f008 f82a 	bl	800951c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80014d4:	8bfa      	ldrh	r2, [r7, #30]
 80014d6:	4638      	mov	r0, r7
 80014d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	6a3a      	ldr	r2, [r7, #32]
 80014e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e4:	f7ff fd70 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 80014e8:	463b      	mov	r3, r7
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff86 	bl	80013fc <_ZN7Encoder9get_angleEv>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
 80014f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f8:	ee17 3a90 	vmov	r3, s15
 80014fc:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 80014fe:	8bbb      	ldrh	r3, [r7, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <_Z17TestEncoderCreatev+0x58>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8001504:	8bbb      	ldrh	r3, [r7, #28]
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <_Z17TestEncoderCreatev+0x68>)
 800150c:	f007 ff92 	bl	8009434 <iprintf>
		return false;
 8001510:	2300      	movs	r3, #0
 8001512:	e000      	b.n	8001516 <_Z17TestEncoderCreatev+0x5a>
	}

	return true;
 8001514:	2301      	movs	r3, #1
}
 8001516:	4618      	mov	r0, r3
 8001518:	3728      	adds	r7, #40	; 0x28
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	0800b328 	.word	0x0800b328
 8001524:	0800b348 	.word	0x0800b348

08001528 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8001528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152a:	b08f      	sub	sp, #60	; 0x3c
 800152c:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 800152e:	4839      	ldr	r0, [pc, #228]	; (8001614 <_Z15TestEncoderZerov+0xec>)
 8001530:	f007 fff4 	bl	800951c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001534:	2300      	movs	r3, #0
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001540:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001542:	4638      	mov	r0, r7
 8001544:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	4613      	mov	r3, r2
 800154c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001550:	f7ff fd3a 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 8001554:	4830      	ldr	r0, [pc, #192]	; (8001618 <_Z15TestEncoderZerov+0xf0>)
 8001556:	f007 ffe1 	bl	800951c <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 800155a:	463b      	mov	r3, r7
 800155c:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800161c <_Z15TestEncoderZerov+0xf4>
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff37 	bl	80013d4 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 8001566:	463b      	mov	r3, r7
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff47 	bl	80013fc <_ZN7Encoder9get_angleEv>
 800156e:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <_Z15TestEncoderZerov+0xf8>)
 8001574:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001576:	ed97 7a08 	vldr	s14, [r7, #32]
 800157a:	edd7 7a07 	vldr	s15, [r7, #28]
 800157e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d012      	beq.n	80015ae <_Z15TestEncoderZerov+0x86>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001588:	69f8      	ldr	r0, [r7, #28]
 800158a:	f7ff f805 	bl	8000598 <__aeabi_f2d>
 800158e:	4605      	mov	r5, r0
 8001590:	460e      	mov	r6, r1
 8001592:	6a38      	ldr	r0, [r7, #32]
 8001594:	f7ff f800 	bl	8000598 <__aeabi_f2d>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	e9cd 3400 	strd	r3, r4, [sp]
 80015a0:	462a      	mov	r2, r5
 80015a2:	4633      	mov	r3, r6
 80015a4:	481f      	ldr	r0, [pc, #124]	; (8001624 <_Z15TestEncoderZerov+0xfc>)
 80015a6:	f007 ff45 	bl	8009434 <iprintf>
		return false;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e02e      	b.n	800160c <_Z15TestEncoderZerov+0xe4>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 80015ae:	481e      	ldr	r0, [pc, #120]	; (8001628 <_Z15TestEncoderZerov+0x100>)
 80015b0:	f007 ffb4 	bl	800951c <puts>
	enc.set_zero_angle(3600);
 80015b4:	463b      	mov	r3, r7
 80015b6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800162c <_Z15TestEncoderZerov+0x104>
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ff0a 	bl	80013d4 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 80015c0:	463b      	mov	r3, r7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff1a 	bl	80013fc <_ZN7Encoder9get_angleEv>
 80015c8:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 80015d2:	ed97 7a08 	vldr	s14, [r7, #32]
 80015d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80015da:	eeb4 7a67 	vcmp.f32	s14, s15
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	d012      	beq.n	800160a <_Z15TestEncoderZerov+0xe2>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 80015e4:	69f8      	ldr	r0, [r7, #28]
 80015e6:	f7fe ffd7 	bl	8000598 <__aeabi_f2d>
 80015ea:	4605      	mov	r5, r0
 80015ec:	460e      	mov	r6, r1
 80015ee:	6a38      	ldr	r0, [r7, #32]
 80015f0:	f7fe ffd2 	bl	8000598 <__aeabi_f2d>
 80015f4:	4603      	mov	r3, r0
 80015f6:	460c      	mov	r4, r1
 80015f8:	e9cd 3400 	strd	r3, r4, [sp]
 80015fc:	462a      	mov	r2, r5
 80015fe:	4633      	mov	r3, r6
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <_Z15TestEncoderZerov+0xfc>)
 8001602:	f007 ff17 	bl	8009434 <iprintf>
		return false;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <_Z15TestEncoderZerov+0xe4>
	}

	return true;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3734      	adds	r7, #52	; 0x34
 8001610:	46bd      	mov	sp, r7
 8001612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001614:	0800b3a4 	.word	0x0800b3a4
 8001618:	0800b3c4 	.word	0x0800b3c4
 800161c:	425c0000 	.word	0x425c0000
 8001620:	43988000 	.word	0x43988000
 8001624:	0800b3f4 	.word	0x0800b3f4
 8001628:	0800b438 	.word	0x0800b438
 800162c:	45610000 	.word	0x45610000

08001630 <_Z17TestAS5048AParityv>:
	}

	return true;
}

bool TestAS5048AParity() {
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 8001636:	483d      	ldr	r0, [pc, #244]	; (800172c <_Z17TestAS5048AParityv+0xfc>)
 8001638:	f007 ff70 	bl	800951c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 800163c:	2300      	movs	r3, #0
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001648:	8bfa      	ldrh	r2, [r7, #30]
 800164a:	4638      	mov	r0, r7
 800164c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001658:	f7ff fcb6 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 800165c:	4834      	ldr	r0, [pc, #208]	; (8001730 <_Z17TestAS5048AParityv+0x100>)
 800165e:	f007 ff5d 	bl	800951c <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 8001662:	463b      	mov	r3, r7
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fcee 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 800166c:	4603      	mov	r3, r0
 800166e:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001674:	7f7a      	ldrb	r2, [r7, #29]
 8001676:	7f3b      	ldrb	r3, [r7, #28]
 8001678:	429a      	cmp	r2, r3
 800167a:	d007      	beq.n	800168c <_Z17TestAS5048AParityv+0x5c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 800167c:	7f3b      	ldrb	r3, [r7, #28]
 800167e:	7f7a      	ldrb	r2, [r7, #29]
 8001680:	4619      	mov	r1, r3
 8001682:	482c      	ldr	r0, [pc, #176]	; (8001734 <_Z17TestAS5048AParityv+0x104>)
 8001684:	f007 fed6 	bl	8009434 <iprintf>
		return false;
 8001688:	2300      	movs	r3, #0
 800168a:	e04a      	b.n	8001722 <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 800168c:	482a      	ldr	r0, [pc, #168]	; (8001738 <_Z17TestAS5048AParityv+0x108>)
 800168e:	f007 ff45 	bl	800951c <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8001692:	463b      	mov	r3, r7
 8001694:	2101      	movs	r1, #1
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fcd6 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 800169c:	4603      	mov	r3, r0
 800169e:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 80016a4:	7f7a      	ldrb	r2, [r7, #29]
 80016a6:	7f3b      	ldrb	r3, [r7, #28]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d007      	beq.n	80016bc <_Z17TestAS5048AParityv+0x8c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 80016ac:	7f3b      	ldrb	r3, [r7, #28]
 80016ae:	7f7a      	ldrb	r2, [r7, #29]
 80016b0:	4619      	mov	r1, r3
 80016b2:	4820      	ldr	r0, [pc, #128]	; (8001734 <_Z17TestAS5048AParityv+0x104>)
 80016b4:	f007 febe 	bl	8009434 <iprintf>
		return false;
 80016b8:	2300      	movs	r3, #0
 80016ba:	e032      	b.n	8001722 <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <_Z17TestAS5048AParityv+0x10c>)
 80016be:	f007 ff2d 	bl	800951c <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 80016c2:	463b      	mov	r3, r7
 80016c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fcbd 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 80016ce:	4603      	mov	r3, r0
 80016d0:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 80016d6:	7f7a      	ldrb	r2, [r7, #29]
 80016d8:	7f3b      	ldrb	r3, [r7, #28]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d007      	beq.n	80016ee <_Z17TestAS5048AParityv+0xbe>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 80016de:	7f3b      	ldrb	r3, [r7, #28]
 80016e0:	7f7a      	ldrb	r2, [r7, #29]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4813      	ldr	r0, [pc, #76]	; (8001734 <_Z17TestAS5048AParityv+0x104>)
 80016e6:	f007 fea5 	bl	8009434 <iprintf>
		return false;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e019      	b.n	8001722 <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 80016ee:	4814      	ldr	r0, [pc, #80]	; (8001740 <_Z17TestAS5048AParityv+0x110>)
 80016f0:	f007 ff14 	bl	800951c <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 80016f4:	463b      	mov	r3, r7
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fca4 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001700:	4603      	mov	r3, r0
 8001702:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001708:	7f7a      	ldrb	r2, [r7, #29]
 800170a:	7f3b      	ldrb	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	d007      	beq.n	8001720 <_Z17TestAS5048AParityv+0xf0>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001710:	7f3b      	ldrb	r3, [r7, #28]
 8001712:	7f7a      	ldrb	r2, [r7, #29]
 8001714:	4619      	mov	r1, r3
 8001716:	4807      	ldr	r0, [pc, #28]	; (8001734 <_Z17TestAS5048AParityv+0x104>)
 8001718:	f007 fe8c 	bl	8009434 <iprintf>
		return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <_Z17TestAS5048AParityv+0xf2>
	}

	return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3728      	adds	r7, #40	; 0x28
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	0800b4e4 	.word	0x0800b4e4
 8001730:	0800b514 	.word	0x0800b514
 8001734:	0800b53c 	.word	0x0800b53c
 8001738:	0800b584 	.word	0x0800b584
 800173c:	0800b5ac 	.word	0x0800b5ac
 8001740:	0800b5dc 	.word	0x0800b5dc

08001744 <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 8001744:	b580      	push	{r7, lr}
 8001746:	b08e      	sub	sp, #56	; 0x38
 8001748:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 800174a:	486e      	ldr	r0, [pc, #440]	; (8001904 <_Z18TestAS5048APacketsv+0x1c0>)
 800174c:	f007 fee6 	bl	800951c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 800175c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800175e:	4638      	mov	r0, r7
 8001760:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4613      	mov	r3, r2
 8001768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800176a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800176c:	f7ff fc2c 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 8001770:	4865      	ldr	r0, [pc, #404]	; (8001908 <_Z18TestAS5048APacketsv+0x1c4>)
 8001772:	f007 fed3 	bl	800951c <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 8001776:	463b      	mov	r3, r7
 8001778:	2201      	movs	r2, #1
 800177a:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fc87 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001784:	4603      	mov	r3, r0
 8001786:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 8001788:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 800178c:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 800178e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001790:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001792:	429a      	cmp	r2, r3
 8001794:	d007      	beq.n	80017a6 <_Z18TestAS5048APacketsv+0x62>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	485b      	ldr	r0, [pc, #364]	; (800190c <_Z18TestAS5048APacketsv+0x1c8>)
 800179e:	f007 fe49 	bl	8009434 <iprintf>
		return false;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e0a9      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 80017a6:	485a      	ldr	r0, [pc, #360]	; (8001910 <_Z18TestAS5048APacketsv+0x1cc>)
 80017a8:	f007 feb8 	bl	800951c <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 80017ac:	463b      	mov	r3, r7
 80017ae:	2200      	movs	r2, #0
 80017b0:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fc6c 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 80017ba:	4603      	mov	r3, r0
 80017bc:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 80017be:	f643 63ef 	movw	r3, #16111	; 0x3eef
 80017c2:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 80017c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d007      	beq.n	80017dc <_Z18TestAS5048APacketsv+0x98>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 80017cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	484e      	ldr	r0, [pc, #312]	; (800190c <_Z18TestAS5048APacketsv+0x1c8>)
 80017d4:	f007 fe2e 	bl	8009434 <iprintf>
		return false;
 80017d8:	2300      	movs	r3, #0
 80017da:	e08e      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 80017dc:	484d      	ldr	r0, [pc, #308]	; (8001914 <_Z18TestAS5048APacketsv+0x1d0>)
 80017de:	f007 fe9d 	bl	800951c <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 80017e2:	463b      	mov	r3, r7
 80017e4:	f64d 61ad 	movw	r1, #57005	; 0xdead
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc7b 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 80017ee:	4603      	mov	r3, r0
 80017f0:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 80017f2:	f649 63ad 	movw	r3, #40621	; 0x9ead
 80017f6:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 80017f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d007      	beq.n	8001810 <_Z18TestAS5048APacketsv+0xcc>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001800:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001802:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4844      	ldr	r0, [pc, #272]	; (8001918 <_Z18TestAS5048APacketsv+0x1d4>)
 8001808:	f007 fe14 	bl	8009434 <iprintf>
		return false;
 800180c:	2300      	movs	r3, #0
 800180e:	e074      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8001810:	4842      	ldr	r0, [pc, #264]	; (800191c <_Z18TestAS5048APacketsv+0x1d8>)
 8001812:	f007 fe83 	bl	800951c <puts>
	uint16_t received_pack = 0b1001111010101101;
 8001816:	f649 63ad 	movw	r3, #40621	; 0x9ead
 800181a:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 800181c:	8c3a      	ldrh	r2, [r7, #32]
 800181e:	463b      	mov	r3, r7
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fc7a 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001828:	4603      	mov	r3, r0
 800182a:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 800182c:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001830:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8001832:	8bfa      	ldrh	r2, [r7, #30]
 8001834:	8bbb      	ldrh	r3, [r7, #28]
 8001836:	429a      	cmp	r2, r3
 8001838:	d007      	beq.n	800184a <_Z18TestAS5048APacketsv+0x106>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 800183a:	8bbb      	ldrh	r3, [r7, #28]
 800183c:	8bfa      	ldrh	r2, [r7, #30]
 800183e:	4619      	mov	r1, r3
 8001840:	4837      	ldr	r0, [pc, #220]	; (8001920 <_Z18TestAS5048APacketsv+0x1dc>)
 8001842:	f007 fdf7 	bl	8009434 <iprintf>
		return false;
 8001846:	2300      	movs	r3, #0
 8001848:	e057      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 800184a:	4836      	ldr	r0, [pc, #216]	; (8001924 <_Z18TestAS5048APacketsv+0x1e0>)
 800184c:	f007 fe66 	bl	800951c <puts>
	received_pack = 0b0001111010101101;
 8001850:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001854:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8001856:	8c3a      	ldrh	r2, [r7, #32]
 8001858:	463b      	mov	r3, r7
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc5d 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001862:	4603      	mov	r3, r0
 8001864:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8001866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186a:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 800186c:	8bfa      	ldrh	r2, [r7, #30]
 800186e:	8bbb      	ldrh	r3, [r7, #28]
 8001870:	429a      	cmp	r2, r3
 8001872:	d007      	beq.n	8001884 <_Z18TestAS5048APacketsv+0x140>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8001874:	8bbb      	ldrh	r3, [r7, #28]
 8001876:	8bfa      	ldrh	r2, [r7, #30]
 8001878:	4619      	mov	r1, r3
 800187a:	4829      	ldr	r0, [pc, #164]	; (8001920 <_Z18TestAS5048APacketsv+0x1dc>)
 800187c:	f007 fdda 	bl	8009434 <iprintf>
		return false;
 8001880:	2300      	movs	r3, #0
 8001882:	e03a      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 8001884:	4828      	ldr	r0, [pc, #160]	; (8001928 <_Z18TestAS5048APacketsv+0x1e4>)
 8001886:	f007 fe49 	bl	800951c <puts>
	received_pack = 0b0101111010101101;
 800188a:	f645 63ad 	movw	r3, #24237	; 0x5ead
 800188e:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8001890:	8c3a      	ldrh	r2, [r7, #32]
 8001892:	463b      	mov	r3, r7
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc40 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 800189c:	4603      	mov	r3, r0
 800189e:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80018a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a4:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80018a6:	8bfa      	ldrh	r2, [r7, #30]
 80018a8:	8bbb      	ldrh	r3, [r7, #28]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d007      	beq.n	80018be <_Z18TestAS5048APacketsv+0x17a>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80018ae:	8bbb      	ldrh	r3, [r7, #28]
 80018b0:	8bfa      	ldrh	r2, [r7, #30]
 80018b2:	4619      	mov	r1, r3
 80018b4:	481a      	ldr	r0, [pc, #104]	; (8001920 <_Z18TestAS5048APacketsv+0x1dc>)
 80018b6:	f007 fdbd 	bl	8009434 <iprintf>
		return false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e01d      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 80018be:	481b      	ldr	r0, [pc, #108]	; (800192c <_Z18TestAS5048APacketsv+0x1e8>)
 80018c0:	f007 fe2c 	bl	800951c <puts>
	received_pack = 0b1101111010101101;
 80018c4:	f64d 63ad 	movw	r3, #57005	; 0xdead
 80018c8:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 80018ca:	8c3a      	ldrh	r2, [r7, #32]
 80018cc:	463b      	mov	r3, r7
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fc23 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 80018d6:	4603      	mov	r3, r0
 80018d8:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018de:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80018e0:	8bfa      	ldrh	r2, [r7, #30]
 80018e2:	8bbb      	ldrh	r3, [r7, #28]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d007      	beq.n	80018f8 <_Z18TestAS5048APacketsv+0x1b4>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80018e8:	8bbb      	ldrh	r3, [r7, #28]
 80018ea:	8bfa      	ldrh	r2, [r7, #30]
 80018ec:	4619      	mov	r1, r3
 80018ee:	480c      	ldr	r0, [pc, #48]	; (8001920 <_Z18TestAS5048APacketsv+0x1dc>)
 80018f0:	f007 fda0 	bl	8009434 <iprintf>
		return false;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <_Z18TestAS5048APacketsv+0x1b6>
	}

	return true;
 80018f8:	2301      	movs	r3, #1
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	0800b610 	.word	0x0800b610
 8001908:	0800b644 	.word	0x0800b644
 800190c:	0800b678 	.word	0x0800b678
 8001910:	0800b6c8 	.word	0x0800b6c8
 8001914:	0800b6fc 	.word	0x0800b6fc
 8001918:	0800b728 	.word	0x0800b728
 800191c:	0800b774 	.word	0x0800b774
 8001920:	0800b7ac 	.word	0x0800b7ac
 8001924:	0800b7f0 	.word	0x0800b7f0
 8001928:	0800b82c 	.word	0x0800b82c
 800192c:	0800b864 	.word	0x0800b864

08001930 <_Z14TestEncoderSPIv>:

#ifdef TEST_SPI
bool TestEncoderSPI() {
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b08d      	sub	sp, #52	; 0x34
 8001934:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Interface. Press button to zero encoder!\r\n");
 8001936:	4834      	ldr	r0, [pc, #208]	; (8001a08 <_Z14TestEncoderSPIv+0xd8>)
 8001938:	f007 fdf0 	bl	800951c <puts>
	AS5048A enc(&hspi1, SPI1_CS_GPIO_Port, SPI1_CS_Pin);
 800193c:	1d38      	adds	r0, r7, #4
 800193e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2310      	movs	r3, #16
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <_Z14TestEncoderSPIv+0xdc>)
 8001948:	4931      	ldr	r1, [pc, #196]	; (8001a10 <_Z14TestEncoderSPIv+0xe0>)
 800194a:	f7ff fb3d 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>
	enc.Init();
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb5b 	bl	800100c <_ZN7AS5048A4InitEv>
	float enc_pos;
	do {
		enc.Update();
 8001956:	1d3b      	adds	r3, r7, #4
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fb62 	bl	8001022 <_ZN7AS5048A6UpdateEv>
		enc_pos = enc.get_angle();
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fd4b 	bl	80013fc <_ZN7Encoder9get_angleEv>
 8001966:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		printf("Encoder position: %4.2f\r\n", enc.get_angle());
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fd45 	bl	80013fc <_ZN7Encoder9get_angleEv>
 8001972:	ee10 3a10 	vmov	r3, s0
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fe0e 	bl	8000598 <__aeabi_f2d>
 800197c:	4603      	mov	r3, r0
 800197e:	460c      	mov	r4, r1
 8001980:	461a      	mov	r2, r3
 8001982:	4623      	mov	r3, r4
 8001984:	4823      	ldr	r0, [pc, #140]	; (8001a14 <_Z14TestEncoderSPIv+0xe4>)
 8001986:	f007 fd55 	bl	8009434 <iprintf>
		if (HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET) {
 800198a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800198e:	4822      	ldr	r0, [pc, #136]	; (8001a18 <_Z14TestEncoderSPIv+0xe8>)
 8001990:	f001 f85c 	bl	8002a4c <HAL_GPIO_ReadPin>
 8001994:	4603      	mov	r3, r0
 8001996:	2b01      	cmp	r3, #1
 8001998:	bf0c      	ite	eq
 800199a:	2301      	moveq	r3, #1
 800199c:	2300      	movne	r3, #0
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <_Z14TestEncoderSPIv+0x7c>
			// zero encoder on button push
			enc.set_zero_angle();
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fd06 	bl	80013b8 <_ZN7Encoder14set_zero_angleEv>
		}
	} while(enc_pos != 0xFFFF);
 80019ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001a1c <_Z14TestEncoderSPIv+0xec>
 80019b4:	eef4 7a47 	vcmp.f32	s15, s14
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d000      	beq.n	80019c0 <_Z14TestEncoderSPIv+0x90>
	do {
 80019be:	e7ca      	b.n	8001956 <_Z14TestEncoderSPIv+0x26>

	uint16_t error_reg_content = enc.ClearErrorFlag_();
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fc1e 	bl	8001204 <_ZN7AS5048A15ClearErrorFlag_Ev>
 80019c8:	4603      	mov	r3, r0
 80019ca:	847b      	strh	r3, [r7, #34]	; 0x22
	if (error_reg_content & 0b1) {
 80019cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <_Z14TestEncoderSPIv+0xac>
		T_FAIL_PRINT("Framing Error.\r\n");
 80019d6:	4812      	ldr	r0, [pc, #72]	; (8001a20 <_Z14TestEncoderSPIv+0xf0>)
 80019d8:	f007 fda0 	bl	800951c <puts>
	}
	if (error_reg_content & 0b10) {
 80019dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <_Z14TestEncoderSPIv+0xbc>
		T_FAIL_PRINT("Command Invalid.\r\n");
 80019e6:	480f      	ldr	r0, [pc, #60]	; (8001a24 <_Z14TestEncoderSPIv+0xf4>)
 80019e8:	f007 fd98 	bl	800951c <puts>
	}
	if (error_reg_content & 0b100) {
 80019ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <_Z14TestEncoderSPIv+0xcc>
		T_FAIL_PRINT("Parity Error.\r\n");
 80019f6:	480c      	ldr	r0, [pc, #48]	; (8001a28 <_Z14TestEncoderSPIv+0xf8>)
 80019f8:	f007 fd90 	bl	800951c <puts>
	}


	return false;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	372c      	adds	r7, #44	; 0x2c
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	0800b8a8 	.word	0x0800b8a8
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	20004fa0 	.word	0x20004fa0
 8001a14:	0800b8f4 	.word	0x0800b8f4
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	477fff00 	.word	0x477fff00
 8001a20:	0800b910 	.word	0x0800b910
 8001a24:	0800b93c 	.word	0x0800b93c
 8001a28:	0800b968 	.word	0x0800b968

08001a2c <_Z14TestEncoderAllv>:
#endif

void TestEncoderAll() {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 8001a32:	2301      	movs	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 8001a36:	4928      	ldr	r1, [pc, #160]	; (8001ad8 <_Z14TestEncoderAllv+0xac>)
 8001a38:	4828      	ldr	r0, [pc, #160]	; (8001adc <_Z14TestEncoderAllv+0xb0>)
 8001a3a:	f007 fcfb 	bl	8009434 <iprintf>
	enc_passed &= TestEncoderCreate();
 8001a3e:	f7ff fd3d 	bl	80014bc <_Z17TestEncoderCreatev>
 8001a42:	4603      	mov	r3, r0
 8001a44:	461a      	mov	r2, r3
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf14      	ite	ne
 8001a4e:	2301      	movne	r3, #1
 8001a50:	2300      	moveq	r3, #0
 8001a52:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 8001a54:	f7ff fd68 	bl	8001528 <_Z15TestEncoderZerov>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <_Z14TestEncoderAllv+0x4c>
		PASS_PRINT("Encoder Class\r\n");
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <_Z14TestEncoderAllv+0xb4>)
 8001a72:	f007 fd53 	bl	800951c <puts>
 8001a76:	e002      	b.n	8001a7e <_Z14TestEncoderAllv+0x52>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 8001a78:	481a      	ldr	r0, [pc, #104]	; (8001ae4 <_Z14TestEncoderAllv+0xb8>)
 8001a7a:	f007 fd4f 	bl	800951c <puts>
	}

	L_PRINT("Test AS5048A Class");
 8001a7e:	491a      	ldr	r1, [pc, #104]	; (8001ae8 <_Z14TestEncoderAllv+0xbc>)
 8001a80:	4816      	ldr	r0, [pc, #88]	; (8001adc <_Z14TestEncoderAllv+0xb0>)
 8001a82:	f007 fcd7 	bl	8009434 <iprintf>
	bool as5048a_passed = true;
 8001a86:	2301      	movs	r3, #1
 8001a88:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 8001a8a:	f7ff fdd1 	bl	8001630 <_Z17TestAS5048AParityv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bf14      	ite	ne
 8001a9a:	2301      	movne	r3, #1
 8001a9c:	2300      	moveq	r3, #0
 8001a9e:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 8001aa0:	f7ff fe50 	bl	8001744 <_Z18TestAS5048APacketsv>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	bf14      	ite	ne
 8001ab0:	2301      	movne	r3, #1
 8001ab2:	2300      	moveq	r3, #0
 8001ab4:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8001ab6:	79bb      	ldrb	r3, [r7, #6]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <_Z14TestEncoderAllv+0x98>
		PASS_PRINT("AS5048A Class\r\n");
 8001abc:	480b      	ldr	r0, [pc, #44]	; (8001aec <_Z14TestEncoderAllv+0xc0>)
 8001abe:	f007 fd2d 	bl	800951c <puts>
 8001ac2:	e002      	b.n	8001aca <_Z14TestEncoderAllv+0x9e>
	} else {
		FAIL_PRINT("AS5048A Class\r\n");
 8001ac4:	480a      	ldr	r0, [pc, #40]	; (8001af0 <_Z14TestEncoderAllv+0xc4>)
 8001ac6:	f007 fd29 	bl	800951c <puts>
	}

#ifdef TEST_SPI
	L_PRINT("Test AS5048A SPI Interface. Will not exit.");
 8001aca:	490a      	ldr	r1, [pc, #40]	; (8001af4 <_Z14TestEncoderAllv+0xc8>)
 8001acc:	4803      	ldr	r0, [pc, #12]	; (8001adc <_Z14TestEncoderAllv+0xb0>)
 8001ace:	f007 fcb1 	bl	8009434 <iprintf>
	while(true) {
		TestEncoderSPI();
 8001ad2:	f7ff ff2d 	bl	8001930 <_Z14TestEncoderSPIv>
 8001ad6:	e7fc      	b.n	8001ad2 <_Z14TestEncoderAllv+0xa6>
 8001ad8:	0800b990 	.word	0x0800b990
 8001adc:	0800b9a4 	.word	0x0800b9a4
 8001ae0:	0800b9b8 	.word	0x0800b9b8
 8001ae4:	0800b9e0 	.word	0x0800b9e0
 8001ae8:	0800ba08 	.word	0x0800ba08
 8001aec:	0800ba1c 	.word	0x0800ba1c
 8001af0:	0800ba44 	.word	0x0800ba44
 8001af4:	0800ba6c 	.word	0x0800ba6c

08001af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dbprint_uart = &huart3;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <main+0x48>)
 8001afe:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <main+0x4c>)
 8001b00:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b02:	f000 fcd8 	bl	80024b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b06:	f000 f827 	bl	8001b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0a:	f000 f957 	bl	8001dbc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b0e:	f000 f8f7 	bl	8001d00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b12:	f000 f925 	bl	8001d60 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8001b16:	f000 f8b5 	bl	8001c84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	480a      	ldr	r0, [pc, #40]	; (8001b48 <main+0x50>)
 8001b20:	f000 ffac 	bl	8002a7c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b24:	f004 f8be 	bl	8005ca4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b28:	4a08      	ldr	r2, [pc, #32]	; (8001b4c <main+0x54>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <main+0x58>)
 8001b2e:	f004 f955 	bl	8005ddc <osThreadNew>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <main+0x5c>)
 8001b36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b38:	f004 f8e8 	bl	8005d0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <main+0x44>
 8001b3e:	bf00      	nop
 8001b40:	20005004 	.word	0x20005004
 8001b44:	20004b1c 	.word	0x20004b1c
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	0800bb00 	.word	0x0800bb00
 8001b50:	08001f55 	.word	0x08001f55
 8001b54:	20004b18 	.word	0x20004b18

08001b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b0b4      	sub	sp, #208	; 0xd0
 8001b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b62:	2230      	movs	r2, #48	; 0x30
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 ffff 	bl	8008b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	2280      	movs	r2, #128	; 0x80
 8001b82:	2100      	movs	r1, #0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f006 fff0 	bl	8008b6a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b8a:	f001 f8f3 	bl	8002d74 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <SystemClock_Config+0x120>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a39      	ldr	r2, [pc, #228]	; (8001c78 <SystemClock_Config+0x120>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b37      	ldr	r3, [pc, #220]	; (8001c78 <SystemClock_Config+0x120>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba6:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <SystemClock_Config+0x124>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a34      	ldr	r2, [pc, #208]	; (8001c7c <SystemClock_Config+0x124>)
 8001bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <SystemClock_Config+0x124>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bc4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001be0:	23d8      	movs	r3, #216	; 0xd8
 8001be2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001bec:	2309      	movs	r3, #9
 8001bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f001 f91c 	bl	8002e34 <HAL_RCC_OscConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c02:	f000 f9cb 	bl	8001f9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c06:	f001 f8c5 	bl	8002d94 <HAL_PWREx_EnableOverDrive>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001c10:	f000 f9c4 	bl	8001f9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c14:	230f      	movs	r3, #15
 8001c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c36:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001c3a:	2107      	movs	r1, #7
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 fb9d 	bl	800337c <HAL_RCC_ClockConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c48:	f000 f9a8 	bl	8001f9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <SystemClock_Config+0x128>)
 8001c4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 fdb6 	bl	80037d0 <HAL_RCCEx_PeriphCLKConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0x116>
  {
    Error_Handler();
 8001c6a:	f000 f997 	bl	8001f9c <Error_Handler>
  }
}
 8001c6e:	bf00      	nop
 8001c70:	37d0      	adds	r7, #208	; 0xd0
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	00200100 	.word	0x00200100

08001c84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	; (8001cfc <MX_SPI1_Init+0x78>)
 8001c8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001c9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ca2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cba:	2238      	movs	r2, #56	; 0x38
 8001cbc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_SPI1_Init+0x74>)
 8001ce4:	f002 f8bc 	bl	8003e60 <HAL_SPI_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 f955 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20004fa0 	.word	0x20004fa0
 8001cfc:	40013000 	.word	0x40013000

08001d00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <MX_USART3_UART_Init+0x5c>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART3_UART_Init+0x58>)
 8001d44:	f003 f81a 	bl	8004d7c <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d4e:	f000 f925 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20004b1c 	.word	0x20004b1c
 8001d5c:	40004800 	.word	0x40004800

08001d60 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d6a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d6e:	2206      	movs	r2, #6
 8001d70:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001da4:	f000 fe9d 	bl	8002ae2 <HAL_PCD_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001dae:	f000 f8f5 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20004b9c 	.word	0x20004b9c

08001dbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	f107 031c 	add.w	r3, r7, #28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
 8001dd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b4d      	ldr	r3, [pc, #308]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	61bb      	str	r3, [r7, #24]
 8001de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dea:	4b4a      	ldr	r3, [pc, #296]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b44      	ldr	r3, [pc, #272]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a43      	ldr	r2, [pc, #268]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a3d      	ldr	r2, [pc, #244]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e32:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <MX_GPIO_Init+0x158>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2110      	movs	r1, #16
 8001e66:	482c      	ldr	r0, [pc, #176]	; (8001f18 <MX_GPIO_Init+0x15c>)
 8001e68:	f000 fe08 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e72:	482a      	ldr	r0, [pc, #168]	; (8001f1c <MX_GPIO_Init+0x160>)
 8001e74:	f000 fe02 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	4828      	ldr	r0, [pc, #160]	; (8001f20 <MX_GPIO_Init+0x164>)
 8001e7e:	f000 fdfd 	bl	8002a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <MX_GPIO_Init+0x168>)
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	4619      	mov	r1, r3
 8001e96:	4824      	ldr	r0, [pc, #144]	; (8001f28 <MX_GPIO_Init+0x16c>)
 8001e98:	f000 fc3e 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001e9c:	2310      	movs	r3, #16
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4819      	ldr	r0, [pc, #100]	; (8001f18 <MX_GPIO_Init+0x15c>)
 8001eb4:	f000 fc30 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001eb8:	f244 0381 	movw	r3, #16513	; 0x4081
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4812      	ldr	r0, [pc, #72]	; (8001f1c <MX_GPIO_Init+0x160>)
 8001ed2:	f000 fc21 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ed6:	2340      	movs	r3, #64	; 0x40
 8001ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eda:	2301      	movs	r3, #1
 8001edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_GPIO_Init+0x164>)
 8001eee:	f000 fc13 	bl	8002718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4806      	ldr	r0, [pc, #24]	; (8001f20 <MX_GPIO_Init+0x164>)
 8001f06:	f000 fc07 	bl	8002718 <HAL_GPIO_Init>

}
 8001f0a:	bf00      	nop
 8001f0c:	3730      	adds	r7, #48	; 0x30
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40020800 	.word	0x40020800

08001f2c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <__io_putchar+0x24>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	1d39      	adds	r1, r7, #4
 8001f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f002 ff6a 	bl	8004e18 <HAL_UART_Transmit>

  return ch;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20005004 	.word	0x20005004

08001f54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  main_run();
 8001f5c:	f7ff fa7a 	bl	8001454 <main_run>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f60:	2101      	movs	r1, #1
 8001f62:	4804      	ldr	r0, [pc, #16]	; (8001f74 <StartDefaultTask+0x20>)
 8001f64:	f000 fda3 	bl	8002aae <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8001f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f6c:	f003 ffdc 	bl	8005f28 <osDelay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f70:	e7f6      	b.n	8001f60 <StartDefaultTask+0xc>
 8001f72:	bf00      	nop
 8001f74:	40020400 	.word	0x40020400

08001f78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f8a:	f000 faa1 	bl	80024d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40001000 	.word	0x40001000

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <Error_Handler+0x6>

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	210f      	movs	r1, #15
 8001fde:	f06f 0001 	mvn.w	r0, #1
 8001fe2:	f000 fb6f 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_SPI_MspInit+0x7c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d127      	bne.n	8002066 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_SPI_MspInit+0x80>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_SPI_MspInit+0x80>)
 800201c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002020:	6453      	str	r3, [r2, #68]	; 0x44
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_SPI_MspInit+0x80>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_SPI_MspInit+0x80>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_SPI_MspInit+0x80>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_SPI_MspInit+0x80>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002046:	23e0      	movs	r3, #224	; 0xe0
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_SPI_MspInit+0x84>)
 8002062:	f000 fb59 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	; 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40013000 	.word	0x40013000
 8002074:	40023800 	.word	0x40023800
 8002078:	40020000 	.word	0x40020000

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0x7c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d128      	bne.n	80020f0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020bc:	f043 0308 	orr.w	r3, r3, #8
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_UART_MspInit+0x80>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020e0:	2307      	movs	r3, #7
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_UART_MspInit+0x84>)
 80020ec:	f000 fb14 	bl	8002718 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40004800 	.word	0x40004800
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020c00 	.word	0x40020c00

08002104 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002124:	d141      	bne.n	80021aa <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a22      	ldr	r2, [pc, #136]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800213e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002150:	230a      	movs	r3, #10
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	4619      	mov	r1, r3
 800215a:	4817      	ldr	r0, [pc, #92]	; (80021b8 <HAL_PCD_MspInit+0xb4>)
 800215c:	f000 fadc 	bl	8002718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	2300      	movs	r3, #0
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4810      	ldr	r0, [pc, #64]	; (80021b8 <HAL_PCD_MspInit+0xb4>)
 8002176:	f000 facf 	bl	8002718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 800217c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002184:	6353      	str	r3, [r2, #52]	; 0x34
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_PCD_MspInit+0xb0>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60bb      	str	r3, [r7, #8]
 80021a8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3728      	adds	r7, #40	; 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020000 	.word	0x40020000

080021bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80021cc:	2200      	movs	r2, #0
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	2036      	movs	r0, #54	; 0x36
 80021d2:	f000 fa77 	bl	80026c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021d6:	2036      	movs	r0, #54	; 0x36
 80021d8:	f000 fa90 	bl	80026fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_InitTick+0xa0>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_InitTick+0xa0>)
 80021e2:	f043 0310 	orr.w	r3, r3, #16
 80021e6:	6413      	str	r3, [r2, #64]	; 0x40
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <HAL_InitTick+0xa0>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021f4:	f107 0210 	add.w	r2, r7, #16
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 fab4 	bl	800376c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002204:	f001 fa8a 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_InitTick+0xa4>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	0c9b      	lsrs	r3, r3, #18
 8002218:	3b01      	subs	r3, #1
 800221a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_InitTick+0xa8>)
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_InitTick+0xac>)
 8002220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002222:	4b10      	ldr	r3, [pc, #64]	; (8002264 <HAL_InitTick+0xa8>)
 8002224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002228:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_InitTick+0xa8>)
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_InitTick+0xa8>)
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002236:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_InitTick+0xa8>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800223c:	4809      	ldr	r0, [pc, #36]	; (8002264 <HAL_InitTick+0xa8>)
 800223e:	f002 fb37 	bl	80048b0 <HAL_TIM_Base_Init>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d104      	bne.n	8002252 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002248:	4806      	ldr	r0, [pc, #24]	; (8002264 <HAL_InitTick+0xa8>)
 800224a:	f002 fb67 	bl	800491c <HAL_TIM_Base_Start_IT>
 800224e:	4603      	mov	r3, r0
 8002250:	e000      	b.n	8002254 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
}
 8002254:	4618      	mov	r0, r3
 8002256:	3730      	adds	r7, #48	; 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	431bde83 	.word	0x431bde83
 8002264:	20005008 	.word	0x20005008
 8002268:	40001000 	.word	0x40001000

0800226c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <NMI_Handler+0x4>

08002272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002276:	e7fe      	b.n	8002276 <HardFault_Handler+0x4>

08002278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800227c:	e7fe      	b.n	800227c <MemManage_Handler+0x4>

0800227e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002282:	e7fe      	b.n	8002282 <BusFault_Handler+0x4>

08002284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <UsageFault_Handler+0x4>

0800228a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM6_DAC_IRQHandler+0x10>)
 800229e:	f002 fb67 	bl	8004970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20005008 	.word	0x20005008

080022ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	return 1;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_kill>:

int _kill(int pid, int sig)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022c6:	f006 fc1b 	bl	8008b00 <__errno>
 80022ca:	4602      	mov	r2, r0
 80022cc:	2316      	movs	r3, #22
 80022ce:	6013      	str	r3, [r2, #0]
	return -1;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_exit>:

void _exit (int status)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f7ff ffe7 	bl	80022bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ee:	e7fe      	b.n	80022ee <_exit+0x12>

080022f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	e00a      	b.n	8002318 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002302:	f3af 8000 	nop.w
 8002306:	4601      	mov	r1, r0
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	1c5a      	adds	r2, r3, #1
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	b2ca      	uxtb	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	429a      	cmp	r2, r3
 800231e:	dbf0      	blt.n	8002302 <_read+0x12>
	}

return len;
 8002320:	687b      	ldr	r3, [r7, #4]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e009      	b.n	8002350 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fdf1 	bl	8001f2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	dbf1      	blt.n	800233c <_write+0x12>
	}
	return len;
 8002358:	687b      	ldr	r3, [r7, #4]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <_close>:

int _close(int file)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
	return -1;
 800236a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800238a:	605a      	str	r2, [r3, #4]
	return 0;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <_isatty>:

int _isatty(int file)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
	return 1;
 80023a2:	2301      	movs	r3, #1
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
	return 0;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f006 fb80 	bl	8008b00 <__errno>
 8002400:	4602      	mov	r2, r0
 8002402:	230c      	movs	r3, #12
 8002404:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20040000 	.word	0x20040000
 800242c:	00000400 	.word	0x00000400
 8002430:	20000204 	.word	0x20000204
 8002434:	20005090 	.word	0x20005090

08002438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <SystemInit+0x28>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <SystemInit+0x28>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SystemInit+0x28>)
 800244e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002452:	609a      	str	r2, [r3, #8]
#endif
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800249c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002468:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800246a:	e003      	b.n	8002474 <LoopCopyDataInit>

0800246c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800246e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002470:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002472:	3104      	adds	r1, #4

08002474 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002478:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800247c:	d3f6      	bcc.n	800246c <CopyDataInit>
  ldr  r2, =_sbss
 800247e:	4a0b      	ldr	r2, [pc, #44]	; (80024ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002480:	e002      	b.n	8002488 <LoopFillZerobss>

08002482 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002482:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002484:	f842 3b04 	str.w	r3, [r2], #4

08002488 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800248a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800248c:	d3f9      	bcc.n	8002482 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800248e:	f7ff ffd3 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002492:	f006 fb3b 	bl	8008b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7ff fb2f 	bl	8001af8 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800249c:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80024a0:	0800be10 	.word	0x0800be10
  ldr  r0, =_sdata
 80024a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024a8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80024ac:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80024b0:	20005090 	.word	0x20005090

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>

080024b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ba:	2003      	movs	r0, #3
 80024bc:	f000 f8f7 	bl	80026ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff fe7b 	bl	80021bc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80024c6:	f7ff fd6d 	bl	8001fa4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20005048 	.word	0x20005048

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20005048 	.word	0x20005048

08002510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff ffee 	bl	80024f8 <HAL_GetTick>
 800251c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002528:	d005      	beq.n	8002536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_Delay+0x40>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002536:	bf00      	nop
 8002538:	f7ff ffde 	bl	80024f8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	429a      	cmp	r2, r3
 8002546:	d8f7      	bhi.n	8002538 <HAL_Delay+0x28>
  {
  }
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000008 	.word	0x20000008

08002554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002570:	4013      	ands	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <__NVIC_SetPriorityGrouping+0x44>)
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x40>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00
 8002598:	05fa0000 	.word	0x05fa0000

0800259c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <__NVIC_GetPriorityGrouping+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	0a1b      	lsrs	r3, r3, #8
 80025a6:	f003 0307 	and.w	r3, r3, #7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0b      	blt.n	80025e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_EnableIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff ff4c 	bl	8002554 <__NVIC_SetPriorityGrouping>
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
 80026d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d6:	f7ff ff61 	bl	800259c <__NVIC_GetPriorityGrouping>
 80026da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	6978      	ldr	r0, [r7, #20]
 80026e2:	f7ff ffb1 	bl	8002648 <NVIC_EncodePriority>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ff80 	bl	80025f4 <__NVIC_SetPriority>
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff54 	bl	80025b8 <__NVIC_EnableIRQ>
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002718:	b480      	push	{r7}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002722:	2300      	movs	r3, #0
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800272e:	2300      	movs	r3, #0
 8002730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e169      	b.n	8002a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	429a      	cmp	r2, r3
 8002752:	f040 8158 	bne.w	8002a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d00b      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d007      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276a:	2b11      	cmp	r3, #17
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d130      	bne.n	80027d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 0201 	and.w	r2, r3, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x100>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b12      	cmp	r3, #18
 8002816:	d123      	bne.n	8002860 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	08da      	lsrs	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	691a      	ldr	r2, [r3, #16]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	08da      	lsrs	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3208      	adds	r2, #8
 800285a:	69b9      	ldr	r1, [r7, #24]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80b2 	beq.w	8002a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a2:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <HAL_GPIO_Init+0x308>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a6:	4a5e      	ldr	r2, [pc, #376]	; (8002a20 <HAL_GPIO_Init+0x308>)
 80028a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028ac:	6453      	str	r3, [r2, #68]	; 0x44
 80028ae:	4b5c      	ldr	r3, [pc, #368]	; (8002a20 <HAL_GPIO_Init+0x308>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ba:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_GPIO_Init+0x30c>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <HAL_GPIO_Init+0x310>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d02b      	beq.n	800293e <HAL_GPIO_Init+0x226>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_GPIO_Init+0x314>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d025      	beq.n	800293a <HAL_GPIO_Init+0x222>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x318>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d01f      	beq.n	8002936 <HAL_GPIO_Init+0x21e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <HAL_GPIO_Init+0x31c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d019      	beq.n	8002932 <HAL_GPIO_Init+0x21a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4d      	ldr	r2, [pc, #308]	; (8002a38 <HAL_GPIO_Init+0x320>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d013      	beq.n	800292e <HAL_GPIO_Init+0x216>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4c      	ldr	r2, [pc, #304]	; (8002a3c <HAL_GPIO_Init+0x324>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00d      	beq.n	800292a <HAL_GPIO_Init+0x212>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4b      	ldr	r2, [pc, #300]	; (8002a40 <HAL_GPIO_Init+0x328>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d007      	beq.n	8002926 <HAL_GPIO_Init+0x20e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4a      	ldr	r2, [pc, #296]	; (8002a44 <HAL_GPIO_Init+0x32c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d101      	bne.n	8002922 <HAL_GPIO_Init+0x20a>
 800291e:	2307      	movs	r3, #7
 8002920:	e00e      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002922:	2308      	movs	r3, #8
 8002924:	e00c      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002926:	2306      	movs	r3, #6
 8002928:	e00a      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800292a:	2305      	movs	r3, #5
 800292c:	e008      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800292e:	2304      	movs	r3, #4
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002932:	2303      	movs	r3, #3
 8002934:	e004      	b.n	8002940 <HAL_GPIO_Init+0x228>
 8002936:	2302      	movs	r3, #2
 8002938:	e002      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x228>
 800293e:	2300      	movs	r3, #0
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	f002 0203 	and.w	r2, r2, #3
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	4093      	lsls	r3, r2
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002950:	4934      	ldr	r1, [pc, #208]	; (8002a24 <HAL_GPIO_Init+0x30c>)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	089b      	lsrs	r3, r3, #2
 8002956:	3302      	adds	r3, #2
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295e:	4b3a      	ldr	r3, [pc, #232]	; (8002a48 <HAL_GPIO_Init+0x330>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002982:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <HAL_GPIO_Init+0x330>)
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002988:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_GPIO_Init+0x330>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_GPIO_Init+0x330>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a11      	ldr	r2, [pc, #68]	; (8002a48 <HAL_GPIO_Init+0x330>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b0f      	cmp	r3, #15
 8002a10:	f67f ae92 	bls.w	8002738 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3724      	adds	r7, #36	; 0x24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40013800 	.word	0x40013800
 8002a28:	40020000 	.word	0x40020000
 8002a2c:	40020400 	.word	0x40020400
 8002a30:	40020800 	.word	0x40020800
 8002a34:	40020c00 	.word	0x40020c00
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40021800 	.word	0x40021800
 8002a44:	40021c00 	.word	0x40021c00
 8002a48:	40013c00 	.word	0x40013c00

08002a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d002      	beq.n	8002a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e001      	b.n	8002a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002ace:	e002      	b.n	8002ad6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ad0:	887a      	ldrh	r2, [r7, #2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	b08f      	sub	sp, #60	; 0x3c
 8002ae6:	af0a      	add	r7, sp, #40	; 0x28
 8002ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e116      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff faf8 	bl	8002104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fe56 	bl	80057e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	687e      	ldr	r6, [r7, #4]
 8002b40:	466d      	mov	r5, sp
 8002b42:	f106 0410 	add.w	r4, r6, #16
 8002b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b56:	1d33      	adds	r3, r6, #4
 8002b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	f002 fde4 	bl	8005728 <USB_CoreInit>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0d7      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fe44 	bl	8005806 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e04a      	b.n	8002c1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	333d      	adds	r3, #61	; 0x3d
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333c      	adds	r3, #60	; 0x3c
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3342      	adds	r3, #66	; 0x42
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333f      	adds	r3, #63	; 0x3f
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3348      	adds	r3, #72	; 0x48
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3350      	adds	r3, #80	; 0x50
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3301      	adds	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3af      	bcc.n	8002b84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e044      	b.n	8002cb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3b5      	bcc.n	8002c2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	687e      	ldr	r6, [r7, #4]
 8002cc6:	466d      	mov	r5, sp
 8002cc8:	f106 0410 	add.w	r4, r6, #16
 8002ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cdc:	1d33      	adds	r3, r6, #4
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	6838      	ldr	r0, [r7, #0]
 8002ce2:	f002 fdbb 	bl	800585c <USB_DevInit>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e014      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f80b 	bl	8002d2c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 ff6d 	bl	8005bfa <USB_DevDisconnect>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	10000003 	.word	0x10000003

08002d74 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40007000 	.word	0x40007000

08002d94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b20      	ldr	r3, [pc, #128]	; (8002e2c <HAL_PWREx_EnableOverDrive+0x98>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc2:	f7ff fb99 	bl	80024f8 <HAL_GetTick>
 8002dc6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dc8:	e009      	b.n	8002dde <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dca:	f7ff fb95 	bl	80024f8 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd8:	d901      	bls.n	8002dde <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e022      	b.n	8002e24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dde:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d1ee      	bne.n	8002dca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df8:	f7ff fb7e 	bl	80024f8 <HAL_GetTick>
 8002dfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dfe:	e009      	b.n	8002e14 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e00:	f7ff fb7a 	bl	80024f8 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e0e:	d901      	bls.n	8002e14 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e007      	b.n	8002e24 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e20:	d1ee      	bne.n	8002e00 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40007000 	.word	0x40007000

08002e34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e291      	b.n	800336e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e58:	4b96      	ldr	r3, [pc, #600]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d00c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e64:	4b93      	ldr	r3, [pc, #588]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d112      	bne.n	8002e96 <HAL_RCC_OscConfig+0x62>
 8002e70:	4b90      	ldr	r3, [pc, #576]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7c:	d10b      	bne.n	8002e96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	4b8d      	ldr	r3, [pc, #564]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d06c      	beq.n	8002f64 <HAL_RCC_OscConfig+0x130>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d168      	bne.n	8002f64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e26b      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_OscConfig+0x7a>
 8002ea0:	4b84      	ldr	r3, [pc, #528]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a83      	ldr	r2, [pc, #524]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eaa:	6013      	str	r3, [r2, #0]
 8002eac:	e02e      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x9c>
 8002eb6:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b7c      	ldr	r3, [pc, #496]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a7b      	ldr	r2, [pc, #492]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0xc0>
 8002eda:	4b76      	ldr	r3, [pc, #472]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b73      	ldr	r3, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xd8>
 8002ef4:	4b6f      	ldr	r3, [pc, #444]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a6e      	ldr	r2, [pc, #440]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b6c      	ldr	r3, [pc, #432]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a6b      	ldr	r2, [pc, #428]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7ff faf0 	bl	80024f8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7ff faec 	bl	80024f8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e21f      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b61      	ldr	r3, [pc, #388]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xe8>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7ff fadc 	bl	80024f8 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f44:	f7ff fad8 	bl	80024f8 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e20b      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b57      	ldr	r3, [pc, #348]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x110>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d069      	beq.n	8003046 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f72:	4b50      	ldr	r3, [pc, #320]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x190>
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x17a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1df      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b41      	ldr	r3, [pc, #260]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	493d      	ldr	r1, [pc, #244]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e040      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b39      	ldr	r3, [pc, #228]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a38      	ldr	r2, [pc, #224]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fa8e 	bl	80024f8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fa8a 	bl	80024f8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1bd      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b2d      	ldr	r3, [pc, #180]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4929      	ldr	r1, [pc, #164]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
 8003012:	e018      	b.n	8003046 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003014:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff fa6a 	bl	80024f8 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7ff fa66 	bl	80024f8 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e199      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f0      	bne.n	8003028 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d038      	beq.n	80030c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d019      	beq.n	800308e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003066:	f7ff fa47 	bl	80024f8 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800306e:	f7ff fa43 	bl	80024f8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e176      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x23a>
 800308c:	e01a      	b.n	80030c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800308e:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003092:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <HAL_RCC_OscConfig+0x280>)
 8003094:	f023 0301 	bic.w	r3, r3, #1
 8003098:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7ff fa2d 	bl	80024f8 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7ff fa29 	bl	80024f8 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d903      	bls.n	80030b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e15c      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
 80030b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030b8:	4b91      	ldr	r3, [pc, #580]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1ee      	bne.n	80030a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a4 	beq.w	800321a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d2:	4b8b      	ldr	r3, [pc, #556]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030de:	4b88      	ldr	r3, [pc, #544]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a87      	ldr	r2, [pc, #540]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b85      	ldr	r3, [pc, #532]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fa:	4b82      	ldr	r3, [pc, #520]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d118      	bne.n	8003138 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003112:	f7ff f9f1 	bl	80024f8 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7ff f9ed 	bl	80024f8 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b64      	cmp	r3, #100	; 0x64
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e120      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800312c:	4b75      	ldr	r3, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x4d0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x31a>
 8003140:	4b6f      	ldr	r3, [pc, #444]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e02d      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x33c>
 8003156:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a69      	ldr	r2, [pc, #420]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	4b67      	ldr	r3, [pc, #412]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a66      	ldr	r2, [pc, #408]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	e01c      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d10c      	bne.n	8003192 <HAL_RCC_OscConfig+0x35e>
 8003178:	4b61      	ldr	r3, [pc, #388]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	4a60      	ldr	r2, [pc, #384]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800317e:	f043 0304 	orr.w	r3, r3, #4
 8003182:	6713      	str	r3, [r2, #112]	; 0x70
 8003184:	4b5e      	ldr	r3, [pc, #376]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	4a5d      	ldr	r2, [pc, #372]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	6713      	str	r3, [r2, #112]	; 0x70
 8003190:	e00b      	b.n	80031aa <HAL_RCC_OscConfig+0x376>
 8003192:	4b5b      	ldr	r3, [pc, #364]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a5a      	ldr	r2, [pc, #360]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a57      	ldr	r2, [pc, #348]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7ff f9a1 	bl	80024f8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b8:	e00a      	b.n	80031d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7ff f99d 	bl	80024f8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e0ce      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	4b4b      	ldr	r3, [pc, #300]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0ee      	beq.n	80031ba <HAL_RCC_OscConfig+0x386>
 80031dc:	e014      	b.n	8003208 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7ff f98b 	bl	80024f8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff f987 	bl	80024f8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0b8      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031fc:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d105      	bne.n	800321a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a3b      	ldr	r2, [pc, #236]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 80a4 	beq.w	800336c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003224:	4b36      	ldr	r3, [pc, #216]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	d06b      	beq.n	8003308 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d149      	bne.n	80032cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003238:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800323e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003244:	f7ff f958 	bl	80024f8 <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800324c:	f7ff f954 	bl	80024f8 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e087      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f0      	bne.n	800324c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69da      	ldr	r2, [r3, #28]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	019b      	lsls	r3, r3, #6
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003280:	085b      	lsrs	r3, r3, #1
 8003282:	3b01      	subs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	4313      	orrs	r3, r2
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003296:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 800329e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7ff f928 	bl	80024f8 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ac:	f7ff f924 	bl	80024f8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e057      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032be:	4b10      	ldr	r3, [pc, #64]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x478>
 80032ca:	e04f      	b.n	800336c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d8:	f7ff f90e 	bl	80024f8 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e0:	f7ff f90a 	bl	80024f8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03d      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	4b03      	ldr	r3, [pc, #12]	; (8003300 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f0      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4ac>
 80032fe:	e035      	b.n	800336c <HAL_RCC_OscConfig+0x538>
 8003300:	40023800 	.word	0x40023800
 8003304:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x544>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d028      	beq.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d121      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332e:	429a      	cmp	r2, r3
 8003330:	d11a      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003338:	4013      	ands	r3, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003340:	4293      	cmp	r3, r2
 8003342:	d111      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	3b01      	subs	r3, #1
 8003352:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800

0800337c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d0      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003394:	4b6a      	ldr	r3, [pc, #424]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d910      	bls.n	80033c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b67      	ldr	r3, [pc, #412]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f023 020f 	bic.w	r2, r3, #15
 80033aa:	4965      	ldr	r1, [pc, #404]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b2:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0b8      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d020      	beq.n	8003412 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033dc:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	4a52      	ldr	r2, [pc, #328]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80033fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b50      	ldr	r3, [pc, #320]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	494d      	ldr	r1, [pc, #308]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d040      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b47      	ldr	r3, [pc, #284]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d115      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e07f      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343e:	4b41      	ldr	r3, [pc, #260]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e073      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344e:	4b3d      	ldr	r3, [pc, #244]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345e:	4b39      	ldr	r3, [pc, #228]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f023 0203 	bic.w	r2, r3, #3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4936      	ldr	r1, [pc, #216]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003470:	f7ff f842 	bl	80024f8 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7ff f83e 	bl	80024f8 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e053      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	4b2d      	ldr	r3, [pc, #180]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 020c 	and.w	r2, r3, #12
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	429a      	cmp	r2, r3
 800349e:	d1eb      	bne.n	8003478 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 030f 	and.w	r3, r3, #15
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d210      	bcs.n	80034d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f023 020f 	bic.w	r2, r3, #15
 80034b6:	4922      	ldr	r1, [pc, #136]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034dc:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4916      	ldr	r1, [pc, #88]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	490e      	ldr	r1, [pc, #56]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350e:	f000 f821 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003512:	4601      	mov	r1, r0
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <HAL_RCC_ClockConfig+0x1cc>)
 8003520:	5cd3      	ldrb	r3, [r2, r3]
 8003522:	fa21 f303 	lsr.w	r3, r1, r3
 8003526:	4a09      	ldr	r2, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1d0>)
 8003528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x1d4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fe44 	bl	80021bc <HAL_InitTick>

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40023c00 	.word	0x40023c00
 8003544:	40023800 	.word	0x40023800
 8003548:	0800bb24 	.word	0x0800bb24
 800354c:	20000000 	.word	0x20000000
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	607b      	str	r3, [r7, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f003 030c 	and.w	r3, r3, #12
 8003572:	2b04      	cmp	r3, #4
 8003574:	d007      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x32>
 8003576:	2b08      	cmp	r3, #8
 8003578:	d008      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x38>
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 80b4 	bne.w	80036e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003580:	4b5e      	ldr	r3, [pc, #376]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003582:	60bb      	str	r3, [r7, #8]
      break;
 8003584:	e0b3      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003588:	60bb      	str	r3, [r7, #8]
      break;
 800358a:	e0b0      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800358c:	4b5a      	ldr	r3, [pc, #360]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003594:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d04a      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a2:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	099b      	lsrs	r3, r3, #6
 80035a8:	f04f 0400 	mov.w	r4, #0
 80035ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	ea03 0501 	and.w	r5, r3, r1
 80035b8:	ea04 0602 	and.w	r6, r4, r2
 80035bc:	4629      	mov	r1, r5
 80035be:	4632      	mov	r2, r6
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	0154      	lsls	r4, r2, #5
 80035ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035ce:	014b      	lsls	r3, r1, #5
 80035d0:	4619      	mov	r1, r3
 80035d2:	4622      	mov	r2, r4
 80035d4:	1b49      	subs	r1, r1, r5
 80035d6:	eb62 0206 	sbc.w	r2, r2, r6
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f04f 0400 	mov.w	r4, #0
 80035e2:	0194      	lsls	r4, r2, #6
 80035e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035e8:	018b      	lsls	r3, r1, #6
 80035ea:	1a5b      	subs	r3, r3, r1
 80035ec:	eb64 0402 	sbc.w	r4, r4, r2
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	00e2      	lsls	r2, r4, #3
 80035fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035fe:	00d9      	lsls	r1, r3, #3
 8003600:	460b      	mov	r3, r1
 8003602:	4614      	mov	r4, r2
 8003604:	195b      	adds	r3, r3, r5
 8003606:	eb44 0406 	adc.w	r4, r4, r6
 800360a:	f04f 0100 	mov.w	r1, #0
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	0262      	lsls	r2, r4, #9
 8003614:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003618:	0259      	lsls	r1, r3, #9
 800361a:	460b      	mov	r3, r1
 800361c:	4614      	mov	r4, r2
 800361e:	4618      	mov	r0, r3
 8003620:	4621      	mov	r1, r4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f04f 0400 	mov.w	r4, #0
 8003628:	461a      	mov	r2, r3
 800362a:	4623      	mov	r3, r4
 800362c:	f7fd fb34 	bl	8000c98 <__aeabi_uldivmod>
 8003630:	4603      	mov	r3, r0
 8003632:	460c      	mov	r4, r1
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	e049      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003638:	4b2f      	ldr	r3, [pc, #188]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	f04f 0400 	mov.w	r4, #0
 8003642:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	ea03 0501 	and.w	r5, r3, r1
 800364e:	ea04 0602 	and.w	r6, r4, r2
 8003652:	4629      	mov	r1, r5
 8003654:	4632      	mov	r2, r6
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	f04f 0400 	mov.w	r4, #0
 800365e:	0154      	lsls	r4, r2, #5
 8003660:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003664:	014b      	lsls	r3, r1, #5
 8003666:	4619      	mov	r1, r3
 8003668:	4622      	mov	r2, r4
 800366a:	1b49      	subs	r1, r1, r5
 800366c:	eb62 0206 	sbc.w	r2, r2, r6
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	f04f 0400 	mov.w	r4, #0
 8003678:	0194      	lsls	r4, r2, #6
 800367a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800367e:	018b      	lsls	r3, r1, #6
 8003680:	1a5b      	subs	r3, r3, r1
 8003682:	eb64 0402 	sbc.w	r4, r4, r2
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	00e2      	lsls	r2, r4, #3
 8003690:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003694:	00d9      	lsls	r1, r3, #3
 8003696:	460b      	mov	r3, r1
 8003698:	4614      	mov	r4, r2
 800369a:	195b      	adds	r3, r3, r5
 800369c:	eb44 0406 	adc.w	r4, r4, r6
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	02a2      	lsls	r2, r4, #10
 80036aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036ae:	0299      	lsls	r1, r3, #10
 80036b0:	460b      	mov	r3, r1
 80036b2:	4614      	mov	r4, r2
 80036b4:	4618      	mov	r0, r3
 80036b6:	4621      	mov	r1, r4
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	461a      	mov	r2, r3
 80036c0:	4623      	mov	r3, r4
 80036c2:	f7fd fae9 	bl	8000c98 <__aeabi_uldivmod>
 80036c6:	4603      	mov	r3, r0
 80036c8:	460c      	mov	r4, r1
 80036ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	f003 0303 	and.w	r3, r3, #3
 80036d6:	3301      	adds	r3, #1
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e4:	60bb      	str	r3, [r7, #8]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036e8:	4b04      	ldr	r3, [pc, #16]	; (80036fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ee:	68bb      	ldr	r3, [r7, #8]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f8:	40023800 	.word	0x40023800
 80036fc:	00f42400 	.word	0x00f42400
 8003700:	007a1200 	.word	0x007a1200

08003704 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003708:	4b03      	ldr	r3, [pc, #12]	; (8003718 <HAL_RCC_GetHCLKFreq+0x14>)
 800370a:	681b      	ldr	r3, [r3, #0]
}
 800370c:	4618      	mov	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003720:	f7ff fff0 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 8003724:	4601      	mov	r1, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4a03      	ldr	r2, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	0800bb34 	.word	0x0800bb34

08003744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003748:	f7ff ffdc 	bl	8003704 <HAL_RCC_GetHCLKFreq>
 800374c:	4601      	mov	r1, r0
 800374e:	4b05      	ldr	r3, [pc, #20]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0b5b      	lsrs	r3, r3, #13
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4a03      	ldr	r2, [pc, #12]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800375a:	5cd3      	ldrb	r3, [r2, r3]
 800375c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40023800 	.word	0x40023800
 8003768:	0800bb34 	.word	0x0800bb34

0800376c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	220f      	movs	r2, #15
 800377a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0203 	and.w	r2, r3, #3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037a0:	4b09      	ldr	r3, [pc, #36]	; (80037c8 <HAL_RCC_GetClockConfig+0x5c>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_RCC_GetClockConfig+0x60>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 020f 	and.w	r2, r3, #15
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40023c00 	.word	0x40023c00

080037d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037f4:	4b65      	ldr	r3, [pc, #404]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a64      	ldr	r2, [pc, #400]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80037fe:	6093      	str	r3, [r2, #8]
 8003800:	4b62      	ldr	r3, [pc, #392]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003808:	4960      	ldr	r1, [pc, #384]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800380a:	4313      	orrs	r3, r2
 800380c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003816:	2301      	movs	r3, #1
 8003818:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d017      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003826:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800382c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003834:	4955      	ldr	r1, [pc, #340]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003844:	d101      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003846:	2301      	movs	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003852:	2301      	movs	r3, #1
 8003854:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d017      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003862:	4b4a      	ldr	r3, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	4946      	ldr	r1, [pc, #280]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003880:	d101      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800388e:	2301      	movs	r3, #1
 8003890:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 808b 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a4:	4a39      	ldr	r2, [pc, #228]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6413      	str	r3, [r2, #64]	; 0x40
 80038ac:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038b8:	4b35      	ldr	r3, [pc, #212]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fe fe18 	bl	80024f8 <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038cc:	f7fe fe14 	bl	80024f8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	; 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e2ba      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038de:	4b2c      	ldr	r3, [pc, #176]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ea:	4b28      	ldr	r3, [pc, #160]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d035      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	429a      	cmp	r2, r3
 8003906:	d02e      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003908:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a1a      	ldr	r2, [pc, #104]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800392a:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003930:	4b16      	ldr	r3, [pc, #88]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d114      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe fddc 	bl	80024f8 <HAL_GetTick>
 8003940:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003942:	e00a      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003944:	f7fe fdd8 	bl	80024f8 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e27c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395a:	4b0c      	ldr	r3, [pc, #48]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0ee      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003972:	d111      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003980:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003982:	400b      	ands	r3, r1
 8003984:	4901      	ldr	r1, [pc, #4]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
 800398a:	e00b      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800398c:	40023800 	.word	0x40023800
 8003990:	40007000 	.word	0x40007000
 8003994:	0ffffcff 	.word	0x0ffffcff
 8003998:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	4aa2      	ldr	r2, [pc, #648]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800399e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b0:	499d      	ldr	r1, [pc, #628]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039c2:	4b99      	ldr	r3, [pc, #612]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	4a97      	ldr	r2, [pc, #604]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039d2:	4b95      	ldr	r3, [pc, #596]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	4992      	ldr	r1, [pc, #584]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f0:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fe:	498a      	ldr	r1, [pc, #552]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a12:	4b85      	ldr	r3, [pc, #532]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a20:	4981      	ldr	r1, [pc, #516]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00a      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a34:	4b7c      	ldr	r3, [pc, #496]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a42:	4979      	ldr	r1, [pc, #484]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a56:	4b74      	ldr	r3, [pc, #464]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f023 0203 	bic.w	r2, r3, #3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a64:	4970      	ldr	r1, [pc, #448]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00a      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f023 020c 	bic.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4968      	ldr	r1, [pc, #416]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00a      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a9a:	4b63      	ldr	r3, [pc, #396]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	495f      	ldr	r1, [pc, #380]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003abc:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aca:	4957      	ldr	r1, [pc, #348]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00a      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ade:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aec:	494e      	ldr	r1, [pc, #312]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00a      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b0e:	4946      	ldr	r1, [pc, #280]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003b22:	4b41      	ldr	r3, [pc, #260]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b30:	493d      	ldr	r1, [pc, #244]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003b44:	4b38      	ldr	r3, [pc, #224]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	4935      	ldr	r1, [pc, #212]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d011      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003b66:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b74:	492c      	ldr	r1, [pc, #176]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b84:	d101      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b96:	4b24      	ldr	r3, [pc, #144]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ba4:	4920      	ldr	r1, [pc, #128]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bc6:	4918      	ldr	r1, [pc, #96]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003bda:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003be8:	490f      	ldr	r1, [pc, #60]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bfe:	f040 809c 	bne.w	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fc73 	bl	80024f8 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c14:	e00a      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003c16:	f7fe fc6f 	bl	80024f8 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	; 0x64
 8003c22:	d903      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e115      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003c28:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c2c:	4b8b      	ldr	r3, [pc, #556]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ee      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c4c:	4b83      	ldr	r3, [pc, #524]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c52:	0e1b      	lsrs	r3, r3, #24
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	019a      	lsls	r2, r3, #6
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	061b      	lsls	r3, r3, #24
 8003c64:	431a      	orrs	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	071b      	lsls	r3, r3, #28
 8003c6c:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d024      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c9e:	d11f      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca0:	4b6e      	ldr	r3, [pc, #440]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca6:	0f1b      	lsrs	r3, r3, #28
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	019a      	lsls	r2, r3, #6
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	061b      	lsls	r3, r3, #24
 8003cba:	431a      	orrs	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	071b      	lsls	r3, r3, #28
 8003cc0:	4966      	ldr	r1, [pc, #408]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cc8:	4b64      	ldr	r3, [pc, #400]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cce:	f023 021f 	bic.w	r2, r3, #31
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4960      	ldr	r1, [pc, #384]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	019a      	lsls	r2, r3, #6
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	071b      	lsls	r3, r3, #28
 8003d00:	4956      	ldr	r1, [pc, #344]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d08:	4b54      	ldr	r3, [pc, #336]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a53      	ldr	r2, [pc, #332]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d14:	f7fe fbf0 	bl	80024f8 <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d1c:	f7fe fbec 	bl	80024f8 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	d901      	bls.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e092      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d2e:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 8088 	bne.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d42:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a45      	ldr	r2, [pc, #276]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d4e:	f7fe fbd3 	bl	80024f8 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d56:	f7fe fbcf 	bl	80024f8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d901      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e075      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d68:	4b3c      	ldr	r3, [pc, #240]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d74:	d0ef      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d120      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	f003 0303 	and.w	r3, r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	019a      	lsls	r2, r3, #6
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	4927      	ldr	r1, [pc, #156]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dc6:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	4920      	ldr	r1, [pc, #128]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d018      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003df4:	d113      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfc:	0e1b      	lsrs	r3, r3, #24
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	019a      	lsls	r2, r3, #6
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	041b      	lsls	r3, r3, #16
 8003e10:	431a      	orrs	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	4911      	ldr	r1, [pc, #68]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a0e      	ldr	r2, [pc, #56]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2a:	f7fe fb65 	bl	80024f8 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e32:	f7fe fb61 	bl	80024f8 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b64      	cmp	r3, #100	; 0x64
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e007      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e50:	d1ef      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800

08003e60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e084      	b.n	8003f7c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d106      	bne.n	8003e92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fe f8b1 	bl	8001ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eb2:	d902      	bls.n	8003eba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e002      	b.n	8003ec0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ebe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003ec8:	d007      	beq.n	8003eda <HAL_SPI_Init+0x7a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003eea:	d903      	bls.n	8003ef4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef2:	e002      	b.n	8003efa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	f003 0204 	and.w	r2, r3, #4
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_SPI_Transmit+0x22>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e150      	b.n	8004248 <HAL_SPI_Transmit+0x2c4>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fae:	f7fe faa3 	bl	80024f8 <HAL_GetTick>
 8003fb2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fc8:	e135      	b.n	8004236 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_SPI_Transmit+0x52>
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d102      	bne.n	8003fdc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fda:	e12c      	b.n	8004236 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2203      	movs	r2, #3
 8003fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	88fa      	ldrh	r2, [r7, #6]
 8003ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	88fa      	ldrh	r2, [r7, #6]
 8003ffa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004026:	d107      	bne.n	8004038 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004036:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d007      	beq.n	8004056 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800405e:	d94b      	bls.n	80040f8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_Transmit+0xea>
 8004068:	8afb      	ldrh	r3, [r7, #22]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d13e      	bne.n	80040ec <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004092:	e02b      	b.n	80040ec <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d112      	bne.n	80040c8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040c6:	e011      	b.n	80040ec <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c8:	f7fe fa16 	bl	80024f8 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d803      	bhi.n	80040e0 <HAL_SPI_Transmit+0x15c>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040de:	d102      	bne.n	80040e6 <HAL_SPI_Transmit+0x162>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ea:	e0a4      	b.n	8004236 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ce      	bne.n	8004094 <HAL_SPI_Transmit+0x110>
 80040f6:	e07c      	b.n	80041f2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Transmit+0x182>
 8004100:	8afb      	ldrh	r3, [r7, #22]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d170      	bne.n	80041e8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	d912      	bls.n	8004136 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	881a      	ldrh	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	1c9a      	adds	r2, r3, #2
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b02      	subs	r3, #2
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004134:	e058      	b.n	80041e8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800415c:	e044      	b.n	80041e8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d12b      	bne.n	80041c4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b01      	cmp	r3, #1
 8004174:	d912      	bls.n	800419c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	881a      	ldrh	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	1c9a      	adds	r2, r3, #2
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b02      	subs	r3, #2
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800419a:	e025      	b.n	80041e8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	7812      	ldrb	r2, [r2, #0]
 80041a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041c2:	e011      	b.n	80041e8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c4:	f7fe f998 	bl	80024f8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d803      	bhi.n	80041dc <HAL_SPI_Transmit+0x258>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041da:	d102      	bne.n	80041e2 <HAL_SPI_Transmit+0x25e>
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041e6:	e026      	b.n	8004236 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1b5      	bne.n	800415e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fb14 	bl	8004824 <SPI_EndRxTxTransaction>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e000      	b.n	8004236 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004234:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004246:	7ffb      	ldrb	r3, [r7, #31]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800425e:	2301      	movs	r3, #1
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x26>
 8004272:	2302      	movs	r3, #2
 8004274:	e1fb      	b.n	800466e <HAL_SPI_TransmitReceive+0x41e>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800427e:	f7fe f93b 	bl	80024f8 <HAL_GetTick>
 8004282:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800428a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800429a:	7efb      	ldrb	r3, [r7, #27]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d00e      	beq.n	80042be <HAL_SPI_TransmitReceive+0x6e>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042a6:	d106      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x66>
 80042b0:	7efb      	ldrb	r3, [r7, #27]
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042bc:	e1cd      	b.n	800465a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x80>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_SPI_TransmitReceive+0x80>
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042d6:	e1c0      	b.n	800465a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d003      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2205      	movs	r2, #5
 80042e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	887a      	ldrh	r2, [r7, #2]
 80042fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	887a      	ldrh	r2, [r7, #2]
 8004304:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	887a      	ldrh	r2, [r7, #2]
 8004312:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68db      	ldr	r3, [r3, #12]
 800432a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800432e:	d802      	bhi.n	8004336 <HAL_SPI_TransmitReceive+0xe6>
 8004330:	8a3b      	ldrh	r3, [r7, #16]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d908      	bls.n	8004348 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	e007      	b.n	8004358 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b40      	cmp	r3, #64	; 0x40
 8004364:	d007      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004374:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800437e:	d97c      	bls.n	800447a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <HAL_SPI_TransmitReceive+0x13e>
 8004388:	8a7b      	ldrh	r3, [r7, #18]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d169      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	881a      	ldrh	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439e:	1c9a      	adds	r2, r3, #2
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043b2:	e056      	b.n	8004462 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d11b      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x1aa>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d016      	beq.n	80043fa <HAL_SPI_TransmitReceive+0x1aa>
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d113      	bne.n	80043fa <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	881a      	ldrh	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e2:	1c9a      	adds	r2, r3, #2
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d11c      	bne.n	8004442 <HAL_SPI_TransmitReceive+0x1f2>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d016      	beq.n	8004442 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	b292      	uxth	r2, r2
 8004420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	1c9a      	adds	r2, r3, #2
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004432:	b29b      	uxth	r3, r3
 8004434:	3b01      	subs	r3, #1
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800443e:	2301      	movs	r3, #1
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004442:	f7fe f859 	bl	80024f8 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800444e:	429a      	cmp	r2, r3
 8004450:	d807      	bhi.n	8004462 <HAL_SPI_TransmitReceive+0x212>
 8004452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004458:	d003      	beq.n	8004462 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004460:	e0fb      	b.n	800465a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1a3      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x164>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d19d      	bne.n	80043b4 <HAL_SPI_TransmitReceive+0x164>
 8004478:	e0df      	b.n	800463a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_SPI_TransmitReceive+0x23a>
 8004482:	8a7b      	ldrh	r3, [r7, #18]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 80cb 	bne.w	8004620 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800448e:	b29b      	uxth	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d912      	bls.n	80044ba <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	1c9a      	adds	r2, r3, #2
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b02      	subs	r3, #2
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044b8:	e0b2      	b.n	8004620 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044e0:	e09e      	b.n	8004620 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d134      	bne.n	800455a <HAL_SPI_TransmitReceive+0x30a>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02f      	beq.n	800455a <HAL_SPI_TransmitReceive+0x30a>
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d12c      	bne.n	800455a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b01      	cmp	r3, #1
 8004508:	d912      	bls.n	8004530 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	881a      	ldrh	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451a:	1c9a      	adds	r2, r3, #2
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b02      	subs	r3, #2
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800452e:	e012      	b.n	8004556 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	7812      	ldrb	r2, [r2, #0]
 800453c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b01      	subs	r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d148      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x3aa>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d042      	beq.n	80045fa <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b01      	cmp	r3, #1
 800457e:	d923      	bls.n	80045c8 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	b292      	uxth	r2, r2
 800458c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	1c9a      	adds	r2, r3, #2
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b02      	subs	r3, #2
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d81f      	bhi.n	80045f6 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045c4:	605a      	str	r2, [r3, #4]
 80045c6:	e016      	b.n	80045f6 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f103 020c 	add.w	r2, r3, #12
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045f6:	2301      	movs	r3, #1
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045fa:	f7fd ff7d 	bl	80024f8 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004606:	429a      	cmp	r2, r3
 8004608:	d803      	bhi.n	8004612 <HAL_SPI_TransmitReceive+0x3c2>
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004610:	d102      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x3c8>
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	2b00      	cmp	r3, #0
 8004616:	d103      	bne.n	8004620 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800461e:	e01c      	b.n	800465a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	f47f af5b 	bne.w	80044e2 <HAL_SPI_TransmitReceive+0x292>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	f47f af54 	bne.w	80044e2 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8f0 	bl	8004824 <SPI_EndRxTxTransaction>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	661a      	str	r2, [r3, #96]	; 0x60
 8004656:	e000      	b.n	800465a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004658:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800466a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800466e:	4618      	mov	r0, r3
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004686:	e04c      	b.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800468e:	d048      	beq.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004690:	f7fd ff32 	bl	80024f8 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d902      	bls.n	80046a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d13d      	bne.n	8004722 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046be:	d111      	bne.n	80046e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c8:	d004      	beq.n	80046d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d2:	d107      	bne.n	80046e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d10f      	bne.n	800470e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800470c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e00f      	b.n	8004742 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4013      	ands	r3, r2
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	429a      	cmp	r2, r3
 8004730:	bf0c      	ite	eq
 8004732:	2301      	moveq	r3, #1
 8004734:	2300      	movne	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	429a      	cmp	r2, r3
 800473e:	d1a3      	bne.n	8004688 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004758:	e057      	b.n	800480a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004760:	d106      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d048      	beq.n	800480a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004778:	f7fd febe 	bl	80024f8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d902      	bls.n	800478e <SPI_WaitFifoStateUntilTimeout+0x44>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d13d      	bne.n	800480a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800479c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d111      	bne.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x82>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d004      	beq.n	80047bc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d107      	bne.n	80047cc <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d10f      	bne.n	80047f6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e008      	b.n	800481c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	429a      	cmp	r2, r3
 8004818:	d19f      	bne.n	800475a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2200      	movs	r2, #0
 8004838:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff ff84 	bl	800474a <SPI_WaitFifoStateUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d007      	beq.n	8004858 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484c:	f043 0220 	orr.w	r2, r3, #32
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e027      	b.n	80048a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f7ff ff07 	bl	8004676 <SPI_WaitFlagStateUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e014      	b.n	80048a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2200      	movs	r2, #0
 8004886:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f7ff ff5d 	bl	800474a <SPI_WaitFifoStateUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e000      	b.n	80048a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f815 	bl	8004906 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f000 f986 	bl	8004c00 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
	...

0800491c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689a      	ldr	r2, [r3, #8]
 800493a:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_TIM_Base_Start_IT+0x50>)
 800493c:	4013      	ands	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b06      	cmp	r3, #6
 8004944:	d00b      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x42>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494c:	d007      	beq.n	800495e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f042 0201 	orr.w	r2, r2, #1
 800495c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	00010007 	.word	0x00010007

08004970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b02      	cmp	r3, #2
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b02      	cmp	r3, #2
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0202 	mvn.w	r2, #2
 800499c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f905 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8f7 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f908 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d122      	bne.n	8004a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0204 	mvn.w	r2, #4
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f8db 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f8cd 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8de 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d122      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d11b      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0208 	mvn.w	r2, #8
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8b1 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8a3 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8b4 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0310 	and.w	r3, r3, #16
 8004a7e:	2b10      	cmp	r3, #16
 8004a80:	d122      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	2b10      	cmp	r3, #16
 8004a8e:	d11b      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0210 	mvn.w	r2, #16
 8004a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f887 	bl	8004bc2 <HAL_TIM_IC_CaptureCallback>
 8004ab4:	e005      	b.n	8004ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f879 	bl	8004bae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f88a 	bl	8004bd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0201 	mvn.w	r2, #1
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd fa42 	bl	8001f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	2b80      	cmp	r3, #128	; 0x80
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0c:	2b80      	cmp	r3, #128	; 0x80
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f91a 	bl	8004d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	d10e      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3a:	2b80      	cmp	r3, #128	; 0x80
 8004b3c:	d107      	bne.n	8004b4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f90d 	bl	8004d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b58:	2b40      	cmp	r3, #64	; 0x40
 8004b5a:	d10e      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b66:	2b40      	cmp	r3, #64	; 0x40
 8004b68:	d107      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f838 	bl	8004bea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b20      	cmp	r3, #32
 8004b86:	d10e      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d107      	bne.n	8004ba6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0220 	mvn.w	r2, #32
 8004b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8cd 	bl	8004d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a40      	ldr	r2, [pc, #256]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d013      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1e:	d00f      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a3d      	ldr	r2, [pc, #244]	; (8004d18 <TIM_Base_SetConfig+0x118>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3c      	ldr	r2, [pc, #240]	; (8004d1c <TIM_Base_SetConfig+0x11c>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d007      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3b      	ldr	r2, [pc, #236]	; (8004d20 <TIM_Base_SetConfig+0x120>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3a      	ldr	r2, [pc, #232]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d108      	bne.n	8004c52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d02b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d027      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a2c      	ldr	r2, [pc, #176]	; (8004d18 <TIM_Base_SetConfig+0x118>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d023      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2b      	ldr	r2, [pc, #172]	; (8004d1c <TIM_Base_SetConfig+0x11c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d01f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <TIM_Base_SetConfig+0x120>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d017      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a28      	ldr	r2, [pc, #160]	; (8004d28 <TIM_Base_SetConfig+0x128>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a27      	ldr	r2, [pc, #156]	; (8004d2c <TIM_Base_SetConfig+0x12c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d00f      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a26      	ldr	r2, [pc, #152]	; (8004d30 <TIM_Base_SetConfig+0x130>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00b      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a25      	ldr	r2, [pc, #148]	; (8004d34 <TIM_Base_SetConfig+0x134>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d007      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a24      	ldr	r2, [pc, #144]	; (8004d38 <TIM_Base_SetConfig+0x138>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d003      	beq.n	8004cb2 <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a23      	ldr	r2, [pc, #140]	; (8004d3c <TIM_Base_SetConfig+0x13c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a0a      	ldr	r2, [pc, #40]	; (8004d14 <TIM_Base_SetConfig+0x114>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_Base_SetConfig+0xf8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <TIM_Base_SetConfig+0x124>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d103      	bne.n	8004d00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	615a      	str	r2, [r3, #20]
}
 8004d06:	bf00      	nop
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40010000 	.word	0x40010000
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40010400 	.word	0x40010400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40014400 	.word	0x40014400
 8004d30:	40014800 	.word	0x40014800
 8004d34:	40001800 	.word	0x40001800
 8004d38:	40001c00 	.word	0x40001c00
 8004d3c:	40002000 	.word	0x40002000

08004d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e040      	b.n	8004e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d106      	bne.n	8004da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fd f96c 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	; 0x24
 8004da8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f8be 	bl	8004f3c <UART_SetConfig>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e022      	b.n	8004e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fb5c 	bl	8005490 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0201 	orr.w	r2, r2, #1
 8004e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fbe3 	bl	80055d4 <UART_CheckIdleState>
 8004e0e:	4603      	mov	r3, r0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	603b      	str	r3, [r7, #0]
 8004e24:	4613      	mov	r3, r2
 8004e26:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d17f      	bne.n	8004f30 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_UART_Transmit+0x24>
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e078      	b.n	8004f32 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Transmit+0x36>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e071      	b.n	8004f32 <HAL_UART_Transmit+0x11a>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2221      	movs	r2, #33	; 0x21
 8004e60:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004e62:	f7fd fb49 	bl	80024f8 <HAL_GetTick>
 8004e66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e80:	d108      	bne.n	8004e94 <HAL_UART_Transmit+0x7c>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e003      	b.n	8004e9c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004ea4:	e02c      	b.n	8004f00 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fbbe 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e038      	b.n	8004f32 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10b      	bne.n	8004ede <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3302      	adds	r3, #2
 8004eda:	61bb      	str	r3, [r7, #24]
 8004edc:	e007      	b.n	8004eee <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	781a      	ldrb	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3301      	adds	r3, #1
 8004eec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1cc      	bne.n	8004ea6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fb8b 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e005      	b.n	8004f32 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4bb1      	ldr	r3, [pc, #708]	; (8005230 <UART_SetConfig+0x2f4>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	6939      	ldr	r1, [r7, #16]
 8004f74:	430b      	orrs	r3, r1
 8004f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a9f      	ldr	r2, [pc, #636]	; (8005234 <UART_SetConfig+0x2f8>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d121      	bne.n	8005000 <UART_SetConfig+0xc4>
 8004fbc:	4b9e      	ldr	r3, [pc, #632]	; (8005238 <UART_SetConfig+0x2fc>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d816      	bhi.n	8004ff8 <UART_SetConfig+0xbc>
 8004fca:	a201      	add	r2, pc, #4	; (adr r2, 8004fd0 <UART_SetConfig+0x94>)
 8004fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fed 	.word	0x08004fed
 8004fd8:	08004fe7 	.word	0x08004fe7
 8004fdc:	08004ff3 	.word	0x08004ff3
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e151      	b.n	800528a <UART_SetConfig+0x34e>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e14e      	b.n	800528a <UART_SetConfig+0x34e>
 8004fec:	2304      	movs	r3, #4
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e14b      	b.n	800528a <UART_SetConfig+0x34e>
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e148      	b.n	800528a <UART_SetConfig+0x34e>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	77fb      	strb	r3, [r7, #31]
 8004ffc:	bf00      	nop
 8004ffe:	e144      	b.n	800528a <UART_SetConfig+0x34e>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a8d      	ldr	r2, [pc, #564]	; (800523c <UART_SetConfig+0x300>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d134      	bne.n	8005074 <UART_SetConfig+0x138>
 800500a:	4b8b      	ldr	r3, [pc, #556]	; (8005238 <UART_SetConfig+0x2fc>)
 800500c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005010:	f003 030c 	and.w	r3, r3, #12
 8005014:	2b0c      	cmp	r3, #12
 8005016:	d829      	bhi.n	800506c <UART_SetConfig+0x130>
 8005018:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0xe4>)
 800501a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501e:	bf00      	nop
 8005020:	08005055 	.word	0x08005055
 8005024:	0800506d 	.word	0x0800506d
 8005028:	0800506d 	.word	0x0800506d
 800502c:	0800506d 	.word	0x0800506d
 8005030:	08005061 	.word	0x08005061
 8005034:	0800506d 	.word	0x0800506d
 8005038:	0800506d 	.word	0x0800506d
 800503c:	0800506d 	.word	0x0800506d
 8005040:	0800505b 	.word	0x0800505b
 8005044:	0800506d 	.word	0x0800506d
 8005048:	0800506d 	.word	0x0800506d
 800504c:	0800506d 	.word	0x0800506d
 8005050:	08005067 	.word	0x08005067
 8005054:	2300      	movs	r3, #0
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e117      	b.n	800528a <UART_SetConfig+0x34e>
 800505a:	2302      	movs	r3, #2
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e114      	b.n	800528a <UART_SetConfig+0x34e>
 8005060:	2304      	movs	r3, #4
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e111      	b.n	800528a <UART_SetConfig+0x34e>
 8005066:	2308      	movs	r3, #8
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e10e      	b.n	800528a <UART_SetConfig+0x34e>
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	bf00      	nop
 8005072:	e10a      	b.n	800528a <UART_SetConfig+0x34e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a71      	ldr	r2, [pc, #452]	; (8005240 <UART_SetConfig+0x304>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d120      	bne.n	80050c0 <UART_SetConfig+0x184>
 800507e:	4b6e      	ldr	r3, [pc, #440]	; (8005238 <UART_SetConfig+0x2fc>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005088:	2b10      	cmp	r3, #16
 800508a:	d00f      	beq.n	80050ac <UART_SetConfig+0x170>
 800508c:	2b10      	cmp	r3, #16
 800508e:	d802      	bhi.n	8005096 <UART_SetConfig+0x15a>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <UART_SetConfig+0x164>
 8005094:	e010      	b.n	80050b8 <UART_SetConfig+0x17c>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d005      	beq.n	80050a6 <UART_SetConfig+0x16a>
 800509a:	2b30      	cmp	r3, #48	; 0x30
 800509c:	d009      	beq.n	80050b2 <UART_SetConfig+0x176>
 800509e:	e00b      	b.n	80050b8 <UART_SetConfig+0x17c>
 80050a0:	2300      	movs	r3, #0
 80050a2:	77fb      	strb	r3, [r7, #31]
 80050a4:	e0f1      	b.n	800528a <UART_SetConfig+0x34e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e0ee      	b.n	800528a <UART_SetConfig+0x34e>
 80050ac:	2304      	movs	r3, #4
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e0eb      	b.n	800528a <UART_SetConfig+0x34e>
 80050b2:	2308      	movs	r3, #8
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e0e8      	b.n	800528a <UART_SetConfig+0x34e>
 80050b8:	2310      	movs	r3, #16
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	bf00      	nop
 80050be:	e0e4      	b.n	800528a <UART_SetConfig+0x34e>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5f      	ldr	r2, [pc, #380]	; (8005244 <UART_SetConfig+0x308>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d120      	bne.n	800510c <UART_SetConfig+0x1d0>
 80050ca:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <UART_SetConfig+0x2fc>)
 80050cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d00f      	beq.n	80050f8 <UART_SetConfig+0x1bc>
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d802      	bhi.n	80050e2 <UART_SetConfig+0x1a6>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <UART_SetConfig+0x1b0>
 80050e0:	e010      	b.n	8005104 <UART_SetConfig+0x1c8>
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	d005      	beq.n	80050f2 <UART_SetConfig+0x1b6>
 80050e6:	2bc0      	cmp	r3, #192	; 0xc0
 80050e8:	d009      	beq.n	80050fe <UART_SetConfig+0x1c2>
 80050ea:	e00b      	b.n	8005104 <UART_SetConfig+0x1c8>
 80050ec:	2300      	movs	r3, #0
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e0cb      	b.n	800528a <UART_SetConfig+0x34e>
 80050f2:	2302      	movs	r3, #2
 80050f4:	77fb      	strb	r3, [r7, #31]
 80050f6:	e0c8      	b.n	800528a <UART_SetConfig+0x34e>
 80050f8:	2304      	movs	r3, #4
 80050fa:	77fb      	strb	r3, [r7, #31]
 80050fc:	e0c5      	b.n	800528a <UART_SetConfig+0x34e>
 80050fe:	2308      	movs	r3, #8
 8005100:	77fb      	strb	r3, [r7, #31]
 8005102:	e0c2      	b.n	800528a <UART_SetConfig+0x34e>
 8005104:	2310      	movs	r3, #16
 8005106:	77fb      	strb	r3, [r7, #31]
 8005108:	bf00      	nop
 800510a:	e0be      	b.n	800528a <UART_SetConfig+0x34e>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a4d      	ldr	r2, [pc, #308]	; (8005248 <UART_SetConfig+0x30c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d124      	bne.n	8005160 <UART_SetConfig+0x224>
 8005116:	4b48      	ldr	r3, [pc, #288]	; (8005238 <UART_SetConfig+0x2fc>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005124:	d012      	beq.n	800514c <UART_SetConfig+0x210>
 8005126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800512a:	d802      	bhi.n	8005132 <UART_SetConfig+0x1f6>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d007      	beq.n	8005140 <UART_SetConfig+0x204>
 8005130:	e012      	b.n	8005158 <UART_SetConfig+0x21c>
 8005132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005136:	d006      	beq.n	8005146 <UART_SetConfig+0x20a>
 8005138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800513c:	d009      	beq.n	8005152 <UART_SetConfig+0x216>
 800513e:	e00b      	b.n	8005158 <UART_SetConfig+0x21c>
 8005140:	2300      	movs	r3, #0
 8005142:	77fb      	strb	r3, [r7, #31]
 8005144:	e0a1      	b.n	800528a <UART_SetConfig+0x34e>
 8005146:	2302      	movs	r3, #2
 8005148:	77fb      	strb	r3, [r7, #31]
 800514a:	e09e      	b.n	800528a <UART_SetConfig+0x34e>
 800514c:	2304      	movs	r3, #4
 800514e:	77fb      	strb	r3, [r7, #31]
 8005150:	e09b      	b.n	800528a <UART_SetConfig+0x34e>
 8005152:	2308      	movs	r3, #8
 8005154:	77fb      	strb	r3, [r7, #31]
 8005156:	e098      	b.n	800528a <UART_SetConfig+0x34e>
 8005158:	2310      	movs	r3, #16
 800515a:	77fb      	strb	r3, [r7, #31]
 800515c:	bf00      	nop
 800515e:	e094      	b.n	800528a <UART_SetConfig+0x34e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a39      	ldr	r2, [pc, #228]	; (800524c <UART_SetConfig+0x310>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d124      	bne.n	80051b4 <UART_SetConfig+0x278>
 800516a:	4b33      	ldr	r3, [pc, #204]	; (8005238 <UART_SetConfig+0x2fc>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005178:	d012      	beq.n	80051a0 <UART_SetConfig+0x264>
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d802      	bhi.n	8005186 <UART_SetConfig+0x24a>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <UART_SetConfig+0x258>
 8005184:	e012      	b.n	80051ac <UART_SetConfig+0x270>
 8005186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800518a:	d006      	beq.n	800519a <UART_SetConfig+0x25e>
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005190:	d009      	beq.n	80051a6 <UART_SetConfig+0x26a>
 8005192:	e00b      	b.n	80051ac <UART_SetConfig+0x270>
 8005194:	2301      	movs	r3, #1
 8005196:	77fb      	strb	r3, [r7, #31]
 8005198:	e077      	b.n	800528a <UART_SetConfig+0x34e>
 800519a:	2302      	movs	r3, #2
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e074      	b.n	800528a <UART_SetConfig+0x34e>
 80051a0:	2304      	movs	r3, #4
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e071      	b.n	800528a <UART_SetConfig+0x34e>
 80051a6:	2308      	movs	r3, #8
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e06e      	b.n	800528a <UART_SetConfig+0x34e>
 80051ac:	2310      	movs	r3, #16
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	bf00      	nop
 80051b2:	e06a      	b.n	800528a <UART_SetConfig+0x34e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <UART_SetConfig+0x314>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d124      	bne.n	8005208 <UART_SetConfig+0x2cc>
 80051be:	4b1e      	ldr	r3, [pc, #120]	; (8005238 <UART_SetConfig+0x2fc>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d012      	beq.n	80051f4 <UART_SetConfig+0x2b8>
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d802      	bhi.n	80051da <UART_SetConfig+0x29e>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d007      	beq.n	80051e8 <UART_SetConfig+0x2ac>
 80051d8:	e012      	b.n	8005200 <UART_SetConfig+0x2c4>
 80051da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051de:	d006      	beq.n	80051ee <UART_SetConfig+0x2b2>
 80051e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051e4:	d009      	beq.n	80051fa <UART_SetConfig+0x2be>
 80051e6:	e00b      	b.n	8005200 <UART_SetConfig+0x2c4>
 80051e8:	2300      	movs	r3, #0
 80051ea:	77fb      	strb	r3, [r7, #31]
 80051ec:	e04d      	b.n	800528a <UART_SetConfig+0x34e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	77fb      	strb	r3, [r7, #31]
 80051f2:	e04a      	b.n	800528a <UART_SetConfig+0x34e>
 80051f4:	2304      	movs	r3, #4
 80051f6:	77fb      	strb	r3, [r7, #31]
 80051f8:	e047      	b.n	800528a <UART_SetConfig+0x34e>
 80051fa:	2308      	movs	r3, #8
 80051fc:	77fb      	strb	r3, [r7, #31]
 80051fe:	e044      	b.n	800528a <UART_SetConfig+0x34e>
 8005200:	2310      	movs	r3, #16
 8005202:	77fb      	strb	r3, [r7, #31]
 8005204:	bf00      	nop
 8005206:	e040      	b.n	800528a <UART_SetConfig+0x34e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <UART_SetConfig+0x318>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d139      	bne.n	8005286 <UART_SetConfig+0x34a>
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <UART_SetConfig+0x2fc>)
 8005214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800521c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005220:	d027      	beq.n	8005272 <UART_SetConfig+0x336>
 8005222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005226:	d817      	bhi.n	8005258 <UART_SetConfig+0x31c>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01c      	beq.n	8005266 <UART_SetConfig+0x32a>
 800522c:	e027      	b.n	800527e <UART_SetConfig+0x342>
 800522e:	bf00      	nop
 8005230:	efff69f3 	.word	0xefff69f3
 8005234:	40011000 	.word	0x40011000
 8005238:	40023800 	.word	0x40023800
 800523c:	40004400 	.word	0x40004400
 8005240:	40004800 	.word	0x40004800
 8005244:	40004c00 	.word	0x40004c00
 8005248:	40005000 	.word	0x40005000
 800524c:	40011400 	.word	0x40011400
 8005250:	40007800 	.word	0x40007800
 8005254:	40007c00 	.word	0x40007c00
 8005258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800525c:	d006      	beq.n	800526c <UART_SetConfig+0x330>
 800525e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005262:	d009      	beq.n	8005278 <UART_SetConfig+0x33c>
 8005264:	e00b      	b.n	800527e <UART_SetConfig+0x342>
 8005266:	2300      	movs	r3, #0
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e00e      	b.n	800528a <UART_SetConfig+0x34e>
 800526c:	2302      	movs	r3, #2
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e00b      	b.n	800528a <UART_SetConfig+0x34e>
 8005272:	2304      	movs	r3, #4
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e008      	b.n	800528a <UART_SetConfig+0x34e>
 8005278:	2308      	movs	r3, #8
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e005      	b.n	800528a <UART_SetConfig+0x34e>
 800527e:	2310      	movs	r3, #16
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	bf00      	nop
 8005284:	e001      	b.n	800528a <UART_SetConfig+0x34e>
 8005286:	2310      	movs	r3, #16
 8005288:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005292:	d17f      	bne.n	8005394 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005294:	7ffb      	ldrb	r3, [r7, #31]
 8005296:	2b08      	cmp	r3, #8
 8005298:	d85c      	bhi.n	8005354 <UART_SetConfig+0x418>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <UART_SetConfig+0x364>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052e5 	.word	0x080052e5
 80052a8:	08005305 	.word	0x08005305
 80052ac:	08005355 	.word	0x08005355
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	08005355 	.word	0x08005355
 80052b8:	08005355 	.word	0x08005355
 80052bc:	08005355 	.word	0x08005355
 80052c0:	0800533d 	.word	0x0800533d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052c4:	f7fe fa2a 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 80052c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	61bb      	str	r3, [r7, #24]
        break;
 80052e2:	e03a      	b.n	800535a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e4:	f7fe fa2e 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 80052e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	005a      	lsls	r2, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fe:	b29b      	uxth	r3, r3
 8005300:	61bb      	str	r3, [r7, #24]
        break;
 8005302:	e02a      	b.n	800535a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	085a      	lsrs	r2, r3, #1
 800530a:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <UART_SetConfig+0x54c>)
 800530c:	4413      	add	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6852      	ldr	r2, [r2, #4]
 8005312:	fbb3 f3f2 	udiv	r3, r3, r2
 8005316:	b29b      	uxth	r3, r3
 8005318:	61bb      	str	r3, [r7, #24]
        break;
 800531a:	e01e      	b.n	800535a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531c:	f7fe f91a 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8005320:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	005a      	lsls	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	441a      	add	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	fbb2 f3f3 	udiv	r3, r2, r3
 8005336:	b29b      	uxth	r3, r3
 8005338:	61bb      	str	r3, [r7, #24]
        break;
 800533a:	e00e      	b.n	800535a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	b29b      	uxth	r3, r3
 8005350:	61bb      	str	r3, [r7, #24]
        break;
 8005352:	e002      	b.n	800535a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
        break;
 8005358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	2b0f      	cmp	r3, #15
 800535e:	d916      	bls.n	800538e <UART_SetConfig+0x452>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005366:	d212      	bcs.n	800538e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	b29b      	uxth	r3, r3
 800536c:	f023 030f 	bic.w	r3, r3, #15
 8005370:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	b29b      	uxth	r3, r3
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	b29a      	uxth	r2, r3
 800537e:	897b      	ldrh	r3, [r7, #10]
 8005380:	4313      	orrs	r3, r2
 8005382:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	897a      	ldrh	r2, [r7, #10]
 800538a:	60da      	str	r2, [r3, #12]
 800538c:	e070      	b.n	8005470 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	75fb      	strb	r3, [r7, #23]
 8005392:	e06d      	b.n	8005470 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005394:	7ffb      	ldrb	r3, [r7, #31]
 8005396:	2b08      	cmp	r3, #8
 8005398:	d859      	bhi.n	800544e <UART_SetConfig+0x512>
 800539a:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <UART_SetConfig+0x464>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053e3 	.word	0x080053e3
 80053a8:	08005401 	.word	0x08005401
 80053ac:	0800544f 	.word	0x0800544f
 80053b0:	08005419 	.word	0x08005419
 80053b4:	0800544f 	.word	0x0800544f
 80053b8:	0800544f 	.word	0x0800544f
 80053bc:	0800544f 	.word	0x0800544f
 80053c0:	08005437 	.word	0x08005437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fe f9aa 	bl	800371c <HAL_RCC_GetPCLK1Freq>
 80053c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	085a      	lsrs	r2, r3, #1
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	441a      	add	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	b29b      	uxth	r3, r3
 80053de:	61bb      	str	r3, [r7, #24]
        break;
 80053e0:	e038      	b.n	8005454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e2:	f7fe f9af 	bl	8003744 <HAL_RCC_GetPCLK2Freq>
 80053e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	085a      	lsrs	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	441a      	add	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	61bb      	str	r3, [r7, #24]
        break;
 80053fe:	e029      	b.n	8005454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	085a      	lsrs	r2, r3, #1
 8005406:	4b21      	ldr	r3, [pc, #132]	; (800548c <UART_SetConfig+0x550>)
 8005408:	4413      	add	r3, r2
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6852      	ldr	r2, [r2, #4]
 800540e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	61bb      	str	r3, [r7, #24]
        break;
 8005416:	e01d      	b.n	8005454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005418:	f7fe f89c 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 800541c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	085a      	lsrs	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	441a      	add	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	b29b      	uxth	r3, r3
 8005432:	61bb      	str	r3, [r7, #24]
        break;
 8005434:	e00e      	b.n	8005454 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	b29b      	uxth	r3, r3
 800544a:	61bb      	str	r3, [r7, #24]
        break;
 800544c:	e002      	b.n	8005454 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	75fb      	strb	r3, [r7, #23]
        break;
 8005452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b0f      	cmp	r3, #15
 8005458:	d908      	bls.n	800546c <UART_SetConfig+0x530>
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d204      	bcs.n	800546c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e001      	b.n	8005470 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800547c:	7dfb      	ldrb	r3, [r7, #23]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	01e84800 	.word	0x01e84800
 800548c:	00f42400 	.word	0x00f42400

08005490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00a      	beq.n	80054fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00a      	beq.n	8005520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d01a      	beq.n	80055a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558e:	d10a      	bne.n	80055a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	605a      	str	r2, [r3, #4]
  }
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af02      	add	r7, sp, #8
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055e2:	f7fc ff89 	bl	80024f8 <HAL_GetTick>
 80055e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0308 	and.w	r3, r3, #8
 80055f2:	2b08      	cmp	r3, #8
 80055f4:	d10e      	bne.n	8005614 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f814 	bl	8005632 <UART_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e00a      	b.n	800562a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005642:	e05d      	b.n	8005700 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564a:	d059      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564c:	f7fc ff54 	bl	80024f8 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	429a      	cmp	r2, r3
 800565a:	d302      	bcc.n	8005662 <UART_WaitOnFlagUntilTimeout+0x30>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d11b      	bne.n	800569a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005670:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2220      	movs	r2, #32
 8005686:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e042      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d02b      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b6:	d123      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056c0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056d0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0201 	bic.w	r2, r2, #1
 80056e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2220      	movs	r2, #32
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e00f      	b.n	8005720 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4013      	ands	r3, r2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	429a      	cmp	r2, r3
 800570e:	bf0c      	ite	eq
 8005710:	2301      	moveq	r3, #1
 8005712:	2300      	movne	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	461a      	mov	r2, r3
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	429a      	cmp	r2, r3
 800571c:	d092      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 001c 	add.w	r0, r7, #28
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	2b01      	cmp	r3, #1
 800573e:	d126      	bne.n	800578e <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	4b23      	ldr	r3, [pc, #140]	; (80057e0 <USB_CoreInit+0xb8>)
 8005752:	4013      	ands	r3, r2
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f043 0210 	orr.w	r2, r3, #16
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fa52 	bl	8005c2c <USB_CoreReset>
 8005788:	4603      	mov	r3, r0
 800578a:	73fb      	strb	r3, [r7, #15]
 800578c:	e010      	b.n	80057b0 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fa46 	bl	8005c2c <USB_CoreReset>
 80057a0:	4603      	mov	r3, r0
 80057a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d10b      	bne.n	80057ce <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f043 0206 	orr.w	r2, r3, #6
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f043 0220 	orr.w	r2, r3, #32
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057da:	b004      	add	sp, #16
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	ffbdffbf 	.word	0xffbdffbf

080057e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f023 0201 	bic.w	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d106      	bne.n	8005832 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]
 8005830:	e00b      	b.n	800584a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	60da      	str	r2, [r3, #12]
 8005844:	e001      	b.n	800584a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e003      	b.n	8005852 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800584a:	2032      	movs	r0, #50	; 0x32
 800584c:	f7fc fe60 	bl	8002510 <HAL_Delay>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800585c:	b084      	sub	sp, #16
 800585e:	b580      	push	{r7, lr}
 8005860:	b086      	sub	sp, #24
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800586a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800586e:	2300      	movs	r3, #0
 8005870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
 800587a:	e009      	b.n	8005890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	3340      	adds	r3, #64	; 0x40
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3301      	adds	r3, #1
 800588e:	613b      	str	r3, [r7, #16]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b0e      	cmp	r3, #14
 8005894:	d9f2      	bls.n	800587c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d11c      	bne.n	80058d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058aa:	f043 0302 	orr.w	r3, r3, #2
 80058ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e005      	b.n	80058e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f4:	4619      	mov	r1, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fc:	461a      	mov	r2, r3
 80058fe:	680b      	ldr	r3, [r1, #0]
 8005900:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10c      	bne.n	8005922 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800590e:	2100      	movs	r1, #0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f959 	bl	8005bc8 <USB_SetDevSpeed>
 8005916:	e018      	b.n	800594a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005918:	2101      	movs	r1, #1
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f954 	bl	8005bc8 <USB_SetDevSpeed>
 8005920:	e013      	b.n	800594a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10c      	bne.n	8005942 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800592e:	2100      	movs	r1, #0
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f949 	bl	8005bc8 <USB_SetDevSpeed>
 8005936:	e008      	b.n	800594a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005938:	2101      	movs	r1, #1
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f944 	bl	8005bc8 <USB_SetDevSpeed>
 8005940:	e003      	b.n	800594a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005942:	2103      	movs	r1, #3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f93f 	bl	8005bc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800594a:	2110      	movs	r1, #16
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f8f3 	bl	8005b38 <USB_FlushTxFifo>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f911 	bl	8005b84 <USB_FlushRxFifo>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	461a      	mov	r2, r3
 8005974:	2300      	movs	r3, #0
 8005976:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	461a      	mov	r2, r3
 8005980:	2300      	movs	r3, #0
 8005982:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e043      	b.n	8005a1e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ac:	d118      	bne.n	80059e0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e013      	b.n	80059f2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d6:	461a      	mov	r2, r3
 80059d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	e008      	b.n	80059f2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fe:	461a      	mov	r2, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a10:	461a      	mov	r2, r3
 8005a12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d3b7      	bcc.n	8005996 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a26:	2300      	movs	r3, #0
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	e043      	b.n	8005ab4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a42:	d118      	bne.n	8005a76 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e013      	b.n	8005a88 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e008      	b.n	8005a88 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005aac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d3b7      	bcc.n	8005a2c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ace:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005adc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f043 0210 	orr.w	r2, r3, #16
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <USB_DevInit+0x2d4>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	f043 0208 	orr.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <USB_DevInit+0x2d8>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b2c:	b004      	add	sp, #16
 8005b2e:	4770      	bx	lr
 8005b30:	803c3800 	.word	0x803c3800
 8005b34:	40000004 	.word	0x40000004

08005b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	f043 0220 	orr.w	r2, r3, #32
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4a09      	ldr	r2, [pc, #36]	; (8005b80 <USB_FlushTxFifo+0x48>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d901      	bls.n	8005b64 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e006      	b.n	8005b72 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	d0f0      	beq.n	8005b52 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	00030d40 	.word	0x00030d40

08005b84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2210      	movs	r2, #16
 8005b94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	4a09      	ldr	r2, [pc, #36]	; (8005bc4 <USB_FlushRxFifo+0x40>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e006      	b.n	8005bb6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d0f0      	beq.n	8005b96 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	00030d40 	.word	0x00030d40

08005bc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be8:	4313      	orrs	r3, r2
 8005bea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c14:	f043 0302 	orr.w	r3, r3, #2
 8005c18:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005c1a:	2003      	movs	r0, #3
 8005c1c:	f7fc fc78 	bl	8002510 <HAL_Delay>

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	4a13      	ldr	r2, [pc, #76]	; (8005c90 <USB_CoreReset+0x64>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d901      	bls.n	8005c4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e01b      	b.n	8005c82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	daf2      	bge.n	8005c38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f043 0201 	orr.w	r2, r3, #1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3301      	adds	r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <USB_CoreReset+0x64>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e006      	b.n	8005c82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d0f0      	beq.n	8005c62 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	00030d40 	.word	0x00030d40

08005c94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c98:	bf00      	nop
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
	...

08005ca4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005caa:	f3ef 8305 	mrs	r3, IPSR
 8005cae:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10f      	bne.n	8005cd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cba:	607b      	str	r3, [r7, #4]
  return(result);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d105      	bne.n	8005cce <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc6:	603b      	str	r3, [r7, #0]
  return(result);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <osKernelInitialize+0x3a>
 8005cce:	4b0e      	ldr	r3, [pc, #56]	; (8005d08 <osKernelInitialize+0x64>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d103      	bne.n	8005cde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005cd6:	f06f 0305 	mvn.w	r3, #5
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	e00c      	b.n	8005cf8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <osKernelInitialize+0x64>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d105      	bne.n	8005cf2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ce6:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <osKernelInitialize+0x64>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e002      	b.n	8005cf8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000208 	.word	0x20000208

08005d0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d12:	f3ef 8305 	mrs	r3, IPSR
 8005d16:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d22:	607b      	str	r3, [r7, #4]
  return(result);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2e:	603b      	str	r3, [r7, #0]
  return(result);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <osKernelStart+0x3a>
 8005d36:	4b0f      	ldr	r3, [pc, #60]	; (8005d74 <osKernelStart+0x68>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d103      	bne.n	8005d46 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005d3e:	f06f 0305 	mvn.w	r3, #5
 8005d42:	60fb      	str	r3, [r7, #12]
 8005d44:	e010      	b.n	8005d68 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d46:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <osKernelStart+0x68>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d109      	bne.n	8005d62 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d4e:	f7ff ffa1 	bl	8005c94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d52:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <osKernelStart+0x68>)
 8005d54:	2202      	movs	r2, #2
 8005d56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d58:	f001 f98e 	bl	8007078 <vTaskStartScheduler>
      stat = osOK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	e002      	b.n	8005d68 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d66:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d68:	68fb      	ldr	r3, [r7, #12]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000208 	.word	0x20000208

08005d78 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d7e:	f3ef 8305 	mrs	r3, IPSR
 8005d82:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d84:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10f      	bne.n	8005daa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8e:	607b      	str	r3, [r7, #4]
  return(result);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d105      	bne.n	8005da2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d96:	f3ef 8311 	mrs	r3, BASEPRI
 8005d9a:	603b      	str	r3, [r7, #0]
  return(result);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d007      	beq.n	8005db2 <osKernelGetTickCount+0x3a>
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <osKernelGetTickCount+0x4c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d103      	bne.n	8005db2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8005daa:	f001 fa89 	bl	80072c0 <xTaskGetTickCountFromISR>
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8005db2:	f001 fa75 	bl	80072a0 <xTaskGetTickCount>
 8005db6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8005db8:	68fb      	ldr	r3, [r7, #12]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	20000208 	.word	0x20000208

08005dc8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8005dcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
	...

08005ddc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b090      	sub	sp, #64	; 0x40
 8005de0:	af04      	add	r7, sp, #16
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dec:	f3ef 8305 	mrs	r3, IPSR
 8005df0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005df2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 808f 	bne.w	8005f18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfe:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e06:	f3ef 8311 	mrs	r3, BASEPRI
 8005e0a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osThreadNew+0x3e>
 8005e12:	4b44      	ldr	r3, [pc, #272]	; (8005f24 <osThreadNew+0x148>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d07e      	beq.n	8005f18 <osThreadNew+0x13c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d07b      	beq.n	8005f18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005e20:	2380      	movs	r3, #128	; 0x80
 8005e22:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005e24:	2318      	movs	r3, #24
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e30:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d045      	beq.n	8005ec4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <osThreadNew+0x6a>
        name = attr->name;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <osThreadNew+0x90>
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	2b38      	cmp	r3, #56	; 0x38
 8005e5e:	d805      	bhi.n	8005e6c <osThreadNew+0x90>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <osThreadNew+0x94>
        return (NULL);
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e054      	b.n	8005f1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00e      	beq.n	8005ea6 <osThreadNew+0xca>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	2b5b      	cmp	r3, #91	; 0x5b
 8005e8e:	d90a      	bls.n	8005ea6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d006      	beq.n	8005ea6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <osThreadNew+0xca>
        mem = 1;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	e010      	b.n	8005ec8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <osThreadNew+0xec>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d108      	bne.n	8005ec8 <osThreadNew+0xec>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <osThreadNew+0xec>
          mem = 0;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	e001      	b.n	8005ec8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d110      	bne.n	8005ef0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ed6:	9202      	str	r2, [sp, #8]
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f000 fe6b 	bl	8006bc0 <xTaskCreateStatic>
 8005eea:	4603      	mov	r3, r0
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	e013      	b.n	8005f18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d110      	bne.n	8005f18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f107 0310 	add.w	r3, r7, #16
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 feb9 	bl	8006c80 <xTaskCreate>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d001      	beq.n	8005f18 <osThreadNew+0x13c>
          hTask = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f18:	693b      	ldr	r3, [r7, #16]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3730      	adds	r7, #48	; 0x30
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000208 	.word	0x20000208

08005f28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f30:	f3ef 8305 	mrs	r3, IPSR
 8005f34:	613b      	str	r3, [r7, #16]
  return(result);
 8005f36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10f      	bne.n	8005f5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d105      	bne.n	8005f54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005f48:	f3ef 8311 	mrs	r3, BASEPRI
 8005f4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <osDelay+0x3c>
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <osDelay+0x58>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d103      	bne.n	8005f64 <osDelay+0x3c>
    stat = osErrorISR;
 8005f5c:	f06f 0305 	mvn.w	r3, #5
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	e007      	b.n	8005f74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 f84c 	bl	800700c <vTaskDelay>
    }
  }

  return (stat);
 8005f74:	697b      	ldr	r3, [r7, #20]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	20000208 	.word	0x20000208

08005f84 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f8c:	f3ef 8305 	mrs	r3, IPSR
 8005f90:	617b      	str	r3, [r7, #20]
  return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10f      	bne.n	8005fb8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f98:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d105      	bne.n	8005fb0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d007      	beq.n	8005fc0 <osDelayUntil+0x3c>
 8005fb0:	4b13      	ldr	r3, [pc, #76]	; (8006000 <osDelayUntil+0x7c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d103      	bne.n	8005fc0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8005fb8:	f06f 0305 	mvn.w	r3, #5
 8005fbc:	61fb      	str	r3, [r7, #28]
 8005fbe:	e019      	b.n	8005ff4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8005fc4:	f001 f96c 	bl	80072a0 <xTaskGetTickCount>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d009      	beq.n	8005fee <osDelayUntil+0x6a>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db06      	blt.n	8005fee <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8005fe0:	f107 0308 	add.w	r3, r7, #8
 8005fe4:	69b9      	ldr	r1, [r7, #24]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 ff90 	bl	8006f0c <vTaskDelayUntil>
 8005fec:	e002      	b.n	8005ff4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8005fee:	f06f 0303 	mvn.w	r3, #3
 8005ff2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8005ff4:	69fb      	ldr	r3, [r7, #28]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000208 	.word	0x20000208

08006004 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4a07      	ldr	r2, [pc, #28]	; (8006030 <vApplicationGetIdleTaskMemory+0x2c>)
 8006014:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4a06      	ldr	r2, [pc, #24]	; (8006034 <vApplicationGetIdleTaskMemory+0x30>)
 800601a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2280      	movs	r2, #128	; 0x80
 8006020:	601a      	str	r2, [r3, #0]
}
 8006022:	bf00      	nop
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000020c 	.word	0x2000020c
 8006034:	20000268 	.word	0x20000268

08006038 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4a07      	ldr	r2, [pc, #28]	; (8006064 <vApplicationGetTimerTaskMemory+0x2c>)
 8006048:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4a06      	ldr	r2, [pc, #24]	; (8006068 <vApplicationGetTimerTaskMemory+0x30>)
 800604e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006056:	601a      	str	r2, [r3, #0]
}
 8006058:	bf00      	nop
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000468 	.word	0x20000468
 8006068:	200004c4 	.word	0x200004c4

0800606c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f103 0208 	add.w	r2, r3, #8
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006084:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f103 0208 	add.w	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f103 0208 	add.w	r2, r3, #8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d103      	bne.n	800612e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	60fb      	str	r3, [r7, #12]
 800612c:	e00c      	b.n	8006148 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3308      	adds	r3, #8
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e002      	b.n	800613c <vListInsert+0x2e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	d2f6      	bcs.n	8006136 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	601a      	str	r2, [r3, #0]
}
 8006174:	bf00      	nop
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6852      	ldr	r2, [r2, #4]
 80061a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d103      	bne.n	80061b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1e5a      	subs	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	b672      	cpsid	i
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	b662      	cpsie	i
 80061fc:	60bb      	str	r3, [r7, #8]
 80061fe:	e7fe      	b.n	80061fe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006200:	f002 f8da 	bl	80083b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	68f9      	ldr	r1, [r7, #12]
 800620e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	441a      	add	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006230:	3b01      	subs	r3, #1
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	22ff      	movs	r2, #255	; 0xff
 8006244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	22ff      	movs	r2, #255	; 0xff
 800624c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d114      	bne.n	8006280 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01a      	beq.n	8006294 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3310      	adds	r3, #16
 8006262:	4618      	mov	r0, r3
 8006264:	f001 f9a8 	bl	80075b8 <xTaskRemoveFromEventList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d012      	beq.n	8006294 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <xQueueGenericReset+0xd0>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	e009      	b.n	8006294 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3310      	adds	r3, #16
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fef1 	bl	800606c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3324      	adds	r3, #36	; 0x24
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff feec 	bl	800606c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006294:	f002 f8c2 	bl	800841c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006298:	2301      	movs	r3, #1
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10b      	bne.n	80062d4 <xQueueGenericCreateStatic+0x2c>
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	b672      	cpsid	i
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	b662      	cpsie	i
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d2:	e7fe      	b.n	80062d2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <xQueueGenericCreateStatic+0x4a>
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	b672      	cpsid	i
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	b662      	cpsie	i
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
 80062f0:	e7fe      	b.n	80062f0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <xQueueGenericCreateStatic+0x56>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <xQueueGenericCreateStatic+0x5a>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <xQueueGenericCreateStatic+0x5c>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <xQueueGenericCreateStatic+0x78>
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	b672      	cpsid	i
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	b662      	cpsie	i
 800631c:	623b      	str	r3, [r7, #32]
 800631e:	e7fe      	b.n	800631e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <xQueueGenericCreateStatic+0x84>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <xQueueGenericCreateStatic+0x88>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <xQueueGenericCreateStatic+0x8a>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d10b      	bne.n	800634e <xQueueGenericCreateStatic+0xa6>
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	b672      	cpsid	i
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	b662      	cpsie	i
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	e7fe      	b.n	800634c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800634e:	2350      	movs	r3, #80	; 0x50
 8006350:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b50      	cmp	r3, #80	; 0x50
 8006356:	d00b      	beq.n	8006370 <xQueueGenericCreateStatic+0xc8>
 8006358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635c:	b672      	cpsid	i
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	b662      	cpsie	i
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	e7fe      	b.n	800636e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006370:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00d      	beq.n	8006398 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800637c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637e:	2201      	movs	r2, #1
 8006380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006384:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f805 	bl	80063a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800639a:	4618      	mov	r0, r3
 800639c:	3730      	adds	r7, #48	; 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	60b9      	str	r1, [r7, #8]
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d103      	bne.n	80063be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e002      	b.n	80063c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063d0:	2101      	movs	r1, #1
 80063d2:	69b8      	ldr	r0, [r7, #24]
 80063d4:	f7ff fefe 	bl	80061d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08e      	sub	sp, #56	; 0x38
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063f6:	2300      	movs	r3, #0
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <xQueueGenericSend+0x34>
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	b672      	cpsid	i
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	b662      	cpsie	i
 8006418:	62bb      	str	r3, [r7, #40]	; 0x28
 800641a:	e7fe      	b.n	800641a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d103      	bne.n	800642a <xQueueGenericSend+0x42>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xQueueGenericSend+0x46>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueGenericSend+0x48>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10b      	bne.n	800644c <xQueueGenericSend+0x64>
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	b672      	cpsid	i
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	b662      	cpsie	i
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
 800644a:	e7fe      	b.n	800644a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b02      	cmp	r3, #2
 8006450:	d103      	bne.n	800645a <xQueueGenericSend+0x72>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006456:	2b01      	cmp	r3, #1
 8006458:	d101      	bne.n	800645e <xQueueGenericSend+0x76>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <xQueueGenericSend+0x78>
 800645e:	2300      	movs	r3, #0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <xQueueGenericSend+0x94>
 8006464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006468:	b672      	cpsid	i
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	b662      	cpsie	i
 8006478:	623b      	str	r3, [r7, #32]
 800647a:	e7fe      	b.n	800647a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800647c:	f001 fa5a 	bl	8007934 <xTaskGetSchedulerState>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d102      	bne.n	800648c <xQueueGenericSend+0xa4>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xQueueGenericSend+0xa8>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <xQueueGenericSend+0xaa>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10b      	bne.n	80064ae <xQueueGenericSend+0xc6>
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	b672      	cpsid	i
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	b662      	cpsie	i
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e7fe      	b.n	80064ac <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064ae:	f001 ff83 	bl	80083b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d302      	bcc.n	80064c4 <xQueueGenericSend+0xdc>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d129      	bne.n	8006518 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	68b9      	ldr	r1, [r7, #8]
 80064c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ca:	f000 fa0d 	bl	80068e8 <prvCopyDataToQueue>
 80064ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d010      	beq.n	80064fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	3324      	adds	r3, #36	; 0x24
 80064dc:	4618      	mov	r0, r3
 80064de:	f001 f86b 	bl	80075b8 <xTaskRemoveFromEventList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d013      	beq.n	8006510 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064e8:	4b3f      	ldr	r3, [pc, #252]	; (80065e8 <xQueueGenericSend+0x200>)
 80064ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	e00a      	b.n	8006510 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006500:	4b39      	ldr	r3, [pc, #228]	; (80065e8 <xQueueGenericSend+0x200>)
 8006502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006510:	f001 ff84 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8006514:	2301      	movs	r3, #1
 8006516:	e063      	b.n	80065e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d103      	bne.n	8006526 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800651e:	f001 ff7d 	bl	800841c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006522:	2300      	movs	r3, #0
 8006524:	e05c      	b.n	80065e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800652c:	f107 0314 	add.w	r3, r7, #20
 8006530:	4618      	mov	r0, r3
 8006532:	f001 f8a5 	bl	8007680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006536:	2301      	movs	r3, #1
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800653a:	f001 ff6f 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800653e:	f000 fe03 	bl	8007148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006542:	f001 ff39 	bl	80083b8 <vPortEnterCritical>
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800654c:	b25b      	sxtb	r3, r3
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006552:	d103      	bne.n	800655c <xQueueGenericSend+0x174>
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006562:	b25b      	sxtb	r3, r3
 8006564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006568:	d103      	bne.n	8006572 <xQueueGenericSend+0x18a>
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006572:	f001 ff53 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006576:	1d3a      	adds	r2, r7, #4
 8006578:	f107 0314 	add.w	r3, r7, #20
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f001 f894 	bl	80076ac <xTaskCheckForTimeOut>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d124      	bne.n	80065d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800658a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800658c:	f000 faa4 	bl	8006ad8 <prvIsQueueFull>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d018      	beq.n	80065c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	3310      	adds	r3, #16
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 ffb8 	bl	8007514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065a6:	f000 fa2f 	bl	8006a08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065aa:	f000 fddb 	bl	8007164 <xTaskResumeAll>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f47f af7c 	bne.w	80064ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065b6:	4b0c      	ldr	r3, [pc, #48]	; (80065e8 <xQueueGenericSend+0x200>)
 80065b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	e772      	b.n	80064ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065ca:	f000 fa1d 	bl	8006a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065ce:	f000 fdc9 	bl	8007164 <xTaskResumeAll>
 80065d2:	e76c      	b.n	80064ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065d6:	f000 fa17 	bl	8006a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065da:	f000 fdc3 	bl	8007164 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3738      	adds	r7, #56	; 0x38
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08e      	sub	sp, #56	; 0x38
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <xQueueGenericSendFromISR+0x30>
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	b672      	cpsid	i
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	b662      	cpsie	i
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
 800661a:	e7fe      	b.n	800661a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d103      	bne.n	800662a <xQueueGenericSendFromISR+0x3e>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <xQueueGenericSendFromISR+0x42>
 800662a:	2301      	movs	r3, #1
 800662c:	e000      	b.n	8006630 <xQueueGenericSendFromISR+0x44>
 800662e:	2300      	movs	r3, #0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <xQueueGenericSendFromISR+0x60>
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	b672      	cpsid	i
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	b662      	cpsie	i
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	e7fe      	b.n	800664a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d103      	bne.n	800665a <xQueueGenericSendFromISR+0x6e>
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <xQueueGenericSendFromISR+0x72>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <xQueueGenericSendFromISR+0x74>
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xQueueGenericSendFromISR+0x90>
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	b672      	cpsid	i
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	b662      	cpsie	i
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	e7fe      	b.n	800667a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800667c:	f001 ff7c 	bl	8008578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006680:	f3ef 8211 	mrs	r2, BASEPRI
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	b672      	cpsid	i
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	b662      	cpsie	i
 8006698:	61ba      	str	r2, [r7, #24]
 800669a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800669c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <xQueueGenericSendFromISR+0xc6>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d12c      	bne.n	800670c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	68b9      	ldr	r1, [r7, #8]
 80066c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c2:	f000 f911 	bl	80068e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ce:	d112      	bne.n	80066f6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d016      	beq.n	8006706 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066da:	3324      	adds	r3, #36	; 0x24
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 ff6b 	bl	80075b8 <xTaskRemoveFromEventList>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00e      	beq.n	8006706 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00b      	beq.n	8006706 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	601a      	str	r2, [r3, #0]
 80066f4:	e007      	b.n	8006706 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066fa:	3301      	adds	r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	b25a      	sxtb	r2, r3
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006706:	2301      	movs	r3, #1
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800670a:	e001      	b.n	8006710 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800670c:	2300      	movs	r3, #0
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006712:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800671c:	4618      	mov	r0, r3
 800671e:	3738      	adds	r7, #56	; 0x38
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	; 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006730:	2300      	movs	r3, #0
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <xQueueReceive+0x32>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	b672      	cpsid	i
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	b662      	cpsie	i
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	e7fe      	b.n	8006754 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d103      	bne.n	8006764 <xQueueReceive+0x40>
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <xQueueReceive+0x44>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <xQueueReceive+0x46>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10b      	bne.n	8006786 <xQueueReceive+0x62>
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	b672      	cpsid	i
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	b662      	cpsie	i
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e7fe      	b.n	8006784 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006786:	f001 f8d5 	bl	8007934 <xTaskGetSchedulerState>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <xQueueReceive+0x72>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <xQueueReceive+0x76>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <xQueueReceive+0x78>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <xQueueReceive+0x94>
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	b672      	cpsid	i
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	b662      	cpsie	i
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	e7fe      	b.n	80067b6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067b8:	f001 fdfe 	bl	80083b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01f      	beq.n	8006808 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067cc:	f000 f8f6 	bl	80069bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00f      	beq.n	8006800 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	3310      	adds	r3, #16
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fee7 	bl	80075b8 <xTaskRemoveFromEventList>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d007      	beq.n	8006800 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067f0:	4b3c      	ldr	r3, [pc, #240]	; (80068e4 <xQueueReceive+0x1c0>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006800:	f001 fe0c 	bl	800841c <vPortExitCritical>
				return pdPASS;
 8006804:	2301      	movs	r3, #1
 8006806:	e069      	b.n	80068dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800680e:	f001 fe05 	bl	800841c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006812:	2300      	movs	r3, #0
 8006814:	e062      	b.n	80068dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	4618      	mov	r0, r3
 8006822:	f000 ff2d 	bl	8007680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006826:	2301      	movs	r3, #1
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800682a:	f001 fdf7 	bl	800841c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800682e:	f000 fc8b 	bl	8007148 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006832:	f001 fdc1 	bl	80083b8 <vPortEnterCritical>
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800683c:	b25b      	sxtb	r3, r3
 800683e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006842:	d103      	bne.n	800684c <xQueueReceive+0x128>
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006852:	b25b      	sxtb	r3, r3
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006858:	d103      	bne.n	8006862 <xQueueReceive+0x13e>
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006862:	f001 fddb 	bl	800841c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006866:	1d3a      	adds	r2, r7, #4
 8006868:	f107 0310 	add.w	r3, r7, #16
 800686c:	4611      	mov	r1, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f000 ff1c 	bl	80076ac <xTaskCheckForTimeOut>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d123      	bne.n	80068c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800687a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800687c:	f000 f916 	bl	8006aac <prvIsQueueEmpty>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d017      	beq.n	80068b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006888:	3324      	adds	r3, #36	; 0x24
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4611      	mov	r1, r2
 800688e:	4618      	mov	r0, r3
 8006890:	f000 fe40 	bl	8007514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006896:	f000 f8b7 	bl	8006a08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800689a:	f000 fc63 	bl	8007164 <xTaskResumeAll>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d189      	bne.n	80067b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <xQueueReceive+0x1c0>)
 80068a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	e780      	b.n	80067b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068b8:	f000 f8a6 	bl	8006a08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068bc:	f000 fc52 	bl	8007164 <xTaskResumeAll>
 80068c0:	e77a      	b.n	80067b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068c4:	f000 f8a0 	bl	8006a08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068c8:	f000 fc4c 	bl	8007164 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ce:	f000 f8ed 	bl	8006aac <prvIsQueueEmpty>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f43f af6f 	beq.w	80067b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3730      	adds	r7, #48	; 0x30
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	e000ed04 	.word	0xe000ed04

080068e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d14d      	bne.n	80069aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f82c 	bl	8007970 <xTaskPriorityDisinherit>
 8006918:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	609a      	str	r2, [r3, #8]
 8006920:	e043      	b.n	80069aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d119      	bne.n	800695c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6858      	ldr	r0, [r3, #4]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	461a      	mov	r2, r3
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	f002 f90e 	bl	8008b54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	441a      	add	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d32b      	bcc.n	80069aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e026      	b.n	80069aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	68d8      	ldr	r0, [r3, #12]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006964:	461a      	mov	r2, r3
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	f002 f8f4 	bl	8008b54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	425b      	negs	r3, r3
 8006976:	441a      	add	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d207      	bcs.n	8006998 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	425b      	negs	r3, r3
 8006992:	441a      	add	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d105      	bne.n	80069aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069b2:	697b      	ldr	r3, [r7, #20]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d018      	beq.n	8006a00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d6:	441a      	add	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d303      	bcc.n	80069f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68d9      	ldr	r1, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f8:	461a      	mov	r2, r3
 80069fa:	6838      	ldr	r0, [r7, #0]
 80069fc:	f002 f8aa 	bl	8008b54 <memcpy>
	}
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a10:	f001 fcd2 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a1c:	e011      	b.n	8006a42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d012      	beq.n	8006a4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	3324      	adds	r3, #36	; 0x24
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fdc4 	bl	80075b8 <xTaskRemoveFromEventList>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a36:	f000 fe9d 	bl	8007774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dce9      	bgt.n	8006a1e <prvUnlockQueue+0x16>
 8006a4a:	e000      	b.n	8006a4e <prvUnlockQueue+0x46>
					break;
 8006a4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	22ff      	movs	r2, #255	; 0xff
 8006a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a56:	f001 fce1 	bl	800841c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a5a:	f001 fcad 	bl	80083b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a66:	e011      	b.n	8006a8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d012      	beq.n	8006a96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3310      	adds	r3, #16
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd9f 	bl	80075b8 <xTaskRemoveFromEventList>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a80:	f000 fe78 	bl	8007774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a84:	7bbb      	ldrb	r3, [r7, #14]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	dce9      	bgt.n	8006a68 <prvUnlockQueue+0x60>
 8006a94:	e000      	b.n	8006a98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	22ff      	movs	r2, #255	; 0xff
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006aa0:	f001 fcbc 	bl	800841c <vPortExitCritical>
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ab4:	f001 fc80 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d102      	bne.n	8006ac6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	60fb      	str	r3, [r7, #12]
 8006ac4:	e001      	b.n	8006aca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aca:	f001 fca7 	bl	800841c <vPortExitCritical>

	return xReturn;
 8006ace:	68fb      	ldr	r3, [r7, #12]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ae0:	f001 fc6a 	bl	80083b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d102      	bne.n	8006af6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006af0:	2301      	movs	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e001      	b.n	8006afa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006afa:	f001 fc8f 	bl	800841c <vPortExitCritical>

	return xReturn;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e014      	b.n	8006b42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b18:	4a0e      	ldr	r2, [pc, #56]	; (8006b54 <vQueueAddToRegistry+0x4c>)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10b      	bne.n	8006b3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b24:	490b      	ldr	r1, [pc, #44]	; (8006b54 <vQueueAddToRegistry+0x4c>)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <vQueueAddToRegistry+0x4c>)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	4413      	add	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b3a:	e005      	b.n	8006b48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b07      	cmp	r3, #7
 8006b46:	d9e7      	bls.n	8006b18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	2000504c 	.word	0x2000504c

08006b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b68:	f001 fc26 	bl	80083b8 <vPortEnterCritical>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b78:	d103      	bne.n	8006b82 <vQueueWaitForMessageRestricted+0x2a>
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b88:	b25b      	sxtb	r3, r3
 8006b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8e:	d103      	bne.n	8006b98 <vQueueWaitForMessageRestricted+0x40>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b98:	f001 fc40 	bl	800841c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fcd7 	bl	8007560 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bb2:	6978      	ldr	r0, [r7, #20]
 8006bb4:	f7ff ff28 	bl	8006a08 <prvUnlockQueue>
	}
 8006bb8:	bf00      	nop
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af04      	add	r7, sp, #16
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10b      	bne.n	8006bec <xTaskCreateStatic+0x2c>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	b672      	cpsid	i
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	b662      	cpsie	i
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	e7fe      	b.n	8006bea <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <xTaskCreateStatic+0x4a>
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	b672      	cpsid	i
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	b662      	cpsie	i
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e7fe      	b.n	8006c08 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c0a:	235c      	movs	r3, #92	; 0x5c
 8006c0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b5c      	cmp	r3, #92	; 0x5c
 8006c12:	d00b      	beq.n	8006c2c <xTaskCreateStatic+0x6c>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	b672      	cpsid	i
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	b662      	cpsie	i
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	e7fe      	b.n	8006c2a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01e      	beq.n	8006c72 <xTaskCreateStatic+0xb2>
 8006c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01b      	beq.n	8006c72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c42:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	9303      	str	r3, [sp, #12]
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	9302      	str	r3, [sp, #8]
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	9301      	str	r3, [sp, #4]
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	9300      	str	r3, [sp, #0]
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f850 	bl	8006d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c6c:	f000 f8de 	bl	8006e2c <prvAddNewTaskToReadyList>
 8006c70:	e001      	b.n	8006c76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c76:	697b      	ldr	r3, [r7, #20]
	}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3728      	adds	r7, #40	; 0x28
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af04      	add	r7, sp, #16
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c90:	88fb      	ldrh	r3, [r7, #6]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f001 fcb1 	bl	80085fc <pvPortMalloc>
 8006c9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00e      	beq.n	8006cc0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ca2:	205c      	movs	r0, #92	; 0x5c
 8006ca4:	f001 fcaa 	bl	80085fc <pvPortMalloc>
 8006ca8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb6:	e005      	b.n	8006cc4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb8:	6978      	ldr	r0, [r7, #20]
 8006cba:	f001 fd67 	bl	800878c <vPortFree>
 8006cbe:	e001      	b.n	8006cc4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d017      	beq.n	8006cfa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	9303      	str	r3, [sp, #12]
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	9302      	str	r3, [sp, #8]
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f80e 	bl	8006d0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cee:	69f8      	ldr	r0, [r7, #28]
 8006cf0:	f000 f89c 	bl	8006e2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	e002      	b.n	8006d00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d00:	69bb      	ldr	r3, [r7, #24]
	}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3720      	adds	r7, #32
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b088      	sub	sp, #32
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	60f8      	str	r0, [r7, #12]
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	461a      	mov	r2, r3
 8006d22:	21a5      	movs	r1, #165	; 0xa5
 8006d24:	f001 ff21 	bl	8008b6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d32:	440b      	add	r3, r1
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f023 0307 	bic.w	r3, r3, #7
 8006d40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <prvInitialiseNewTask+0x5a>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	b672      	cpsid	i
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	b662      	cpsie	i
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e7fe      	b.n	8006d62 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01f      	beq.n	8006daa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
 8006d6e:	e012      	b.n	8006d96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	4413      	add	r3, r2
 8006d76:	7819      	ldrb	r1, [r3, #0]
 8006d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3334      	adds	r3, #52	; 0x34
 8006d80:	460a      	mov	r2, r1
 8006d82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	2b0f      	cmp	r3, #15
 8006d9a:	d9e9      	bls.n	8006d70 <prvInitialiseNewTask+0x66>
 8006d9c:	e000      	b.n	8006da0 <prvInitialiseNewTask+0x96>
			{
				break;
 8006d9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006da8:	e003      	b.n	8006db2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	2b37      	cmp	r3, #55	; 0x37
 8006db6:	d901      	bls.n	8006dbc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db8:	2337      	movs	r3, #55	; 0x37
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2200      	movs	r2, #0
 8006dcc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff f96a 	bl	80060ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	3318      	adds	r3, #24
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff f965 	bl	80060ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	69b8      	ldr	r0, [r7, #24]
 8006e0c:	f001 f9c8 	bl	80081a0 <pxPortInitialiseStack>
 8006e10:	4602      	mov	r2, r0
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e22:	bf00      	nop
 8006e24:	3720      	adds	r7, #32
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e34:	f001 fac0 	bl	80083b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e38:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <prvAddNewTaskToReadyList+0xc4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <prvAddNewTaskToReadyList+0xc4>)
 8006e40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e42:	4b2c      	ldr	r3, [pc, #176]	; (8006ef4 <prvAddNewTaskToReadyList+0xc8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d109      	bne.n	8006e5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ef4 <prvAddNewTaskToReadyList+0xc8>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <prvAddNewTaskToReadyList+0xc4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d110      	bne.n	8006e7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e58:	f000 fcb0 	bl	80077bc <prvInitialiseTaskLists>
 8006e5c:	e00d      	b.n	8006e7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <prvAddNewTaskToReadyList+0xcc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e66:	4b23      	ldr	r3, [pc, #140]	; (8006ef4 <prvAddNewTaskToReadyList+0xc8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d802      	bhi.n	8006e7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <prvAddNewTaskToReadyList+0xc8>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e7a:	4b20      	ldr	r3, [pc, #128]	; (8006efc <prvAddNewTaskToReadyList+0xd0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	4a1e      	ldr	r2, [pc, #120]	; (8006efc <prvAddNewTaskToReadyList+0xd0>)
 8006e82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e84:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <prvAddNewTaskToReadyList+0xd0>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e90:	4b1b      	ldr	r3, [pc, #108]	; (8006f00 <prvAddNewTaskToReadyList+0xd4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d903      	bls.n	8006ea0 <prvAddNewTaskToReadyList+0x74>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a18      	ldr	r2, [pc, #96]	; (8006f00 <prvAddNewTaskToReadyList+0xd4>)
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4a15      	ldr	r2, [pc, #84]	; (8006f04 <prvAddNewTaskToReadyList+0xd8>)
 8006eae:	441a      	add	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	f7ff f905 	bl	80060c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ebc:	f001 faae 	bl	800841c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <prvAddNewTaskToReadyList+0xcc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00e      	beq.n	8006ee6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <prvAddNewTaskToReadyList+0xc8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d207      	bcs.n	8006ee6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <prvAddNewTaskToReadyList+0xdc>)
 8006ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	20000d98 	.word	0x20000d98
 8006ef4:	200008c4 	.word	0x200008c4
 8006ef8:	20000da4 	.word	0x20000da4
 8006efc:	20000db4 	.word	0x20000db4
 8006f00:	20000da0 	.word	0x20000da0
 8006f04:	200008c8 	.word	0x200008c8
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b08a      	sub	sp, #40	; 0x28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <vTaskDelayUntil+0x2c>
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	b672      	cpsid	i
 8006f26:	f383 8811 	msr	BASEPRI, r3
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	b662      	cpsie	i
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	e7fe      	b.n	8006f36 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10b      	bne.n	8006f56 <vTaskDelayUntil+0x4a>
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	b672      	cpsid	i
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	b662      	cpsie	i
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	e7fe      	b.n	8006f54 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8006f56:	4b2a      	ldr	r3, [pc, #168]	; (8007000 <vTaskDelayUntil+0xf4>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <vTaskDelayUntil+0x6a>
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	b672      	cpsid	i
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	b662      	cpsie	i
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e7fe      	b.n	8006f74 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8006f76:	f000 f8e7 	bl	8007148 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006f7a:	4b22      	ldr	r3, [pc, #136]	; (8007004 <vTaskDelayUntil+0xf8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	4413      	add	r3, r2
 8006f88:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6a3a      	ldr	r2, [r7, #32]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d20b      	bcs.n	8006fac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d211      	bcs.n	8006fc2 <vTaskDelayUntil+0xb6>
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d90d      	bls.n	8006fc2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006faa:	e00a      	b.n	8006fc2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d303      	bcc.n	8006fbe <vTaskDelayUntil+0xb2>
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d901      	bls.n	8006fc2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d006      	beq.n	8006fdc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	6a3b      	ldr	r3, [r7, #32]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fd3a 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006fdc:	f000 f8c2 	bl	8007164 <xTaskResumeAll>
 8006fe0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d107      	bne.n	8006ff8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <vTaskDelayUntil+0xfc>)
 8006fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ff8:	bf00      	nop
 8006ffa:	3728      	adds	r7, #40	; 0x28
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000dc0 	.word	0x20000dc0
 8007004:	20000d9c 	.word	0x20000d9c
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800701e:	4b14      	ldr	r3, [pc, #80]	; (8007070 <vTaskDelay+0x64>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <vTaskDelay+0x32>
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	b672      	cpsid	i
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	b662      	cpsie	i
 800703a:	60bb      	str	r3, [r7, #8]
 800703c:	e7fe      	b.n	800703c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800703e:	f000 f883 	bl	8007148 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fd03 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800704a:	f000 f88b 	bl	8007164 <xTaskResumeAll>
 800704e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d107      	bne.n	8007066 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007056:	4b07      	ldr	r3, [pc, #28]	; (8007074 <vTaskDelay+0x68>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000dc0 	.word	0x20000dc0
 8007074:	e000ed04 	.word	0xe000ed04

08007078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08a      	sub	sp, #40	; 0x28
 800707c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007086:	463a      	mov	r2, r7
 8007088:	1d39      	adds	r1, r7, #4
 800708a:	f107 0308 	add.w	r3, r7, #8
 800708e:	4618      	mov	r0, r3
 8007090:	f7fe ffb8 	bl	8006004 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	9202      	str	r2, [sp, #8]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	2300      	movs	r3, #0
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	2300      	movs	r3, #0
 80070a4:	460a      	mov	r2, r1
 80070a6:	4922      	ldr	r1, [pc, #136]	; (8007130 <vTaskStartScheduler+0xb8>)
 80070a8:	4822      	ldr	r0, [pc, #136]	; (8007134 <vTaskStartScheduler+0xbc>)
 80070aa:	f7ff fd89 	bl	8006bc0 <xTaskCreateStatic>
 80070ae:	4602      	mov	r2, r0
 80070b0:	4b21      	ldr	r3, [pc, #132]	; (8007138 <vTaskStartScheduler+0xc0>)
 80070b2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070b4:	4b20      	ldr	r3, [pc, #128]	; (8007138 <vTaskStartScheduler+0xc0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070bc:	2301      	movs	r3, #1
 80070be:	617b      	str	r3, [r7, #20]
 80070c0:	e001      	b.n	80070c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d102      	bne.n	80070d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80070cc:	f000 fd14 	bl	8007af8 <xTimerCreateTimerTask>
 80070d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d117      	bne.n	8007108 <vTaskStartScheduler+0x90>
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	b672      	cpsid	i
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	b662      	cpsie	i
 80070ec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <vTaskStartScheduler+0xc4>)
 80070f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070f6:	4b12      	ldr	r3, [pc, #72]	; (8007140 <vTaskStartScheduler+0xc8>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <vTaskStartScheduler+0xcc>)
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007102:	f001 f8dd 	bl	80082c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007106:	e00f      	b.n	8007128 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710e:	d10b      	bne.n	8007128 <vTaskStartScheduler+0xb0>
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	b672      	cpsid	i
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	b662      	cpsie	i
 8007124:	60fb      	str	r3, [r7, #12]
 8007126:	e7fe      	b.n	8007126 <vTaskStartScheduler+0xae>
}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	0800baa4 	.word	0x0800baa4
 8007134:	0800778d 	.word	0x0800778d
 8007138:	20000dbc 	.word	0x20000dbc
 800713c:	20000db8 	.word	0x20000db8
 8007140:	20000da4 	.word	0x20000da4
 8007144:	20000d9c 	.word	0x20000d9c

08007148 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007148:	b480      	push	{r7}
 800714a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <vTaskSuspendAll+0x18>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a03      	ldr	r2, [pc, #12]	; (8007160 <vTaskSuspendAll+0x18>)
 8007154:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007156:	bf00      	nop
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	20000dc0 	.word	0x20000dc0

08007164 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800716e:	2300      	movs	r3, #0
 8007170:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007172:	4b42      	ldr	r3, [pc, #264]	; (800727c <xTaskResumeAll+0x118>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10b      	bne.n	8007192 <xTaskResumeAll+0x2e>
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	b672      	cpsid	i
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	b662      	cpsie	i
 800718e:	603b      	str	r3, [r7, #0]
 8007190:	e7fe      	b.n	8007190 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007192:	f001 f911 	bl	80083b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007196:	4b39      	ldr	r3, [pc, #228]	; (800727c <xTaskResumeAll+0x118>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	3b01      	subs	r3, #1
 800719c:	4a37      	ldr	r2, [pc, #220]	; (800727c <xTaskResumeAll+0x118>)
 800719e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071a0:	4b36      	ldr	r3, [pc, #216]	; (800727c <xTaskResumeAll+0x118>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d162      	bne.n	800726e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071a8:	4b35      	ldr	r3, [pc, #212]	; (8007280 <xTaskResumeAll+0x11c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d05e      	beq.n	800726e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071b0:	e02f      	b.n	8007212 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b2:	4b34      	ldr	r3, [pc, #208]	; (8007284 <xTaskResumeAll+0x120>)
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3318      	adds	r3, #24
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fe ffde 	bl	8006180 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3304      	adds	r3, #4
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe ffd9 	bl	8006180 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d2:	4b2d      	ldr	r3, [pc, #180]	; (8007288 <xTaskResumeAll+0x124>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d903      	bls.n	80071e2 <xTaskResumeAll+0x7e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071de:	4a2a      	ldr	r2, [pc, #168]	; (8007288 <xTaskResumeAll+0x124>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <xTaskResumeAll+0x128>)
 80071f0:	441a      	add	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe ff64 	bl	80060c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4b23      	ldr	r3, [pc, #140]	; (8007290 <xTaskResumeAll+0x12c>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800720c:	4b21      	ldr	r3, [pc, #132]	; (8007294 <xTaskResumeAll+0x130>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007212:	4b1c      	ldr	r3, [pc, #112]	; (8007284 <xTaskResumeAll+0x120>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1cb      	bne.n	80071b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007220:	f000 fb68 	bl	80078f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007224:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <xTaskResumeAll+0x134>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007230:	f000 f858 	bl	80072e4 <xTaskIncrementTick>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <xTaskResumeAll+0x130>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3b01      	subs	r3, #1
 8007244:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f1      	bne.n	8007230 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800724c:	4b12      	ldr	r3, [pc, #72]	; (8007298 <xTaskResumeAll+0x134>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007252:	4b10      	ldr	r3, [pc, #64]	; (8007294 <xTaskResumeAll+0x130>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d009      	beq.n	800726e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <xTaskResumeAll+0x138>)
 8007260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800726e:	f001 f8d5 	bl	800841c <vPortExitCritical>

	return xAlreadyYielded;
 8007272:	68bb      	ldr	r3, [r7, #8]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20000dc0 	.word	0x20000dc0
 8007280:	20000d98 	.word	0x20000d98
 8007284:	20000d58 	.word	0x20000d58
 8007288:	20000da0 	.word	0x20000da0
 800728c:	200008c8 	.word	0x200008c8
 8007290:	200008c4 	.word	0x200008c4
 8007294:	20000dac 	.word	0x20000dac
 8007298:	20000da8 	.word	0x20000da8
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <xTaskGetTickCount+0x1c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072ac:	687b      	ldr	r3, [r7, #4]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	20000d9c 	.word	0x20000d9c

080072c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072c6:	f001 f957 	bl	8008578 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80072ca:	2300      	movs	r3, #0
 80072cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80072ce:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <xTaskGetTickCountFromISR+0x20>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80072d4:	683b      	ldr	r3, [r7, #0]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000d9c 	.word	0x20000d9c

080072e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ee:	4b4f      	ldr	r3, [pc, #316]	; (800742c <xTaskIncrementTick+0x148>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 808a 	bne.w	800740c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072f8:	4b4d      	ldr	r3, [pc, #308]	; (8007430 <xTaskIncrementTick+0x14c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3301      	adds	r3, #1
 80072fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007300:	4a4b      	ldr	r2, [pc, #300]	; (8007430 <xTaskIncrementTick+0x14c>)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d121      	bne.n	8007350 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800730c:	4b49      	ldr	r3, [pc, #292]	; (8007434 <xTaskIncrementTick+0x150>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <xTaskIncrementTick+0x4a>
 8007316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731a:	b672      	cpsid	i
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	b662      	cpsie	i
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	e7fe      	b.n	800732c <xTaskIncrementTick+0x48>
 800732e:	4b41      	ldr	r3, [pc, #260]	; (8007434 <xTaskIncrementTick+0x150>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	4b40      	ldr	r3, [pc, #256]	; (8007438 <xTaskIncrementTick+0x154>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a3e      	ldr	r2, [pc, #248]	; (8007434 <xTaskIncrementTick+0x150>)
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4a3e      	ldr	r2, [pc, #248]	; (8007438 <xTaskIncrementTick+0x154>)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4b3e      	ldr	r3, [pc, #248]	; (800743c <xTaskIncrementTick+0x158>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3301      	adds	r3, #1
 8007348:	4a3c      	ldr	r2, [pc, #240]	; (800743c <xTaskIncrementTick+0x158>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	f000 fad2 	bl	80078f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007350:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	429a      	cmp	r2, r3
 8007358:	d349      	bcc.n	80073ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <xTaskIncrementTick+0x150>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007364:	4b36      	ldr	r3, [pc, #216]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007366:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800736a:	601a      	str	r2, [r3, #0]
					break;
 800736c:	e03f      	b.n	80073ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736e:	4b31      	ldr	r3, [pc, #196]	; (8007434 <xTaskIncrementTick+0x150>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	429a      	cmp	r2, r3
 8007384:	d203      	bcs.n	800738e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007386:	4a2e      	ldr	r2, [pc, #184]	; (8007440 <xTaskIncrementTick+0x15c>)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800738c:	e02f      	b.n	80073ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe fef4 	bl	8006180 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3318      	adds	r3, #24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe feeb 	bl	8006180 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	4b25      	ldr	r3, [pc, #148]	; (8007444 <xTaskIncrementTick+0x160>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d903      	bls.n	80073be <xTaskIncrementTick+0xda>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a22      	ldr	r2, [pc, #136]	; (8007444 <xTaskIncrementTick+0x160>)
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4a1f      	ldr	r2, [pc, #124]	; (8007448 <xTaskIncrementTick+0x164>)
 80073cc:	441a      	add	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fe fe76 	bl	80060c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4b1b      	ldr	r3, [pc, #108]	; (800744c <xTaskIncrementTick+0x168>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3b8      	bcc.n	800735a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80073e8:	2301      	movs	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ec:	e7b5      	b.n	800735a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073ee:	4b17      	ldr	r3, [pc, #92]	; (800744c <xTaskIncrementTick+0x168>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f4:	4914      	ldr	r1, [pc, #80]	; (8007448 <xTaskIncrementTick+0x164>)
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d907      	bls.n	8007416 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007406:	2301      	movs	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	e004      	b.n	8007416 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800740c:	4b10      	ldr	r3, [pc, #64]	; (8007450 <xTaskIncrementTick+0x16c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a0f      	ldr	r2, [pc, #60]	; (8007450 <xTaskIncrementTick+0x16c>)
 8007414:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007416:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <xTaskIncrementTick+0x170>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007422:	697b      	ldr	r3, [r7, #20]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20000dc0 	.word	0x20000dc0
 8007430:	20000d9c 	.word	0x20000d9c
 8007434:	20000d50 	.word	0x20000d50
 8007438:	20000d54 	.word	0x20000d54
 800743c:	20000db0 	.word	0x20000db0
 8007440:	20000db8 	.word	0x20000db8
 8007444:	20000da0 	.word	0x20000da0
 8007448:	200008c8 	.word	0x200008c8
 800744c:	200008c4 	.word	0x200008c4
 8007450:	20000da8 	.word	0x20000da8
 8007454:	20000dac 	.word	0x20000dac

08007458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800745e:	4b28      	ldr	r3, [pc, #160]	; (8007500 <vTaskSwitchContext+0xa8>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <vTaskSwitchContext+0xac>)
 8007468:	2201      	movs	r2, #1
 800746a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800746c:	e042      	b.n	80074f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800746e:	4b25      	ldr	r3, [pc, #148]	; (8007504 <vTaskSwitchContext+0xac>)
 8007470:	2200      	movs	r2, #0
 8007472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007474:	4b24      	ldr	r3, [pc, #144]	; (8007508 <vTaskSwitchContext+0xb0>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	60fb      	str	r3, [r7, #12]
 800747a:	e011      	b.n	80074a0 <vTaskSwitchContext+0x48>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <vTaskSwitchContext+0x42>
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	b672      	cpsid	i
 8007488:	f383 8811 	msr	BASEPRI, r3
 800748c:	f3bf 8f6f 	isb	sy
 8007490:	f3bf 8f4f 	dsb	sy
 8007494:	b662      	cpsie	i
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	e7fe      	b.n	8007498 <vTaskSwitchContext+0x40>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3b01      	subs	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	491a      	ldr	r1, [pc, #104]	; (800750c <vTaskSwitchContext+0xb4>)
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	440b      	add	r3, r1
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0e3      	beq.n	800747c <vTaskSwitchContext+0x24>
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4613      	mov	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	4413      	add	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4a13      	ldr	r2, [pc, #76]	; (800750c <vTaskSwitchContext+0xb4>)
 80074c0:	4413      	add	r3, r2
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	3308      	adds	r3, #8
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d104      	bne.n	80074e4 <vTaskSwitchContext+0x8c>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	605a      	str	r2, [r3, #4]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	4a09      	ldr	r2, [pc, #36]	; (8007510 <vTaskSwitchContext+0xb8>)
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	4a06      	ldr	r2, [pc, #24]	; (8007508 <vTaskSwitchContext+0xb0>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6013      	str	r3, [r2, #0]
}
 80074f4:	bf00      	nop
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	20000dc0 	.word	0x20000dc0
 8007504:	20000dac 	.word	0x20000dac
 8007508:	20000da0 	.word	0x20000da0
 800750c:	200008c8 	.word	0x200008c8
 8007510:	200008c4 	.word	0x200008c4

08007514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <vTaskPlaceOnEventList+0x28>
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	b672      	cpsid	i
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	b662      	cpsie	i
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e7fe      	b.n	800753a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800753c:	4b07      	ldr	r3, [pc, #28]	; (800755c <vTaskPlaceOnEventList+0x48>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3318      	adds	r3, #24
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7fe fde2 	bl	800610e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800754a:	2101      	movs	r1, #1
 800754c:	6838      	ldr	r0, [r7, #0]
 800754e:	f000 fa7f 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
}
 8007552:	bf00      	nop
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	200008c4 	.word	0x200008c4

08007560 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10b      	bne.n	800758a <vTaskPlaceOnEventListRestricted+0x2a>
 8007572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007576:	b672      	cpsid	i
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	b662      	cpsie	i
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e7fe      	b.n	8007588 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800758a:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3318      	adds	r3, #24
 8007590:	4619      	mov	r1, r3
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f7fe fd97 	bl	80060c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800759e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	68b8      	ldr	r0, [r7, #8]
 80075a8:	f000 fa52 	bl	8007a50 <prvAddCurrentTaskToDelayedList>
	}
 80075ac:	bf00      	nop
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	200008c4 	.word	0x200008c4

080075b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <xTaskRemoveFromEventList+0x2e>
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	b672      	cpsid	i
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	b662      	cpsie	i
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e7fe      	b.n	80075e4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3318      	adds	r3, #24
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fdc8 	bl	8006180 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <xTaskRemoveFromEventList+0xb0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11d      	bne.n	8007634 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe fdbf 	bl	8006180 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <xTaskRemoveFromEventList+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d903      	bls.n	8007616 <xTaskRemoveFromEventList+0x5e>
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	4a16      	ldr	r2, [pc, #88]	; (800766c <xTaskRemoveFromEventList+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4a13      	ldr	r2, [pc, #76]	; (8007670 <xTaskRemoveFromEventList+0xb8>)
 8007624:	441a      	add	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fe fd4a 	bl	80060c6 <vListInsertEnd>
 8007632:	e005      	b.n	8007640 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3318      	adds	r3, #24
 8007638:	4619      	mov	r1, r3
 800763a:	480e      	ldr	r0, [pc, #56]	; (8007674 <xTaskRemoveFromEventList+0xbc>)
 800763c:	f7fe fd43 	bl	80060c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <xTaskRemoveFromEventList+0xc0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	429a      	cmp	r2, r3
 800764c:	d905      	bls.n	800765a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800764e:	2301      	movs	r3, #1
 8007650:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <xTaskRemoveFromEventList+0xc4>)
 8007654:	2201      	movs	r2, #1
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	e001      	b.n	800765e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800765e:	697b      	ldr	r3, [r7, #20]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3718      	adds	r7, #24
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	20000dc0 	.word	0x20000dc0
 800766c:	20000da0 	.word	0x20000da0
 8007670:	200008c8 	.word	0x200008c8
 8007674:	20000d58 	.word	0x20000d58
 8007678:	200008c4 	.word	0x200008c4
 800767c:	20000dac 	.word	0x20000dac

08007680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <vTaskInternalSetTimeOutState+0x24>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <vTaskInternalSetTimeOutState+0x28>)
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	605a      	str	r2, [r3, #4]
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	20000db0 	.word	0x20000db0
 80076a8:	20000d9c 	.word	0x20000d9c

080076ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <xTaskCheckForTimeOut+0x28>
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	b672      	cpsid	i
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	b662      	cpsie	i
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	e7fe      	b.n	80076d2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10b      	bne.n	80076f2 <xTaskCheckForTimeOut+0x46>
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	b672      	cpsid	i
 80076e0:	f383 8811 	msr	BASEPRI, r3
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	b662      	cpsie	i
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	e7fe      	b.n	80076f0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80076f2:	f000 fe61 	bl	80083b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076f6:	4b1d      	ldr	r3, [pc, #116]	; (800776c <xTaskCheckForTimeOut+0xc0>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800770e:	d102      	bne.n	8007716 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	e023      	b.n	800775e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b15      	ldr	r3, [pc, #84]	; (8007770 <xTaskCheckForTimeOut+0xc4>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d007      	beq.n	8007732 <xTaskCheckForTimeOut+0x86>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d302      	bcc.n	8007732 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	61fb      	str	r3, [r7, #28]
 8007730:	e015      	b.n	800775e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	429a      	cmp	r2, r3
 800773a:	d20b      	bcs.n	8007754 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	1ad2      	subs	r2, r2, r3
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7ff ff99 	bl	8007680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800774e:	2300      	movs	r3, #0
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	e004      	b.n	800775e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800775a:	2301      	movs	r3, #1
 800775c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800775e:	f000 fe5d 	bl	800841c <vPortExitCritical>

	return xReturn;
 8007762:	69fb      	ldr	r3, [r7, #28]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000d9c 	.word	0x20000d9c
 8007770:	20000db0 	.word	0x20000db0

08007774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007778:	4b03      	ldr	r3, [pc, #12]	; (8007788 <vTaskMissedYield+0x14>)
 800777a:	2201      	movs	r2, #1
 800777c:	601a      	str	r2, [r3, #0]
}
 800777e:	bf00      	nop
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	20000dac 	.word	0x20000dac

0800778c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007794:	f000 f852 	bl	800783c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007798:	4b06      	ldr	r3, [pc, #24]	; (80077b4 <prvIdleTask+0x28>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d9f9      	bls.n	8007794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <prvIdleTask+0x2c>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077b0:	e7f0      	b.n	8007794 <prvIdleTask+0x8>
 80077b2:	bf00      	nop
 80077b4:	200008c8 	.word	0x200008c8
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077c2:	2300      	movs	r3, #0
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	e00c      	b.n	80077e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <prvInitialiseTaskLists+0x60>)
 80077d4:	4413      	add	r3, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7fe fc48 	bl	800606c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3301      	adds	r3, #1
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b37      	cmp	r3, #55	; 0x37
 80077e6:	d9ef      	bls.n	80077c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077e8:	480d      	ldr	r0, [pc, #52]	; (8007820 <prvInitialiseTaskLists+0x64>)
 80077ea:	f7fe fc3f 	bl	800606c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ee:	480d      	ldr	r0, [pc, #52]	; (8007824 <prvInitialiseTaskLists+0x68>)
 80077f0:	f7fe fc3c 	bl	800606c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077f4:	480c      	ldr	r0, [pc, #48]	; (8007828 <prvInitialiseTaskLists+0x6c>)
 80077f6:	f7fe fc39 	bl	800606c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077fa:	480c      	ldr	r0, [pc, #48]	; (800782c <prvInitialiseTaskLists+0x70>)
 80077fc:	f7fe fc36 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007800:	480b      	ldr	r0, [pc, #44]	; (8007830 <prvInitialiseTaskLists+0x74>)
 8007802:	f7fe fc33 	bl	800606c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007806:	4b0b      	ldr	r3, [pc, #44]	; (8007834 <prvInitialiseTaskLists+0x78>)
 8007808:	4a05      	ldr	r2, [pc, #20]	; (8007820 <prvInitialiseTaskLists+0x64>)
 800780a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <prvInitialiseTaskLists+0x7c>)
 800780e:	4a05      	ldr	r2, [pc, #20]	; (8007824 <prvInitialiseTaskLists+0x68>)
 8007810:	601a      	str	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	200008c8 	.word	0x200008c8
 8007820:	20000d28 	.word	0x20000d28
 8007824:	20000d3c 	.word	0x20000d3c
 8007828:	20000d58 	.word	0x20000d58
 800782c:	20000d6c 	.word	0x20000d6c
 8007830:	20000d84 	.word	0x20000d84
 8007834:	20000d50 	.word	0x20000d50
 8007838:	20000d54 	.word	0x20000d54

0800783c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007842:	e019      	b.n	8007878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007844:	f000 fdb8 	bl	80083b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <prvCheckTasksWaitingTermination+0x4c>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe fc93 	bl	8006180 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <prvCheckTasksWaitingTermination+0x50>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3b01      	subs	r3, #1
 8007860:	4a0a      	ldr	r2, [pc, #40]	; (800788c <prvCheckTasksWaitingTermination+0x50>)
 8007862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007864:	4b0a      	ldr	r3, [pc, #40]	; (8007890 <prvCheckTasksWaitingTermination+0x54>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3b01      	subs	r3, #1
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <prvCheckTasksWaitingTermination+0x54>)
 800786c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800786e:	f000 fdd5 	bl	800841c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f80e 	bl	8007894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007878:	4b05      	ldr	r3, [pc, #20]	; (8007890 <prvCheckTasksWaitingTermination+0x54>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e1      	bne.n	8007844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007880:	bf00      	nop
 8007882:	3708      	adds	r7, #8
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000d6c 	.word	0x20000d6c
 800788c:	20000d98 	.word	0x20000d98
 8007890:	20000d80 	.word	0x20000d80

08007894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d108      	bne.n	80078b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 ff6e 	bl	800878c <vPortFree>
				vPortFree( pxTCB );
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 ff6b 	bl	800878c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078b6:	e019      	b.n	80078ec <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d103      	bne.n	80078ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 ff62 	bl	800878c <vPortFree>
	}
 80078c8:	e010      	b.n	80078ec <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d00b      	beq.n	80078ec <prvDeleteTCB+0x58>
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	b672      	cpsid	i
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	b662      	cpsie	i
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e7fe      	b.n	80078ea <prvDeleteTCB+0x56>
	}
 80078ec:	bf00      	nop
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078fa:	4b0c      	ldr	r3, [pc, #48]	; (800792c <prvResetNextTaskUnblockTime+0x38>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <prvResetNextTaskUnblockTime+0x3c>)
 8007906:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800790a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800790c:	e008      	b.n	8007920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <prvResetNextTaskUnblockTime+0x38>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	4a04      	ldr	r2, [pc, #16]	; (8007930 <prvResetNextTaskUnblockTime+0x3c>)
 800791e:	6013      	str	r3, [r2, #0]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20000d50 	.word	0x20000d50
 8007930:	20000db8 	.word	0x20000db8

08007934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800793a:	4b0b      	ldr	r3, [pc, #44]	; (8007968 <xTaskGetSchedulerState+0x34>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007942:	2301      	movs	r3, #1
 8007944:	607b      	str	r3, [r7, #4]
 8007946:	e008      	b.n	800795a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007948:	4b08      	ldr	r3, [pc, #32]	; (800796c <xTaskGetSchedulerState+0x38>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007950:	2302      	movs	r3, #2
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e001      	b.n	800795a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007956:	2300      	movs	r3, #0
 8007958:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800795a:	687b      	ldr	r3, [r7, #4]
	}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	20000da4 	.word	0x20000da4
 800796c:	20000dc0 	.word	0x20000dc0

08007970 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007970:	b580      	push	{r7, lr}
 8007972:	b086      	sub	sp, #24
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d058      	beq.n	8007a38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007986:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <xTaskPriorityDisinherit+0xd4>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	429a      	cmp	r2, r3
 800798e:	d00b      	beq.n	80079a8 <xTaskPriorityDisinherit+0x38>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	b672      	cpsid	i
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	b662      	cpsie	i
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	e7fe      	b.n	80079a6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10b      	bne.n	80079c8 <xTaskPriorityDisinherit+0x58>
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	60bb      	str	r3, [r7, #8]
 80079c6:	e7fe      	b.n	80079c6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079cc:	1e5a      	subs	r2, r3, #1
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079da:	429a      	cmp	r2, r3
 80079dc:	d02c      	beq.n	8007a38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d128      	bne.n	8007a38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	3304      	adds	r3, #4
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fe fbc8 	bl	8006180 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <xTaskPriorityDisinherit+0xd8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d903      	bls.n	8007a18 <xTaskPriorityDisinherit+0xa8>
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a0c      	ldr	r2, [pc, #48]	; (8007a48 <xTaskPriorityDisinherit+0xd8>)
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <xTaskPriorityDisinherit+0xdc>)
 8007a26:	441a      	add	r2, r3
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f7fe fb49 	bl	80060c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a38:	697b      	ldr	r3, [r7, #20]
	}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200008c4 	.word	0x200008c4
 8007a48:	20000da0 	.word	0x20000da0
 8007a4c:	200008c8 	.word	0x200008c8

08007a50 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a5a:	4b21      	ldr	r3, [pc, #132]	; (8007ae0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a60:	4b20      	ldr	r3, [pc, #128]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fe fb8a 	bl	8006180 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a72:	d10a      	bne.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4819      	ldr	r0, [pc, #100]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a84:	f7fe fb1f 	bl	80060c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a88:	e026      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4413      	add	r3, r2
 8007a90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d209      	bcs.n	8007ab6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fe fb2d 	bl	800610e <vListInsert>
}
 8007ab4:	e010      	b.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab6:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fe fb23 	bl	800610e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ac8:	4b0a      	ldr	r3, [pc, #40]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d202      	bcs.n	8007ad8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007ad2:	4a08      	ldr	r2, [pc, #32]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6013      	str	r3, [r2, #0]
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000d9c 	.word	0x20000d9c
 8007ae4:	200008c4 	.word	0x200008c4
 8007ae8:	20000d84 	.word	0x20000d84
 8007aec:	20000d54 	.word	0x20000d54
 8007af0:	20000d50 	.word	0x20000d50
 8007af4:	20000db8 	.word	0x20000db8

08007af8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b02:	f000 fb0d 	bl	8008120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b06:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <xTimerCreateTimerTask+0x84>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d021      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b16:	1d3a      	adds	r2, r7, #4
 8007b18:	f107 0108 	add.w	r1, r7, #8
 8007b1c:	f107 030c 	add.w	r3, r7, #12
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe fa89 	bl	8006038 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	2302      	movs	r3, #2
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	460a      	mov	r2, r1
 8007b38:	4911      	ldr	r1, [pc, #68]	; (8007b80 <xTimerCreateTimerTask+0x88>)
 8007b3a:	4812      	ldr	r0, [pc, #72]	; (8007b84 <xTimerCreateTimerTask+0x8c>)
 8007b3c:	f7ff f840 	bl	8006bc0 <xTaskCreateStatic>
 8007b40:	4602      	mov	r2, r0
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <xTimerCreateTimerTask+0x90>)
 8007b44:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <xTimerCreateTimerTask+0x90>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10b      	bne.n	8007b70 <xTimerCreateTimerTask+0x78>
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	b672      	cpsid	i
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	b662      	cpsie	i
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	e7fe      	b.n	8007b6e <xTimerCreateTimerTask+0x76>
	return xReturn;
 8007b70:	697b      	ldr	r3, [r7, #20]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000df4 	.word	0x20000df4
 8007b80:	0800baac 	.word	0x0800baac
 8007b84:	08007cc5 	.word	0x08007cc5
 8007b88:	20000df8 	.word	0x20000df8

08007b8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08a      	sub	sp, #40	; 0x28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
 8007b98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10b      	bne.n	8007bbc <xTimerGenericCommand+0x30>
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	b672      	cpsid	i
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	b662      	cpsie	i
 8007bb8:	623b      	str	r3, [r7, #32]
 8007bba:	e7fe      	b.n	8007bba <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d02a      	beq.n	8007c1a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	dc18      	bgt.n	8007c08 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007bd6:	f7ff fead 	bl	8007934 <xTaskGetSchedulerState>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d109      	bne.n	8007bf4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007be0:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	f107 0110 	add.w	r1, r7, #16
 8007be8:	2300      	movs	r3, #0
 8007bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bec:	f7fe fbfc 	bl	80063e8 <xQueueGenericSend>
 8007bf0:	6278      	str	r0, [r7, #36]	; 0x24
 8007bf2:	e012      	b.n	8007c1a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bf4:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	f107 0110 	add.w	r1, r7, #16
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f7fe fbf2 	bl	80063e8 <xQueueGenericSend>
 8007c04:	6278      	str	r0, [r7, #36]	; 0x24
 8007c06:	e008      	b.n	8007c1a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c08:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <xTimerGenericCommand+0x98>)
 8007c0a:	6818      	ldr	r0, [r3, #0]
 8007c0c:	f107 0110 	add.w	r1, r7, #16
 8007c10:	2300      	movs	r3, #0
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	f7fe fcea 	bl	80065ec <xQueueGenericSendFromISR>
 8007c18:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000df4 	.word	0x20000df4

08007c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af02      	add	r7, sp, #8
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c32:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <prvProcessExpiredTimer+0x98>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe fa9d 	bl	8006180 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d023      	beq.n	8007c9c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	18d1      	adds	r1, r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	6978      	ldr	r0, [r7, #20]
 8007c62:	f000 f8d3 	bl	8007e0c <prvInsertTimerInActiveList>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d020      	beq.n	8007cae <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	2300      	movs	r3, #0
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	2100      	movs	r1, #0
 8007c76:	6978      	ldr	r0, [r7, #20]
 8007c78:	f7ff ff88 	bl	8007b8c <xTimerGenericCommand>
 8007c7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d114      	bne.n	8007cae <prvProcessExpiredTimer+0x86>
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	b672      	cpsid	i
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	b662      	cpsie	i
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	e7fe      	b.n	8007c9a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	6978      	ldr	r0, [r7, #20]
 8007cb4:	4798      	blx	r3
}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000dec 	.word	0x20000dec

08007cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ccc:	f107 0308 	add.w	r3, r7, #8
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 f857 	bl	8007d84 <prvGetNextExpireTime>
 8007cd6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f000 f803 	bl	8007ce8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ce2:	f000 f8d5 	bl	8007e90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ce6:	e7f1      	b.n	8007ccc <prvTimerTask+0x8>

08007ce8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cf2:	f7ff fa29 	bl	8007148 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cf6:	f107 0308 	add.w	r3, r7, #8
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f866 	bl	8007dcc <prvSampleTimeNow>
 8007d00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d130      	bne.n	8007d6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <prvProcessTimerOrBlockTask+0x3c>
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d806      	bhi.n	8007d24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d16:	f7ff fa25 	bl	8007164 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7ff ff83 	bl	8007c28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d22:	e024      	b.n	8007d6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d2a:	4b13      	ldr	r3, [pc, #76]	; (8007d78 <prvProcessTimerOrBlockTask+0x90>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <prvProcessTimerOrBlockTask+0x50>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <prvProcessTimerOrBlockTask+0x52>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d3c:	4b0f      	ldr	r3, [pc, #60]	; (8007d7c <prvProcessTimerOrBlockTask+0x94>)
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f7fe ff05 	bl	8006b58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d4e:	f7ff fa09 	bl	8007164 <xTaskResumeAll>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10a      	bne.n	8007d6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d58:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <prvProcessTimerOrBlockTask+0x98>)
 8007d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	f3bf 8f4f 	dsb	sy
 8007d64:	f3bf 8f6f 	isb	sy
}
 8007d68:	e001      	b.n	8007d6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d6a:	f7ff f9fb 	bl	8007164 <xTaskResumeAll>
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	20000df0 	.word	0x20000df0
 8007d7c:	20000df4 	.word	0x20000df4
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <prvGetNextExpireTime+0x44>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d101      	bne.n	8007d9a <prvGetNextExpireTime+0x16>
 8007d96:	2201      	movs	r2, #1
 8007d98:	e000      	b.n	8007d9c <prvGetNextExpireTime+0x18>
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007da8:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <prvGetNextExpireTime+0x44>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	e001      	b.n	8007db8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	20000dec 	.word	0x20000dec

08007dcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007dd4:	f7ff fa64 	bl	80072a0 <xTaskGetTickCount>
 8007dd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007dda:	4b0b      	ldr	r3, [pc, #44]	; (8007e08 <prvSampleTimeNow+0x3c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d205      	bcs.n	8007df0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007de4:	f000 f936 	bl	8008054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	e002      	b.n	8007df6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007df6:	4a04      	ldr	r2, [pc, #16]	; (8007e08 <prvSampleTimeNow+0x3c>)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000dfc 	.word	0x20000dfc

08007e0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d812      	bhi.n	8007e58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d302      	bcc.n	8007e46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	e01b      	b.n	8007e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <prvInsertTimerInActiveList+0x7c>)
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4610      	mov	r0, r2
 8007e52:	f7fe f95c 	bl	800610e <vListInsert>
 8007e56:	e012      	b.n	8007e7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d206      	bcs.n	8007e6e <prvInsertTimerInActiveList+0x62>
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	e007      	b.n	8007e7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e6e:	4b07      	ldr	r3, [pc, #28]	; (8007e8c <prvInsertTimerInActiveList+0x80>)
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	4610      	mov	r0, r2
 8007e7a:	f7fe f948 	bl	800610e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e7e:	697b      	ldr	r3, [r7, #20]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000df0 	.word	0x20000df0
 8007e8c:	20000dec 	.word	0x20000dec

08007e90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08e      	sub	sp, #56	; 0x38
 8007e94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e96:	e0cc      	b.n	8008032 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da19      	bge.n	8007ed2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e9e:	1d3b      	adds	r3, r7, #4
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10b      	bne.n	8007ec2 <prvProcessReceivedCommands+0x32>
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	b672      	cpsid	i
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	b662      	cpsie	i
 8007ebe:	61fb      	str	r3, [r7, #28]
 8007ec0:	e7fe      	b.n	8007ec0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec8:	6850      	ldr	r0, [r2, #4]
 8007eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ecc:	6892      	ldr	r2, [r2, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f2c0 80ab 	blt.w	8008030 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	3304      	adds	r3, #4
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fe f948 	bl	8006180 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff ff6a 	bl	8007dcc <prvSampleTimeNow>
 8007ef8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b09      	cmp	r3, #9
 8007efe:	f200 8098 	bhi.w	8008032 <prvProcessReceivedCommands+0x1a2>
 8007f02:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <prvProcessReceivedCommands+0x78>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f31 	.word	0x08007f31
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007fa7 	.word	0x08007fa7
 8007f18:	08007fbb 	.word	0x08007fbb
 8007f1c:	08008007 	.word	0x08008007
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f31 	.word	0x08007f31
 8007f28:	08007fa7 	.word	0x08007fa7
 8007f2c:	08007fbb 	.word	0x08007fbb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	18d1      	adds	r1, r2, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f50:	f7ff ff5c 	bl	8007e0c <prvInsertTimerInActiveList>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06b      	beq.n	8008032 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d060      	beq.n	8008032 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	441a      	add	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2100      	movs	r1, #0
 8007f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f82:	f7ff fe03 	bl	8007b8c <xTimerGenericCommand>
 8007f86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f88:	6a3b      	ldr	r3, [r7, #32]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d151      	bne.n	8008032 <prvProcessReceivedCommands+0x1a2>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	b672      	cpsid	i
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	b662      	cpsie	i
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e7fe      	b.n	8007fa4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fac:	f023 0301 	bic.w	r3, r3, #1
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007fb8:	e03b      	b.n	8008032 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc0:	f043 0301 	orr.w	r3, r3, #1
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10b      	bne.n	8007ff2 <prvProcessReceivedCommands+0x162>
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	b672      	cpsid	i
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	b662      	cpsie	i
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e7fe      	b.n	8007ff0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	18d1      	adds	r1, r2, r3
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008000:	f7ff ff04 	bl	8007e0c <prvInsertTimerInActiveList>
					break;
 8008004:	e015      	b.n	8008032 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b00      	cmp	r3, #0
 8008012:	d103      	bne.n	800801c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008016:	f000 fbb9 	bl	800878c <vPortFree>
 800801a:	e00a      	b.n	8008032 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800802e:	e000      	b.n	8008032 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008032:	4b07      	ldr	r3, [pc, #28]	; (8008050 <prvProcessReceivedCommands+0x1c0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	1d39      	adds	r1, r7, #4
 8008038:	2200      	movs	r2, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fb72 	bl	8006724 <xQueueReceive>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	f47f af28 	bne.w	8007e98 <prvProcessReceivedCommands+0x8>
	}
}
 8008048:	bf00      	nop
 800804a:	3730      	adds	r7, #48	; 0x30
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000df4 	.word	0x20000df4

08008054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800805a:	e049      	b.n	80080f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800805c:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <prvSwitchTimerLists+0xc4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008066:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <prvSwitchTimerLists+0xc4>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe f883 	bl	8006180 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d02f      	beq.n	80080f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d90e      	bls.n	80080c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fe f828 	bl	800610e <vListInsert>
 80080be:	e017      	b.n	80080f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080c0:	2300      	movs	r3, #0
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	2300      	movs	r3, #0
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	2100      	movs	r1, #0
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fd5e 	bl	8007b8c <xTimerGenericCommand>
 80080d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10b      	bne.n	80080f0 <prvSwitchTimerLists+0x9c>
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	b672      	cpsid	i
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	b662      	cpsie	i
 80080ec:	603b      	str	r3, [r7, #0]
 80080ee:	e7fe      	b.n	80080ee <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080f0:	4b09      	ldr	r3, [pc, #36]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d1b0      	bne.n	800805c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <prvSwitchTimerLists+0xc4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008100:	4b06      	ldr	r3, [pc, #24]	; (800811c <prvSwitchTimerLists+0xc8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a04      	ldr	r2, [pc, #16]	; (8008118 <prvSwitchTimerLists+0xc4>)
 8008106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008108:	4a04      	ldr	r2, [pc, #16]	; (800811c <prvSwitchTimerLists+0xc8>)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	6013      	str	r3, [r2, #0]
}
 800810e:	bf00      	nop
 8008110:	3718      	adds	r7, #24
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000dec 	.word	0x20000dec
 800811c:	20000df0 	.word	0x20000df0

08008120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008126:	f000 f947 	bl	80083b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800812a:	4b15      	ldr	r3, [pc, #84]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d120      	bne.n	8008174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008132:	4814      	ldr	r0, [pc, #80]	; (8008184 <prvCheckForValidListAndQueue+0x64>)
 8008134:	f7fd ff9a 	bl	800606c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008138:	4813      	ldr	r0, [pc, #76]	; (8008188 <prvCheckForValidListAndQueue+0x68>)
 800813a:	f7fd ff97 	bl	800606c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800813e:	4b13      	ldr	r3, [pc, #76]	; (800818c <prvCheckForValidListAndQueue+0x6c>)
 8008140:	4a10      	ldr	r2, [pc, #64]	; (8008184 <prvCheckForValidListAndQueue+0x64>)
 8008142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008144:	4b12      	ldr	r3, [pc, #72]	; (8008190 <prvCheckForValidListAndQueue+0x70>)
 8008146:	4a10      	ldr	r2, [pc, #64]	; (8008188 <prvCheckForValidListAndQueue+0x68>)
 8008148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <prvCheckForValidListAndQueue+0x74>)
 8008150:	4a11      	ldr	r2, [pc, #68]	; (8008198 <prvCheckForValidListAndQueue+0x78>)
 8008152:	2110      	movs	r1, #16
 8008154:	200a      	movs	r0, #10
 8008156:	f7fe f8a7 	bl	80062a8 <xQueueGenericCreateStatic>
 800815a:	4602      	mov	r2, r0
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800815e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008160:	4b07      	ldr	r3, [pc, #28]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <prvCheckForValidListAndQueue+0x60>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	490b      	ldr	r1, [pc, #44]	; (800819c <prvCheckForValidListAndQueue+0x7c>)
 800816e:	4618      	mov	r0, r3
 8008170:	f7fe fcca 	bl	8006b08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008174:	f000 f952 	bl	800841c <vPortExitCritical>
}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000df4 	.word	0x20000df4
 8008184:	20000dc4 	.word	0x20000dc4
 8008188:	20000dd8 	.word	0x20000dd8
 800818c:	20000dec 	.word	0x20000dec
 8008190:	20000df0 	.word	0x20000df0
 8008194:	20000ea0 	.word	0x20000ea0
 8008198:	20000e00 	.word	0x20000e00
 800819c:	0800bab4 	.word	0x0800bab4

080081a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3b04      	subs	r3, #4
 80081b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081d0:	4a0c      	ldr	r2, [pc, #48]	; (8008204 <pxPortInitialiseStack+0x64>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b14      	subs	r3, #20
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f06f 0202 	mvn.w	r2, #2
 80081ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b20      	subs	r3, #32
 80081f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	08008209 	.word	0x08008209

08008208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <prvTaskExitError+0x58>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800821a:	d00b      	beq.n	8008234 <prvTaskExitError+0x2c>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e7fe      	b.n	8008232 <prvTaskExitError+0x2a>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	b672      	cpsid	i
 800823a:	f383 8811 	msr	BASEPRI, r3
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	f3bf 8f4f 	dsb	sy
 8008246:	b662      	cpsie	i
 8008248:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800824a:	bf00      	nop
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0fc      	beq.n	800824c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	2000000c 	.word	0x2000000c
	...

08008270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008270:	4b07      	ldr	r3, [pc, #28]	; (8008290 <pxCurrentTCBConst2>)
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f380 8809 	msr	PSP, r0
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8811 	msr	BASEPRI, r0
 800828a:	4770      	bx	lr
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst2>:
 8008290:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008298:	4808      	ldr	r0, [pc, #32]	; (80082bc <prvPortStartFirstTask+0x24>)
 800829a:	6800      	ldr	r0, [r0, #0]
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f380 8808 	msr	MSP, r0
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8814 	msr	CONTROL, r0
 80082aa:	b662      	cpsie	i
 80082ac:	b661      	cpsie	f
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	df00      	svc	0
 80082b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ba:	bf00      	nop
 80082bc:	e000ed08 	.word	0xe000ed08

080082c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082c6:	4b36      	ldr	r3, [pc, #216]	; (80083a0 <xPortStartScheduler+0xe0>)
 80082c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	22ff      	movs	r2, #255	; 0xff
 80082d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	4b2e      	ldr	r3, [pc, #184]	; (80083a4 <xPortStartScheduler+0xe4>)
 80082ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ee:	4b2e      	ldr	r3, [pc, #184]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082f0:	2207      	movs	r2, #7
 80082f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082f4:	e009      	b.n	800830a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80082f6:	4b2c      	ldr	r3, [pc, #176]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <xPortStartScheduler+0xe8>)
 80082fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	b2db      	uxtb	r3, r3
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800830a:	78fb      	ldrb	r3, [r7, #3]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	2b80      	cmp	r3, #128	; 0x80
 8008314:	d0ef      	beq.n	80082f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008316:	4b24      	ldr	r3, [pc, #144]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f1c3 0307 	rsb	r3, r3, #7
 800831e:	2b04      	cmp	r3, #4
 8008320:	d00b      	beq.n	800833a <xPortStartScheduler+0x7a>
 8008322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008326:	b672      	cpsid	i
 8008328:	f383 8811 	msr	BASEPRI, r3
 800832c:	f3bf 8f6f 	isb	sy
 8008330:	f3bf 8f4f 	dsb	sy
 8008334:	b662      	cpsie	i
 8008336:	60bb      	str	r3, [r7, #8]
 8008338:	e7fe      	b.n	8008338 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800833a:	4b1b      	ldr	r3, [pc, #108]	; (80083a8 <xPortStartScheduler+0xe8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008342:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008344:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <xPortStartScheduler+0xe8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800834c:	4a16      	ldr	r2, [pc, #88]	; (80083a8 <xPortStartScheduler+0xe8>)
 800834e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008358:	4b14      	ldr	r3, [pc, #80]	; (80083ac <xPortStartScheduler+0xec>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a13      	ldr	r2, [pc, #76]	; (80083ac <xPortStartScheduler+0xec>)
 800835e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008362:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008364:	4b11      	ldr	r3, [pc, #68]	; (80083ac <xPortStartScheduler+0xec>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a10      	ldr	r2, [pc, #64]	; (80083ac <xPortStartScheduler+0xec>)
 800836a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800836e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008370:	f000 f8d4 	bl	800851c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008374:	4b0e      	ldr	r3, [pc, #56]	; (80083b0 <xPortStartScheduler+0xf0>)
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800837a:	f000 f8f3 	bl	8008564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800837e:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <xPortStartScheduler+0xf4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <xPortStartScheduler+0xf4>)
 8008384:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008388:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800838a:	f7ff ff85 	bl	8008298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800838e:	f7ff f863 	bl	8007458 <vTaskSwitchContext>
	prvTaskExitError();
 8008392:	f7ff ff39 	bl	8008208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	e000e400 	.word	0xe000e400
 80083a4:	20000ef0 	.word	0x20000ef0
 80083a8:	20000ef4 	.word	0x20000ef4
 80083ac:	e000ed20 	.word	0xe000ed20
 80083b0:	2000000c 	.word	0x2000000c
 80083b4:	e000ef34 	.word	0xe000ef34

080083b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	b672      	cpsid	i
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	b662      	cpsie	i
 80083d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083d4:	4b0f      	ldr	r3, [pc, #60]	; (8008414 <vPortEnterCritical+0x5c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3301      	adds	r3, #1
 80083da:	4a0e      	ldr	r2, [pc, #56]	; (8008414 <vPortEnterCritical+0x5c>)
 80083dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083de:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <vPortEnterCritical+0x5c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d110      	bne.n	8008408 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083e6:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <vPortEnterCritical+0x60>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <vPortEnterCritical+0x50>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	b672      	cpsid	i
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	b662      	cpsie	i
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	e7fe      	b.n	8008406 <vPortEnterCritical+0x4e>
	}
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	2000000c 	.word	0x2000000c
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008422:	4b12      	ldr	r3, [pc, #72]	; (800846c <vPortExitCritical+0x50>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <vPortExitCritical+0x26>
 800842a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842e:	b672      	cpsid	i
 8008430:	f383 8811 	msr	BASEPRI, r3
 8008434:	f3bf 8f6f 	isb	sy
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	b662      	cpsie	i
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	e7fe      	b.n	8008440 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008442:	4b0a      	ldr	r3, [pc, #40]	; (800846c <vPortExitCritical+0x50>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a08      	ldr	r2, [pc, #32]	; (800846c <vPortExitCritical+0x50>)
 800844a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <vPortExitCritical+0x50>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d104      	bne.n	800845e <vPortExitCritical+0x42>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000000c 	.word	0x2000000c

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008494:	b672      	cpsid	i
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	f7fe ffd8 	bl	8007458 <vTaskSwitchContext>
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f380 8811 	msr	BASEPRI, r0
 80084b0:	bc09      	pop	{r0, r3}
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f01e 0f10 	tst.w	lr, #16
 80084be:	bf08      	it	eq
 80084c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c4:	f380 8809 	msr	PSP, r0
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <pxCurrentTCBConst>:
 80084d0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f4:	f7fe fef6 	bl	80072e4 <xTaskIncrementTick>
 80084f8:	4603      	mov	r3, r0
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084fe:	4b06      	ldr	r3, [pc, #24]	; (8008518 <SysTick_Handler+0x40>)
 8008500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	2300      	movs	r3, #0
 8008508:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008520:	4b0b      	ldr	r3, [pc, #44]	; (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <vPortSetupTimerInterrupt+0x38>)
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800852c:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <vPortSetupTimerInterrupt+0x3c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <vPortSetupTimerInterrupt+0x40>)
 8008532:	fba2 2303 	umull	r2, r3, r2, r3
 8008536:	099b      	lsrs	r3, r3, #6
 8008538:	4a09      	ldr	r2, [pc, #36]	; (8008560 <vPortSetupTimerInterrupt+0x44>)
 800853a:	3b01      	subs	r3, #1
 800853c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800853e:	4b04      	ldr	r3, [pc, #16]	; (8008550 <vPortSetupTimerInterrupt+0x34>)
 8008540:	2207      	movs	r2, #7
 8008542:	601a      	str	r2, [r3, #0]
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	e000e010 	.word	0xe000e010
 8008554:	e000e018 	.word	0xe000e018
 8008558:	20000000 	.word	0x20000000
 800855c:	10624dd3 	.word	0x10624dd3
 8008560:	e000e014 	.word	0xe000e014

08008564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008574 <vPortEnableVFP+0x10>
 8008568:	6801      	ldr	r1, [r0, #0]
 800856a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800856e:	6001      	str	r1, [r0, #0]
 8008570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008572:	bf00      	nop
 8008574:	e000ed88 	.word	0xe000ed88

08008578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b0f      	cmp	r3, #15
 8008588:	d915      	bls.n	80085b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800858a:	4a18      	ldr	r2, [pc, #96]	; (80085ec <vPortValidateInterruptPriority+0x74>)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008594:	4b16      	ldr	r3, [pc, #88]	; (80085f0 <vPortValidateInterruptPriority+0x78>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	429a      	cmp	r2, r3
 800859c:	d20b      	bcs.n	80085b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	b672      	cpsid	i
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	b662      	cpsie	i
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	e7fe      	b.n	80085b4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <vPortValidateInterruptPriority+0x7c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085be:	4b0e      	ldr	r3, [pc, #56]	; (80085f8 <vPortValidateInterruptPriority+0x80>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d90b      	bls.n	80085de <vPortValidateInterruptPriority+0x66>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	b672      	cpsid	i
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	b662      	cpsie	i
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	e7fe      	b.n	80085dc <vPortValidateInterruptPriority+0x64>
	}
 80085de:	bf00      	nop
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	e000e3f0 	.word	0xe000e3f0
 80085f0:	20000ef0 	.word	0x20000ef0
 80085f4:	e000ed0c 	.word	0xe000ed0c
 80085f8:	20000ef4 	.word	0x20000ef4

080085fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008608:	f7fe fd9e 	bl	8007148 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800860c:	4b5a      	ldr	r3, [pc, #360]	; (8008778 <pvPortMalloc+0x17c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d101      	bne.n	8008618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008614:	f000 f916 	bl	8008844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008618:	4b58      	ldr	r3, [pc, #352]	; (800877c <pvPortMalloc+0x180>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4013      	ands	r3, r2
 8008620:	2b00      	cmp	r3, #0
 8008622:	f040 8090 	bne.w	8008746 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01e      	beq.n	800866a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800862c:	2208      	movs	r2, #8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	2b00      	cmp	r3, #0
 800863c:	d015      	beq.n	800866a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f023 0307 	bic.w	r3, r3, #7
 8008644:	3308      	adds	r3, #8
 8008646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <pvPortMalloc+0x6e>
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	b672      	cpsid	i
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	b662      	cpsie	i
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e7fe      	b.n	8008668 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d06a      	beq.n	8008746 <pvPortMalloc+0x14a>
 8008670:	4b43      	ldr	r3, [pc, #268]	; (8008780 <pvPortMalloc+0x184>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	429a      	cmp	r2, r3
 8008678:	d865      	bhi.n	8008746 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800867a:	4b42      	ldr	r3, [pc, #264]	; (8008784 <pvPortMalloc+0x188>)
 800867c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800867e:	4b41      	ldr	r3, [pc, #260]	; (8008784 <pvPortMalloc+0x188>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008684:	e004      	b.n	8008690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d903      	bls.n	80086a2 <pvPortMalloc+0xa6>
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1f1      	bne.n	8008686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086a2:	4b35      	ldr	r3, [pc, #212]	; (8008778 <pvPortMalloc+0x17c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d04c      	beq.n	8008746 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2208      	movs	r2, #8
 80086b2:	4413      	add	r3, r2
 80086b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	2308      	movs	r3, #8
 80086c8:	005b      	lsls	r3, r3, #1
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d920      	bls.n	8008710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4413      	add	r3, r2
 80086d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086d6:	69bb      	ldr	r3, [r7, #24]
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00b      	beq.n	80086f8 <pvPortMalloc+0xfc>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	b672      	cpsid	i
 80086e6:	f383 8811 	msr	BASEPRI, r3
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	f3bf 8f4f 	dsb	sy
 80086f2:	b662      	cpsie	i
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	e7fe      	b.n	80086f6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	685a      	ldr	r2, [r3, #4]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	1ad2      	subs	r2, r2, r3
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800870a:	69b8      	ldr	r0, [r7, #24]
 800870c:	f000 f8fc 	bl	8008908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008710:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <pvPortMalloc+0x184>)
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	4a19      	ldr	r2, [pc, #100]	; (8008780 <pvPortMalloc+0x184>)
 800871c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800871e:	4b18      	ldr	r3, [pc, #96]	; (8008780 <pvPortMalloc+0x184>)
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b19      	ldr	r3, [pc, #100]	; (8008788 <pvPortMalloc+0x18c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	429a      	cmp	r2, r3
 8008728:	d203      	bcs.n	8008732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800872a:	4b15      	ldr	r3, [pc, #84]	; (8008780 <pvPortMalloc+0x184>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <pvPortMalloc+0x18c>)
 8008730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	685a      	ldr	r2, [r3, #4]
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <pvPortMalloc+0x180>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	431a      	orrs	r2, r3
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008746:	f7fe fd0d 	bl	8007164 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <pvPortMalloc+0x170>
 8008754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008758:	b672      	cpsid	i
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	b662      	cpsie	i
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	e7fe      	b.n	800876a <pvPortMalloc+0x16e>
	return pvReturn;
 800876c:	69fb      	ldr	r3, [r7, #28]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3728      	adds	r7, #40	; 0x28
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20004b00 	.word	0x20004b00
 800877c:	20004b0c 	.word	0x20004b0c
 8008780:	20004b04 	.word	0x20004b04
 8008784:	20004af8 	.word	0x20004af8
 8008788:	20004b08 	.word	0x20004b08

0800878c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d04a      	beq.n	8008834 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800879e:	2308      	movs	r3, #8
 80087a0:	425b      	negs	r3, r3
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	685a      	ldr	r2, [r3, #4]
 80087b0:	4b22      	ldr	r3, [pc, #136]	; (800883c <vPortFree+0xb0>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4013      	ands	r3, r2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10b      	bne.n	80087d2 <vPortFree+0x46>
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	b672      	cpsid	i
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	b662      	cpsie	i
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e7fe      	b.n	80087d0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00b      	beq.n	80087f2 <vPortFree+0x66>
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	b672      	cpsid	i
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	b662      	cpsie	i
 80087ee:	60bb      	str	r3, [r7, #8]
 80087f0:	e7fe      	b.n	80087f0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	4b11      	ldr	r3, [pc, #68]	; (800883c <vPortFree+0xb0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4013      	ands	r3, r2
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d019      	beq.n	8008834 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d115      	bne.n	8008834 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <vPortFree+0xb0>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	43db      	mvns	r3, r3
 8008812:	401a      	ands	r2, r3
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008818:	f7fe fc96 	bl	8007148 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	685a      	ldr	r2, [r3, #4]
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <vPortFree+0xb4>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4413      	add	r3, r2
 8008826:	4a06      	ldr	r2, [pc, #24]	; (8008840 <vPortFree+0xb4>)
 8008828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800882a:	6938      	ldr	r0, [r7, #16]
 800882c:	f000 f86c 	bl	8008908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008830:	f7fe fc98 	bl	8007164 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20004b0c 	.word	0x20004b0c
 8008840:	20004b04 	.word	0x20004b04

08008844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800884a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800884e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008850:	4b27      	ldr	r3, [pc, #156]	; (80088f0 <prvHeapInit+0xac>)
 8008852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00c      	beq.n	8008878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3307      	adds	r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <prvHeapInit+0xac>)
 8008874:	4413      	add	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <prvHeapInit+0xb0>)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008882:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <prvHeapInit+0xb0>)
 8008884:	2200      	movs	r2, #0
 8008886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	4413      	add	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008890:	2208      	movs	r2, #8
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	1a9b      	subs	r3, r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f023 0307 	bic.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4a15      	ldr	r2, [pc, #84]	; (80088f8 <prvHeapInit+0xb4>)
 80088a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088a6:	4b14      	ldr	r3, [pc, #80]	; (80088f8 <prvHeapInit+0xb4>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2200      	movs	r2, #0
 80088ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ae:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <prvHeapInit+0xb4>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2200      	movs	r2, #0
 80088b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	1ad2      	subs	r2, r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <prvHeapInit+0xb4>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	4a0a      	ldr	r2, [pc, #40]	; (80088fc <prvHeapInit+0xb8>)
 80088d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	4a09      	ldr	r2, [pc, #36]	; (8008900 <prvHeapInit+0xbc>)
 80088da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088dc:	4b09      	ldr	r3, [pc, #36]	; (8008904 <prvHeapInit+0xc0>)
 80088de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	20000ef8 	.word	0x20000ef8
 80088f4:	20004af8 	.word	0x20004af8
 80088f8:	20004b00 	.word	0x20004b00
 80088fc:	20004b08 	.word	0x20004b08
 8008900:	20004b04 	.word	0x20004b04
 8008904:	20004b0c 	.word	0x20004b0c

08008908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <prvInsertBlockIntoFreeList+0xac>)
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	e002      	b.n	800891c <prvInsertBlockIntoFreeList+0x14>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d8f7      	bhi.n	8008916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	4413      	add	r3, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d108      	bne.n	800894a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	441a      	add	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	441a      	add	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d118      	bne.n	8008990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d00d      	beq.n	8008986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	441a      	add	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	e008      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	e003      	b.n	8008998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d002      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	20004af8 	.word	0x20004af8
 80089b8:	20004b00 	.word	0x20004b00

080089bc <__cxa_pure_virtual>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	f000 f80d 	bl	80089dc <_ZSt9terminatev>

080089c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80089c2:	b508      	push	{r3, lr}
 80089c4:	4780      	blx	r0
 80089c6:	f000 f893 	bl	8008af0 <abort>
	...

080089cc <_ZSt13get_terminatev>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <_ZSt13get_terminatev+0xc>)
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	f3bf 8f5b 	dmb	ish
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	20000010 	.word	0x20000010

080089dc <_ZSt9terminatev>:
 80089dc:	b508      	push	{r3, lr}
 80089de:	f7ff fff5 	bl	80089cc <_ZSt13get_terminatev>
 80089e2:	f7ff ffee 	bl	80089c2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080089e8 <floor>:
 80089e8:	ec51 0b10 	vmov	r0, r1, d0
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80089f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80089f8:	2e13      	cmp	r6, #19
 80089fa:	460c      	mov	r4, r1
 80089fc:	ee10 5a10 	vmov	r5, s0
 8008a00:	4680      	mov	r8, r0
 8008a02:	dc34      	bgt.n	8008a6e <floor+0x86>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	da16      	bge.n	8008a36 <floor+0x4e>
 8008a08:	a335      	add	r3, pc, #212	; (adr r3, 8008ae0 <floor+0xf8>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	f7f7 fc65 	bl	80002dc <__adddf3>
 8008a12:	2200      	movs	r2, #0
 8008a14:	2300      	movs	r3, #0
 8008a16:	f7f8 f8a7 	bl	8000b68 <__aeabi_dcmpgt>
 8008a1a:	b148      	cbz	r0, 8008a30 <floor+0x48>
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	da59      	bge.n	8008ad4 <floor+0xec>
 8008a20:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a24:	4a30      	ldr	r2, [pc, #192]	; (8008ae8 <floor+0x100>)
 8008a26:	432b      	orrs	r3, r5
 8008a28:	2500      	movs	r5, #0
 8008a2a:	42ab      	cmp	r3, r5
 8008a2c:	bf18      	it	ne
 8008a2e:	4614      	movne	r4, r2
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	e025      	b.n	8008a82 <floor+0x9a>
 8008a36:	4f2d      	ldr	r7, [pc, #180]	; (8008aec <floor+0x104>)
 8008a38:	4137      	asrs	r7, r6
 8008a3a:	ea01 0307 	and.w	r3, r1, r7
 8008a3e:	4303      	orrs	r3, r0
 8008a40:	d01f      	beq.n	8008a82 <floor+0x9a>
 8008a42:	a327      	add	r3, pc, #156	; (adr r3, 8008ae0 <floor+0xf8>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	f7f7 fc48 	bl	80002dc <__adddf3>
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f7f8 f88a 	bl	8000b68 <__aeabi_dcmpgt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d0eb      	beq.n	8008a30 <floor+0x48>
 8008a58:	2c00      	cmp	r4, #0
 8008a5a:	bfbe      	ittt	lt
 8008a5c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008a60:	fa43 f606 	asrlt.w	r6, r3, r6
 8008a64:	19a4      	addlt	r4, r4, r6
 8008a66:	ea24 0407 	bic.w	r4, r4, r7
 8008a6a:	2500      	movs	r5, #0
 8008a6c:	e7e0      	b.n	8008a30 <floor+0x48>
 8008a6e:	2e33      	cmp	r6, #51	; 0x33
 8008a70:	dd0b      	ble.n	8008a8a <floor+0xa2>
 8008a72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a76:	d104      	bne.n	8008a82 <floor+0x9a>
 8008a78:	ee10 2a10 	vmov	r2, s0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	f7f7 fc2d 	bl	80002dc <__adddf3>
 8008a82:	ec41 0b10 	vmov	d0, r0, r1
 8008a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a92:	fa23 f707 	lsr.w	r7, r3, r7
 8008a96:	4207      	tst	r7, r0
 8008a98:	d0f3      	beq.n	8008a82 <floor+0x9a>
 8008a9a:	a311      	add	r3, pc, #68	; (adr r3, 8008ae0 <floor+0xf8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fc1c 	bl	80002dc <__adddf3>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f7f8 f85e 	bl	8000b68 <__aeabi_dcmpgt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d0bf      	beq.n	8008a30 <floor+0x48>
 8008ab0:	2c00      	cmp	r4, #0
 8008ab2:	da02      	bge.n	8008aba <floor+0xd2>
 8008ab4:	2e14      	cmp	r6, #20
 8008ab6:	d103      	bne.n	8008ac0 <floor+0xd8>
 8008ab8:	3401      	adds	r4, #1
 8008aba:	ea25 0507 	bic.w	r5, r5, r7
 8008abe:	e7b7      	b.n	8008a30 <floor+0x48>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ac6:	fa03 f606 	lsl.w	r6, r3, r6
 8008aca:	4435      	add	r5, r6
 8008acc:	4545      	cmp	r5, r8
 8008ace:	bf38      	it	cc
 8008ad0:	18e4      	addcc	r4, r4, r3
 8008ad2:	e7f2      	b.n	8008aba <floor+0xd2>
 8008ad4:	2500      	movs	r5, #0
 8008ad6:	462c      	mov	r4, r5
 8008ad8:	e7aa      	b.n	8008a30 <floor+0x48>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	8800759c 	.word	0x8800759c
 8008ae4:	7e37e43c 	.word	0x7e37e43c
 8008ae8:	bff00000 	.word	0xbff00000
 8008aec:	000fffff 	.word	0x000fffff

08008af0 <abort>:
 8008af0:	b508      	push	{r3, lr}
 8008af2:	2006      	movs	r0, #6
 8008af4:	f000 fd42 	bl	800957c <raise>
 8008af8:	2001      	movs	r0, #1
 8008afa:	f7f9 fbef 	bl	80022dc <_exit>
	...

08008b00 <__errno>:
 8008b00:	4b01      	ldr	r3, [pc, #4]	; (8008b08 <__errno+0x8>)
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000014 	.word	0x20000014

08008b0c <__libc_init_array>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	4e0d      	ldr	r6, [pc, #52]	; (8008b44 <__libc_init_array+0x38>)
 8008b10:	4c0d      	ldr	r4, [pc, #52]	; (8008b48 <__libc_init_array+0x3c>)
 8008b12:	1ba4      	subs	r4, r4, r6
 8008b14:	10a4      	asrs	r4, r4, #2
 8008b16:	2500      	movs	r5, #0
 8008b18:	42a5      	cmp	r5, r4
 8008b1a:	d109      	bne.n	8008b30 <__libc_init_array+0x24>
 8008b1c:	4e0b      	ldr	r6, [pc, #44]	; (8008b4c <__libc_init_array+0x40>)
 8008b1e:	4c0c      	ldr	r4, [pc, #48]	; (8008b50 <__libc_init_array+0x44>)
 8008b20:	f002 fbf2 	bl	800b308 <_init>
 8008b24:	1ba4      	subs	r4, r4, r6
 8008b26:	10a4      	asrs	r4, r4, #2
 8008b28:	2500      	movs	r5, #0
 8008b2a:	42a5      	cmp	r5, r4
 8008b2c:	d105      	bne.n	8008b3a <__libc_init_array+0x2e>
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
 8008b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b34:	4798      	blx	r3
 8008b36:	3501      	adds	r5, #1
 8008b38:	e7ee      	b.n	8008b18 <__libc_init_array+0xc>
 8008b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b3e:	4798      	blx	r3
 8008b40:	3501      	adds	r5, #1
 8008b42:	e7f2      	b.n	8008b2a <__libc_init_array+0x1e>
 8008b44:	0800be08 	.word	0x0800be08
 8008b48:	0800be08 	.word	0x0800be08
 8008b4c:	0800be08 	.word	0x0800be08
 8008b50:	0800be0c 	.word	0x0800be0c

08008b54 <memcpy>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	1e43      	subs	r3, r0, #1
 8008b58:	440a      	add	r2, r1
 8008b5a:	4291      	cmp	r1, r2
 8008b5c:	d100      	bne.n	8008b60 <memcpy+0xc>
 8008b5e:	bd10      	pop	{r4, pc}
 8008b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b68:	e7f7      	b.n	8008b5a <memcpy+0x6>

08008b6a <memset>:
 8008b6a:	4402      	add	r2, r0
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d100      	bne.n	8008b74 <memset+0xa>
 8008b72:	4770      	bx	lr
 8008b74:	f803 1b01 	strb.w	r1, [r3], #1
 8008b78:	e7f9      	b.n	8008b6e <memset+0x4>

08008b7a <__cvt>:
 8008b7a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b7e:	ec55 4b10 	vmov	r4, r5, d0
 8008b82:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008b84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	460e      	mov	r6, r1
 8008b8c:	4691      	mov	r9, r2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	bfb8      	it	lt
 8008b92:	4622      	movlt	r2, r4
 8008b94:	462b      	mov	r3, r5
 8008b96:	f027 0720 	bic.w	r7, r7, #32
 8008b9a:	bfbb      	ittet	lt
 8008b9c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ba0:	461d      	movlt	r5, r3
 8008ba2:	2300      	movge	r3, #0
 8008ba4:	232d      	movlt	r3, #45	; 0x2d
 8008ba6:	bfb8      	it	lt
 8008ba8:	4614      	movlt	r4, r2
 8008baa:	2f46      	cmp	r7, #70	; 0x46
 8008bac:	700b      	strb	r3, [r1, #0]
 8008bae:	d004      	beq.n	8008bba <__cvt+0x40>
 8008bb0:	2f45      	cmp	r7, #69	; 0x45
 8008bb2:	d100      	bne.n	8008bb6 <__cvt+0x3c>
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	2102      	movs	r1, #2
 8008bb8:	e000      	b.n	8008bbc <__cvt+0x42>
 8008bba:	2103      	movs	r1, #3
 8008bbc:	ab03      	add	r3, sp, #12
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	ab02      	add	r3, sp, #8
 8008bc2:	9300      	str	r3, [sp, #0]
 8008bc4:	4632      	mov	r2, r6
 8008bc6:	4653      	mov	r3, sl
 8008bc8:	ec45 4b10 	vmov	d0, r4, r5
 8008bcc:	f000 fe40 	bl	8009850 <_dtoa_r>
 8008bd0:	2f47      	cmp	r7, #71	; 0x47
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	d102      	bne.n	8008bdc <__cvt+0x62>
 8008bd6:	f019 0f01 	tst.w	r9, #1
 8008bda:	d026      	beq.n	8008c2a <__cvt+0xb0>
 8008bdc:	2f46      	cmp	r7, #70	; 0x46
 8008bde:	eb08 0906 	add.w	r9, r8, r6
 8008be2:	d111      	bne.n	8008c08 <__cvt+0x8e>
 8008be4:	f898 3000 	ldrb.w	r3, [r8]
 8008be8:	2b30      	cmp	r3, #48	; 0x30
 8008bea:	d10a      	bne.n	8008c02 <__cvt+0x88>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	f7f7 ff90 	bl	8000b18 <__aeabi_dcmpeq>
 8008bf8:	b918      	cbnz	r0, 8008c02 <__cvt+0x88>
 8008bfa:	f1c6 0601 	rsb	r6, r6, #1
 8008bfe:	f8ca 6000 	str.w	r6, [sl]
 8008c02:	f8da 3000 	ldr.w	r3, [sl]
 8008c06:	4499      	add	r9, r3
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f7f7 ff82 	bl	8000b18 <__aeabi_dcmpeq>
 8008c14:	b938      	cbnz	r0, 8008c26 <__cvt+0xac>
 8008c16:	2230      	movs	r2, #48	; 0x30
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	454b      	cmp	r3, r9
 8008c1c:	d205      	bcs.n	8008c2a <__cvt+0xb0>
 8008c1e:	1c59      	adds	r1, r3, #1
 8008c20:	9103      	str	r1, [sp, #12]
 8008c22:	701a      	strb	r2, [r3, #0]
 8008c24:	e7f8      	b.n	8008c18 <__cvt+0x9e>
 8008c26:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c2a:	9b03      	ldr	r3, [sp, #12]
 8008c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2e:	eba3 0308 	sub.w	r3, r3, r8
 8008c32:	4640      	mov	r0, r8
 8008c34:	6013      	str	r3, [r2, #0]
 8008c36:	b004      	add	sp, #16
 8008c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008c3c <__exponent>:
 8008c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c3e:	2900      	cmp	r1, #0
 8008c40:	4604      	mov	r4, r0
 8008c42:	bfba      	itte	lt
 8008c44:	4249      	neglt	r1, r1
 8008c46:	232d      	movlt	r3, #45	; 0x2d
 8008c48:	232b      	movge	r3, #43	; 0x2b
 8008c4a:	2909      	cmp	r1, #9
 8008c4c:	f804 2b02 	strb.w	r2, [r4], #2
 8008c50:	7043      	strb	r3, [r0, #1]
 8008c52:	dd20      	ble.n	8008c96 <__exponent+0x5a>
 8008c54:	f10d 0307 	add.w	r3, sp, #7
 8008c58:	461f      	mov	r7, r3
 8008c5a:	260a      	movs	r6, #10
 8008c5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008c60:	fb06 1115 	mls	r1, r6, r5, r1
 8008c64:	3130      	adds	r1, #48	; 0x30
 8008c66:	2d09      	cmp	r5, #9
 8008c68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008c6c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008c70:	4629      	mov	r1, r5
 8008c72:	dc09      	bgt.n	8008c88 <__exponent+0x4c>
 8008c74:	3130      	adds	r1, #48	; 0x30
 8008c76:	3b02      	subs	r3, #2
 8008c78:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008c7c:	42bb      	cmp	r3, r7
 8008c7e:	4622      	mov	r2, r4
 8008c80:	d304      	bcc.n	8008c8c <__exponent+0x50>
 8008c82:	1a10      	subs	r0, r2, r0
 8008c84:	b003      	add	sp, #12
 8008c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c88:	4613      	mov	r3, r2
 8008c8a:	e7e7      	b.n	8008c5c <__exponent+0x20>
 8008c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c90:	f804 2b01 	strb.w	r2, [r4], #1
 8008c94:	e7f2      	b.n	8008c7c <__exponent+0x40>
 8008c96:	2330      	movs	r3, #48	; 0x30
 8008c98:	4419      	add	r1, r3
 8008c9a:	7083      	strb	r3, [r0, #2]
 8008c9c:	1d02      	adds	r2, r0, #4
 8008c9e:	70c1      	strb	r1, [r0, #3]
 8008ca0:	e7ef      	b.n	8008c82 <__exponent+0x46>
	...

08008ca4 <_printf_float>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	b08d      	sub	sp, #52	; 0x34
 8008caa:	460c      	mov	r4, r1
 8008cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	461f      	mov	r7, r3
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	f001 fcfd 	bl	800a6b4 <_localeconv_r>
 8008cba:	6803      	ldr	r3, [r0, #0]
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7f7 faae 	bl	8000220 <strlen>
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8008ccc:	9005      	str	r0, [sp, #20]
 8008cce:	3307      	adds	r3, #7
 8008cd0:	f023 0307 	bic.w	r3, r3, #7
 8008cd4:	f103 0208 	add.w	r2, r3, #8
 8008cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8008ce0:	f8c8 2000 	str.w	r2, [r8]
 8008ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008cf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cf4:	9307      	str	r3, [sp, #28]
 8008cf6:	f8cd 8018 	str.w	r8, [sp, #24]
 8008cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cfe:	4ba7      	ldr	r3, [pc, #668]	; (8008f9c <_printf_float+0x2f8>)
 8008d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d04:	f7f7 ff3a 	bl	8000b7c <__aeabi_dcmpun>
 8008d08:	bb70      	cbnz	r0, 8008d68 <_printf_float+0xc4>
 8008d0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d0e:	4ba3      	ldr	r3, [pc, #652]	; (8008f9c <_printf_float+0x2f8>)
 8008d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d14:	f7f7 ff14 	bl	8000b40 <__aeabi_dcmple>
 8008d18:	bb30      	cbnz	r0, 8008d68 <_printf_float+0xc4>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 ff03 	bl	8000b2c <__aeabi_dcmplt>
 8008d26:	b110      	cbz	r0, 8008d2e <_printf_float+0x8a>
 8008d28:	232d      	movs	r3, #45	; 0x2d
 8008d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d2e:	4a9c      	ldr	r2, [pc, #624]	; (8008fa0 <_printf_float+0x2fc>)
 8008d30:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <_printf_float+0x300>)
 8008d32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008d36:	bf8c      	ite	hi
 8008d38:	4690      	movhi	r8, r2
 8008d3a:	4698      	movls	r8, r3
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	f02b 0204 	bic.w	r2, fp, #4
 8008d42:	6123      	str	r3, [r4, #16]
 8008d44:	6022      	str	r2, [r4, #0]
 8008d46:	f04f 0900 	mov.w	r9, #0
 8008d4a:	9700      	str	r7, [sp, #0]
 8008d4c:	4633      	mov	r3, r6
 8008d4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f9e6 	bl	8009124 <_printf_common>
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f040 808d 	bne.w	8008e78 <_printf_float+0x1d4>
 8008d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d62:	b00d      	add	sp, #52	; 0x34
 8008d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	4640      	mov	r0, r8
 8008d6e:	4649      	mov	r1, r9
 8008d70:	f7f7 ff04 	bl	8000b7c <__aeabi_dcmpun>
 8008d74:	b110      	cbz	r0, 8008d7c <_printf_float+0xd8>
 8008d76:	4a8c      	ldr	r2, [pc, #560]	; (8008fa8 <_printf_float+0x304>)
 8008d78:	4b8c      	ldr	r3, [pc, #560]	; (8008fac <_printf_float+0x308>)
 8008d7a:	e7da      	b.n	8008d32 <_printf_float+0x8e>
 8008d7c:	6861      	ldr	r1, [r4, #4]
 8008d7e:	1c4b      	adds	r3, r1, #1
 8008d80:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008d84:	a80a      	add	r0, sp, #40	; 0x28
 8008d86:	d13e      	bne.n	8008e06 <_printf_float+0x162>
 8008d88:	2306      	movs	r3, #6
 8008d8a:	6063      	str	r3, [r4, #4]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d92:	ab09      	add	r3, sp, #36	; 0x24
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	ec49 8b10 	vmov	d0, r8, r9
 8008d9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	f8cd a004 	str.w	sl, [sp, #4]
 8008da4:	6861      	ldr	r1, [r4, #4]
 8008da6:	4628      	mov	r0, r5
 8008da8:	f7ff fee7 	bl	8008b7a <__cvt>
 8008dac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008db0:	2b47      	cmp	r3, #71	; 0x47
 8008db2:	4680      	mov	r8, r0
 8008db4:	d109      	bne.n	8008dca <_printf_float+0x126>
 8008db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db8:	1cd8      	adds	r0, r3, #3
 8008dba:	db02      	blt.n	8008dc2 <_printf_float+0x11e>
 8008dbc:	6862      	ldr	r2, [r4, #4]
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	dd47      	ble.n	8008e52 <_printf_float+0x1ae>
 8008dc2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008dc6:	fa5f fa8a 	uxtb.w	sl, sl
 8008dca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dd0:	d824      	bhi.n	8008e1c <_printf_float+0x178>
 8008dd2:	3901      	subs	r1, #1
 8008dd4:	4652      	mov	r2, sl
 8008dd6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dda:	9109      	str	r1, [sp, #36]	; 0x24
 8008ddc:	f7ff ff2e 	bl	8008c3c <__exponent>
 8008de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de2:	1813      	adds	r3, r2, r0
 8008de4:	2a01      	cmp	r2, #1
 8008de6:	4681      	mov	r9, r0
 8008de8:	6123      	str	r3, [r4, #16]
 8008dea:	dc02      	bgt.n	8008df2 <_printf_float+0x14e>
 8008dec:	6822      	ldr	r2, [r4, #0]
 8008dee:	07d1      	lsls	r1, r2, #31
 8008df0:	d501      	bpl.n	8008df6 <_printf_float+0x152>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0a5      	beq.n	8008d4a <_printf_float+0xa6>
 8008dfe:	232d      	movs	r3, #45	; 0x2d
 8008e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e04:	e7a1      	b.n	8008d4a <_printf_float+0xa6>
 8008e06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008e0a:	f000 8177 	beq.w	80090fc <_printf_float+0x458>
 8008e0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008e12:	d1bb      	bne.n	8008d8c <_printf_float+0xe8>
 8008e14:	2900      	cmp	r1, #0
 8008e16:	d1b9      	bne.n	8008d8c <_printf_float+0xe8>
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e7b6      	b.n	8008d8a <_printf_float+0xe6>
 8008e1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008e20:	d119      	bne.n	8008e56 <_printf_float+0x1b2>
 8008e22:	2900      	cmp	r1, #0
 8008e24:	6863      	ldr	r3, [r4, #4]
 8008e26:	dd0c      	ble.n	8008e42 <_printf_float+0x19e>
 8008e28:	6121      	str	r1, [r4, #16]
 8008e2a:	b913      	cbnz	r3, 8008e32 <_printf_float+0x18e>
 8008e2c:	6822      	ldr	r2, [r4, #0]
 8008e2e:	07d2      	lsls	r2, r2, #31
 8008e30:	d502      	bpl.n	8008e38 <_printf_float+0x194>
 8008e32:	3301      	adds	r3, #1
 8008e34:	440b      	add	r3, r1
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008e3c:	f04f 0900 	mov.w	r9, #0
 8008e40:	e7d9      	b.n	8008df6 <_printf_float+0x152>
 8008e42:	b913      	cbnz	r3, 8008e4a <_printf_float+0x1a6>
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	07d0      	lsls	r0, r2, #31
 8008e48:	d501      	bpl.n	8008e4e <_printf_float+0x1aa>
 8008e4a:	3302      	adds	r3, #2
 8008e4c:	e7f3      	b.n	8008e36 <_printf_float+0x192>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e7f1      	b.n	8008e36 <_printf_float+0x192>
 8008e52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008e56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	db05      	blt.n	8008e6a <_printf_float+0x1c6>
 8008e5e:	6822      	ldr	r2, [r4, #0]
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	07d1      	lsls	r1, r2, #31
 8008e64:	d5e8      	bpl.n	8008e38 <_printf_float+0x194>
 8008e66:	3301      	adds	r3, #1
 8008e68:	e7e5      	b.n	8008e36 <_printf_float+0x192>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	bfd4      	ite	le
 8008e6e:	f1c3 0302 	rsble	r3, r3, #2
 8008e72:	2301      	movgt	r3, #1
 8008e74:	4413      	add	r3, r2
 8008e76:	e7de      	b.n	8008e36 <_printf_float+0x192>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	055a      	lsls	r2, r3, #21
 8008e7c:	d407      	bmi.n	8008e8e <_printf_float+0x1ea>
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	4642      	mov	r2, r8
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d12b      	bne.n	8008ee4 <_printf_float+0x240>
 8008e8c:	e767      	b.n	8008d5e <_printf_float+0xba>
 8008e8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008e92:	f240 80dc 	bls.w	800904e <_printf_float+0x3aa>
 8008e96:	2200      	movs	r2, #0
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e9e:	f7f7 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d033      	beq.n	8008f0e <_printf_float+0x26a>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4a41      	ldr	r2, [pc, #260]	; (8008fb0 <_printf_float+0x30c>)
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4628      	mov	r0, r5
 8008eae:	47b8      	blx	r7
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	f43f af54 	beq.w	8008d5e <_printf_float+0xba>
 8008eb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	db02      	blt.n	8008ec4 <_printf_float+0x220>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	07d8      	lsls	r0, r3, #31
 8008ec2:	d50f      	bpl.n	8008ee4 <_printf_float+0x240>
 8008ec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	f43f af45 	beq.w	8008d5e <_printf_float+0xba>
 8008ed4:	f04f 0800 	mov.w	r8, #0
 8008ed8:	f104 091a 	add.w	r9, r4, #26
 8008edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4543      	cmp	r3, r8
 8008ee2:	dc09      	bgt.n	8008ef8 <_printf_float+0x254>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	079b      	lsls	r3, r3, #30
 8008ee8:	f100 8103 	bmi.w	80090f2 <_printf_float+0x44e>
 8008eec:	68e0      	ldr	r0, [r4, #12]
 8008eee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ef0:	4298      	cmp	r0, r3
 8008ef2:	bfb8      	it	lt
 8008ef4:	4618      	movlt	r0, r3
 8008ef6:	e734      	b.n	8008d62 <_printf_float+0xbe>
 8008ef8:	2301      	movs	r3, #1
 8008efa:	464a      	mov	r2, r9
 8008efc:	4631      	mov	r1, r6
 8008efe:	4628      	mov	r0, r5
 8008f00:	47b8      	blx	r7
 8008f02:	3001      	adds	r0, #1
 8008f04:	f43f af2b 	beq.w	8008d5e <_printf_float+0xba>
 8008f08:	f108 0801 	add.w	r8, r8, #1
 8008f0c:	e7e6      	b.n	8008edc <_printf_float+0x238>
 8008f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc2b      	bgt.n	8008f6c <_printf_float+0x2c8>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <_printf_float+0x30c>)
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f af1d 	beq.w	8008d5e <_printf_float+0xba>
 8008f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f26:	b923      	cbnz	r3, 8008f32 <_printf_float+0x28e>
 8008f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2a:	b913      	cbnz	r3, 8008f32 <_printf_float+0x28e>
 8008f2c:	6823      	ldr	r3, [r4, #0]
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d5d8      	bpl.n	8008ee4 <_printf_float+0x240>
 8008f32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f36:	4631      	mov	r1, r6
 8008f38:	4628      	mov	r0, r5
 8008f3a:	47b8      	blx	r7
 8008f3c:	3001      	adds	r0, #1
 8008f3e:	f43f af0e 	beq.w	8008d5e <_printf_float+0xba>
 8008f42:	f04f 0900 	mov.w	r9, #0
 8008f46:	f104 0a1a 	add.w	sl, r4, #26
 8008f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	454b      	cmp	r3, r9
 8008f50:	dc01      	bgt.n	8008f56 <_printf_float+0x2b2>
 8008f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f54:	e794      	b.n	8008e80 <_printf_float+0x1dc>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4652      	mov	r2, sl
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	f43f aefc 	beq.w	8008d5e <_printf_float+0xba>
 8008f66:	f109 0901 	add.w	r9, r9, #1
 8008f6a:	e7ee      	b.n	8008f4a <_printf_float+0x2a6>
 8008f6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f70:	429a      	cmp	r2, r3
 8008f72:	bfa8      	it	ge
 8008f74:	461a      	movge	r2, r3
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	4691      	mov	r9, r2
 8008f7a:	dd07      	ble.n	8008f8c <_printf_float+0x2e8>
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4642      	mov	r2, r8
 8008f82:	4628      	mov	r0, r5
 8008f84:	47b8      	blx	r7
 8008f86:	3001      	adds	r0, #1
 8008f88:	f43f aee9 	beq.w	8008d5e <_printf_float+0xba>
 8008f8c:	f104 031a 	add.w	r3, r4, #26
 8008f90:	f04f 0b00 	mov.w	fp, #0
 8008f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f98:	9306      	str	r3, [sp, #24]
 8008f9a:	e015      	b.n	8008fc8 <_printf_float+0x324>
 8008f9c:	7fefffff 	.word	0x7fefffff
 8008fa0:	0800bb44 	.word	0x0800bb44
 8008fa4:	0800bb40 	.word	0x0800bb40
 8008fa8:	0800bb4c 	.word	0x0800bb4c
 8008fac:	0800bb48 	.word	0x0800bb48
 8008fb0:	0800bb50 	.word	0x0800bb50
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	9a06      	ldr	r2, [sp, #24]
 8008fb8:	4631      	mov	r1, r6
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	f43f aecd 	beq.w	8008d5e <_printf_float+0xba>
 8008fc4:	f10b 0b01 	add.w	fp, fp, #1
 8008fc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008fcc:	ebaa 0309 	sub.w	r3, sl, r9
 8008fd0:	455b      	cmp	r3, fp
 8008fd2:	dcef      	bgt.n	8008fb4 <_printf_float+0x310>
 8008fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	44d0      	add	r8, sl
 8008fdc:	db15      	blt.n	800900a <_printf_float+0x366>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	07da      	lsls	r2, r3, #31
 8008fe2:	d412      	bmi.n	800900a <_printf_float+0x366>
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fe8:	eba3 020a 	sub.w	r2, r3, sl
 8008fec:	eba3 0a01 	sub.w	sl, r3, r1
 8008ff0:	4592      	cmp	sl, r2
 8008ff2:	bfa8      	it	ge
 8008ff4:	4692      	movge	sl, r2
 8008ff6:	f1ba 0f00 	cmp.w	sl, #0
 8008ffa:	dc0e      	bgt.n	800901a <_printf_float+0x376>
 8008ffc:	f04f 0800 	mov.w	r8, #0
 8009000:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009004:	f104 091a 	add.w	r9, r4, #26
 8009008:	e019      	b.n	800903e <_printf_float+0x39a>
 800900a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	d1e5      	bne.n	8008fe4 <_printf_float+0x340>
 8009018:	e6a1      	b.n	8008d5e <_printf_float+0xba>
 800901a:	4653      	mov	r3, sl
 800901c:	4642      	mov	r2, r8
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	d1e9      	bne.n	8008ffc <_printf_float+0x358>
 8009028:	e699      	b.n	8008d5e <_printf_float+0xba>
 800902a:	2301      	movs	r3, #1
 800902c:	464a      	mov	r2, r9
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	f43f ae92 	beq.w	8008d5e <_printf_float+0xba>
 800903a:	f108 0801 	add.w	r8, r8, #1
 800903e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009042:	1a9b      	subs	r3, r3, r2
 8009044:	eba3 030a 	sub.w	r3, r3, sl
 8009048:	4543      	cmp	r3, r8
 800904a:	dcee      	bgt.n	800902a <_printf_float+0x386>
 800904c:	e74a      	b.n	8008ee4 <_printf_float+0x240>
 800904e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009050:	2a01      	cmp	r2, #1
 8009052:	dc01      	bgt.n	8009058 <_printf_float+0x3b4>
 8009054:	07db      	lsls	r3, r3, #31
 8009056:	d53a      	bpl.n	80090ce <_printf_float+0x42a>
 8009058:	2301      	movs	r3, #1
 800905a:	4642      	mov	r2, r8
 800905c:	4631      	mov	r1, r6
 800905e:	4628      	mov	r0, r5
 8009060:	47b8      	blx	r7
 8009062:	3001      	adds	r0, #1
 8009064:	f43f ae7b 	beq.w	8008d5e <_printf_float+0xba>
 8009068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f108 0801 	add.w	r8, r8, #1
 8009078:	f43f ae71 	beq.w	8008d5e <_printf_float+0xba>
 800907c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800907e:	2200      	movs	r2, #0
 8009080:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009088:	2300      	movs	r3, #0
 800908a:	f7f7 fd45 	bl	8000b18 <__aeabi_dcmpeq>
 800908e:	b9c8      	cbnz	r0, 80090c4 <_printf_float+0x420>
 8009090:	4653      	mov	r3, sl
 8009092:	4642      	mov	r2, r8
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	d10e      	bne.n	80090bc <_printf_float+0x418>
 800909e:	e65e      	b.n	8008d5e <_printf_float+0xba>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4652      	mov	r2, sl
 80090a4:	4631      	mov	r1, r6
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b8      	blx	r7
 80090aa:	3001      	adds	r0, #1
 80090ac:	f43f ae57 	beq.w	8008d5e <_printf_float+0xba>
 80090b0:	f108 0801 	add.w	r8, r8, #1
 80090b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b6:	3b01      	subs	r3, #1
 80090b8:	4543      	cmp	r3, r8
 80090ba:	dcf1      	bgt.n	80090a0 <_printf_float+0x3fc>
 80090bc:	464b      	mov	r3, r9
 80090be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090c2:	e6de      	b.n	8008e82 <_printf_float+0x1de>
 80090c4:	f04f 0800 	mov.w	r8, #0
 80090c8:	f104 0a1a 	add.w	sl, r4, #26
 80090cc:	e7f2      	b.n	80090b4 <_printf_float+0x410>
 80090ce:	2301      	movs	r3, #1
 80090d0:	e7df      	b.n	8009092 <_printf_float+0x3ee>
 80090d2:	2301      	movs	r3, #1
 80090d4:	464a      	mov	r2, r9
 80090d6:	4631      	mov	r1, r6
 80090d8:	4628      	mov	r0, r5
 80090da:	47b8      	blx	r7
 80090dc:	3001      	adds	r0, #1
 80090de:	f43f ae3e 	beq.w	8008d5e <_printf_float+0xba>
 80090e2:	f108 0801 	add.w	r8, r8, #1
 80090e6:	68e3      	ldr	r3, [r4, #12]
 80090e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	4543      	cmp	r3, r8
 80090ee:	dcf0      	bgt.n	80090d2 <_printf_float+0x42e>
 80090f0:	e6fc      	b.n	8008eec <_printf_float+0x248>
 80090f2:	f04f 0800 	mov.w	r8, #0
 80090f6:	f104 0919 	add.w	r9, r4, #25
 80090fa:	e7f4      	b.n	80090e6 <_printf_float+0x442>
 80090fc:	2900      	cmp	r1, #0
 80090fe:	f43f ae8b 	beq.w	8008e18 <_printf_float+0x174>
 8009102:	2300      	movs	r3, #0
 8009104:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009108:	ab09      	add	r3, sp, #36	; 0x24
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	ec49 8b10 	vmov	d0, r8, r9
 8009110:	6022      	str	r2, [r4, #0]
 8009112:	f8cd a004 	str.w	sl, [sp, #4]
 8009116:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fd2d 	bl	8008b7a <__cvt>
 8009120:	4680      	mov	r8, r0
 8009122:	e648      	b.n	8008db6 <_printf_float+0x112>

08009124 <_printf_common>:
 8009124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	4691      	mov	r9, r2
 800912a:	461f      	mov	r7, r3
 800912c:	688a      	ldr	r2, [r1, #8]
 800912e:	690b      	ldr	r3, [r1, #16]
 8009130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009134:	4293      	cmp	r3, r2
 8009136:	bfb8      	it	lt
 8009138:	4613      	movlt	r3, r2
 800913a:	f8c9 3000 	str.w	r3, [r9]
 800913e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009142:	4606      	mov	r6, r0
 8009144:	460c      	mov	r4, r1
 8009146:	b112      	cbz	r2, 800914e <_printf_common+0x2a>
 8009148:	3301      	adds	r3, #1
 800914a:	f8c9 3000 	str.w	r3, [r9]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	0699      	lsls	r1, r3, #26
 8009152:	bf42      	ittt	mi
 8009154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009158:	3302      	addmi	r3, #2
 800915a:	f8c9 3000 	strmi.w	r3, [r9]
 800915e:	6825      	ldr	r5, [r4, #0]
 8009160:	f015 0506 	ands.w	r5, r5, #6
 8009164:	d107      	bne.n	8009176 <_printf_common+0x52>
 8009166:	f104 0a19 	add.w	sl, r4, #25
 800916a:	68e3      	ldr	r3, [r4, #12]
 800916c:	f8d9 2000 	ldr.w	r2, [r9]
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	42ab      	cmp	r3, r5
 8009174:	dc28      	bgt.n	80091c8 <_printf_common+0xa4>
 8009176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800917a:	6822      	ldr	r2, [r4, #0]
 800917c:	3300      	adds	r3, #0
 800917e:	bf18      	it	ne
 8009180:	2301      	movne	r3, #1
 8009182:	0692      	lsls	r2, r2, #26
 8009184:	d42d      	bmi.n	80091e2 <_printf_common+0xbe>
 8009186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800918a:	4639      	mov	r1, r7
 800918c:	4630      	mov	r0, r6
 800918e:	47c0      	blx	r8
 8009190:	3001      	adds	r0, #1
 8009192:	d020      	beq.n	80091d6 <_printf_common+0xb2>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	68e5      	ldr	r5, [r4, #12]
 8009198:	f8d9 2000 	ldr.w	r2, [r9]
 800919c:	f003 0306 	and.w	r3, r3, #6
 80091a0:	2b04      	cmp	r3, #4
 80091a2:	bf08      	it	eq
 80091a4:	1aad      	subeq	r5, r5, r2
 80091a6:	68a3      	ldr	r3, [r4, #8]
 80091a8:	6922      	ldr	r2, [r4, #16]
 80091aa:	bf0c      	ite	eq
 80091ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091b0:	2500      	movne	r5, #0
 80091b2:	4293      	cmp	r3, r2
 80091b4:	bfc4      	itt	gt
 80091b6:	1a9b      	subgt	r3, r3, r2
 80091b8:	18ed      	addgt	r5, r5, r3
 80091ba:	f04f 0900 	mov.w	r9, #0
 80091be:	341a      	adds	r4, #26
 80091c0:	454d      	cmp	r5, r9
 80091c2:	d11a      	bne.n	80091fa <_printf_common+0xd6>
 80091c4:	2000      	movs	r0, #0
 80091c6:	e008      	b.n	80091da <_printf_common+0xb6>
 80091c8:	2301      	movs	r3, #1
 80091ca:	4652      	mov	r2, sl
 80091cc:	4639      	mov	r1, r7
 80091ce:	4630      	mov	r0, r6
 80091d0:	47c0      	blx	r8
 80091d2:	3001      	adds	r0, #1
 80091d4:	d103      	bne.n	80091de <_printf_common+0xba>
 80091d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091de:	3501      	adds	r5, #1
 80091e0:	e7c3      	b.n	800916a <_printf_common+0x46>
 80091e2:	18e1      	adds	r1, r4, r3
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	2030      	movs	r0, #48	; 0x30
 80091e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ec:	4422      	add	r2, r4
 80091ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091f6:	3302      	adds	r3, #2
 80091f8:	e7c5      	b.n	8009186 <_printf_common+0x62>
 80091fa:	2301      	movs	r3, #1
 80091fc:	4622      	mov	r2, r4
 80091fe:	4639      	mov	r1, r7
 8009200:	4630      	mov	r0, r6
 8009202:	47c0      	blx	r8
 8009204:	3001      	adds	r0, #1
 8009206:	d0e6      	beq.n	80091d6 <_printf_common+0xb2>
 8009208:	f109 0901 	add.w	r9, r9, #1
 800920c:	e7d8      	b.n	80091c0 <_printf_common+0x9c>
	...

08009210 <_printf_i>:
 8009210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009218:	460c      	mov	r4, r1
 800921a:	7e09      	ldrb	r1, [r1, #24]
 800921c:	b085      	sub	sp, #20
 800921e:	296e      	cmp	r1, #110	; 0x6e
 8009220:	4617      	mov	r7, r2
 8009222:	4606      	mov	r6, r0
 8009224:	4698      	mov	r8, r3
 8009226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009228:	f000 80b3 	beq.w	8009392 <_printf_i+0x182>
 800922c:	d822      	bhi.n	8009274 <_printf_i+0x64>
 800922e:	2963      	cmp	r1, #99	; 0x63
 8009230:	d036      	beq.n	80092a0 <_printf_i+0x90>
 8009232:	d80a      	bhi.n	800924a <_printf_i+0x3a>
 8009234:	2900      	cmp	r1, #0
 8009236:	f000 80b9 	beq.w	80093ac <_printf_i+0x19c>
 800923a:	2958      	cmp	r1, #88	; 0x58
 800923c:	f000 8083 	beq.w	8009346 <_printf_i+0x136>
 8009240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009248:	e032      	b.n	80092b0 <_printf_i+0xa0>
 800924a:	2964      	cmp	r1, #100	; 0x64
 800924c:	d001      	beq.n	8009252 <_printf_i+0x42>
 800924e:	2969      	cmp	r1, #105	; 0x69
 8009250:	d1f6      	bne.n	8009240 <_printf_i+0x30>
 8009252:	6820      	ldr	r0, [r4, #0]
 8009254:	6813      	ldr	r3, [r2, #0]
 8009256:	0605      	lsls	r5, r0, #24
 8009258:	f103 0104 	add.w	r1, r3, #4
 800925c:	d52a      	bpl.n	80092b4 <_printf_i+0xa4>
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	da03      	bge.n	800926e <_printf_i+0x5e>
 8009266:	222d      	movs	r2, #45	; 0x2d
 8009268:	425b      	negs	r3, r3
 800926a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800926e:	486f      	ldr	r0, [pc, #444]	; (800942c <_printf_i+0x21c>)
 8009270:	220a      	movs	r2, #10
 8009272:	e039      	b.n	80092e8 <_printf_i+0xd8>
 8009274:	2973      	cmp	r1, #115	; 0x73
 8009276:	f000 809d 	beq.w	80093b4 <_printf_i+0x1a4>
 800927a:	d808      	bhi.n	800928e <_printf_i+0x7e>
 800927c:	296f      	cmp	r1, #111	; 0x6f
 800927e:	d020      	beq.n	80092c2 <_printf_i+0xb2>
 8009280:	2970      	cmp	r1, #112	; 0x70
 8009282:	d1dd      	bne.n	8009240 <_printf_i+0x30>
 8009284:	6823      	ldr	r3, [r4, #0]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	e003      	b.n	8009296 <_printf_i+0x86>
 800928e:	2975      	cmp	r1, #117	; 0x75
 8009290:	d017      	beq.n	80092c2 <_printf_i+0xb2>
 8009292:	2978      	cmp	r1, #120	; 0x78
 8009294:	d1d4      	bne.n	8009240 <_printf_i+0x30>
 8009296:	2378      	movs	r3, #120	; 0x78
 8009298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800929c:	4864      	ldr	r0, [pc, #400]	; (8009430 <_printf_i+0x220>)
 800929e:	e055      	b.n	800934c <_printf_i+0x13c>
 80092a0:	6813      	ldr	r3, [r2, #0]
 80092a2:	1d19      	adds	r1, r3, #4
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6011      	str	r1, [r2, #0]
 80092a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80092b0:	2301      	movs	r3, #1
 80092b2:	e08c      	b.n	80093ce <_printf_i+0x1be>
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6011      	str	r1, [r2, #0]
 80092b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092bc:	bf18      	it	ne
 80092be:	b21b      	sxthne	r3, r3
 80092c0:	e7cf      	b.n	8009262 <_printf_i+0x52>
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	6825      	ldr	r5, [r4, #0]
 80092c6:	1d18      	adds	r0, r3, #4
 80092c8:	6010      	str	r0, [r2, #0]
 80092ca:	0628      	lsls	r0, r5, #24
 80092cc:	d501      	bpl.n	80092d2 <_printf_i+0xc2>
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	e002      	b.n	80092d8 <_printf_i+0xc8>
 80092d2:	0668      	lsls	r0, r5, #25
 80092d4:	d5fb      	bpl.n	80092ce <_printf_i+0xbe>
 80092d6:	881b      	ldrh	r3, [r3, #0]
 80092d8:	4854      	ldr	r0, [pc, #336]	; (800942c <_printf_i+0x21c>)
 80092da:	296f      	cmp	r1, #111	; 0x6f
 80092dc:	bf14      	ite	ne
 80092de:	220a      	movne	r2, #10
 80092e0:	2208      	moveq	r2, #8
 80092e2:	2100      	movs	r1, #0
 80092e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e8:	6865      	ldr	r5, [r4, #4]
 80092ea:	60a5      	str	r5, [r4, #8]
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	f2c0 8095 	blt.w	800941c <_printf_i+0x20c>
 80092f2:	6821      	ldr	r1, [r4, #0]
 80092f4:	f021 0104 	bic.w	r1, r1, #4
 80092f8:	6021      	str	r1, [r4, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d13d      	bne.n	800937a <_printf_i+0x16a>
 80092fe:	2d00      	cmp	r5, #0
 8009300:	f040 808e 	bne.w	8009420 <_printf_i+0x210>
 8009304:	4665      	mov	r5, ip
 8009306:	2a08      	cmp	r2, #8
 8009308:	d10b      	bne.n	8009322 <_printf_i+0x112>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	07db      	lsls	r3, r3, #31
 800930e:	d508      	bpl.n	8009322 <_printf_i+0x112>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	6862      	ldr	r2, [r4, #4]
 8009314:	429a      	cmp	r2, r3
 8009316:	bfde      	ittt	le
 8009318:	2330      	movle	r3, #48	; 0x30
 800931a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800931e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009322:	ebac 0305 	sub.w	r3, ip, r5
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	f8cd 8000 	str.w	r8, [sp]
 800932c:	463b      	mov	r3, r7
 800932e:	aa03      	add	r2, sp, #12
 8009330:	4621      	mov	r1, r4
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff fef6 	bl	8009124 <_printf_common>
 8009338:	3001      	adds	r0, #1
 800933a:	d14d      	bne.n	80093d8 <_printf_i+0x1c8>
 800933c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009340:	b005      	add	sp, #20
 8009342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009346:	4839      	ldr	r0, [pc, #228]	; (800942c <_printf_i+0x21c>)
 8009348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800934c:	6813      	ldr	r3, [r2, #0]
 800934e:	6821      	ldr	r1, [r4, #0]
 8009350:	1d1d      	adds	r5, r3, #4
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6015      	str	r5, [r2, #0]
 8009356:	060a      	lsls	r2, r1, #24
 8009358:	d50b      	bpl.n	8009372 <_printf_i+0x162>
 800935a:	07ca      	lsls	r2, r1, #31
 800935c:	bf44      	itt	mi
 800935e:	f041 0120 	orrmi.w	r1, r1, #32
 8009362:	6021      	strmi	r1, [r4, #0]
 8009364:	b91b      	cbnz	r3, 800936e <_printf_i+0x15e>
 8009366:	6822      	ldr	r2, [r4, #0]
 8009368:	f022 0220 	bic.w	r2, r2, #32
 800936c:	6022      	str	r2, [r4, #0]
 800936e:	2210      	movs	r2, #16
 8009370:	e7b7      	b.n	80092e2 <_printf_i+0xd2>
 8009372:	064d      	lsls	r5, r1, #25
 8009374:	bf48      	it	mi
 8009376:	b29b      	uxthmi	r3, r3
 8009378:	e7ef      	b.n	800935a <_printf_i+0x14a>
 800937a:	4665      	mov	r5, ip
 800937c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009380:	fb02 3311 	mls	r3, r2, r1, r3
 8009384:	5cc3      	ldrb	r3, [r0, r3]
 8009386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800938a:	460b      	mov	r3, r1
 800938c:	2900      	cmp	r1, #0
 800938e:	d1f5      	bne.n	800937c <_printf_i+0x16c>
 8009390:	e7b9      	b.n	8009306 <_printf_i+0xf6>
 8009392:	6813      	ldr	r3, [r2, #0]
 8009394:	6825      	ldr	r5, [r4, #0]
 8009396:	6961      	ldr	r1, [r4, #20]
 8009398:	1d18      	adds	r0, r3, #4
 800939a:	6010      	str	r0, [r2, #0]
 800939c:	0628      	lsls	r0, r5, #24
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	d501      	bpl.n	80093a6 <_printf_i+0x196>
 80093a2:	6019      	str	r1, [r3, #0]
 80093a4:	e002      	b.n	80093ac <_printf_i+0x19c>
 80093a6:	066a      	lsls	r2, r5, #25
 80093a8:	d5fb      	bpl.n	80093a2 <_printf_i+0x192>
 80093aa:	8019      	strh	r1, [r3, #0]
 80093ac:	2300      	movs	r3, #0
 80093ae:	6123      	str	r3, [r4, #16]
 80093b0:	4665      	mov	r5, ip
 80093b2:	e7b9      	b.n	8009328 <_printf_i+0x118>
 80093b4:	6813      	ldr	r3, [r2, #0]
 80093b6:	1d19      	adds	r1, r3, #4
 80093b8:	6011      	str	r1, [r2, #0]
 80093ba:	681d      	ldr	r5, [r3, #0]
 80093bc:	6862      	ldr	r2, [r4, #4]
 80093be:	2100      	movs	r1, #0
 80093c0:	4628      	mov	r0, r5
 80093c2:	f7f6 ff35 	bl	8000230 <memchr>
 80093c6:	b108      	cbz	r0, 80093cc <_printf_i+0x1bc>
 80093c8:	1b40      	subs	r0, r0, r5
 80093ca:	6060      	str	r0, [r4, #4]
 80093cc:	6863      	ldr	r3, [r4, #4]
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	2300      	movs	r3, #0
 80093d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d6:	e7a7      	b.n	8009328 <_printf_i+0x118>
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	462a      	mov	r2, r5
 80093dc:	4639      	mov	r1, r7
 80093de:	4630      	mov	r0, r6
 80093e0:	47c0      	blx	r8
 80093e2:	3001      	adds	r0, #1
 80093e4:	d0aa      	beq.n	800933c <_printf_i+0x12c>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	079b      	lsls	r3, r3, #30
 80093ea:	d413      	bmi.n	8009414 <_printf_i+0x204>
 80093ec:	68e0      	ldr	r0, [r4, #12]
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	4298      	cmp	r0, r3
 80093f2:	bfb8      	it	lt
 80093f4:	4618      	movlt	r0, r3
 80093f6:	e7a3      	b.n	8009340 <_printf_i+0x130>
 80093f8:	2301      	movs	r3, #1
 80093fa:	464a      	mov	r2, r9
 80093fc:	4639      	mov	r1, r7
 80093fe:	4630      	mov	r0, r6
 8009400:	47c0      	blx	r8
 8009402:	3001      	adds	r0, #1
 8009404:	d09a      	beq.n	800933c <_printf_i+0x12c>
 8009406:	3501      	adds	r5, #1
 8009408:	68e3      	ldr	r3, [r4, #12]
 800940a:	9a03      	ldr	r2, [sp, #12]
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	42ab      	cmp	r3, r5
 8009410:	dcf2      	bgt.n	80093f8 <_printf_i+0x1e8>
 8009412:	e7eb      	b.n	80093ec <_printf_i+0x1dc>
 8009414:	2500      	movs	r5, #0
 8009416:	f104 0919 	add.w	r9, r4, #25
 800941a:	e7f5      	b.n	8009408 <_printf_i+0x1f8>
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1ac      	bne.n	800937a <_printf_i+0x16a>
 8009420:	7803      	ldrb	r3, [r0, #0]
 8009422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800942a:	e76c      	b.n	8009306 <_printf_i+0xf6>
 800942c:	0800bb52 	.word	0x0800bb52
 8009430:	0800bb63 	.word	0x0800bb63

08009434 <iprintf>:
 8009434:	b40f      	push	{r0, r1, r2, r3}
 8009436:	4b0a      	ldr	r3, [pc, #40]	; (8009460 <iprintf+0x2c>)
 8009438:	b513      	push	{r0, r1, r4, lr}
 800943a:	681c      	ldr	r4, [r3, #0]
 800943c:	b124      	cbz	r4, 8009448 <iprintf+0x14>
 800943e:	69a3      	ldr	r3, [r4, #24]
 8009440:	b913      	cbnz	r3, 8009448 <iprintf+0x14>
 8009442:	4620      	mov	r0, r4
 8009444:	f001 f8ac 	bl	800a5a0 <__sinit>
 8009448:	ab05      	add	r3, sp, #20
 800944a:	9a04      	ldr	r2, [sp, #16]
 800944c:	68a1      	ldr	r1, [r4, #8]
 800944e:	9301      	str	r3, [sp, #4]
 8009450:	4620      	mov	r0, r4
 8009452:	f001 fd65 	bl	800af20 <_vfiprintf_r>
 8009456:	b002      	add	sp, #8
 8009458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800945c:	b004      	add	sp, #16
 800945e:	4770      	bx	lr
 8009460:	20000014 	.word	0x20000014

08009464 <_puts_r>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	4605      	mov	r5, r0
 800946a:	b118      	cbz	r0, 8009474 <_puts_r+0x10>
 800946c:	6983      	ldr	r3, [r0, #24]
 800946e:	b90b      	cbnz	r3, 8009474 <_puts_r+0x10>
 8009470:	f001 f896 	bl	800a5a0 <__sinit>
 8009474:	69ab      	ldr	r3, [r5, #24]
 8009476:	68ac      	ldr	r4, [r5, #8]
 8009478:	b913      	cbnz	r3, 8009480 <_puts_r+0x1c>
 800947a:	4628      	mov	r0, r5
 800947c:	f001 f890 	bl	800a5a0 <__sinit>
 8009480:	4b23      	ldr	r3, [pc, #140]	; (8009510 <_puts_r+0xac>)
 8009482:	429c      	cmp	r4, r3
 8009484:	d117      	bne.n	80094b6 <_puts_r+0x52>
 8009486:	686c      	ldr	r4, [r5, #4]
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	071b      	lsls	r3, r3, #28
 800948c:	d51d      	bpl.n	80094ca <_puts_r+0x66>
 800948e:	6923      	ldr	r3, [r4, #16]
 8009490:	b1db      	cbz	r3, 80094ca <_puts_r+0x66>
 8009492:	3e01      	subs	r6, #1
 8009494:	68a3      	ldr	r3, [r4, #8]
 8009496:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800949a:	3b01      	subs	r3, #1
 800949c:	60a3      	str	r3, [r4, #8]
 800949e:	b9e9      	cbnz	r1, 80094dc <_puts_r+0x78>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da2e      	bge.n	8009502 <_puts_r+0x9e>
 80094a4:	4622      	mov	r2, r4
 80094a6:	210a      	movs	r1, #10
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 f883 	bl	80095b4 <__swbuf_r>
 80094ae:	3001      	adds	r0, #1
 80094b0:	d011      	beq.n	80094d6 <_puts_r+0x72>
 80094b2:	200a      	movs	r0, #10
 80094b4:	e011      	b.n	80094da <_puts_r+0x76>
 80094b6:	4b17      	ldr	r3, [pc, #92]	; (8009514 <_puts_r+0xb0>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d101      	bne.n	80094c0 <_puts_r+0x5c>
 80094bc:	68ac      	ldr	r4, [r5, #8]
 80094be:	e7e3      	b.n	8009488 <_puts_r+0x24>
 80094c0:	4b15      	ldr	r3, [pc, #84]	; (8009518 <_puts_r+0xb4>)
 80094c2:	429c      	cmp	r4, r3
 80094c4:	bf08      	it	eq
 80094c6:	68ec      	ldreq	r4, [r5, #12]
 80094c8:	e7de      	b.n	8009488 <_puts_r+0x24>
 80094ca:	4621      	mov	r1, r4
 80094cc:	4628      	mov	r0, r5
 80094ce:	f000 f8c3 	bl	8009658 <__swsetup_r>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d0dd      	beq.n	8009492 <_puts_r+0x2e>
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da04      	bge.n	80094ea <_puts_r+0x86>
 80094e0:	69a2      	ldr	r2, [r4, #24]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	dc06      	bgt.n	80094f4 <_puts_r+0x90>
 80094e6:	290a      	cmp	r1, #10
 80094e8:	d004      	beq.n	80094f4 <_puts_r+0x90>
 80094ea:	6823      	ldr	r3, [r4, #0]
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	6022      	str	r2, [r4, #0]
 80094f0:	7019      	strb	r1, [r3, #0]
 80094f2:	e7cf      	b.n	8009494 <_puts_r+0x30>
 80094f4:	4622      	mov	r2, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f85c 	bl	80095b4 <__swbuf_r>
 80094fc:	3001      	adds	r0, #1
 80094fe:	d1c9      	bne.n	8009494 <_puts_r+0x30>
 8009500:	e7e9      	b.n	80094d6 <_puts_r+0x72>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	200a      	movs	r0, #10
 8009506:	1c5a      	adds	r2, r3, #1
 8009508:	6022      	str	r2, [r4, #0]
 800950a:	7018      	strb	r0, [r3, #0]
 800950c:	e7e5      	b.n	80094da <_puts_r+0x76>
 800950e:	bf00      	nop
 8009510:	0800bba4 	.word	0x0800bba4
 8009514:	0800bbc4 	.word	0x0800bbc4
 8009518:	0800bb84 	.word	0x0800bb84

0800951c <puts>:
 800951c:	4b02      	ldr	r3, [pc, #8]	; (8009528 <puts+0xc>)
 800951e:	4601      	mov	r1, r0
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	f7ff bf9f 	b.w	8009464 <_puts_r>
 8009526:	bf00      	nop
 8009528:	20000014 	.word	0x20000014

0800952c <_raise_r>:
 800952c:	291f      	cmp	r1, #31
 800952e:	b538      	push	{r3, r4, r5, lr}
 8009530:	4604      	mov	r4, r0
 8009532:	460d      	mov	r5, r1
 8009534:	d904      	bls.n	8009540 <_raise_r+0x14>
 8009536:	2316      	movs	r3, #22
 8009538:	6003      	str	r3, [r0, #0]
 800953a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800953e:	bd38      	pop	{r3, r4, r5, pc}
 8009540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009542:	b112      	cbz	r2, 800954a <_raise_r+0x1e>
 8009544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009548:	b94b      	cbnz	r3, 800955e <_raise_r+0x32>
 800954a:	4620      	mov	r0, r4
 800954c:	f000 f830 	bl	80095b0 <_getpid_r>
 8009550:	462a      	mov	r2, r5
 8009552:	4601      	mov	r1, r0
 8009554:	4620      	mov	r0, r4
 8009556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955a:	f000 b817 	b.w	800958c <_kill_r>
 800955e:	2b01      	cmp	r3, #1
 8009560:	d00a      	beq.n	8009578 <_raise_r+0x4c>
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	d103      	bne.n	800956e <_raise_r+0x42>
 8009566:	2316      	movs	r3, #22
 8009568:	6003      	str	r3, [r0, #0]
 800956a:	2001      	movs	r0, #1
 800956c:	e7e7      	b.n	800953e <_raise_r+0x12>
 800956e:	2400      	movs	r4, #0
 8009570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009574:	4628      	mov	r0, r5
 8009576:	4798      	blx	r3
 8009578:	2000      	movs	r0, #0
 800957a:	e7e0      	b.n	800953e <_raise_r+0x12>

0800957c <raise>:
 800957c:	4b02      	ldr	r3, [pc, #8]	; (8009588 <raise+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f7ff bfd3 	b.w	800952c <_raise_r>
 8009586:	bf00      	nop
 8009588:	20000014 	.word	0x20000014

0800958c <_kill_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4c07      	ldr	r4, [pc, #28]	; (80095ac <_kill_r+0x20>)
 8009590:	2300      	movs	r3, #0
 8009592:	4605      	mov	r5, r0
 8009594:	4608      	mov	r0, r1
 8009596:	4611      	mov	r1, r2
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	f7f8 fe8f 	bl	80022bc <_kill>
 800959e:	1c43      	adds	r3, r0, #1
 80095a0:	d102      	bne.n	80095a8 <_kill_r+0x1c>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	b103      	cbz	r3, 80095a8 <_kill_r+0x1c>
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	bd38      	pop	{r3, r4, r5, pc}
 80095aa:	bf00      	nop
 80095ac:	2000508c 	.word	0x2000508c

080095b0 <_getpid_r>:
 80095b0:	f7f8 be7c 	b.w	80022ac <_getpid>

080095b4 <__swbuf_r>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	460e      	mov	r6, r1
 80095b8:	4614      	mov	r4, r2
 80095ba:	4605      	mov	r5, r0
 80095bc:	b118      	cbz	r0, 80095c6 <__swbuf_r+0x12>
 80095be:	6983      	ldr	r3, [r0, #24]
 80095c0:	b90b      	cbnz	r3, 80095c6 <__swbuf_r+0x12>
 80095c2:	f000 ffed 	bl	800a5a0 <__sinit>
 80095c6:	4b21      	ldr	r3, [pc, #132]	; (800964c <__swbuf_r+0x98>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	d12a      	bne.n	8009622 <__swbuf_r+0x6e>
 80095cc:	686c      	ldr	r4, [r5, #4]
 80095ce:	69a3      	ldr	r3, [r4, #24]
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	d52e      	bpl.n	8009636 <__swbuf_r+0x82>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b363      	cbz	r3, 8009636 <__swbuf_r+0x82>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	6820      	ldr	r0, [r4, #0]
 80095e0:	1ac0      	subs	r0, r0, r3
 80095e2:	6963      	ldr	r3, [r4, #20]
 80095e4:	b2f6      	uxtb	r6, r6
 80095e6:	4283      	cmp	r3, r0
 80095e8:	4637      	mov	r7, r6
 80095ea:	dc04      	bgt.n	80095f6 <__swbuf_r+0x42>
 80095ec:	4621      	mov	r1, r4
 80095ee:	4628      	mov	r0, r5
 80095f0:	f000 ff6c 	bl	800a4cc <_fflush_r>
 80095f4:	bb28      	cbnz	r0, 8009642 <__swbuf_r+0x8e>
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	60a3      	str	r3, [r4, #8]
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	6022      	str	r2, [r4, #0]
 8009602:	701e      	strb	r6, [r3, #0]
 8009604:	6963      	ldr	r3, [r4, #20]
 8009606:	3001      	adds	r0, #1
 8009608:	4283      	cmp	r3, r0
 800960a:	d004      	beq.n	8009616 <__swbuf_r+0x62>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	07db      	lsls	r3, r3, #31
 8009610:	d519      	bpl.n	8009646 <__swbuf_r+0x92>
 8009612:	2e0a      	cmp	r6, #10
 8009614:	d117      	bne.n	8009646 <__swbuf_r+0x92>
 8009616:	4621      	mov	r1, r4
 8009618:	4628      	mov	r0, r5
 800961a:	f000 ff57 	bl	800a4cc <_fflush_r>
 800961e:	b190      	cbz	r0, 8009646 <__swbuf_r+0x92>
 8009620:	e00f      	b.n	8009642 <__swbuf_r+0x8e>
 8009622:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <__swbuf_r+0x9c>)
 8009624:	429c      	cmp	r4, r3
 8009626:	d101      	bne.n	800962c <__swbuf_r+0x78>
 8009628:	68ac      	ldr	r4, [r5, #8]
 800962a:	e7d0      	b.n	80095ce <__swbuf_r+0x1a>
 800962c:	4b09      	ldr	r3, [pc, #36]	; (8009654 <__swbuf_r+0xa0>)
 800962e:	429c      	cmp	r4, r3
 8009630:	bf08      	it	eq
 8009632:	68ec      	ldreq	r4, [r5, #12]
 8009634:	e7cb      	b.n	80095ce <__swbuf_r+0x1a>
 8009636:	4621      	mov	r1, r4
 8009638:	4628      	mov	r0, r5
 800963a:	f000 f80d 	bl	8009658 <__swsetup_r>
 800963e:	2800      	cmp	r0, #0
 8009640:	d0cc      	beq.n	80095dc <__swbuf_r+0x28>
 8009642:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009646:	4638      	mov	r0, r7
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800964a:	bf00      	nop
 800964c:	0800bba4 	.word	0x0800bba4
 8009650:	0800bbc4 	.word	0x0800bbc4
 8009654:	0800bb84 	.word	0x0800bb84

08009658 <__swsetup_r>:
 8009658:	4b32      	ldr	r3, [pc, #200]	; (8009724 <__swsetup_r+0xcc>)
 800965a:	b570      	push	{r4, r5, r6, lr}
 800965c:	681d      	ldr	r5, [r3, #0]
 800965e:	4606      	mov	r6, r0
 8009660:	460c      	mov	r4, r1
 8009662:	b125      	cbz	r5, 800966e <__swsetup_r+0x16>
 8009664:	69ab      	ldr	r3, [r5, #24]
 8009666:	b913      	cbnz	r3, 800966e <__swsetup_r+0x16>
 8009668:	4628      	mov	r0, r5
 800966a:	f000 ff99 	bl	800a5a0 <__sinit>
 800966e:	4b2e      	ldr	r3, [pc, #184]	; (8009728 <__swsetup_r+0xd0>)
 8009670:	429c      	cmp	r4, r3
 8009672:	d10f      	bne.n	8009694 <__swsetup_r+0x3c>
 8009674:	686c      	ldr	r4, [r5, #4]
 8009676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800967a:	b29a      	uxth	r2, r3
 800967c:	0715      	lsls	r5, r2, #28
 800967e:	d42c      	bmi.n	80096da <__swsetup_r+0x82>
 8009680:	06d0      	lsls	r0, r2, #27
 8009682:	d411      	bmi.n	80096a8 <__swsetup_r+0x50>
 8009684:	2209      	movs	r2, #9
 8009686:	6032      	str	r2, [r6, #0]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009692:	e03e      	b.n	8009712 <__swsetup_r+0xba>
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <__swsetup_r+0xd4>)
 8009696:	429c      	cmp	r4, r3
 8009698:	d101      	bne.n	800969e <__swsetup_r+0x46>
 800969a:	68ac      	ldr	r4, [r5, #8]
 800969c:	e7eb      	b.n	8009676 <__swsetup_r+0x1e>
 800969e:	4b24      	ldr	r3, [pc, #144]	; (8009730 <__swsetup_r+0xd8>)
 80096a0:	429c      	cmp	r4, r3
 80096a2:	bf08      	it	eq
 80096a4:	68ec      	ldreq	r4, [r5, #12]
 80096a6:	e7e6      	b.n	8009676 <__swsetup_r+0x1e>
 80096a8:	0751      	lsls	r1, r2, #29
 80096aa:	d512      	bpl.n	80096d2 <__swsetup_r+0x7a>
 80096ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096ae:	b141      	cbz	r1, 80096c2 <__swsetup_r+0x6a>
 80096b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096b4:	4299      	cmp	r1, r3
 80096b6:	d002      	beq.n	80096be <__swsetup_r+0x66>
 80096b8:	4630      	mov	r0, r6
 80096ba:	f001 fb5f 	bl	800ad7c <_free_r>
 80096be:	2300      	movs	r3, #0
 80096c0:	6363      	str	r3, [r4, #52]	; 0x34
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096c8:	81a3      	strh	r3, [r4, #12]
 80096ca:	2300      	movs	r3, #0
 80096cc:	6063      	str	r3, [r4, #4]
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	f043 0308 	orr.w	r3, r3, #8
 80096d8:	81a3      	strh	r3, [r4, #12]
 80096da:	6923      	ldr	r3, [r4, #16]
 80096dc:	b94b      	cbnz	r3, 80096f2 <__swsetup_r+0x9a>
 80096de:	89a3      	ldrh	r3, [r4, #12]
 80096e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096e8:	d003      	beq.n	80096f2 <__swsetup_r+0x9a>
 80096ea:	4621      	mov	r1, r4
 80096ec:	4630      	mov	r0, r6
 80096ee:	f001 f813 	bl	800a718 <__smakebuf_r>
 80096f2:	89a2      	ldrh	r2, [r4, #12]
 80096f4:	f012 0301 	ands.w	r3, r2, #1
 80096f8:	d00c      	beq.n	8009714 <__swsetup_r+0xbc>
 80096fa:	2300      	movs	r3, #0
 80096fc:	60a3      	str	r3, [r4, #8]
 80096fe:	6963      	ldr	r3, [r4, #20]
 8009700:	425b      	negs	r3, r3
 8009702:	61a3      	str	r3, [r4, #24]
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	b953      	cbnz	r3, 800971e <__swsetup_r+0xc6>
 8009708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800970c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009710:	d1ba      	bne.n	8009688 <__swsetup_r+0x30>
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	0792      	lsls	r2, r2, #30
 8009716:	bf58      	it	pl
 8009718:	6963      	ldrpl	r3, [r4, #20]
 800971a:	60a3      	str	r3, [r4, #8]
 800971c:	e7f2      	b.n	8009704 <__swsetup_r+0xac>
 800971e:	2000      	movs	r0, #0
 8009720:	e7f7      	b.n	8009712 <__swsetup_r+0xba>
 8009722:	bf00      	nop
 8009724:	20000014 	.word	0x20000014
 8009728:	0800bba4 	.word	0x0800bba4
 800972c:	0800bbc4 	.word	0x0800bbc4
 8009730:	0800bb84 	.word	0x0800bb84

08009734 <quorem>:
 8009734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009738:	6903      	ldr	r3, [r0, #16]
 800973a:	690c      	ldr	r4, [r1, #16]
 800973c:	42a3      	cmp	r3, r4
 800973e:	4680      	mov	r8, r0
 8009740:	f2c0 8082 	blt.w	8009848 <quorem+0x114>
 8009744:	3c01      	subs	r4, #1
 8009746:	f101 0714 	add.w	r7, r1, #20
 800974a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800974e:	f100 0614 	add.w	r6, r0, #20
 8009752:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009756:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800975a:	eb06 030c 	add.w	r3, r6, ip
 800975e:	3501      	adds	r5, #1
 8009760:	eb07 090c 	add.w	r9, r7, ip
 8009764:	9301      	str	r3, [sp, #4]
 8009766:	fbb0 f5f5 	udiv	r5, r0, r5
 800976a:	b395      	cbz	r5, 80097d2 <quorem+0x9e>
 800976c:	f04f 0a00 	mov.w	sl, #0
 8009770:	4638      	mov	r0, r7
 8009772:	46b6      	mov	lr, r6
 8009774:	46d3      	mov	fp, sl
 8009776:	f850 2b04 	ldr.w	r2, [r0], #4
 800977a:	b293      	uxth	r3, r2
 800977c:	fb05 a303 	mla	r3, r5, r3, sl
 8009780:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009784:	b29b      	uxth	r3, r3
 8009786:	ebab 0303 	sub.w	r3, fp, r3
 800978a:	0c12      	lsrs	r2, r2, #16
 800978c:	f8de b000 	ldr.w	fp, [lr]
 8009790:	fb05 a202 	mla	r2, r5, r2, sl
 8009794:	fa13 f38b 	uxtah	r3, r3, fp
 8009798:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800979c:	fa1f fb82 	uxth.w	fp, r2
 80097a0:	f8de 2000 	ldr.w	r2, [lr]
 80097a4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80097a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097b2:	4581      	cmp	r9, r0
 80097b4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80097b8:	f84e 3b04 	str.w	r3, [lr], #4
 80097bc:	d2db      	bcs.n	8009776 <quorem+0x42>
 80097be:	f856 300c 	ldr.w	r3, [r6, ip]
 80097c2:	b933      	cbnz	r3, 80097d2 <quorem+0x9e>
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	3b04      	subs	r3, #4
 80097c8:	429e      	cmp	r6, r3
 80097ca:	461a      	mov	r2, r3
 80097cc:	d330      	bcc.n	8009830 <quorem+0xfc>
 80097ce:	f8c8 4010 	str.w	r4, [r8, #16]
 80097d2:	4640      	mov	r0, r8
 80097d4:	f001 f9fe 	bl	800abd4 <__mcmp>
 80097d8:	2800      	cmp	r0, #0
 80097da:	db25      	blt.n	8009828 <quorem+0xf4>
 80097dc:	3501      	adds	r5, #1
 80097de:	4630      	mov	r0, r6
 80097e0:	f04f 0c00 	mov.w	ip, #0
 80097e4:	f857 2b04 	ldr.w	r2, [r7], #4
 80097e8:	f8d0 e000 	ldr.w	lr, [r0]
 80097ec:	b293      	uxth	r3, r2
 80097ee:	ebac 0303 	sub.w	r3, ip, r3
 80097f2:	0c12      	lsrs	r2, r2, #16
 80097f4:	fa13 f38e 	uxtah	r3, r3, lr
 80097f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80097fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009800:	b29b      	uxth	r3, r3
 8009802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009806:	45b9      	cmp	r9, r7
 8009808:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800980c:	f840 3b04 	str.w	r3, [r0], #4
 8009810:	d2e8      	bcs.n	80097e4 <quorem+0xb0>
 8009812:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009816:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800981a:	b92a      	cbnz	r2, 8009828 <quorem+0xf4>
 800981c:	3b04      	subs	r3, #4
 800981e:	429e      	cmp	r6, r3
 8009820:	461a      	mov	r2, r3
 8009822:	d30b      	bcc.n	800983c <quorem+0x108>
 8009824:	f8c8 4010 	str.w	r4, [r8, #16]
 8009828:	4628      	mov	r0, r5
 800982a:	b003      	add	sp, #12
 800982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009830:	6812      	ldr	r2, [r2, #0]
 8009832:	3b04      	subs	r3, #4
 8009834:	2a00      	cmp	r2, #0
 8009836:	d1ca      	bne.n	80097ce <quorem+0x9a>
 8009838:	3c01      	subs	r4, #1
 800983a:	e7c5      	b.n	80097c8 <quorem+0x94>
 800983c:	6812      	ldr	r2, [r2, #0]
 800983e:	3b04      	subs	r3, #4
 8009840:	2a00      	cmp	r2, #0
 8009842:	d1ef      	bne.n	8009824 <quorem+0xf0>
 8009844:	3c01      	subs	r4, #1
 8009846:	e7ea      	b.n	800981e <quorem+0xea>
 8009848:	2000      	movs	r0, #0
 800984a:	e7ee      	b.n	800982a <quorem+0xf6>
 800984c:	0000      	movs	r0, r0
	...

08009850 <_dtoa_r>:
 8009850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009854:	ec57 6b10 	vmov	r6, r7, d0
 8009858:	b097      	sub	sp, #92	; 0x5c
 800985a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800985c:	9106      	str	r1, [sp, #24]
 800985e:	4604      	mov	r4, r0
 8009860:	920b      	str	r2, [sp, #44]	; 0x2c
 8009862:	9312      	str	r3, [sp, #72]	; 0x48
 8009864:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009868:	e9cd 6700 	strd	r6, r7, [sp]
 800986c:	b93d      	cbnz	r5, 800987e <_dtoa_r+0x2e>
 800986e:	2010      	movs	r0, #16
 8009870:	f000 ff92 	bl	800a798 <malloc>
 8009874:	6260      	str	r0, [r4, #36]	; 0x24
 8009876:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800987a:	6005      	str	r5, [r0, #0]
 800987c:	60c5      	str	r5, [r0, #12]
 800987e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009880:	6819      	ldr	r1, [r3, #0]
 8009882:	b151      	cbz	r1, 800989a <_dtoa_r+0x4a>
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	604a      	str	r2, [r1, #4]
 8009888:	2301      	movs	r3, #1
 800988a:	4093      	lsls	r3, r2
 800988c:	608b      	str	r3, [r1, #8]
 800988e:	4620      	mov	r0, r4
 8009890:	f000 ffbe 	bl	800a810 <_Bfree>
 8009894:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009896:	2200      	movs	r2, #0
 8009898:	601a      	str	r2, [r3, #0]
 800989a:	1e3b      	subs	r3, r7, #0
 800989c:	bfbb      	ittet	lt
 800989e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098a2:	9301      	strlt	r3, [sp, #4]
 80098a4:	2300      	movge	r3, #0
 80098a6:	2201      	movlt	r2, #1
 80098a8:	bfac      	ite	ge
 80098aa:	f8c8 3000 	strge.w	r3, [r8]
 80098ae:	f8c8 2000 	strlt.w	r2, [r8]
 80098b2:	4baf      	ldr	r3, [pc, #700]	; (8009b70 <_dtoa_r+0x320>)
 80098b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80098b8:	ea33 0308 	bics.w	r3, r3, r8
 80098bc:	d114      	bne.n	80098e8 <_dtoa_r+0x98>
 80098be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80098c4:	6013      	str	r3, [r2, #0]
 80098c6:	9b00      	ldr	r3, [sp, #0]
 80098c8:	b923      	cbnz	r3, 80098d4 <_dtoa_r+0x84>
 80098ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f000 8542 	beq.w	800a358 <_dtoa_r+0xb08>
 80098d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009b84 <_dtoa_r+0x334>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 8544 	beq.w	800a368 <_dtoa_r+0xb18>
 80098e0:	f10b 0303 	add.w	r3, fp, #3
 80098e4:	f000 bd3e 	b.w	800a364 <_dtoa_r+0xb14>
 80098e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80098ec:	2200      	movs	r2, #0
 80098ee:	2300      	movs	r3, #0
 80098f0:	4630      	mov	r0, r6
 80098f2:	4639      	mov	r1, r7
 80098f4:	f7f7 f910 	bl	8000b18 <__aeabi_dcmpeq>
 80098f8:	4681      	mov	r9, r0
 80098fa:	b168      	cbz	r0, 8009918 <_dtoa_r+0xc8>
 80098fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098fe:	2301      	movs	r3, #1
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8524 	beq.w	800a352 <_dtoa_r+0xb02>
 800990a:	4b9a      	ldr	r3, [pc, #616]	; (8009b74 <_dtoa_r+0x324>)
 800990c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800990e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	f000 bd28 	b.w	800a368 <_dtoa_r+0xb18>
 8009918:	aa14      	add	r2, sp, #80	; 0x50
 800991a:	a915      	add	r1, sp, #84	; 0x54
 800991c:	ec47 6b10 	vmov	d0, r6, r7
 8009920:	4620      	mov	r0, r4
 8009922:	f001 f9ce 	bl	800acc2 <__d2b>
 8009926:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800992a:	9004      	str	r0, [sp, #16]
 800992c:	2d00      	cmp	r5, #0
 800992e:	d07c      	beq.n	8009a2a <_dtoa_r+0x1da>
 8009930:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009934:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009938:	46b2      	mov	sl, r6
 800993a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800993e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009942:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009946:	2200      	movs	r2, #0
 8009948:	4b8b      	ldr	r3, [pc, #556]	; (8009b78 <_dtoa_r+0x328>)
 800994a:	4650      	mov	r0, sl
 800994c:	4659      	mov	r1, fp
 800994e:	f7f6 fcc3 	bl	80002d8 <__aeabi_dsub>
 8009952:	a381      	add	r3, pc, #516	; (adr r3, 8009b58 <_dtoa_r+0x308>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f7f6 fe76 	bl	8000648 <__aeabi_dmul>
 800995c:	a380      	add	r3, pc, #512	; (adr r3, 8009b60 <_dtoa_r+0x310>)
 800995e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009962:	f7f6 fcbb 	bl	80002dc <__adddf3>
 8009966:	4606      	mov	r6, r0
 8009968:	4628      	mov	r0, r5
 800996a:	460f      	mov	r7, r1
 800996c:	f7f6 fe02 	bl	8000574 <__aeabi_i2d>
 8009970:	a37d      	add	r3, pc, #500	; (adr r3, 8009b68 <_dtoa_r+0x318>)
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f7f6 fe67 	bl	8000648 <__aeabi_dmul>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4630      	mov	r0, r6
 8009980:	4639      	mov	r1, r7
 8009982:	f7f6 fcab 	bl	80002dc <__adddf3>
 8009986:	4606      	mov	r6, r0
 8009988:	460f      	mov	r7, r1
 800998a:	f7f7 f90d 	bl	8000ba8 <__aeabi_d2iz>
 800998e:	2200      	movs	r2, #0
 8009990:	4682      	mov	sl, r0
 8009992:	2300      	movs	r3, #0
 8009994:	4630      	mov	r0, r6
 8009996:	4639      	mov	r1, r7
 8009998:	f7f7 f8c8 	bl	8000b2c <__aeabi_dcmplt>
 800999c:	b148      	cbz	r0, 80099b2 <_dtoa_r+0x162>
 800999e:	4650      	mov	r0, sl
 80099a0:	f7f6 fde8 	bl	8000574 <__aeabi_i2d>
 80099a4:	4632      	mov	r2, r6
 80099a6:	463b      	mov	r3, r7
 80099a8:	f7f7 f8b6 	bl	8000b18 <__aeabi_dcmpeq>
 80099ac:	b908      	cbnz	r0, 80099b2 <_dtoa_r+0x162>
 80099ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80099b2:	f1ba 0f16 	cmp.w	sl, #22
 80099b6:	d859      	bhi.n	8009a6c <_dtoa_r+0x21c>
 80099b8:	4970      	ldr	r1, [pc, #448]	; (8009b7c <_dtoa_r+0x32c>)
 80099ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80099be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099c6:	f7f7 f8cf 	bl	8000b68 <__aeabi_dcmpgt>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d050      	beq.n	8009a70 <_dtoa_r+0x220>
 80099ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80099d2:	2300      	movs	r3, #0
 80099d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80099d8:	1b5d      	subs	r5, r3, r5
 80099da:	f1b5 0801 	subs.w	r8, r5, #1
 80099de:	bf49      	itett	mi
 80099e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80099e4:	2300      	movpl	r3, #0
 80099e6:	9305      	strmi	r3, [sp, #20]
 80099e8:	f04f 0800 	movmi.w	r8, #0
 80099ec:	bf58      	it	pl
 80099ee:	9305      	strpl	r3, [sp, #20]
 80099f0:	f1ba 0f00 	cmp.w	sl, #0
 80099f4:	db3e      	blt.n	8009a74 <_dtoa_r+0x224>
 80099f6:	2300      	movs	r3, #0
 80099f8:	44d0      	add	r8, sl
 80099fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80099fe:	9307      	str	r3, [sp, #28]
 8009a00:	9b06      	ldr	r3, [sp, #24]
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	f200 8090 	bhi.w	8009b28 <_dtoa_r+0x2d8>
 8009a08:	2b05      	cmp	r3, #5
 8009a0a:	bfc4      	itt	gt
 8009a0c:	3b04      	subgt	r3, #4
 8009a0e:	9306      	strgt	r3, [sp, #24]
 8009a10:	9b06      	ldr	r3, [sp, #24]
 8009a12:	f1a3 0302 	sub.w	r3, r3, #2
 8009a16:	bfcc      	ite	gt
 8009a18:	2500      	movgt	r5, #0
 8009a1a:	2501      	movle	r5, #1
 8009a1c:	2b03      	cmp	r3, #3
 8009a1e:	f200 808f 	bhi.w	8009b40 <_dtoa_r+0x2f0>
 8009a22:	e8df f003 	tbb	[pc, r3]
 8009a26:	7f7d      	.short	0x7f7d
 8009a28:	7131      	.short	0x7131
 8009a2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009a2e:	441d      	add	r5, r3
 8009a30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009a34:	2820      	cmp	r0, #32
 8009a36:	dd13      	ble.n	8009a60 <_dtoa_r+0x210>
 8009a38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009a3c:	9b00      	ldr	r3, [sp, #0]
 8009a3e:	fa08 f800 	lsl.w	r8, r8, r0
 8009a42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009a46:	fa23 f000 	lsr.w	r0, r3, r0
 8009a4a:	ea48 0000 	orr.w	r0, r8, r0
 8009a4e:	f7f6 fd81 	bl	8000554 <__aeabi_ui2d>
 8009a52:	2301      	movs	r3, #1
 8009a54:	4682      	mov	sl, r0
 8009a56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009a5a:	3d01      	subs	r5, #1
 8009a5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009a5e:	e772      	b.n	8009946 <_dtoa_r+0xf6>
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	f1c0 0020 	rsb	r0, r0, #32
 8009a66:	fa03 f000 	lsl.w	r0, r3, r0
 8009a6a:	e7f0      	b.n	8009a4e <_dtoa_r+0x1fe>
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e7b1      	b.n	80099d4 <_dtoa_r+0x184>
 8009a70:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a72:	e7b0      	b.n	80099d6 <_dtoa_r+0x186>
 8009a74:	9b05      	ldr	r3, [sp, #20]
 8009a76:	eba3 030a 	sub.w	r3, r3, sl
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	f1ca 0300 	rsb	r3, sl, #0
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	2300      	movs	r3, #0
 8009a84:	930e      	str	r3, [sp, #56]	; 0x38
 8009a86:	e7bb      	b.n	8009a00 <_dtoa_r+0x1b0>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8009a8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	dd59      	ble.n	8009b46 <_dtoa_r+0x2f6>
 8009a92:	9302      	str	r3, [sp, #8]
 8009a94:	4699      	mov	r9, r3
 8009a96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a98:	2200      	movs	r2, #0
 8009a9a:	6072      	str	r2, [r6, #4]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f102 0014 	add.w	r0, r2, #20
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	6871      	ldr	r1, [r6, #4]
 8009aa6:	d953      	bls.n	8009b50 <_dtoa_r+0x300>
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 fe7d 	bl	800a7a8 <_Balloc>
 8009aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ab0:	6030      	str	r0, [r6, #0]
 8009ab2:	f1b9 0f0e 	cmp.w	r9, #14
 8009ab6:	f8d3 b000 	ldr.w	fp, [r3]
 8009aba:	f200 80e6 	bhi.w	8009c8a <_dtoa_r+0x43a>
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	f000 80e3 	beq.w	8009c8a <_dtoa_r+0x43a>
 8009ac4:	ed9d 7b00 	vldr	d7, [sp]
 8009ac8:	f1ba 0f00 	cmp.w	sl, #0
 8009acc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009ad0:	dd74      	ble.n	8009bbc <_dtoa_r+0x36c>
 8009ad2:	4a2a      	ldr	r2, [pc, #168]	; (8009b7c <_dtoa_r+0x32c>)
 8009ad4:	f00a 030f 	and.w	r3, sl, #15
 8009ad8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009adc:	ed93 7b00 	vldr	d7, [r3]
 8009ae0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009ae4:	06f0      	lsls	r0, r6, #27
 8009ae6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009aea:	d565      	bpl.n	8009bb8 <_dtoa_r+0x368>
 8009aec:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <_dtoa_r+0x330>)
 8009aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009af2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009af6:	f7f6 fed1 	bl	800089c <__aeabi_ddiv>
 8009afa:	e9cd 0100 	strd	r0, r1, [sp]
 8009afe:	f006 060f 	and.w	r6, r6, #15
 8009b02:	2503      	movs	r5, #3
 8009b04:	4f1e      	ldr	r7, [pc, #120]	; (8009b80 <_dtoa_r+0x330>)
 8009b06:	e04c      	b.n	8009ba2 <_dtoa_r+0x352>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b0e:	4453      	add	r3, sl
 8009b10:	f103 0901 	add.w	r9, r3, #1
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	464b      	mov	r3, r9
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	bfb8      	it	lt
 8009b1c:	2301      	movlt	r3, #1
 8009b1e:	e7ba      	b.n	8009a96 <_dtoa_r+0x246>
 8009b20:	2300      	movs	r3, #0
 8009b22:	e7b2      	b.n	8009a8a <_dtoa_r+0x23a>
 8009b24:	2300      	movs	r3, #0
 8009b26:	e7f0      	b.n	8009b0a <_dtoa_r+0x2ba>
 8009b28:	2501      	movs	r5, #1
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	950a      	str	r5, [sp, #40]	; 0x28
 8009b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b34:	9302      	str	r3, [sp, #8]
 8009b36:	4699      	mov	r9, r3
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2312      	movs	r3, #18
 8009b3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b3e:	e7aa      	b.n	8009a96 <_dtoa_r+0x246>
 8009b40:	2301      	movs	r3, #1
 8009b42:	930a      	str	r3, [sp, #40]	; 0x28
 8009b44:	e7f4      	b.n	8009b30 <_dtoa_r+0x2e0>
 8009b46:	2301      	movs	r3, #1
 8009b48:	9302      	str	r3, [sp, #8]
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	e7f5      	b.n	8009b3c <_dtoa_r+0x2ec>
 8009b50:	3101      	adds	r1, #1
 8009b52:	6071      	str	r1, [r6, #4]
 8009b54:	0052      	lsls	r2, r2, #1
 8009b56:	e7a2      	b.n	8009a9e <_dtoa_r+0x24e>
 8009b58:	636f4361 	.word	0x636f4361
 8009b5c:	3fd287a7 	.word	0x3fd287a7
 8009b60:	8b60c8b3 	.word	0x8b60c8b3
 8009b64:	3fc68a28 	.word	0x3fc68a28
 8009b68:	509f79fb 	.word	0x509f79fb
 8009b6c:	3fd34413 	.word	0x3fd34413
 8009b70:	7ff00000 	.word	0x7ff00000
 8009b74:	0800bb51 	.word	0x0800bb51
 8009b78:	3ff80000 	.word	0x3ff80000
 8009b7c:	0800bc10 	.word	0x0800bc10
 8009b80:	0800bbe8 	.word	0x0800bbe8
 8009b84:	0800bb7d 	.word	0x0800bb7d
 8009b88:	07f1      	lsls	r1, r6, #31
 8009b8a:	d508      	bpl.n	8009b9e <_dtoa_r+0x34e>
 8009b8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b94:	f7f6 fd58 	bl	8000648 <__aeabi_dmul>
 8009b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009b9c:	3501      	adds	r5, #1
 8009b9e:	1076      	asrs	r6, r6, #1
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	2e00      	cmp	r6, #0
 8009ba4:	d1f0      	bne.n	8009b88 <_dtoa_r+0x338>
 8009ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009baa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bae:	f7f6 fe75 	bl	800089c <__aeabi_ddiv>
 8009bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8009bb6:	e01a      	b.n	8009bee <_dtoa_r+0x39e>
 8009bb8:	2502      	movs	r5, #2
 8009bba:	e7a3      	b.n	8009b04 <_dtoa_r+0x2b4>
 8009bbc:	f000 80a0 	beq.w	8009d00 <_dtoa_r+0x4b0>
 8009bc0:	f1ca 0600 	rsb	r6, sl, #0
 8009bc4:	4b9f      	ldr	r3, [pc, #636]	; (8009e44 <_dtoa_r+0x5f4>)
 8009bc6:	4fa0      	ldr	r7, [pc, #640]	; (8009e48 <_dtoa_r+0x5f8>)
 8009bc8:	f006 020f 	and.w	r2, r6, #15
 8009bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bd8:	f7f6 fd36 	bl	8000648 <__aeabi_dmul>
 8009bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8009be0:	1136      	asrs	r6, r6, #4
 8009be2:	2300      	movs	r3, #0
 8009be4:	2502      	movs	r5, #2
 8009be6:	2e00      	cmp	r6, #0
 8009be8:	d17f      	bne.n	8009cea <_dtoa_r+0x49a>
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1e1      	bne.n	8009bb2 <_dtoa_r+0x362>
 8009bee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 8087 	beq.w	8009d04 <_dtoa_r+0x4b4>
 8009bf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4b93      	ldr	r3, [pc, #588]	; (8009e4c <_dtoa_r+0x5fc>)
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 ff93 	bl	8000b2c <__aeabi_dcmplt>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d07c      	beq.n	8009d04 <_dtoa_r+0x4b4>
 8009c0a:	f1b9 0f00 	cmp.w	r9, #0
 8009c0e:	d079      	beq.n	8009d04 <_dtoa_r+0x4b4>
 8009c10:	9b02      	ldr	r3, [sp, #8]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dd35      	ble.n	8009c82 <_dtoa_r+0x432>
 8009c16:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009c1a:	9308      	str	r3, [sp, #32]
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	2200      	movs	r2, #0
 8009c20:	4b8b      	ldr	r3, [pc, #556]	; (8009e50 <_dtoa_r+0x600>)
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7f6 fd10 	bl	8000648 <__aeabi_dmul>
 8009c28:	e9cd 0100 	strd	r0, r1, [sp]
 8009c2c:	9f02      	ldr	r7, [sp, #8]
 8009c2e:	3501      	adds	r5, #1
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7f6 fc9f 	bl	8000574 <__aeabi_i2d>
 8009c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c3a:	f7f6 fd05 	bl	8000648 <__aeabi_dmul>
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4b84      	ldr	r3, [pc, #528]	; (8009e54 <_dtoa_r+0x604>)
 8009c42:	f7f6 fb4b 	bl	80002dc <__adddf3>
 8009c46:	4605      	mov	r5, r0
 8009c48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	d15d      	bne.n	8009d0c <_dtoa_r+0x4bc>
 8009c50:	2200      	movs	r2, #0
 8009c52:	4b81      	ldr	r3, [pc, #516]	; (8009e58 <_dtoa_r+0x608>)
 8009c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c58:	f7f6 fb3e 	bl	80002d8 <__aeabi_dsub>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4633      	mov	r3, r6
 8009c60:	e9cd 0100 	strd	r0, r1, [sp]
 8009c64:	f7f6 ff80 	bl	8000b68 <__aeabi_dcmpgt>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f040 8288 	bne.w	800a17e <_dtoa_r+0x92e>
 8009c6e:	462a      	mov	r2, r5
 8009c70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c78:	f7f6 ff58 	bl	8000b2c <__aeabi_dcmplt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f040 827c 	bne.w	800a17a <_dtoa_r+0x92a>
 8009c82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c86:	e9cd 2300 	strd	r2, r3, [sp]
 8009c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f2c0 8150 	blt.w	8009f32 <_dtoa_r+0x6e2>
 8009c92:	f1ba 0f0e 	cmp.w	sl, #14
 8009c96:	f300 814c 	bgt.w	8009f32 <_dtoa_r+0x6e2>
 8009c9a:	4b6a      	ldr	r3, [pc, #424]	; (8009e44 <_dtoa_r+0x5f4>)
 8009c9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ca0:	ed93 7b00 	vldr	d7, [r3]
 8009ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cac:	f280 80d8 	bge.w	8009e60 <_dtoa_r+0x610>
 8009cb0:	f1b9 0f00 	cmp.w	r9, #0
 8009cb4:	f300 80d4 	bgt.w	8009e60 <_dtoa_r+0x610>
 8009cb8:	f040 825e 	bne.w	800a178 <_dtoa_r+0x928>
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4b66      	ldr	r3, [pc, #408]	; (8009e58 <_dtoa_r+0x608>)
 8009cc0:	ec51 0b17 	vmov	r0, r1, d7
 8009cc4:	f7f6 fcc0 	bl	8000648 <__aeabi_dmul>
 8009cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ccc:	f7f6 ff42 	bl	8000b54 <__aeabi_dcmpge>
 8009cd0:	464f      	mov	r7, r9
 8009cd2:	464e      	mov	r6, r9
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f040 8234 	bne.w	800a142 <_dtoa_r+0x8f2>
 8009cda:	2331      	movs	r3, #49	; 0x31
 8009cdc:	f10b 0501 	add.w	r5, fp, #1
 8009ce0:	f88b 3000 	strb.w	r3, [fp]
 8009ce4:	f10a 0a01 	add.w	sl, sl, #1
 8009ce8:	e22f      	b.n	800a14a <_dtoa_r+0x8fa>
 8009cea:	07f2      	lsls	r2, r6, #31
 8009cec:	d505      	bpl.n	8009cfa <_dtoa_r+0x4aa>
 8009cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf2:	f7f6 fca9 	bl	8000648 <__aeabi_dmul>
 8009cf6:	3501      	adds	r5, #1
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	1076      	asrs	r6, r6, #1
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	e772      	b.n	8009be6 <_dtoa_r+0x396>
 8009d00:	2502      	movs	r5, #2
 8009d02:	e774      	b.n	8009bee <_dtoa_r+0x39e>
 8009d04:	f8cd a020 	str.w	sl, [sp, #32]
 8009d08:	464f      	mov	r7, r9
 8009d0a:	e791      	b.n	8009c30 <_dtoa_r+0x3e0>
 8009d0c:	4b4d      	ldr	r3, [pc, #308]	; (8009e44 <_dtoa_r+0x5f4>)
 8009d0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d047      	beq.n	8009dac <_dtoa_r+0x55c>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	2000      	movs	r0, #0
 8009d22:	494e      	ldr	r1, [pc, #312]	; (8009e5c <_dtoa_r+0x60c>)
 8009d24:	f7f6 fdba 	bl	800089c <__aeabi_ddiv>
 8009d28:	462a      	mov	r2, r5
 8009d2a:	4633      	mov	r3, r6
 8009d2c:	f7f6 fad4 	bl	80002d8 <__aeabi_dsub>
 8009d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d34:	465d      	mov	r5, fp
 8009d36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d3a:	f7f6 ff35 	bl	8000ba8 <__aeabi_d2iz>
 8009d3e:	4606      	mov	r6, r0
 8009d40:	f7f6 fc18 	bl	8000574 <__aeabi_i2d>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d4c:	f7f6 fac4 	bl	80002d8 <__aeabi_dsub>
 8009d50:	3630      	adds	r6, #48	; 0x30
 8009d52:	f805 6b01 	strb.w	r6, [r5], #1
 8009d56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8009d5e:	f7f6 fee5 	bl	8000b2c <__aeabi_dcmplt>
 8009d62:	2800      	cmp	r0, #0
 8009d64:	d163      	bne.n	8009e2e <_dtoa_r+0x5de>
 8009d66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d6a:	2000      	movs	r0, #0
 8009d6c:	4937      	ldr	r1, [pc, #220]	; (8009e4c <_dtoa_r+0x5fc>)
 8009d6e:	f7f6 fab3 	bl	80002d8 <__aeabi_dsub>
 8009d72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d76:	f7f6 fed9 	bl	8000b2c <__aeabi_dcmplt>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	f040 80b7 	bne.w	8009eee <_dtoa_r+0x69e>
 8009d80:	eba5 030b 	sub.w	r3, r5, fp
 8009d84:	429f      	cmp	r7, r3
 8009d86:	f77f af7c 	ble.w	8009c82 <_dtoa_r+0x432>
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4b30      	ldr	r3, [pc, #192]	; (8009e50 <_dtoa_r+0x600>)
 8009d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d92:	f7f6 fc59 	bl	8000648 <__aeabi_dmul>
 8009d96:	2200      	movs	r2, #0
 8009d98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009d9c:	4b2c      	ldr	r3, [pc, #176]	; (8009e50 <_dtoa_r+0x600>)
 8009d9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009da2:	f7f6 fc51 	bl	8000648 <__aeabi_dmul>
 8009da6:	e9cd 0100 	strd	r0, r1, [sp]
 8009daa:	e7c4      	b.n	8009d36 <_dtoa_r+0x4e6>
 8009dac:	462a      	mov	r2, r5
 8009dae:	4633      	mov	r3, r6
 8009db0:	f7f6 fc4a 	bl	8000648 <__aeabi_dmul>
 8009db4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009db8:	eb0b 0507 	add.w	r5, fp, r7
 8009dbc:	465e      	mov	r6, fp
 8009dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dc2:	f7f6 fef1 	bl	8000ba8 <__aeabi_d2iz>
 8009dc6:	4607      	mov	r7, r0
 8009dc8:	f7f6 fbd4 	bl	8000574 <__aeabi_i2d>
 8009dcc:	3730      	adds	r7, #48	; 0x30
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd6:	f7f6 fa7f 	bl	80002d8 <__aeabi_dsub>
 8009dda:	f806 7b01 	strb.w	r7, [r6], #1
 8009dde:	42ae      	cmp	r6, r5
 8009de0:	e9cd 0100 	strd	r0, r1, [sp]
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	d126      	bne.n	8009e38 <_dtoa_r+0x5e8>
 8009dea:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <_dtoa_r+0x60c>)
 8009dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009df0:	f7f6 fa74 	bl	80002dc <__adddf3>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dfc:	f7f6 feb4 	bl	8000b68 <__aeabi_dcmpgt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d174      	bne.n	8009eee <_dtoa_r+0x69e>
 8009e04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009e08:	2000      	movs	r0, #0
 8009e0a:	4914      	ldr	r1, [pc, #80]	; (8009e5c <_dtoa_r+0x60c>)
 8009e0c:	f7f6 fa64 	bl	80002d8 <__aeabi_dsub>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e18:	f7f6 fe88 	bl	8000b2c <__aeabi_dcmplt>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f43f af30 	beq.w	8009c82 <_dtoa_r+0x432>
 8009e22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e26:	2b30      	cmp	r3, #48	; 0x30
 8009e28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009e2c:	d002      	beq.n	8009e34 <_dtoa_r+0x5e4>
 8009e2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009e32:	e04a      	b.n	8009eca <_dtoa_r+0x67a>
 8009e34:	4615      	mov	r5, r2
 8009e36:	e7f4      	b.n	8009e22 <_dtoa_r+0x5d2>
 8009e38:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <_dtoa_r+0x600>)
 8009e3a:	f7f6 fc05 	bl	8000648 <__aeabi_dmul>
 8009e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8009e42:	e7bc      	b.n	8009dbe <_dtoa_r+0x56e>
 8009e44:	0800bc10 	.word	0x0800bc10
 8009e48:	0800bbe8 	.word	0x0800bbe8
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	40240000 	.word	0x40240000
 8009e54:	401c0000 	.word	0x401c0000
 8009e58:	40140000 	.word	0x40140000
 8009e5c:	3fe00000 	.word	0x3fe00000
 8009e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009e64:	465d      	mov	r5, fp
 8009e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	f7f6 fd15 	bl	800089c <__aeabi_ddiv>
 8009e72:	f7f6 fe99 	bl	8000ba8 <__aeabi_d2iz>
 8009e76:	4680      	mov	r8, r0
 8009e78:	f7f6 fb7c 	bl	8000574 <__aeabi_i2d>
 8009e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e80:	f7f6 fbe2 	bl	8000648 <__aeabi_dmul>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	4630      	mov	r0, r6
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009e90:	f7f6 fa22 	bl	80002d8 <__aeabi_dsub>
 8009e94:	f805 6b01 	strb.w	r6, [r5], #1
 8009e98:	eba5 060b 	sub.w	r6, r5, fp
 8009e9c:	45b1      	cmp	r9, r6
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	d139      	bne.n	8009f18 <_dtoa_r+0x6c8>
 8009ea4:	f7f6 fa1a 	bl	80002dc <__adddf3>
 8009ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eac:	4606      	mov	r6, r0
 8009eae:	460f      	mov	r7, r1
 8009eb0:	f7f6 fe5a 	bl	8000b68 <__aeabi_dcmpgt>
 8009eb4:	b9c8      	cbnz	r0, 8009eea <_dtoa_r+0x69a>
 8009eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	f7f6 fe2b 	bl	8000b18 <__aeabi_dcmpeq>
 8009ec2:	b110      	cbz	r0, 8009eca <_dtoa_r+0x67a>
 8009ec4:	f018 0f01 	tst.w	r8, #1
 8009ec8:	d10f      	bne.n	8009eea <_dtoa_r+0x69a>
 8009eca:	9904      	ldr	r1, [sp, #16]
 8009ecc:	4620      	mov	r0, r4
 8009ece:	f000 fc9f 	bl	800a810 <_Bfree>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ed6:	702b      	strb	r3, [r5, #0]
 8009ed8:	f10a 0301 	add.w	r3, sl, #1
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 8241 	beq.w	800a368 <_dtoa_r+0xb18>
 8009ee6:	601d      	str	r5, [r3, #0]
 8009ee8:	e23e      	b.n	800a368 <_dtoa_r+0xb18>
 8009eea:	f8cd a020 	str.w	sl, [sp, #32]
 8009eee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009ef2:	2a39      	cmp	r2, #57	; 0x39
 8009ef4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009ef8:	d108      	bne.n	8009f0c <_dtoa_r+0x6bc>
 8009efa:	459b      	cmp	fp, r3
 8009efc:	d10a      	bne.n	8009f14 <_dtoa_r+0x6c4>
 8009efe:	9b08      	ldr	r3, [sp, #32]
 8009f00:	3301      	adds	r3, #1
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	2330      	movs	r3, #48	; 0x30
 8009f06:	f88b 3000 	strb.w	r3, [fp]
 8009f0a:	465b      	mov	r3, fp
 8009f0c:	781a      	ldrb	r2, [r3, #0]
 8009f0e:	3201      	adds	r2, #1
 8009f10:	701a      	strb	r2, [r3, #0]
 8009f12:	e78c      	b.n	8009e2e <_dtoa_r+0x5de>
 8009f14:	461d      	mov	r5, r3
 8009f16:	e7ea      	b.n	8009eee <_dtoa_r+0x69e>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	4b9b      	ldr	r3, [pc, #620]	; (800a188 <_dtoa_r+0x938>)
 8009f1c:	f7f6 fb94 	bl	8000648 <__aeabi_dmul>
 8009f20:	2200      	movs	r2, #0
 8009f22:	2300      	movs	r3, #0
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	f7f6 fdf6 	bl	8000b18 <__aeabi_dcmpeq>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d09a      	beq.n	8009e66 <_dtoa_r+0x616>
 8009f30:	e7cb      	b.n	8009eca <_dtoa_r+0x67a>
 8009f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	f000 808b 	beq.w	800a050 <_dtoa_r+0x800>
 8009f3a:	9a06      	ldr	r2, [sp, #24]
 8009f3c:	2a01      	cmp	r2, #1
 8009f3e:	dc6e      	bgt.n	800a01e <_dtoa_r+0x7ce>
 8009f40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f42:	2a00      	cmp	r2, #0
 8009f44:	d067      	beq.n	800a016 <_dtoa_r+0x7c6>
 8009f46:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f4a:	9f07      	ldr	r7, [sp, #28]
 8009f4c:	9d05      	ldr	r5, [sp, #20]
 8009f4e:	9a05      	ldr	r2, [sp, #20]
 8009f50:	2101      	movs	r1, #1
 8009f52:	441a      	add	r2, r3
 8009f54:	4620      	mov	r0, r4
 8009f56:	9205      	str	r2, [sp, #20]
 8009f58:	4498      	add	r8, r3
 8009f5a:	f000 fcf9 	bl	800a950 <__i2b>
 8009f5e:	4606      	mov	r6, r0
 8009f60:	2d00      	cmp	r5, #0
 8009f62:	dd0c      	ble.n	8009f7e <_dtoa_r+0x72e>
 8009f64:	f1b8 0f00 	cmp.w	r8, #0
 8009f68:	dd09      	ble.n	8009f7e <_dtoa_r+0x72e>
 8009f6a:	4545      	cmp	r5, r8
 8009f6c:	9a05      	ldr	r2, [sp, #20]
 8009f6e:	462b      	mov	r3, r5
 8009f70:	bfa8      	it	ge
 8009f72:	4643      	movge	r3, r8
 8009f74:	1ad2      	subs	r2, r2, r3
 8009f76:	9205      	str	r2, [sp, #20]
 8009f78:	1aed      	subs	r5, r5, r3
 8009f7a:	eba8 0803 	sub.w	r8, r8, r3
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	b1eb      	cbz	r3, 8009fbe <_dtoa_r+0x76e>
 8009f82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d067      	beq.n	800a058 <_dtoa_r+0x808>
 8009f88:	b18f      	cbz	r7, 8009fae <_dtoa_r+0x75e>
 8009f8a:	4631      	mov	r1, r6
 8009f8c:	463a      	mov	r2, r7
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fd7e 	bl	800aa90 <__pow5mult>
 8009f94:	9a04      	ldr	r2, [sp, #16]
 8009f96:	4601      	mov	r1, r0
 8009f98:	4606      	mov	r6, r0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	f000 fce1 	bl	800a962 <__multiply>
 8009fa0:	9904      	ldr	r1, [sp, #16]
 8009fa2:	9008      	str	r0, [sp, #32]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	f000 fc33 	bl	800a810 <_Bfree>
 8009faa:	9b08      	ldr	r3, [sp, #32]
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	9b07      	ldr	r3, [sp, #28]
 8009fb0:	1bda      	subs	r2, r3, r7
 8009fb2:	d004      	beq.n	8009fbe <_dtoa_r+0x76e>
 8009fb4:	9904      	ldr	r1, [sp, #16]
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	f000 fd6a 	bl	800aa90 <__pow5mult>
 8009fbc:	9004      	str	r0, [sp, #16]
 8009fbe:	2101      	movs	r1, #1
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	f000 fcc5 	bl	800a950 <__i2b>
 8009fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc8:	4607      	mov	r7, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 81d0 	beq.w	800a370 <_dtoa_r+0xb20>
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4601      	mov	r1, r0
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fd5b 	bl	800aa90 <__pow5mult>
 8009fda:	9b06      	ldr	r3, [sp, #24]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	4607      	mov	r7, r0
 8009fe0:	dc40      	bgt.n	800a064 <_dtoa_r+0x814>
 8009fe2:	9b00      	ldr	r3, [sp, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d139      	bne.n	800a05c <_dtoa_r+0x80c>
 8009fe8:	9b01      	ldr	r3, [sp, #4]
 8009fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d136      	bne.n	800a060 <_dtoa_r+0x810>
 8009ff2:	9b01      	ldr	r3, [sp, #4]
 8009ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ff8:	0d1b      	lsrs	r3, r3, #20
 8009ffa:	051b      	lsls	r3, r3, #20
 8009ffc:	b12b      	cbz	r3, 800a00a <_dtoa_r+0x7ba>
 8009ffe:	9b05      	ldr	r3, [sp, #20]
 800a000:	3301      	adds	r3, #1
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	f108 0801 	add.w	r8, r8, #1
 800a008:	2301      	movs	r3, #1
 800a00a:	9307      	str	r3, [sp, #28]
 800a00c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d12a      	bne.n	800a068 <_dtoa_r+0x818>
 800a012:	2001      	movs	r0, #1
 800a014:	e030      	b.n	800a078 <_dtoa_r+0x828>
 800a016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a018:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a01c:	e795      	b.n	8009f4a <_dtoa_r+0x6fa>
 800a01e:	9b07      	ldr	r3, [sp, #28]
 800a020:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a024:	42bb      	cmp	r3, r7
 800a026:	bfbf      	itttt	lt
 800a028:	9b07      	ldrlt	r3, [sp, #28]
 800a02a:	9707      	strlt	r7, [sp, #28]
 800a02c:	1afa      	sublt	r2, r7, r3
 800a02e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a030:	bfbb      	ittet	lt
 800a032:	189b      	addlt	r3, r3, r2
 800a034:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a036:	1bdf      	subge	r7, r3, r7
 800a038:	2700      	movlt	r7, #0
 800a03a:	f1b9 0f00 	cmp.w	r9, #0
 800a03e:	bfb5      	itete	lt
 800a040:	9b05      	ldrlt	r3, [sp, #20]
 800a042:	9d05      	ldrge	r5, [sp, #20]
 800a044:	eba3 0509 	sublt.w	r5, r3, r9
 800a048:	464b      	movge	r3, r9
 800a04a:	bfb8      	it	lt
 800a04c:	2300      	movlt	r3, #0
 800a04e:	e77e      	b.n	8009f4e <_dtoa_r+0x6fe>
 800a050:	9f07      	ldr	r7, [sp, #28]
 800a052:	9d05      	ldr	r5, [sp, #20]
 800a054:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a056:	e783      	b.n	8009f60 <_dtoa_r+0x710>
 800a058:	9a07      	ldr	r2, [sp, #28]
 800a05a:	e7ab      	b.n	8009fb4 <_dtoa_r+0x764>
 800a05c:	2300      	movs	r3, #0
 800a05e:	e7d4      	b.n	800a00a <_dtoa_r+0x7ba>
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	e7d2      	b.n	800a00a <_dtoa_r+0x7ba>
 800a064:	2300      	movs	r3, #0
 800a066:	9307      	str	r3, [sp, #28]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a06e:	6918      	ldr	r0, [r3, #16]
 800a070:	f000 fc20 	bl	800a8b4 <__hi0bits>
 800a074:	f1c0 0020 	rsb	r0, r0, #32
 800a078:	4440      	add	r0, r8
 800a07a:	f010 001f 	ands.w	r0, r0, #31
 800a07e:	d047      	beq.n	800a110 <_dtoa_r+0x8c0>
 800a080:	f1c0 0320 	rsb	r3, r0, #32
 800a084:	2b04      	cmp	r3, #4
 800a086:	dd3b      	ble.n	800a100 <_dtoa_r+0x8b0>
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	f1c0 001c 	rsb	r0, r0, #28
 800a08e:	4403      	add	r3, r0
 800a090:	9305      	str	r3, [sp, #20]
 800a092:	4405      	add	r5, r0
 800a094:	4480      	add	r8, r0
 800a096:	9b05      	ldr	r3, [sp, #20]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	dd05      	ble.n	800a0a8 <_dtoa_r+0x858>
 800a09c:	461a      	mov	r2, r3
 800a09e:	9904      	ldr	r1, [sp, #16]
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f000 fd43 	bl	800ab2c <__lshift>
 800a0a6:	9004      	str	r0, [sp, #16]
 800a0a8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ac:	dd05      	ble.n	800a0ba <_dtoa_r+0x86a>
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fd3a 	bl	800ab2c <__lshift>
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a0bc:	b353      	cbz	r3, 800a114 <_dtoa_r+0x8c4>
 800a0be:	4639      	mov	r1, r7
 800a0c0:	9804      	ldr	r0, [sp, #16]
 800a0c2:	f000 fd87 	bl	800abd4 <__mcmp>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	da24      	bge.n	800a114 <_dtoa_r+0x8c4>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	220a      	movs	r2, #10
 800a0ce:	9904      	ldr	r1, [sp, #16]
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f000 fbb4 	bl	800a83e <__multadd>
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d8:	9004      	str	r0, [sp, #16]
 800a0da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 814d 	beq.w	800a37e <_dtoa_r+0xb2e>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	220a      	movs	r2, #10
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f000 fba7 	bl	800a83e <__multadd>
 800a0f0:	9b02      	ldr	r3, [sp, #8]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	4606      	mov	r6, r0
 800a0f6:	dc4f      	bgt.n	800a198 <_dtoa_r+0x948>
 800a0f8:	9b06      	ldr	r3, [sp, #24]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	dd4c      	ble.n	800a198 <_dtoa_r+0x948>
 800a0fe:	e011      	b.n	800a124 <_dtoa_r+0x8d4>
 800a100:	d0c9      	beq.n	800a096 <_dtoa_r+0x846>
 800a102:	9a05      	ldr	r2, [sp, #20]
 800a104:	331c      	adds	r3, #28
 800a106:	441a      	add	r2, r3
 800a108:	9205      	str	r2, [sp, #20]
 800a10a:	441d      	add	r5, r3
 800a10c:	4498      	add	r8, r3
 800a10e:	e7c2      	b.n	800a096 <_dtoa_r+0x846>
 800a110:	4603      	mov	r3, r0
 800a112:	e7f6      	b.n	800a102 <_dtoa_r+0x8b2>
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	dc38      	bgt.n	800a18c <_dtoa_r+0x93c>
 800a11a:	9b06      	ldr	r3, [sp, #24]
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	dd35      	ble.n	800a18c <_dtoa_r+0x93c>
 800a120:	f8cd 9008 	str.w	r9, [sp, #8]
 800a124:	9b02      	ldr	r3, [sp, #8]
 800a126:	b963      	cbnz	r3, 800a142 <_dtoa_r+0x8f2>
 800a128:	4639      	mov	r1, r7
 800a12a:	2205      	movs	r2, #5
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fb86 	bl	800a83e <__multadd>
 800a132:	4601      	mov	r1, r0
 800a134:	4607      	mov	r7, r0
 800a136:	9804      	ldr	r0, [sp, #16]
 800a138:	f000 fd4c 	bl	800abd4 <__mcmp>
 800a13c:	2800      	cmp	r0, #0
 800a13e:	f73f adcc 	bgt.w	8009cda <_dtoa_r+0x48a>
 800a142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a144:	465d      	mov	r5, fp
 800a146:	ea6f 0a03 	mvn.w	sl, r3
 800a14a:	f04f 0900 	mov.w	r9, #0
 800a14e:	4639      	mov	r1, r7
 800a150:	4620      	mov	r0, r4
 800a152:	f000 fb5d 	bl	800a810 <_Bfree>
 800a156:	2e00      	cmp	r6, #0
 800a158:	f43f aeb7 	beq.w	8009eca <_dtoa_r+0x67a>
 800a15c:	f1b9 0f00 	cmp.w	r9, #0
 800a160:	d005      	beq.n	800a16e <_dtoa_r+0x91e>
 800a162:	45b1      	cmp	r9, r6
 800a164:	d003      	beq.n	800a16e <_dtoa_r+0x91e>
 800a166:	4649      	mov	r1, r9
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fb51 	bl	800a810 <_Bfree>
 800a16e:	4631      	mov	r1, r6
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fb4d 	bl	800a810 <_Bfree>
 800a176:	e6a8      	b.n	8009eca <_dtoa_r+0x67a>
 800a178:	2700      	movs	r7, #0
 800a17a:	463e      	mov	r6, r7
 800a17c:	e7e1      	b.n	800a142 <_dtoa_r+0x8f2>
 800a17e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a182:	463e      	mov	r6, r7
 800a184:	e5a9      	b.n	8009cda <_dtoa_r+0x48a>
 800a186:	bf00      	nop
 800a188:	40240000 	.word	0x40240000
 800a18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a18e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	f000 80fa 	beq.w	800a38c <_dtoa_r+0xb3c>
 800a198:	2d00      	cmp	r5, #0
 800a19a:	dd05      	ble.n	800a1a8 <_dtoa_r+0x958>
 800a19c:	4631      	mov	r1, r6
 800a19e:	462a      	mov	r2, r5
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fcc3 	bl	800ab2c <__lshift>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d04c      	beq.n	800a248 <_dtoa_r+0x9f8>
 800a1ae:	6871      	ldr	r1, [r6, #4]
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 faf9 	bl	800a7a8 <_Balloc>
 800a1b6:	6932      	ldr	r2, [r6, #16]
 800a1b8:	3202      	adds	r2, #2
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	0092      	lsls	r2, r2, #2
 800a1be:	f106 010c 	add.w	r1, r6, #12
 800a1c2:	300c      	adds	r0, #12
 800a1c4:	f7fe fcc6 	bl	8008b54 <memcpy>
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f000 fcad 	bl	800ab2c <__lshift>
 800a1d2:	9b00      	ldr	r3, [sp, #0]
 800a1d4:	f8cd b014 	str.w	fp, [sp, #20]
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	46b1      	mov	r9, r6
 800a1de:	9307      	str	r3, [sp, #28]
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	9804      	ldr	r0, [sp, #16]
 800a1e6:	f7ff faa5 	bl	8009734 <quorem>
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a1f2:	9804      	ldr	r0, [sp, #16]
 800a1f4:	f000 fcee 	bl	800abd4 <__mcmp>
 800a1f8:	4632      	mov	r2, r6
 800a1fa:	9000      	str	r0, [sp, #0]
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 fd02 	bl	800ac08 <__mdiff>
 800a204:	68c3      	ldr	r3, [r0, #12]
 800a206:	4602      	mov	r2, r0
 800a208:	bb03      	cbnz	r3, 800a24c <_dtoa_r+0x9fc>
 800a20a:	4601      	mov	r1, r0
 800a20c:	9008      	str	r0, [sp, #32]
 800a20e:	9804      	ldr	r0, [sp, #16]
 800a210:	f000 fce0 	bl	800abd4 <__mcmp>
 800a214:	9a08      	ldr	r2, [sp, #32]
 800a216:	4603      	mov	r3, r0
 800a218:	4611      	mov	r1, r2
 800a21a:	4620      	mov	r0, r4
 800a21c:	9308      	str	r3, [sp, #32]
 800a21e:	f000 faf7 	bl	800a810 <_Bfree>
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	b9a3      	cbnz	r3, 800a250 <_dtoa_r+0xa00>
 800a226:	9a06      	ldr	r2, [sp, #24]
 800a228:	b992      	cbnz	r2, 800a250 <_dtoa_r+0xa00>
 800a22a:	9a07      	ldr	r2, [sp, #28]
 800a22c:	b982      	cbnz	r2, 800a250 <_dtoa_r+0xa00>
 800a22e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a232:	d029      	beq.n	800a288 <_dtoa_r+0xa38>
 800a234:	9b00      	ldr	r3, [sp, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	dd01      	ble.n	800a23e <_dtoa_r+0x9ee>
 800a23a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a23e:	9b05      	ldr	r3, [sp, #20]
 800a240:	1c5d      	adds	r5, r3, #1
 800a242:	f883 8000 	strb.w	r8, [r3]
 800a246:	e782      	b.n	800a14e <_dtoa_r+0x8fe>
 800a248:	4630      	mov	r0, r6
 800a24a:	e7c2      	b.n	800a1d2 <_dtoa_r+0x982>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e7e3      	b.n	800a218 <_dtoa_r+0x9c8>
 800a250:	9a00      	ldr	r2, [sp, #0]
 800a252:	2a00      	cmp	r2, #0
 800a254:	db04      	blt.n	800a260 <_dtoa_r+0xa10>
 800a256:	d125      	bne.n	800a2a4 <_dtoa_r+0xa54>
 800a258:	9a06      	ldr	r2, [sp, #24]
 800a25a:	bb1a      	cbnz	r2, 800a2a4 <_dtoa_r+0xa54>
 800a25c:	9a07      	ldr	r2, [sp, #28]
 800a25e:	bb0a      	cbnz	r2, 800a2a4 <_dtoa_r+0xa54>
 800a260:	2b00      	cmp	r3, #0
 800a262:	ddec      	ble.n	800a23e <_dtoa_r+0x9ee>
 800a264:	2201      	movs	r2, #1
 800a266:	9904      	ldr	r1, [sp, #16]
 800a268:	4620      	mov	r0, r4
 800a26a:	f000 fc5f 	bl	800ab2c <__lshift>
 800a26e:	4639      	mov	r1, r7
 800a270:	9004      	str	r0, [sp, #16]
 800a272:	f000 fcaf 	bl	800abd4 <__mcmp>
 800a276:	2800      	cmp	r0, #0
 800a278:	dc03      	bgt.n	800a282 <_dtoa_r+0xa32>
 800a27a:	d1e0      	bne.n	800a23e <_dtoa_r+0x9ee>
 800a27c:	f018 0f01 	tst.w	r8, #1
 800a280:	d0dd      	beq.n	800a23e <_dtoa_r+0x9ee>
 800a282:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a286:	d1d8      	bne.n	800a23a <_dtoa_r+0x9ea>
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	9a05      	ldr	r2, [sp, #20]
 800a28c:	1c5d      	adds	r5, r3, #1
 800a28e:	2339      	movs	r3, #57	; 0x39
 800a290:	7013      	strb	r3, [r2, #0]
 800a292:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a296:	2b39      	cmp	r3, #57	; 0x39
 800a298:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a29c:	d04f      	beq.n	800a33e <_dtoa_r+0xaee>
 800a29e:	3301      	adds	r3, #1
 800a2a0:	7013      	strb	r3, [r2, #0]
 800a2a2:	e754      	b.n	800a14e <_dtoa_r+0x8fe>
 800a2a4:	9a05      	ldr	r2, [sp, #20]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f102 0501 	add.w	r5, r2, #1
 800a2ac:	dd06      	ble.n	800a2bc <_dtoa_r+0xa6c>
 800a2ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a2b2:	d0e9      	beq.n	800a288 <_dtoa_r+0xa38>
 800a2b4:	f108 0801 	add.w	r8, r8, #1
 800a2b8:	9b05      	ldr	r3, [sp, #20]
 800a2ba:	e7c2      	b.n	800a242 <_dtoa_r+0x9f2>
 800a2bc:	9a02      	ldr	r2, [sp, #8]
 800a2be:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a2c2:	eba5 030b 	sub.w	r3, r5, fp
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d021      	beq.n	800a30e <_dtoa_r+0xabe>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	220a      	movs	r2, #10
 800a2ce:	9904      	ldr	r1, [sp, #16]
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 fab4 	bl	800a83e <__multadd>
 800a2d6:	45b1      	cmp	r9, r6
 800a2d8:	9004      	str	r0, [sp, #16]
 800a2da:	f04f 0300 	mov.w	r3, #0
 800a2de:	f04f 020a 	mov.w	r2, #10
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	d105      	bne.n	800a2f4 <_dtoa_r+0xaa4>
 800a2e8:	f000 faa9 	bl	800a83e <__multadd>
 800a2ec:	4681      	mov	r9, r0
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	9505      	str	r5, [sp, #20]
 800a2f2:	e776      	b.n	800a1e2 <_dtoa_r+0x992>
 800a2f4:	f000 faa3 	bl	800a83e <__multadd>
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	4681      	mov	r9, r0
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	220a      	movs	r2, #10
 800a300:	4620      	mov	r0, r4
 800a302:	f000 fa9c 	bl	800a83e <__multadd>
 800a306:	4606      	mov	r6, r0
 800a308:	e7f2      	b.n	800a2f0 <_dtoa_r+0xaa0>
 800a30a:	f04f 0900 	mov.w	r9, #0
 800a30e:	2201      	movs	r2, #1
 800a310:	9904      	ldr	r1, [sp, #16]
 800a312:	4620      	mov	r0, r4
 800a314:	f000 fc0a 	bl	800ab2c <__lshift>
 800a318:	4639      	mov	r1, r7
 800a31a:	9004      	str	r0, [sp, #16]
 800a31c:	f000 fc5a 	bl	800abd4 <__mcmp>
 800a320:	2800      	cmp	r0, #0
 800a322:	dcb6      	bgt.n	800a292 <_dtoa_r+0xa42>
 800a324:	d102      	bne.n	800a32c <_dtoa_r+0xadc>
 800a326:	f018 0f01 	tst.w	r8, #1
 800a32a:	d1b2      	bne.n	800a292 <_dtoa_r+0xa42>
 800a32c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a330:	2b30      	cmp	r3, #48	; 0x30
 800a332:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a336:	f47f af0a 	bne.w	800a14e <_dtoa_r+0x8fe>
 800a33a:	4615      	mov	r5, r2
 800a33c:	e7f6      	b.n	800a32c <_dtoa_r+0xadc>
 800a33e:	4593      	cmp	fp, r2
 800a340:	d105      	bne.n	800a34e <_dtoa_r+0xafe>
 800a342:	2331      	movs	r3, #49	; 0x31
 800a344:	f10a 0a01 	add.w	sl, sl, #1
 800a348:	f88b 3000 	strb.w	r3, [fp]
 800a34c:	e6ff      	b.n	800a14e <_dtoa_r+0x8fe>
 800a34e:	4615      	mov	r5, r2
 800a350:	e79f      	b.n	800a292 <_dtoa_r+0xa42>
 800a352:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a3b8 <_dtoa_r+0xb68>
 800a356:	e007      	b.n	800a368 <_dtoa_r+0xb18>
 800a358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a35a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a3bc <_dtoa_r+0xb6c>
 800a35e:	b11b      	cbz	r3, 800a368 <_dtoa_r+0xb18>
 800a360:	f10b 0308 	add.w	r3, fp, #8
 800a364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a366:	6013      	str	r3, [r2, #0]
 800a368:	4658      	mov	r0, fp
 800a36a:	b017      	add	sp, #92	; 0x5c
 800a36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a370:	9b06      	ldr	r3, [sp, #24]
 800a372:	2b01      	cmp	r3, #1
 800a374:	f77f ae35 	ble.w	8009fe2 <_dtoa_r+0x792>
 800a378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37a:	9307      	str	r3, [sp, #28]
 800a37c:	e649      	b.n	800a012 <_dtoa_r+0x7c2>
 800a37e:	9b02      	ldr	r3, [sp, #8]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dc03      	bgt.n	800a38c <_dtoa_r+0xb3c>
 800a384:	9b06      	ldr	r3, [sp, #24]
 800a386:	2b02      	cmp	r3, #2
 800a388:	f73f aecc 	bgt.w	800a124 <_dtoa_r+0x8d4>
 800a38c:	465d      	mov	r5, fp
 800a38e:	4639      	mov	r1, r7
 800a390:	9804      	ldr	r0, [sp, #16]
 800a392:	f7ff f9cf 	bl	8009734 <quorem>
 800a396:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a39a:	f805 8b01 	strb.w	r8, [r5], #1
 800a39e:	9a02      	ldr	r2, [sp, #8]
 800a3a0:	eba5 030b 	sub.w	r3, r5, fp
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	ddb0      	ble.n	800a30a <_dtoa_r+0xaba>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	9904      	ldr	r1, [sp, #16]
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fa45 	bl	800a83e <__multadd>
 800a3b4:	9004      	str	r0, [sp, #16]
 800a3b6:	e7ea      	b.n	800a38e <_dtoa_r+0xb3e>
 800a3b8:	0800bb50 	.word	0x0800bb50
 800a3bc:	0800bb74 	.word	0x0800bb74

0800a3c0 <__sflush_r>:
 800a3c0:	898a      	ldrh	r2, [r1, #12]
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	0710      	lsls	r0, r2, #28
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	d458      	bmi.n	800a480 <__sflush_r+0xc0>
 800a3ce:	684b      	ldr	r3, [r1, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dc05      	bgt.n	800a3e0 <__sflush_r+0x20>
 800a3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dc02      	bgt.n	800a3e0 <__sflush_r+0x20>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3e2:	2e00      	cmp	r6, #0
 800a3e4:	d0f9      	beq.n	800a3da <__sflush_r+0x1a>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3ec:	682f      	ldr	r7, [r5, #0]
 800a3ee:	6a21      	ldr	r1, [r4, #32]
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	d032      	beq.n	800a45a <__sflush_r+0x9a>
 800a3f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	075a      	lsls	r2, r3, #29
 800a3fa:	d505      	bpl.n	800a408 <__sflush_r+0x48>
 800a3fc:	6863      	ldr	r3, [r4, #4]
 800a3fe:	1ac0      	subs	r0, r0, r3
 800a400:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a402:	b10b      	cbz	r3, 800a408 <__sflush_r+0x48>
 800a404:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a406:	1ac0      	subs	r0, r0, r3
 800a408:	2300      	movs	r3, #0
 800a40a:	4602      	mov	r2, r0
 800a40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a40e:	6a21      	ldr	r1, [r4, #32]
 800a410:	4628      	mov	r0, r5
 800a412:	47b0      	blx	r6
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	d106      	bne.n	800a428 <__sflush_r+0x68>
 800a41a:	6829      	ldr	r1, [r5, #0]
 800a41c:	291d      	cmp	r1, #29
 800a41e:	d848      	bhi.n	800a4b2 <__sflush_r+0xf2>
 800a420:	4a29      	ldr	r2, [pc, #164]	; (800a4c8 <__sflush_r+0x108>)
 800a422:	40ca      	lsrs	r2, r1
 800a424:	07d6      	lsls	r6, r2, #31
 800a426:	d544      	bpl.n	800a4b2 <__sflush_r+0xf2>
 800a428:	2200      	movs	r2, #0
 800a42a:	6062      	str	r2, [r4, #4]
 800a42c:	04d9      	lsls	r1, r3, #19
 800a42e:	6922      	ldr	r2, [r4, #16]
 800a430:	6022      	str	r2, [r4, #0]
 800a432:	d504      	bpl.n	800a43e <__sflush_r+0x7e>
 800a434:	1c42      	adds	r2, r0, #1
 800a436:	d101      	bne.n	800a43c <__sflush_r+0x7c>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b903      	cbnz	r3, 800a43e <__sflush_r+0x7e>
 800a43c:	6560      	str	r0, [r4, #84]	; 0x54
 800a43e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a440:	602f      	str	r7, [r5, #0]
 800a442:	2900      	cmp	r1, #0
 800a444:	d0c9      	beq.n	800a3da <__sflush_r+0x1a>
 800a446:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a44a:	4299      	cmp	r1, r3
 800a44c:	d002      	beq.n	800a454 <__sflush_r+0x94>
 800a44e:	4628      	mov	r0, r5
 800a450:	f000 fc94 	bl	800ad7c <_free_r>
 800a454:	2000      	movs	r0, #0
 800a456:	6360      	str	r0, [r4, #52]	; 0x34
 800a458:	e7c0      	b.n	800a3dc <__sflush_r+0x1c>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4628      	mov	r0, r5
 800a45e:	47b0      	blx	r6
 800a460:	1c41      	adds	r1, r0, #1
 800a462:	d1c8      	bne.n	800a3f6 <__sflush_r+0x36>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0c5      	beq.n	800a3f6 <__sflush_r+0x36>
 800a46a:	2b1d      	cmp	r3, #29
 800a46c:	d001      	beq.n	800a472 <__sflush_r+0xb2>
 800a46e:	2b16      	cmp	r3, #22
 800a470:	d101      	bne.n	800a476 <__sflush_r+0xb6>
 800a472:	602f      	str	r7, [r5, #0]
 800a474:	e7b1      	b.n	800a3da <__sflush_r+0x1a>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	e7ad      	b.n	800a3dc <__sflush_r+0x1c>
 800a480:	690f      	ldr	r7, [r1, #16]
 800a482:	2f00      	cmp	r7, #0
 800a484:	d0a9      	beq.n	800a3da <__sflush_r+0x1a>
 800a486:	0793      	lsls	r3, r2, #30
 800a488:	680e      	ldr	r6, [r1, #0]
 800a48a:	bf08      	it	eq
 800a48c:	694b      	ldreq	r3, [r1, #20]
 800a48e:	600f      	str	r7, [r1, #0]
 800a490:	bf18      	it	ne
 800a492:	2300      	movne	r3, #0
 800a494:	eba6 0807 	sub.w	r8, r6, r7
 800a498:	608b      	str	r3, [r1, #8]
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	dd9c      	ble.n	800a3da <__sflush_r+0x1a>
 800a4a0:	4643      	mov	r3, r8
 800a4a2:	463a      	mov	r2, r7
 800a4a4:	6a21      	ldr	r1, [r4, #32]
 800a4a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b0      	blx	r6
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	dc06      	bgt.n	800a4be <__sflush_r+0xfe>
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4bc:	e78e      	b.n	800a3dc <__sflush_r+0x1c>
 800a4be:	4407      	add	r7, r0
 800a4c0:	eba8 0800 	sub.w	r8, r8, r0
 800a4c4:	e7e9      	b.n	800a49a <__sflush_r+0xda>
 800a4c6:	bf00      	nop
 800a4c8:	20400001 	.word	0x20400001

0800a4cc <_fflush_r>:
 800a4cc:	b538      	push	{r3, r4, r5, lr}
 800a4ce:	690b      	ldr	r3, [r1, #16]
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	b1db      	cbz	r3, 800a50e <_fflush_r+0x42>
 800a4d6:	b118      	cbz	r0, 800a4e0 <_fflush_r+0x14>
 800a4d8:	6983      	ldr	r3, [r0, #24]
 800a4da:	b90b      	cbnz	r3, 800a4e0 <_fflush_r+0x14>
 800a4dc:	f000 f860 	bl	800a5a0 <__sinit>
 800a4e0:	4b0c      	ldr	r3, [pc, #48]	; (800a514 <_fflush_r+0x48>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d109      	bne.n	800a4fa <_fflush_r+0x2e>
 800a4e6:	686c      	ldr	r4, [r5, #4]
 800a4e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ec:	b17b      	cbz	r3, 800a50e <_fflush_r+0x42>
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4f6:	f7ff bf63 	b.w	800a3c0 <__sflush_r>
 800a4fa:	4b07      	ldr	r3, [pc, #28]	; (800a518 <_fflush_r+0x4c>)
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	d101      	bne.n	800a504 <_fflush_r+0x38>
 800a500:	68ac      	ldr	r4, [r5, #8]
 800a502:	e7f1      	b.n	800a4e8 <_fflush_r+0x1c>
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <_fflush_r+0x50>)
 800a506:	429c      	cmp	r4, r3
 800a508:	bf08      	it	eq
 800a50a:	68ec      	ldreq	r4, [r5, #12]
 800a50c:	e7ec      	b.n	800a4e8 <_fflush_r+0x1c>
 800a50e:	2000      	movs	r0, #0
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	bf00      	nop
 800a514:	0800bba4 	.word	0x0800bba4
 800a518:	0800bbc4 	.word	0x0800bbc4
 800a51c:	0800bb84 	.word	0x0800bb84

0800a520 <std>:
 800a520:	2300      	movs	r3, #0
 800a522:	b510      	push	{r4, lr}
 800a524:	4604      	mov	r4, r0
 800a526:	e9c0 3300 	strd	r3, r3, [r0]
 800a52a:	6083      	str	r3, [r0, #8]
 800a52c:	8181      	strh	r1, [r0, #12]
 800a52e:	6643      	str	r3, [r0, #100]	; 0x64
 800a530:	81c2      	strh	r2, [r0, #14]
 800a532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a536:	6183      	str	r3, [r0, #24]
 800a538:	4619      	mov	r1, r3
 800a53a:	2208      	movs	r2, #8
 800a53c:	305c      	adds	r0, #92	; 0x5c
 800a53e:	f7fe fb14 	bl	8008b6a <memset>
 800a542:	4b05      	ldr	r3, [pc, #20]	; (800a558 <std+0x38>)
 800a544:	6263      	str	r3, [r4, #36]	; 0x24
 800a546:	4b05      	ldr	r3, [pc, #20]	; (800a55c <std+0x3c>)
 800a548:	62a3      	str	r3, [r4, #40]	; 0x28
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <std+0x40>)
 800a54c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <std+0x44>)
 800a550:	6224      	str	r4, [r4, #32]
 800a552:	6323      	str	r3, [r4, #48]	; 0x30
 800a554:	bd10      	pop	{r4, pc}
 800a556:	bf00      	nop
 800a558:	0800b16d 	.word	0x0800b16d
 800a55c:	0800b18f 	.word	0x0800b18f
 800a560:	0800b1c7 	.word	0x0800b1c7
 800a564:	0800b1eb 	.word	0x0800b1eb

0800a568 <_cleanup_r>:
 800a568:	4901      	ldr	r1, [pc, #4]	; (800a570 <_cleanup_r+0x8>)
 800a56a:	f000 b885 	b.w	800a678 <_fwalk_reent>
 800a56e:	bf00      	nop
 800a570:	0800a4cd 	.word	0x0800a4cd

0800a574 <__sfmoreglue>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	1e4a      	subs	r2, r1, #1
 800a578:	2568      	movs	r5, #104	; 0x68
 800a57a:	4355      	muls	r5, r2
 800a57c:	460e      	mov	r6, r1
 800a57e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a582:	f000 fc49 	bl	800ae18 <_malloc_r>
 800a586:	4604      	mov	r4, r0
 800a588:	b140      	cbz	r0, 800a59c <__sfmoreglue+0x28>
 800a58a:	2100      	movs	r1, #0
 800a58c:	e9c0 1600 	strd	r1, r6, [r0]
 800a590:	300c      	adds	r0, #12
 800a592:	60a0      	str	r0, [r4, #8]
 800a594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a598:	f7fe fae7 	bl	8008b6a <memset>
 800a59c:	4620      	mov	r0, r4
 800a59e:	bd70      	pop	{r4, r5, r6, pc}

0800a5a0 <__sinit>:
 800a5a0:	6983      	ldr	r3, [r0, #24]
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	bb33      	cbnz	r3, 800a5f6 <__sinit+0x56>
 800a5a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800a5ac:	6503      	str	r3, [r0, #80]	; 0x50
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <__sinit+0x58>)
 800a5b0:	4a12      	ldr	r2, [pc, #72]	; (800a5fc <__sinit+0x5c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	6282      	str	r2, [r0, #40]	; 0x28
 800a5b6:	4298      	cmp	r0, r3
 800a5b8:	bf04      	itt	eq
 800a5ba:	2301      	moveq	r3, #1
 800a5bc:	6183      	streq	r3, [r0, #24]
 800a5be:	f000 f81f 	bl	800a600 <__sfp>
 800a5c2:	6060      	str	r0, [r4, #4]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	f000 f81b 	bl	800a600 <__sfp>
 800a5ca:	60a0      	str	r0, [r4, #8]
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f000 f817 	bl	800a600 <__sfp>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	60e0      	str	r0, [r4, #12]
 800a5d6:	2104      	movs	r1, #4
 800a5d8:	6860      	ldr	r0, [r4, #4]
 800a5da:	f7ff ffa1 	bl	800a520 <std>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	2109      	movs	r1, #9
 800a5e2:	68a0      	ldr	r0, [r4, #8]
 800a5e4:	f7ff ff9c 	bl	800a520 <std>
 800a5e8:	2202      	movs	r2, #2
 800a5ea:	2112      	movs	r1, #18
 800a5ec:	68e0      	ldr	r0, [r4, #12]
 800a5ee:	f7ff ff97 	bl	800a520 <std>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	61a3      	str	r3, [r4, #24]
 800a5f6:	bd10      	pop	{r4, pc}
 800a5f8:	0800bb3c 	.word	0x0800bb3c
 800a5fc:	0800a569 	.word	0x0800a569

0800a600 <__sfp>:
 800a600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a602:	4b1b      	ldr	r3, [pc, #108]	; (800a670 <__sfp+0x70>)
 800a604:	681e      	ldr	r6, [r3, #0]
 800a606:	69b3      	ldr	r3, [r6, #24]
 800a608:	4607      	mov	r7, r0
 800a60a:	b913      	cbnz	r3, 800a612 <__sfp+0x12>
 800a60c:	4630      	mov	r0, r6
 800a60e:	f7ff ffc7 	bl	800a5a0 <__sinit>
 800a612:	3648      	adds	r6, #72	; 0x48
 800a614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a618:	3b01      	subs	r3, #1
 800a61a:	d503      	bpl.n	800a624 <__sfp+0x24>
 800a61c:	6833      	ldr	r3, [r6, #0]
 800a61e:	b133      	cbz	r3, 800a62e <__sfp+0x2e>
 800a620:	6836      	ldr	r6, [r6, #0]
 800a622:	e7f7      	b.n	800a614 <__sfp+0x14>
 800a624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a628:	b16d      	cbz	r5, 800a646 <__sfp+0x46>
 800a62a:	3468      	adds	r4, #104	; 0x68
 800a62c:	e7f4      	b.n	800a618 <__sfp+0x18>
 800a62e:	2104      	movs	r1, #4
 800a630:	4638      	mov	r0, r7
 800a632:	f7ff ff9f 	bl	800a574 <__sfmoreglue>
 800a636:	6030      	str	r0, [r6, #0]
 800a638:	2800      	cmp	r0, #0
 800a63a:	d1f1      	bne.n	800a620 <__sfp+0x20>
 800a63c:	230c      	movs	r3, #12
 800a63e:	603b      	str	r3, [r7, #0]
 800a640:	4604      	mov	r4, r0
 800a642:	4620      	mov	r0, r4
 800a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a646:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <__sfp+0x74>)
 800a648:	6665      	str	r5, [r4, #100]	; 0x64
 800a64a:	e9c4 5500 	strd	r5, r5, [r4]
 800a64e:	60a5      	str	r5, [r4, #8]
 800a650:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a654:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a658:	2208      	movs	r2, #8
 800a65a:	4629      	mov	r1, r5
 800a65c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a660:	f7fe fa83 	bl	8008b6a <memset>
 800a664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a66c:	e7e9      	b.n	800a642 <__sfp+0x42>
 800a66e:	bf00      	nop
 800a670:	0800bb3c 	.word	0x0800bb3c
 800a674:	ffff0001 	.word	0xffff0001

0800a678 <_fwalk_reent>:
 800a678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a67c:	4680      	mov	r8, r0
 800a67e:	4689      	mov	r9, r1
 800a680:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a684:	2600      	movs	r6, #0
 800a686:	b914      	cbnz	r4, 800a68e <_fwalk_reent+0x16>
 800a688:	4630      	mov	r0, r6
 800a68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a68e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800a692:	3f01      	subs	r7, #1
 800a694:	d501      	bpl.n	800a69a <_fwalk_reent+0x22>
 800a696:	6824      	ldr	r4, [r4, #0]
 800a698:	e7f5      	b.n	800a686 <_fwalk_reent+0xe>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d907      	bls.n	800a6b0 <_fwalk_reent+0x38>
 800a6a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	d003      	beq.n	800a6b0 <_fwalk_reent+0x38>
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	47c8      	blx	r9
 800a6ae:	4306      	orrs	r6, r0
 800a6b0:	3568      	adds	r5, #104	; 0x68
 800a6b2:	e7ee      	b.n	800a692 <_fwalk_reent+0x1a>

0800a6b4 <_localeconv_r>:
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <_localeconv_r+0x14>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6a18      	ldr	r0, [r3, #32]
 800a6ba:	4b04      	ldr	r3, [pc, #16]	; (800a6cc <_localeconv_r+0x18>)
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	bf08      	it	eq
 800a6c0:	4618      	moveq	r0, r3
 800a6c2:	30f0      	adds	r0, #240	; 0xf0
 800a6c4:	4770      	bx	lr
 800a6c6:	bf00      	nop
 800a6c8:	20000014 	.word	0x20000014
 800a6cc:	20000078 	.word	0x20000078

0800a6d0 <__swhatbuf_r>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	460e      	mov	r6, r1
 800a6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	b096      	sub	sp, #88	; 0x58
 800a6dc:	4614      	mov	r4, r2
 800a6de:	461d      	mov	r5, r3
 800a6e0:	da07      	bge.n	800a6f2 <__swhatbuf_r+0x22>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	602b      	str	r3, [r5, #0]
 800a6e6:	89b3      	ldrh	r3, [r6, #12]
 800a6e8:	061a      	lsls	r2, r3, #24
 800a6ea:	d410      	bmi.n	800a70e <__swhatbuf_r+0x3e>
 800a6ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6f0:	e00e      	b.n	800a710 <__swhatbuf_r+0x40>
 800a6f2:	466a      	mov	r2, sp
 800a6f4:	f000 fda0 	bl	800b238 <_fstat_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	dbf2      	blt.n	800a6e2 <__swhatbuf_r+0x12>
 800a6fc:	9a01      	ldr	r2, [sp, #4]
 800a6fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a706:	425a      	negs	r2, r3
 800a708:	415a      	adcs	r2, r3
 800a70a:	602a      	str	r2, [r5, #0]
 800a70c:	e7ee      	b.n	800a6ec <__swhatbuf_r+0x1c>
 800a70e:	2340      	movs	r3, #64	; 0x40
 800a710:	2000      	movs	r0, #0
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	b016      	add	sp, #88	; 0x58
 800a716:	bd70      	pop	{r4, r5, r6, pc}

0800a718 <__smakebuf_r>:
 800a718:	898b      	ldrh	r3, [r1, #12]
 800a71a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a71c:	079d      	lsls	r5, r3, #30
 800a71e:	4606      	mov	r6, r0
 800a720:	460c      	mov	r4, r1
 800a722:	d507      	bpl.n	800a734 <__smakebuf_r+0x1c>
 800a724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	6123      	str	r3, [r4, #16]
 800a72c:	2301      	movs	r3, #1
 800a72e:	6163      	str	r3, [r4, #20]
 800a730:	b002      	add	sp, #8
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	ab01      	add	r3, sp, #4
 800a736:	466a      	mov	r2, sp
 800a738:	f7ff ffca 	bl	800a6d0 <__swhatbuf_r>
 800a73c:	9900      	ldr	r1, [sp, #0]
 800a73e:	4605      	mov	r5, r0
 800a740:	4630      	mov	r0, r6
 800a742:	f000 fb69 	bl	800ae18 <_malloc_r>
 800a746:	b948      	cbnz	r0, 800a75c <__smakebuf_r+0x44>
 800a748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a74c:	059a      	lsls	r2, r3, #22
 800a74e:	d4ef      	bmi.n	800a730 <__smakebuf_r+0x18>
 800a750:	f023 0303 	bic.w	r3, r3, #3
 800a754:	f043 0302 	orr.w	r3, r3, #2
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	e7e3      	b.n	800a724 <__smakebuf_r+0xc>
 800a75c:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <__smakebuf_r+0x7c>)
 800a75e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	6020      	str	r0, [r4, #0]
 800a764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a768:	81a3      	strh	r3, [r4, #12]
 800a76a:	9b00      	ldr	r3, [sp, #0]
 800a76c:	6163      	str	r3, [r4, #20]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	6120      	str	r0, [r4, #16]
 800a772:	b15b      	cbz	r3, 800a78c <__smakebuf_r+0x74>
 800a774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a778:	4630      	mov	r0, r6
 800a77a:	f000 fd6f 	bl	800b25c <_isatty_r>
 800a77e:	b128      	cbz	r0, 800a78c <__smakebuf_r+0x74>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	f023 0303 	bic.w	r3, r3, #3
 800a786:	f043 0301 	orr.w	r3, r3, #1
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	431d      	orrs	r5, r3
 800a790:	81a5      	strh	r5, [r4, #12]
 800a792:	e7cd      	b.n	800a730 <__smakebuf_r+0x18>
 800a794:	0800a569 	.word	0x0800a569

0800a798 <malloc>:
 800a798:	4b02      	ldr	r3, [pc, #8]	; (800a7a4 <malloc+0xc>)
 800a79a:	4601      	mov	r1, r0
 800a79c:	6818      	ldr	r0, [r3, #0]
 800a79e:	f000 bb3b 	b.w	800ae18 <_malloc_r>
 800a7a2:	bf00      	nop
 800a7a4:	20000014 	.word	0x20000014

0800a7a8 <_Balloc>:
 800a7a8:	b570      	push	{r4, r5, r6, lr}
 800a7aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	460e      	mov	r6, r1
 800a7b0:	b93d      	cbnz	r5, 800a7c2 <_Balloc+0x1a>
 800a7b2:	2010      	movs	r0, #16
 800a7b4:	f7ff fff0 	bl	800a798 <malloc>
 800a7b8:	6260      	str	r0, [r4, #36]	; 0x24
 800a7ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7be:	6005      	str	r5, [r0, #0]
 800a7c0:	60c5      	str	r5, [r0, #12]
 800a7c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a7c4:	68eb      	ldr	r3, [r5, #12]
 800a7c6:	b183      	cbz	r3, 800a7ea <_Balloc+0x42>
 800a7c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7d0:	b9b8      	cbnz	r0, 800a802 <_Balloc+0x5a>
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	fa01 f506 	lsl.w	r5, r1, r6
 800a7d8:	1d6a      	adds	r2, r5, #5
 800a7da:	0092      	lsls	r2, r2, #2
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fabf 	bl	800ad60 <_calloc_r>
 800a7e2:	b160      	cbz	r0, 800a7fe <_Balloc+0x56>
 800a7e4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7e8:	e00e      	b.n	800a808 <_Balloc+0x60>
 800a7ea:	2221      	movs	r2, #33	; 0x21
 800a7ec:	2104      	movs	r1, #4
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f000 fab6 	bl	800ad60 <_calloc_r>
 800a7f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7f6:	60e8      	str	r0, [r5, #12]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e4      	bne.n	800a7c8 <_Balloc+0x20>
 800a7fe:	2000      	movs	r0, #0
 800a800:	bd70      	pop	{r4, r5, r6, pc}
 800a802:	6802      	ldr	r2, [r0, #0]
 800a804:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a808:	2300      	movs	r3, #0
 800a80a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a80e:	e7f7      	b.n	800a800 <_Balloc+0x58>

0800a810 <_Bfree>:
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a814:	4606      	mov	r6, r0
 800a816:	460d      	mov	r5, r1
 800a818:	b93c      	cbnz	r4, 800a82a <_Bfree+0x1a>
 800a81a:	2010      	movs	r0, #16
 800a81c:	f7ff ffbc 	bl	800a798 <malloc>
 800a820:	6270      	str	r0, [r6, #36]	; 0x24
 800a822:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a826:	6004      	str	r4, [r0, #0]
 800a828:	60c4      	str	r4, [r0, #12]
 800a82a:	b13d      	cbz	r5, 800a83c <_Bfree+0x2c>
 800a82c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a82e:	686a      	ldr	r2, [r5, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a836:	6029      	str	r1, [r5, #0]
 800a838:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a83c:	bd70      	pop	{r4, r5, r6, pc}

0800a83e <__multadd>:
 800a83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a842:	690d      	ldr	r5, [r1, #16]
 800a844:	461f      	mov	r7, r3
 800a846:	4606      	mov	r6, r0
 800a848:	460c      	mov	r4, r1
 800a84a:	f101 0c14 	add.w	ip, r1, #20
 800a84e:	2300      	movs	r3, #0
 800a850:	f8dc 0000 	ldr.w	r0, [ip]
 800a854:	b281      	uxth	r1, r0
 800a856:	fb02 7101 	mla	r1, r2, r1, r7
 800a85a:	0c0f      	lsrs	r7, r1, #16
 800a85c:	0c00      	lsrs	r0, r0, #16
 800a85e:	fb02 7000 	mla	r0, r2, r0, r7
 800a862:	b289      	uxth	r1, r1
 800a864:	3301      	adds	r3, #1
 800a866:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a86a:	429d      	cmp	r5, r3
 800a86c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a870:	f84c 1b04 	str.w	r1, [ip], #4
 800a874:	dcec      	bgt.n	800a850 <__multadd+0x12>
 800a876:	b1d7      	cbz	r7, 800a8ae <__multadd+0x70>
 800a878:	68a3      	ldr	r3, [r4, #8]
 800a87a:	42ab      	cmp	r3, r5
 800a87c:	dc12      	bgt.n	800a8a4 <__multadd+0x66>
 800a87e:	6861      	ldr	r1, [r4, #4]
 800a880:	4630      	mov	r0, r6
 800a882:	3101      	adds	r1, #1
 800a884:	f7ff ff90 	bl	800a7a8 <_Balloc>
 800a888:	6922      	ldr	r2, [r4, #16]
 800a88a:	3202      	adds	r2, #2
 800a88c:	f104 010c 	add.w	r1, r4, #12
 800a890:	4680      	mov	r8, r0
 800a892:	0092      	lsls	r2, r2, #2
 800a894:	300c      	adds	r0, #12
 800a896:	f7fe f95d 	bl	8008b54 <memcpy>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4630      	mov	r0, r6
 800a89e:	f7ff ffb7 	bl	800a810 <_Bfree>
 800a8a2:	4644      	mov	r4, r8
 800a8a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8a8:	3501      	adds	r5, #1
 800a8aa:	615f      	str	r7, [r3, #20]
 800a8ac:	6125      	str	r5, [r4, #16]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8b4 <__hi0bits>:
 800a8b4:	0c02      	lsrs	r2, r0, #16
 800a8b6:	0412      	lsls	r2, r2, #16
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	b9b2      	cbnz	r2, 800a8ea <__hi0bits+0x36>
 800a8bc:	0403      	lsls	r3, r0, #16
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a8c4:	bf04      	itt	eq
 800a8c6:	021b      	lsleq	r3, r3, #8
 800a8c8:	3008      	addeq	r0, #8
 800a8ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a8ce:	bf04      	itt	eq
 800a8d0:	011b      	lsleq	r3, r3, #4
 800a8d2:	3004      	addeq	r0, #4
 800a8d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a8d8:	bf04      	itt	eq
 800a8da:	009b      	lsleq	r3, r3, #2
 800a8dc:	3002      	addeq	r0, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	db06      	blt.n	800a8f0 <__hi0bits+0x3c>
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	d503      	bpl.n	800a8ee <__hi0bits+0x3a>
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	4770      	bx	lr
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	e7e8      	b.n	800a8c0 <__hi0bits+0xc>
 800a8ee:	2020      	movs	r0, #32
 800a8f0:	4770      	bx	lr

0800a8f2 <__lo0bits>:
 800a8f2:	6803      	ldr	r3, [r0, #0]
 800a8f4:	f013 0207 	ands.w	r2, r3, #7
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	d00b      	beq.n	800a914 <__lo0bits+0x22>
 800a8fc:	07da      	lsls	r2, r3, #31
 800a8fe:	d423      	bmi.n	800a948 <__lo0bits+0x56>
 800a900:	0798      	lsls	r0, r3, #30
 800a902:	bf49      	itett	mi
 800a904:	085b      	lsrmi	r3, r3, #1
 800a906:	089b      	lsrpl	r3, r3, #2
 800a908:	2001      	movmi	r0, #1
 800a90a:	600b      	strmi	r3, [r1, #0]
 800a90c:	bf5c      	itt	pl
 800a90e:	600b      	strpl	r3, [r1, #0]
 800a910:	2002      	movpl	r0, #2
 800a912:	4770      	bx	lr
 800a914:	b298      	uxth	r0, r3
 800a916:	b9a8      	cbnz	r0, 800a944 <__lo0bits+0x52>
 800a918:	0c1b      	lsrs	r3, r3, #16
 800a91a:	2010      	movs	r0, #16
 800a91c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a920:	bf04      	itt	eq
 800a922:	0a1b      	lsreq	r3, r3, #8
 800a924:	3008      	addeq	r0, #8
 800a926:	071a      	lsls	r2, r3, #28
 800a928:	bf04      	itt	eq
 800a92a:	091b      	lsreq	r3, r3, #4
 800a92c:	3004      	addeq	r0, #4
 800a92e:	079a      	lsls	r2, r3, #30
 800a930:	bf04      	itt	eq
 800a932:	089b      	lsreq	r3, r3, #2
 800a934:	3002      	addeq	r0, #2
 800a936:	07da      	lsls	r2, r3, #31
 800a938:	d402      	bmi.n	800a940 <__lo0bits+0x4e>
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	d006      	beq.n	800a94c <__lo0bits+0x5a>
 800a93e:	3001      	adds	r0, #1
 800a940:	600b      	str	r3, [r1, #0]
 800a942:	4770      	bx	lr
 800a944:	4610      	mov	r0, r2
 800a946:	e7e9      	b.n	800a91c <__lo0bits+0x2a>
 800a948:	2000      	movs	r0, #0
 800a94a:	4770      	bx	lr
 800a94c:	2020      	movs	r0, #32
 800a94e:	4770      	bx	lr

0800a950 <__i2b>:
 800a950:	b510      	push	{r4, lr}
 800a952:	460c      	mov	r4, r1
 800a954:	2101      	movs	r1, #1
 800a956:	f7ff ff27 	bl	800a7a8 <_Balloc>
 800a95a:	2201      	movs	r2, #1
 800a95c:	6144      	str	r4, [r0, #20]
 800a95e:	6102      	str	r2, [r0, #16]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__multiply>:
 800a962:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a966:	4614      	mov	r4, r2
 800a968:	690a      	ldr	r2, [r1, #16]
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	bfb8      	it	lt
 800a970:	460b      	movlt	r3, r1
 800a972:	4688      	mov	r8, r1
 800a974:	bfbc      	itt	lt
 800a976:	46a0      	movlt	r8, r4
 800a978:	461c      	movlt	r4, r3
 800a97a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a97e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a982:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a986:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a98a:	eb07 0609 	add.w	r6, r7, r9
 800a98e:	42b3      	cmp	r3, r6
 800a990:	bfb8      	it	lt
 800a992:	3101      	addlt	r1, #1
 800a994:	f7ff ff08 	bl	800a7a8 <_Balloc>
 800a998:	f100 0514 	add.w	r5, r0, #20
 800a99c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	4573      	cmp	r3, lr
 800a9a6:	d316      	bcc.n	800a9d6 <__multiply+0x74>
 800a9a8:	f104 0214 	add.w	r2, r4, #20
 800a9ac:	f108 0114 	add.w	r1, r8, #20
 800a9b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a9b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	9b00      	ldr	r3, [sp, #0]
 800a9bc:	9201      	str	r2, [sp, #4]
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d80c      	bhi.n	800a9dc <__multiply+0x7a>
 800a9c2:	2e00      	cmp	r6, #0
 800a9c4:	dd03      	ble.n	800a9ce <__multiply+0x6c>
 800a9c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d05d      	beq.n	800aa8a <__multiply+0x128>
 800a9ce:	6106      	str	r6, [r0, #16]
 800a9d0:	b003      	add	sp, #12
 800a9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d6:	f843 2b04 	str.w	r2, [r3], #4
 800a9da:	e7e3      	b.n	800a9a4 <__multiply+0x42>
 800a9dc:	f8b2 b000 	ldrh.w	fp, [r2]
 800a9e0:	f1bb 0f00 	cmp.w	fp, #0
 800a9e4:	d023      	beq.n	800aa2e <__multiply+0xcc>
 800a9e6:	4689      	mov	r9, r1
 800a9e8:	46ac      	mov	ip, r5
 800a9ea:	f04f 0800 	mov.w	r8, #0
 800a9ee:	f859 4b04 	ldr.w	r4, [r9], #4
 800a9f2:	f8dc a000 	ldr.w	sl, [ip]
 800a9f6:	b2a3      	uxth	r3, r4
 800a9f8:	fa1f fa8a 	uxth.w	sl, sl
 800a9fc:	fb0b a303 	mla	r3, fp, r3, sl
 800aa00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa04:	f8dc 4000 	ldr.w	r4, [ip]
 800aa08:	4443      	add	r3, r8
 800aa0a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa0e:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa12:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa16:	46e2      	mov	sl, ip
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa1e:	454f      	cmp	r7, r9
 800aa20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa24:	f84a 3b04 	str.w	r3, [sl], #4
 800aa28:	d82b      	bhi.n	800aa82 <__multiply+0x120>
 800aa2a:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa2e:	9b01      	ldr	r3, [sp, #4]
 800aa30:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aa34:	3204      	adds	r2, #4
 800aa36:	f1ba 0f00 	cmp.w	sl, #0
 800aa3a:	d020      	beq.n	800aa7e <__multiply+0x11c>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	4689      	mov	r9, r1
 800aa40:	46a8      	mov	r8, r5
 800aa42:	f04f 0b00 	mov.w	fp, #0
 800aa46:	f8b9 c000 	ldrh.w	ip, [r9]
 800aa4a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aa4e:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa52:	445c      	add	r4, fp
 800aa54:	46c4      	mov	ip, r8
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa5c:	f84c 3b04 	str.w	r3, [ip], #4
 800aa60:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa64:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aa68:	0c1b      	lsrs	r3, r3, #16
 800aa6a:	fb0a b303 	mla	r3, sl, r3, fp
 800aa6e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa72:	454f      	cmp	r7, r9
 800aa74:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aa78:	d805      	bhi.n	800aa86 <__multiply+0x124>
 800aa7a:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa7e:	3504      	adds	r5, #4
 800aa80:	e79b      	b.n	800a9ba <__multiply+0x58>
 800aa82:	46d4      	mov	ip, sl
 800aa84:	e7b3      	b.n	800a9ee <__multiply+0x8c>
 800aa86:	46e0      	mov	r8, ip
 800aa88:	e7dd      	b.n	800aa46 <__multiply+0xe4>
 800aa8a:	3e01      	subs	r6, #1
 800aa8c:	e799      	b.n	800a9c2 <__multiply+0x60>
	...

0800aa90 <__pow5mult>:
 800aa90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa94:	4615      	mov	r5, r2
 800aa96:	f012 0203 	ands.w	r2, r2, #3
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	460f      	mov	r7, r1
 800aa9e:	d007      	beq.n	800aab0 <__pow5mult+0x20>
 800aaa0:	3a01      	subs	r2, #1
 800aaa2:	4c21      	ldr	r4, [pc, #132]	; (800ab28 <__pow5mult+0x98>)
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaaa:	f7ff fec8 	bl	800a83e <__multadd>
 800aaae:	4607      	mov	r7, r0
 800aab0:	10ad      	asrs	r5, r5, #2
 800aab2:	d035      	beq.n	800ab20 <__pow5mult+0x90>
 800aab4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aab6:	b93c      	cbnz	r4, 800aac8 <__pow5mult+0x38>
 800aab8:	2010      	movs	r0, #16
 800aaba:	f7ff fe6d 	bl	800a798 <malloc>
 800aabe:	6270      	str	r0, [r6, #36]	; 0x24
 800aac0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aac4:	6004      	str	r4, [r0, #0]
 800aac6:	60c4      	str	r4, [r0, #12]
 800aac8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aacc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aad0:	b94c      	cbnz	r4, 800aae6 <__pow5mult+0x56>
 800aad2:	f240 2171 	movw	r1, #625	; 0x271
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ff3a 	bl	800a950 <__i2b>
 800aadc:	2300      	movs	r3, #0
 800aade:	f8c8 0008 	str.w	r0, [r8, #8]
 800aae2:	4604      	mov	r4, r0
 800aae4:	6003      	str	r3, [r0, #0]
 800aae6:	f04f 0800 	mov.w	r8, #0
 800aaea:	07eb      	lsls	r3, r5, #31
 800aaec:	d50a      	bpl.n	800ab04 <__pow5mult+0x74>
 800aaee:	4639      	mov	r1, r7
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7ff ff35 	bl	800a962 <__multiply>
 800aaf8:	4639      	mov	r1, r7
 800aafa:	4681      	mov	r9, r0
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fe87 	bl	800a810 <_Bfree>
 800ab02:	464f      	mov	r7, r9
 800ab04:	106d      	asrs	r5, r5, #1
 800ab06:	d00b      	beq.n	800ab20 <__pow5mult+0x90>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	b938      	cbnz	r0, 800ab1c <__pow5mult+0x8c>
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff ff26 	bl	800a962 <__multiply>
 800ab16:	6020      	str	r0, [r4, #0]
 800ab18:	f8c0 8000 	str.w	r8, [r0]
 800ab1c:	4604      	mov	r4, r0
 800ab1e:	e7e4      	b.n	800aaea <__pow5mult+0x5a>
 800ab20:	4638      	mov	r0, r7
 800ab22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab26:	bf00      	nop
 800ab28:	0800bcd8 	.word	0x0800bcd8

0800ab2c <__lshift>:
 800ab2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab30:	460c      	mov	r4, r1
 800ab32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab36:	6923      	ldr	r3, [r4, #16]
 800ab38:	6849      	ldr	r1, [r1, #4]
 800ab3a:	eb0a 0903 	add.w	r9, sl, r3
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	4607      	mov	r7, r0
 800ab42:	4616      	mov	r6, r2
 800ab44:	f109 0501 	add.w	r5, r9, #1
 800ab48:	42ab      	cmp	r3, r5
 800ab4a:	db32      	blt.n	800abb2 <__lshift+0x86>
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7ff fe2b 	bl	800a7a8 <_Balloc>
 800ab52:	2300      	movs	r3, #0
 800ab54:	4680      	mov	r8, r0
 800ab56:	f100 0114 	add.w	r1, r0, #20
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4553      	cmp	r3, sl
 800ab5e:	db2b      	blt.n	800abb8 <__lshift+0x8c>
 800ab60:	6920      	ldr	r0, [r4, #16]
 800ab62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab66:	f104 0314 	add.w	r3, r4, #20
 800ab6a:	f016 021f 	ands.w	r2, r6, #31
 800ab6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab76:	d025      	beq.n	800abc4 <__lshift+0x98>
 800ab78:	f1c2 0e20 	rsb	lr, r2, #32
 800ab7c:	2000      	movs	r0, #0
 800ab7e:	681e      	ldr	r6, [r3, #0]
 800ab80:	468a      	mov	sl, r1
 800ab82:	4096      	lsls	r6, r2
 800ab84:	4330      	orrs	r0, r6
 800ab86:	f84a 0b04 	str.w	r0, [sl], #4
 800ab8a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ab8e:	459c      	cmp	ip, r3
 800ab90:	fa20 f00e 	lsr.w	r0, r0, lr
 800ab94:	d814      	bhi.n	800abc0 <__lshift+0x94>
 800ab96:	6048      	str	r0, [r1, #4]
 800ab98:	b108      	cbz	r0, 800ab9e <__lshift+0x72>
 800ab9a:	f109 0502 	add.w	r5, r9, #2
 800ab9e:	3d01      	subs	r5, #1
 800aba0:	4638      	mov	r0, r7
 800aba2:	f8c8 5010 	str.w	r5, [r8, #16]
 800aba6:	4621      	mov	r1, r4
 800aba8:	f7ff fe32 	bl	800a810 <_Bfree>
 800abac:	4640      	mov	r0, r8
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	3101      	adds	r1, #1
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	e7c7      	b.n	800ab48 <__lshift+0x1c>
 800abb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800abbc:	3301      	adds	r3, #1
 800abbe:	e7cd      	b.n	800ab5c <__lshift+0x30>
 800abc0:	4651      	mov	r1, sl
 800abc2:	e7dc      	b.n	800ab7e <__lshift+0x52>
 800abc4:	3904      	subs	r1, #4
 800abc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800abca:	f841 2f04 	str.w	r2, [r1, #4]!
 800abce:	459c      	cmp	ip, r3
 800abd0:	d8f9      	bhi.n	800abc6 <__lshift+0x9a>
 800abd2:	e7e4      	b.n	800ab9e <__lshift+0x72>

0800abd4 <__mcmp>:
 800abd4:	6903      	ldr	r3, [r0, #16]
 800abd6:	690a      	ldr	r2, [r1, #16]
 800abd8:	1a9b      	subs	r3, r3, r2
 800abda:	b530      	push	{r4, r5, lr}
 800abdc:	d10c      	bne.n	800abf8 <__mcmp+0x24>
 800abde:	0092      	lsls	r2, r2, #2
 800abe0:	3014      	adds	r0, #20
 800abe2:	3114      	adds	r1, #20
 800abe4:	1884      	adds	r4, r0, r2
 800abe6:	4411      	add	r1, r2
 800abe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abf0:	4295      	cmp	r5, r2
 800abf2:	d003      	beq.n	800abfc <__mcmp+0x28>
 800abf4:	d305      	bcc.n	800ac02 <__mcmp+0x2e>
 800abf6:	2301      	movs	r3, #1
 800abf8:	4618      	mov	r0, r3
 800abfa:	bd30      	pop	{r4, r5, pc}
 800abfc:	42a0      	cmp	r0, r4
 800abfe:	d3f3      	bcc.n	800abe8 <__mcmp+0x14>
 800ac00:	e7fa      	b.n	800abf8 <__mcmp+0x24>
 800ac02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac06:	e7f7      	b.n	800abf8 <__mcmp+0x24>

0800ac08 <__mdiff>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	460d      	mov	r5, r1
 800ac0e:	4607      	mov	r7, r0
 800ac10:	4611      	mov	r1, r2
 800ac12:	4628      	mov	r0, r5
 800ac14:	4614      	mov	r4, r2
 800ac16:	f7ff ffdd 	bl	800abd4 <__mcmp>
 800ac1a:	1e06      	subs	r6, r0, #0
 800ac1c:	d108      	bne.n	800ac30 <__mdiff+0x28>
 800ac1e:	4631      	mov	r1, r6
 800ac20:	4638      	mov	r0, r7
 800ac22:	f7ff fdc1 	bl	800a7a8 <_Balloc>
 800ac26:	2301      	movs	r3, #1
 800ac28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac30:	bfa4      	itt	ge
 800ac32:	4623      	movge	r3, r4
 800ac34:	462c      	movge	r4, r5
 800ac36:	4638      	mov	r0, r7
 800ac38:	6861      	ldr	r1, [r4, #4]
 800ac3a:	bfa6      	itte	ge
 800ac3c:	461d      	movge	r5, r3
 800ac3e:	2600      	movge	r6, #0
 800ac40:	2601      	movlt	r6, #1
 800ac42:	f7ff fdb1 	bl	800a7a8 <_Balloc>
 800ac46:	692b      	ldr	r3, [r5, #16]
 800ac48:	60c6      	str	r6, [r0, #12]
 800ac4a:	6926      	ldr	r6, [r4, #16]
 800ac4c:	f105 0914 	add.w	r9, r5, #20
 800ac50:	f104 0214 	add.w	r2, r4, #20
 800ac54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac5c:	f100 0514 	add.w	r5, r0, #20
 800ac60:	f04f 0e00 	mov.w	lr, #0
 800ac64:	f852 ab04 	ldr.w	sl, [r2], #4
 800ac68:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac6c:	fa1e f18a 	uxtah	r1, lr, sl
 800ac70:	b2a3      	uxth	r3, r4
 800ac72:	1ac9      	subs	r1, r1, r3
 800ac74:	0c23      	lsrs	r3, r4, #16
 800ac76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ac7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac7e:	b289      	uxth	r1, r1
 800ac80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ac84:	45c8      	cmp	r8, r9
 800ac86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac8a:	4694      	mov	ip, r2
 800ac8c:	f845 3b04 	str.w	r3, [r5], #4
 800ac90:	d8e8      	bhi.n	800ac64 <__mdiff+0x5c>
 800ac92:	45bc      	cmp	ip, r7
 800ac94:	d304      	bcc.n	800aca0 <__mdiff+0x98>
 800ac96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ac9a:	b183      	cbz	r3, 800acbe <__mdiff+0xb6>
 800ac9c:	6106      	str	r6, [r0, #16]
 800ac9e:	e7c5      	b.n	800ac2c <__mdiff+0x24>
 800aca0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aca4:	fa1e f381 	uxtah	r3, lr, r1
 800aca8:	141a      	asrs	r2, r3, #16
 800acaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acae:	b29b      	uxth	r3, r3
 800acb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acb4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800acb8:	f845 3b04 	str.w	r3, [r5], #4
 800acbc:	e7e9      	b.n	800ac92 <__mdiff+0x8a>
 800acbe:	3e01      	subs	r6, #1
 800acc0:	e7e9      	b.n	800ac96 <__mdiff+0x8e>

0800acc2 <__d2b>:
 800acc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acc6:	460e      	mov	r6, r1
 800acc8:	2101      	movs	r1, #1
 800acca:	ec59 8b10 	vmov	r8, r9, d0
 800acce:	4615      	mov	r5, r2
 800acd0:	f7ff fd6a 	bl	800a7a8 <_Balloc>
 800acd4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800acd8:	4607      	mov	r7, r0
 800acda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acde:	bb34      	cbnz	r4, 800ad2e <__d2b+0x6c>
 800ace0:	9301      	str	r3, [sp, #4]
 800ace2:	f1b8 0300 	subs.w	r3, r8, #0
 800ace6:	d027      	beq.n	800ad38 <__d2b+0x76>
 800ace8:	a802      	add	r0, sp, #8
 800acea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800acee:	f7ff fe00 	bl	800a8f2 <__lo0bits>
 800acf2:	9900      	ldr	r1, [sp, #0]
 800acf4:	b1f0      	cbz	r0, 800ad34 <__d2b+0x72>
 800acf6:	9a01      	ldr	r2, [sp, #4]
 800acf8:	f1c0 0320 	rsb	r3, r0, #32
 800acfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ad00:	430b      	orrs	r3, r1
 800ad02:	40c2      	lsrs	r2, r0
 800ad04:	617b      	str	r3, [r7, #20]
 800ad06:	9201      	str	r2, [sp, #4]
 800ad08:	9b01      	ldr	r3, [sp, #4]
 800ad0a:	61bb      	str	r3, [r7, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	bf14      	ite	ne
 800ad10:	2102      	movne	r1, #2
 800ad12:	2101      	moveq	r1, #1
 800ad14:	6139      	str	r1, [r7, #16]
 800ad16:	b1c4      	cbz	r4, 800ad4a <__d2b+0x88>
 800ad18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad1c:	4404      	add	r4, r0
 800ad1e:	6034      	str	r4, [r6, #0]
 800ad20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad24:	6028      	str	r0, [r5, #0]
 800ad26:	4638      	mov	r0, r7
 800ad28:	b003      	add	sp, #12
 800ad2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad32:	e7d5      	b.n	800ace0 <__d2b+0x1e>
 800ad34:	6179      	str	r1, [r7, #20]
 800ad36:	e7e7      	b.n	800ad08 <__d2b+0x46>
 800ad38:	a801      	add	r0, sp, #4
 800ad3a:	f7ff fdda 	bl	800a8f2 <__lo0bits>
 800ad3e:	9b01      	ldr	r3, [sp, #4]
 800ad40:	617b      	str	r3, [r7, #20]
 800ad42:	2101      	movs	r1, #1
 800ad44:	6139      	str	r1, [r7, #16]
 800ad46:	3020      	adds	r0, #32
 800ad48:	e7e5      	b.n	800ad16 <__d2b+0x54>
 800ad4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ad4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad52:	6030      	str	r0, [r6, #0]
 800ad54:	6918      	ldr	r0, [r3, #16]
 800ad56:	f7ff fdad 	bl	800a8b4 <__hi0bits>
 800ad5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad5e:	e7e1      	b.n	800ad24 <__d2b+0x62>

0800ad60 <_calloc_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	fb02 f401 	mul.w	r4, r2, r1
 800ad66:	4621      	mov	r1, r4
 800ad68:	f000 f856 	bl	800ae18 <_malloc_r>
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	b118      	cbz	r0, 800ad78 <_calloc_r+0x18>
 800ad70:	4622      	mov	r2, r4
 800ad72:	2100      	movs	r1, #0
 800ad74:	f7fd fef9 	bl	8008b6a <memset>
 800ad78:	4628      	mov	r0, r5
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}

0800ad7c <_free_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4605      	mov	r5, r0
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d045      	beq.n	800ae10 <_free_r+0x94>
 800ad84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad88:	1f0c      	subs	r4, r1, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	bfb8      	it	lt
 800ad8e:	18e4      	addlt	r4, r4, r3
 800ad90:	f000 fa98 	bl	800b2c4 <__malloc_lock>
 800ad94:	4a1f      	ldr	r2, [pc, #124]	; (800ae14 <_free_r+0x98>)
 800ad96:	6813      	ldr	r3, [r2, #0]
 800ad98:	4610      	mov	r0, r2
 800ad9a:	b933      	cbnz	r3, 800adaa <_free_r+0x2e>
 800ad9c:	6063      	str	r3, [r4, #4]
 800ad9e:	6014      	str	r4, [r2, #0]
 800ada0:	4628      	mov	r0, r5
 800ada2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ada6:	f000 ba8e 	b.w	800b2c6 <__malloc_unlock>
 800adaa:	42a3      	cmp	r3, r4
 800adac:	d90c      	bls.n	800adc8 <_free_r+0x4c>
 800adae:	6821      	ldr	r1, [r4, #0]
 800adb0:	1862      	adds	r2, r4, r1
 800adb2:	4293      	cmp	r3, r2
 800adb4:	bf04      	itt	eq
 800adb6:	681a      	ldreq	r2, [r3, #0]
 800adb8:	685b      	ldreq	r3, [r3, #4]
 800adba:	6063      	str	r3, [r4, #4]
 800adbc:	bf04      	itt	eq
 800adbe:	1852      	addeq	r2, r2, r1
 800adc0:	6022      	streq	r2, [r4, #0]
 800adc2:	6004      	str	r4, [r0, #0]
 800adc4:	e7ec      	b.n	800ada0 <_free_r+0x24>
 800adc6:	4613      	mov	r3, r2
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	b10a      	cbz	r2, 800add0 <_free_r+0x54>
 800adcc:	42a2      	cmp	r2, r4
 800adce:	d9fa      	bls.n	800adc6 <_free_r+0x4a>
 800add0:	6819      	ldr	r1, [r3, #0]
 800add2:	1858      	adds	r0, r3, r1
 800add4:	42a0      	cmp	r0, r4
 800add6:	d10b      	bne.n	800adf0 <_free_r+0x74>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	4401      	add	r1, r0
 800addc:	1858      	adds	r0, r3, r1
 800adde:	4282      	cmp	r2, r0
 800ade0:	6019      	str	r1, [r3, #0]
 800ade2:	d1dd      	bne.n	800ada0 <_free_r+0x24>
 800ade4:	6810      	ldr	r0, [r2, #0]
 800ade6:	6852      	ldr	r2, [r2, #4]
 800ade8:	605a      	str	r2, [r3, #4]
 800adea:	4401      	add	r1, r0
 800adec:	6019      	str	r1, [r3, #0]
 800adee:	e7d7      	b.n	800ada0 <_free_r+0x24>
 800adf0:	d902      	bls.n	800adf8 <_free_r+0x7c>
 800adf2:	230c      	movs	r3, #12
 800adf4:	602b      	str	r3, [r5, #0]
 800adf6:	e7d3      	b.n	800ada0 <_free_r+0x24>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	1821      	adds	r1, r4, r0
 800adfc:	428a      	cmp	r2, r1
 800adfe:	bf04      	itt	eq
 800ae00:	6811      	ldreq	r1, [r2, #0]
 800ae02:	6852      	ldreq	r2, [r2, #4]
 800ae04:	6062      	str	r2, [r4, #4]
 800ae06:	bf04      	itt	eq
 800ae08:	1809      	addeq	r1, r1, r0
 800ae0a:	6021      	streq	r1, [r4, #0]
 800ae0c:	605c      	str	r4, [r3, #4]
 800ae0e:	e7c7      	b.n	800ada0 <_free_r+0x24>
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
 800ae12:	bf00      	nop
 800ae14:	20004b10 	.word	0x20004b10

0800ae18 <_malloc_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	1ccd      	adds	r5, r1, #3
 800ae1c:	f025 0503 	bic.w	r5, r5, #3
 800ae20:	3508      	adds	r5, #8
 800ae22:	2d0c      	cmp	r5, #12
 800ae24:	bf38      	it	cc
 800ae26:	250c      	movcc	r5, #12
 800ae28:	2d00      	cmp	r5, #0
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	db01      	blt.n	800ae32 <_malloc_r+0x1a>
 800ae2e:	42a9      	cmp	r1, r5
 800ae30:	d903      	bls.n	800ae3a <_malloc_r+0x22>
 800ae32:	230c      	movs	r3, #12
 800ae34:	6033      	str	r3, [r6, #0]
 800ae36:	2000      	movs	r0, #0
 800ae38:	bd70      	pop	{r4, r5, r6, pc}
 800ae3a:	f000 fa43 	bl	800b2c4 <__malloc_lock>
 800ae3e:	4a21      	ldr	r2, [pc, #132]	; (800aec4 <_malloc_r+0xac>)
 800ae40:	6814      	ldr	r4, [r2, #0]
 800ae42:	4621      	mov	r1, r4
 800ae44:	b991      	cbnz	r1, 800ae6c <_malloc_r+0x54>
 800ae46:	4c20      	ldr	r4, [pc, #128]	; (800aec8 <_malloc_r+0xb0>)
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	b91b      	cbnz	r3, 800ae54 <_malloc_r+0x3c>
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	f000 f97d 	bl	800b14c <_sbrk_r>
 800ae52:	6020      	str	r0, [r4, #0]
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 f978 	bl	800b14c <_sbrk_r>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d124      	bne.n	800aeaa <_malloc_r+0x92>
 800ae60:	230c      	movs	r3, #12
 800ae62:	6033      	str	r3, [r6, #0]
 800ae64:	4630      	mov	r0, r6
 800ae66:	f000 fa2e 	bl	800b2c6 <__malloc_unlock>
 800ae6a:	e7e4      	b.n	800ae36 <_malloc_r+0x1e>
 800ae6c:	680b      	ldr	r3, [r1, #0]
 800ae6e:	1b5b      	subs	r3, r3, r5
 800ae70:	d418      	bmi.n	800aea4 <_malloc_r+0x8c>
 800ae72:	2b0b      	cmp	r3, #11
 800ae74:	d90f      	bls.n	800ae96 <_malloc_r+0x7e>
 800ae76:	600b      	str	r3, [r1, #0]
 800ae78:	50cd      	str	r5, [r1, r3]
 800ae7a:	18cc      	adds	r4, r1, r3
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f000 fa22 	bl	800b2c6 <__malloc_unlock>
 800ae82:	f104 000b 	add.w	r0, r4, #11
 800ae86:	1d23      	adds	r3, r4, #4
 800ae88:	f020 0007 	bic.w	r0, r0, #7
 800ae8c:	1ac3      	subs	r3, r0, r3
 800ae8e:	d0d3      	beq.n	800ae38 <_malloc_r+0x20>
 800ae90:	425a      	negs	r2, r3
 800ae92:	50e2      	str	r2, [r4, r3]
 800ae94:	e7d0      	b.n	800ae38 <_malloc_r+0x20>
 800ae96:	428c      	cmp	r4, r1
 800ae98:	684b      	ldr	r3, [r1, #4]
 800ae9a:	bf16      	itet	ne
 800ae9c:	6063      	strne	r3, [r4, #4]
 800ae9e:	6013      	streq	r3, [r2, #0]
 800aea0:	460c      	movne	r4, r1
 800aea2:	e7eb      	b.n	800ae7c <_malloc_r+0x64>
 800aea4:	460c      	mov	r4, r1
 800aea6:	6849      	ldr	r1, [r1, #4]
 800aea8:	e7cc      	b.n	800ae44 <_malloc_r+0x2c>
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d005      	beq.n	800aec0 <_malloc_r+0xa8>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f000 f948 	bl	800b14c <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d0cf      	beq.n	800ae60 <_malloc_r+0x48>
 800aec0:	6025      	str	r5, [r4, #0]
 800aec2:	e7db      	b.n	800ae7c <_malloc_r+0x64>
 800aec4:	20004b10 	.word	0x20004b10
 800aec8:	20004b14 	.word	0x20004b14

0800aecc <__sfputc_r>:
 800aecc:	6893      	ldr	r3, [r2, #8]
 800aece:	3b01      	subs	r3, #1
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	b410      	push	{r4}
 800aed4:	6093      	str	r3, [r2, #8]
 800aed6:	da08      	bge.n	800aeea <__sfputc_r+0x1e>
 800aed8:	6994      	ldr	r4, [r2, #24]
 800aeda:	42a3      	cmp	r3, r4
 800aedc:	db01      	blt.n	800aee2 <__sfputc_r+0x16>
 800aede:	290a      	cmp	r1, #10
 800aee0:	d103      	bne.n	800aeea <__sfputc_r+0x1e>
 800aee2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aee6:	f7fe bb65 	b.w	80095b4 <__swbuf_r>
 800aeea:	6813      	ldr	r3, [r2, #0]
 800aeec:	1c58      	adds	r0, r3, #1
 800aeee:	6010      	str	r0, [r2, #0]
 800aef0:	7019      	strb	r1, [r3, #0]
 800aef2:	4608      	mov	r0, r1
 800aef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aef8:	4770      	bx	lr

0800aefa <__sfputs_r>:
 800aefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefc:	4606      	mov	r6, r0
 800aefe:	460f      	mov	r7, r1
 800af00:	4614      	mov	r4, r2
 800af02:	18d5      	adds	r5, r2, r3
 800af04:	42ac      	cmp	r4, r5
 800af06:	d101      	bne.n	800af0c <__sfputs_r+0x12>
 800af08:	2000      	movs	r0, #0
 800af0a:	e007      	b.n	800af1c <__sfputs_r+0x22>
 800af0c:	463a      	mov	r2, r7
 800af0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af12:	4630      	mov	r0, r6
 800af14:	f7ff ffda 	bl	800aecc <__sfputc_r>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d1f3      	bne.n	800af04 <__sfputs_r+0xa>
 800af1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af20 <_vfiprintf_r>:
 800af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	460c      	mov	r4, r1
 800af26:	b09d      	sub	sp, #116	; 0x74
 800af28:	4617      	mov	r7, r2
 800af2a:	461d      	mov	r5, r3
 800af2c:	4606      	mov	r6, r0
 800af2e:	b118      	cbz	r0, 800af38 <_vfiprintf_r+0x18>
 800af30:	6983      	ldr	r3, [r0, #24]
 800af32:	b90b      	cbnz	r3, 800af38 <_vfiprintf_r+0x18>
 800af34:	f7ff fb34 	bl	800a5a0 <__sinit>
 800af38:	4b7c      	ldr	r3, [pc, #496]	; (800b12c <_vfiprintf_r+0x20c>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d158      	bne.n	800aff0 <_vfiprintf_r+0xd0>
 800af3e:	6874      	ldr	r4, [r6, #4]
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	0718      	lsls	r0, r3, #28
 800af44:	d55e      	bpl.n	800b004 <_vfiprintf_r+0xe4>
 800af46:	6923      	ldr	r3, [r4, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d05b      	beq.n	800b004 <_vfiprintf_r+0xe4>
 800af4c:	2300      	movs	r3, #0
 800af4e:	9309      	str	r3, [sp, #36]	; 0x24
 800af50:	2320      	movs	r3, #32
 800af52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af56:	2330      	movs	r3, #48	; 0x30
 800af58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af5c:	9503      	str	r5, [sp, #12]
 800af5e:	f04f 0b01 	mov.w	fp, #1
 800af62:	46b8      	mov	r8, r7
 800af64:	4645      	mov	r5, r8
 800af66:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af6a:	b10b      	cbz	r3, 800af70 <_vfiprintf_r+0x50>
 800af6c:	2b25      	cmp	r3, #37	; 0x25
 800af6e:	d154      	bne.n	800b01a <_vfiprintf_r+0xfa>
 800af70:	ebb8 0a07 	subs.w	sl, r8, r7
 800af74:	d00b      	beq.n	800af8e <_vfiprintf_r+0x6e>
 800af76:	4653      	mov	r3, sl
 800af78:	463a      	mov	r2, r7
 800af7a:	4621      	mov	r1, r4
 800af7c:	4630      	mov	r0, r6
 800af7e:	f7ff ffbc 	bl	800aefa <__sfputs_r>
 800af82:	3001      	adds	r0, #1
 800af84:	f000 80c2 	beq.w	800b10c <_vfiprintf_r+0x1ec>
 800af88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8a:	4453      	add	r3, sl
 800af8c:	9309      	str	r3, [sp, #36]	; 0x24
 800af8e:	f898 3000 	ldrb.w	r3, [r8]
 800af92:	2b00      	cmp	r3, #0
 800af94:	f000 80ba 	beq.w	800b10c <_vfiprintf_r+0x1ec>
 800af98:	2300      	movs	r3, #0
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa2:	9304      	str	r3, [sp, #16]
 800afa4:	9307      	str	r3, [sp, #28]
 800afa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afaa:	931a      	str	r3, [sp, #104]	; 0x68
 800afac:	46a8      	mov	r8, r5
 800afae:	2205      	movs	r2, #5
 800afb0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800afb4:	485e      	ldr	r0, [pc, #376]	; (800b130 <_vfiprintf_r+0x210>)
 800afb6:	f7f5 f93b 	bl	8000230 <memchr>
 800afba:	9b04      	ldr	r3, [sp, #16]
 800afbc:	bb78      	cbnz	r0, 800b01e <_vfiprintf_r+0xfe>
 800afbe:	06d9      	lsls	r1, r3, #27
 800afc0:	bf44      	itt	mi
 800afc2:	2220      	movmi	r2, #32
 800afc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afc8:	071a      	lsls	r2, r3, #28
 800afca:	bf44      	itt	mi
 800afcc:	222b      	movmi	r2, #43	; 0x2b
 800afce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afd2:	782a      	ldrb	r2, [r5, #0]
 800afd4:	2a2a      	cmp	r2, #42	; 0x2a
 800afd6:	d02a      	beq.n	800b02e <_vfiprintf_r+0x10e>
 800afd8:	9a07      	ldr	r2, [sp, #28]
 800afda:	46a8      	mov	r8, r5
 800afdc:	2000      	movs	r0, #0
 800afde:	250a      	movs	r5, #10
 800afe0:	4641      	mov	r1, r8
 800afe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afe6:	3b30      	subs	r3, #48	; 0x30
 800afe8:	2b09      	cmp	r3, #9
 800afea:	d969      	bls.n	800b0c0 <_vfiprintf_r+0x1a0>
 800afec:	b360      	cbz	r0, 800b048 <_vfiprintf_r+0x128>
 800afee:	e024      	b.n	800b03a <_vfiprintf_r+0x11a>
 800aff0:	4b50      	ldr	r3, [pc, #320]	; (800b134 <_vfiprintf_r+0x214>)
 800aff2:	429c      	cmp	r4, r3
 800aff4:	d101      	bne.n	800affa <_vfiprintf_r+0xda>
 800aff6:	68b4      	ldr	r4, [r6, #8]
 800aff8:	e7a2      	b.n	800af40 <_vfiprintf_r+0x20>
 800affa:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <_vfiprintf_r+0x218>)
 800affc:	429c      	cmp	r4, r3
 800affe:	bf08      	it	eq
 800b000:	68f4      	ldreq	r4, [r6, #12]
 800b002:	e79d      	b.n	800af40 <_vfiprintf_r+0x20>
 800b004:	4621      	mov	r1, r4
 800b006:	4630      	mov	r0, r6
 800b008:	f7fe fb26 	bl	8009658 <__swsetup_r>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d09d      	beq.n	800af4c <_vfiprintf_r+0x2c>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b014:	b01d      	add	sp, #116	; 0x74
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	46a8      	mov	r8, r5
 800b01c:	e7a2      	b.n	800af64 <_vfiprintf_r+0x44>
 800b01e:	4a44      	ldr	r2, [pc, #272]	; (800b130 <_vfiprintf_r+0x210>)
 800b020:	1a80      	subs	r0, r0, r2
 800b022:	fa0b f000 	lsl.w	r0, fp, r0
 800b026:	4318      	orrs	r0, r3
 800b028:	9004      	str	r0, [sp, #16]
 800b02a:	4645      	mov	r5, r8
 800b02c:	e7be      	b.n	800afac <_vfiprintf_r+0x8c>
 800b02e:	9a03      	ldr	r2, [sp, #12]
 800b030:	1d11      	adds	r1, r2, #4
 800b032:	6812      	ldr	r2, [r2, #0]
 800b034:	9103      	str	r1, [sp, #12]
 800b036:	2a00      	cmp	r2, #0
 800b038:	db01      	blt.n	800b03e <_vfiprintf_r+0x11e>
 800b03a:	9207      	str	r2, [sp, #28]
 800b03c:	e004      	b.n	800b048 <_vfiprintf_r+0x128>
 800b03e:	4252      	negs	r2, r2
 800b040:	f043 0302 	orr.w	r3, r3, #2
 800b044:	9207      	str	r2, [sp, #28]
 800b046:	9304      	str	r3, [sp, #16]
 800b048:	f898 3000 	ldrb.w	r3, [r8]
 800b04c:	2b2e      	cmp	r3, #46	; 0x2e
 800b04e:	d10e      	bne.n	800b06e <_vfiprintf_r+0x14e>
 800b050:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b054:	2b2a      	cmp	r3, #42	; 0x2a
 800b056:	d138      	bne.n	800b0ca <_vfiprintf_r+0x1aa>
 800b058:	9b03      	ldr	r3, [sp, #12]
 800b05a:	1d1a      	adds	r2, r3, #4
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	9203      	str	r2, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	bfb8      	it	lt
 800b064:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b068:	f108 0802 	add.w	r8, r8, #2
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	4d33      	ldr	r5, [pc, #204]	; (800b13c <_vfiprintf_r+0x21c>)
 800b070:	f898 1000 	ldrb.w	r1, [r8]
 800b074:	2203      	movs	r2, #3
 800b076:	4628      	mov	r0, r5
 800b078:	f7f5 f8da 	bl	8000230 <memchr>
 800b07c:	b140      	cbz	r0, 800b090 <_vfiprintf_r+0x170>
 800b07e:	2340      	movs	r3, #64	; 0x40
 800b080:	1b40      	subs	r0, r0, r5
 800b082:	fa03 f000 	lsl.w	r0, r3, r0
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	4303      	orrs	r3, r0
 800b08a:	f108 0801 	add.w	r8, r8, #1
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	f898 1000 	ldrb.w	r1, [r8]
 800b094:	482a      	ldr	r0, [pc, #168]	; (800b140 <_vfiprintf_r+0x220>)
 800b096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b09a:	2206      	movs	r2, #6
 800b09c:	f108 0701 	add.w	r7, r8, #1
 800b0a0:	f7f5 f8c6 	bl	8000230 <memchr>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d037      	beq.n	800b118 <_vfiprintf_r+0x1f8>
 800b0a8:	4b26      	ldr	r3, [pc, #152]	; (800b144 <_vfiprintf_r+0x224>)
 800b0aa:	bb1b      	cbnz	r3, 800b0f4 <_vfiprintf_r+0x1d4>
 800b0ac:	9b03      	ldr	r3, [sp, #12]
 800b0ae:	3307      	adds	r3, #7
 800b0b0:	f023 0307 	bic.w	r3, r3, #7
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	9303      	str	r3, [sp, #12]
 800b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ba:	444b      	add	r3, r9
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	e750      	b.n	800af62 <_vfiprintf_r+0x42>
 800b0c0:	fb05 3202 	mla	r2, r5, r2, r3
 800b0c4:	2001      	movs	r0, #1
 800b0c6:	4688      	mov	r8, r1
 800b0c8:	e78a      	b.n	800afe0 <_vfiprintf_r+0xc0>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f108 0801 	add.w	r8, r8, #1
 800b0d0:	9305      	str	r3, [sp, #20]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	250a      	movs	r5, #10
 800b0d6:	4640      	mov	r0, r8
 800b0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0dc:	3a30      	subs	r2, #48	; 0x30
 800b0de:	2a09      	cmp	r2, #9
 800b0e0:	d903      	bls.n	800b0ea <_vfiprintf_r+0x1ca>
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d0c3      	beq.n	800b06e <_vfiprintf_r+0x14e>
 800b0e6:	9105      	str	r1, [sp, #20]
 800b0e8:	e7c1      	b.n	800b06e <_vfiprintf_r+0x14e>
 800b0ea:	fb05 2101 	mla	r1, r5, r1, r2
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	e7f0      	b.n	800b0d6 <_vfiprintf_r+0x1b6>
 800b0f4:	ab03      	add	r3, sp, #12
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4622      	mov	r2, r4
 800b0fa:	4b13      	ldr	r3, [pc, #76]	; (800b148 <_vfiprintf_r+0x228>)
 800b0fc:	a904      	add	r1, sp, #16
 800b0fe:	4630      	mov	r0, r6
 800b100:	f7fd fdd0 	bl	8008ca4 <_printf_float>
 800b104:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b108:	4681      	mov	r9, r0
 800b10a:	d1d5      	bne.n	800b0b8 <_vfiprintf_r+0x198>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	065b      	lsls	r3, r3, #25
 800b110:	f53f af7e 	bmi.w	800b010 <_vfiprintf_r+0xf0>
 800b114:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b116:	e77d      	b.n	800b014 <_vfiprintf_r+0xf4>
 800b118:	ab03      	add	r3, sp, #12
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	4622      	mov	r2, r4
 800b11e:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <_vfiprintf_r+0x228>)
 800b120:	a904      	add	r1, sp, #16
 800b122:	4630      	mov	r0, r6
 800b124:	f7fe f874 	bl	8009210 <_printf_i>
 800b128:	e7ec      	b.n	800b104 <_vfiprintf_r+0x1e4>
 800b12a:	bf00      	nop
 800b12c:	0800bba4 	.word	0x0800bba4
 800b130:	0800bce4 	.word	0x0800bce4
 800b134:	0800bbc4 	.word	0x0800bbc4
 800b138:	0800bb84 	.word	0x0800bb84
 800b13c:	0800bcea 	.word	0x0800bcea
 800b140:	0800bcee 	.word	0x0800bcee
 800b144:	08008ca5 	.word	0x08008ca5
 800b148:	0800aefb 	.word	0x0800aefb

0800b14c <_sbrk_r>:
 800b14c:	b538      	push	{r3, r4, r5, lr}
 800b14e:	4c06      	ldr	r4, [pc, #24]	; (800b168 <_sbrk_r+0x1c>)
 800b150:	2300      	movs	r3, #0
 800b152:	4605      	mov	r5, r0
 800b154:	4608      	mov	r0, r1
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	f7f7 f938 	bl	80023cc <_sbrk>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d102      	bne.n	800b166 <_sbrk_r+0x1a>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	b103      	cbz	r3, 800b166 <_sbrk_r+0x1a>
 800b164:	602b      	str	r3, [r5, #0]
 800b166:	bd38      	pop	{r3, r4, r5, pc}
 800b168:	2000508c 	.word	0x2000508c

0800b16c <__sread>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	460c      	mov	r4, r1
 800b170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b174:	f000 f8a8 	bl	800b2c8 <_read_r>
 800b178:	2800      	cmp	r0, #0
 800b17a:	bfab      	itete	ge
 800b17c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b17e:	89a3      	ldrhlt	r3, [r4, #12]
 800b180:	181b      	addge	r3, r3, r0
 800b182:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b186:	bfac      	ite	ge
 800b188:	6563      	strge	r3, [r4, #84]	; 0x54
 800b18a:	81a3      	strhlt	r3, [r4, #12]
 800b18c:	bd10      	pop	{r4, pc}

0800b18e <__swrite>:
 800b18e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b192:	461f      	mov	r7, r3
 800b194:	898b      	ldrh	r3, [r1, #12]
 800b196:	05db      	lsls	r3, r3, #23
 800b198:	4605      	mov	r5, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	4616      	mov	r6, r2
 800b19e:	d505      	bpl.n	800b1ac <__swrite+0x1e>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1a8:	f000 f868 	bl	800b27c <_lseek_r>
 800b1ac:	89a3      	ldrh	r3, [r4, #12]
 800b1ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1b6:	81a3      	strh	r3, [r4, #12]
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	463b      	mov	r3, r7
 800b1bc:	4628      	mov	r0, r5
 800b1be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c2:	f000 b817 	b.w	800b1f4 <_write_r>

0800b1c6 <__sseek>:
 800b1c6:	b510      	push	{r4, lr}
 800b1c8:	460c      	mov	r4, r1
 800b1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ce:	f000 f855 	bl	800b27c <_lseek_r>
 800b1d2:	1c43      	adds	r3, r0, #1
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	bf15      	itete	ne
 800b1d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b1da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b1de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b1e2:	81a3      	strheq	r3, [r4, #12]
 800b1e4:	bf18      	it	ne
 800b1e6:	81a3      	strhne	r3, [r4, #12]
 800b1e8:	bd10      	pop	{r4, pc}

0800b1ea <__sclose>:
 800b1ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1ee:	f000 b813 	b.w	800b218 <_close_r>
	...

0800b1f4 <_write_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4c07      	ldr	r4, [pc, #28]	; (800b214 <_write_r+0x20>)
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	2200      	movs	r2, #0
 800b200:	6022      	str	r2, [r4, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f7 f891 	bl	800232a <_write>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_write_r+0x1e>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_write_r+0x1e>
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	2000508c 	.word	0x2000508c

0800b218 <_close_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4c06      	ldr	r4, [pc, #24]	; (800b234 <_close_r+0x1c>)
 800b21c:	2300      	movs	r3, #0
 800b21e:	4605      	mov	r5, r0
 800b220:	4608      	mov	r0, r1
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	f7f7 f89d 	bl	8002362 <_close>
 800b228:	1c43      	adds	r3, r0, #1
 800b22a:	d102      	bne.n	800b232 <_close_r+0x1a>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	b103      	cbz	r3, 800b232 <_close_r+0x1a>
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	2000508c 	.word	0x2000508c

0800b238 <_fstat_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4c07      	ldr	r4, [pc, #28]	; (800b258 <_fstat_r+0x20>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4605      	mov	r5, r0
 800b240:	4608      	mov	r0, r1
 800b242:	4611      	mov	r1, r2
 800b244:	6023      	str	r3, [r4, #0]
 800b246:	f7f7 f898 	bl	800237a <_fstat>
 800b24a:	1c43      	adds	r3, r0, #1
 800b24c:	d102      	bne.n	800b254 <_fstat_r+0x1c>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	b103      	cbz	r3, 800b254 <_fstat_r+0x1c>
 800b252:	602b      	str	r3, [r5, #0]
 800b254:	bd38      	pop	{r3, r4, r5, pc}
 800b256:	bf00      	nop
 800b258:	2000508c 	.word	0x2000508c

0800b25c <_isatty_r>:
 800b25c:	b538      	push	{r3, r4, r5, lr}
 800b25e:	4c06      	ldr	r4, [pc, #24]	; (800b278 <_isatty_r+0x1c>)
 800b260:	2300      	movs	r3, #0
 800b262:	4605      	mov	r5, r0
 800b264:	4608      	mov	r0, r1
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	f7f7 f897 	bl	800239a <_isatty>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d102      	bne.n	800b276 <_isatty_r+0x1a>
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	b103      	cbz	r3, 800b276 <_isatty_r+0x1a>
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	bd38      	pop	{r3, r4, r5, pc}
 800b278:	2000508c 	.word	0x2000508c

0800b27c <_lseek_r>:
 800b27c:	b538      	push	{r3, r4, r5, lr}
 800b27e:	4c07      	ldr	r4, [pc, #28]	; (800b29c <_lseek_r+0x20>)
 800b280:	4605      	mov	r5, r0
 800b282:	4608      	mov	r0, r1
 800b284:	4611      	mov	r1, r2
 800b286:	2200      	movs	r2, #0
 800b288:	6022      	str	r2, [r4, #0]
 800b28a:	461a      	mov	r2, r3
 800b28c:	f7f7 f890 	bl	80023b0 <_lseek>
 800b290:	1c43      	adds	r3, r0, #1
 800b292:	d102      	bne.n	800b29a <_lseek_r+0x1e>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	b103      	cbz	r3, 800b29a <_lseek_r+0x1e>
 800b298:	602b      	str	r3, [r5, #0]
 800b29a:	bd38      	pop	{r3, r4, r5, pc}
 800b29c:	2000508c 	.word	0x2000508c

0800b2a0 <__ascii_mbtowc>:
 800b2a0:	b082      	sub	sp, #8
 800b2a2:	b901      	cbnz	r1, 800b2a6 <__ascii_mbtowc+0x6>
 800b2a4:	a901      	add	r1, sp, #4
 800b2a6:	b142      	cbz	r2, 800b2ba <__ascii_mbtowc+0x1a>
 800b2a8:	b14b      	cbz	r3, 800b2be <__ascii_mbtowc+0x1e>
 800b2aa:	7813      	ldrb	r3, [r2, #0]
 800b2ac:	600b      	str	r3, [r1, #0]
 800b2ae:	7812      	ldrb	r2, [r2, #0]
 800b2b0:	1c10      	adds	r0, r2, #0
 800b2b2:	bf18      	it	ne
 800b2b4:	2001      	movne	r0, #1
 800b2b6:	b002      	add	sp, #8
 800b2b8:	4770      	bx	lr
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	e7fb      	b.n	800b2b6 <__ascii_mbtowc+0x16>
 800b2be:	f06f 0001 	mvn.w	r0, #1
 800b2c2:	e7f8      	b.n	800b2b6 <__ascii_mbtowc+0x16>

0800b2c4 <__malloc_lock>:
 800b2c4:	4770      	bx	lr

0800b2c6 <__malloc_unlock>:
 800b2c6:	4770      	bx	lr

0800b2c8 <_read_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4c07      	ldr	r4, [pc, #28]	; (800b2e8 <_read_r+0x20>)
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	4611      	mov	r1, r2
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	6022      	str	r2, [r4, #0]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	f7f7 f80a 	bl	80022f0 <_read>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_read_r+0x1e>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_read_r+0x1e>
 800b2e4:	602b      	str	r3, [r5, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	2000508c 	.word	0x2000508c

0800b2ec <__ascii_wctomb>:
 800b2ec:	b149      	cbz	r1, 800b302 <__ascii_wctomb+0x16>
 800b2ee:	2aff      	cmp	r2, #255	; 0xff
 800b2f0:	bf85      	ittet	hi
 800b2f2:	238a      	movhi	r3, #138	; 0x8a
 800b2f4:	6003      	strhi	r3, [r0, #0]
 800b2f6:	700a      	strbls	r2, [r1, #0]
 800b2f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b2fc:	bf98      	it	ls
 800b2fe:	2001      	movls	r0, #1
 800b300:	4770      	bx	lr
 800b302:	4608      	mov	r0, r1
 800b304:	4770      	bx	lr
	...

0800b308 <_init>:
 800b308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b30a:	bf00      	nop
 800b30c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b30e:	bc08      	pop	{r3}
 800b310:	469e      	mov	lr, r3
 800b312:	4770      	bx	lr

0800b314 <_fini>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	bf00      	nop
 800b318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b31a:	bc08      	pop	{r3}
 800b31c:	469e      	mov	lr, r3
 800b31e:	4770      	bx	lr
