
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001edc  08011058  08011058  00021058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f34  08012f34  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08012f34  08012f34  00022f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f3c  08012f3c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f3c  08012f3c  00022f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f40  08012f40  00022f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08012f44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  200001e8  0801312c  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005258  0801312c  00035258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039050  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000794c  00000000  00000000  00069268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020d0  00000000  00000000  00070bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  00072c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b930  00000000  00000000  00074a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aba2  00000000  00000000  000a0398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6d0a  00000000  00000000  000caf3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  001c1c44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000991c  00000000  00000000  001c1d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000016e  00000000  00000000  001cb624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801103c 	.word	0x0801103c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0801103c 	.word	0x0801103c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96e 	b.w	8000f8c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8083 	bne.w	8000dde <__udivmoddi4+0x116>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4617      	mov	r7, r2
 8000cdc:	d947      	bls.n	8000d6e <__udivmoddi4+0xa6>
 8000cde:	fab2 f282 	clz	r2, r2
 8000ce2:	b142      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	f1c2 0020 	rsb	r0, r2, #32
 8000ce8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4097      	lsls	r7, r2
 8000cf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000d00:	fa1f fe87 	uxth.w	lr, r7
 8000d04:	fb08 c116 	mls	r1, r8, r6, ip
 8000d08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1a:	f080 8119 	bcs.w	8000f50 <__udivmoddi4+0x288>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8116 	bls.w	8000f50 <__udivmoddi4+0x288>
 8000d24:	3e02      	subs	r6, #2
 8000d26:	443b      	add	r3, r7
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d30:	fb08 3310 	mls	r3, r8, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d3c:	45a6      	cmp	lr, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	193c      	adds	r4, r7, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8105 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d4a:	45a6      	cmp	lr, r4
 8000d4c:	f240 8102 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d50:	3802      	subs	r0, #2
 8000d52:	443c      	add	r4, r7
 8000d54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d58:	eba4 040e 	sub.w	r4, r4, lr
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	b11d      	cbz	r5, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c5 4300 	strd	r4, r3, [r5]
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	b902      	cbnz	r2, 8000d72 <__udivmoddi4+0xaa>
 8000d70:	deff      	udf	#255	; 0xff
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	d150      	bne.n	8000e1c <__udivmoddi4+0x154>
 8000d7a:	1bcb      	subs	r3, r1, r7
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	2601      	movs	r6, #1
 8000d86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d8a:	0c21      	lsrs	r1, r4, #16
 8000d8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb08 f30c 	mul.w	r3, r8, ip
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0xe2>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	f200 80e9 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1ac9      	subs	r1, r1, r3
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x10c>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x10a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80d9 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e7bf      	b.n	8000d5e <__udivmoddi4+0x96>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0x12e>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80b1 	beq.w	8000f4a <__udivmoddi4+0x282>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x1cc>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0x140>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80b8 	bhi.w	8000f78 <__udivmoddi4+0x2b0>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	468c      	mov	ip, r1
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0a8      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000e16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e1a:	e7a5      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f603 	lsr.w	r6, r0, r3
 8000e24:	4097      	lsls	r7, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e2e:	40d9      	lsrs	r1, r3
 8000e30:	4330      	orrs	r0, r6
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e38:	fa1f f887 	uxth.w	r8, r7
 8000e3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e44:	fb06 f108 	mul.w	r1, r6, r8
 8000e48:	4299      	cmp	r1, r3
 8000e4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x19c>
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e56:	f080 808d 	bcs.w	8000f74 <__udivmoddi4+0x2ac>
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	f240 808a 	bls.w	8000f74 <__udivmoddi4+0x2ac>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	443b      	add	r3, r7
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b281      	uxth	r1, r0
 8000e68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e74:	fb00 f308 	mul.w	r3, r0, r8
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d907      	bls.n	8000e8c <__udivmoddi4+0x1c4>
 8000e7c:	1879      	adds	r1, r7, r1
 8000e7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e82:	d273      	bcs.n	8000f6c <__udivmoddi4+0x2a4>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d971      	bls.n	8000f6c <__udivmoddi4+0x2a4>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4439      	add	r1, r7
 8000e8c:	1acb      	subs	r3, r1, r3
 8000e8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e92:	e778      	b.n	8000d86 <__udivmoddi4+0xbe>
 8000e94:	f1c6 0c20 	rsb	ip, r6, #32
 8000e98:	fa03 f406 	lsl.w	r4, r3, r6
 8000e9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ea0:	431c      	orrs	r4, r3
 8000ea2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eb2:	431f      	orrs	r7, r3
 8000eb4:	0c3b      	lsrs	r3, r7, #16
 8000eb6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eba:	fa1f f884 	uxth.w	r8, r4
 8000ebe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ec2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eca:	458a      	cmp	sl, r1
 8000ecc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x220>
 8000ed6:	1861      	adds	r1, r4, r1
 8000ed8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000edc:	d248      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000ede:	458a      	cmp	sl, r1
 8000ee0:	d946      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000ee2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ee6:	4421      	add	r1, r4
 8000ee8:	eba1 010a 	sub.w	r1, r1, sl
 8000eec:	b2bf      	uxth	r7, r7
 8000eee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ef2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ef6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000efa:	fb00 f808 	mul.w	r8, r0, r8
 8000efe:	45b8      	cmp	r8, r7
 8000f00:	d907      	bls.n	8000f12 <__udivmoddi4+0x24a>
 8000f02:	19e7      	adds	r7, r4, r7
 8000f04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f08:	d22e      	bcs.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d92c      	bls.n	8000f68 <__udivmoddi4+0x2a0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4427      	add	r7, r4
 8000f12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f16:	eba7 0708 	sub.w	r7, r7, r8
 8000f1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f1e:	454f      	cmp	r7, r9
 8000f20:	46c6      	mov	lr, r8
 8000f22:	4649      	mov	r1, r9
 8000f24:	d31a      	bcc.n	8000f5c <__udivmoddi4+0x294>
 8000f26:	d017      	beq.n	8000f58 <__udivmoddi4+0x290>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x27a>
 8000f2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f36:	40f2      	lsrs	r2, r6
 8000f38:	ea4c 0202 	orr.w	r2, ip, r2
 8000f3c:	40f7      	lsrs	r7, r6
 8000f3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f42:	2600      	movs	r6, #0
 8000f44:	4631      	mov	r1, r6
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e70b      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6fd      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f58:	4543      	cmp	r3, r8
 8000f5a:	d2e5      	bcs.n	8000f28 <__udivmoddi4+0x260>
 8000f5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f60:	eb69 0104 	sbc.w	r1, r9, r4
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7df      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e7d2      	b.n	8000f12 <__udivmoddi4+0x24a>
 8000f6c:	4660      	mov	r0, ip
 8000f6e:	e78d      	b.n	8000e8c <__udivmoddi4+0x1c4>
 8000f70:	4681      	mov	r9, r0
 8000f72:	e7b9      	b.n	8000ee8 <__udivmoddi4+0x220>
 8000f74:	4666      	mov	r6, ip
 8000f76:	e775      	b.n	8000e64 <__udivmoddi4+0x19c>
 8000f78:	4630      	mov	r0, r6
 8000f7a:	e74a      	b.n	8000e12 <__udivmoddi4+0x14a>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	4439      	add	r1, r7
 8000f82:	e713      	b.n	8000dac <__udivmoddi4+0xe4>
 8000f84:	3802      	subs	r0, #2
 8000f86:	443c      	add	r4, r7
 8000f88:	e724      	b.n	8000dd4 <__udivmoddi4+0x10c>
 8000f8a:	bf00      	nop

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <_ZN7EncoderC1Ev+0x2c>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	08012290 	.word	0x08012290

08000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ffdd 	bl	8000f90 <_ZN7EncoderC1Ev>
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	829a      	strh	r2, [r3, #20]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	619a      	str	r2, [r3, #24]
{

}
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	08012280 	.word	0x08012280

08001004 <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8f5 	bl	80011fc <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 800101a:	b590      	push	{r4, r7, lr}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 8001022:	687c      	ldr	r4, [r7, #4]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f89f 	bl	8001168 <_ZN7AS5048A10ReadAngle_Ev>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	eeb0 0a67 	vmov.f32	s0, s15
 8001032:	4620      	mov	r0, r4
 8001034:	f000 f9e8 	bl	8001408 <_ZN7Encoder9set_angleEf>
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}

08001040 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
	uint8_t par = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001050:	2300      	movs	r3, #0
 8001052:	73bb      	strb	r3, [r7, #14]
 8001054:	7bbb      	ldrb	r3, [r7, #14]
 8001056:	2b0e      	cmp	r3, #14
 8001058:	d810      	bhi.n	800107c <_ZN7AS5048A15CalcEvenParity_Et+0x3c>
		par ^= ((val >> shift) & 0x1);
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	fa42 f303 	asr.w	r3, r2, r3
 8001062:	b25b      	sxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b25a      	sxtb	r2, r3
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4053      	eors	r3, r2
 8001070:	b25b      	sxtb	r3, r3
 8001072:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	3301      	adds	r3, #1
 8001078:	73bb      	strb	r3, [r7, #14]
 800107a:	e7eb      	b.n	8001054 <_ZN7AS5048A15CalcEvenParity_Et+0x14>
	}
	return par;
 800107c:	7bfb      	ldrb	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 800109a:	887b      	ldrh	r3, [r7, #2]
 800109c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a0:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 80010a2:	787b      	ldrb	r3, [r7, #1]
 80010a4:	039b      	lsls	r3, r3, #14
 80010a6:	b21b      	sxth	r3, r3
 80010a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffbf 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80010c2:	4603      	mov	r3, r0
 80010c4:	03db      	lsls	r3, r3, #15
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	81fb      	strh	r3, [r7, #14]
	return pack;
 80010d2:	89fb      	ldrh	r3, [r7, #14]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 80010e8:	887b      	ldrh	r3, [r7, #2]
 80010ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010ee:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	4619      	mov	r1, r3
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ffa3 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80010fa:	4603      	mov	r3, r0
 80010fc:	03db      	lsls	r3, r3, #15
 80010fe:	b21a      	sxth	r2, r3
 8001100:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001104:	4313      	orrs	r3, r2
 8001106:	b21b      	sxth	r3, r3
 8001108:	81fb      	strh	r3, [r7, #14]
	return pack;
 800110a:	89fb      	ldrh	r3, [r7, #14]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 800112a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112e:	e016      	b.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 8001130:	887b      	ldrh	r3, [r7, #2]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff83 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	13db      	asrs	r3, r3, #15
 8001142:	429a      	cmp	r2, r3
 8001144:	bf14      	ite	ne
 8001146:	2301      	movne	r3, #1
 8001148:	2300      	moveq	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	e003      	b.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 8001156:	887b      	ldrh	r3, [r7, #2]
 8001158:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 8001170:	2201      	movs	r2, #1
 8001172:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ff87 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 800117c:	4603      	mov	r3, r0
 800117e:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	4619      	mov	r1, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f85d 	bl	8001244 <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800118a:	2100      	movs	r1, #0
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ffa5 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8001192:	4603      	mov	r3, r0
 8001194:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 8001196:	89bb      	ldrh	r3, [r7, #12]
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f87c 	bl	8001298 <_ZN7AS5048A21SPITransmitReceive16_Et>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffb5 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 80011aa:	4603      	mov	r3, r0
 80011ac:	817b      	strh	r3, [r7, #10]
	return raw_angle_val * 360.0 / DATA_MAX;
 80011ae:	897b      	ldrh	r3, [r7, #10]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9df 	bl	8000574 <__aeabi_i2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <_ZN7AS5048A10ReadAngle_Ev+0x90>)
 80011bc:	f7ff fa44 	bl	8000648 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	a309      	add	r3, pc, #36	; (adr r3, 80011f0 <_ZN7AS5048A10ReadAngle_Ev+0x88>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	f7ff fb65 	bl	800089c <__aeabi_ddiv>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd0d 	bl	8000bf8 <__aeabi_d2f>
 80011de:	4603      	mov	r3, r0
 80011e0:	ee07 3a90 	vmov	s15, r3
}
 80011e4:	eeb0 0a67 	vmov.f32	s0, s15
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40cfff80 	.word	0x40cfff80
 80011f8:	40768000 	.word	0x40768000

080011fc <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 8001204:	2201      	movs	r2, #1
 8001206:	2101      	movs	r1, #1
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff3e 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 800120e:	4603      	mov	r3, r0
 8001210:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f814 	bl	8001244 <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff5c 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8001224:	4603      	mov	r3, r0
 8001226:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001228:	89bb      	ldrh	r3, [r7, #12]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f833 	bl	8001298 <_ZN7AS5048A21SPITransmitReceive16_Et>
 8001232:	4603      	mov	r3, r0
 8001234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001238:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 800123a:	897b      	ldrh	r3, [r7, #10]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6918      	ldr	r0, [r3, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8a9b      	ldrh	r3, [r3, #20]
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	f005 fbc5 	bl	80069f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68d8      	ldr	r0, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	f107 010c 	add.w	r1, r7, #12
 800127a:	2202      	movs	r2, #2
 800127c:	f006 fe65 	bl	8007f4a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6918      	ldr	r0, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	8a9b      	ldrh	r3, [r3, #20]
 8001288:	2201      	movs	r2, #1
 800128a:	4619      	mov	r1, r3
 800128c:	f005 fbb4 	bl	80069f8 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af02      	add	r7, sp, #8
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6918      	ldr	r0, [r3, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	8a9b      	ldrh	r3, [r3, #20]
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	f005 fb9b 	bl	80069f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68d8      	ldr	r0, [r3, #12]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f107 0208 	add.w	r2, r7, #8
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2302      	movs	r3, #2
 80012d6:	f006 ffa6 	bl	8008226 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6918      	ldr	r0, [r3, #16]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	8a9b      	ldrh	r3, [r3, #20]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4619      	mov	r1, r3
 80012e6:	f005 fb87 	bl	80069f8 <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 80012ee:	7a3b      	ldrb	r3, [r7, #8]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21b      	sxth	r3, r3
 80012fc:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 80012fe:	7a7b      	ldrb	r3, [r7, #9]
 8001300:	b29a      	uxth	r2, r3
 8001302:	89fb      	ldrh	r3, [r7, #14]
 8001304:	4313      	orrs	r3, r2
 8001306:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001308:	89fb      	ldrh	r3, [r7, #14]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 8001314:	b5b0      	push	{r4, r5, r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0 * floor(raw_angle / 360.0);
 8001320:	6838      	ldr	r0, [r7, #0]
 8001322:	f7ff f939 	bl	8000598 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff f934 	bl	8000598 <__aeabi_f2d>
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001336:	f7ff fab1 	bl	800089c <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	ec43 2b17 	vmov	d7, r2, r3
 8001342:	eeb0 0a47 	vmov.f32	s0, s14
 8001346:	eef0 0a67 	vmov.f32	s1, s15
 800134a:	f00c ffb9 	bl	800e2c0 <floor>
 800134e:	ec51 0b10 	vmov	r0, r1, d0
 8001352:	f04f 0200 	mov.w	r2, #0
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001358:	f7ff f976 	bl	8000648 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4620      	mov	r0, r4
 8001362:	4629      	mov	r1, r5
 8001364:	f7fe ffb8 	bl	80002d8 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc42 	bl	8000bf8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	60fb      	str	r3, [r7, #12]
	if (wrapped_angle < 0) {
 8001378:	edd7 7a03 	vldr	s15, [r7, #12]
 800137c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d507      	bpl.n	8001396 <_ZN7Encoder10WrapAngle_Ef+0x82>
		wrapped_angle += 360.0;
 8001386:	edd7 7a03 	vldr	s15, [r7, #12]
 800138a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013ac <_ZN7Encoder10WrapAngle_Ef+0x98>
 800138e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001392:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	ee07 3a90 	vmov	s15, r3
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40768000 	.word	0x40768000
 80013ac:	43b40000 	.word	0x43b40000

080013b0 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 80013bc:	ed97 0a00 	vldr	s0, [r7]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffa7 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff8d 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 8001414:	ed97 0a00 	vldr	s0, [r7]
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff7b 	bl	8001314 <_ZN7Encoder10WrapAngle_Ef>
 800141e:	eef0 7a40 	vmov.f32	s15, s0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>:
 * is being transferred to a buffer via DMA.
 * @param[in] adc_counts_u_in Reference pointing to location in ADC buffer for phase U current.
 * @param[in] adc_counts_v_in Reference pointing to location in ADC buffer for phase V current.
 * @param[in] adc_counts_w_in Reference pointing to location in ADC buffer for phase W current.
 */
void CurrentSensor::LinkToADC(volatile uint16_t* adc_counts_u_in, volatile uint16_t* adc_counts_v_in, volatile uint16_t* adc_counts_w_in) {
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
	adc_counts_u_ = adc_counts_u_in;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	61da      	str	r2, [r3, #28]
	adc_counts_v_ = adc_counts_v_in;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	621a      	str	r2, [r3, #32]
	adc_counts_w_ = adc_counts_w_in;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_ZN13CurrentSensor12ReadCurrentsEv>:

void CurrentSensor::ReadCurrents() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	i_u = (static_cast<float>(*adc_counts_u_));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	ee07 3a90 	vmov	s15, r3
 8001470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a00 	vstr	s15, [r3]
	i_u /= adc_max_counts_;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 6a00 	vldr	s13, [r3]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800148c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edc3 7a00 	vstr	s15, [r3]
	i_u *= adc_max_volts_;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	ed93 7a00 	vldr	s14, [r3]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edd3 7a04 	vldr	s15, [r3, #16]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	i_u -= adc_offset_volts_;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	ed93 7a00 	vldr	s14, [r3]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edc3 7a00 	vstr	s15, [r3]
	i_u /= adc_gain_;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 6a00 	vldr	s13, [r3]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	ed93 7a06 	vldr	s14, [r3, #24]
 80014ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	i_u = (static_cast<float>(*adc_counts_u_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	899b      	ldrh	r3, [r3, #12]
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 7a05 	vldr	s15, [r3, #20]
 8001508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	edc3 7a00 	vstr	s15, [r3]
	i_v = (static_cast<float>(*adc_counts_v_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	ee07 3a90 	vmov	s15, r3
 8001528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	899b      	ldrh	r3, [r3, #12]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001542:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a05 	vldr	s15, [r3, #20]
 800154c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	ed93 7a06 	vldr	s14, [r3, #24]
 8001556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edc3 7a01 	vstr	s15, [r3, #4]
	i_w = (static_cast<float>(*adc_counts_w_) / adc_max_counts_ * adc_max_volts_ - adc_offset_volts_) / adc_gain_;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	b29b      	uxth	r3, r3
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	899b      	ldrh	r3, [r3, #12]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800157c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a04 	vldr	s15, [r3, #16]
 8001586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001590:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ed93 7a06 	vldr	s14, [r3, #24]
 800159a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_ZN10HalfBridge11get_op_modeEv>:

/**
 * @brief Returns the operation mode of the half-bridge.
 * @retval Halfbridge operation mode.
 */
HalfBridge::OpMode HalfBridge::get_op_mode() {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	return op_mode_;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7b1b      	ldrb	r3, [r3, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_ZN5Motor4InitEv>:
 */

#include "motor.hh"
#include "foc_utils.hh"

void Motor::Init() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	// Initialize all the lil bits
	enc_->Init();
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4610      	mov	r0, r2
 80015de:	4798      	blx	r3
	//	enc_.set_zero_angle(); // startup position is the zero position
	driver_->Init(); // start driver PWM
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f932 	bl	800184e <_ZN11MotorDriver4InitEv>
	last_update_micros_ = GetTickMicros();
 80015ea:	f000 fe17 	bl	800221c <_Z13GetTickMicrosv>
 80015ee:	4602      	mov	r2, r0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30

	// initialization sequence for motor will go here

}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_ZN5Motor10SetCurrentEfff>:
 * @brief Set target phase currents, set motor to current control mode.
 * @param[in] i_u Target current for phase U, in Amps.
 * @param[in] i_v Target current for phase V, in Amps.
 * @param[in] i_w Target current for phase W, in Amps.
 */
void Motor::SetCurrent(float i_u, float i_v, float i_w) {
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	ed87 0a02 	vstr	s0, [r7, #8]
 8001608:	edc7 0a01 	vstr	s1, [r7, #4]
 800160c:	ed87 1a00 	vstr	s2, [r7]
	mode_ = CURRENT_CONTROL;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2200      	movs	r2, #0
 8001614:	751a      	strb	r2, [r3, #20]
	// Simple open loop control with voltage setpoints.
	v_u_cmd_ = i_u * config_.phase_resistance;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	ed93 7a01 	vldr	s14, [r3, #4]
 800161c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	v_v_cmd_ = i_v * config_.phase_resistance;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001630:	edd7 7a01 	vldr	s15, [r7, #4]
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	v_w_cmd_ = i_w * config_.phase_resistance;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a01 	vldr	s14, [r3, #4]
 8001644:	edd7 7a00 	vldr	s15, [r7]
 8001648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <_ZN5Motor6UpdateEv>:
void Motor::SetPosition(float theta) {
	mode_ = POSITION_CONTROL;
	theta_cmd_ = theta;
}

void Motor::Update() {
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	uint32_t curr_time_micros = GetTickMicros();
 8001668:	f000 fdd8 	bl	800221c <_Z13GetTickMicrosv>
 800166c:	60f8      	str	r0, [r7, #12]
	float ms_since_last_update = (static_cast<float>(curr_time_micros - last_update_micros_)) / 1000.0f;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800167e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8001818 <_ZN5Motor6UpdateEv+0x1b8>
 8001682:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001686:	edc7 7a02 	vstr	s15, [r7, #8]

	// Read the encoder
	enc_->Update();
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	3304      	adds	r3, #4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4610      	mov	r0, r2
 800169a:	4798      	blx	r3
	theta_meas_ = NormalizeAngle(ElectricalAngle(enc_->get_angle(), config_.num_pole_pairs));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fe99 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	881b      	ldrh	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f000 ff60 	bl	8002578 <_Z15ElectricalAngleft>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	f000 ff72 	bl	80025a8 <_Z14NormalizeAnglef>
 80016c4:	eef0 7a40 	vmov.f32	s15, s0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Read the current sensors
	csense_->ReadCurrents();
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fec2 	bl	800145c <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_meas_ = csense_->i_u;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
	i_v_meas_ = csense_->i_v;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	661a      	str	r2, [r3, #96]	; 0x60
	i_w_meas_ = csense_->i_w;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	665a      	str	r2, [r3, #100]	; 0x64

	switch(mode_) {
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7d1b      	ldrb	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d061      	beq.n	80017c2 <_ZN5Motor6UpdateEv+0x162>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f2c0 8082 	blt.w	8001808 <_ZN5Motor6UpdateEv+0x1a8>
 8001704:	3b01      	subs	r3, #1
 8001706:	2b02      	cmp	r3, #2
 8001708:	d87e      	bhi.n	8001808 <_ZN5Motor6UpdateEv+0x1a8>
		// Set velocity to control position.
	case VELOCITY_CONTROL:
		// Set torque to control velocity.
	case TORQUE_CONTROL:
		// Use DQZ transform to transform measured phase currents into rotating reference frame.
		TransFwdDQZ(theta_meas_, i_u_meas_, i_v_meas_, i_w_meas_, i_d_meas_, i_q_meas_, i_z_meas_);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3358      	adds	r3, #88	; 0x58
 8001732:	461a      	mov	r2, r3
 8001734:	eef0 1a46 	vmov.f32	s3, s12
 8001738:	eeb0 1a66 	vmov.f32	s2, s13
 800173c:	eef0 0a47 	vmov.f32	s1, s14
 8001740:	eeb0 0a67 	vmov.f32	s0, s15
 8001744:	f000 fdce 	bl	80022e4 <_Z11TransFwdDQZffffRfS_S_>

		// Set voltages in rotating reference frame to control currents in rotating reference frame.
		v_d_cmd_ = 0; // TODO: add PID controller for i_d error for true FOC control.
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	669a      	str	r2, [r3, #104]	; 0x68
		v_q_cmd_ = pid_torque_->Update(i_q_cmd_ - i_q_meas_, ms_since_last_update);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	edd7 0a02 	vldr	s1, [r7, #8]
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	4610      	mov	r0, r2
 800176e:	f000 fc33 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		v_z_cmd_ = 0;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	671a      	str	r2, [r3, #112]	; 0x70

		// Convert rotating reference frame voltages back into stator voltages.
		TransRevDQZ(theta_meas_, v_d_cmd_, v_q_cmd_, v_z_cmd_, v_u_cmd_, v_v_cmd_, v_w_cmd_);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f103 0074 	add.w	r0, r3, #116	; 0x74
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	337c      	adds	r3, #124	; 0x7c
 80017ac:	461a      	mov	r2, r3
 80017ae:	eef0 1a46 	vmov.f32	s3, s12
 80017b2:	eeb0 1a66 	vmov.f32	s2, s13
 80017b6:	eef0 0a47 	vmov.f32	s1, s14
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	f000 fe37 	bl	8002430 <_Z11TransRevDQZffffRfS_S_>

	case CURRENT_CONTROL:
		// Set voltage (duty cycle) to control current.
		// Open-loop PWM duty cycle control.
		driver_->SetDutyCycle(
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	699a      	ldr	r2, [r3, #24]
			v_u_cmd_ / config_.power_supply_voltage,
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 80017d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
			v_v_cmd_ / config_.power_supply_voltage,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 80017e2:	ee87 6a27 	vdiv.f32	s12, s14, s15
			v_w_cmd_ / config_.power_supply_voltage);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 7a04 	vldr	s15, [r3, #16]
		driver_->SetDutyCycle(
 80017f2:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80017f6:	eeb0 1a65 	vmov.f32	s2, s11
 80017fa:	eef0 0a46 	vmov.f32	s1, s12
 80017fe:	eeb0 0a66 	vmov.f32	s0, s13
 8001802:	4610      	mov	r0, r2
 8001804:	f000 f85b 	bl	80018be <_ZN11MotorDriver12SetDutyCycleEfff>
	}

	// Save as a snack for later.
	last_update_micros_ = curr_time_micros;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	631a      	str	r2, [r3, #48]	; 0x30

}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	447a0000 	.word	0x447a0000

0800181c <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>:
void MotorDriver::LinkToPWM(
	TIM_HandleTypeDef * timer,
	uint32_t timer_u_channel_id,
	uint32_t timer_v_channel_id,
	uint32_t timer_w_channel_id)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
	timer_ = timer;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	619a      	str	r2, [r3, #24]
	timer_u_channel_id_ = timer_u_channel_id;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	61da      	str	r2, [r3, #28]
	timer_v_channel_id_ = timer_v_channel_id;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	621a      	str	r2, [r3, #32]
	timer_w_channel_id_ = timer_w_channel_id;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_ZN11MotorDriver4InitEv>:

/**
 * @brief Start PWM timers.
 */
void MotorDriver::Init() {
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_, timer_u_channel_id_); // get the party started
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699a      	ldr	r2, [r3, #24]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f007 f9e5 	bl	8008c30 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_u_channel_id_); // get the (complementary) party started
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4619      	mov	r1, r3
 8001870:	4610      	mov	r0, r2
 8001872:	f008 fb55 	bl	8009f20 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_v_channel_id_); // get the party started
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f007 f9d5 	bl	8008c30 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_v_channel_id_); // get the (complementary) party started
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f008 fb45 	bl	8009f20 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(timer_, timer_w_channel_id_); // get the party started
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	699a      	ldr	r2, [r3, #24]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f007 f9c5 	bl	8008c30 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_w_channel_id_); // get the (complementary) party started
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	4619      	mov	r1, r3
 80018b0:	4610      	mov	r0, r2
 80018b2:	f008 fb35 	bl	8009f20 <HAL_TIMEx_PWMN_Start>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <_ZN11MotorDriver12SetDutyCycleEfff>:

/**
 *
 */
void MotorDriver::SetDutyCycle(float duty_u, float duty_v, float duty_w) {
 80018be:	b480      	push	{r7}
 80018c0:	b085      	sub	sp, #20
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	60f8      	str	r0, [r7, #12]
 80018c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80018ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80018ce:	ed87 1a00 	vstr	s2, [r7]
	duty_u_ = CONSTRAIN(duty_u, duty_min_, duty_max_);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d502      	bpl.n	80018ec <_ZN11MotorDriver12SetDutyCycleEfff+0x2e>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	e00d      	b.n	8001908 <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80018f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd02      	ble.n	8001906 <_ZN11MotorDriver12SetDutyCycleEfff+0x48>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	e000      	b.n	8001908 <_ZN11MotorDriver12SetDutyCycleEfff+0x4a>
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6013      	str	r3, [r2, #0]
	duty_v_ = CONSTRAIN(duty_v, duty_min_, duty_max_);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001912:	ed97 7a01 	vldr	s14, [r7, #4]
 8001916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d502      	bpl.n	8001926 <_ZN11MotorDriver12SetDutyCycleEfff+0x68>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	e00d      	b.n	8001942 <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a03 	vldr	s15, [r3, #12]
 800192c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001930:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	dd02      	ble.n	8001940 <_ZN11MotorDriver12SetDutyCycleEfff+0x82>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	e000      	b.n	8001942 <_ZN11MotorDriver12SetDutyCycleEfff+0x84>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	6053      	str	r3, [r2, #4]
	duty_w_ = CONSTRAIN(duty_w, duty_min_, duty_max_);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 7a04 	vldr	s15, [r3, #16]
 800194c:	ed97 7a00 	vldr	s14, [r7]
 8001950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d502      	bpl.n	8001960 <_ZN11MotorDriver12SetDutyCycleEfff+0xa2>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	e00d      	b.n	800197c <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	edd3 7a03 	vldr	s15, [r3, #12]
 8001966:	ed97 7a00 	vldr	s14, [r7]
 800196a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	dd02      	ble.n	800197a <_ZN11MotorDriver12SetDutyCycleEfff+0xbc>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	e000      	b.n	800197c <_ZN11MotorDriver12SetDutyCycleEfff+0xbe>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	6093      	str	r3, [r2, #8]

	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_u_channel_id_, static_cast<uint16_t>(duty_u_ * pulse_max_));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d114      	bne.n	80019b2 <_ZN11MotorDriver12SetDutyCycleEfff+0xf4>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	ed93 7a00 	vldr	s14, [r3]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8a9b      	ldrh	r3, [r3, #20]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a2:	ee17 3a90 	vmov	r3, s15
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
 80019b0:	e077      	b.n	8001aa2 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d114      	bne.n	80019e4 <_ZN11MotorDriver12SetDutyCycleEfff+0x126>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8a9b      	ldrh	r3, [r3, #20]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
 80019e2:	e05e      	b.n	8001aa2 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d114      	bne.n	8001a16 <_ZN11MotorDriver12SetDutyCycleEfff+0x158>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	ed93 7a00 	vldr	s14, [r3]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8a9b      	ldrh	r3, [r3, #20]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a14:	e045      	b.n	8001aa2 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	2b0c      	cmp	r3, #12
 8001a1c:	d114      	bne.n	8001a48 <_ZN11MotorDriver12SetDutyCycleEfff+0x18a>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8a9b      	ldrh	r3, [r3, #20]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a38:	ee17 3a90 	vmov	r3, s15
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
 8001a46:	e02c      	b.n	8001aa2 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d114      	bne.n	8001a7a <_ZN11MotorDriver12SetDutyCycleEfff+0x1bc>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8a9b      	ldrh	r3, [r3, #20]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	ee17 3a90 	vmov	r3, s15
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58
 8001a78:	e013      	b.n	8001aa2 <_ZN11MotorDriver12SetDutyCycleEfff+0x1e4>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	ed93 7a00 	vldr	s14, [r3]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8a9b      	ldrh	r3, [r3, #20]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_v_channel_id_, static_cast<uint16_t>(duty_v_ * pulse_max_));
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d114      	bne.n	8001ad4 <_ZN11MotorDriver12SetDutyCycleEfff+0x216>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8a9b      	ldrh	r3, [r3, #20]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ad2:	e077      	b.n	8001bc4 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d114      	bne.n	8001b06 <_ZN11MotorDriver12SetDutyCycleEfff+0x248>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8a9b      	ldrh	r3, [r3, #20]
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
 8001b04:	e05e      	b.n	8001bc4 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d114      	bne.n	8001b38 <_ZN11MotorDriver12SetDutyCycleEfff+0x27a>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8a9b      	ldrh	r3, [r3, #20]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b36:	e045      	b.n	8001bc4 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	2b0c      	cmp	r3, #12
 8001b3e:	d114      	bne.n	8001b6a <_ZN11MotorDriver12SetDutyCycleEfff+0x2ac>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8a9b      	ldrh	r3, [r3, #20]
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b5a:	ee17 3a90 	vmov	r3, s15
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
 8001b68:	e02c      	b.n	8001bc4 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d114      	bne.n	8001b9c <_ZN11MotorDriver12SetDutyCycleEfff+0x2de>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8a9b      	ldrh	r3, [r3, #20]
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b8c:	ee17 3a90 	vmov	r3, s15
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
 8001b9a:	e013      	b.n	8001bc4 <_ZN11MotorDriver12SetDutyCycleEfff+0x306>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8a9b      	ldrh	r3, [r3, #20]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bb6:	ee17 3a90 	vmov	r3, s15
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	65da      	str	r2, [r3, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d114      	bne.n	8001bf6 <_ZN11MotorDriver12SetDutyCycleEfff+0x338>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8a9b      	ldrh	r3, [r3, #20]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be6:	ee17 3a90 	vmov	r3, s15
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bf4:	e077      	b.n	8001ce6 <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d114      	bne.n	8001c28 <_ZN11MotorDriver12SetDutyCycleEfff+0x36a>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8a9b      	ldrh	r3, [r3, #20]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c26:	e05e      	b.n	8001ce6 <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d114      	bne.n	8001c5a <_ZN11MotorDriver12SetDutyCycleEfff+0x39c>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8a9b      	ldrh	r3, [r3, #20]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c4a:	ee17 3a90 	vmov	r3, s15
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c58:	e045      	b.n	8001ce6 <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d114      	bne.n	8001c8c <_ZN11MotorDriver12SetDutyCycleEfff+0x3ce>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8a9b      	ldrh	r3, [r3, #20]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7c:	ee17 3a90 	vmov	r3, s15
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c8a:	e02c      	b.n	8001ce6 <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d114      	bne.n	8001cbe <_ZN11MotorDriver12SetDutyCycleEfff+0x400>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8a9b      	ldrh	r3, [r3, #20]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cae:	ee17 3a90 	vmov	r3, s15
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001cbc:	e013      	b.n	8001ce6 <_ZN11MotorDriver12SetDutyCycleEfff+0x428>
	__HAL_TIM_SET_COMPARE(timer_, timer_w_channel_id_, static_cast<uint16_t>(duty_w_ * pulse_max_));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8a9b      	ldrh	r3, [r3, #20]
 8001cc8:	ee07 3a90 	vmov	s15, r3
 8001ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN9STSPIN8304InitEv>:
const float kDutyCycleMin = 0.05f; // allow current measurement during D

/**
 * @brief Initializes the relevant channel of the STSPIN320 half-bridge.
 */
void STSPIN830::Init() {
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	pid_last_update_us = GetTickMicros(); // enable time intervals to be passed to PID controller
 8001cfa:	f000 fa8f 	bl	800221c <_Z13GetTickMicrosv>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	621a      	str	r2, [r3, #32]
	HAL_TIM_PWM_Start(timer_, timer_channel_id_); // get the party started
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f006 ff8e 	bl	8008c30 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(timer_, timer_channel_id_); // get the (complementary) party started
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f008 f8fe 	bl	8009f20 <HAL_TIMEx_PWMN_Start>
	is_initialized_ = true;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN9STSPIN8306UpdateEv>:

/**
 * Updates the PWM period of the half bridge based on the measured current. Should be called by the ConversionCplt callback
 * of the ADC, which should in turn have been called by a reset trigger event from the half bridge timer.
 */
void STSPIN830::Update() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if (!is_initialized_) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001d42:	f083 0301 	eor.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 80e6 	bne.w	8001f1a <_ZN9STSPIN8306UpdateEv+0x1e6>
		// Don't run until the important stuff is set up!
		return;
	}
	// Calculate current
	float curr_sense_adc_voltage = static_cast<float>(curr_sense_adc_counts_) / kADCMaxCounts * kADCMaxVolts;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	ee07 3a90 	vmov	s15, r3
 8001d5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d5e:	eddf 6a71 	vldr	s13, [pc, #452]	; 8001f24 <_ZN9STSPIN8306UpdateEv+0x1f0>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001f28 <_ZN9STSPIN8306UpdateEv+0x1f4>
 8001d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6e:	edc7 7a03 	vstr	s15, [r7, #12]
	current_ma_ = (curr_sense_adc_voltage - kADCOffsetVolts) / kADCGain * 1000;
 8001d72:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d76:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001f2c <_ZN9STSPIN8306UpdateEv+0x1f8>
 8001d7a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d7e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001f30 <_ZN9STSPIN8306UpdateEv+0x1fc>
 8001d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d86:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001f34 <_ZN9STSPIN8306UpdateEv+0x200>
 8001d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	edc3 7a07 	vstr	s15, [r3, #28]
	// TODO: set break bit for the PWM if current too large, enter FAULT state
	// Update target current
	uint32_t curr_time_us = GetTickMicros();
 8001d94:	f000 fa42 	bl	800221c <_Z13GetTickMicrosv>
 8001d98:	60b8      	str	r0, [r7, #8]
	// Calculate duty cycle for closed loop control
	duty_cycle_ -= pid.Update(target_current_ - current_ma_, (curr_time_us - pid_last_update_us) / 1000.0f);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc0:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8001f34 <_ZN9STSPIN8306UpdateEv+0x200>
 8001dc4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dc8:	eef0 0a66 	vmov.f32	s1, s13
 8001dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	f000 f901 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8001dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001de0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (duty_cycle_ > kDutyCycleMax) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001df0:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001f38 <_ZN9STSPIN8306UpdateEv+0x204>
 8001df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	dd03      	ble.n	8001e06 <_ZN9STSPIN8306UpdateEv+0xd2>
		duty_cycle_ = kDutyCycleMax;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <_ZN9STSPIN8306UpdateEv+0x208>)
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
 8001e04:	e00c      	b.n	8001e20 <_ZN9STSPIN8306UpdateEv+0xec>
	} else if (duty_cycle_ < kDutyCycleMin) {
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e0c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001f40 <_ZN9STSPIN8306UpdateEv+0x20c>
 8001e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d502      	bpl.n	8001e20 <_ZN9STSPIN8306UpdateEv+0xec>
		duty_cycle_ = kDutyCycleMin;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a49      	ldr	r2, [pc, #292]	; (8001f44 <_ZN9STSPIN8306UpdateEv+0x210>)
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	pid_last_update_us = curr_time_us;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	621a      	str	r2, [r3, #32]
	// Set duty cycle: note that CH and CHN are in HIGH polarity; counter expiration triggers low side current sense
	__HAL_TIM_SET_COMPARE(timer_, timer_channel_id_, static_cast<uint16_t>(duty_cycle_ * kPulseMax));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <_ZN9STSPIN8306UpdateEv+0x11c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e34:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e40:	ee17 3a90 	vmov	r3, s15
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e4e:	e065      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d110      	bne.n	8001e7a <_ZN9STSPIN8306UpdateEv+0x146>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e5e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e6a:	ee17 3a90 	vmov	r3, s15
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
 8001e78:	e050      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d110      	bne.n	8001ea4 <_ZN9STSPIN8306UpdateEv+0x170>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e88:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e94:	ee17 3a90 	vmov	r3, s15
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ea2:	e03b      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	2b0c      	cmp	r3, #12
 8001eaa:	d110      	bne.n	8001ece <_ZN9STSPIN8306UpdateEv+0x19a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001eb2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebe:	ee17 3a90 	vmov	r3, s15
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40
 8001ecc:	e026      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d110      	bne.n	8001ef8 <_ZN9STSPIN8306UpdateEv+0x1c4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001edc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001ee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee8:	ee17 3a90 	vmov	r3, s15
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ef6:	e011      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001efe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001f48 <_ZN9STSPIN8306UpdateEv+0x214>
 8001f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f18:	e000      	b.n	8001f1c <_ZN9STSPIN8306UpdateEv+0x1e8>
		return;
 8001f1a:	bf00      	nop
}
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	457ff000 	.word	0x457ff000
 8001f28:	40533333 	.word	0x40533333
 8001f2c:	3fc7ae14 	.word	0x3fc7ae14
 8001f30:	3f014121 	.word	0x3f014121
 8001f34:	447a0000 	.word	0x447a0000
 8001f38:	3f733333 	.word	0x3f733333
 8001f3c:	3f733333 	.word	0x3f733333
 8001f40:	3d4ccccd 	.word	0x3d4ccccd
 8001f44:	3d4ccccd 	.word	0x3d4ccccd
 8001f48:	461c4000 	.word	0x461c4000

08001f4c <_ZN13PIDControllerC1Efffff>:
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] ramp_in Maximum ramp (derivative) of output.
 * @param[in] limit_in Maximum value of output.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, float ramp_in = 0.0f, float limit_in = kDefaultLimit)
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6178      	str	r0, [r7, #20]
 8001f54:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f58:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f5c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f60:	edc7 1a01 	vstr	s3, [r7, #4]
 8001f64:	ed87 2a00 	vstr	s4, [r7]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	609a      	str	r2, [r3, #8]
	, ramp(ramp_in >= 0.0f ? ramp_in : 0.0f) // don't allow negative ramp values
 8001f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f86:	db01      	blt.n	8001f8c <_ZN13PIDControllerC1Efffff+0x40>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	e001      	b.n	8001f90 <_ZN13PIDControllerC1Efffff+0x44>
 8001f8c:	f04f 0300 	mov.w	r3, #0
	, limit(limit_in > 0.0f ? limit_in : kDefaultLimit){} // don't allow zero or negative limit values
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	60d3      	str	r3, [r2, #12]
 8001f94:	edd7 7a00 	vldr	s15, [r7]
 8001f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa0:	dd01      	ble.n	8001fa6 <_ZN13PIDControllerC1Efffff+0x5a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	e000      	b.n	8001fa8 <_ZN13PIDControllerC1Efffff+0x5c>
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <_ZN13PIDControllerC1Efffff+0x88>)
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	6113      	str	r3, [r2, #16]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	371c      	adds	r7, #28
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	447a0000 	.word	0x447a0000

08001fd8 <_ZN13PIDController6UpdateEff>:
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 * @retval Calculated output response of PID controller.
 */
float PIDController::Update(float error, float ms_since_last_update) {
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fe4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (ms_since_last_update <= 0.0f) {
 8001fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	d802      	bhi.n	8001ffc <_ZN13PIDController6UpdateEff+0x24>
		return 0; // only allow updates with positive time steps (avoid errors for i, d)
 8001ff6:	f04f 0300 	mov.w	r3, #0
 8001ffa:	e0dc      	b.n	80021b6 <_ZN13PIDController6UpdateEff+0x1de>
	}

	float p = k_p * error;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ed97 7a02 	vldr	s14, [r7, #8]
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	edc7 7a06 	vstr	s15, [r7, #24]
	float i = i_error_ + k_i * ((error + prev_error_)*ms_since_last_update/2); // Tustin's method (trapezoidal integration)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	ed93 7a05 	vldr	s14, [r3, #20]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	edd3 6a01 	vldr	s13, [r3, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	ed93 6a07 	vldr	s12, [r3, #28]
 8002020:	edd7 7a02 	vldr	s15, [r7, #8]
 8002024:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002028:	edd7 7a01 	vldr	s15, [r7, #4]
 800202c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002030:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8002034:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc7 7a05 	vstr	s15, [r7, #20]
	i = CONSTRAIN(i, -limit, limit); // integral anti-windup
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 7a04 	vldr	s15, [r3, #16]
 800204a:	eef1 7a67 	vneg.f32	s15, s15
 800204e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	d505      	bpl.n	8002068 <_ZN13PIDController6UpdateEff+0x90>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002062:	eef1 7a67 	vneg.f32	s15, s15
 8002066:	e00f      	b.n	8002088 <_ZN13PIDController6UpdateEff+0xb0>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	edd3 7a04 	vldr	s15, [r3, #16]
 800206e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd03      	ble.n	8002084 <_ZN13PIDController6UpdateEff+0xac>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002082:	e001      	b.n	8002088 <_ZN13PIDController6UpdateEff+0xb0>
 8002084:	edd7 7a05 	vldr	s15, [r7, #20]
 8002088:	edc7 7a05 	vstr	s15, [r7, #20]
	float d = k_d * (error - prev_error_) / ms_since_last_update;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	edd3 7a07 	vldr	s15, [r3, #28]
 8002098:	edd7 6a02 	vldr	s13, [r7, #8]
 800209c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80020a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	edc7 7a04 	vstr	s15, [r7, #16]

	float output = CONSTRAIN(p + i + d, -limit, limit); // sum and constrain output
 80020b0:	ed97 7a06 	vldr	s14, [r7, #24]
 80020b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80020b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80020c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d505      	bpl.n	80020e4 <_ZN13PIDController6UpdateEff+0x10c>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 7a04 	vldr	s15, [r3, #16]
 80020de:	eef1 7a67 	vneg.f32	s15, s15
 80020e2:	e01f      	b.n	8002124 <_ZN13PIDController6UpdateEff+0x14c>
 80020e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80020e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80020fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002106:	dd03      	ble.n	8002110 <_ZN13PIDController6UpdateEff+0x138>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	edd3 7a04 	vldr	s15, [r3, #16]
 800210e:	e009      	b.n	8002124 <_ZN13PIDController6UpdateEff+0x14c>
 8002110:	ed97 7a06 	vldr	s14, [r7, #24]
 8002114:	edd7 7a05 	vldr	s15, [r7, #20]
 8002118:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002124:	edc7 7a07 	vstr	s15, [r7, #28]

	if (ramp > 0.0f) { // output ramp is defined
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	edd3 7a03 	vldr	s15, [r3, #12]
 800212e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002136:	dd34      	ble.n	80021a2 <_ZN13PIDController6UpdateEff+0x1ca>
		if (output - prev_output_ > ramp) {
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	edd3 7a06 	vldr	s15, [r3, #24]
 800213e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	edd3 7a03 	vldr	s15, [r3, #12]
 800214c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002154:	dd0a      	ble.n	800216c <_ZN13PIDController6UpdateEff+0x194>
			output = prev_output_ + ramp; // rail to positive ramp
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	ed93 7a06 	vldr	s14, [r3, #24]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002166:	edc7 7a07 	vstr	s15, [r7, #28]
 800216a:	e01a      	b.n	80021a2 <_ZN13PIDController6UpdateEff+0x1ca>
		} else if (output - prev_output_ < -ramp) {
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002172:	ed97 7a07 	vldr	s14, [r7, #28]
 8002176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002180:	eef1 7a67 	vneg.f32	s15, s15
 8002184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218c:	d509      	bpl.n	80021a2 <_ZN13PIDController6UpdateEff+0x1ca>
			output = prev_output_ - ramp; // rail to negative ramp
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	ed93 7a06 	vldr	s14, [r3, #24]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	edd3 7a03 	vldr	s15, [r3, #12]
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	edc7 7a07 	vstr	s15, [r7, #28]
		}
	}

	// save stuff for next round
	prev_error_ = error;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	61da      	str	r2, [r3, #28]
	prev_output_ = output;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	619a      	str	r2, [r3, #24]
	i_error_ = i;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	615a      	str	r2, [r3, #20]

	return output;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	ee07 3a90 	vmov	s15, r3
}
 80021ba:	eeb0 0a67 	vmov.f32	s0, s15
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	i_error_ = 0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
	prev_error_ = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
	prev_output_ = 0;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80021fe:	edc7 0a00 	vstr	s1, [r7]
 8002202:	edd7 0a00 	vldr	s1, [r7]
 8002206:	ed97 0a01 	vldr	s0, [r7, #4]
 800220a:	f00c f8d9 	bl	800e3c0 <fmodf>
 800220e:	eef0 7a40 	vmov.f32	s15, s0
 8002212:	eeb0 0a67 	vmov.f32	s0, s15
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_Z13GetTickMicrosv>:

/**
 * @brief Utility function that returns the current time in microseconds.
 * @retval Current uptime, in microseconds.
 */
uint32_t GetTickMicros() {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	return HAL_GetTick() * 1000 - SysTick->VAL / ((SysTick->LOAD + 1) / 1000);
 8002220:	f003 f9ac 	bl	800557c <HAL_GetTick>
 8002224:	4603      	mov	r3, r0
 8002226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800222a:	fb02 f203 	mul.w	r2, r2, r3
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <_Z13GetTickMicrosv+0x30>)
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <_Z13GetTickMicrosv+0x30>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	3301      	adds	r3, #1
 8002238:	4805      	ldr	r0, [pc, #20]	; (8002250 <_Z13GetTickMicrosv+0x34>)
 800223a:	fba0 0303 	umull	r0, r3, r0, r3
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	fbb1 f3f3 	udiv	r3, r1, r3
 8002244:	1ad3      	subs	r3, r2, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	e000e010 	.word	0xe000e010
 8002250:	10624dd3 	.word	0x10624dd3

08002254 <_Z8DegToRadf>:
/**
 * @brief Helper function that converts an angle in degrees to an angle in radians.
 * @param[in] Angle value in degrees.
 * @retval Angle value in radians.
 */
float DegToRad(float deg) {
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	ed87 0a01 	vstr	s0, [r7, #4]
	return deg / 360.0f * 2.0f * PI;
 800225e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002262:	eddf 6a08 	vldr	s13, [pc, #32]	; 8002284 <_Z8DegToRadf+0x30>
 8002266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800226a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800226e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002288 <_Z8DegToRadf+0x34>
 8002272:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002276:	eeb0 0a67 	vmov.f32	s0, s15
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	43b40000 	.word	0x43b40000
 8002288:	40490fdb 	.word	0x40490fdb

0800228c <_Z4sindf>:
/**
 * @brief Returns the sine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Sine of theta.
 */
float sind(float theta) {
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_sin_f32(DegToRad(theta));
 8002296:	ed97 0a01 	vldr	s0, [r7, #4]
 800229a:	f7ff ffdb 	bl	8002254 <_Z8DegToRadf>
 800229e:	eef0 7a40 	vmov.f32	s15, s0
 80022a2:	eeb0 0a67 	vmov.f32	s0, s15
 80022a6:	f00b ff59 	bl	800e15c <arm_sin_f32>
 80022aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_Z4cosdf>:
/**
 * @brief Returns thecosine of an angle (degrees).
 * @param[in] theta Angle, in degrees.
 * @retval Cosine of theta.
 */
float cosd(float theta) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	ed87 0a01 	vstr	s0, [r7, #4]
	return arm_cos_f32(DegToRad(theta));
 80022c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80022c6:	f7ff ffc5 	bl	8002254 <_Z8DegToRadf>
 80022ca:	eef0 7a40 	vmov.f32	s15, s0
 80022ce:	eeb0 0a67 	vmov.f32	s0, s15
 80022d2:	f00b ff87 	bl	800e1e4 <arm_cos_f32>
 80022d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80022da:	eeb0 0a67 	vmov.f32	s0, s15
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_Z11TransFwdDQZffffRfS_S_>:
 * @param[out] i_z Zero current magnitude in rotating reference frame.
 */
void TransFwdDQZ(
		float theta, float i_u, float i_v, float i_w,
		float& i_d, float& i_q, float& i_z)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	ed2d 8b02 	vpush	{d8}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	ed87 0a07 	vstr	s0, [r7, #28]
 80022f2:	edc7 0a06 	vstr	s1, [r7, #24]
 80022f6:	ed87 1a05 	vstr	s2, [r7, #20]
 80022fa:	edc7 1a04 	vstr	s3, [r7, #16]
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	i_d = sqrtf(2.0f/3.0f) * (cosd(theta)*i_u + cosd(theta-120.0f)*i_v + cosd(theta+120.0f)*i_w);
 8002304:	ed97 0a07 	vldr	s0, [r7, #28]
 8002308:	f7ff ffd6 	bl	80022b8 <_Z4cosdf>
 800230c:	eeb0 7a40 	vmov.f32	s14, s0
 8002310:	edd7 7a06 	vldr	s15, [r7, #24]
 8002314:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002318:	edd7 7a07 	vldr	s15, [r7, #28]
 800231c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002424 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8002320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002324:	eeb0 0a67 	vmov.f32	s0, s15
 8002328:	f7ff ffc6 	bl	80022b8 <_Z4cosdf>
 800232c:	eeb0 7a40 	vmov.f32	s14, s0
 8002330:	edd7 7a05 	vldr	s15, [r7, #20]
 8002334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002338:	ee38 8a27 	vadd.f32	s16, s16, s15
 800233c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002340:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002424 <_Z11TransFwdDQZffffRfS_S_+0x140>
 8002344:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002348:	eeb0 0a67 	vmov.f32	s0, s15
 800234c:	f7ff ffb4 	bl	80022b8 <_Z4cosdf>
 8002350:	eeb0 7a40 	vmov.f32	s14, s0
 8002354:	edd7 7a04 	vldr	s15, [r7, #16]
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002360:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002428 <_Z11TransFwdDQZffffRfS_S_+0x144>
 8002364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	edc3 7a00 	vstr	s15, [r3]
	i_q = sqrtf(2.0f/3.0f) * (-sind(theta)*i_u - sind(theta-120.0f)*i_v - sind(theta+120.0f)*i_w);
 800236e:	ed97 0a07 	vldr	s0, [r7, #28]
 8002372:	f7ff ff8b 	bl	800228c <_Z4sindf>
 8002376:	eef0 7a40 	vmov.f32	s15, s0
 800237a:	eeb1 7a67 	vneg.f32	s14, s15
 800237e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002382:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002386:	edd7 7a07 	vldr	s15, [r7, #28]
 800238a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002424 <_Z11TransFwdDQZffffRfS_S_+0x140>
 800238e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002392:	eeb0 0a67 	vmov.f32	s0, s15
 8002396:	f7ff ff79 	bl	800228c <_Z4sindf>
 800239a:	eeb0 7a40 	vmov.f32	s14, s0
 800239e:	edd7 7a05 	vldr	s15, [r7, #20]
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80023aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002424 <_Z11TransFwdDQZffffRfS_S_+0x140>
 80023b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	f7ff ff67 	bl	800228c <_Z4sindf>
 80023be:	eeb0 7a40 	vmov.f32	s14, s0
 80023c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80023c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ca:	ee78 7a67 	vsub.f32	s15, s16, s15
 80023ce:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002428 <_Z11TransFwdDQZffffRfS_S_+0x144>
 80023d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	edc3 7a00 	vstr	s15, [r3]
	i_z = sqrtf(2.0f/3.0f) * (sqrtf(2.0f)/2.0f*i_u + sqrtf(2.0f)/2.0f*i_v + sqrtf(2.0f)/2.0f*i_w);
 80023dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80023e0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800242c <_Z11TransFwdDQZffffRfS_S_+0x148>
 80023e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023ec:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800242c <_Z11TransFwdDQZffffRfS_S_+0x148>
 80023f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80023fc:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800242c <_Z11TransFwdDQZffffRfS_S_+0x148>
 8002400:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002428 <_Z11TransFwdDQZffffRfS_S_+0x144>
 800240c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	edc3 7a00 	vstr	s15, [r3]
}
 8002416:	bf00      	nop
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	ecbd 8b02 	vpop	{d8}
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	42f00000 	.word	0x42f00000
 8002428:	3f5105ec 	.word	0x3f5105ec
 800242c:	3f3504f3 	.word	0x3f3504f3

08002430 <_Z11TransRevDQZffffRfS_S_>:
 * @param[out] i_w Current in Z direction in XYZ reference frame.
 */
void TransRevDQZ(
		float theta, float i_d, float i_q, float i_z,
		float& i_u, float& i_v, float& i_w)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	ed2d 8b02 	vpush	{d8}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	ed87 0a07 	vstr	s0, [r7, #28]
 800243e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002442:	ed87 1a05 	vstr	s2, [r7, #20]
 8002446:	edc7 1a04 	vstr	s3, [r7, #16]
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	i_u = sqrtf(2.0f/3.0f) * (cosd(theta)*i_d - sind(theta)*i_q + sqrtf(2.0f)/2.0f*i_z);
 8002450:	ed97 0a07 	vldr	s0, [r7, #28]
 8002454:	f7ff ff30 	bl	80022b8 <_Z4cosdf>
 8002458:	eeb0 7a40 	vmov.f32	s14, s0
 800245c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002460:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002464:	ed97 0a07 	vldr	s0, [r7, #28]
 8002468:	f7ff ff10 	bl	800228c <_Z4sindf>
 800246c:	eeb0 7a40 	vmov.f32	s14, s0
 8002470:	edd7 7a05 	vldr	s15, [r7, #20]
 8002474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002478:	ee38 7a67 	vsub.f32	s14, s16, s15
 800247c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002480:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800256c <_Z11TransRevDQZffffRfS_S_+0x13c>
 8002484:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002570 <_Z11TransRevDQZffffRfS_S_+0x140>
 8002490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	edc3 7a00 	vstr	s15, [r3]
	i_v = sqrtf(2.0f/3.0f) * (cosd(theta-120.0f)*i_d - sind(theta-120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 800249a:	edd7 7a07 	vldr	s15, [r7, #28]
 800249e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002574 <_Z11TransRevDQZffffRfS_S_+0x144>
 80024a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024a6:	eeb0 0a67 	vmov.f32	s0, s15
 80024aa:	f7ff ff05 	bl	80022b8 <_Z4cosdf>
 80024ae:	eeb0 7a40 	vmov.f32	s14, s0
 80024b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024b6:	ee27 8a27 	vmul.f32	s16, s14, s15
 80024ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80024be:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002574 <_Z11TransRevDQZffffRfS_S_+0x144>
 80024c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	f7ff fedf 	bl	800228c <_Z4sindf>
 80024ce:	eeb0 7a40 	vmov.f32	s14, s0
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024da:	ee38 7a67 	vsub.f32	s14, s16, s15
 80024de:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800256c <_Z11TransRevDQZffffRfS_S_+0x13c>
 80024e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002570 <_Z11TransRevDQZffffRfS_S_+0x140>
 80024f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	edc3 7a00 	vstr	s15, [r3]
	i_w = sqrtf(2.0f/3.0f) * (cosd(theta+120.0f)*i_d - sind(theta+120.0f)*i_q + sqrtf(2.0f)/2.0f*i_z);
 80024fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002500:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002574 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002508:	eeb0 0a67 	vmov.f32	s0, s15
 800250c:	f7ff fed4 	bl	80022b8 <_Z4cosdf>
 8002510:	eeb0 7a40 	vmov.f32	s14, s0
 8002514:	edd7 7a06 	vldr	s15, [r7, #24]
 8002518:	ee27 8a27 	vmul.f32	s16, s14, s15
 800251c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002520:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002574 <_Z11TransRevDQZffffRfS_S_+0x144>
 8002524:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002528:	eeb0 0a67 	vmov.f32	s0, s15
 800252c:	f7ff feae 	bl	800228c <_Z4sindf>
 8002530:	eeb0 7a40 	vmov.f32	s14, s0
 8002534:	edd7 7a05 	vldr	s15, [r7, #20]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8002540:	edd7 7a04 	vldr	s15, [r7, #16]
 8002544:	eddf 6a09 	vldr	s13, [pc, #36]	; 800256c <_Z11TransRevDQZffffRfS_S_+0x13c>
 8002548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002570 <_Z11TransRevDQZffffRfS_S_+0x140>
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	edc3 7a00 	vstr	s15, [r3]
}
 800255e:	bf00      	nop
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	ecbd 8b02 	vpop	{d8}
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	3f3504f3 	.word	0x3f3504f3
 8002570:	3f5105ec 	.word	0x3f5105ec
 8002574:	42f00000 	.word	0x42f00000

08002578 <_Z15ElectricalAngleft>:
 * represents 360 degrees * num pole pairs rotation of the electrical angle.
 * @param[in] shaft_angle Shaft angle, in degrees.
 * @param[in] num_pole_pairs Number of pole pairs in the motor.
 * @retval Electrical angle, in degrees.
 */
float ElectricalAngle(float shaft_angle, uint16_t num_pole_pairs) {
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002582:	4603      	mov	r3, r0
 8002584:	807b      	strh	r3, [r7, #2]
	return shaft_angle * static_cast<float>(num_pole_pairs);
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002590:	edd7 7a01 	vldr	s15, [r7, #4]
 8002594:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <_Z14NormalizeAnglef>:
/**
 * @brief Normalizes the value of an angle in degrees to between 0-360 degrees.
 * @param[in] angle Angle to be normalized, in degrees.
 * @retval Normalized angle value between 0 and 360 degrees.
 */
float NormalizeAngle(float angle) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float normalized_angle = fmod(angle, 360.0f);
 80025b2:	eddf 0a0e 	vldr	s1, [pc, #56]	; 80025ec <_Z14NormalizeAnglef+0x44>
 80025b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80025ba:	f7ff fe1b 	bl	80021f4 <_ZSt4fmodff>
 80025be:	ed87 0a03 	vstr	s0, [r7, #12]
	return normalized_angle > 0 ? normalized_angle : normalized_angle + 360.0f;
 80025c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	dd02      	ble.n	80025d6 <_Z14NormalizeAnglef+0x2e>
 80025d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025d4:	e005      	b.n	80025e2 <_Z14NormalizeAnglef+0x3a>
 80025d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025da:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80025ec <_Z14NormalizeAnglef+0x44>
 80025de:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80025e2:	eeb0 0a67 	vmov.f32	s0, s15
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	43b40000 	.word	0x43b40000

080025f0 <_ZN13CurrentSensorC1Etfff>:
	float i_u{0}; // [A] current measured by current sensor
	float i_v{0};
	float i_w{0};

	// Consturctor
	CurrentSensor(
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6178      	str	r0, [r7, #20]
 80025f8:	460b      	mov	r3, r1
 80025fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80025fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8002602:	ed87 1a01 	vstr	s2, [r7, #4]
 8002606:	827b      	strh	r3, [r7, #18]
		float adc_offset_volts_in,
		float adc_gain_in)
		: adc_max_counts_(adc_max_counts_in)
		, adc_max_volts_(adc_max_volts_in)
		, adc_offset_volts_(adc_offset_volts_in)
		, adc_gain_(adc_gain_in){};
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	8a7a      	ldrh	r2, [r7, #18]
 8002624:	819a      	strh	r2, [r3, #12]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	611a      	str	r2, [r3, #16]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	615a      	str	r2, [r3, #20]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_ZN11MotorDriverC1Efft>:

	/**
	 * @brief MotorDriver constructor.
	 * @param[in] duty_max_in Float containing maximum allowable duty cycle.
	 */
	MotorDriver(float duty_max_in, float duty_min_in, uint16_t pulse_max_in)
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	ed87 0a02 	vstr	s0, [r7, #8]
 8002664:	edc7 0a01 	vstr	s1, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
		: duty_max_(duty_max_in)
		, duty_min_(duty_min_in)
		, pulse_max_(pulse_max_in){};
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	829a      	strh	r2, [r3, #20]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>:
	/**
	 * @brief Constructor for Motor object.
	 * @param[in] driver MotorDriver for motor.
	 * @param[in] enc Absolute position encoder for motor.
	 */
	Motor(
 80026bc:	b084      	sub	sp, #16
 80026be:	b4b0      	push	{r4, r5, r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	f107 001c 	add.w	r0, r7, #28
 80026ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		PIDController * pid_torque)
		: config_(config)
		, driver_(driver)
		, enc_(enc)
		, csense_(csense)
		, pid_torque_(pid_torque) {};
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	461d      	mov	r5, r3
 80026d2:	f107 041c 	add.w	r4, r7, #28
 80026d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	602b      	str	r3, [r5, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	751a      	strb	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e8:	619a      	str	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026ee:	61da      	str	r2, [r3, #28]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f4:	621a      	str	r2, [r3, #32]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	631a      	str	r2, [r3, #48]	; 0x30
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	635a      	str	r2, [r3, #52]	; 0x34
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	639a      	str	r2, [r3, #56]	; 0x38
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	63da      	str	r2, [r3, #60]	; 0x3c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	649a      	str	r2, [r3, #72]	; 0x48
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	64da      	str	r2, [r3, #76]	; 0x4c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	651a      	str	r2, [r3, #80]	; 0x50
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	659a      	str	r2, [r3, #88]	; 0x58
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	65da      	str	r2, [r3, #92]	; 0x5c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	661a      	str	r2, [r3, #96]	; 0x60
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	665a      	str	r2, [r3, #100]	; 0x64
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	669a      	str	r2, [r3, #104]	; 0x68
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	66da      	str	r2, [r3, #108]	; 0x6c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	671a      	str	r2, [r3, #112]	; 0x70
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	675a      	str	r2, [r3, #116]	; 0x74
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bcb0      	pop	{r4, r5, r7}
 80027b0:	b004      	add	sp, #16
 80027b2:	4770      	bx	lr

080027b4 <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b09c      	sub	sp, #112	; 0x70
 80027b8:	af06      	add	r7, sp, #24
	Motor::MotorConfig_t config = {
 80027ba:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <main_run+0x17c>)
 80027bc:	463c      	mov	r4, r7
 80027be:	461d      	mov	r5, r3
 80027c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	6023      	str	r3, [r4, #0]
		0.0f, // [nH] phase_inductance (unused)
		2.0f, // [A] current_limit
		DEFAULT_POWER_SUPPLY_VOLTAGE // [V] power_suply_voltage
	};

	const float kDutyMax = 0.95;
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <main_run+0x180>)
 80027ca:	657b      	str	r3, [r7, #84]	; 0x54
	const float kDutyMin = 0.05f;
 80027cc:	4b5a      	ldr	r3, [pc, #360]	; (8002938 <main_run+0x184>)
 80027ce:	653b      	str	r3, [r7, #80]	; 0x50
	const uint16_t kPulseMax = 10000;
 80027d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80027d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	MotorDriver * driver = new MotorDriver(kDutyMax, kDutyMin, kPulseMax);
 80027d8:	2028      	movs	r0, #40	; 0x28
 80027da:	f00b fd43 	bl	800e264 <_Znwj>
 80027de:	4603      	mov	r3, r0
 80027e0:	461c      	mov	r4, r3
 80027e2:	f242 7110 	movw	r1, #10000	; 0x2710
 80027e6:	eddf 0a55 	vldr	s1, [pc, #340]	; 800293c <main_run+0x188>
 80027ea:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8002940 <main_run+0x18c>
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff ff32 	bl	8002658 <_ZN11MotorDriverC1Efft>
 80027f4:	64bc      	str	r4, [r7, #72]	; 0x48
	driver->LinkToPWM(half_bridge_pwm_timer, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3);
 80027f6:	4b53      	ldr	r3, [pc, #332]	; (8002944 <main_run+0x190>)
 80027f8:	6819      	ldr	r1, [r3, #0]
 80027fa:	2308      	movs	r3, #8
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2304      	movs	r3, #4
 8002800:	2200      	movs	r2, #0
 8002802:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002804:	f7ff f80a 	bl	800181c <_ZN11MotorDriver9LinkToPWMEP17TIM_HandleTypeDefmmm>

	Encoder * enc = new AS5048A(encoder_hspi, ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin);
 8002808:	201c      	movs	r0, #28
 800280a:	f00b fd2b 	bl	800e264 <_Znwj>
 800280e:	4603      	mov	r3, r0
 8002810:	461c      	mov	r4, r3
 8002812:	4b4d      	ldr	r3, [pc, #308]	; (8002948 <main_run+0x194>)
 8002814:	6819      	ldr	r1, [r3, #0]
 8002816:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2310      	movs	r3, #16
 800281e:	4a4b      	ldr	r2, [pc, #300]	; (800294c <main_run+0x198>)
 8002820:	4620      	mov	r0, r4
 8002822:	f7fe fbcd 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>
 8002826:	647c      	str	r4, [r7, #68]	; 0x44

	const float kADCMaxCounts = 0xFFF; // 12-bit ADC
 8002828:	4b49      	ldr	r3, [pc, #292]	; (8002950 <main_run+0x19c>)
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
	const float kADCMaxVolts = 3.3f; // VDD rail of MCU
 800282c:	4b49      	ldr	r3, [pc, #292]	; (8002954 <main_run+0x1a0>)
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
	const float kADCOffsetVolts = 1.56f; // IHM16M1 datasheet
 8002830:	4b49      	ldr	r3, [pc, #292]	; (8002958 <main_run+0x1a4>)
 8002832:	63bb      	str	r3, [r7, #56]	; 0x38
	const float kADCGain = 1.53f * 0.33f;
 8002834:	4b49      	ldr	r3, [pc, #292]	; (800295c <main_run+0x1a8>)
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
	CurrentSensor * csense = new CurrentSensor(kADCMaxCounts, kADCMaxVolts, kADCOffsetVolts, kADCGain);
 8002838:	2028      	movs	r0, #40	; 0x28
 800283a:	f00b fd13 	bl	800e264 <_Znwj>
 800283e:	4603      	mov	r3, r0
 8002840:	461c      	mov	r4, r3
 8002842:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8002960 <main_run+0x1ac>
 8002846:	eddf 0a47 	vldr	s1, [pc, #284]	; 8002964 <main_run+0x1b0>
 800284a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8002968 <main_run+0x1b4>
 800284e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fecc 	bl	80025f0 <_ZN13CurrentSensorC1Etfff>
 8002858:	633c      	str	r4, [r7, #48]	; 0x30
	csense->LinkToADC(&(curr_sense_adc_buf[0]), &(curr_sense_adc_buf[1]), &(curr_sense_adc_buf[2]));
 800285a:	4b44      	ldr	r3, [pc, #272]	; (800296c <main_run+0x1b8>)
 800285c:	4a44      	ldr	r2, [pc, #272]	; (8002970 <main_run+0x1bc>)
 800285e:	4945      	ldr	r1, [pc, #276]	; (8002974 <main_run+0x1c0>)
 8002860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002862:	f7fe fde5 	bl	8001430 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	const float kMaxPhaseVoltage = CONSTRAIN(DEFAULT_POWER_SUPPLY_VOLTAGE, 0.0f, config.current_limit * config.phase_resistance);
 8002866:	ed97 7a03 	vldr	s14, [r7, #12]
 800286a:	edd7 7a01 	vldr	s15, [r7, #4]
 800286e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002872:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800287a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287e:	d506      	bpl.n	800288e <main_run+0xda>
 8002880:	ed97 7a03 	vldr	s14, [r7, #12]
 8002884:	edd7 7a01 	vldr	s15, [r7, #4]
 8002888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288c:	e001      	b.n	8002892 <main_run+0xde>
 800288e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8002892:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	PIDController * pid_torque = new PIDController(DEFAULT_PID_CURR_P, DEFAULT_PID_CURR_I, DEFAULT_PID_CURR_D, DEFAULT_PID_CURR_RAMP, kMaxPhaseVoltage);
 8002896:	2020      	movs	r0, #32
 8002898:	f00b fce4 	bl	800e264 <_Znwj>
 800289c:	4603      	mov	r3, r0
 800289e:	461c      	mov	r4, r3
 80028a0:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 80028a4:	eddf 1a34 	vldr	s3, [pc, #208]	; 8002978 <main_run+0x1c4>
 80028a8:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8002978 <main_run+0x1c4>
 80028ac:	eddf 0a33 	vldr	s1, [pc, #204]	; 800297c <main_run+0x1c8>
 80028b0:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff fb49 	bl	8001f4c <_ZN13PIDControllerC1Efffff>
 80028ba:	62bc      	str	r4, [r7, #40]	; 0x28

	motor = new Motor(config, driver, enc, csense, pid_torque);
 80028bc:	f107 0414 	add.w	r4, r7, #20
 80028c0:	463d      	mov	r5, r7
 80028c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c6:	682b      	ldr	r3, [r5, #0]
 80028c8:	6023      	str	r3, [r4, #0]
 80028ca:	2080      	movs	r0, #128	; 0x80
 80028cc:	f00b fcca 	bl	800e264 <_Znwj>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461c      	mov	r4, r3
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	9305      	str	r3, [sp, #20]
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028de:	9303      	str	r3, [sp, #12]
 80028e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e2:	9302      	str	r3, [sp, #8]
 80028e4:	466a      	mov	r2, sp
 80028e6:	f107 0320 	add.w	r3, r7, #32
 80028ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ee:	e882 0003 	stmia.w	r2, {r0, r1}
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fedf 	bl	80026bc <_ZN5MotorC1ENS_13MotorConfig_tEP11MotorDriverP7EncoderP13CurrentSensorP13PIDController>
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <main_run+0x1cc>)
 8002900:	601c      	str	r4, [r3, #0]

#ifdef RUN_TESTS
	RunAllTests();
 8002902:	f000 f8d3 	bl	8002aac <_Z11RunAllTestsv>
#endif

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);
 8002906:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <main_run+0x1d0>)
 8002908:	2100      	movs	r1, #0
 800290a:	481f      	ldr	r0, [pc, #124]	; (8002988 <main_run+0x1d4>)
 800290c:	f008 fd10 	bl	800b330 <osThreadNew>
 8002910:	4603      	mov	r3, r0
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <main_run+0x1d8>)
 8002914:	6013      	str	r3, [r2, #0]
	motor_control_task_handle = osThreadNew(StartMotorControlTask, NULL, &motor_control_task_attrs);
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <main_run+0x1dc>)
 8002918:	2100      	movs	r1, #0
 800291a:	481e      	ldr	r0, [pc, #120]	; (8002994 <main_run+0x1e0>)
 800291c:	f008 fd08 	bl	800b330 <osThreadNew>
 8002920:	4603      	mov	r3, r0
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <main_run+0x1e4>)
 8002924:	6013      	str	r3, [r2, #0]

	return 1;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	3758      	adds	r7, #88	; 0x58
 800292c:	46bd      	mov	sp, r7
 800292e:	bdb0      	pop	{r4, r5, r7, pc}
 8002930:	08011078 	.word	0x08011078
 8002934:	3f733333 	.word	0x3f733333
 8002938:	3d4ccccd 	.word	0x3d4ccccd
 800293c:	3d4ccccd 	.word	0x3d4ccccd
 8002940:	3f733333 	.word	0x3f733333
 8002944:	20004b30 	.word	0x20004b30
 8002948:	20005070 	.word	0x20005070
 800294c:	40020000 	.word	0x40020000
 8002950:	457ff000 	.word	0x457ff000
 8002954:	40533333 	.word	0x40533333
 8002958:	3fc7ae14 	.word	0x3fc7ae14
 800295c:	3f014121 	.word	0x3f014121
 8002960:	3f014121 	.word	0x3f014121
 8002964:	3fc7ae14 	.word	0x3fc7ae14
 8002968:	40533333 	.word	0x40533333
 800296c:	20000214 	.word	0x20000214
 8002970:	20000212 	.word	0x20000212
 8002974:	20000210 	.word	0x20000210
 8002978:	00000000 	.word	0x00000000
 800297c:	43960000 	.word	0x43960000
 8002980:	2000020c 	.word	0x2000020c
 8002984:	080122a8 	.word	0x080122a8
 8002988:	0800299d 	.word	0x0800299d
 800298c:	20000204 	.word	0x20000204
 8002990:	080122cc 	.word	0x080122cc
 8002994:	08002a69 	.word	0x08002a69
 8002998:	20000208 	.word	0x20000208

0800299c <_Z10startTask1Pv>:

void startTask1(void * argument) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	// Currents to toggle between
	float theta = 0;
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
	float dtheta = 1;
 80029aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80029ae:	61bb      	str	r3, [r7, #24]
	float max_current = 2.0; // [A]
 80029b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029b4:	617b      	str	r3, [r7, #20]

	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
 80029b6:	f008 fc89 	bl	800b2cc <osKernelGetTickCount>
 80029ba:	6138      	str	r0, [r7, #16]
		uint32_t osTickFreq = osKernelGetTickFreq();
 80029bc:	f008 fcae 	bl	800b31c <osKernelGetTickFreq>
 80029c0:	60f8      	str	r0, [r7, #12]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	4824      	ldr	r0, [pc, #144]	; (8002a58 <_Z10startTask1Pv+0xbc>)
 80029c6:	f004 f830 	bl	8006a2a <HAL_GPIO_TogglePin>

		motor->SetCurrent(max_current, 0.0f, 0.0f);
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <_Z10startTask1Pv+0xc0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8002a60 <_Z10startTask1Pv+0xc4>
 80029d2:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002a60 <_Z10startTask1Pv+0xc4>
 80029d6:	ed97 0a05 	vldr	s0, [r7, #20]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fe0e 	bl	80015fc <_ZN5Motor10SetCurrentEfff>
		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <_Z10startTask1Pv+0xc8>)
 80029e4:	fba2 2303 	umull	r2, r3, r2, r3
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f008 fd72 	bl	800b4d8 <osDelayUntil>
		osTickCount = osKernelGetTickCount();
 80029f4:	f008 fc6a 	bl	800b2cc <osKernelGetTickCount>
 80029f8:	6138      	str	r0, [r7, #16]
		motor->SetCurrent(0.0f, max_current, 0.0f);
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <_Z10startTask1Pv+0xc0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8002a60 <_Z10startTask1Pv+0xc4>
 8002a02:	edd7 0a05 	vldr	s1, [r7, #20]
 8002a06:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002a60 <_Z10startTask1Pv+0xc4>
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fdf6 	bl	80015fc <_ZN5Motor10SetCurrentEfff>
		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <_Z10startTask1Pv+0xc8>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f008 fd5a 	bl	800b4d8 <osDelayUntil>
		osTickCount = osKernelGetTickCount();
 8002a24:	f008 fc52 	bl	800b2cc <osKernelGetTickCount>
 8002a28:	6138      	str	r0, [r7, #16]
		motor->SetCurrent(0.0f, 0.0f, max_current);
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <_Z10startTask1Pv+0xc0>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	ed97 1a05 	vldr	s2, [r7, #20]
 8002a32:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002a60 <_Z10startTask1Pv+0xc4>
 8002a36:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002a60 <_Z10startTask1Pv+0xc4>
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fdde 	bl	80015fc <_ZN5Motor10SetCurrentEfff>

		// Wrap theta
//		theta = WrapAngle(theta + dtheta);

		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <_Z10startTask1Pv+0xc8>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f008 fd42 	bl	800b4d8 <osDelayUntil>
	}
 8002a54:	e7af      	b.n	80029b6 <_Z10startTask1Pv+0x1a>
 8002a56:	bf00      	nop
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	2000020c 	.word	0x2000020c
 8002a60:	00000000 	.word	0x00000000
 8002a64:	cccccccd 	.word	0xcccccccd

08002a68 <_Z21StartMotorControlTaskPv>:
}

void StartMotorControlTask(void * argument) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

	motor->Init();
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <_Z21StartMotorControlTaskPv+0x3c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe fda7 	bl	80015c8 <_ZN5Motor4InitEv>

	while (1) {
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	480a      	ldr	r0, [pc, #40]	; (8002aa8 <_Z21StartMotorControlTaskPv+0x40>)
 8002a80:	f003 ffba 	bl	80069f8 <HAL_GPIO_WritePin>
		motor->Update();
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_Z21StartMotorControlTaskPv+0x3c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe fde9 	bl	8001660 <_ZN5Motor6UpdateEv>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2140      	movs	r1, #64	; 0x40
 8002a92:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <_Z21StartMotorControlTaskPv+0x40>)
 8002a94:	f003 ffb0 	bl	80069f8 <HAL_GPIO_WritePin>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // wait indefinitely for run notification, clear notifications (set to 0) upon receiving one
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f00a fab1 	bl	800d004 <ulTaskNotifyTake>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8002aa2:	e7ea      	b.n	8002a7a <_Z21StartMotorControlTaskPv+0x12>
 8002aa4:	2000020c 	.word	0x2000020c
 8002aa8:	40021800 	.word	0x40021800

08002aac <_Z11RunAllTestsv>:
	}
}

#ifdef RUN_TESTS
void RunAllTests() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	TestEncoderAll();
 8002ab0:	f000 fc76 	bl	80033a0 <_Z14TestEncoderAllv>
	TestPIDControllerAll();
 8002ab4:	f001 fc88 	bl	80043c8 <_Z20TestPIDControllerAllv>
	TestHalfBridgeAll();
 8002ab8:	f001 f85e 	bl	8003b78 <_Z17TestHalfBridgeAllv>
	TestCurrentSensorAll();
 8002abc:	f000 f98e 	bl	8002ddc <_Z20TestCurrentSensorAllv>
	TestMotorDriverAll();
 8002ac0:	f001 f8a2 	bl	8003c08 <_Z18TestMotorDriverAllv>
	TestFOCUtilsAll();
 8002ac4:	f000 ff92 	bl	80039ec <_Z15TestFOCUtilsAllv>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <_Z18CurrentsAreCorrect13CurrentSensorfff>:
 */

#include "test_framework.hh"
#include "test_current_sensor.hh"

bool CurrentsAreCorrect(CurrentSensor current_sensor, float i_u_expect, float i_v_expect, float i_w_expect) {
 8002acc:	b084      	sub	sp, #16
 8002ace:	b5b0      	push	{r4, r5, r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af02      	add	r7, sp, #8
 8002ad4:	f107 0420 	add.w	r4, r7, #32
 8002ad8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002adc:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ae0:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ae4:	ed87 1a01 	vstr	s2, [r7, #4]
	if (current_sensor.i_u != i_u_expect) {
 8002ae8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002aec:	ed97 7a03 	vldr	s14, [r7, #12]
 8002af0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	d013      	beq.n	8002b22 <_Z18CurrentsAreCorrect13CurrentSensorfff+0x56>
		T_FAIL_PRINT("Incorrect phase U current: expected %f but got %f.\r\n", i_u_expect, current_sensor.i_u);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f7fd fd4c 	bl	8000598 <__aeabi_f2d>
 8002b00:	4604      	mov	r4, r0
 8002b02:	460d      	mov	r5, r1
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fd46 	bl	8000598 <__aeabi_f2d>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	e9cd 2300 	strd	r2, r3, [sp]
 8002b14:	4622      	mov	r2, r4
 8002b16:	462b      	mov	r3, r5
 8002b18:	4823      	ldr	r0, [pc, #140]	; (8002ba8 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xdc>)
 8002b1a:	f00c fa63 	bl	800efe4 <iprintf>
		return false;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e03a      	b.n	8002b98 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_v != i_v_expect) {
 8002b22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b26:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	d013      	beq.n	8002b5c <_Z18CurrentsAreCorrect13CurrentSensorfff+0x90>
		T_FAIL_PRINT("Incorrect phase V current: expected %f but got %f.\r\n", i_v_expect, current_sensor.i_v);
 8002b34:	68b8      	ldr	r0, [r7, #8]
 8002b36:	f7fd fd2f 	bl	8000598 <__aeabi_f2d>
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	460d      	mov	r5, r1
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fd fd29 	bl	8000598 <__aeabi_f2d>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002b4e:	4622      	mov	r2, r4
 8002b50:	462b      	mov	r3, r5
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe0>)
 8002b54:	f00c fa46 	bl	800efe4 <iprintf>
		return false;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	e01d      	b.n	8002b98 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	} else if (current_sensor.i_w != i_w_expect) {
 8002b5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002b60:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b64:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d013      	beq.n	8002b96 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xca>
		T_FAIL_PRINT("Incorrect phase W current: expected %f but got %f.\r\n", i_w_expect, current_sensor.i_w);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fd12 	bl	8000598 <__aeabi_f2d>
 8002b74:	4604      	mov	r4, r0
 8002b76:	460d      	mov	r5, r1
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fd0c 	bl	8000598 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	e9cd 2300 	strd	r2, r3, [sp]
 8002b88:	4622      	mov	r2, r4
 8002b8a:	462b      	mov	r3, r5
 8002b8c:	4808      	ldr	r0, [pc, #32]	; (8002bb0 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xe4>)
 8002b8e:	f00c fa29 	bl	800efe4 <iprintf>
		return false;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <_Z18CurrentsAreCorrect13CurrentSensorfff+0xcc>
	}
	return true;
 8002b96:	2301      	movs	r3, #1
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002ba2:	b004      	add	sp, #16
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	0801108c 	.word	0x0801108c
 8002bac:	080110dc 	.word	0x080110dc
 8002bb0:	0801112c 	.word	0x0801112c

08002bb4 <_Z24TestCurrentSensorCurrentv>:

bool TestCurrentSensorCurrent() {
 8002bb4:	b5b0      	push	{r4, r5, r7, lr}
 8002bb6:	b09a      	sub	sp, #104	; 0x68
 8002bb8:	af06      	add	r7, sp, #24
	TEST_PRINT("Simulate Current through Current Sensor.\r\n");
 8002bba:	4881      	ldr	r0, [pc, #516]	; (8002dc0 <_Z24TestCurrentSensorCurrentv+0x20c>)
 8002bbc:	f00c fa98 	bl	800f0f0 <puts>
	uint16_t csense_adc_counts[3] = {0};
 8002bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	809a      	strh	r2, [r3, #4]

	uint16_t adc_max_counts = 0xFFF;
 8002bca:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002bce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	float adc_max_volts = 3.3f;
 8002bd2:	4b7c      	ldr	r3, [pc, #496]	; (8002dc4 <_Z24TestCurrentSensorCurrentv+0x210>)
 8002bd4:	64bb      	str	r3, [r7, #72]	; 0x48
	float adc_offset = 1.56f;
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <_Z24TestCurrentSensorCurrentv+0x214>)
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
	float adc_gain = 0.33f;
 8002bda:	4b7c      	ldr	r3, [pc, #496]	; (8002dcc <_Z24TestCurrentSensorCurrentv+0x218>)
 8002bdc:	643b      	str	r3, [r7, #64]	; 0x40
	CurrentSensor current_sensor(adc_max_counts, adc_max_volts, adc_offset, adc_gain);
 8002bde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002be2:	1d3b      	adds	r3, r7, #4
 8002be4:	ed97 1a10 	vldr	s2, [r7, #64]	; 0x40
 8002be8:	edd7 0a11 	vldr	s1, [r7, #68]	; 0x44
 8002bec:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fcfc 	bl	80025f0 <_ZN13CurrentSensorC1Etfff>
	current_sensor.LinkToADC(&(csense_adc_counts[0]), &(csense_adc_counts[1]), &(csense_adc_counts[2]));
 8002bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bfc:	1d1c      	adds	r4, r3, #4
 8002bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c02:	1c9a      	adds	r2, r3, #2
 8002c04:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002c08:	1d38      	adds	r0, r7, #4
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	f7fe fc10 	bl	8001430 <_ZN13CurrentSensor9LinkToADCEPVtS1_S1_>

	T_TEST_PRINT("Current sense ADC counts at 0.\r\n");
 8002c10:	486f      	ldr	r0, [pc, #444]	; (8002dd0 <_Z24TestCurrentSensorCurrentv+0x21c>)
 8002c12:	f00c fa6d 	bl	800f0f0 <puts>
	current_sensor.ReadCurrents();
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fc1f 	bl	800145c <_ZN13CurrentSensor12ReadCurrentsEv>
	float i_u_expect = -adc_offset / adc_gain * 1000;
 8002c1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c22:	eef1 6a67 	vneg.f32	s13, s15
 8002c26:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c36:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float i_v_expect = -adc_offset / adc_gain * 1000;
 8002c3a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c3e:	eef1 6a67 	vneg.f32	s13, s15
 8002c42:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float i_w_expect = -adc_offset / adc_gain * 1000;
 8002c56:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002c5a:	eef1 6a67 	vneg.f32	s13, s15
 8002c5e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c66:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002c72:	466d      	mov	r5, sp
 8002c74:	f107 0414 	add.w	r4, r7, #20
 8002c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c88:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002c8c:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002c90:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002c94:	f7ff ff1a 	bl	8002acc <_Z18CurrentsAreCorrect13CurrentSensorfff>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f083 0301 	eor.w	r3, r3, #1
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <_Z24TestCurrentSensorCurrentv+0xf4>
		return false;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e087      	b.n	8002db8 <_Z24TestCurrentSensorCurrentv+0x204>
	}

	T_TEST_PRINT("Current sense ADC counts at random values.\r\n");
 8002ca8:	484b      	ldr	r0, [pc, #300]	; (8002dd8 <_Z24TestCurrentSensorCurrentv+0x224>)
 8002caa:	f00c fa21 	bl	800f0f0 <puts>
	csense_adc_counts[0] = 156;
 8002cae:	239c      	movs	r3, #156	; 0x9c
 8002cb0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	csense_adc_counts[1] = 0xFFF;
 8002cb2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002cb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	csense_adc_counts[2] = 2934;
 8002cb8:	f640 3376 	movw	r3, #2934	; 0xb76
 8002cbc:	863b      	strh	r3, [r7, #48]	; 0x30
	current_sensor.ReadCurrents();
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fbcb 	bl	800145c <_ZN13CurrentSensor12ReadCurrentsEv>
	i_u_expect = (static_cast<float>(csense_adc_counts[0]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002cc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ce0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002cec:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002cf0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	i_v_expect = (static_cast<float>(csense_adc_counts[1]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002d06:	ee07 3a90 	vmov	s15, r3
 8002d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d1e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d2e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	i_w_expect = (static_cast<float>(csense_adc_counts[2]) / adc_max_counts * adc_max_volts - adc_offset) / adc_gain * 1000;
 8002d42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002d44:	ee07 3a90 	vmov	s15, r3
 8002d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d50:	ee07 3a90 	vmov	s15, r3
 8002d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d5c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d64:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d68:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002d6c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d74:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002dd4 <_Z24TestCurrentSensorCurrentv+0x220>
 8002d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	if (!CurrentsAreCorrect(current_sensor, i_u_expect, i_v_expect, i_w_expect)) {
 8002d80:	466d      	mov	r5, sp
 8002d82:	f107 0414 	add.w	r4, r7, #20
 8002d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d96:	ed97 1a0d 	vldr	s2, [r7, #52]	; 0x34
 8002d9a:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8002d9e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8002da2:	f7ff fe93 	bl	8002acc <_Z18CurrentsAreCorrect13CurrentSensorfff>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f083 0301 	eor.w	r3, r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <_Z24TestCurrentSensorCurrentv+0x202>
		return false;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e000      	b.n	8002db8 <_Z24TestCurrentSensorCurrentv+0x204>
	}
	return true;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3750      	adds	r7, #80	; 0x50
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc0:	0801117c 	.word	0x0801117c
 8002dc4:	40533333 	.word	0x40533333
 8002dc8:	3fc7ae14 	.word	0x3fc7ae14
 8002dcc:	3ea8f5c3 	.word	0x3ea8f5c3
 8002dd0:	080111b8 	.word	0x080111b8
 8002dd4:	447a0000 	.word	0x447a0000
 8002dd8:	080111ec 	.word	0x080111ec

08002ddc <_Z20TestCurrentSensorAllv>:

void TestCurrentSensorAll() {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
	bool csense_passed = true;
 8002de2:	2301      	movs	r3, #1
 8002de4:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test CurrentSensor Class");
 8002de6:	490e      	ldr	r1, [pc, #56]	; (8002e20 <_Z20TestCurrentSensorAllv+0x44>)
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <_Z20TestCurrentSensorAllv+0x48>)
 8002dea:	f00c f8fb 	bl	800efe4 <iprintf>
	csense_passed &= TestCurrentSensorCurrent();
 8002dee:	f7ff fee1 	bl	8002bb4 <_Z24TestCurrentSensorCurrentv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	71fb      	strb	r3, [r7, #7]
	if (csense_passed) {
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <_Z20TestCurrentSensorAllv+0x36>
		PASS_PRINT("CurrentSensor Class\r\n");
 8002e0a:	4807      	ldr	r0, [pc, #28]	; (8002e28 <_Z20TestCurrentSensorAllv+0x4c>)
 8002e0c:	f00c f970 	bl	800f0f0 <puts>
	} else {
		FAIL_PRINT("CurrentSensor Class\r\n");
	}
}
 8002e10:	e002      	b.n	8002e18 <_Z20TestCurrentSensorAllv+0x3c>
		FAIL_PRINT("CurrentSensor Class\r\n");
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <_Z20TestCurrentSensorAllv+0x50>)
 8002e14:	f00c f96c 	bl	800f0f0 <puts>
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	0801122c 	.word	0x0801122c
 8002e24:	08011248 	.word	0x08011248
 8002e28:	0801125c 	.word	0x0801125c
 8002e2c:	08011288 	.word	0x08011288

08002e30 <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 8002e36:	4816      	ldr	r0, [pc, #88]	; (8002e90 <_Z17TestEncoderCreatev+0x60>)
 8002e38:	f00c f95a 	bl	800f0f0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002e48:	8bfb      	ldrh	r3, [r7, #30]
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e56:	f7fe f8b3 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe fabb 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 8002e62:	eef0 7a40 	vmov.f32	s15, s0
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 8002e70:	8bbb      	ldrh	r3, [r7, #28]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <_Z17TestEncoderCreatev+0x56>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8002e76:	8bbb      	ldrh	r3, [r7, #28]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4805      	ldr	r0, [pc, #20]	; (8002e94 <_Z17TestEncoderCreatev+0x64>)
 8002e7e:	f00c f8b1 	bl	800efe4 <iprintf>
		return false;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <_Z17TestEncoderCreatev+0x58>
	}

	return true;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3728      	adds	r7, #40	; 0x28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	080112b4 	.word	0x080112b4
 8002e94:	080112d4 	.word	0x080112d4

08002e98 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8002e98:	b5b0      	push	{r4, r5, r7, lr}
 8002e9a:	b08e      	sub	sp, #56	; 0x38
 8002e9c:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 8002e9e:	4839      	ldr	r0, [pc, #228]	; (8002f84 <_Z15TestEncoderZerov+0xec>)
 8002ea0:	f00c f926 	bl	800f0f0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002eb8:	9200      	str	r2, [sp, #0]
 8002eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ebe:	f7fe f87f 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 8002ec2:	4831      	ldr	r0, [pc, #196]	; (8002f88 <_Z15TestEncoderZerov+0xf0>)
 8002ec4:	f00c f914 	bl	800f0f0 <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 8002ec8:	463b      	mov	r3, r7
 8002eca:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002f8c <_Z15TestEncoderZerov+0xf4>
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe fa6e 	bl	80013b0 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fa7e 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 8002edc:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <_Z15TestEncoderZerov+0xf8>)
 8002ee2:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002ee4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ee8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002eec:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	d012      	beq.n	8002f1c <_Z15TestEncoderZerov+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002ef6:	69f8      	ldr	r0, [r7, #28]
 8002ef8:	f7fd fb4e 	bl	8000598 <__aeabi_f2d>
 8002efc:	4604      	mov	r4, r0
 8002efe:	460d      	mov	r5, r1
 8002f00:	6a38      	ldr	r0, [r7, #32]
 8002f02:	f7fd fb49 	bl	8000598 <__aeabi_f2d>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f0e:	4622      	mov	r2, r4
 8002f10:	462b      	mov	r3, r5
 8002f12:	4820      	ldr	r0, [pc, #128]	; (8002f94 <_Z15TestEncoderZerov+0xfc>)
 8002f14:	f00c f866 	bl	800efe4 <iprintf>
		return false;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e02e      	b.n	8002f7a <_Z15TestEncoderZerov+0xe2>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 8002f1c:	481e      	ldr	r0, [pc, #120]	; (8002f98 <_Z15TestEncoderZerov+0x100>)
 8002f1e:	f00c f8e7 	bl	800f0f0 <puts>
	enc.set_zero_angle(3600);
 8002f22:	463b      	mov	r3, r7
 8002f24:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002f9c <_Z15TestEncoderZerov+0x104>
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe fa41 	bl	80013b0 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7fe fa51 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 8002f36:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002f40:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f48:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f50:	d012      	beq.n	8002f78 <_Z15TestEncoderZerov+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002f52:	69f8      	ldr	r0, [r7, #28]
 8002f54:	f7fd fb20 	bl	8000598 <__aeabi_f2d>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	460d      	mov	r5, r1
 8002f5c:	6a38      	ldr	r0, [r7, #32]
 8002f5e:	f7fd fb1b 	bl	8000598 <__aeabi_f2d>
 8002f62:	4602      	mov	r2, r0
 8002f64:	460b      	mov	r3, r1
 8002f66:	e9cd 2300 	strd	r2, r3, [sp]
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	4809      	ldr	r0, [pc, #36]	; (8002f94 <_Z15TestEncoderZerov+0xfc>)
 8002f70:	f00c f838 	bl	800efe4 <iprintf>
		return false;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <_Z15TestEncoderZerov+0xe2>
	}

	return true;
 8002f78:	2301      	movs	r3, #1
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3730      	adds	r7, #48	; 0x30
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bdb0      	pop	{r4, r5, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	08011330 	.word	0x08011330
 8002f88:	08011350 	.word	0x08011350
 8002f8c:	425c0000 	.word	0x425c0000
 8002f90:	43988000 	.word	0x43988000
 8002f94:	08011380 	.word	0x08011380
 8002f98:	080113c4 	.word	0x080113c4
 8002f9c:	45610000 	.word	0x45610000

08002fa0 <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b08e      	sub	sp, #56	; 0x38
 8002fa4:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 8002fa6:	4838      	ldr	r0, [pc, #224]	; (8003088 <_Z16TestEncoderAnglev+0xe8>)
 8002fa8:	f00c f8a2 	bl	800f0f0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8002fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fba:	4638      	mov	r0, r7
 8002fbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002fc0:	9200      	str	r2, [sp, #0]
 8002fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc6:	f7fd fffb 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 8002fca:	4830      	ldr	r0, [pc, #192]	; (800308c <_Z16TestEncoderAnglev+0xec>)
 8002fcc:	f00c f890 	bl	800f0f0 <puts>
	enc.set_angle(450.5);
 8002fd0:	463b      	mov	r3, r7
 8002fd2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003090 <_Z16TestEncoderAnglev+0xf0>
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fa16 	bl	8001408 <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f9fa 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 8002fe4:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <_Z16TestEncoderAnglev+0xf4>)
 8002fea:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8002fec:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ff0:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ff4:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d012      	beq.n	8003024 <_Z16TestEncoderAnglev+0x84>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8002ffe:	69f8      	ldr	r0, [r7, #28]
 8003000:	f7fd faca 	bl	8000598 <__aeabi_f2d>
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1
 8003008:	6a38      	ldr	r0, [r7, #32]
 800300a:	f7fd fac5 	bl	8000598 <__aeabi_f2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	e9cd 2300 	strd	r2, r3, [sp]
 8003016:	4622      	mov	r2, r4
 8003018:	462b      	mov	r3, r5
 800301a:	481f      	ldr	r0, [pc, #124]	; (8003098 <_Z16TestEncoderAnglev+0xf8>)
 800301c:	f00b ffe2 	bl	800efe4 <iprintf>
		return false;
 8003020:	2300      	movs	r3, #0
 8003022:	e02d      	b.n	8003080 <_Z16TestEncoderAnglev+0xe0>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 8003024:	481d      	ldr	r0, [pc, #116]	; (800309c <_Z16TestEncoderAnglev+0xfc>)
 8003026:	f00c f863 	bl	800f0f0 <puts>
	enc.set_angle(-500.9);
 800302a:	463b      	mov	r3, r7
 800302c:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80030a0 <_Z16TestEncoderAnglev+0x100>
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe f9e9 	bl	8001408 <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 8003036:	463b      	mov	r3, r7
 8003038:	4618      	mov	r0, r3
 800303a:	f7fe f9cd 	bl	80013d8 <_ZN7Encoder9get_angleEv>
 800303e:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 8003042:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <_Z16TestEncoderAnglev+0x104>)
 8003044:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8003046:	ed97 7a08 	vldr	s14, [r7, #32]
 800304a:	edd7 7a07 	vldr	s15, [r7, #28]
 800304e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	d012      	beq.n	800307e <_Z16TestEncoderAnglev+0xde>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8003058:	69f8      	ldr	r0, [r7, #28]
 800305a:	f7fd fa9d 	bl	8000598 <__aeabi_f2d>
 800305e:	4604      	mov	r4, r0
 8003060:	460d      	mov	r5, r1
 8003062:	6a38      	ldr	r0, [r7, #32]
 8003064:	f7fd fa98 	bl	8000598 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	e9cd 2300 	strd	r2, r3, [sp]
 8003070:	4622      	mov	r2, r4
 8003072:	462b      	mov	r3, r5
 8003074:	4808      	ldr	r0, [pc, #32]	; (8003098 <_Z16TestEncoderAnglev+0xf8>)
 8003076:	f00b ffb5 	bl	800efe4 <iprintf>
		return false;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <_Z16TestEncoderAnglev+0xe0>
	}

	return true;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3730      	adds	r7, #48	; 0x30
 8003084:	46bd      	mov	sp, r7
 8003086:	bdb0      	pop	{r4, r5, r7, pc}
 8003088:	080113fc 	.word	0x080113fc
 800308c:	08011420 	.word	0x08011420
 8003090:	43e14000 	.word	0x43e14000
 8003094:	42b50000 	.word	0x42b50000
 8003098:	08011380 	.word	0x08011380
 800309c:	08011448 	.word	0x08011448
 80030a0:	c3fa7333 	.word	0xc3fa7333
 80030a4:	435b199a 	.word	0x435b199a

080030a8 <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 80030ae:	483c      	ldr	r0, [pc, #240]	; (80031a0 <_Z17TestAS5048AParityv+0xf8>)
 80030b0:	f00c f81e 	bl	800f0f0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80030c0:	8bfb      	ldrh	r3, [r7, #30]
 80030c2:	4638      	mov	r0, r7
 80030c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80030c8:	9200      	str	r2, [sp, #0]
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ce:	f7fd ff77 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 80030d2:	4834      	ldr	r0, [pc, #208]	; (80031a4 <_Z17TestAS5048AParityv+0xfc>)
 80030d4:	f00c f80c 	bl	800f0f0 <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 80030d8:	463b      	mov	r3, r7
 80030da:	2100      	movs	r1, #0
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd ffaf 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 80030e2:	4603      	mov	r3, r0
 80030e4:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 80030e6:	2300      	movs	r3, #0
 80030e8:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 80030ea:	7f7a      	ldrb	r2, [r7, #29]
 80030ec:	7f3b      	ldrb	r3, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d007      	beq.n	8003102 <_Z17TestAS5048AParityv+0x5a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 80030f2:	7f3b      	ldrb	r3, [r7, #28]
 80030f4:	7f7a      	ldrb	r2, [r7, #29]
 80030f6:	4619      	mov	r1, r3
 80030f8:	482b      	ldr	r0, [pc, #172]	; (80031a8 <_Z17TestAS5048AParityv+0x100>)
 80030fa:	f00b ff73 	bl	800efe4 <iprintf>
		return false;
 80030fe:	2300      	movs	r3, #0
 8003100:	e04a      	b.n	8003198 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 8003102:	482a      	ldr	r0, [pc, #168]	; (80031ac <_Z17TestAS5048AParityv+0x104>)
 8003104:	f00b fff4 	bl	800f0f0 <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8003108:	463b      	mov	r3, r7
 800310a:	2101      	movs	r1, #1
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd ff97 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 8003112:	4603      	mov	r3, r0
 8003114:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8003116:	2301      	movs	r3, #1
 8003118:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 800311a:	7f7a      	ldrb	r2, [r7, #29]
 800311c:	7f3b      	ldrb	r3, [r7, #28]
 800311e:	429a      	cmp	r2, r3
 8003120:	d007      	beq.n	8003132 <_Z17TestAS5048AParityv+0x8a>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8003122:	7f3b      	ldrb	r3, [r7, #28]
 8003124:	7f7a      	ldrb	r2, [r7, #29]
 8003126:	4619      	mov	r1, r3
 8003128:	481f      	ldr	r0, [pc, #124]	; (80031a8 <_Z17TestAS5048AParityv+0x100>)
 800312a:	f00b ff5b 	bl	800efe4 <iprintf>
		return false;
 800312e:	2300      	movs	r3, #0
 8003130:	e032      	b.n	8003198 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 8003132:	481f      	ldr	r0, [pc, #124]	; (80031b0 <_Z17TestAS5048AParityv+0x108>)
 8003134:	f00b ffdc 	bl	800f0f0 <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8003138:	463b      	mov	r3, r7
 800313a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd ff7e 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 8003144:	4603      	mov	r3, r0
 8003146:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8003148:	2301      	movs	r3, #1
 800314a:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 800314c:	7f7a      	ldrb	r2, [r7, #29]
 800314e:	7f3b      	ldrb	r3, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d007      	beq.n	8003164 <_Z17TestAS5048AParityv+0xbc>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8003154:	7f3b      	ldrb	r3, [r7, #28]
 8003156:	7f7a      	ldrb	r2, [r7, #29]
 8003158:	4619      	mov	r1, r3
 800315a:	4813      	ldr	r0, [pc, #76]	; (80031a8 <_Z17TestAS5048AParityv+0x100>)
 800315c:	f00b ff42 	bl	800efe4 <iprintf>
		return false;
 8003160:	2300      	movs	r3, #0
 8003162:	e019      	b.n	8003198 <_Z17TestAS5048AParityv+0xf0>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <_Z17TestAS5048AParityv+0x10c>)
 8003166:	f00b ffc3 	bl	800f0f0 <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 800316a:	463b      	mov	r3, r7
 800316c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd ff65 	bl	8001040 <_ZN7AS5048A15CalcEvenParity_Et>
 8003176:	4603      	mov	r3, r0
 8003178:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 800317e:	7f7a      	ldrb	r2, [r7, #29]
 8003180:	7f3b      	ldrb	r3, [r7, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	d007      	beq.n	8003196 <_Z17TestAS5048AParityv+0xee>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8003186:	7f3b      	ldrb	r3, [r7, #28]
 8003188:	7f7a      	ldrb	r2, [r7, #29]
 800318a:	4619      	mov	r1, r3
 800318c:	4806      	ldr	r0, [pc, #24]	; (80031a8 <_Z17TestAS5048AParityv+0x100>)
 800318e:	f00b ff29 	bl	800efe4 <iprintf>
		return false;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <_Z17TestAS5048AParityv+0xf0>
	}

	return true;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	; 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	08011470 	.word	0x08011470
 80031a4:	080114a0 	.word	0x080114a0
 80031a8:	080114c8 	.word	0x080114c8
 80031ac:	08011510 	.word	0x08011510
 80031b0:	08011538 	.word	0x08011538
 80031b4:	08011568 	.word	0x08011568

080031b8 <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08e      	sub	sp, #56	; 0x38
 80031bc:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 80031be:	486d      	ldr	r0, [pc, #436]	; (8003374 <_Z18TestAS5048APacketsv+0x1bc>)
 80031c0:	f00b ff96 	bl	800f0f0 <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80031d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031d2:	4638      	mov	r0, r7
 80031d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80031d8:	9200      	str	r2, [sp, #0]
 80031da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031de:	f7fd feef 	bl	8000fc0 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 80031e2:	4865      	ldr	r0, [pc, #404]	; (8003378 <_Z18TestAS5048APacketsv+0x1c0>)
 80031e4:	f00b ff84 	bl	800f0f0 <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 80031e8:	463b      	mov	r3, r7
 80031ea:	2201      	movs	r2, #1
 80031ec:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd ff4a 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 80031f6:	4603      	mov	r3, r0
 80031f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 80031fa:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 80031fe:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8003200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003204:	429a      	cmp	r2, r3
 8003206:	d007      	beq.n	8003218 <_Z18TestAS5048APacketsv+0x60>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8003208:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800320a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800320c:	4619      	mov	r1, r3
 800320e:	485b      	ldr	r0, [pc, #364]	; (800337c <_Z18TestAS5048APacketsv+0x1c4>)
 8003210:	f00b fee8 	bl	800efe4 <iprintf>
		return false;
 8003214:	2300      	movs	r3, #0
 8003216:	e0a9      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8003218:	4859      	ldr	r0, [pc, #356]	; (8003380 <_Z18TestAS5048APacketsv+0x1c8>)
 800321a:	f00b ff69 	bl	800f0f0 <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 800321e:	463b      	mov	r3, r7
 8003220:	2200      	movs	r2, #0
 8003222:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd ff2f 	bl	800108a <_ZN7AS5048A20CreateCommandPacket_Eth>
 800322c:	4603      	mov	r3, r0
 800322e:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8003230:	f643 63ef 	movw	r3, #16111	; 0x3eef
 8003234:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8003236:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800323a:	429a      	cmp	r2, r3
 800323c:	d007      	beq.n	800324e <_Z18TestAS5048APacketsv+0x96>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 800323e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003240:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003242:	4619      	mov	r1, r3
 8003244:	484d      	ldr	r0, [pc, #308]	; (800337c <_Z18TestAS5048APacketsv+0x1c4>)
 8003246:	f00b fecd 	bl	800efe4 <iprintf>
		return false;
 800324a:	2300      	movs	r3, #0
 800324c:	e08e      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 800324e:	484d      	ldr	r0, [pc, #308]	; (8003384 <_Z18TestAS5048APacketsv+0x1cc>)
 8003250:	f00b ff4e 	bl	800f0f0 <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 8003254:	463b      	mov	r3, r7
 8003256:	f64d 61ad 	movw	r1, #57005	; 0xdead
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd ff3e 	bl	80010dc <_ZN7AS5048A18CreateWritePacket_Et>
 8003260:	4603      	mov	r3, r0
 8003262:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 8003264:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8003268:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 800326a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800326c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800326e:	429a      	cmp	r2, r3
 8003270:	d007      	beq.n	8003282 <_Z18TestAS5048APacketsv+0xca>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8003272:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003274:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003276:	4619      	mov	r1, r3
 8003278:	4843      	ldr	r0, [pc, #268]	; (8003388 <_Z18TestAS5048APacketsv+0x1d0>)
 800327a:	f00b feb3 	bl	800efe4 <iprintf>
		return false;
 800327e:	2300      	movs	r3, #0
 8003280:	e074      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8003282:	4842      	ldr	r0, [pc, #264]	; (800338c <_Z18TestAS5048APacketsv+0x1d4>)
 8003284:	f00b ff34 	bl	800f0f0 <puts>
	uint16_t received_pack = 0b1001111010101101;
 8003288:	f649 63ad 	movw	r3, #40621	; 0x9ead
 800328c:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 800328e:	8c3a      	ldrh	r2, [r7, #32]
 8003290:	463b      	mov	r3, r7
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd ff3d 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 800329a:	4603      	mov	r3, r0
 800329c:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 800329e:	f641 63ad 	movw	r3, #7853	; 0x1ead
 80032a2:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80032a4:	8bfa      	ldrh	r2, [r7, #30]
 80032a6:	8bbb      	ldrh	r3, [r7, #28]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d007      	beq.n	80032bc <_Z18TestAS5048APacketsv+0x104>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80032ac:	8bbb      	ldrh	r3, [r7, #28]
 80032ae:	8bfa      	ldrh	r2, [r7, #30]
 80032b0:	4619      	mov	r1, r3
 80032b2:	4837      	ldr	r0, [pc, #220]	; (8003390 <_Z18TestAS5048APacketsv+0x1d8>)
 80032b4:	f00b fe96 	bl	800efe4 <iprintf>
		return false;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e057      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 80032bc:	4835      	ldr	r0, [pc, #212]	; (8003394 <_Z18TestAS5048APacketsv+0x1dc>)
 80032be:	f00b ff17 	bl	800f0f0 <puts>
	received_pack = 0b0001111010101101;
 80032c2:	f641 63ad 	movw	r3, #7853	; 0x1ead
 80032c6:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 80032c8:	8c3a      	ldrh	r2, [r7, #32]
 80032ca:	463b      	mov	r3, r7
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd ff20 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 80032d4:	4603      	mov	r3, r0
 80032d6:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 80032d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032dc:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 80032de:	8bfa      	ldrh	r2, [r7, #30]
 80032e0:	8bbb      	ldrh	r3, [r7, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d007      	beq.n	80032f6 <_Z18TestAS5048APacketsv+0x13e>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 80032e6:	8bbb      	ldrh	r3, [r7, #28]
 80032e8:	8bfa      	ldrh	r2, [r7, #30]
 80032ea:	4619      	mov	r1, r3
 80032ec:	4828      	ldr	r0, [pc, #160]	; (8003390 <_Z18TestAS5048APacketsv+0x1d8>)
 80032ee:	f00b fe79 	bl	800efe4 <iprintf>
		return false;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e03a      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 80032f6:	4828      	ldr	r0, [pc, #160]	; (8003398 <_Z18TestAS5048APacketsv+0x1e0>)
 80032f8:	f00b fefa 	bl	800f0f0 <puts>
	received_pack = 0b0101111010101101;
 80032fc:	f645 63ad 	movw	r3, #24237	; 0x5ead
 8003300:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8003302:	8c3a      	ldrh	r2, [r7, #32]
 8003304:	463b      	mov	r3, r7
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd ff03 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 800330e:	4603      	mov	r3, r0
 8003310:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8003312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003316:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8003318:	8bfa      	ldrh	r2, [r7, #30]
 800331a:	8bbb      	ldrh	r3, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d007      	beq.n	8003330 <_Z18TestAS5048APacketsv+0x178>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8003320:	8bbb      	ldrh	r3, [r7, #28]
 8003322:	8bfa      	ldrh	r2, [r7, #30]
 8003324:	4619      	mov	r1, r3
 8003326:	481a      	ldr	r0, [pc, #104]	; (8003390 <_Z18TestAS5048APacketsv+0x1d8>)
 8003328:	f00b fe5c 	bl	800efe4 <iprintf>
		return false;
 800332c:	2300      	movs	r3, #0
 800332e:	e01d      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 8003330:	481a      	ldr	r0, [pc, #104]	; (800339c <_Z18TestAS5048APacketsv+0x1e4>)
 8003332:	f00b fedd 	bl	800f0f0 <puts>
	received_pack = 0b1101111010101101;
 8003336:	f64d 63ad 	movw	r3, #57005	; 0xdead
 800333a:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 800333c:	8c3a      	ldrh	r2, [r7, #32]
 800333e:	463b      	mov	r3, r7
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fee6 	bl	8001114 <_ZN7AS5048A20ParseReceivedPacket_Et>
 8003348:	4603      	mov	r3, r0
 800334a:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 800334c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003350:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8003352:	8bfa      	ldrh	r2, [r7, #30]
 8003354:	8bbb      	ldrh	r3, [r7, #28]
 8003356:	429a      	cmp	r2, r3
 8003358:	d007      	beq.n	800336a <_Z18TestAS5048APacketsv+0x1b2>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 800335a:	8bbb      	ldrh	r3, [r7, #28]
 800335c:	8bfa      	ldrh	r2, [r7, #30]
 800335e:	4619      	mov	r1, r3
 8003360:	480b      	ldr	r0, [pc, #44]	; (8003390 <_Z18TestAS5048APacketsv+0x1d8>)
 8003362:	f00b fe3f 	bl	800efe4 <iprintf>
		return false;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <_Z18TestAS5048APacketsv+0x1b4>
	}

	return true;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3730      	adds	r7, #48	; 0x30
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	0801159c 	.word	0x0801159c
 8003378:	080115d0 	.word	0x080115d0
 800337c:	08011604 	.word	0x08011604
 8003380:	08011654 	.word	0x08011654
 8003384:	08011688 	.word	0x08011688
 8003388:	080116b4 	.word	0x080116b4
 800338c:	08011700 	.word	0x08011700
 8003390:	08011738 	.word	0x08011738
 8003394:	0801177c 	.word	0x0801177c
 8003398:	080117b8 	.word	0x080117b8
 800339c:	080117f0 	.word	0x080117f0

080033a0 <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 80033a6:	2301      	movs	r3, #1
 80033a8:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 80033aa:	492c      	ldr	r1, [pc, #176]	; (800345c <_Z14TestEncoderAllv+0xbc>)
 80033ac:	482c      	ldr	r0, [pc, #176]	; (8003460 <_Z14TestEncoderAllv+0xc0>)
 80033ae:	f00b fe19 	bl	800efe4 <iprintf>
	enc_passed &= TestEncoderCreate();
 80033b2:	f7ff fd3d 	bl	8002e30 <_Z17TestEncoderCreatev>
 80033b6:	4603      	mov	r3, r0
 80033b8:	461a      	mov	r2, r3
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf14      	ite	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	2300      	moveq	r3, #0
 80033c6:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 80033c8:	f7ff fd66 	bl	8002e98 <_Z15TestEncoderZerov>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 80033de:	f7ff fddf 	bl	8002fa0 <_Z16TestEncoderAnglev>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	bf14      	ite	ne
 80033ee:	2301      	movne	r3, #1
 80033f0:	2300      	moveq	r3, #0
 80033f2:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 80033fa:	481a      	ldr	r0, [pc, #104]	; (8003464 <_Z14TestEncoderAllv+0xc4>)
 80033fc:	f00b fe78 	bl	800f0f0 <puts>
 8003400:	e002      	b.n	8003408 <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 8003402:	4819      	ldr	r0, [pc, #100]	; (8003468 <_Z14TestEncoderAllv+0xc8>)
 8003404:	f00b fe74 	bl	800f0f0 <puts>
	}

	L_PRINT("Test AS5048A Class");
 8003408:	4918      	ldr	r1, [pc, #96]	; (800346c <_Z14TestEncoderAllv+0xcc>)
 800340a:	4815      	ldr	r0, [pc, #84]	; (8003460 <_Z14TestEncoderAllv+0xc0>)
 800340c:	f00b fdea 	bl	800efe4 <iprintf>
	bool as5048a_passed = true;
 8003410:	2301      	movs	r3, #1
 8003412:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 8003414:	f7ff fe48 	bl	80030a8 <_Z17TestAS5048AParityv>
 8003418:	4603      	mov	r3, r0
 800341a:	461a      	mov	r2, r3
 800341c:	79bb      	ldrb	r3, [r7, #6]
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 800342a:	f7ff fec5 	bl	80031b8 <_Z18TestAS5048APacketsv>
 800342e:	4603      	mov	r3, r0
 8003430:	461a      	mov	r2, r3
 8003432:	79bb      	ldrb	r3, [r7, #6]
 8003434:	4013      	ands	r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8003440:	79bb      	ldrb	r3, [r7, #6]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 8003446:	480a      	ldr	r0, [pc, #40]	; (8003470 <_Z14TestEncoderAllv+0xd0>)
 8003448:	f00b fe52 	bl	800f0f0 <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 800344c:	e002      	b.n	8003454 <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 800344e:	4809      	ldr	r0, [pc, #36]	; (8003474 <_Z14TestEncoderAllv+0xd4>)
 8003450:	f00b fe4e 	bl	800f0f0 <puts>
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	08011834 	.word	0x08011834
 8003460:	08011848 	.word	0x08011848
 8003464:	0801185c 	.word	0x0801185c
 8003468:	08011884 	.word	0x08011884
 800346c:	080118ac 	.word	0x080118ac
 8003470:	080118c0 	.word	0x080118c0
 8003474:	080118e8 	.word	0x080118e8

08003478 <_Z10MatchThreeffffff>:
#include "test_foc_utils.hh"
#include "foc_utils.hh"

#define ERROR_MARGIN 0.1

bool MatchThree(float a, float b, float c, float expect_a, float expect_b, float expect_c) {
 8003478:	b5b0      	push	{r4, r5, r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003482:	edc7 0a04 	vstr	s1, [r7, #16]
 8003486:	ed87 1a03 	vstr	s2, [r7, #12]
 800348a:	edc7 1a02 	vstr	s3, [r7, #8]
 800348e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003492:	edc7 2a00 	vstr	s5, [r7]
	bool all_match = true;
 8003496:	2301      	movs	r3, #1
 8003498:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(a, expect_a, ERROR_MARGIN);
 800349a:	7ffc      	ldrb	r4, [r7, #31]
 800349c:	ed97 7a05 	vldr	s14, [r7, #20]
 80034a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ac:	dd17      	ble.n	80034de <_Z10MatchThreeffffff+0x66>
 80034ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ba:	ee17 0a90 	vmov	r0, s15
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	2301      	movs	r3, #1
 80034c4:	461d      	mov	r5, r3
 80034c6:	a356      	add	r3, pc, #344	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd fb2e 	bl	8000b2c <__aeabi_dcmplt>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <_Z10MatchThreeffffff+0x62>
 80034d6:	2300      	movs	r3, #0
 80034d8:	461d      	mov	r5, r3
 80034da:	b2eb      	uxtb	r3, r5
 80034dc:	e016      	b.n	800350c <_Z10MatchThreeffffff+0x94>
 80034de:	ed97 7a02 	vldr	s14, [r7, #8]
 80034e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ea:	ee17 0a90 	vmov	r0, s15
 80034ee:	f7fd f853 	bl	8000598 <__aeabi_f2d>
 80034f2:	2301      	movs	r3, #1
 80034f4:	461d      	mov	r5, r3
 80034f6:	a34a      	add	r3, pc, #296	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f7fd fb16 	bl	8000b2c <__aeabi_dcmplt>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <_Z10MatchThreeffffff+0x92>
 8003506:	2300      	movs	r3, #0
 8003508:	461d      	mov	r5, r3
 800350a:	b2eb      	uxtb	r3, r5
 800350c:	4023      	ands	r3, r4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(b, expect_b, ERROR_MARGIN);
 8003518:	7ffc      	ldrb	r4, [r7, #31]
 800351a:	ed97 7a04 	vldr	s14, [r7, #16]
 800351e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	dd17      	ble.n	800355c <_Z10MatchThreeffffff+0xe4>
 800352c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003530:	edd7 7a01 	vldr	s15, [r7, #4]
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	ee17 0a90 	vmov	r0, s15
 800353c:	f7fd f82c 	bl	8000598 <__aeabi_f2d>
 8003540:	2301      	movs	r3, #1
 8003542:	461d      	mov	r5, r3
 8003544:	a336      	add	r3, pc, #216	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f7fd faef 	bl	8000b2c <__aeabi_dcmplt>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <_Z10MatchThreeffffff+0xe0>
 8003554:	2300      	movs	r3, #0
 8003556:	461d      	mov	r5, r3
 8003558:	b2eb      	uxtb	r3, r5
 800355a:	e016      	b.n	800358a <_Z10MatchThreeffffff+0x112>
 800355c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003560:	edd7 7a04 	vldr	s15, [r7, #16]
 8003564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003568:	ee17 0a90 	vmov	r0, s15
 800356c:	f7fd f814 	bl	8000598 <__aeabi_f2d>
 8003570:	2301      	movs	r3, #1
 8003572:	461d      	mov	r5, r3
 8003574:	a32a      	add	r3, pc, #168	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f7fd fad7 	bl	8000b2c <__aeabi_dcmplt>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <_Z10MatchThreeffffff+0x110>
 8003584:	2300      	movs	r3, #0
 8003586:	461d      	mov	r5, r3
 8003588:	b2eb      	uxtb	r3, r5
 800358a:	4023      	ands	r3, r4
 800358c:	2b00      	cmp	r3, #0
 800358e:	bf14      	ite	ne
 8003590:	2301      	movne	r3, #1
 8003592:	2300      	moveq	r3, #0
 8003594:	77fb      	strb	r3, [r7, #31]
	all_match &= WITHIN(c, expect_c, ERROR_MARGIN);
 8003596:	7ffc      	ldrb	r4, [r7, #31]
 8003598:	ed97 7a03 	vldr	s14, [r7, #12]
 800359c:	edd7 7a00 	vldr	s15, [r7]
 80035a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	dd17      	ble.n	80035da <_Z10MatchThreeffffff+0x162>
 80035aa:	ed97 7a03 	vldr	s14, [r7, #12]
 80035ae:	edd7 7a00 	vldr	s15, [r7]
 80035b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b6:	ee17 0a90 	vmov	r0, s15
 80035ba:	f7fc ffed 	bl	8000598 <__aeabi_f2d>
 80035be:	2301      	movs	r3, #1
 80035c0:	461d      	mov	r5, r3
 80035c2:	a317      	add	r3, pc, #92	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd fab0 	bl	8000b2c <__aeabi_dcmplt>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <_Z10MatchThreeffffff+0x15e>
 80035d2:	2300      	movs	r3, #0
 80035d4:	461d      	mov	r5, r3
 80035d6:	b2eb      	uxtb	r3, r5
 80035d8:	e016      	b.n	8003608 <_Z10MatchThreeffffff+0x190>
 80035da:	ed97 7a00 	vldr	s14, [r7]
 80035de:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035e6:	ee17 0a90 	vmov	r0, s15
 80035ea:	f7fc ffd5 	bl	8000598 <__aeabi_f2d>
 80035ee:	2301      	movs	r3, #1
 80035f0:	461d      	mov	r5, r3
 80035f2:	a30b      	add	r3, pc, #44	; (adr r3, 8003620 <_Z10MatchThreeffffff+0x1a8>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fd fa98 	bl	8000b2c <__aeabi_dcmplt>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <_Z10MatchThreeffffff+0x18e>
 8003602:	2300      	movs	r3, #0
 8003604:	461d      	mov	r5, r3
 8003606:	b2eb      	uxtb	r3, r5
 8003608:	4023      	ands	r3, r4
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	77fb      	strb	r3, [r7, #31]

	return all_match;
 8003614:	7ffb      	ldrb	r3, [r7, #31]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bdb0      	pop	{r4, r5, r7, pc}
 800361e:	bf00      	nop
 8003620:	9999999a 	.word	0x9999999a
 8003624:	3fb99999 	.word	0x3fb99999

08003628 <_Z16TestTransFwddDQZv>:

bool TestTransFwddDQZ() {
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b098      	sub	sp, #96	; 0x60
 800362e:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward DQZ\r\n");
 8003630:	4841      	ldr	r0, [pc, #260]	; (8003738 <_Z16TestTransFwddDQZv+0x110>)
 8003632:	f00b fd5d 	bl	800f0f0 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 8003636:	4841      	ldr	r0, [pc, #260]	; (800373c <_Z16TestTransFwddDQZv+0x114>)
 8003638:	f00b fd5a 	bl	800f0f0 <puts>

	float theta = 123.0f;
 800363c:	4b40      	ldr	r3, [pc, #256]	; (8003740 <_Z16TestTransFwddDQZv+0x118>)
 800363e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
	float i_q = 0.0f;
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
	float i_z = 0.0f;
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	613b      	str	r3, [r7, #16]

	float i_u = 1.0f;
 8003652:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
	float i_v = 2.0f;
 8003658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_w = 3.0f;
 800365e:	4b39      	ldr	r3, [pc, #228]	; (8003744 <_Z16TestTransFwddDQZv+0x11c>)
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28


	float expect_i_d =  0.074014f;
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <_Z16TestTransFwddDQZv+0x120>)
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_q =  1.412275f;
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <_Z16TestTransFwddDQZv+0x124>)
 8003668:	623b      	str	r3, [r7, #32]
	float expect_i_z =  3.464102f;
 800366a:	4b39      	ldr	r3, [pc, #228]	; (8003750 <_Z16TestTransFwddDQZv+0x128>)
 800366c:	61fb      	str	r3, [r7, #28]

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 800366e:	f107 0210 	add.w	r2, r7, #16
 8003672:	f107 0114 	add.w	r1, r7, #20
 8003676:	f107 0318 	add.w	r3, r7, #24
 800367a:	4618      	mov	r0, r3
 800367c:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003680:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003684:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003688:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 800368c:	f7fe fe2a 	bl	80022e4 <_Z11TransFwdDQZffffRfS_S_>

	if (!MatchThree(i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z)) {
 8003690:	edd7 7a06 	vldr	s15, [r7, #24]
 8003694:	ed97 7a05 	vldr	s14, [r7, #20]
 8003698:	edd7 6a04 	vldr	s13, [r7, #16]
 800369c:	edd7 2a07 	vldr	s5, [r7, #28]
 80036a0:	ed97 2a08 	vldr	s4, [r7, #32]
 80036a4:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80036a8:	eeb0 1a66 	vmov.f32	s2, s13
 80036ac:	eef0 0a47 	vmov.f32	s1, s14
 80036b0:	eeb0 0a67 	vmov.f32	s0, s15
 80036b4:	f7ff fee0 	bl	8003478 <_Z10MatchThreeffffff>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f083 0301 	eor.w	r3, r3, #1
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d033      	beq.n	800372c <_Z16TestTransFwddDQZv+0x104>
		TT_FAIL_PRINT("DQZ currents do not match.\r\n\t\tReceived: i_d = %f i_q = %f i_z = %f\r\n\t\tExpected: i_d = %f i_q = %f i_z = %f\r\n",
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fc ff66 	bl	8000598 <__aeabi_f2d>
 80036cc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff60 	bl	8000598 <__aeabi_f2d>
 80036d8:	4604      	mov	r4, r0
 80036da:	460d      	mov	r5, r1
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fc ff5a 	bl	8000598 <__aeabi_f2d>
 80036e4:	4680      	mov	r8, r0
 80036e6:	4689      	mov	r9, r1
 80036e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036ea:	f7fc ff55 	bl	8000598 <__aeabi_f2d>
 80036ee:	4682      	mov	sl, r0
 80036f0:	468b      	mov	fp, r1
 80036f2:	6a38      	ldr	r0, [r7, #32]
 80036f4:	f7fc ff50 	bl	8000598 <__aeabi_f2d>
 80036f8:	e9c7 0100 	strd	r0, r1, [r7]
 80036fc:	69f8      	ldr	r0, [r7, #28]
 80036fe:	f7fc ff4b 	bl	8000598 <__aeabi_f2d>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800370a:	ed97 7b00 	vldr	d7, [r7]
 800370e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003712:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003716:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800371a:	e9cd 4500 	strd	r4, r5, [sp]
 800371e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003722:	480c      	ldr	r0, [pc, #48]	; (8003754 <_Z16TestTransFwddDQZv+0x12c>)
 8003724:	f00b fc5e 	bl	800efe4 <iprintf>
				i_d, i_q, i_z, expect_i_d, expect_i_q, expect_i_z);
		return false;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <_Z16TestTransFwddDQZv+0x106>
	}

	return true;
 800372c:	2301      	movs	r3, #1
}
 800372e:	4618      	mov	r0, r3
 8003730:	3738      	adds	r7, #56	; 0x38
 8003732:	46bd      	mov	sp, r7
 8003734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003738:	08011910 	.word	0x08011910
 800373c:	0801192c 	.word	0x0801192c
 8003740:	42f60000 	.word	0x42f60000
 8003744:	40400000 	.word	0x40400000
 8003748:	3d9794a7 	.word	0x3d9794a7
 800374c:	3fb4c56d 	.word	0x3fb4c56d
 8003750:	405db3d9 	.word	0x405db3d9
 8003754:	08011958 	.word	0x08011958

08003758 <_Z15TestTransRevDQZv>:

bool TestTransRevDQZ() {
 8003758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800375c:	b098      	sub	sp, #96	; 0x60
 800375e:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Reverse DQZ\r\n");
 8003760:	4841      	ldr	r0, [pc, #260]	; (8003868 <_Z15TestTransRevDQZv+0x110>)
 8003762:	f00b fcc5 	bl	800f0f0 <puts>

	T_TEST_PRINT("Give 'em the good ol 123.\r\n");
 8003766:	4841      	ldr	r0, [pc, #260]	; (800386c <_Z15TestTransRevDQZv+0x114>)
 8003768:	f00b fcc2 	bl	800f0f0 <puts>

	float theta = 123.0f;
 800376c:	4b40      	ldr	r3, [pc, #256]	; (8003870 <_Z15TestTransRevDQZv+0x118>)
 800376e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_u = 0.0f;
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
	float i_v = 0.0f;
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
	float i_w = 0.0f;
 800377c:	f04f 0300 	mov.w	r3, #0
 8003780:	613b      	str	r3, [r7, #16]

	float i_d = 1.0f;
 8003782:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003786:	633b      	str	r3, [r7, #48]	; 0x30
	float i_q = 2.0f;
 8003788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800378c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float i_z = 3.0f;
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <_Z15TestTransRevDQZv+0x11c>)
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28

	float expect_i_u =  -0.082188;
 8003792:	4b39      	ldr	r3, [pc, #228]	; (8003878 <_Z15TestTransRevDQZv+0x120>)
 8003794:	627b      	str	r3, [r7, #36]	; 0x24
	float expect_i_v =  2.461964;
 8003796:	4b39      	ldr	r3, [pc, #228]	; (800387c <_Z15TestTransRevDQZv+0x124>)
 8003798:	623b      	str	r3, [r7, #32]
	float expect_i_w =  2.816377;
 800379a:	4b39      	ldr	r3, [pc, #228]	; (8003880 <_Z15TestTransRevDQZv+0x128>)
 800379c:	61fb      	str	r3, [r7, #28]

	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 800379e:	f107 0210 	add.w	r2, r7, #16
 80037a2:	f107 0114 	add.w	r1, r7, #20
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	4618      	mov	r0, r3
 80037ac:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 80037b0:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 80037b4:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 80037b8:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80037bc:	f7fe fe38 	bl	8002430 <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 80037c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80037c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80037c8:	edd7 6a04 	vldr	s13, [r7, #16]
 80037cc:	edd7 2a07 	vldr	s5, [r7, #28]
 80037d0:	ed97 2a08 	vldr	s4, [r7, #32]
 80037d4:	edd7 1a09 	vldr	s3, [r7, #36]	; 0x24
 80037d8:	eeb0 1a66 	vmov.f32	s2, s13
 80037dc:	eef0 0a47 	vmov.f32	s1, s14
 80037e0:	eeb0 0a67 	vmov.f32	s0, s15
 80037e4:	f7ff fe48 	bl	8003478 <_Z10MatchThreeffffff>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f083 0301 	eor.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d033      	beq.n	800385c <_Z15TestTransRevDQZv+0x104>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fc fece 	bl	8000598 <__aeabi_f2d>
 80037fc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fec8 	bl	8000598 <__aeabi_f2d>
 8003808:	4604      	mov	r4, r0
 800380a:	460d      	mov	r5, r1
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fc fec2 	bl	8000598 <__aeabi_f2d>
 8003814:	4680      	mov	r8, r0
 8003816:	4689      	mov	r9, r1
 8003818:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800381a:	f7fc febd 	bl	8000598 <__aeabi_f2d>
 800381e:	4682      	mov	sl, r0
 8003820:	468b      	mov	fp, r1
 8003822:	6a38      	ldr	r0, [r7, #32]
 8003824:	f7fc feb8 	bl	8000598 <__aeabi_f2d>
 8003828:	e9c7 0100 	strd	r0, r1, [r7]
 800382c:	69f8      	ldr	r0, [r7, #28]
 800382e:	f7fc feb3 	bl	8000598 <__aeabi_f2d>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800383a:	ed97 7b00 	vldr	d7, [r7]
 800383e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003842:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003846:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800384a:	e9cd 4500 	strd	r4, r5, [sp]
 800384e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003852:	480c      	ldr	r0, [pc, #48]	; (8003884 <_Z15TestTransRevDQZv+0x12c>)
 8003854:	f00b fbc6 	bl	800efe4 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <_Z15TestTransRevDQZv+0x106>
	}

	return true;
 800385c:	2301      	movs	r3, #1
}
 800385e:	4618      	mov	r0, r3
 8003860:	3738      	adds	r7, #56	; 0x38
 8003862:	46bd      	mov	sp, r7
 8003864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003868:	080119e0 	.word	0x080119e0
 800386c:	0801192c 	.word	0x0801192c
 8003870:	42f60000 	.word	0x42f60000
 8003874:	40400000 	.word	0x40400000
 8003878:	bda8522f 	.word	0xbda8522f
 800387c:	401d90d1 	.word	0x401d90d1
 8003880:	40343f85 	.word	0x40343f85
 8003884:	080119fc 	.word	0x080119fc

08003888 <_Z18TestTransFwdRevDQZv>:

bool TestTransFwdRevDQZ() {
 8003888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800388c:	b098      	sub	sp, #96	; 0x60
 800388e:	af0a      	add	r7, sp, #40	; 0x28
	TEST_PRINT("Forward then Reverse DQZ\r\n");
 8003890:	484f      	ldr	r0, [pc, #316]	; (80039d0 <_Z18TestTransFwdRevDQZv+0x148>)
 8003892:	f00b fc2d 	bl	800f0f0 <puts>

	T_TEST_PRINT("Random values.\r\n");
 8003896:	484f      	ldr	r0, [pc, #316]	; (80039d4 <_Z18TestTransFwdRevDQZv+0x14c>)
 8003898:	f00b fc2a 	bl	800f0f0 <puts>

	float theta = 123.0f;
 800389c:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <_Z18TestTransFwdRevDQZv+0x150>)
 800389e:	637b      	str	r3, [r7, #52]	; 0x34

	float i_d = 0.0f;
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
	float i_q = 0.0f;
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	623b      	str	r3, [r7, #32]
	float i_z = 0.0f;
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]

	float i_u = 5.878f;
 80038b2:	4b4a      	ldr	r3, [pc, #296]	; (80039dc <_Z18TestTransFwdRevDQZv+0x154>)
 80038b4:	61bb      	str	r3, [r7, #24]
	float i_v = -1234.5f;
 80038b6:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <_Z18TestTransFwdRevDQZv+0x158>)
 80038b8:	617b      	str	r3, [r7, #20]
	float i_w = 68.547f;
 80038ba:	4b4a      	ldr	r3, [pc, #296]	; (80039e4 <_Z18TestTransFwdRevDQZv+0x15c>)
 80038bc:	613b      	str	r3, [r7, #16]

	float expect_i_u =  i_u;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
	float expect_i_v =  i_v;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	float expect_i_w =  i_w;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28

	TransFwdDQZ(theta, i_u, i_v, i_w, i_d, i_q, i_z);
 80038ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80038ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80038d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80038d6:	f107 021c 	add.w	r2, r7, #28
 80038da:	f107 0120 	add.w	r1, r7, #32
 80038de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e2:	4618      	mov	r0, r3
 80038e4:	eef0 1a66 	vmov.f32	s3, s13
 80038e8:	eeb0 1a47 	vmov.f32	s2, s14
 80038ec:	eef0 0a67 	vmov.f32	s1, s15
 80038f0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 80038f4:	f7fe fcf6 	bl	80022e4 <_Z11TransFwdDQZffffRfS_S_>
	TransRevDQZ(theta, i_d, i_q, i_z, i_u, i_v, i_w);
 80038f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80038fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003900:	edd7 6a07 	vldr	s13, [r7, #28]
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	f107 0114 	add.w	r1, r7, #20
 800390c:	f107 0318 	add.w	r3, r7, #24
 8003910:	4618      	mov	r0, r3
 8003912:	eef0 1a66 	vmov.f32	s3, s13
 8003916:	eeb0 1a47 	vmov.f32	s2, s14
 800391a:	eef0 0a67 	vmov.f32	s1, s15
 800391e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003922:	f7fe fd85 	bl	8002430 <_Z11TransRevDQZffffRfS_S_>

	if (!MatchThree(i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w)) {
 8003926:	edd7 7a06 	vldr	s15, [r7, #24]
 800392a:	ed97 7a05 	vldr	s14, [r7, #20]
 800392e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003932:	edd7 2a0a 	vldr	s5, [r7, #40]	; 0x28
 8003936:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 800393a:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 800393e:	eeb0 1a66 	vmov.f32	s2, s13
 8003942:	eef0 0a47 	vmov.f32	s1, s14
 8003946:	eeb0 0a67 	vmov.f32	s0, s15
 800394a:	f7ff fd95 	bl	8003478 <_Z10MatchThreeffffff>
 800394e:	4603      	mov	r3, r0
 8003950:	f083 0301 	eor.w	r3, r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d033      	beq.n	80039c2 <_Z18TestTransFwdRevDQZv+0x13a>
		TT_FAIL_PRINT("XYZ currents do not match.\r\n\t\tReceived: i_u = %f i_v = %f i_w = %f\r\n\t\tExpected: i_u = %f i_v = %f i_w = %f\r\n",
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4618      	mov	r0, r3
 800395e:	f7fc fe1b 	bl	8000598 <__aeabi_f2d>
 8003962:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fe15 	bl	8000598 <__aeabi_f2d>
 800396e:	4604      	mov	r4, r0
 8003970:	460d      	mov	r5, r1
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fe0f 	bl	8000598 <__aeabi_f2d>
 800397a:	4680      	mov	r8, r0
 800397c:	4689      	mov	r9, r1
 800397e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003980:	f7fc fe0a 	bl	8000598 <__aeabi_f2d>
 8003984:	4682      	mov	sl, r0
 8003986:	468b      	mov	fp, r1
 8003988:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800398a:	f7fc fe05 	bl	8000598 <__aeabi_f2d>
 800398e:	e9c7 0100 	strd	r0, r1, [r7]
 8003992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003994:	f7fc fe00 	bl	8000598 <__aeabi_f2d>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80039a0:	ed97 7b00 	vldr	d7, [r7]
 80039a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80039a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80039ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80039b0:	e9cd 4500 	strd	r4, r5, [sp]
 80039b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b8:	480b      	ldr	r0, [pc, #44]	; (80039e8 <_Z18TestTransFwdRevDQZv+0x160>)
 80039ba:	f00b fb13 	bl	800efe4 <iprintf>
				i_u, i_v, i_w, expect_i_u, expect_i_v, expect_i_w);
		return false;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <_Z18TestTransFwdRevDQZv+0x13c>
	}

	return true;
 80039c2:	2301      	movs	r3, #1
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ce:	bf00      	nop
 80039d0:	08011a84 	.word	0x08011a84
 80039d4:	08011ab0 	.word	0x08011ab0
 80039d8:	42f60000 	.word	0x42f60000
 80039dc:	40bc1893 	.word	0x40bc1893
 80039e0:	c49a5000 	.word	0xc49a5000
 80039e4:	42891810 	.word	0x42891810
 80039e8:	080119fc 	.word	0x080119fc

080039ec <_Z15TestFOCUtilsAllv>:

void TestFOCUtilsAll() {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
	L_PRINT("FOC Utils");
 80039f2:	491a      	ldr	r1, [pc, #104]	; (8003a5c <_Z15TestFOCUtilsAllv+0x70>)
 80039f4:	481a      	ldr	r0, [pc, #104]	; (8003a60 <_Z15TestFOCUtilsAllv+0x74>)
 80039f6:	f00b faf5 	bl	800efe4 <iprintf>
	bool utils_ok = true;
 80039fa:	2301      	movs	r3, #1
 80039fc:	71fb      	strb	r3, [r7, #7]

	utils_ok &= TestTransFwddDQZ();
 80039fe:	f7ff fe13 	bl	8003628 <_Z16TestTransFwddDQZv>
 8003a02:	4603      	mov	r3, r0
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransRevDQZ();
 8003a14:	f7ff fea0 	bl	8003758 <_Z15TestTransRevDQZv>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	79fb      	ldrb	r3, [r7, #7]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	71fb      	strb	r3, [r7, #7]
	utils_ok &= TestTransFwdRevDQZ();
 8003a2a:	f7ff ff2d 	bl	8003888 <_Z18TestTransFwdRevDQZv>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	71fb      	strb	r3, [r7, #7]

	if (utils_ok) {
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <_Z15TestFOCUtilsAllv+0x62>
		PASS_PRINT("FOC Utils\r\n");
 8003a46:	4807      	ldr	r0, [pc, #28]	; (8003a64 <_Z15TestFOCUtilsAllv+0x78>)
 8003a48:	f00b fb52 	bl	800f0f0 <puts>
	} else {
		FAIL_PRINT("FOC Utils\r\n");
	}
}
 8003a4c:	e002      	b.n	8003a54 <_Z15TestFOCUtilsAllv+0x68>
		FAIL_PRINT("FOC Utils\r\n");
 8003a4e:	4806      	ldr	r0, [pc, #24]	; (8003a68 <_Z15TestFOCUtilsAllv+0x7c>)
 8003a50:	f00b fb4e 	bl	800f0f0 <puts>
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	08011ad4 	.word	0x08011ad4
 8003a60:	08011ae0 	.word	0x08011ae0
 8003a64:	08011af4 	.word	0x08011af4
 8003a68:	08011b18 	.word	0x08011b18

08003a6c <_ZN10HalfBridgeC1Ev>:
#ifndef MOTOR_INC_HALF_BRIDGE_HH_
#define MOTOR_INC_HALF_BRIDGE_HH_

#include <stdint.h>

class HalfBridge {
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <_ZN10HalfBridgeC1Ev+0x34>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	731a      	strb	r2, [r3, #12]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	080122f8 	.word	0x080122f8

08003aa4 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>:
	 * @param[in] timer_channel_id 			Identifier of the channel on the HAL timer being used for the EN/IN pin PWM.
	 * @param[in] curr_sense_adc_voltage	Pointer to the ADC current sense value, to be updated continuously over DMA.
	 * 										Passed as a const reference; will not be changed by the STSPIN830. Is a count
	 * 										out of the full resolution of the ADC.
	 */
	STSPIN830(
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
		uint32_t timer_channel_id,
		const volatile uint16_t& curr_sense_adc_voltage)
		: timer_(timer)
		, timer_channel_id_(timer_channel_id)
		, curr_sense_adc_counts_(curr_sense_adc_voltage)
		, pid(0.0005f, 0.0f, 0.000f, 0.0, 0.0){};
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ffd9 	bl	8003a6c <_ZN10HalfBridgeC1Ev>
 8003aba:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x7c>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	615a      	str	r2, [r3, #20]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	619a      	str	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	61da      	str	r2, [r3, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	621a      	str	r2, [r3, #32]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	332c      	adds	r3, #44	; 0x2c
 8003afc:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8003b24 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8003b00:	eddf 1a08 	vldr	s3, [pc, #32]	; 8003b24 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8003b04:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8003b24 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8003b08:	eddf 0a06 	vldr	s1, [pc, #24]	; 8003b24 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x80>
 8003b0c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003b28 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt+0x84>
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fa1b 	bl	8001f4c <_ZN13PIDControllerC1Efffff>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	080122a0 	.word	0x080122a0
 8003b24:	00000000 	.word	0x00000000
 8003b28:	3a03126f 	.word	0x3a03126f

08003b2c <_Z20TestHalfBridgeCreatev>:

/**
 * Test Setup Instructions
 */

bool TestHalfBridgeCreate() {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b096      	sub	sp, #88	; 0x58
 8003b30:	af00      	add	r7, sp, #0
	TIM_HandleTypeDef * dummy_timer = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t dummy_timer_id = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t adc_buf[1];
	STSPIN830 half_bridge(
			dummy_timer,
			dummy_timer_id,
			adc_buf[0]);
 8003b3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b3e:	4638      	mov	r0, r7
 8003b40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b44:	f7ff ffae 	bl	8003aa4 <_ZN9STSPIN830C1EP17TIM_HandleTypeDefmRVKt>

	if (half_bridge.get_op_mode() != HalfBridge::OFF) {
 8003b48:	463b      	mov	r3, r7
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7fd fd30 	bl	80015b0 <_ZN10HalfBridge11get_op_modeEv>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bf14      	ite	ne
 8003b56:	2301      	movne	r3, #1
 8003b58:	2300      	moveq	r3, #0
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d004      	beq.n	8003b6a <_Z20TestHalfBridgeCreatev+0x3e>
		FAIL_PRINT("HalfBridge not initialized in OFF op mode.\r\n");
 8003b60:	4804      	ldr	r0, [pc, #16]	; (8003b74 <_Z20TestHalfBridgeCreatev+0x48>)
 8003b62:	f00b fac5 	bl	800f0f0 <puts>
		return false;
 8003b66:	2300      	movs	r3, #0
 8003b68:	e000      	b.n	8003b6c <_Z20TestHalfBridgeCreatev+0x40>
	}
	return true;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3758      	adds	r7, #88	; 0x58
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	08011b3c 	.word	0x08011b3c

08003b78 <_Z17TestHalfBridgeAllv>:
	}
}
#endif


void TestHalfBridgeAll() {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
	L_PRINT("Test HalfBridge Class");
 8003b7e:	490f      	ldr	r1, [pc, #60]	; (8003bbc <_Z17TestHalfBridgeAllv+0x44>)
 8003b80:	480f      	ldr	r0, [pc, #60]	; (8003bc0 <_Z17TestHalfBridgeAllv+0x48>)
 8003b82:	f00b fa2f 	bl	800efe4 <iprintf>
	bool hb_passed = true;
 8003b86:	2301      	movs	r3, #1
 8003b88:	71fb      	strb	r3, [r7, #7]
	hb_passed &= TestHalfBridgeCreate();
 8003b8a:	f7ff ffcf 	bl	8003b2c <_Z20TestHalfBridgeCreatev>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	461a      	mov	r2, r3
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	bf14      	ite	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	2300      	moveq	r3, #0
 8003b9e:	71fb      	strb	r3, [r7, #7]
#ifdef HARDWARE_TEST
	hb_passed &= TestHalfBridgeHardware();
#endif
	if (hb_passed) {
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <_Z17TestHalfBridgeAllv+0x36>
		PASS_PRINT("HalfBridge Class\r\n");
 8003ba6:	4807      	ldr	r0, [pc, #28]	; (8003bc4 <_Z17TestHalfBridgeAllv+0x4c>)
 8003ba8:	f00b faa2 	bl	800f0f0 <puts>
	} else {
		FAIL_PRINT("HalfBridge Class\r\n");
	}

}
 8003bac:	e002      	b.n	8003bb4 <_Z17TestHalfBridgeAllv+0x3c>
		FAIL_PRINT("HalfBridge Class\r\n");
 8003bae:	4806      	ldr	r0, [pc, #24]	; (8003bc8 <_Z17TestHalfBridgeAllv+0x50>)
 8003bb0:	f00b fa9e 	bl	800f0f0 <puts>
}
 8003bb4:	bf00      	nop
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	08011b80 	.word	0x08011b80
 8003bc0:	08011b98 	.word	0x08011b98
 8003bc4:	08011bac 	.word	0x08011bac
 8003bc8:	08011bd8 	.word	0x08011bd8

08003bcc <_Z21TestMotorDriverCreatev>:

#include "test_framework.hh"
#include "test_motor_driver.hh"
#include "motor_driver.hh"

bool TestMotorDriverCreate() {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08e      	sub	sp, #56	; 0x38
 8003bd0:	af00      	add	r7, sp, #0
	float duty_cycle_max = 0.95;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <_Z21TestMotorDriverCreatev+0x34>)
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
	float duty_cycle_min = 0.05;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <_Z21TestMotorDriverCreatev+0x38>)
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t pulse_max_in = 0xFFFF;
 8003bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bde:	85fb      	strh	r3, [r7, #46]	; 0x2e

	MotorDriver md(duty_cycle_max, duty_cycle_min, pulse_max_in);
 8003be0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	4611      	mov	r1, r2
 8003be6:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003bea:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe fd32 	bl	8002658 <_ZN11MotorDriverC1Efft>
	return true;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3738      	adds	r7, #56	; 0x38
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	3f733333 	.word	0x3f733333
 8003c04:	3d4ccccd 	.word	0x3d4ccccd

08003c08 <_Z18TestMotorDriverAllv>:

void TestMotorDriverAll() {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
	L_PRINT("MotorDriver Class");
 8003c0e:	490f      	ldr	r1, [pc, #60]	; (8003c4c <_Z18TestMotorDriverAllv+0x44>)
 8003c10:	480f      	ldr	r0, [pc, #60]	; (8003c50 <_Z18TestMotorDriverAllv+0x48>)
 8003c12:	f00b f9e7 	bl	800efe4 <iprintf>
	bool md_ok = true;
 8003c16:	2301      	movs	r3, #1
 8003c18:	71fb      	strb	r3, [r7, #7]
	md_ok &= TestMotorDriverCreate();
 8003c1a:	f7ff ffd7 	bl	8003bcc <_Z21TestMotorDriverCreatev>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	461a      	mov	r2, r3
 8003c22:	79fb      	ldrb	r3, [r7, #7]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	71fb      	strb	r3, [r7, #7]
	if (md_ok) {
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <_Z18TestMotorDriverAllv+0x36>
		PASS_PRINT("MotorDriver Class\r\n");
 8003c36:	4807      	ldr	r0, [pc, #28]	; (8003c54 <_Z18TestMotorDriverAllv+0x4c>)
 8003c38:	f00b fa5a 	bl	800f0f0 <puts>
	} else {
		FAIL_PRINT("MotorDriver Class\r\n");
	}

}
 8003c3c:	e002      	b.n	8003c44 <_Z18TestMotorDriverAllv+0x3c>
		FAIL_PRINT("MotorDriver Class\r\n");
 8003c3e:	4806      	ldr	r0, [pc, #24]	; (8003c58 <_Z18TestMotorDriverAllv+0x50>)
 8003c40:	f00b fa56 	bl	800f0f0 <puts>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	08011c04 	.word	0x08011c04
 8003c50:	08011c18 	.word	0x08011c18
 8003c54:	08011c2c 	.word	0x08011c2c
 8003c58:	08011c58 	.word	0x08011c58

08003c5c <_Z23TestPIDControllerCreatev>:
#include "pid_controller.hh"
#include "foc_utils.hh"

const float kErrorMargin = 0.01;

bool TestPIDControllerCreate() {
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b090      	sub	sp, #64	; 0x40
 8003c60:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 8003c62:	485a      	ldr	r0, [pc, #360]	; (8003dcc <_Z23TestPIDControllerCreatev+0x170>)
 8003c64:	f00b fa44 	bl	800f0f0 <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 8003c68:	4859      	ldr	r0, [pc, #356]	; (8003dd0 <_Z23TestPIDControllerCreatev+0x174>)
 8003c6a:	f00b fa41 	bl	800f0f0 <puts>
	float k_p = 1.2;
 8003c6e:	4b59      	ldr	r3, [pc, #356]	; (8003dd4 <_Z23TestPIDControllerCreatev+0x178>)
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
	float k_i = 3.4;
 8003c72:	4b59      	ldr	r3, [pc, #356]	; (8003dd8 <_Z23TestPIDControllerCreatev+0x17c>)
 8003c74:	633b      	str	r3, [r7, #48]	; 0x30
	float k_d = 5.6;
 8003c76:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <_Z23TestPIDControllerCreatev+0x180>)
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ramp = 5.1;
 8003c7a:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <_Z23TestPIDControllerCreatev+0x184>)
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
	float limit = 2.2;
 8003c7e:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <_Z23TestPIDControllerCreatev+0x188>)
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
	PIDController pid(k_p, k_i, k_d, ramp, limit);
 8003c82:	1d3b      	adds	r3, r7, #4
 8003c84:	ed97 2a09 	vldr	s4, [r7, #36]	; 0x24
 8003c88:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8003c8c:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8003c90:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8003c94:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe f957 	bl	8001f4c <_ZN13PIDControllerC1Efffff>

	if (pid.k_p != k_p) {
 8003c9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ca2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003ca6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cae:	d013      	beq.n	8003cd8 <_Z23TestPIDControllerCreatev+0x7c>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8003cb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003cb2:	f7fc fc71 	bl	8000598 <__aeabi_f2d>
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	460d      	mov	r5, r1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fc6b 	bl	8000598 <__aeabi_f2d>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	4846      	ldr	r0, [pc, #280]	; (8003de8 <_Z23TestPIDControllerCreatev+0x18c>)
 8003cd0:	f00b f988 	bl	800efe4 <iprintf>
		return false;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e074      	b.n	8003dc2 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_i != k_i) {
 8003cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cdc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003ce0:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce8:	d013      	beq.n	8003d12 <_Z23TestPIDControllerCreatev+0xb6>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 8003cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cec:	f7fc fc54 	bl	8000598 <__aeabi_f2d>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	e9cd 2300 	strd	r2, r3, [sp]
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	4838      	ldr	r0, [pc, #224]	; (8003dec <_Z23TestPIDControllerCreatev+0x190>)
 8003d0a:	f00b f96b 	bl	800efe4 <iprintf>
		return false;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e057      	b.n	8003dc2 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.k_d != k_d) {
 8003d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d16:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d22:	d013      	beq.n	8003d4c <_Z23TestPIDControllerCreatev+0xf0>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 8003d24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d26:	f7fc fc37 	bl	8000598 <__aeabi_f2d>
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	460d      	mov	r5, r1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fc31 	bl	8000598 <__aeabi_f2d>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	e9cd 2300 	strd	r2, r3, [sp]
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	482b      	ldr	r0, [pc, #172]	; (8003df0 <_Z23TestPIDControllerCreatev+0x194>)
 8003d44:	f00b f94e 	bl	800efe4 <iprintf>
		return false;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e03a      	b.n	8003dc2 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.ramp != ramp) {
 8003d4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003d54:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	d013      	beq.n	8003d86 <_Z23TestPIDControllerCreatev+0x12a>
		T_FAIL_PRINT("Incorrect ramp, constructed with %f but got %f.\r\n", ramp, pid.ramp);
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	f7fc fc1a 	bl	8000598 <__aeabi_f2d>
 8003d64:	4604      	mov	r4, r0
 8003d66:	460d      	mov	r5, r1
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc fc14 	bl	8000598 <__aeabi_f2d>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	e9cd 2300 	strd	r2, r3, [sp]
 8003d78:	4622      	mov	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	481d      	ldr	r0, [pc, #116]	; (8003df4 <_Z23TestPIDControllerCreatev+0x198>)
 8003d7e:	f00b f931 	bl	800efe4 <iprintf>
		return false;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e01d      	b.n	8003dc2 <_Z23TestPIDControllerCreatev+0x166>
	}
	if (pid.limit != limit) {
 8003d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d8a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003d8e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d013      	beq.n	8003dc0 <_Z23TestPIDControllerCreatev+0x164>
		T_FAIL_PRINT("Incorrect limit, constructed with %f but got %f.\r\n", limit, pid.limit);
 8003d98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d9a:	f7fc fbfd 	bl	8000598 <__aeabi_f2d>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	460d      	mov	r5, r1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc fbf7 	bl	8000598 <__aeabi_f2d>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	e9cd 2300 	strd	r2, r3, [sp]
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	4810      	ldr	r0, [pc, #64]	; (8003df8 <_Z23TestPIDControllerCreatev+0x19c>)
 8003db8:	f00b f914 	bl	800efe4 <iprintf>
		return false;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e000      	b.n	8003dc2 <_Z23TestPIDControllerCreatev+0x166>
}

	return true;
 8003dc0:	2301      	movs	r3, #1
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3738      	adds	r7, #56	; 0x38
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	08011c84 	.word	0x08011c84
 8003dd0:	08011cac 	.word	0x08011cac
 8003dd4:	3f99999a 	.word	0x3f99999a
 8003dd8:	4059999a 	.word	0x4059999a
 8003ddc:	40b33333 	.word	0x40b33333
 8003de0:	40a33333 	.word	0x40a33333
 8003de4:	400ccccd 	.word	0x400ccccd
 8003de8:	08011cdc 	.word	0x08011cdc
 8003dec:	08011d28 	.word	0x08011d28
 8003df0:	08011d74 	.word	0x08011d74
 8003df4:	08011dc0 	.word	0x08011dc0
 8003df8:	08011e0c 	.word	0x08011e0c

08003dfc <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 8003dfc:	b5b0      	push	{r4, r5, r7, lr}
 8003dfe:	b092      	sub	sp, #72	; 0x48
 8003e00:	af02      	add	r7, sp, #8
	float state = 0;
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	float target = 0;
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	63bb      	str	r3, [r7, #56]	; 0x38
	float output = 0;
 8003e0e:	f04f 0300 	mov.w	r3, #0
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34

	float ramp = 0;
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
	float limit = 0;
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

	TEST_PRINT("Test PID Controller Response.\r\n");
 8003e20:	48b7      	ldr	r0, [pc, #732]	; (8004100 <_Z25TestPIDControllerResponsev+0x304>)
 8003e22:	f00b f965 	bl	800f0f0 <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 8003e26:	48b7      	ldr	r0, [pc, #732]	; (8004104 <_Z25TestPIDControllerResponsev+0x308>)
 8003e28:	f00b f962 	bl	800f0f0 <puts>
	PIDController pid = PIDController(0, 0, 0, ramp, limit);
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	ed97 2a0b 	vldr	s4, [r7, #44]	; 0x2c
 8003e32:	edd7 1a0c 	vldr	s3, [r7, #48]	; 0x30
 8003e36:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8004108 <_Z25TestPIDControllerResponsev+0x30c>
 8003e3a:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8004108 <_Z25TestPIDControllerResponsev+0x30c>
 8003e3e:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8004108 <_Z25TestPIDControllerResponsev+0x30c>
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe f882 	bl	8001f4c <_ZN13PIDControllerC1Efffff>
	output = pid.Update(0.0f, 10.0f);
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8003e4e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8004108 <_Z25TestPIDControllerResponsev+0x30c>
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7fe f8c0 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8003e58:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	if (output != 0) {
 8003e5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e60:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e68:	d00f      	beq.n	8003e8a <_Z25TestPIDControllerResponsev+0x8e>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, output);
 8003e6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e6c:	f7fc fb94 	bl	8000598 <__aeabi_f2d>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	e9cd 2300 	strd	r2, r3, [sp]
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	48a2      	ldr	r0, [pc, #648]	; (800410c <_Z25TestPIDControllerResponsev+0x310>)
 8003e82:	f00b f8af 	bl	800efe4 <iprintf>
		return false;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e282      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 8003e8a:	48a1      	ldr	r0, [pc, #644]	; (8004110 <_Z25TestPIDControllerResponsev+0x314>)
 8003e8c:	f00b f930 	bl	800f0f0 <puts>
	state = 1.0;
 8003e90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003e94:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 2.0;
 8003e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	pid.k_p = 5.0;
 8003e9c:	4b9d      	ldr	r3, [pc, #628]	; (8004114 <_Z25TestPIDControllerResponsev+0x318>)
 8003e9e:	607b      	str	r3, [r7, #4]
	output = pid.Update(state - target, 10.5);
 8003ea0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ea4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	eef2 0a05 	vmov.f32	s1, #37	; 0x41280000  10.5
 8003eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f88e 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8003ebc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	float expect_output = (1.0 - 2.0) * 5.0;
 8003ec0:	4b95      	ldr	r3, [pc, #596]	; (8004118 <_Z25TestPIDControllerResponsev+0x31c>)
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (output != expect_output) {
 8003ec4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003ec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ecc:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed4:	d012      	beq.n	8003efc <_Z25TestPIDControllerResponsev+0x100>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 8003ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed8:	f7fc fb5e 	bl	8000598 <__aeabi_f2d>
 8003edc:	4604      	mov	r4, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ee2:	f7fc fb59 	bl	8000598 <__aeabi_f2d>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	e9cd 2300 	strd	r2, r3, [sp]
 8003eee:	4622      	mov	r2, r4
 8003ef0:	462b      	mov	r3, r5
 8003ef2:	488a      	ldr	r0, [pc, #552]	; (800411c <_Z25TestPIDControllerResponsev+0x320>)
 8003ef4:	f00b f876 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e249      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 8003efc:	4888      	ldr	r0, [pc, #544]	; (8004120 <_Z25TestPIDControllerResponsev+0x324>)
 8003efe:	f00b f8f7 	bl	800f0f0 <puts>
	float prev_error = state - target;
 8003f02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f06:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f0e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pid.k_p = 0;
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	607b      	str	r3, [r7, #4]
	pid.k_i = 3;
 8003f18:	4b82      	ldr	r3, [pc, #520]	; (8004124 <_Z25TestPIDControllerResponsev+0x328>)
 8003f1a:	60bb      	str	r3, [r7, #8]
	target = 98.5;
 8003f1c:	4b82      	ldr	r3, [pc, #520]	; (8004128 <_Z25TestPIDControllerResponsev+0x32c>)
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 70;
 8003f20:	4b82      	ldr	r3, [pc, #520]	; (800412c <_Z25TestPIDControllerResponsev+0x330>)
 8003f22:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 10.7);
 8003f24:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f28:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f30:	1d3b      	adds	r3, r7, #4
 8003f32:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8004130 <_Z25TestPIDControllerResponsev+0x334>
 8003f36:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe f84c 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8003f40:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = pid.k_i * (prev_error + (state - target)) * 10.7f / 2.0f;
 8003f44:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f48:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003f4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003f50:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f60:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004130 <_Z25TestPIDControllerResponsev+0x334>
 8003f64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f70:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8003f74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	dd13      	ble.n	8003fae <_Z25TestPIDControllerResponsev+0x1b2>
 8003f86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003f8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004134 <_Z25TestPIDControllerResponsev+0x338>
 8003f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9e:	bf4c      	ite	mi
 8003fa0:	2301      	movmi	r3, #1
 8003fa2:	2300      	movpl	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f083 0301 	eor.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	e012      	b.n	8003fd4 <_Z25TestPIDControllerResponsev+0x1d8>
 8003fae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003fb2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fba:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004134 <_Z25TestPIDControllerResponsev+0x338>
 8003fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc6:	bf4c      	ite	mi
 8003fc8:	2301      	movmi	r3, #1
 8003fca:	2300      	movpl	r3, #0
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <_Z25TestPIDControllerResponsev+0x202>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 8003fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fda:	f7fc fadd 	bl	8000598 <__aeabi_f2d>
 8003fde:	4604      	mov	r4, r0
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003fe4:	f7fc fad8 	bl	8000598 <__aeabi_f2d>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	e9cd 2300 	strd	r2, r3, [sp]
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	4850      	ldr	r0, [pc, #320]	; (8004138 <_Z25TestPIDControllerResponsev+0x33c>)
 8003ff6:	f00a fff5 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e1c8      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 8003ffe:	484f      	ldr	r0, [pc, #316]	; (800413c <_Z25TestPIDControllerResponsev+0x340>)
 8004000:	f00b f876 	bl	800f0f0 <puts>
	prev_error = state - target;
 8004004:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004008:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800400c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004010:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	target = 2;
 8004014:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
	state = 5;
 800401a:	4b3e      	ldr	r3, [pc, #248]	; (8004114 <_Z25TestPIDControllerResponsev+0x318>)
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
	output = pid.Update(state - target, 11.9);
 800401e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004022:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	eddf 0a44 	vldr	s1, [pc, #272]	; 8004140 <_Z25TestPIDControllerResponsev+0x344>
 8004030:	eeb0 0a67 	vmov.f32	s0, s15
 8004034:	4618      	mov	r0, r3
 8004036:	f7fd ffcf 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 800403a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output += pid.k_i * (prev_error + (state - target)) * 11.9f / 2.0f;
 800403e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004042:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8004046:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800404a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800404e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004140 <_Z25TestPIDControllerResponsev+0x344>
 800405e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004062:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800406a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800406e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004072:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8004076:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800407a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800407e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004086:	dd13      	ble.n	80040b0 <_Z25TestPIDControllerResponsev+0x2b4>
 8004088:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800408c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004094:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004134 <_Z25TestPIDControllerResponsev+0x338>
 8004098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	bf4c      	ite	mi
 80040a2:	2301      	movmi	r3, #1
 80040a4:	2300      	movpl	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e012      	b.n	80040d6 <_Z25TestPIDControllerResponsev+0x2da>
 80040b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80040b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80040b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004134 <_Z25TestPIDControllerResponsev+0x338>
 80040c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c8:	bf4c      	ite	mi
 80040ca:	2301      	movmi	r3, #1
 80040cc:	2300      	movpl	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f083 0301 	eor.w	r3, r3, #1
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d036      	beq.n	8004148 <_Z25TestPIDControllerResponsev+0x34c>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 80040da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040dc:	f7fc fa5c 	bl	8000598 <__aeabi_f2d>
 80040e0:	4604      	mov	r4, r0
 80040e2:	460d      	mov	r5, r1
 80040e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80040e6:	f7fc fa57 	bl	8000598 <__aeabi_f2d>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	e9cd 2300 	strd	r2, r3, [sp]
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	4813      	ldr	r0, [pc, #76]	; (8004144 <_Z25TestPIDControllerResponsev+0x348>)
 80040f8:	f00a ff74 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e147      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
 8004100:	08011e58 	.word	0x08011e58
 8004104:	08011e88 	.word	0x08011e88
 8004108:	00000000 	.word	0x00000000
 800410c:	08011ec8 	.word	0x08011ec8
 8004110:	08011f1c 	.word	0x08011f1c
 8004114:	40a00000 	.word	0x40a00000
 8004118:	c0a00000 	.word	0xc0a00000
 800411c:	08011f3c 	.word	0x08011f3c
 8004120:	08011f8c 	.word	0x08011f8c
 8004124:	40400000 	.word	0x40400000
 8004128:	42c50000 	.word	0x42c50000
 800412c:	428c0000 	.word	0x428c0000
 8004130:	412b3333 	.word	0x412b3333
 8004134:	3c23d70a 	.word	0x3c23d70a
 8004138:	08011fac 	.word	0x08011fac
 800413c:	08011ffc 	.word	0x08011ffc
 8004140:	413e6666 	.word	0x413e6666
 8004144:	0801201c 	.word	0x0801201c
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 8004148:	4893      	ldr	r0, [pc, #588]	; (8004398 <_Z25TestPIDControllerResponsev+0x59c>)
 800414a:	f00a ffd1 	bl	800f0f0 <puts>
	pid.Reset();
 800414e:	1d3b      	adds	r3, r7, #4
 8004150:	4618      	mov	r0, r3
 8004152:	f7fe f839 	bl	80021c8 <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 8004156:	f04f 0300 	mov.w	r3, #0
 800415a:	607b      	str	r3, [r7, #4]
	pid.k_i = 0;
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	60bb      	str	r3, [r7, #8]
	pid.k_d = 0;
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
	output = pid.Update(5.0, 1.2);
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800439c <_Z25TestPIDControllerResponsev+0x5a0>
 800416e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd ff30 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 8004178:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8004182:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004186:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800418a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800418e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004192:	dd13      	ble.n	80041bc <_Z25TestPIDControllerResponsev+0x3c0>
 8004194:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800419c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041a0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 80041a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ac:	bf4c      	ite	mi
 80041ae:	2301      	movmi	r3, #1
 80041b0:	2300      	movpl	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e012      	b.n	80041e2 <_Z25TestPIDControllerResponsev+0x3e6>
 80041bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80041c0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80041c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c8:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 80041cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	bf4c      	ite	mi
 80041d6:	2301      	movmi	r3, #1
 80041d8:	2300      	movpl	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d012      	beq.n	800420c <_Z25TestPIDControllerResponsev+0x410>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 80041e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041e8:	f7fc f9d6 	bl	8000598 <__aeabi_f2d>
 80041ec:	4604      	mov	r4, r0
 80041ee:	460d      	mov	r5, r1
 80041f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80041f2:	f7fc f9d1 	bl	8000598 <__aeabi_f2d>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	e9cd 2300 	strd	r2, r3, [sp]
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	4868      	ldr	r0, [pc, #416]	; (80043a4 <_Z25TestPIDControllerResponsev+0x5a8>)
 8004204:	f00a feee 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 8004208:	2300      	movs	r3, #0
 800420a:	e0c1      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 800420c:	4866      	ldr	r0, [pc, #408]	; (80043a8 <_Z25TestPIDControllerResponsev+0x5ac>)
 800420e:	f00a ff6f 	bl	800f0f0 <puts>
	state = 0;
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 0;
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 800421e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004222:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800422a:	1d3b      	adds	r3, r7, #4
 800422c:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004230:	eeb0 0a67 	vmov.f32	s0, s15
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd fecf 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 800423a:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = 0;
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8004244:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004248:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800424c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004254:	dd13      	ble.n	800427e <_Z25TestPIDControllerResponsev+0x482>
 8004256:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800425a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800425e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004262:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 8004266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800426a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426e:	bf4c      	ite	mi
 8004270:	2301      	movmi	r3, #1
 8004272:	2300      	movpl	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f083 0301 	eor.w	r3, r3, #1
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e012      	b.n	80042a4 <_Z25TestPIDControllerResponsev+0x4a8>
 800427e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004282:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800428a:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 800428e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	bf4c      	ite	mi
 8004298:	2301      	movmi	r3, #1
 800429a:	2300      	movpl	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f083 0301 	eor.w	r3, r3, #1
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d012      	beq.n	80042ce <_Z25TestPIDControllerResponsev+0x4d2>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 80042a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042aa:	f7fc f975 	bl	8000598 <__aeabi_f2d>
 80042ae:	4604      	mov	r4, r0
 80042b0:	460d      	mov	r5, r1
 80042b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042b4:	f7fc f970 	bl	8000598 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	e9cd 2300 	strd	r2, r3, [sp]
 80042c0:	4622      	mov	r2, r4
 80042c2:	462b      	mov	r3, r5
 80042c4:	4839      	ldr	r0, [pc, #228]	; (80043ac <_Z25TestPIDControllerResponsev+0x5b0>)
 80042c6:	f00a fe8d 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e060      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 80042ce:	4838      	ldr	r0, [pc, #224]	; (80043b0 <_Z25TestPIDControllerResponsev+0x5b4>)
 80042d0:	f00a ff0e 	bl	800f0f0 <puts>
	pid.k_d = 13.5;
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <_Z25TestPIDControllerResponsev+0x5b8>)
 80042d6:	60fb      	str	r3, [r7, #12]
	state = -487.3;
 80042d8:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <_Z25TestPIDControllerResponsev+0x5bc>)
 80042da:	63fb      	str	r3, [r7, #60]	; 0x3c
	target = 22;
 80042dc:	4b37      	ldr	r3, [pc, #220]	; (80043bc <_Z25TestPIDControllerResponsev+0x5c0>)
 80042de:	63bb      	str	r3, [r7, #56]	; 0x38
	output = pid.Update(state - target, 10);
 80042e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80042e4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80042e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80042f2:	eeb0 0a67 	vmov.f32	s0, s15
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fe6e 	bl	8001fd8 <_ZN13PIDController6UpdateEff>
 80042fc:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
	expect_output = (-487.3 - 22) * 13.5 / 10;
 8004300:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <_Z25TestPIDControllerResponsev+0x5c4>)
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!WITHIN(output, expect_output, kErrorMargin)) {
 8004304:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004308:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800430c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004314:	dd13      	ble.n	800433e <_Z25TestPIDControllerResponsev+0x542>
 8004316:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800431a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800431e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004322:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 8004326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	bf4c      	ite	mi
 8004330:	2301      	movmi	r3, #1
 8004332:	2300      	movpl	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	f083 0301 	eor.w	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	e012      	b.n	8004364 <_Z25TestPIDControllerResponsev+0x568>
 800433e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004342:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80043a0 <_Z25TestPIDControllerResponsev+0x5a4>
 800434e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004356:	bf4c      	ite	mi
 8004358:	2301      	movmi	r3, #1
 800435a:	2300      	movpl	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f083 0301 	eor.w	r3, r3, #1
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <_Z25TestPIDControllerResponsev+0x592>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 8004368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436a:	f7fc f915 	bl	8000598 <__aeabi_f2d>
 800436e:	4604      	mov	r4, r0
 8004370:	460d      	mov	r5, r1
 8004372:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004374:	f7fc f910 	bl	8000598 <__aeabi_f2d>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	e9cd 2300 	strd	r2, r3, [sp]
 8004380:	4622      	mov	r2, r4
 8004382:	462b      	mov	r3, r5
 8004384:	480f      	ldr	r0, [pc, #60]	; (80043c4 <_Z25TestPIDControllerResponsev+0x5c8>)
 8004386:	f00a fe2d 	bl	800efe4 <iprintf>
				expect_output, output);
		return false;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <_Z25TestPIDControllerResponsev+0x594>
	}

	// TODO: test ramp and limit

	return true;
 800438e:	2301      	movs	r3, #1
}
 8004390:	4618      	mov	r0, r3
 8004392:	3740      	adds	r7, #64	; 0x40
 8004394:	46bd      	mov	sp, r7
 8004396:	bdb0      	pop	{r4, r5, r7, pc}
 8004398:	0801206c 	.word	0x0801206c
 800439c:	3f99999a 	.word	0x3f99999a
 80043a0:	3c23d70a 	.word	0x3c23d70a
 80043a4:	08012090 	.word	0x08012090
 80043a8:	080120e0 	.word	0x080120e0
 80043ac:	08012104 	.word	0x08012104
 80043b0:	08012154 	.word	0x08012154
 80043b4:	41580000 	.word	0x41580000
 80043b8:	c3f3a666 	.word	0xc3f3a666
 80043bc:	41b00000 	.word	0x41b00000
 80043c0:	c42be385 	.word	0xc42be385
 80043c4:	08012174 	.word	0x08012174

080043c8 <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 80043ce:	4915      	ldr	r1, [pc, #84]	; (8004424 <_Z20TestPIDControllerAllv+0x5c>)
 80043d0:	4815      	ldr	r0, [pc, #84]	; (8004428 <_Z20TestPIDControllerAllv+0x60>)
 80043d2:	f00a fe07 	bl	800efe4 <iprintf>
	bool pid_passed = true;
 80043d6:	2301      	movs	r3, #1
 80043d8:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 80043da:	f7ff fc3f 	bl	8003c5c <_Z23TestPIDControllerCreatev>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	79fb      	ldrb	r3, [r7, #7]
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 80043f0:	f7ff fd04 	bl	8003dfc <_Z25TestPIDControllerResponsev>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 800440c:	4807      	ldr	r0, [pc, #28]	; (800442c <_Z20TestPIDControllerAllv+0x64>)
 800440e:	f00a fe6f 	bl	800f0f0 <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 8004412:	e002      	b.n	800441a <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 8004414:	4806      	ldr	r0, [pc, #24]	; (8004430 <_Z20TestPIDControllerAllv+0x68>)
 8004416:	f00a fe6b 	bl	800f0f0 <puts>
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	080121c4 	.word	0x080121c4
 8004428:	080121e0 	.word	0x080121e0
 800442c:	080121f4 	.word	0x080121f4
 8004430:	08012224 	.word	0x08012224

08004434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dbprint_uart = &huart3;
 8004438:	4b1e      	ldr	r3, [pc, #120]	; (80044b4 <main+0x80>)
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <main+0x84>)
 800443c:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 800443e:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <main+0x88>)
 8004440:	4a1f      	ldr	r2, [pc, #124]	; (80044c0 <main+0x8c>)
 8004442:	601a      	str	r2, [r3, #0]
	half_bridge_pwm_timer = &htim1;
 8004444:	4b1f      	ldr	r3, [pc, #124]	; (80044c4 <main+0x90>)
 8004446:	4a20      	ldr	r2, [pc, #128]	; (80044c8 <main+0x94>)
 8004448:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800444a:	f001 f876 	bl	800553a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800444e:	f000 f84b 	bl	80044e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004452:	f000 fbad 	bl	8004bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004456:	f000 fb8d 	bl	8004b74 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800445a:	f000 fb2d 	bl	8004ab8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800445e:	f000 fb5b 	bl	8004b18 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 8004462:	f000 f945 	bl	80046f0 <MX_SPI5_Init>
  MX_ADC1_Init();
 8004466:	f000 f8d5 	bl	8004614 <MX_ADC1_Init>
  MX_TIM4_Init();
 800446a:	f000 faaf 	bl	80049cc <MX_TIM4_Init>
  MX_TIM1_Init();
 800446e:	f000 f97d 	bl	800476c <MX_TIM1_Init>
  MX_TIM2_Init();
 8004472:	f000 fa3f 	bl	80048f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 8004476:	2201      	movs	r2, #1
 8004478:	2110      	movs	r1, #16
 800447a:	4814      	ldr	r0, [pc, #80]	; (80044cc <main+0x98>)
 800447c:	f002 fabc 	bl	80069f8 <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)curr_sense_adc_buf, ADC_BUF_LEN) != HAL_OK) {
 8004480:	2203      	movs	r2, #3
 8004482:	4913      	ldr	r1, [pc, #76]	; (80044d0 <main+0x9c>)
 8004484:	4813      	ldr	r0, [pc, #76]	; (80044d4 <main+0xa0>)
 8004486:	f001 f8ed 	bl	8005664 <HAL_ADC_Start_DMA>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <main+0x60>
  	  Error_Handler();
 8004490:	f000 fc9c 	bl	8004dcc <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim4);
 8004494:	4810      	ldr	r0, [pc, #64]	; (80044d8 <main+0xa4>)
 8004496:	f004 fa91 	bl	80089bc <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800449a:	f006 fead 	bl	800b1f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800449e:	4a0f      	ldr	r2, [pc, #60]	; (80044dc <main+0xa8>)
 80044a0:	2100      	movs	r1, #0
 80044a2:	480f      	ldr	r0, [pc, #60]	; (80044e0 <main+0xac>)
 80044a4:	f006 ff44 	bl	800b330 <osThreadNew>
 80044a8:	4603      	mov	r3, r0
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <main+0xb0>)
 80044ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80044ae:	f006 fed7 	bl	800b260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80044b2:	e7fe      	b.n	80044b2 <main+0x7e>
 80044b4:	200051b4 	.word	0x200051b4
 80044b8:	20004be8 	.word	0x20004be8
 80044bc:	20005070 	.word	0x20005070
 80044c0:	20004b38 	.word	0x20004b38
 80044c4:	20004b30 	.word	0x20004b30
 80044c8:	2000511c 	.word	0x2000511c
 80044cc:	40020000 	.word	0x40020000
 80044d0:	20000210 	.word	0x20000210
 80044d4:	20005074 	.word	0x20005074
 80044d8:	20004b9c 	.word	0x20004b9c
 80044dc:	08012300 	.word	0x08012300
 80044e0:	08004d91 	.word	0x08004d91
 80044e4:	20004b34 	.word	0x20004b34

080044e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b0b4      	sub	sp, #208	; 0xd0
 80044ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80044f2:	2230      	movs	r2, #48	; 0x30
 80044f4:	2100      	movs	r1, #0
 80044f6:	4618      	mov	r0, r3
 80044f8:	f00a f858 	bl	800e5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800450c:	f107 030c 	add.w	r3, r7, #12
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f00a f849 	bl	800e5ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800451a:	f002 fbe9 	bl	8006cf0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	4b3a      	ldr	r3, [pc, #232]	; (8004608 <SystemClock_Config+0x120>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	4a39      	ldr	r2, [pc, #228]	; (8004608 <SystemClock_Config+0x120>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6413      	str	r3, [r2, #64]	; 0x40
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <SystemClock_Config+0x120>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	60bb      	str	r3, [r7, #8]
 8004534:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004536:	4b35      	ldr	r3, [pc, #212]	; (800460c <SystemClock_Config+0x124>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <SystemClock_Config+0x124>)
 800453c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b32      	ldr	r3, [pc, #200]	; (800460c <SystemClock_Config+0x124>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800454e:	2301      	movs	r3, #1
 8004550:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004554:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004558:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800455c:	2302      	movs	r3, #2
 800455e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800456a:	2304      	movs	r3, #4
 800456c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004570:	23d8      	movs	r3, #216	; 0xd8
 8004572:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004576:	2302      	movs	r3, #2
 8004578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800457c:	2309      	movs	r3, #9
 800457e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004582:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004586:	4618      	mov	r0, r3
 8004588:	f002 fc12 	bl	8006db0 <HAL_RCC_OscConfig>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004592:	f000 fc1b 	bl	8004dcc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004596:	f002 fbbb 	bl	8006d10 <HAL_PWREx_EnableOverDrive>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80045a0:	f000 fc14 	bl	8004dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045a4:	230f      	movs	r3, #15
 80045a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045aa:	2302      	movs	r3, #2
 80045ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045b0:	2300      	movs	r3, #0
 80045b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80045c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80045ca:	2107      	movs	r1, #7
 80045cc:	4618      	mov	r0, r3
 80045ce:	f002 fe93 	bl	80072f8 <HAL_RCC_ClockConfig>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80045d8:	f000 fbf8 	bl	8004dcc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <SystemClock_Config+0x128>)
 80045de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80045e0:	2300      	movs	r3, #0
 80045e2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ea:	f107 030c 	add.w	r3, r7, #12
 80045ee:	4618      	mov	r0, r3
 80045f0:	f003 f8b6 	bl	8007760 <HAL_RCCEx_PeriphCLKConfig>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <SystemClock_Config+0x116>
  {
    Error_Handler();
 80045fa:	f000 fbe7 	bl	8004dcc <Error_Handler>
  }
}
 80045fe:	bf00      	nop
 8004600:	37d0      	adds	r7, #208	; 0xd0
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	00200100 	.word	0x00200100

08004614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800461a:	463b      	mov	r3, r7
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004626:	4b30      	ldr	r3, [pc, #192]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004628:	4a30      	ldr	r2, [pc, #192]	; (80046ec <MX_ADC1_Init+0xd8>)
 800462a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800462c:	4b2e      	ldr	r3, [pc, #184]	; (80046e8 <MX_ADC1_Init+0xd4>)
 800462e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004634:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800463a:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <MX_ADC1_Init+0xd4>)
 800463c:	2201      	movs	r2, #1
 800463e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004640:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004642:	2200      	movs	r2, #0
 8004644:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004654:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8004656:	4b24      	ldr	r3, [pc, #144]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004658:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 800465c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800465e:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004660:	2200      	movs	r2, #0
 8004662:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8004664:	4b20      	ldr	r3, [pc, #128]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004666:	2203      	movs	r2, #3
 8004668:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800466a:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <MX_ADC1_Init+0xd4>)
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004672:	4b1d      	ldr	r3, [pc, #116]	; (80046e8 <MX_ADC1_Init+0xd4>)
 8004674:	2200      	movs	r2, #0
 8004676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004678:	481b      	ldr	r0, [pc, #108]	; (80046e8 <MX_ADC1_Init+0xd4>)
 800467a:	f000 ffaf 	bl	80055dc <HAL_ADC_Init>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8004684:	f000 fba2 	bl	8004dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004688:	2301      	movs	r3, #1
 800468a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800468c:	2301      	movs	r3, #1
 800468e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004690:	2301      	movs	r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004694:	463b      	mov	r3, r7
 8004696:	4619      	mov	r1, r3
 8004698:	4813      	ldr	r0, [pc, #76]	; (80046e8 <MX_ADC1_Init+0xd4>)
 800469a:	f001 f8f1 	bl	8005880 <HAL_ADC_ConfigChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80046a4:	f000 fb92 	bl	8004dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80046a8:	2309      	movs	r3, #9
 80046aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046ac:	2302      	movs	r3, #2
 80046ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046b0:	463b      	mov	r3, r7
 80046b2:	4619      	mov	r1, r3
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <MX_ADC1_Init+0xd4>)
 80046b6:	f001 f8e3 	bl	8005880 <HAL_ADC_ConfigChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80046c0:	f000 fb84 	bl	8004dcc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80046c4:	2308      	movs	r3, #8
 80046c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80046c8:	2303      	movs	r3, #3
 80046ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046cc:	463b      	mov	r3, r7
 80046ce:	4619      	mov	r1, r3
 80046d0:	4805      	ldr	r0, [pc, #20]	; (80046e8 <MX_ADC1_Init+0xd4>)
 80046d2:	f001 f8d5 	bl	8005880 <HAL_ADC_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80046dc:	f000 fb76 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20005074 	.word	0x20005074
 80046ec:	40012000 	.word	0x40012000

080046f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <MX_SPI5_Init+0x74>)
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <MX_SPI5_Init+0x78>)
 80046f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <MX_SPI5_Init+0x74>)
 80046fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004700:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004702:	4b18      	ldr	r3, [pc, #96]	; (8004764 <MX_SPI5_Init+0x74>)
 8004704:	2200      	movs	r2, #0
 8004706:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004708:	4b16      	ldr	r3, [pc, #88]	; (8004764 <MX_SPI5_Init+0x74>)
 800470a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800470e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <MX_SPI5_Init+0x74>)
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <MX_SPI5_Init+0x74>)
 8004718:	2201      	movs	r2, #1
 800471a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800471c:	4b11      	ldr	r3, [pc, #68]	; (8004764 <MX_SPI5_Init+0x74>)
 800471e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004722:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <MX_SPI5_Init+0x74>)
 8004726:	2218      	movs	r2, #24
 8004728:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <MX_SPI5_Init+0x74>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <MX_SPI5_Init+0x74>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <MX_SPI5_Init+0x74>)
 8004738:	2200      	movs	r2, #0
 800473a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <MX_SPI5_Init+0x74>)
 800473e:	2207      	movs	r2, #7
 8004740:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004742:	4b08      	ldr	r3, [pc, #32]	; (8004764 <MX_SPI5_Init+0x74>)
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <MX_SPI5_Init+0x74>)
 800474a:	2200      	movs	r2, #0
 800474c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800474e:	4805      	ldr	r0, [pc, #20]	; (8004764 <MX_SPI5_Init+0x74>)
 8004750:	f003 fb50 	bl	8007df4 <HAL_SPI_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800475a:	f000 fb37 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20004b38 	.word	0x20004b38
 8004768:	40015000 	.word	0x40015000

0800476c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b09a      	sub	sp, #104	; 0x68
 8004770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004772:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800478c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
 800479c:	615a      	str	r2, [r3, #20]
 800479e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	222c      	movs	r2, #44	; 0x2c
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f009 ff00 	bl	800e5ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80047ac:	4b4f      	ldr	r3, [pc, #316]	; (80048ec <MX_TIM1_Init+0x180>)
 80047ae:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <MX_TIM1_Init+0x184>)
 80047b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80047b2:	4b4e      	ldr	r3, [pc, #312]	; (80048ec <MX_TIM1_Init+0x180>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b8:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <MX_TIM1_Init+0x180>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80047be:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <MX_TIM1_Init+0x180>)
 80047c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80047c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047c6:	4b49      	ldr	r3, [pc, #292]	; (80048ec <MX_TIM1_Init+0x180>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80047cc:	4b47      	ldr	r3, [pc, #284]	; (80048ec <MX_TIM1_Init+0x180>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047d2:	4b46      	ldr	r3, [pc, #280]	; (80048ec <MX_TIM1_Init+0x180>)
 80047d4:	2280      	movs	r2, #128	; 0x80
 80047d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80047d8:	4844      	ldr	r0, [pc, #272]	; (80048ec <MX_TIM1_Init+0x180>)
 80047da:	f004 f897 	bl	800890c <HAL_TIM_Base_Init>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80047e4:	f000 faf2 	bl	8004dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80047ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80047f2:	4619      	mov	r1, r3
 80047f4:	483d      	ldr	r0, [pc, #244]	; (80048ec <MX_TIM1_Init+0x180>)
 80047f6:	f004 fe15 	bl	8009424 <HAL_TIM_ConfigClockSource>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004800:	f000 fae4 	bl	8004dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004804:	4839      	ldr	r0, [pc, #228]	; (80048ec <MX_TIM1_Init+0x180>)
 8004806:	f004 f9b2 	bl	8008b6e <HAL_TIM_PWM_Init>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004810:	f000 fadc 	bl	8004dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004814:	2320      	movs	r3, #32
 8004816:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004818:	2300      	movs	r3, #0
 800481a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481c:	2300      	movs	r3, #0
 800481e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004824:	4619      	mov	r1, r3
 8004826:	4831      	ldr	r0, [pc, #196]	; (80048ec <MX_TIM1_Init+0x180>)
 8004828:	f005 fc3c 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004832:	f000 facb 	bl	8004dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004836:	2370      	movs	r3, #112	; 0x70
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800483e:	2300      	movs	r3, #0
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004842:	2300      	movs	r3, #0
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004846:	2300      	movs	r3, #0
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004856:	2200      	movs	r2, #0
 8004858:	4619      	mov	r1, r3
 800485a:	4824      	ldr	r0, [pc, #144]	; (80048ec <MX_TIM1_Init+0x180>)
 800485c:	f004 fcd2 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004866:	f000 fab1 	bl	8004dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800486a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800486e:	2204      	movs	r2, #4
 8004870:	4619      	mov	r1, r3
 8004872:	481e      	ldr	r0, [pc, #120]	; (80048ec <MX_TIM1_Init+0x180>)
 8004874:	f004 fcc6 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800487e:	f000 faa5 	bl	8004dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004886:	2208      	movs	r2, #8
 8004888:	4619      	mov	r1, r3
 800488a:	4818      	ldr	r0, [pc, #96]	; (80048ec <MX_TIM1_Init+0x180>)
 800488c:	f004 fcba 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004896:	f000 fa99 	bl	8004dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 75;
 80048a6:	234b      	movs	r3, #75	; 0x4b
 80048a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80048bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80048c2:	2300      	movs	r3, #0
 80048c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4807      	ldr	r0, [pc, #28]	; (80048ec <MX_TIM1_Init+0x180>)
 80048d0:	f005 fc76 	bl	800a1c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80048da:	f000 fa77 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80048de:	4803      	ldr	r0, [pc, #12]	; (80048ec <MX_TIM1_Init+0x180>)
 80048e0:	f000 fbba 	bl	8005058 <HAL_TIM_MspPostInit>

}
 80048e4:	bf00      	nop
 80048e6:	3768      	adds	r7, #104	; 0x68
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	2000511c 	.word	0x2000511c
 80048f0:	40010000 	.word	0x40010000

080048f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048fa:	f107 0320 	add.w	r3, r7, #32
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	605a      	str	r2, [r3, #4]
 8004904:	609a      	str	r2, [r3, #8]
 8004906:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	605a      	str	r2, [r3, #4]
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004918:	463b      	mov	r3, r7
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	605a      	str	r2, [r3, #4]
 8004920:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004922:	4b29      	ldr	r3, [pc, #164]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004928:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800492a:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <MX_TIM2_Init+0xd4>)
 800492c:	2200      	movs	r2, #0
 800492e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004932:	2200      	movs	r2, #0
 8004934:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004938:	2296      	movs	r2, #150	; 0x96
 800493a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800493c:	4b22      	ldr	r3, [pc, #136]	; (80049c8 <MX_TIM2_Init+0xd4>)
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004948:	481f      	ldr	r0, [pc, #124]	; (80049c8 <MX_TIM2_Init+0xd4>)
 800494a:	f003 ffdf 	bl	800890c <HAL_TIM_Base_Init>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8004954:	f000 fa3a 	bl	8004dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800495e:	f107 0320 	add.w	r3, r7, #32
 8004962:	4619      	mov	r1, r3
 8004964:	4818      	ldr	r0, [pc, #96]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004966:	f004 fd5d 	bl	8009424 <HAL_TIM_ConfigClockSource>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8004970:	f000 fa2c 	bl	8004dcc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8004974:	2108      	movs	r1, #8
 8004976:	4814      	ldr	r0, [pc, #80]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004978:	f004 fa54 	bl	8008e24 <HAL_TIM_OnePulse_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8004982:	f000 fa23 	bl	8004dcc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8004986:	2306      	movs	r3, #6
 8004988:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800498e:	f107 030c 	add.w	r3, r7, #12
 8004992:	4619      	mov	r1, r3
 8004994:	480c      	ldr	r0, [pc, #48]	; (80049c8 <MX_TIM2_Init+0xd4>)
 8004996:	f004 fe0b 	bl	80095b0 <HAL_TIM_SlaveConfigSynchro>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80049a0:	f000 fa14 	bl	8004dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80049a4:	2320      	movs	r3, #32
 80049a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049ac:	463b      	mov	r3, r7
 80049ae:	4619      	mov	r1, r3
 80049b0:	4805      	ldr	r0, [pc, #20]	; (80049c8 <MX_TIM2_Init+0xd4>)
 80049b2:	f005 fb77 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80049bc:	f000 fa06 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80049c0:	bf00      	nop
 80049c2:	3730      	adds	r7, #48	; 0x30
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20005168 	.word	0x20005168

080049cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	; 0x38
 80049d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	605a      	str	r2, [r3, #4]
 80049dc:	609a      	str	r2, [r3, #8]
 80049de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049e0:	f107 031c 	add.w	r3, r7, #28
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049ec:	463b      	mov	r3, r7
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	609a      	str	r2, [r3, #8]
 80049f6:	60da      	str	r2, [r3, #12]
 80049f8:	611a      	str	r2, [r3, #16]
 80049fa:	615a      	str	r2, [r3, #20]
 80049fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80049fe:	4b2c      	ldr	r3, [pc, #176]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a00:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <MX_TIM4_Init+0xe8>)
 8004a02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 8004a04:	4b2a      	ldr	r3, [pc, #168]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a06:	f245 4260 	movw	r2, #21600	; 0x5460
 8004a0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004a12:	4b27      	ldr	r3, [pc, #156]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a18:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a1a:	4b25      	ldr	r3, [pc, #148]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a22:	2280      	movs	r2, #128	; 0x80
 8004a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004a26:	4822      	ldr	r0, [pc, #136]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a28:	f003 ff70 	bl	800890c <HAL_TIM_Base_Init>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8004a32:	f000 f9cb 	bl	8004dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a40:	4619      	mov	r1, r3
 8004a42:	481b      	ldr	r0, [pc, #108]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a44:	f004 fcee 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8004a4e:	f000 f9bd 	bl	8004dcc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004a52:	4817      	ldr	r0, [pc, #92]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a54:	f004 f82a 	bl	8008aac <HAL_TIM_OC_Init>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8004a5e:	f000 f9b5 	bl	8004dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a62:	2320      	movs	r3, #32
 8004a64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a6a:	f107 031c 	add.w	r3, r7, #28
 8004a6e:	4619      	mov	r1, r3
 8004a70:	480f      	ldr	r0, [pc, #60]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a72:	f005 fb17 	bl	800a0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8004a7c:	f000 f9a6 	bl	8004dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004a80:	2300      	movs	r3, #0
 8004a82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a90:	463b      	mov	r3, r7
 8004a92:	220c      	movs	r2, #12
 8004a94:	4619      	mov	r1, r3
 8004a96:	4806      	ldr	r0, [pc, #24]	; (8004ab0 <MX_TIM4_Init+0xe4>)
 8004a98:	f004 fb3e 	bl	8009118 <HAL_TIM_OC_ConfigChannel>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8004aa2:	f000 f993 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004aa6:	bf00      	nop
 8004aa8:	3738      	adds	r7, #56	; 0x38
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20004b9c 	.word	0x20004b9c
 8004ab4:	40000800 	.word	0x40000800

08004ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004abc:	4b14      	ldr	r3, [pc, #80]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004abe:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <MX_USART3_UART_Init+0x5c>)
 8004ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004ac2:	4b13      	ldr	r3, [pc, #76]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004aca:	4b11      	ldr	r3, [pc, #68]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004adc:	4b0c      	ldr	r3, [pc, #48]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004ade:	220c      	movs	r2, #12
 8004ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004afa:	4805      	ldr	r0, [pc, #20]	; (8004b10 <MX_USART3_UART_Init+0x58>)
 8004afc:	f005 fc21 	bl	800a342 <HAL_UART_Init>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004b06:	f000 f961 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20004be8 	.word	0x20004be8
 8004b14:	40004800 	.word	0x40004800

08004b18 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004b1c:	4b14      	ldr	r3, [pc, #80]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004b22:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b26:	2206      	movs	r2, #6
 8004b28:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b32:	2202      	movs	r2, #2
 8004b34:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004b3c:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004b48:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004b5a:	4805      	ldr	r0, [pc, #20]	; (8004b70 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004b5c:	f001 ff7f 	bl	8006a5e <HAL_PCD_Init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004b66:	f000 f931 	bl	8004dcc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20004c6c 	.word	0x20004c6c

08004b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <MX_DMA_Init+0x38>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a0b      	ldr	r2, [pc, #44]	; (8004bac <MX_DMA_Init+0x38>)
 8004b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <MX_DMA_Init+0x38>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004b92:	2200      	movs	r2, #0
 8004b94:	2105      	movs	r1, #5
 8004b96:	2038      	movs	r0, #56	; 0x38
 8004b98:	f001 f9f0 	bl	8005f7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004b9c:	2038      	movs	r0, #56	; 0x38
 8004b9e:	f001 fa09 	bl	8005fb4 <HAL_NVIC_EnableIRQ>

}
 8004ba2:	bf00      	nop
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	; 0x30
 8004bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb6:	f107 031c 	add.w	r3, r7, #28
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bc6:	4b4f      	ldr	r3, [pc, #316]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	4a4e      	ldr	r2, [pc, #312]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bcc:	f043 0304 	orr.w	r3, r3, #4
 8004bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd2:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	61bb      	str	r3, [r7, #24]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004bde:	4b49      	ldr	r3, [pc, #292]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	4a48      	ldr	r2, [pc, #288]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bea:	4b46      	ldr	r3, [pc, #280]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004bf6:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	4a42      	ldr	r2, [pc, #264]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c00:	6313      	str	r3, [r2, #48]	; 0x30
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c0e:	4b3d      	ldr	r3, [pc, #244]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c12:	4a3c      	ldr	r2, [pc, #240]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c26:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a36      	ldr	r2, [pc, #216]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b34      	ldr	r3, [pc, #208]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	4a30      	ldr	r2, [pc, #192]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c44:	f043 0308 	orr.w	r3, r3, #8
 8004c48:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4a:	4b2e      	ldr	r3, [pc, #184]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c56:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	4a2a      	ldr	r2, [pc, #168]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c60:	6313      	str	r3, [r2, #48]	; 0x30
 8004c62:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <MX_GPIO_Init+0x154>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6a:	603b      	str	r3, [r7, #0]
 8004c6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2110      	movs	r1, #16
 8004c72:	4825      	ldr	r0, [pc, #148]	; (8004d08 <MX_GPIO_Init+0x158>)
 8004c74:	f001 fec0 	bl	80069f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2140      	movs	r1, #64	; 0x40
 8004c7c:	4823      	ldr	r0, [pc, #140]	; (8004d0c <MX_GPIO_Init+0x15c>)
 8004c7e:	f001 febb 	bl	80069f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2180      	movs	r1, #128	; 0x80
 8004c86:	4822      	ldr	r0, [pc, #136]	; (8004d10 <MX_GPIO_Init+0x160>)
 8004c88:	f001 feb6 	bl	80069f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <MX_GPIO_Init+0x164>)
 8004c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004c9a:	f107 031c 	add.w	r3, r7, #28
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	481d      	ldr	r0, [pc, #116]	; (8004d18 <MX_GPIO_Init+0x168>)
 8004ca2:	f001 fd0d 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004caa:	2301      	movs	r3, #1
 8004cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004cb6:	f107 031c 	add.w	r3, r7, #28
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4812      	ldr	r0, [pc, #72]	; (8004d08 <MX_GPIO_Init+0x158>)
 8004cbe:	f001 fcff 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004cd2:	f107 031c 	add.w	r3, r7, #28
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	480c      	ldr	r0, [pc, #48]	; (8004d0c <MX_GPIO_Init+0x15c>)
 8004cda:	f001 fcf1 	bl	80066c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f107 031c 	add.w	r3, r7, #28
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4806      	ldr	r0, [pc, #24]	; (8004d10 <MX_GPIO_Init+0x160>)
 8004cf6:	f001 fce3 	bl	80066c0 <HAL_GPIO_Init>

}
 8004cfa:	bf00      	nop
 8004cfc:	3730      	adds	r7, #48	; 0x30
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40020000 	.word	0x40020000
 8004d0c:	40021800 	.word	0x40021800
 8004d10:	40020400 	.word	0x40020400
 8004d14:	10110000 	.word	0x10110000
 8004d18:	40020800 	.word	0x40020800

08004d1c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <__io_putchar+0x24>)
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	1d39      	adds	r1, r7, #4
 8004d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f005 fb55 	bl	800a3de <HAL_UART_Transmit>

  return ch;
 8004d34:	687b      	ldr	r3, [r7, #4]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200051b4 	.word	0x200051b4

08004d44 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
//  printf("hay\r\n");
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
	if (motor_control_task_handle != NULL) {
 8004d50:	4b0d      	ldr	r3, [pc, #52]	; (8004d88 <HAL_ADC_ConvCpltCallback+0x44>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d012      	beq.n	8004d7e <HAL_ADC_ConvCpltCallback+0x3a>
		vTaskNotifyGiveFromISR((TaskHandle_t)motor_control_task_handle, &xHigherPriorityTaskWoken);
 8004d58:	4b0b      	ldr	r3, [pc, #44]	; (8004d88 <HAL_ADC_ConvCpltCallback+0x44>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f107 020c 	add.w	r2, r7, #12
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f008 f996 	bl	800d094 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <HAL_ADC_ConvCpltCallback+0x3a>
 8004d6e:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <HAL_ADC_ConvCpltCallback+0x48>)
 8004d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	f3bf 8f6f 	isb	sy
	}
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000208 	.word	0x20000208
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  main_run();
 8004d98:	f7fd fd0c 	bl	80027b4 <main_run>
  /* Infinite loop */
  for(;;)
  {
//	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  osDelay(1000);
 8004d9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004da0:	f006 fb6c 	bl	800b47c <osDelay>
 8004da4:	e7fa      	b.n	8004d9c <StartDefaultTask+0xc>
	...

08004da8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a04      	ldr	r2, [pc, #16]	; (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004dba:	f000 fbcb 	bl	8005554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40001000 	.word	0x40001000

08004dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd0:	b672      	cpsid	i
}
 8004dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <Error_Handler+0x8>
	...

08004dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dde:	4b11      	ldr	r3, [pc, #68]	; (8004e24 <HAL_MspInit+0x4c>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a10      	ldr	r2, [pc, #64]	; (8004e24 <HAL_MspInit+0x4c>)
 8004de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dea:	4b0e      	ldr	r3, [pc, #56]	; (8004e24 <HAL_MspInit+0x4c>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df2:	607b      	str	r3, [r7, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df6:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_MspInit+0x4c>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <HAL_MspInit+0x4c>)
 8004dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e00:	6453      	str	r3, [r2, #68]	; 0x44
 8004e02:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <HAL_MspInit+0x4c>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	210f      	movs	r1, #15
 8004e12:	f06f 0001 	mvn.w	r0, #1
 8004e16:	f001 f8b1 	bl	8005f7c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800

08004e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e30:	f107 0314 	add.w	r3, r7, #20
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a39      	ldr	r2, [pc, #228]	; (8004f2c <HAL_ADC_MspInit+0x104>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d16c      	bne.n	8004f24 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e4a:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6453      	str	r3, [r2, #68]	; 0x44
 8004e56:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e62:	4b33      	ldr	r3, [pc, #204]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a32      	ldr	r2, [pc, #200]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b30      	ldr	r3, [pc, #192]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4a2c      	ldr	r2, [pc, #176]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e80:	f043 0302 	orr.w	r3, r3, #2
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <HAL_ADC_MspInit+0x108>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = CURR_FB_U_Pin;
 8004e92:	2302      	movs	r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e96:	2303      	movs	r3, #3
 8004e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURR_FB_U_GPIO_Port, &GPIO_InitStruct);
 8004e9e:	f107 0314 	add.w	r3, r7, #20
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4823      	ldr	r0, [pc, #140]	; (8004f34 <HAL_ADC_MspInit+0x10c>)
 8004ea6:	f001 fc0b 	bl	80066c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURR_FB_W_Pin|CURR_FB_V_Pin;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4619      	mov	r1, r3
 8004ebc:	481e      	ldr	r0, [pc, #120]	; (8004f38 <HAL_ADC_MspInit+0x110>)
 8004ebe:	f001 fbff 	bl	80066c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004ec2:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004ec4:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <HAL_ADC_MspInit+0x118>)
 8004ec6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004ec8:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ee0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ee2:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ee8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ef0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ef8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004efc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f00:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f08:	480c      	ldr	r0, [pc, #48]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004f0a:	f001 f861 	bl	8005fd0 <HAL_DMA_Init>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8004f14:	f7ff ff5a 	bl	8004dcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a08      	ldr	r2, [pc, #32]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f1e:	4a07      	ldr	r2, [pc, #28]	; (8004f3c <HAL_ADC_MspInit+0x114>)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004f24:	bf00      	nop
 8004f26:	3728      	adds	r7, #40	; 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40012000 	.word	0x40012000
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40020000 	.word	0x40020000
 8004f38:	40020400 	.word	0x40020400
 8004f3c:	200050bc 	.word	0x200050bc
 8004f40:	40026410 	.word	0x40026410

08004f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_SPI_MspInit+0x7c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d128      	bne.n	8004fb8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f84:	f043 0320 	orr.w	r3, r3, #32
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_SPI_MspInit+0x80>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8004f96:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8004f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004fa8:	2305      	movs	r3, #5
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fac:	f107 0314 	add.w	r3, r7, #20
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4805      	ldr	r0, [pc, #20]	; (8004fc8 <HAL_SPI_MspInit+0x84>)
 8004fb4:	f001 fb84 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8004fb8:	bf00      	nop
 8004fba:	3728      	adds	r7, #40	; 0x28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40015000 	.word	0x40015000
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	40021400 	.word	0x40021400

08004fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	; (800504c <HAL_TIM_Base_MspInit+0x80>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10c      	bne.n	8004ff8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fde:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8004fe4:	f043 0301 	orr.w	r3, r3, #1
 8004fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ff6:	e022      	b.n	800503e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d10c      	bne.n	800501c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005002:	4b13      	ldr	r3, [pc, #76]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6413      	str	r3, [r2, #64]	; 0x40
 800500e:	4b10      	ldr	r3, [pc, #64]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]
}
 800501a:	e010      	b.n	800503e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a0c      	ldr	r2, [pc, #48]	; (8005054 <HAL_TIM_Base_MspInit+0x88>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10b      	bne.n	800503e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	4a09      	ldr	r2, [pc, #36]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 800502c:	f043 0304 	orr.w	r3, r3, #4
 8005030:	6413      	str	r3, [r2, #64]	; 0x40
 8005032:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_TIM_Base_MspInit+0x84>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	40023800 	.word	0x40023800
 8005054:	40000800 	.word	0x40000800

08005058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	f107 0314 	add.w	r3, r7, #20
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	609a      	str	r2, [r3, #8]
 800506c:	60da      	str	r2, [r3, #12]
 800506e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <HAL_TIM_MspPostInit+0xa0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d139      	bne.n	80050ee <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800507a:	4b20      	ldr	r3, [pc, #128]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 8005080:	f043 0302 	orr.w	r3, r3, #2
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a19      	ldr	r2, [pc, #100]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_TIM_MspPostInit+0xa4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin|ENW_Pin;
 80050aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80050ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b0:	2302      	movs	r3, #2
 80050b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b8:	2300      	movs	r3, #0
 80050ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050bc:	2301      	movs	r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	4619      	mov	r1, r3
 80050c6:	480e      	ldr	r0, [pc, #56]	; (8005100 <HAL_TIM_MspPostInit+0xa8>)
 80050c8:	f001 fafa 	bl	80066c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INU_Pin|INV_Pin|INW_Pin;
 80050cc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80050d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050de:	2301      	movs	r3, #1
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4619      	mov	r1, r3
 80050e8:	4806      	ldr	r0, [pc, #24]	; (8005104 <HAL_TIM_MspPostInit+0xac>)
 80050ea:	f001 fae9 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020400 	.word	0x40020400
 8005104:	40020000 	.word	0x40020000

08005108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b08a      	sub	sp, #40	; 0x28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a17      	ldr	r2, [pc, #92]	; (8005184 <HAL_UART_MspInit+0x7c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d128      	bne.n	800517c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800512a:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_UART_MspInit+0x80>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_UART_MspInit+0x80>)
 8005130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_UART_MspInit+0x80>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_UART_MspInit+0x80>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	4a10      	ldr	r2, [pc, #64]	; (8005188 <HAL_UART_MspInit+0x80>)
 8005148:	f043 0308 	orr.w	r3, r3, #8
 800514c:	6313      	str	r3, [r2, #48]	; 0x30
 800514e:	4b0e      	ldr	r3, [pc, #56]	; (8005188 <HAL_UART_MspInit+0x80>)
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800515a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800515e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005160:	2302      	movs	r3, #2
 8005162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005164:	2300      	movs	r3, #0
 8005166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005168:	2303      	movs	r3, #3
 800516a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800516c:	2307      	movs	r3, #7
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	4619      	mov	r1, r3
 8005176:	4805      	ldr	r0, [pc, #20]	; (800518c <HAL_UART_MspInit+0x84>)
 8005178:	f001 faa2 	bl	80066c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800517c:	bf00      	nop
 800517e:	3728      	adds	r7, #40	; 0x28
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40004800 	.word	0x40004800
 8005188:	40023800 	.word	0x40023800
 800518c:	40020c00 	.word	0x40020c00

08005190 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	60da      	str	r2, [r3, #12]
 80051a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b0:	d134      	bne.n	800521c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	6313      	str	r3, [r2, #48]	; 0x30
 80051be:	4b19      	ldr	r3, [pc, #100]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80051ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80051ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d0:	2302      	movs	r3, #2
 80051d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d8:	2303      	movs	r3, #3
 80051da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80051dc:	230a      	movs	r3, #10
 80051de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e0:	f107 0314 	add.w	r3, r7, #20
 80051e4:	4619      	mov	r1, r3
 80051e6:	4810      	ldr	r0, [pc, #64]	; (8005228 <HAL_PCD_MspInit+0x98>)
 80051e8:	f001 fa6a 	bl	80066c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f0:	4a0c      	ldr	r2, [pc, #48]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	6353      	str	r3, [r2, #52]	; 0x34
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_PCD_MspInit+0x94>)
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <HAL_PCD_MspInit+0x94>)
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	4a06      	ldr	r2, [pc, #24]	; (8005224 <HAL_PCD_MspInit+0x94>)
 800520a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800520e:	6453      	str	r3, [r2, #68]	; 0x44
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_PCD_MspInit+0x94>)
 8005212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800521c:	bf00      	nop
 800521e:	3728      	adds	r7, #40	; 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40023800 	.word	0x40023800
 8005228:	40020000 	.word	0x40020000

0800522c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800523c:	2200      	movs	r2, #0
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	2036      	movs	r0, #54	; 0x36
 8005242:	f000 fe9b 	bl	8005f7c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005246:	2036      	movs	r0, #54	; 0x36
 8005248:	f000 feb4 	bl	8005fb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <HAL_InitTick+0xa0>)
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <HAL_InitTick+0xa0>)
 8005252:	f043 0310 	orr.w	r3, r3, #16
 8005256:	6413      	str	r3, [r2, #64]	; 0x40
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <HAL_InitTick+0xa0>)
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005264:	f107 0210 	add.w	r2, r7, #16
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f002 fa44 	bl	80076fc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005274:	f002 fa1a 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 8005278:	4603      	mov	r3, r0
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005280:	4a13      	ldr	r2, [pc, #76]	; (80052d0 <HAL_InitTick+0xa4>)
 8005282:	fba2 2303 	umull	r2, r3, r2, r3
 8005286:	0c9b      	lsrs	r3, r3, #18
 8005288:	3b01      	subs	r3, #1
 800528a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_InitTick+0xa8>)
 800528e:	4a12      	ldr	r2, [pc, #72]	; (80052d8 <HAL_InitTick+0xac>)
 8005290:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005292:	4b10      	ldr	r3, [pc, #64]	; (80052d4 <HAL_InitTick+0xa8>)
 8005294:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005298:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800529a:	4a0e      	ldr	r2, [pc, #56]	; (80052d4 <HAL_InitTick+0xa8>)
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80052a0:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <HAL_InitTick+0xa8>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_InitTick+0xa8>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80052ac:	4809      	ldr	r0, [pc, #36]	; (80052d4 <HAL_InitTick+0xa8>)
 80052ae:	f003 fb2d 	bl	800890c <HAL_TIM_Base_Init>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d104      	bne.n	80052c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80052b8:	4806      	ldr	r0, [pc, #24]	; (80052d4 <HAL_InitTick+0xa8>)
 80052ba:	f003 fb7f 	bl	80089bc <HAL_TIM_Base_Start_IT>
 80052be:	4603      	mov	r3, r0
 80052c0:	e000      	b.n	80052c4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3730      	adds	r7, #48	; 0x30
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40023800 	.word	0x40023800
 80052d0:	431bde83 	.word	0x431bde83
 80052d4:	200051b8 	.word	0x200051b8
 80052d8:	40001000 	.word	0x40001000

080052dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052e0:	e7fe      	b.n	80052e0 <NMI_Handler+0x4>

080052e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052e6:	e7fe      	b.n	80052e6 <HardFault_Handler+0x4>

080052e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052ec:	e7fe      	b.n	80052ec <MemManage_Handler+0x4>

080052ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052f2:	e7fe      	b.n	80052f2 <BusFault_Handler+0x4>

080052f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <UsageFault_Handler+0x4>

080052fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800530c:	4802      	ldr	r0, [pc, #8]	; (8005318 <TIM6_DAC_IRQHandler+0x10>)
 800530e:	f003 fde3 	bl	8008ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200051b8 	.word	0x200051b8

0800531c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005320:	4802      	ldr	r0, [pc, #8]	; (800532c <DMA2_Stream0_IRQHandler+0x10>)
 8005322:	f000 ff63 	bl	80061ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200050bc 	.word	0x200050bc

08005330 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
	return 1;
 8005334:	2301      	movs	r3, #1
}
 8005336:	4618      	mov	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <_kill>:

int _kill(int pid, int sig)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800534a:	f009 f8ef 	bl	800e52c <__errno>
 800534e:	4603      	mov	r3, r0
 8005350:	2216      	movs	r2, #22
 8005352:	601a      	str	r2, [r3, #0]
	return -1;
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <_exit>:

void _exit (int status)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005368:	f04f 31ff 	mov.w	r1, #4294967295
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff ffe7 	bl	8005340 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005372:	e7fe      	b.n	8005372 <_exit+0x12>

08005374 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e00a      	b.n	800539c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005386:	f3af 8000 	nop.w
 800538a:	4601      	mov	r1, r0
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	60ba      	str	r2, [r7, #8]
 8005392:	b2ca      	uxtb	r2, r1
 8005394:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3301      	adds	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	dbf0      	blt.n	8005386 <_read+0x12>
	}

return len;
 80053a4:	687b      	ldr	r3, [r7, #4]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e009      	b.n	80053d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	60ba      	str	r2, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fca7 	bl	8004d1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3301      	adds	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	dbf1      	blt.n	80053c0 <_write+0x12>
	}
	return len;
 80053dc:	687b      	ldr	r3, [r7, #4]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3718      	adds	r7, #24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <_close>:

int _close(int file)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
	return -1;
 80053ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800540e:	605a      	str	r2, [r3, #4]
	return 0;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <_isatty>:

int _isatty(int file)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
	return 1;
 8005426:	2301      	movs	r3, #1
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
	return 0;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005458:	4a14      	ldr	r2, [pc, #80]	; (80054ac <_sbrk+0x5c>)
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <_sbrk+0x60>)
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <_sbrk+0x64>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <_sbrk+0x64>)
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <_sbrk+0x68>)
 8005470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005472:	4b10      	ldr	r3, [pc, #64]	; (80054b4 <_sbrk+0x64>)
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	429a      	cmp	r2, r3
 800547e:	d207      	bcs.n	8005490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005480:	f009 f854 	bl	800e52c <__errno>
 8005484:	4603      	mov	r3, r0
 8005486:	220c      	movs	r2, #12
 8005488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e009      	b.n	80054a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005490:	4b08      	ldr	r3, [pc, #32]	; (80054b4 <_sbrk+0x64>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005496:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <_sbrk+0x64>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <_sbrk+0x64>)
 80054a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054a2:	68fb      	ldr	r3, [r7, #12]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20040000 	.word	0x20040000
 80054b0:	00000400 	.word	0x00000400
 80054b4:	20000218 	.word	0x20000218
 80054b8:	20005258 	.word	0x20005258

080054bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054bc:	b480      	push	{r7}
 80054be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054c0:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <SystemInit+0x28>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c6:	4a07      	ldr	r2, [pc, #28]	; (80054e4 <SystemInit+0x28>)
 80054c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <SystemInit+0x28>)
 80054d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054d6:	609a      	str	r2, [r3, #8]
#endif
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80054e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005520 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80054ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80054ee:	e003      	b.n	80054f8 <LoopCopyDataInit>

080054f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80054f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80054f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80054f6:	3104      	adds	r1, #4

080054f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80054f8:	480b      	ldr	r0, [pc, #44]	; (8005528 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80054fa:	4b0c      	ldr	r3, [pc, #48]	; (800552c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80054fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80054fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005500:	d3f6      	bcc.n	80054f0 <CopyDataInit>
  ldr  r2, =_sbss
 8005502:	4a0b      	ldr	r2, [pc, #44]	; (8005530 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005504:	e002      	b.n	800550c <LoopFillZerobss>

08005506 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005506:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005508:	f842 3b04 	str.w	r3, [r2], #4

0800550c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800550c:	4b09      	ldr	r3, [pc, #36]	; (8005534 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800550e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005510:	d3f9      	bcc.n	8005506 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005512:	f7ff ffd3 	bl	80054bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005516:	f009 f80f 	bl	800e538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551a:	f7fe ff8b 	bl	8004434 <main>
  bx  lr    
 800551e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005520:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8005524:	08012f44 	.word	0x08012f44
  ldr  r0, =_sdata
 8005528:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800552c:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8005530:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8005534:	20005258 	.word	0x20005258

08005538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005538:	e7fe      	b.n	8005538 <ADC_IRQHandler>

0800553a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800553e:	2003      	movs	r0, #3
 8005540:	f000 fd11 	bl	8005f66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005544:	2000      	movs	r0, #0
 8005546:	f7ff fe71 	bl	800522c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800554a:	f7ff fc45 	bl	8004dd8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005558:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_IncTick+0x20>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_IncTick+0x24>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4413      	add	r3, r2
 8005564:	4a04      	ldr	r2, [pc, #16]	; (8005578 <HAL_IncTick+0x24>)
 8005566:	6013      	str	r3, [r2, #0]
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	20000008 	.word	0x20000008
 8005578:	20005204 	.word	0x20005204

0800557c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return uwTick;
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_GetTick+0x14>)
 8005582:	681b      	ldr	r3, [r3, #0]
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	20005204 	.word	0x20005204

08005594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800559c:	f7ff ffee 	bl	800557c <HAL_GetTick>
 80055a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d005      	beq.n	80055ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <HAL_Delay+0x44>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055ba:	bf00      	nop
 80055bc:	f7ff ffde 	bl	800557c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d8f7      	bhi.n	80055bc <HAL_Delay+0x28>
  {
  }
}
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000008 	.word	0x20000008

080055dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e031      	b.n	8005656 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff fc14 	bl	8004e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	d116      	bne.n	8005648 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <HAL_ADC_Init+0x84>)
 8005620:	4013      	ands	r3, r2
 8005622:	f043 0202 	orr.w	r2, r3, #2
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa72 	bl	8005b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
 8005646:	e001      	b.n	800564c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	ffffeefd 	.word	0xffffeefd

08005664 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ADC_Start_DMA+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e0d4      	b.n	800582c <HAL_ADC_Start_DMA+0x1c8>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d018      	beq.n	80056ca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80056a8:	4b62      	ldr	r3, [pc, #392]	; (8005834 <HAL_ADC_Start_DMA+0x1d0>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a62      	ldr	r2, [pc, #392]	; (8005838 <HAL_ADC_Start_DMA+0x1d4>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0c9a      	lsrs	r2, r3, #18
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80056bc:	e002      	b.n	80056c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f9      	bne.n	80056be <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	f040 809c 	bne.w	8005812 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056de:	4b57      	ldr	r3, [pc, #348]	; (800583c <HAL_ADC_Start_DMA+0x1d8>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d007      	beq.n	8005708 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005700:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005714:	d106      	bne.n	8005724 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800571a:	f023 0206 	bic.w	r2, r3, #6
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
 8005722:	e002      	b.n	800572a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4a42      	ldr	r2, [pc, #264]	; (8005840 <HAL_ADC_Start_DMA+0x1dc>)
 8005738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	4a41      	ldr	r2, [pc, #260]	; (8005844 <HAL_ADC_Start_DMA+0x1e0>)
 8005740:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4a40      	ldr	r2, [pc, #256]	; (8005848 <HAL_ADC_Start_DMA+0x1e4>)
 8005748:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005752:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005762:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005772:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	334c      	adds	r3, #76	; 0x4c
 800577e:	4619      	mov	r1, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f000 fcd2 	bl	800612c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005788:	4b30      	ldr	r3, [pc, #192]	; (800584c <HAL_ADC_Start_DMA+0x1e8>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10f      	bne.n	80057b4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d143      	bne.n	800582a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057b0:	609a      	str	r2, [r3, #8]
 80057b2:	e03a      	b.n	800582a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <HAL_ADC_Start_DMA+0x1ec>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10e      	bne.n	80057dc <HAL_ADC_Start_DMA+0x178>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057da:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80057dc:	4b1b      	ldr	r3, [pc, #108]	; (800584c <HAL_ADC_Start_DMA+0x1e8>)
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d120      	bne.n	800582a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a19      	ldr	r2, [pc, #100]	; (8005854 <HAL_ADC_Start_DMA+0x1f0>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d11b      	bne.n	800582a <HAL_ADC_Start_DMA+0x1c6>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d114      	bne.n	800582a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689a      	ldr	r2, [r3, #8]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	e00b      	b.n	800582a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005816:	f043 0210 	orr.w	r2, r3, #16
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	20000000 	.word	0x20000000
 8005838:	431bde83 	.word	0x431bde83
 800583c:	fffff8fe 	.word	0xfffff8fe
 8005840:	08005d09 	.word	0x08005d09
 8005844:	08005dc3 	.word	0x08005dc3
 8005848:	08005ddf 	.word	0x08005ddf
 800584c:	40012300 	.word	0x40012300
 8005850:	40012000 	.word	0x40012000
 8005854:	40012200 	.word	0x40012200

08005858 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e12a      	b.n	8005af2 <HAL_ADC_ConfigChannel+0x272>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b09      	cmp	r3, #9
 80058aa:	d93a      	bls.n	8005922 <HAL_ADC_ConfigChannel+0xa2>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b4:	d035      	beq.n	8005922 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	3b1e      	subs	r3, #30
 80058cc:	2207      	movs	r2, #7
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43da      	mvns	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	400a      	ands	r2, r1
 80058da:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a87      	ldr	r2, [pc, #540]	; (8005b00 <HAL_ADC_ConfigChannel+0x280>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d10a      	bne.n	80058fc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68d9      	ldr	r1, [r3, #12]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	061a      	lsls	r2, r3, #24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058fa:	e035      	b.n	8005968 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68d9      	ldr	r1, [r3, #12]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	b29b      	uxth	r3, r3
 800590c:	4618      	mov	r0, r3
 800590e:	4603      	mov	r3, r0
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4403      	add	r3, r0
 8005914:	3b1e      	subs	r3, #30
 8005916:	409a      	lsls	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005920:	e022      	b.n	8005968 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6919      	ldr	r1, [r3, #16]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	4613      	mov	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	4413      	add	r3, r2
 8005936:	2207      	movs	r2, #7
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43da      	mvns	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	400a      	ands	r2, r1
 8005944:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6919      	ldr	r1, [r3, #16]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	4618      	mov	r0, r3
 8005958:	4603      	mov	r3, r0
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4403      	add	r3, r0
 800595e:	409a      	lsls	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d824      	bhi.n	80059ba <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	3b05      	subs	r3, #5
 8005982:	221f      	movs	r2, #31
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	43da      	mvns	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	400a      	ands	r2, r1
 8005990:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	4618      	mov	r0, r3
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	3b05      	subs	r3, #5
 80059ac:	fa00 f203 	lsl.w	r2, r0, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	635a      	str	r2, [r3, #52]	; 0x34
 80059b8:	e04c      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b0c      	cmp	r3, #12
 80059c0:	d824      	bhi.n	8005a0c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	3b23      	subs	r3, #35	; 0x23
 80059d4:	221f      	movs	r2, #31
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	43da      	mvns	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	400a      	ands	r2, r1
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	4618      	mov	r0, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	3b23      	subs	r3, #35	; 0x23
 80059fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
 8005a0a:	e023      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	3b41      	subs	r3, #65	; 0x41
 8005a1e:	221f      	movs	r2, #31
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43da      	mvns	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	400a      	ands	r2, r1
 8005a2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	3b41      	subs	r3, #65	; 0x41
 8005a48:	fa00 f203 	lsl.w	r2, r0, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <HAL_ADC_ConfigChannel+0x284>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d10a      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x1f4>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a66:	d105      	bne.n	8005a74 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a26      	ldr	r2, [pc, #152]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005a6e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005a72:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a22      	ldr	r2, [pc, #136]	; (8005b04 <HAL_ADC_ConfigChannel+0x284>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d109      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x212>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b12      	cmp	r3, #18
 8005a84:	d105      	bne.n	8005a92 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005a86:	4b20      	ldr	r3, [pc, #128]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005a8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a90:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_ADC_ConfigChannel+0x284>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d125      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x268>
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <HAL_ADC_ConfigChannel+0x280>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d003      	beq.n	8005aae <HAL_ADC_ConfigChannel+0x22e>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b11      	cmp	r3, #17
 8005aac:	d11c      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <HAL_ADC_ConfigChannel+0x288>)
 8005ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ab8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <HAL_ADC_ConfigChannel+0x280>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d111      	bne.n	8005ae8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005ac4:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <HAL_ADC_ConfigChannel+0x28c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a11      	ldr	r2, [pc, #68]	; (8005b10 <HAL_ADC_ConfigChannel+0x290>)
 8005aca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ace:	0c9a      	lsrs	r2, r3, #18
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ada:	e002      	b.n	8005ae2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f9      	bne.n	8005adc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	10000012 	.word	0x10000012
 8005b04:	40012000 	.word	0x40012000
 8005b08:	40012300 	.word	0x40012300
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	431bde83 	.word	0x431bde83

08005b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005b1c:	4b78      	ldr	r3, [pc, #480]	; (8005d00 <ADC_Init+0x1ec>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a77      	ldr	r2, [pc, #476]	; (8005d00 <ADC_Init+0x1ec>)
 8005b22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005b26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005b28:	4b75      	ldr	r3, [pc, #468]	; (8005d00 <ADC_Init+0x1ec>)
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4973      	ldr	r1, [pc, #460]	; (8005d00 <ADC_Init+0x1ec>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6859      	ldr	r1, [r3, #4]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	021a      	lsls	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6899      	ldr	r1, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <ADC_Init+0x1f0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d022      	beq.n	8005bee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6899      	ldr	r1, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689a      	ldr	r2, [r3, #8]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	e00f      	b.n	8005c0e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0202 	bic.w	r2, r2, #2
 8005c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6899      	ldr	r1, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	005a      	lsls	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	3b01      	subs	r3, #1
 8005c68:	035a      	lsls	r2, r3, #13
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
 8005c72:	e007      	b.n	8005c84 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	051a      	lsls	r2, r3, #20
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6899      	ldr	r1, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cc6:	025a      	lsls	r2, r3, #9
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6899      	ldr	r1, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	029a      	lsls	r2, r3, #10
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	40012300 	.word	0x40012300
 8005d04:	0f000001 	.word	0x0f000001

08005d08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d13c      	bne.n	8005d9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d12b      	bne.n	8005d94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d127      	bne.n	8005d94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d006      	beq.n	8005d60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d119      	bne.n	8005d94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0220 	bic.w	r2, r2, #32
 8005d6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f7fe ffd5 	bl	8004d44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d9a:	e00e      	b.n	8005dba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff fd5f 	bl	800586c <HAL_ADC_ErrorCallback>
}
 8005dae:	e004      	b.n	8005dba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fd41 	bl	8005858 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df6:	f043 0204 	orr.w	r2, r3, #4
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f7ff fd34 	bl	800586c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	; (8005e4c <__NVIC_SetPriorityGrouping+0x40>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e28:	4013      	ands	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e34:	4b06      	ldr	r3, [pc, #24]	; (8005e50 <__NVIC_SetPriorityGrouping+0x44>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e3a:	4a04      	ldr	r2, [pc, #16]	; (8005e4c <__NVIC_SetPriorityGrouping+0x40>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	60d3      	str	r3, [r2, #12]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	e000ed00 	.word	0xe000ed00
 8005e50:	05fa0000 	.word	0x05fa0000

08005e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e58:	4b04      	ldr	r3, [pc, #16]	; (8005e6c <__NVIC_GetPriorityGrouping+0x18>)
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	0a1b      	lsrs	r3, r3, #8
 8005e5e:	f003 0307 	and.w	r3, r3, #7
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	4603      	mov	r3, r0
 8005e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	db0b      	blt.n	8005e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e82:	79fb      	ldrb	r3, [r7, #7]
 8005e84:	f003 021f 	and.w	r2, r3, #31
 8005e88:	4907      	ldr	r1, [pc, #28]	; (8005ea8 <__NVIC_EnableIRQ+0x38>)
 8005e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	2001      	movs	r0, #1
 8005e92:	fa00 f202 	lsl.w	r2, r0, r2
 8005e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	e000e100 	.word	0xe000e100

08005eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	6039      	str	r1, [r7, #0]
 8005eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	db0a      	blt.n	8005ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	490c      	ldr	r1, [pc, #48]	; (8005ef8 <__NVIC_SetPriority+0x4c>)
 8005ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eca:	0112      	lsls	r2, r2, #4
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	440b      	add	r3, r1
 8005ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ed4:	e00a      	b.n	8005eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	4908      	ldr	r1, [pc, #32]	; (8005efc <__NVIC_SetPriority+0x50>)
 8005edc:	79fb      	ldrb	r3, [r7, #7]
 8005ede:	f003 030f 	and.w	r3, r3, #15
 8005ee2:	3b04      	subs	r3, #4
 8005ee4:	0112      	lsls	r2, r2, #4
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	440b      	add	r3, r1
 8005eea:	761a      	strb	r2, [r3, #24]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr
 8005ef8:	e000e100 	.word	0xe000e100
 8005efc:	e000ed00 	.word	0xe000ed00

08005f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f1c3 0307 	rsb	r3, r3, #7
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	bf28      	it	cs
 8005f1e:	2304      	movcs	r3, #4
 8005f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	3304      	adds	r3, #4
 8005f26:	2b06      	cmp	r3, #6
 8005f28:	d902      	bls.n	8005f30 <NVIC_EncodePriority+0x30>
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3b03      	subs	r3, #3
 8005f2e:	e000      	b.n	8005f32 <NVIC_EncodePriority+0x32>
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f34:	f04f 32ff 	mov.w	r2, #4294967295
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3e:	43da      	mvns	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	401a      	ands	r2, r3
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f48:	f04f 31ff 	mov.w	r1, #4294967295
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f52:	43d9      	mvns	r1, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f58:	4313      	orrs	r3, r2
         );
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3724      	adds	r7, #36	; 0x24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff ff4c 	bl	8005e0c <__NVIC_SetPriorityGrouping>
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f8e:	f7ff ff61 	bl	8005e54 <__NVIC_GetPriorityGrouping>
 8005f92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	6978      	ldr	r0, [r7, #20]
 8005f9a:	f7ff ffb1 	bl	8005f00 <NVIC_EncodePriority>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff80 	bl	8005eac <__NVIC_SetPriority>
}
 8005fac:	bf00      	nop
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff ff54 	bl	8005e70 <__NVIC_EnableIRQ>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005fdc:	f7ff face 	bl	800557c <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e099      	b.n	8006120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800600c:	e00f      	b.n	800602e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800600e:	f7ff fab5 	bl	800557c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	2b05      	cmp	r3, #5
 800601a:	d908      	bls.n	800602e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2203      	movs	r2, #3
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e078      	b.n	8006120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e8      	bne.n	800600e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4b38      	ldr	r3, [pc, #224]	; (8006128 <HAL_DMA_Init+0x158>)
 8006048:	4013      	ands	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800605a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	2b04      	cmp	r3, #4
 8006086:	d107      	bne.n	8006098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	4313      	orrs	r3, r2
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f023 0307 	bic.w	r3, r3, #7
 80060ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	2b04      	cmp	r3, #4
 80060c0:	d117      	bne.n	80060f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00e      	beq.n	80060f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa77 	bl	80065c8 <DMA_CheckFifoParam>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d008      	beq.n	80060f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2240      	movs	r2, #64	; 0x40
 80060e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80060ee:	2301      	movs	r3, #1
 80060f0:	e016      	b.n	8006120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa2e 	bl	800655c <DMA_CalcBaseAndBitshift>
 8006100:	4603      	mov	r3, r0
 8006102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	223f      	movs	r2, #63	; 0x3f
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e010803f 	.word	0xe010803f

0800612c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_DMA_Start_IT+0x26>
 800614e:	2302      	movs	r3, #2
 8006150:	e048      	b.n	80061e4 <HAL_DMA_Start_IT+0xb8>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d137      	bne.n	80061d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2202      	movs	r2, #2
 800616a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f9c0 	bl	8006500 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006184:	223f      	movs	r2, #63	; 0x3f
 8006186:	409a      	lsls	r2, r3
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0216 	orr.w	r2, r2, #22
 800619a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	695a      	ldr	r2, [r3, #20]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0208 	orr.w	r2, r2, #8
 80061c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0201 	orr.w	r2, r2, #1
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	e005      	b.n	80061e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80061de:	2302      	movs	r3, #2
 80061e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80061f8:	4b92      	ldr	r3, [pc, #584]	; (8006444 <HAL_DMA_IRQHandler+0x258>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a92      	ldr	r2, [pc, #584]	; (8006448 <HAL_DMA_IRQHandler+0x25c>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006216:	2208      	movs	r2, #8
 8006218:	409a      	lsls	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4013      	ands	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d01a      	beq.n	8006258 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d013      	beq.n	8006258 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0204 	bic.w	r2, r2, #4
 800623e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006244:	2208      	movs	r2, #8
 8006246:	409a      	lsls	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800625c:	2201      	movs	r2, #1
 800625e:	409a      	lsls	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4013      	ands	r3, r2
 8006264:	2b00      	cmp	r3, #0
 8006266:	d012      	beq.n	800628e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800627a:	2201      	movs	r2, #1
 800627c:	409a      	lsls	r2, r3
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006286:	f043 0202 	orr.w	r2, r3, #2
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006292:	2204      	movs	r2, #4
 8006294:	409a      	lsls	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4013      	ands	r3, r2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d012      	beq.n	80062c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00b      	beq.n	80062c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b0:	2204      	movs	r2, #4
 80062b2:	409a      	lsls	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062bc:	f043 0204 	orr.w	r2, r3, #4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c8:	2210      	movs	r2, #16
 80062ca:	409a      	lsls	r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d043      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d03c      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e6:	2210      	movs	r2, #16
 80062e8:	409a      	lsls	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d108      	bne.n	800631c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b00      	cmp	r3, #0
 8006310:	d024      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	e01f      	b.n	800635c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
 800632c:	e016      	b.n	800635c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d107      	bne.n	800634c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0208 	bic.w	r2, r2, #8
 800634a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006360:	2220      	movs	r2, #32
 8006362:	409a      	lsls	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4013      	ands	r3, r2
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 808e 	beq.w	800648a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0310 	and.w	r3, r3, #16
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8086 	beq.w	800648a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	2220      	movs	r2, #32
 8006384:	409a      	lsls	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b05      	cmp	r3, #5
 8006394:	d136      	bne.n	8006404 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0216 	bic.w	r2, r2, #22
 80063a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695a      	ldr	r2, [r3, #20]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_DMA_IRQHandler+0x1da>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d007      	beq.n	80063d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0208 	bic.w	r2, r2, #8
 80063d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063da:	223f      	movs	r2, #63	; 0x3f
 80063dc:	409a      	lsls	r2, r3
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d07d      	beq.n	80064f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
        }
        return;
 8006402:	e078      	b.n	80064f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d01c      	beq.n	800644c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d108      	bne.n	8006432 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006424:	2b00      	cmp	r3, #0
 8006426:	d030      	beq.n	800648a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
 8006430:	e02b      	b.n	800648a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b00      	cmp	r3, #0
 8006438:	d027      	beq.n	800648a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	4798      	blx	r3
 8006442:	e022      	b.n	800648a <HAL_DMA_IRQHandler+0x29e>
 8006444:	20000000 	.word	0x20000000
 8006448:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10f      	bne.n	800647a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0210 	bic.w	r2, r2, #16
 8006468:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648e:	2b00      	cmp	r3, #0
 8006490:	d032      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d022      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2205      	movs	r2, #5
 80064a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0201 	bic.w	r2, r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	3301      	adds	r3, #1
 80064ba:	60bb      	str	r3, [r7, #8]
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d307      	bcc.n	80064d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1f2      	bne.n	80064b6 <HAL_DMA_IRQHandler+0x2ca>
 80064d0:	e000      	b.n	80064d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80064d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4798      	blx	r3
 80064f4:	e000      	b.n	80064f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80064f6:	bf00      	nop
    }
  }
}
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop

08006500 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800651c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d108      	bne.n	8006540 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800653e:	e007      	b.n	8006550 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	60da      	str	r2, [r3, #12]
}
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	b2db      	uxtb	r3, r3
 800656a:	3b10      	subs	r3, #16
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <DMA_CalcBaseAndBitshift+0x60>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	091b      	lsrs	r3, r3, #4
 8006574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <DMA_CalcBaseAndBitshift+0x64>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4413      	add	r3, r2
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2b03      	cmp	r3, #3
 8006588:	d908      	bls.n	800659c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <DMA_CalcBaseAndBitshift+0x68>)
 8006592:	4013      	ands	r3, r2
 8006594:	1d1a      	adds	r2, r3, #4
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	659a      	str	r2, [r3, #88]	; 0x58
 800659a:	e006      	b.n	80065aa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <DMA_CalcBaseAndBitshift+0x68>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	aaaaaaab 	.word	0xaaaaaaab
 80065c0:	0801233c 	.word	0x0801233c
 80065c4:	fffffc00 	.word	0xfffffc00

080065c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d11f      	bne.n	8006622 <DMA_CheckFifoParam+0x5a>
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b03      	cmp	r3, #3
 80065e6:	d856      	bhi.n	8006696 <DMA_CheckFifoParam+0xce>
 80065e8:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <DMA_CheckFifoParam+0x28>)
 80065ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ee:	bf00      	nop
 80065f0:	08006601 	.word	0x08006601
 80065f4:	08006613 	.word	0x08006613
 80065f8:	08006601 	.word	0x08006601
 80065fc:	08006697 	.word	0x08006697
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006608:	2b00      	cmp	r3, #0
 800660a:	d046      	beq.n	800669a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006610:	e043      	b.n	800669a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800661a:	d140      	bne.n	800669e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006620:	e03d      	b.n	800669e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662a:	d121      	bne.n	8006670 <DMA_CheckFifoParam+0xa8>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b03      	cmp	r3, #3
 8006630:	d837      	bhi.n	80066a2 <DMA_CheckFifoParam+0xda>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <DMA_CheckFifoParam+0x70>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006649 	.word	0x08006649
 800663c:	0800664f 	.word	0x0800664f
 8006640:	08006649 	.word	0x08006649
 8006644:	08006661 	.word	0x08006661
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	e030      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d025      	beq.n	80066a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800665e:	e022      	b.n	80066a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006664:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006668:	d11f      	bne.n	80066aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800666e:	e01c      	b.n	80066aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d903      	bls.n	800667e <DMA_CheckFifoParam+0xb6>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d003      	beq.n	8006684 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800667c:	e018      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e015      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e00b      	b.n	80066ae <DMA_CheckFifoParam+0xe6>
      break;
 8006696:	bf00      	nop
 8006698:	e00a      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 800669a:	bf00      	nop
 800669c:	e008      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 800669e:	bf00      	nop
 80066a0:	e006      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066a2:	bf00      	nop
 80066a4:	e004      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066a6:	bf00      	nop
 80066a8:	e002      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80066aa:	bf00      	nop
 80066ac:	e000      	b.n	80066b0 <DMA_CheckFifoParam+0xe8>
      break;
 80066ae:	bf00      	nop
    }
  } 
  
  return status; 
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80066ce:	2300      	movs	r3, #0
 80066d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
 80066de:	e169      	b.n	80069b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80066e0:	2201      	movs	r2, #1
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	4013      	ands	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	f040 8158 	bne.w	80069ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d00b      	beq.n	800671e <HAL_GPIO_Init+0x5e>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d007      	beq.n	800671e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006712:	2b11      	cmp	r3, #17
 8006714:	d003      	beq.n	800671e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2b12      	cmp	r3, #18
 800671c:	d130      	bne.n	8006780 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	2203      	movs	r2, #3
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	4013      	ands	r3, r2
 8006734:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4313      	orrs	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006754:	2201      	movs	r2, #1
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	fa02 f303 	lsl.w	r3, r2, r3
 800675c:	43db      	mvns	r3, r3
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	4013      	ands	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 0201 	and.w	r2, r3, #1
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4313      	orrs	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2203      	movs	r2, #3
 800678c:	fa02 f303 	lsl.w	r3, r2, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	69ba      	ldr	r2, [r7, #24]
 8006794:	4013      	ands	r3, r2
 8006796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	005b      	lsls	r3, r3, #1
 80067a0:	fa02 f303 	lsl.w	r3, r2, r3
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d003      	beq.n	80067c0 <HAL_GPIO_Init+0x100>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b12      	cmp	r3, #18
 80067be:	d123      	bne.n	8006808 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	08da      	lsrs	r2, r3, #3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3208      	adds	r2, #8
 80067c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	220f      	movs	r2, #15
 80067d8:	fa02 f303 	lsl.w	r3, r2, r3
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	fa02 f303 	lsl.w	r3, r2, r3
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	08da      	lsrs	r2, r3, #3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3208      	adds	r2, #8
 8006802:	69b9      	ldr	r1, [r7, #24]
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	2203      	movs	r2, #3
 8006814:	fa02 f303 	lsl.w	r3, r2, r3
 8006818:	43db      	mvns	r3, r3
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	4013      	ands	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 0203 	and.w	r2, r3, #3
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80b2 	beq.w	80069ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800684a:	4b60      	ldr	r3, [pc, #384]	; (80069cc <HAL_GPIO_Init+0x30c>)
 800684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684e:	4a5f      	ldr	r2, [pc, #380]	; (80069cc <HAL_GPIO_Init+0x30c>)
 8006850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006854:	6453      	str	r3, [r2, #68]	; 0x44
 8006856:	4b5d      	ldr	r3, [pc, #372]	; (80069cc <HAL_GPIO_Init+0x30c>)
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685e:	60fb      	str	r3, [r7, #12]
 8006860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006862:	4a5b      	ldr	r2, [pc, #364]	; (80069d0 <HAL_GPIO_Init+0x310>)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	089b      	lsrs	r3, r3, #2
 8006868:	3302      	adds	r3, #2
 800686a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	220f      	movs	r2, #15
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	43db      	mvns	r3, r3
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	4013      	ands	r3, r2
 8006884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a52      	ldr	r2, [pc, #328]	; (80069d4 <HAL_GPIO_Init+0x314>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d02b      	beq.n	80068e6 <HAL_GPIO_Init+0x226>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a51      	ldr	r2, [pc, #324]	; (80069d8 <HAL_GPIO_Init+0x318>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d025      	beq.n	80068e2 <HAL_GPIO_Init+0x222>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a50      	ldr	r2, [pc, #320]	; (80069dc <HAL_GPIO_Init+0x31c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01f      	beq.n	80068de <HAL_GPIO_Init+0x21e>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a4f      	ldr	r2, [pc, #316]	; (80069e0 <HAL_GPIO_Init+0x320>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d019      	beq.n	80068da <HAL_GPIO_Init+0x21a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a4e      	ldr	r2, [pc, #312]	; (80069e4 <HAL_GPIO_Init+0x324>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_GPIO_Init+0x216>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a4d      	ldr	r2, [pc, #308]	; (80069e8 <HAL_GPIO_Init+0x328>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d00d      	beq.n	80068d2 <HAL_GPIO_Init+0x212>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a4c      	ldr	r2, [pc, #304]	; (80069ec <HAL_GPIO_Init+0x32c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d007      	beq.n	80068ce <HAL_GPIO_Init+0x20e>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a4b      	ldr	r2, [pc, #300]	; (80069f0 <HAL_GPIO_Init+0x330>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d101      	bne.n	80068ca <HAL_GPIO_Init+0x20a>
 80068c6:	2307      	movs	r3, #7
 80068c8:	e00e      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068ca:	2308      	movs	r3, #8
 80068cc:	e00c      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068ce:	2306      	movs	r3, #6
 80068d0:	e00a      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068d2:	2305      	movs	r3, #5
 80068d4:	e008      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068d6:	2304      	movs	r3, #4
 80068d8:	e006      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068da:	2303      	movs	r3, #3
 80068dc:	e004      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068de:	2302      	movs	r3, #2
 80068e0:	e002      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <HAL_GPIO_Init+0x228>
 80068e6:	2300      	movs	r3, #0
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	f002 0203 	and.w	r2, r2, #3
 80068ee:	0092      	lsls	r2, r2, #2
 80068f0:	4093      	lsls	r3, r2
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80068f8:	4935      	ldr	r1, [pc, #212]	; (80069d0 <HAL_GPIO_Init+0x310>)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	089b      	lsrs	r3, r3, #2
 80068fe:	3302      	adds	r3, #2
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006906:	4b3b      	ldr	r3, [pc, #236]	; (80069f4 <HAL_GPIO_Init+0x334>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	43db      	mvns	r3, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4013      	ands	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800692a:	4a32      	ldr	r2, [pc, #200]	; (80069f4 <HAL_GPIO_Init+0x334>)
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006930:	4b30      	ldr	r3, [pc, #192]	; (80069f4 <HAL_GPIO_Init+0x334>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	43db      	mvns	r3, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4013      	ands	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <HAL_GPIO_Init+0x334>)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800695a:	4b26      	ldr	r3, [pc, #152]	; (80069f4 <HAL_GPIO_Init+0x334>)
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	43db      	mvns	r3, r3
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	4013      	ands	r3, r2
 8006968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800697e:	4a1d      	ldr	r2, [pc, #116]	; (80069f4 <HAL_GPIO_Init+0x334>)
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006984:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_GPIO_Init+0x334>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	43db      	mvns	r3, r3
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	4013      	ands	r3, r2
 8006992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069a8:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <HAL_GPIO_Init+0x334>)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	f67f ae92 	bls.w	80066e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3724      	adds	r7, #36	; 0x24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40013800 	.word	0x40013800
 80069d4:	40020000 	.word	0x40020000
 80069d8:	40020400 	.word	0x40020400
 80069dc:	40020800 	.word	0x40020800
 80069e0:	40020c00 	.word	0x40020c00
 80069e4:	40021000 	.word	0x40021000
 80069e8:	40021400 	.word	0x40021400
 80069ec:	40021800 	.word	0x40021800
 80069f0:	40021c00 	.word	0x40021c00
 80069f4:	40013c00 	.word	0x40013c00

080069f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	807b      	strh	r3, [r7, #2]
 8006a04:	4613      	mov	r3, r2
 8006a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a08:	787b      	ldrb	r3, [r7, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a0e:	887a      	ldrh	r2, [r7, #2]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006a14:	e003      	b.n	8006a1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006a16:	887b      	ldrh	r3, [r7, #2]
 8006a18:	041a      	lsls	r2, r3, #16
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	619a      	str	r2, [r3, #24]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a3c:	887a      	ldrh	r2, [r7, #2]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4013      	ands	r3, r2
 8006a42:	041a      	lsls	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	43d9      	mvns	r1, r3
 8006a48:	887b      	ldrh	r3, [r7, #2]
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	619a      	str	r2, [r3, #24]
}
 8006a52:	bf00      	nop
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a60:	b08f      	sub	sp, #60	; 0x3c
 8006a62:	af0a      	add	r7, sp, #40	; 0x28
 8006a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e116      	b.n	8006c9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7fe fb80 	bl	8005190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f004 f93a 	bl	800ad28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	687e      	ldr	r6, [r7, #4]
 8006abc:	466d      	mov	r5, sp
 8006abe:	f106 0410 	add.w	r4, r6, #16
 8006ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ad2:	1d33      	adds	r3, r6, #4
 8006ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ad6:	6838      	ldr	r0, [r7, #0]
 8006ad8:	f004 f8c8 	bl	800ac6c <USB_CoreInit>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e0d7      	b.n	8006c9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f004 f928 	bl	800ad4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
 8006afe:	e04a      	b.n	8006b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	333d      	adds	r3, #61	; 0x3d
 8006b10:	2201      	movs	r2, #1
 8006b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006b14:	7bfa      	ldrb	r2, [r7, #15]
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	333c      	adds	r3, #60	; 0x3c
 8006b24:	7bfa      	ldrb	r2, [r7, #15]
 8006b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006b28:	7bfa      	ldrb	r2, [r7, #15]
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	b298      	uxth	r0, r3
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	4613      	mov	r3, r2
 8006b32:	00db      	lsls	r3, r3, #3
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	440b      	add	r3, r1
 8006b3a:	3342      	adds	r3, #66	; 0x42
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006b40:	7bfa      	ldrb	r2, [r7, #15]
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	4613      	mov	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	333f      	adds	r3, #63	; 0x3f
 8006b50:	2200      	movs	r2, #0
 8006b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b54:	7bfa      	ldrb	r2, [r7, #15]
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	4613      	mov	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	1a9b      	subs	r3, r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	3344      	adds	r3, #68	; 0x44
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b68:	7bfa      	ldrb	r2, [r7, #15]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	1a9b      	subs	r3, r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	3348      	adds	r3, #72	; 0x48
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b7c:	7bfa      	ldrb	r2, [r7, #15]
 8006b7e:	6879      	ldr	r1, [r7, #4]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	3350      	adds	r3, #80	; 0x50
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	3301      	adds	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
 8006b96:	7bfa      	ldrb	r2, [r7, #15]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d3af      	bcc.n	8006b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e044      	b.n	8006c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ba6:	7bfa      	ldrb	r2, [r7, #15]
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	1a9b      	subs	r3, r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006bb8:	2200      	movs	r2, #0
 8006bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006bbc:	7bfa      	ldrb	r2, [r7, #15]
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	00db      	lsls	r3, r3, #3
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006bce:	7bfa      	ldrb	r2, [r7, #15]
 8006bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006bd2:	7bfa      	ldrb	r2, [r7, #15]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006be8:	7bfa      	ldrb	r2, [r7, #15]
 8006bea:	6879      	ldr	r1, [r7, #4]
 8006bec:	4613      	mov	r3, r2
 8006bee:	00db      	lsls	r3, r3, #3
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	440b      	add	r3, r1
 8006bf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006bfe:	7bfa      	ldrb	r2, [r7, #15]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4613      	mov	r3, r2
 8006c04:	00db      	lsls	r3, r3, #3
 8006c06:	1a9b      	subs	r3, r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006c14:	7bfa      	ldrb	r2, [r7, #15]
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	1a9b      	subs	r3, r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	7bfa      	ldrb	r2, [r7, #15]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d3b5      	bcc.n	8006ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	687e      	ldr	r6, [r7, #4]
 8006c42:	466d      	mov	r5, sp
 8006c44:	f106 0410 	add.w	r4, r6, #16
 8006c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c58:	1d33      	adds	r3, r6, #4
 8006c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c5c:	6838      	ldr	r0, [r7, #0]
 8006c5e:	f004 f89f 	bl	800ada0 <USB_DevInit>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d005      	beq.n	8006c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e014      	b.n	8006c9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d102      	bne.n	8006c92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f80b 	bl	8006ca8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f004 fa51 	bl	800b13e <USB_DevDisconnect>

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006ca8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <HAL_PCDEx_ActivateLPM+0x44>)
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	10000003 	.word	0x10000003

08006cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	; (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfe:	6013      	str	r3, [r2, #0]
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40007000 	.word	0x40007000

08006d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4a22      	ldr	r2, [pc, #136]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	; 0x40
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d32:	4b1e      	ldr	r3, [pc, #120]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d3e:	f7fe fc1d 	bl	800557c <HAL_GetTick>
 8006d42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d44:	e009      	b.n	8006d5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d46:	f7fe fc19 	bl	800557c <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d54:	d901      	bls.n	8006d5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e022      	b.n	8006da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d1ee      	bne.n	8006d46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d68:	4b10      	ldr	r3, [pc, #64]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a0f      	ldr	r2, [pc, #60]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d74:	f7fe fc02 	bl	800557c <HAL_GetTick>
 8006d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d7a:	e009      	b.n	8006d90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d7c:	f7fe fbfe 	bl	800557c <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8a:	d901      	bls.n	8006d90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e007      	b.n	8006da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006d90:	4b06      	ldr	r3, [pc, #24]	; (8006dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d9c:	d1ee      	bne.n	8006d7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	40023800 	.word	0x40023800
 8006dac:	40007000 	.word	0x40007000

08006db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006db8:	2300      	movs	r3, #0
 8006dba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e291      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 8087 	beq.w	8006ee2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dd4:	4b96      	ldr	r3, [pc, #600]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 030c 	and.w	r3, r3, #12
 8006ddc:	2b04      	cmp	r3, #4
 8006dde:	d00c      	beq.n	8006dfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006de0:	4b93      	ldr	r3, [pc, #588]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 030c 	and.w	r3, r3, #12
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	d112      	bne.n	8006e12 <HAL_RCC_OscConfig+0x62>
 8006dec:	4b90      	ldr	r3, [pc, #576]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006df8:	d10b      	bne.n	8006e12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dfa:	4b8d      	ldr	r3, [pc, #564]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d06c      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x130>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d168      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e26b      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCC_OscConfig+0x7a>
 8006e1c:	4b84      	ldr	r3, [pc, #528]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a83      	ldr	r2, [pc, #524]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	e02e      	b.n	8006e88 <HAL_RCC_OscConfig+0xd8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10c      	bne.n	8006e4c <HAL_RCC_OscConfig+0x9c>
 8006e32:	4b7f      	ldr	r3, [pc, #508]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a7e      	ldr	r2, [pc, #504]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	4b7c      	ldr	r3, [pc, #496]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a7b      	ldr	r2, [pc, #492]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e01d      	b.n	8006e88 <HAL_RCC_OscConfig+0xd8>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0xc0>
 8006e56:	4b76      	ldr	r3, [pc, #472]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a75      	ldr	r2, [pc, #468]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b73      	ldr	r3, [pc, #460]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a72      	ldr	r2, [pc, #456]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e00b      	b.n	8006e88 <HAL_RCC_OscConfig+0xd8>
 8006e70:	4b6f      	ldr	r3, [pc, #444]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a6e      	ldr	r2, [pc, #440]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4b6c      	ldr	r3, [pc, #432]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6b      	ldr	r2, [pc, #428]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fe fb74 	bl	800557c <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fe fb70 	bl	800557c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	; 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e21f      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eaa:	4b61      	ldr	r3, [pc, #388]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0xe8>
 8006eb6:	e014      	b.n	8006ee2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fe fb60 	bl	800557c <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fe fb5c 	bl	800557c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e20b      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ed2:	4b57      	ldr	r3, [pc, #348]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x110>
 8006ede:	e000      	b.n	8006ee2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d069      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eee:	4b50      	ldr	r3, [pc, #320]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efa:	4b4d      	ldr	r3, [pc, #308]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d11c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x190>
 8006f06:	4b4a      	ldr	r3, [pc, #296]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d116      	bne.n	8006f40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f12:	4b47      	ldr	r3, [pc, #284]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_RCC_OscConfig+0x17a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e1df      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2a:	4b41      	ldr	r3, [pc, #260]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	493d      	ldr	r1, [pc, #244]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3e:	e040      	b.n	8006fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d023      	beq.n	8006f90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f48:	4b39      	ldr	r3, [pc, #228]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a38      	ldr	r2, [pc, #224]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f54:	f7fe fb12 	bl	800557c <HAL_GetTick>
 8006f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5a:	e008      	b.n	8006f6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f5c:	f7fe fb0e 	bl	800557c <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d901      	bls.n	8006f6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e1bd      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6e:	4b30      	ldr	r3, [pc, #192]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0f0      	beq.n	8006f5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f7a:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	4929      	ldr	r1, [pc, #164]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	600b      	str	r3, [r1, #0]
 8006f8e:	e018      	b.n	8006fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a26      	ldr	r2, [pc, #152]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f9c:	f7fe faee 	bl	800557c <HAL_GetTick>
 8006fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fa4:	f7fe faea 	bl	800557c <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e199      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb6:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1f0      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0308 	and.w	r3, r3, #8
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d038      	beq.n	8007040 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d019      	beq.n	800700a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fd6:	4b16      	ldr	r3, [pc, #88]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006fdc:	f043 0301 	orr.w	r3, r3, #1
 8006fe0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fe2:	f7fe facb 	bl	800557c <HAL_GetTick>
 8006fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fea:	f7fe fac7 	bl	800557c <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e176      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8006ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x23a>
 8007008:	e01a      	b.n	8007040 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 800700c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700e:	4a08      	ldr	r2, [pc, #32]	; (8007030 <HAL_RCC_OscConfig+0x280>)
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007016:	f7fe fab1 	bl	800557c <HAL_GetTick>
 800701a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800701c:	e00a      	b.n	8007034 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800701e:	f7fe faad 	bl	800557c <HAL_GetTick>
 8007022:	4602      	mov	r2, r0
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d903      	bls.n	8007034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e15c      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
 8007030:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007034:	4b91      	ldr	r3, [pc, #580]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1ee      	bne.n	800701e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80a4 	beq.w	8007196 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800704e:	4b8b      	ldr	r3, [pc, #556]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	4b88      	ldr	r3, [pc, #544]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	4a87      	ldr	r2, [pc, #540]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007064:	6413      	str	r3, [r2, #64]	; 0x40
 8007066:	4b85      	ldr	r3, [pc, #532]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706e:	60bb      	str	r3, [r7, #8]
 8007070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007072:	2301      	movs	r3, #1
 8007074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007076:	4b82      	ldr	r3, [pc, #520]	; (8007280 <HAL_RCC_OscConfig+0x4d0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707e:	2b00      	cmp	r3, #0
 8007080:	d118      	bne.n	80070b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007082:	4b7f      	ldr	r3, [pc, #508]	; (8007280 <HAL_RCC_OscConfig+0x4d0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a7e      	ldr	r2, [pc, #504]	; (8007280 <HAL_RCC_OscConfig+0x4d0>)
 8007088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800708e:	f7fe fa75 	bl	800557c <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007096:	f7fe fa71 	bl	800557c <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b64      	cmp	r3, #100	; 0x64
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e120      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a8:	4b75      	ldr	r3, [pc, #468]	; (8007280 <HAL_RCC_OscConfig+0x4d0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f0      	beq.n	8007096 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d106      	bne.n	80070ca <HAL_RCC_OscConfig+0x31a>
 80070bc:	4b6f      	ldr	r3, [pc, #444]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c0:	4a6e      	ldr	r2, [pc, #440]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6713      	str	r3, [r2, #112]	; 0x70
 80070c8:	e02d      	b.n	8007126 <HAL_RCC_OscConfig+0x376>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10c      	bne.n	80070ec <HAL_RCC_OscConfig+0x33c>
 80070d2:	4b6a      	ldr	r3, [pc, #424]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	4a69      	ldr	r2, [pc, #420]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070d8:	f023 0301 	bic.w	r3, r3, #1
 80070dc:	6713      	str	r3, [r2, #112]	; 0x70
 80070de:	4b67      	ldr	r3, [pc, #412]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e2:	4a66      	ldr	r2, [pc, #408]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070e4:	f023 0304 	bic.w	r3, r3, #4
 80070e8:	6713      	str	r3, [r2, #112]	; 0x70
 80070ea:	e01c      	b.n	8007126 <HAL_RCC_OscConfig+0x376>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	d10c      	bne.n	800710e <HAL_RCC_OscConfig+0x35e>
 80070f4:	4b61      	ldr	r3, [pc, #388]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f8:	4a60      	ldr	r2, [pc, #384]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80070fa:	f043 0304 	orr.w	r3, r3, #4
 80070fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007100:	4b5e      	ldr	r3, [pc, #376]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007104:	4a5d      	ldr	r2, [pc, #372]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	6713      	str	r3, [r2, #112]	; 0x70
 800710c:	e00b      	b.n	8007126 <HAL_RCC_OscConfig+0x376>
 800710e:	4b5b      	ldr	r3, [pc, #364]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007112:	4a5a      	ldr	r2, [pc, #360]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	6713      	str	r3, [r2, #112]	; 0x70
 800711a:	4b58      	ldr	r3, [pc, #352]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800711c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711e:	4a57      	ldr	r2, [pc, #348]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d015      	beq.n	800715a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712e:	f7fe fa25 	bl	800557c <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fe fa21 	bl	800557c <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0ce      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800714c:	4b4b      	ldr	r3, [pc, #300]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0ee      	beq.n	8007136 <HAL_RCC_OscConfig+0x386>
 8007158:	e014      	b.n	8007184 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800715a:	f7fe fa0f 	bl	800557c <HAL_GetTick>
 800715e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007160:	e00a      	b.n	8007178 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fe fa0b 	bl	800557c <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e0b8      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007178:	4b40      	ldr	r3, [pc, #256]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1ee      	bne.n	8007162 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d105      	bne.n	8007196 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800718a:	4b3c      	ldr	r3, [pc, #240]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	4a3b      	ldr	r2, [pc, #236]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80a4 	beq.w	80072e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a0:	4b36      	ldr	r3, [pc, #216]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d06b      	beq.n	8007284 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d149      	bne.n	8007248 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071b4:	4b31      	ldr	r3, [pc, #196]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a30      	ldr	r2, [pc, #192]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80071ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fe f9dc 	bl	800557c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c8:	f7fe f9d8 	bl	800557c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e087      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071da:	4b28      	ldr	r3, [pc, #160]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1f0      	bne.n	80071c8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69da      	ldr	r2, [r3, #28]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	019b      	lsls	r3, r3, #6
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	085b      	lsrs	r3, r3, #1
 80071fe:	3b01      	subs	r3, #1
 8007200:	041b      	lsls	r3, r3, #16
 8007202:	431a      	orrs	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	061b      	lsls	r3, r3, #24
 800720a:	4313      	orrs	r3, r2
 800720c:	4a1b      	ldr	r2, [pc, #108]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800720e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007212:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007214:	4b19      	ldr	r3, [pc, #100]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800721a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800721e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007220:	f7fe f9ac 	bl	800557c <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007228:	f7fe f9a8 	bl	800557c <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e057      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800723a:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0f0      	beq.n	8007228 <HAL_RCC_OscConfig+0x478>
 8007246:	e04f      	b.n	80072e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007248:	4b0c      	ldr	r3, [pc, #48]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a0b      	ldr	r2, [pc, #44]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 800724e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fe f992 	bl	800557c <HAL_GetTick>
 8007258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800725c:	f7fe f98e 	bl	800557c <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e03d      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800726e:	4b03      	ldr	r3, [pc, #12]	; (800727c <HAL_RCC_OscConfig+0x4cc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x4ac>
 800727a:	e035      	b.n	80072e8 <HAL_RCC_OscConfig+0x538>
 800727c:	40023800 	.word	0x40023800
 8007280:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <HAL_RCC_OscConfig+0x544>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d028      	beq.n	80072e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800729c:	429a      	cmp	r2, r3
 800729e:	d121      	bne.n	80072e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d11a      	bne.n	80072e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072b4:	4013      	ands	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072bc:	4293      	cmp	r3, r2
 80072be:	d111      	bne.n	80072e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	085b      	lsrs	r3, r3, #1
 80072cc:	3b01      	subs	r3, #1
 80072ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e000      	b.n	80072ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40023800 	.word	0x40023800

080072f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e0d0      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007310:	4b6a      	ldr	r3, [pc, #424]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d910      	bls.n	8007340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b67      	ldr	r3, [pc, #412]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 020f 	bic.w	r2, r3, #15
 8007326:	4965      	ldr	r1, [pc, #404]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732e:	4b63      	ldr	r3, [pc, #396]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d001      	beq.n	8007340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e0b8      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d020      	beq.n	800738e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0304 	and.w	r3, r3, #4
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007358:	4b59      	ldr	r3, [pc, #356]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	4a58      	ldr	r2, [pc, #352]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800735e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d005      	beq.n	800737c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007370:	4b53      	ldr	r3, [pc, #332]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	4a52      	ldr	r2, [pc, #328]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800737a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800737c:	4b50      	ldr	r3, [pc, #320]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	494d      	ldr	r1, [pc, #308]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800738a:	4313      	orrs	r3, r2
 800738c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	d040      	beq.n	800741c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d107      	bne.n	80073b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a2:	4b47      	ldr	r3, [pc, #284]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d115      	bne.n	80073da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e07f      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d107      	bne.n	80073ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ba:	4b41      	ldr	r3, [pc, #260]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d109      	bne.n	80073da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e073      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ca:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e06b      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073da:	4b39      	ldr	r3, [pc, #228]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f023 0203 	bic.w	r2, r3, #3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	4936      	ldr	r1, [pc, #216]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ec:	f7fe f8c6 	bl	800557c <HAL_GetTick>
 80073f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f2:	e00a      	b.n	800740a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f4:	f7fe f8c2 	bl	800557c <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007402:	4293      	cmp	r3, r2
 8007404:	d901      	bls.n	800740a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007406:	2303      	movs	r3, #3
 8007408:	e053      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800740a:	4b2d      	ldr	r3, [pc, #180]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 020c 	and.w	r2, r3, #12
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	429a      	cmp	r2, r3
 800741a:	d1eb      	bne.n	80073f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800741c:	4b27      	ldr	r3, [pc, #156]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d210      	bcs.n	800744c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742a:	4b24      	ldr	r3, [pc, #144]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f023 020f 	bic.w	r2, r3, #15
 8007432:	4922      	ldr	r1, [pc, #136]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	4313      	orrs	r3, r2
 8007438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	4b20      	ldr	r3, [pc, #128]	; (80074bc <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e032      	b.n	80074b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	4916      	ldr	r1, [pc, #88]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007466:	4313      	orrs	r3, r2
 8007468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0308 	and.w	r3, r3, #8
 8007472:	2b00      	cmp	r3, #0
 8007474:	d009      	beq.n	800748a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	490e      	ldr	r1, [pc, #56]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007486:	4313      	orrs	r3, r2
 8007488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800748a:	f000 f821 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800748e:	4602      	mov	r2, r0
 8007490:	4b0b      	ldr	r3, [pc, #44]	; (80074c0 <HAL_RCC_ClockConfig+0x1c8>)
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	490a      	ldr	r1, [pc, #40]	; (80074c4 <HAL_RCC_ClockConfig+0x1cc>)
 800749c:	5ccb      	ldrb	r3, [r1, r3]
 800749e:	fa22 f303 	lsr.w	r3, r2, r3
 80074a2:	4a09      	ldr	r2, [pc, #36]	; (80074c8 <HAL_RCC_ClockConfig+0x1d0>)
 80074a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074a6:	4b09      	ldr	r3, [pc, #36]	; (80074cc <HAL_RCC_ClockConfig+0x1d4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fd febe 	bl	800522c <HAL_InitTick>

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	40023c00 	.word	0x40023c00
 80074c0:	40023800 	.word	0x40023800
 80074c4:	08012324 	.word	0x08012324
 80074c8:	20000000 	.word	0x20000000
 80074cc:	20000004 	.word	0x20000004

080074d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	2300      	movs	r3, #0
 80074e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074e8:	4b67      	ldr	r3, [pc, #412]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d00d      	beq.n	8007510 <HAL_RCC_GetSysClockFreq+0x40>
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	f200 80bd 	bhi.w	8007674 <HAL_RCC_GetSysClockFreq+0x1a4>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_RCC_GetSysClockFreq+0x34>
 80074fe:	2b04      	cmp	r3, #4
 8007500:	d003      	beq.n	800750a <HAL_RCC_GetSysClockFreq+0x3a>
 8007502:	e0b7      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007504:	4b61      	ldr	r3, [pc, #388]	; (800768c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007506:	60bb      	str	r3, [r7, #8]
      break;
 8007508:	e0b7      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800750a:	4b61      	ldr	r3, [pc, #388]	; (8007690 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800750c:	60bb      	str	r3, [r7, #8]
      break;
 800750e:	e0b4      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007510:	4b5d      	ldr	r3, [pc, #372]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007518:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800751a:	4b5b      	ldr	r3, [pc, #364]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d04d      	beq.n	80075c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007526:	4b58      	ldr	r3, [pc, #352]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	099b      	lsrs	r3, r3, #6
 800752c:	461a      	mov	r2, r3
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007536:	f04f 0100 	mov.w	r1, #0
 800753a:	ea02 0800 	and.w	r8, r2, r0
 800753e:	ea03 0901 	and.w	r9, r3, r1
 8007542:	4640      	mov	r0, r8
 8007544:	4649      	mov	r1, r9
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	014b      	lsls	r3, r1, #5
 8007550:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007554:	0142      	lsls	r2, r0, #5
 8007556:	4610      	mov	r0, r2
 8007558:	4619      	mov	r1, r3
 800755a:	ebb0 0008 	subs.w	r0, r0, r8
 800755e:	eb61 0109 	sbc.w	r1, r1, r9
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	018b      	lsls	r3, r1, #6
 800756c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007570:	0182      	lsls	r2, r0, #6
 8007572:	1a12      	subs	r2, r2, r0
 8007574:	eb63 0301 	sbc.w	r3, r3, r1
 8007578:	f04f 0000 	mov.w	r0, #0
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	00d9      	lsls	r1, r3, #3
 8007582:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007586:	00d0      	lsls	r0, r2, #3
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	eb12 0208 	adds.w	r2, r2, r8
 8007590:	eb43 0309 	adc.w	r3, r3, r9
 8007594:	f04f 0000 	mov.w	r0, #0
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	0259      	lsls	r1, r3, #9
 800759e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80075a2:	0250      	lsls	r0, r2, #9
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4610      	mov	r0, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	f7f9 fb70 	bl	8000c98 <__aeabi_uldivmod>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4613      	mov	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e04a      	b.n	8007658 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075c2:	4b31      	ldr	r3, [pc, #196]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	099b      	lsrs	r3, r3, #6
 80075c8:	461a      	mov	r2, r3
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	ea02 0400 	and.w	r4, r2, r0
 80075da:	ea03 0501 	and.w	r5, r3, r1
 80075de:	4620      	mov	r0, r4
 80075e0:	4629      	mov	r1, r5
 80075e2:	f04f 0200 	mov.w	r2, #0
 80075e6:	f04f 0300 	mov.w	r3, #0
 80075ea:	014b      	lsls	r3, r1, #5
 80075ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075f0:	0142      	lsls	r2, r0, #5
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	1b00      	subs	r0, r0, r4
 80075f8:	eb61 0105 	sbc.w	r1, r1, r5
 80075fc:	f04f 0200 	mov.w	r2, #0
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	018b      	lsls	r3, r1, #6
 8007606:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800760a:	0182      	lsls	r2, r0, #6
 800760c:	1a12      	subs	r2, r2, r0
 800760e:	eb63 0301 	sbc.w	r3, r3, r1
 8007612:	f04f 0000 	mov.w	r0, #0
 8007616:	f04f 0100 	mov.w	r1, #0
 800761a:	00d9      	lsls	r1, r3, #3
 800761c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007620:	00d0      	lsls	r0, r2, #3
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	1912      	adds	r2, r2, r4
 8007628:	eb45 0303 	adc.w	r3, r5, r3
 800762c:	f04f 0000 	mov.w	r0, #0
 8007630:	f04f 0100 	mov.w	r1, #0
 8007634:	0299      	lsls	r1, r3, #10
 8007636:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800763a:	0290      	lsls	r0, r2, #10
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4610      	mov	r0, r2
 8007642:	4619      	mov	r1, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	461a      	mov	r2, r3
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	f7f9 fb24 	bl	8000c98 <__aeabi_uldivmod>
 8007650:	4602      	mov	r2, r0
 8007652:	460b      	mov	r3, r1
 8007654:	4613      	mov	r3, r2
 8007656:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007658:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	f003 0303 	and.w	r3, r3, #3
 8007662:	3301      	adds	r3, #1
 8007664:	005b      	lsls	r3, r3, #1
 8007666:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	60bb      	str	r3, [r7, #8]
      break;
 8007672:	e002      	b.n	800767a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007676:	60bb      	str	r3, [r7, #8]
      break;
 8007678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800767a:	68bb      	ldr	r3, [r7, #8]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800
 800768c:	00f42400 	.word	0x00f42400
 8007690:	007a1200 	.word	0x007a1200

08007694 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007698:	4b03      	ldr	r3, [pc, #12]	; (80076a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800769a:	681b      	ldr	r3, [r3, #0]
}
 800769c:	4618      	mov	r0, r3
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000000 	.word	0x20000000

080076ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076b0:	f7ff fff0 	bl	8007694 <HAL_RCC_GetHCLKFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	0a9b      	lsrs	r3, r3, #10
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	4903      	ldr	r1, [pc, #12]	; (80076d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	40023800 	.word	0x40023800
 80076d0:	08012334 	.word	0x08012334

080076d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076d8:	f7ff ffdc 	bl	8007694 <HAL_RCC_GetHCLKFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b05      	ldr	r3, [pc, #20]	; (80076f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	0b5b      	lsrs	r3, r3, #13
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	4903      	ldr	r1, [pc, #12]	; (80076f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	40023800 	.word	0x40023800
 80076f8:	08012334 	.word	0x08012334

080076fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	220f      	movs	r2, #15
 800770a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800770c:	4b12      	ldr	r3, [pc, #72]	; (8007758 <HAL_RCC_GetClockConfig+0x5c>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f003 0203 	and.w	r2, r3, #3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <HAL_RCC_GetClockConfig+0x5c>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007724:	4b0c      	ldr	r3, [pc, #48]	; (8007758 <HAL_RCC_GetClockConfig+0x5c>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <HAL_RCC_GetClockConfig+0x5c>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <HAL_RCC_GetClockConfig+0x60>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	601a      	str	r2, [r3, #0]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40023800 	.word	0x40023800
 800775c:	40023c00 	.word	0x40023c00

08007760 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007774:	2300      	movs	r3, #0
 8007776:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007784:	4b65      	ldr	r3, [pc, #404]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	4a64      	ldr	r2, [pc, #400]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800778a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800778e:	6093      	str	r3, [r2, #8]
 8007790:	4b62      	ldr	r3, [pc, #392]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	4960      	ldr	r1, [pc, #384]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d017      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80077b6:	4b59      	ldr	r3, [pc, #356]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c4:	4955      	ldr	r1, [pc, #340]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077d4:	d101      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80077e2:	2301      	movs	r3, #1
 80077e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80077f2:	4b4a      	ldr	r3, [pc, #296]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	4946      	ldr	r1, [pc, #280]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007802:	4313      	orrs	r3, r2
 8007804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007810:	d101      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8007812:	2301      	movs	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800781e:	2301      	movs	r3, #1
 8007820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 808b 	beq.w	8007946 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007830:	4b3a      	ldr	r3, [pc, #232]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	4a39      	ldr	r2, [pc, #228]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800783a:	6413      	str	r3, [r2, #64]	; 0x40
 800783c:	4b37      	ldr	r3, [pc, #220]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007848:	4b35      	ldr	r3, [pc, #212]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a34      	ldr	r2, [pc, #208]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800784e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007852:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007854:	f7fd fe92 	bl	800557c <HAL_GetTick>
 8007858:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800785a:	e008      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800785c:	f7fd fe8e 	bl	800557c <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b64      	cmp	r3, #100	; 0x64
 8007868:	d901      	bls.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e2bc      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800786e:	4b2c      	ldr	r3, [pc, #176]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0f0      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800787a:	4b28      	ldr	r3, [pc, #160]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800787c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007882:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d035      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	429a      	cmp	r2, r3
 8007896:	d02e      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007898:	4b20      	ldr	r3, [pc, #128]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800789a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078a0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078a2:	4b1e      	ldr	r3, [pc, #120]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	4a1d      	ldr	r2, [pc, #116]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ac:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078ae:	4b1b      	ldr	r3, [pc, #108]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	4a1a      	ldr	r2, [pc, #104]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80078ba:	4a18      	ldr	r2, [pc, #96]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078c0:	4b16      	ldr	r3, [pc, #88]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d114      	bne.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078cc:	f7fd fe56 	bl	800557c <HAL_GetTick>
 80078d0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d2:	e00a      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d4:	f7fd fe52 	bl	800557c <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d901      	bls.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e27e      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80078ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d0ee      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007902:	d111      	bne.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8007904:	4b05      	ldr	r3, [pc, #20]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8007912:	400b      	ands	r3, r1
 8007914:	4901      	ldr	r1, [pc, #4]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
 800791a:	e00b      	b.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800791c:	40023800 	.word	0x40023800
 8007920:	40007000 	.word	0x40007000
 8007924:	0ffffcff 	.word	0x0ffffcff
 8007928:	4ba4      	ldr	r3, [pc, #656]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	4aa3      	ldr	r2, [pc, #652]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800792e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007932:	6093      	str	r3, [r2, #8]
 8007934:	4ba1      	ldr	r3, [pc, #644]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007936:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007940:	499e      	ldr	r1, [pc, #632]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0310 	and.w	r3, r3, #16
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007952:	4b9a      	ldr	r3, [pc, #616]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	4a98      	ldr	r2, [pc, #608]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800795a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800795e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007962:	4b96      	ldr	r3, [pc, #600]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007964:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	4993      	ldr	r1, [pc, #588]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800796e:	4313      	orrs	r3, r2
 8007970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00a      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007980:	4b8e      	ldr	r3, [pc, #568]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007986:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798e:	498b      	ldr	r1, [pc, #556]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007990:	4313      	orrs	r3, r2
 8007992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079a2:	4b86      	ldr	r3, [pc, #536]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	4982      	ldr	r1, [pc, #520]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00a      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079c4:	4b7d      	ldr	r3, [pc, #500]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d2:	497a      	ldr	r1, [pc, #488]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079e6:	4b75      	ldr	r3, [pc, #468]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ec:	f023 0203 	bic.w	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	4971      	ldr	r1, [pc, #452]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00a      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007a08:	4b6c      	ldr	r3, [pc, #432]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f023 020c 	bic.w	r2, r3, #12
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a16:	4969      	ldr	r1, [pc, #420]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007a2a:	4b64      	ldr	r3, [pc, #400]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a38:	4960      	ldr	r1, [pc, #384]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00a      	beq.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007a4c:	4b5b      	ldr	r3, [pc, #364]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	4958      	ldr	r1, [pc, #352]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00a      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a6e:	4b53      	ldr	r3, [pc, #332]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7c:	494f      	ldr	r1, [pc, #316]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a90:	4b4a      	ldr	r3, [pc, #296]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9e:	4947      	ldr	r1, [pc, #284]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00a      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007ab2:	4b42      	ldr	r3, [pc, #264]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac0:	493e      	ldr	r1, [pc, #248]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00a      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007ad4:	4b39      	ldr	r3, [pc, #228]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae2:	4936      	ldr	r1, [pc, #216]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007af6:	4b31      	ldr	r3, [pc, #196]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b04:	492d      	ldr	r1, [pc, #180]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b14:	d101      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b26:	4b25      	ldr	r3, [pc, #148]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b34:	4921      	ldr	r1, [pc, #132]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b48:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b56:	4919      	ldr	r1, [pc, #100]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007b6a:	4b14      	ldr	r3, [pc, #80]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b78:	4910      	ldr	r1, [pc, #64]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d006      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 809d 	beq.w	8007cce <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b94:	4b09      	ldr	r3, [pc, #36]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8007b9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ba0:	f7fd fcec 	bl	800557c <HAL_GetTick>
 8007ba4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ba6:	e00b      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ba8:	f7fd fce8 	bl	800557c <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b64      	cmp	r3, #100	; 0x64
 8007bb4:	d904      	bls.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e116      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8007bba:	bf00      	nop
 8007bbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007bc0:	4b8b      	ldr	r3, [pc, #556]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1ed      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d017      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d113      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007be0:	4b83      	ldr	r3, [pc, #524]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007be6:	0e1b      	lsrs	r3, r3, #24
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	019a      	lsls	r2, r3, #6
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	061b      	lsls	r3, r3, #24
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	071b      	lsls	r3, r3, #28
 8007c00:	497b      	ldr	r1, [pc, #492]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d024      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c32:	d11f      	bne.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c34:	4b6e      	ldr	r3, [pc, #440]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c3a:	0f1b      	lsrs	r3, r3, #28
 8007c3c:	f003 0307 	and.w	r3, r3, #7
 8007c40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	019a      	lsls	r2, r3, #6
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	061b      	lsls	r3, r3, #24
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	071b      	lsls	r3, r3, #28
 8007c54:	4966      	ldr	r1, [pc, #408]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c5c:	4b64      	ldr	r3, [pc, #400]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c62:	f023 021f 	bic.w	r2, r3, #31
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4960      	ldr	r1, [pc, #384]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00d      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	019a      	lsls	r2, r3, #6
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	061b      	lsls	r3, r3, #24
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	071b      	lsls	r3, r3, #28
 8007c94:	4956      	ldr	r1, [pc, #344]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c96:	4313      	orrs	r3, r2
 8007c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c9c:	4b54      	ldr	r3, [pc, #336]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a53      	ldr	r2, [pc, #332]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ca8:	f7fd fc68 	bl	800557c <HAL_GetTick>
 8007cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cb0:	f7fd fc64 	bl	800557c <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b64      	cmp	r3, #100	; 0x64
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e092      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cc2:	4b4b      	ldr	r3, [pc, #300]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0f0      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	f040 8088 	bne.w	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007cd6:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a45      	ldr	r2, [pc, #276]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ce2:	f7fd fc4b 	bl	800557c <HAL_GetTick>
 8007ce6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ce8:	e008      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cea:	f7fd fc47 	bl	800557c <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b64      	cmp	r3, #100	; 0x64
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e075      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007cfc:	4b3c      	ldr	r3, [pc, #240]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d08:	d0ef      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d024      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d120      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d32:	4b2f      	ldr	r3, [pc, #188]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d38:	0c1b      	lsrs	r3, r3, #16
 8007d3a:	f003 0303 	and.w	r3, r3, #3
 8007d3e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	019a      	lsls	r2, r3, #6
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	041b      	lsls	r3, r3, #16
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	061b      	lsls	r3, r3, #24
 8007d52:	4927      	ldr	r1, [pc, #156]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007d5a:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d60:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	4920      	ldr	r1, [pc, #128]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d018      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d88:	d113      	bne.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d90:	0e1b      	lsrs	r3, r3, #24
 8007d92:	f003 030f 	and.w	r3, r3, #15
 8007d96:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	019a      	lsls	r2, r3, #6
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	431a      	orrs	r2, r3
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	4911      	ldr	r1, [pc, #68]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007db2:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dbe:	f7fd fbdd 	bl	800557c <HAL_GetTick>
 8007dc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dc4:	e008      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dc6:	f7fd fbd9 	bl	800557c <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	2b64      	cmp	r3, #100	; 0x64
 8007dd2:	d901      	bls.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e007      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007de4:	d1ef      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800

08007df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e09d      	b.n	8007f42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e16:	d009      	beq.n	8007e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	61da      	str	r2, [r3, #28]
 8007e1e:	e005      	b.n	8007e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fd f87c 	bl	8004f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e6c:	d902      	bls.n	8007e74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60fb      	str	r3, [r7, #12]
 8007e72:	e002      	b.n	8007e7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e82:	d007      	beq.n	8007e94 <HAL_SPI_Init+0xa0>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e8c:	d002      	beq.n	8007e94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	695b      	ldr	r3, [r3, #20]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	431a      	orrs	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	ea42 0103 	orr.w	r1, r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ede:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	f003 0204 	and.w	r2, r3, #4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f02:	f003 0308 	and.w	r3, r3, #8
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f10:	ea42 0103 	orr.w	r1, r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	69da      	ldr	r2, [r3, #28]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b088      	sub	sp, #32
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	60f8      	str	r0, [r7, #12]
 8007f52:	60b9      	str	r1, [r7, #8]
 8007f54:	603b      	str	r3, [r7, #0]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x22>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e158      	b.n	800821e <HAL_SPI_Transmit+0x2d4>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f74:	f7fd fb02 	bl	800557c <HAL_GetTick>
 8007f78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f7a:	88fb      	ldrh	r3, [r7, #6]
 8007f7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d002      	beq.n	8007f90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f8e:	e13d      	b.n	800820c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <HAL_SPI_Transmit+0x52>
 8007f96:	88fb      	ldrh	r3, [r7, #6]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa0:	e134      	b.n	800820c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	88fa      	ldrh	r2, [r7, #6]
 8007fba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	88fa      	ldrh	r2, [r7, #6]
 8007fc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fec:	d10f      	bne.n	800800e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800800c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008018:	2b40      	cmp	r3, #64	; 0x40
 800801a:	d007      	beq.n	800802c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800802a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008034:	d94b      	bls.n	80080ce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <HAL_SPI_Transmit+0xfa>
 800803e:	8afb      	ldrh	r3, [r7, #22]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d13e      	bne.n	80080c2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	881a      	ldrh	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	1c9a      	adds	r2, r3, #2
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008068:	e02b      	b.n	80080c2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0302 	and.w	r3, r3, #2
 8008074:	2b02      	cmp	r3, #2
 8008076:	d112      	bne.n	800809e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	881a      	ldrh	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	1c9a      	adds	r2, r3, #2
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800809c:	e011      	b.n	80080c2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800809e:	f7fd fa6d 	bl	800557c <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d803      	bhi.n	80080b6 <HAL_SPI_Transmit+0x16c>
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d102      	bne.n	80080bc <HAL_SPI_Transmit+0x172>
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080c0:	e0a4      	b.n	800820c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1ce      	bne.n	800806a <HAL_SPI_Transmit+0x120>
 80080cc:	e07c      	b.n	80081c8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_SPI_Transmit+0x192>
 80080d6:	8afb      	ldrh	r3, [r7, #22]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d170      	bne.n	80081be <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d912      	bls.n	800810c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	1c9a      	adds	r2, r3, #2
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b02      	subs	r3, #2
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	87da      	strh	r2, [r3, #62]	; 0x3e
 800810a:	e058      	b.n	80081be <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	330c      	adds	r3, #12
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b01      	subs	r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008132:	e044      	b.n	80081be <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	2b02      	cmp	r3, #2
 8008140:	d12b      	bne.n	800819a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008146:	b29b      	uxth	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d912      	bls.n	8008172 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	881a      	ldrh	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	1c9a      	adds	r2, r3, #2
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008166:	b29b      	uxth	r3, r3
 8008168:	3b02      	subs	r3, #2
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008170:	e025      	b.n	80081be <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	330c      	adds	r3, #12
 800817c:	7812      	ldrb	r2, [r2, #0]
 800817e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008184:	1c5a      	adds	r2, r3, #1
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800818e:	b29b      	uxth	r3, r3
 8008190:	3b01      	subs	r3, #1
 8008192:	b29a      	uxth	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008198:	e011      	b.n	80081be <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800819a:	f7fd f9ef 	bl	800557c <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d803      	bhi.n	80081b2 <HAL_SPI_Transmit+0x268>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d102      	bne.n	80081b8 <HAL_SPI_Transmit+0x26e>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d102      	bne.n	80081be <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081bc:	e026      	b.n	800820c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1b5      	bne.n	8008134 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fb57 	bl	8008880 <SPI_EndRxTxTransaction>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10a      	bne.n	80081fc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e6:	2300      	movs	r3, #0
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	77fb      	strb	r3, [r7, #31]
 8008208:	e000      	b.n	800820c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800820a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800821c:	7ffb      	ldrb	r3, [r7, #31]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3720      	adds	r7, #32
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b08a      	sub	sp, #40	; 0x28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008234:	2301      	movs	r3, #1
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_SPI_TransmitReceive+0x26>
 8008248:	2302      	movs	r3, #2
 800824a:	e1fb      	b.n	8008644 <HAL_SPI_TransmitReceive+0x41e>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008254:	f7fd f992 	bl	800557c <HAL_GetTick>
 8008258:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008260:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008268:	887b      	ldrh	r3, [r7, #2]
 800826a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800826c:	887b      	ldrh	r3, [r7, #2]
 800826e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008270:	7efb      	ldrb	r3, [r7, #27]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d00e      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x6e>
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800827c:	d106      	bne.n	800828c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <HAL_SPI_TransmitReceive+0x66>
 8008286:	7efb      	ldrb	r3, [r7, #27]
 8008288:	2b04      	cmp	r3, #4
 800828a:	d003      	beq.n	8008294 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800828c:	2302      	movs	r3, #2
 800828e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008292:	e1cd      	b.n	8008630 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d005      	beq.n	80082a6 <HAL_SPI_TransmitReceive+0x80>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <HAL_SPI_TransmitReceive+0x80>
 80082a0:	887b      	ldrh	r3, [r7, #2]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d103      	bne.n	80082ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80082ac:	e1c0      	b.n	8008630 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	2b04      	cmp	r3, #4
 80082b8:	d003      	beq.n	80082c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2205      	movs	r2, #5
 80082be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	887a      	ldrh	r2, [r7, #2]
 80082d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	887a      	ldrh	r2, [r7, #2]
 80082da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	887a      	ldrh	r2, [r7, #2]
 80082e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	887a      	ldrh	r2, [r7, #2]
 80082ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008304:	d802      	bhi.n	800830c <HAL_SPI_TransmitReceive+0xe6>
 8008306:	8a3b      	ldrh	r3, [r7, #16]
 8008308:	2b01      	cmp	r3, #1
 800830a:	d908      	bls.n	800831e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800831a:	605a      	str	r2, [r3, #4]
 800831c:	e007      	b.n	800832e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d007      	beq.n	800834c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800834a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008354:	d97c      	bls.n	8008450 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <HAL_SPI_TransmitReceive+0x13e>
 800835e:	8a7b      	ldrh	r3, [r7, #18]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d169      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	881a      	ldrh	r2, [r3, #0]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	1c9a      	adds	r2, r3, #2
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008388:	e056      	b.n	8008438 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0302 	and.w	r3, r3, #2
 8008394:	2b02      	cmp	r3, #2
 8008396:	d11b      	bne.n	80083d0 <HAL_SPI_TransmitReceive+0x1aa>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800839c:	b29b      	uxth	r3, r3
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d016      	beq.n	80083d0 <HAL_SPI_TransmitReceive+0x1aa>
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d113      	bne.n	80083d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	881a      	ldrh	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	1c9a      	adds	r2, r3, #2
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	3b01      	subs	r3, #1
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d11c      	bne.n	8008418 <HAL_SPI_TransmitReceive+0x1f2>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d016      	beq.n	8008418 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	b292      	uxth	r2, r2
 80083f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fc:	1c9a      	adds	r2, r3, #2
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008408:	b29b      	uxth	r3, r3
 800840a:	3b01      	subs	r3, #1
 800840c:	b29a      	uxth	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008414:	2301      	movs	r3, #1
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008418:	f7fd f8b0 	bl	800557c <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008424:	429a      	cmp	r2, r3
 8008426:	d807      	bhi.n	8008438 <HAL_SPI_TransmitReceive+0x212>
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842e:	d003      	beq.n	8008438 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008436:	e0fb      	b.n	8008630 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800843c:	b29b      	uxth	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1a3      	bne.n	800838a <HAL_SPI_TransmitReceive+0x164>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008448:	b29b      	uxth	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d19d      	bne.n	800838a <HAL_SPI_TransmitReceive+0x164>
 800844e:	e0df      	b.n	8008610 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d003      	beq.n	8008460 <HAL_SPI_TransmitReceive+0x23a>
 8008458:	8a7b      	ldrh	r3, [r7, #18]
 800845a:	2b01      	cmp	r3, #1
 800845c:	f040 80cb 	bne.w	80085f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d912      	bls.n	8008490 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	881a      	ldrh	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	1c9a      	adds	r2, r3, #2
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	3b02      	subs	r3, #2
 8008488:	b29a      	uxth	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800848e:	e0b2      	b.n	80085f6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	330c      	adds	r3, #12
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	1c5a      	adds	r2, r3, #1
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b6:	e09e      	b.n	80085f6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d134      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x30a>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d02f      	beq.n	8008530 <HAL_SPI_TransmitReceive+0x30a>
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d12c      	bne.n	8008530 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084da:	b29b      	uxth	r3, r3
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d912      	bls.n	8008506 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	881a      	ldrh	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f0:	1c9a      	adds	r2, r3, #2
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b02      	subs	r3, #2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008504:	e012      	b.n	800852c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	330c      	adds	r3, #12
 8008510:	7812      	ldrb	r2, [r2, #0]
 8008512:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008522:	b29b      	uxth	r3, r3
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800852c:	2300      	movs	r3, #0
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b01      	cmp	r3, #1
 800853c:	d148      	bne.n	80085d0 <HAL_SPI_TransmitReceive+0x3aa>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d042      	beq.n	80085d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008550:	b29b      	uxth	r3, r3
 8008552:	2b01      	cmp	r3, #1
 8008554:	d923      	bls.n	800859e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68da      	ldr	r2, [r3, #12]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008560:	b292      	uxth	r2, r2
 8008562:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	1c9a      	adds	r2, r3, #2
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008574:	b29b      	uxth	r3, r3
 8008576:	3b02      	subs	r3, #2
 8008578:	b29a      	uxth	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b01      	cmp	r3, #1
 800858a:	d81f      	bhi.n	80085cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	e016      	b.n	80085cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f103 020c 	add.w	r2, r3, #12
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	7812      	ldrb	r2, [r2, #0]
 80085ac:	b2d2      	uxtb	r2, r2
 80085ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	1c5a      	adds	r2, r3, #1
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	3b01      	subs	r3, #1
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80085cc:	2301      	movs	r3, #1
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80085d0:	f7fc ffd4 	bl	800557c <HAL_GetTick>
 80085d4:	4602      	mov	r2, r0
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085dc:	429a      	cmp	r2, r3
 80085de:	d803      	bhi.n	80085e8 <HAL_SPI_TransmitReceive+0x3c2>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d102      	bne.n	80085ee <HAL_SPI_TransmitReceive+0x3c8>
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80085f4:	e01c      	b.n	8008630 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af5b 	bne.w	80084b8 <HAL_SPI_TransmitReceive+0x292>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f af54 	bne.w	80084b8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008610:	69fa      	ldr	r2, [r7, #28]
 8008612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f933 	bl	8008880 <SPI_EndRxTxTransaction>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d006      	beq.n	800862e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2220      	movs	r2, #32
 800862a:	661a      	str	r2, [r3, #96]	; 0x60
 800862c:	e000      	b.n	8008630 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800862e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008644:	4618      	mov	r0, r3
 8008646:	3728      	adds	r7, #40	; 0x28
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800865c:	f7fc ff8e 	bl	800557c <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4413      	add	r3, r2
 800866a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800866c:	f7fc ff86 	bl	800557c <HAL_GetTick>
 8008670:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008672:	4b39      	ldr	r3, [pc, #228]	; (8008758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	015b      	lsls	r3, r3, #5
 8008678:	0d1b      	lsrs	r3, r3, #20
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008682:	e054      	b.n	800872e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d050      	beq.n	800872e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800868c:	f7fc ff76 	bl	800557c <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	429a      	cmp	r2, r3
 800869a:	d902      	bls.n	80086a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d13d      	bne.n	800871e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ba:	d111      	bne.n	80086e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c4:	d004      	beq.n	80086d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ce:	d107      	bne.n	80086e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e8:	d10f      	bne.n	800870a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008708:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e017      	b.n	800874e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3b01      	subs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4013      	ands	r3, r2
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	429a      	cmp	r2, r3
 800873c:	bf0c      	ite	eq
 800873e:	2301      	moveq	r3, #1
 8008740:	2300      	movne	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	429a      	cmp	r2, r3
 800874a:	d19b      	bne.n	8008684 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000000 	.word	0x20000000

0800875c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800876a:	f7fc ff07 	bl	800557c <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008772:	1a9b      	subs	r3, r3, r2
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	4413      	add	r3, r2
 8008778:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800877a:	f7fc feff 	bl	800557c <HAL_GetTick>
 800877e:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008780:	4b3e      	ldr	r3, [pc, #248]	; (800887c <SPI_WaitFifoStateUntilTimeout+0x120>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	00da      	lsls	r2, r3, #3
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	0d1b      	lsrs	r3, r3, #20
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	fb02 f303 	mul.w	r3, r2, r3
 8008796:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8008798:	e062      	b.n	8008860 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80087a0:	d109      	bne.n	80087b6 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d106      	bne.n	80087b6 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	330c      	adds	r3, #12
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80087b4:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087bc:	d050      	beq.n	8008860 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087be:	f7fc fedd 	bl	800557c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	69fa      	ldr	r2, [r7, #28]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d902      	bls.n	80087d4 <SPI_WaitFifoStateUntilTimeout+0x78>
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d13d      	bne.n	8008850 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ec:	d111      	bne.n	8008812 <SPI_WaitFifoStateUntilTimeout+0xb6>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f6:	d004      	beq.n	8008802 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008800:	d107      	bne.n	8008812 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008810:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800881a:	d10f      	bne.n	800883c <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800883a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e010      	b.n	8008872 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8008856:	2300      	movs	r3, #0
 8008858:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	3b01      	subs	r3, #1
 800885e:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	4013      	ands	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d194      	bne.n	800879a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000000 	.word	0x20000000

08008880 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af02      	add	r7, sp, #8
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f7ff ff5f 	bl	800875c <SPI_WaitFifoStateUntilTimeout>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a8:	f043 0220 	orr.w	r2, r3, #32
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e027      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2200      	movs	r2, #0
 80088bc:	2180      	movs	r1, #128	; 0x80
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fec4 	bl	800864c <SPI_WaitFlagStateUntilTimeout>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d007      	beq.n	80088da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ce:	f043 0220 	orr.w	r2, r3, #32
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e014      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f7ff ff38 	bl	800875c <SPI_WaitFifoStateUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d007      	beq.n	8008902 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f6:	f043 0220 	orr.w	r2, r3, #32
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e000      	b.n	8008904 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e049      	b.n	80089b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fc fb4a 	bl	8004fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2202      	movs	r2, #2
 800893c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	3304      	adds	r3, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f000 fe9a 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d001      	beq.n	80089d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e054      	b.n	8008a7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2202      	movs	r2, #2
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68da      	ldr	r2, [r3, #12]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0201 	orr.w	r2, r2, #1
 80089ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a26      	ldr	r2, [pc, #152]	; (8008a8c <HAL_TIM_Base_Start_IT+0xd0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d022      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fe:	d01d      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d018      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d013      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1f      	ldr	r2, [pc, #124]	; (8008a98 <HAL_TIM_Base_Start_IT+0xdc>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d00e      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <HAL_TIM_Base_Start_IT+0xe0>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d009      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d004      	beq.n	8008a3c <HAL_TIM_Base_Start_IT+0x80>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d115      	bne.n	8008a68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <HAL_TIM_Base_Start_IT+0xec>)
 8008a44:	4013      	ands	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b06      	cmp	r3, #6
 8008a4c:	d015      	beq.n	8008a7a <HAL_TIM_Base_Start_IT+0xbe>
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a54:	d011      	beq.n	8008a7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f042 0201 	orr.w	r2, r2, #1
 8008a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a66:	e008      	b.n	8008a7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f042 0201 	orr.w	r2, r2, #1
 8008a76:	601a      	str	r2, [r3, #0]
 8008a78:	e000      	b.n	8008a7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3714      	adds	r7, #20
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40000400 	.word	0x40000400
 8008a94:	40000800 	.word	0x40000800
 8008a98:	40000c00 	.word	0x40000c00
 8008a9c:	40010400 	.word	0x40010400
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	40001800 	.word	0x40001800
 8008aa8:	00010007 	.word	0x00010007

08008aac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e049      	b.n	8008b52 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d106      	bne.n	8008ad8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f841 	bl	8008b5a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4610      	mov	r0, r2
 8008aec:	f000 fdca 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008b62:	bf00      	nop
 8008b64:	370c      	adds	r7, #12
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b082      	sub	sp, #8
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e049      	b.n	8008c14 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d106      	bne.n	8008b9a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f841 	bl	8008c1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f000 fd69 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3708      	adds	r7, #8
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <HAL_TIM_PWM_Start+0x24>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e03c      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d109      	bne.n	8008c6e <HAL_TIM_PWM_Start+0x3e>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	bf14      	ite	ne
 8008c66:	2301      	movne	r3, #1
 8008c68:	2300      	moveq	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	e02f      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d109      	bne.n	8008c88 <HAL_TIM_PWM_Start+0x58>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	bf14      	ite	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	2300      	moveq	r3, #0
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	e022      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2b0c      	cmp	r3, #12
 8008c8c:	d109      	bne.n	8008ca2 <HAL_TIM_PWM_Start+0x72>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	e015      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	2b10      	cmp	r3, #16
 8008ca6:	d109      	bne.n	8008cbc <HAL_TIM_PWM_Start+0x8c>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	bf14      	ite	ne
 8008cb4:	2301      	movne	r3, #1
 8008cb6:	2300      	moveq	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e008      	b.n	8008cce <HAL_TIM_PWM_Start+0x9e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e092      	b.n	8008dfc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d104      	bne.n	8008ce6 <HAL_TIM_PWM_Start+0xb6>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2202      	movs	r2, #2
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce4:	e023      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d104      	bne.n	8008cf6 <HAL_TIM_PWM_Start+0xc6>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf4:	e01b      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b08      	cmp	r3, #8
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_PWM_Start+0xd6>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d04:	e013      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b0c      	cmp	r3, #12
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start+0xe6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d14:	e00b      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b10      	cmp	r3, #16
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xf6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d24:	e003      	b.n	8008d2e <HAL_TIM_PWM_Start+0xfe>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2201      	movs	r2, #1
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f001 f8cc 	bl	8009ed4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a30      	ldr	r2, [pc, #192]	; (8008e04 <HAL_TIM_PWM_Start+0x1d4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d004      	beq.n	8008d50 <HAL_TIM_PWM_Start+0x120>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a2f      	ldr	r2, [pc, #188]	; (8008e08 <HAL_TIM_PWM_Start+0x1d8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d101      	bne.n	8008d54 <HAL_TIM_PWM_Start+0x124>
 8008d50:	2301      	movs	r3, #1
 8008d52:	e000      	b.n	8008d56 <HAL_TIM_PWM_Start+0x126>
 8008d54:	2300      	movs	r3, #0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d007      	beq.n	8008d6a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a25      	ldr	r2, [pc, #148]	; (8008e04 <HAL_TIM_PWM_Start+0x1d4>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d022      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d7c:	d01d      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a22      	ldr	r2, [pc, #136]	; (8008e0c <HAL_TIM_PWM_Start+0x1dc>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d018      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a20      	ldr	r2, [pc, #128]	; (8008e10 <HAL_TIM_PWM_Start+0x1e0>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d013      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1f      	ldr	r2, [pc, #124]	; (8008e14 <HAL_TIM_PWM_Start+0x1e4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00e      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a19      	ldr	r2, [pc, #100]	; (8008e08 <HAL_TIM_PWM_Start+0x1d8>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d009      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1b      	ldr	r2, [pc, #108]	; (8008e18 <HAL_TIM_PWM_Start+0x1e8>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d004      	beq.n	8008dba <HAL_TIM_PWM_Start+0x18a>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a19      	ldr	r2, [pc, #100]	; (8008e1c <HAL_TIM_PWM_Start+0x1ec>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d115      	bne.n	8008de6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <HAL_TIM_PWM_Start+0x1f0>)
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b06      	cmp	r3, #6
 8008dca:	d015      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1c8>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd2:	d011      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f042 0201 	orr.w	r2, r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de4:	e008      	b.n	8008df8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f042 0201 	orr.w	r2, r2, #1
 8008df4:	601a      	str	r2, [r3, #0]
 8008df6:	e000      	b.n	8008dfa <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	40010000 	.word	0x40010000
 8008e08:	40010400 	.word	0x40010400
 8008e0c:	40000400 	.word	0x40000400
 8008e10:	40000800 	.word	0x40000800
 8008e14:	40000c00 	.word	0x40000c00
 8008e18:	40014000 	.word	0x40014000
 8008e1c:	40001800 	.word	0x40001800
 8008e20:	00010007 	.word	0x00010007

08008e24 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e041      	b.n	8008ebc <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f839 	bl	8008ec4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2202      	movs	r2, #2
 8008e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f000 fc0d 	bl	8009684 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0208 	bic.w	r2, r2, #8
 8008e78:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d122      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d11b      	bne.n	8008f34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f06f 0202 	mvn.w	r2, #2
 8008f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699b      	ldr	r3, [r3, #24]
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fb94 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 8008f20:	e005      	b.n	8008f2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fb86 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fb97 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f003 0304 	and.w	r3, r3, #4
 8008f3e:	2b04      	cmp	r3, #4
 8008f40:	d122      	bne.n	8008f88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f003 0304 	and.w	r3, r3, #4
 8008f4c:	2b04      	cmp	r3, #4
 8008f4e:	d11b      	bne.n	8008f88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f06f 0204 	mvn.w	r2, #4
 8008f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fb6a 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 8008f74:	e005      	b.n	8008f82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fb5c 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fb6d 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f003 0308 	and.w	r3, r3, #8
 8008f92:	2b08      	cmp	r3, #8
 8008f94:	d122      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d11b      	bne.n	8008fdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0208 	mvn.w	r2, #8
 8008fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb40 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fb32 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fb43 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b10      	cmp	r3, #16
 8008fe8:	d122      	bne.n	8009030 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68db      	ldr	r3, [r3, #12]
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	2b10      	cmp	r3, #16
 8008ff6:	d11b      	bne.n	8009030 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f06f 0210 	mvn.w	r2, #16
 8009000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2208      	movs	r2, #8
 8009006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fb16 	bl	8009648 <HAL_TIM_IC_CaptureCallback>
 800901c:	e005      	b.n	800902a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fb08 	bl	8009634 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fb19 	bl	800965c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b01      	cmp	r3, #1
 800903c:	d10e      	bne.n	800905c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f003 0301 	and.w	r3, r3, #1
 8009048:	2b01      	cmp	r3, #1
 800904a:	d107      	bne.n	800905c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f06f 0201 	mvn.w	r2, #1
 8009054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7fb fea6 	bl	8004da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009066:	2b80      	cmp	r3, #128	; 0x80
 8009068:	d10e      	bne.n	8009088 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d107      	bne.n	8009088 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 f924 	bl	800a2d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009096:	d10e      	bne.n	80090b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a2:	2b80      	cmp	r3, #128	; 0x80
 80090a4:	d107      	bne.n	80090b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f917 	bl	800a2e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b40      	cmp	r3, #64	; 0x40
 80090c2:	d10e      	bne.n	80090e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ce:	2b40      	cmp	r3, #64	; 0x40
 80090d0:	d107      	bne.n	80090e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80090da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 fac7 	bl	8009670 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b20      	cmp	r3, #32
 80090ee:	d10e      	bne.n	800910e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f003 0320 	and.w	r3, r3, #32
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d107      	bne.n	800910e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f06f 0220 	mvn.w	r2, #32
 8009106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f001 f8d7 	bl	800a2bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800910e:	bf00      	nop
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_TIM_OC_ConfigChannel+0x1a>
 800912e:	2302      	movs	r3, #2
 8009130:	e064      	b.n	80091fc <HAL_TIM_OC_ConfigChannel+0xe4>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b14      	cmp	r3, #20
 800913e:	d857      	bhi.n	80091f0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8009140:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <HAL_TIM_OC_ConfigChannel+0x30>)
 8009142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009146:	bf00      	nop
 8009148:	0800919d 	.word	0x0800919d
 800914c:	080091f1 	.word	0x080091f1
 8009150:	080091f1 	.word	0x080091f1
 8009154:	080091f1 	.word	0x080091f1
 8009158:	080091ab 	.word	0x080091ab
 800915c:	080091f1 	.word	0x080091f1
 8009160:	080091f1 	.word	0x080091f1
 8009164:	080091f1 	.word	0x080091f1
 8009168:	080091b9 	.word	0x080091b9
 800916c:	080091f1 	.word	0x080091f1
 8009170:	080091f1 	.word	0x080091f1
 8009174:	080091f1 	.word	0x080091f1
 8009178:	080091c7 	.word	0x080091c7
 800917c:	080091f1 	.word	0x080091f1
 8009180:	080091f1 	.word	0x080091f1
 8009184:	080091f1 	.word	0x080091f1
 8009188:	080091d5 	.word	0x080091d5
 800918c:	080091f1 	.word	0x080091f1
 8009190:	080091f1 	.word	0x080091f1
 8009194:	080091f1 	.word	0x080091f1
 8009198:	080091e3 	.word	0x080091e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fb0e 	bl	80097c4 <TIM_OC1_SetConfig>
      break;
 80091a8:	e023      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68b9      	ldr	r1, [r7, #8]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f000 fb79 	bl	80098a8 <TIM_OC2_SetConfig>
      break;
 80091b6:	e01c      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fbea 	bl	8009998 <TIM_OC3_SetConfig>
      break;
 80091c4:	e015      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fc59 	bl	8009a84 <TIM_OC4_SetConfig>
      break;
 80091d2:	e00e      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68b9      	ldr	r1, [r7, #8]
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fcaa 	bl	8009b34 <TIM_OC5_SetConfig>
      break;
 80091e0:	e007      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68b9      	ldr	r1, [r7, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fcf5 	bl	8009bd8 <TIM_OC6_SetConfig>
      break;
 80091ee:	e000      	b.n	80091f2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80091f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800921a:	2302      	movs	r3, #2
 800921c:	e0fd      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x216>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b14      	cmp	r3, #20
 800922a:	f200 80f0 	bhi.w	800940e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800922e:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009234:	08009289 	.word	0x08009289
 8009238:	0800940f 	.word	0x0800940f
 800923c:	0800940f 	.word	0x0800940f
 8009240:	0800940f 	.word	0x0800940f
 8009244:	080092c9 	.word	0x080092c9
 8009248:	0800940f 	.word	0x0800940f
 800924c:	0800940f 	.word	0x0800940f
 8009250:	0800940f 	.word	0x0800940f
 8009254:	0800930b 	.word	0x0800930b
 8009258:	0800940f 	.word	0x0800940f
 800925c:	0800940f 	.word	0x0800940f
 8009260:	0800940f 	.word	0x0800940f
 8009264:	0800934b 	.word	0x0800934b
 8009268:	0800940f 	.word	0x0800940f
 800926c:	0800940f 	.word	0x0800940f
 8009270:	0800940f 	.word	0x0800940f
 8009274:	0800938d 	.word	0x0800938d
 8009278:	0800940f 	.word	0x0800940f
 800927c:	0800940f 	.word	0x0800940f
 8009280:	0800940f 	.word	0x0800940f
 8009284:	080093cd 	.word	0x080093cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68b9      	ldr	r1, [r7, #8]
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fa98 	bl	80097c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0208 	orr.w	r2, r2, #8
 80092a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699a      	ldr	r2, [r3, #24]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0204 	bic.w	r2, r2, #4
 80092b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6999      	ldr	r1, [r3, #24]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	691a      	ldr	r2, [r3, #16]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	619a      	str	r2, [r3, #24]
      break;
 80092c6:	e0a3      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68b9      	ldr	r1, [r7, #8]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 faea 	bl	80098a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	699a      	ldr	r2, [r3, #24]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699a      	ldr	r2, [r3, #24]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6999      	ldr	r1, [r3, #24]
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	021a      	lsls	r2, r3, #8
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	430a      	orrs	r2, r1
 8009306:	619a      	str	r2, [r3, #24]
      break;
 8009308:	e082      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	4618      	mov	r0, r3
 8009312:	f000 fb41 	bl	8009998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0208 	orr.w	r2, r2, #8
 8009324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0204 	bic.w	r2, r2, #4
 8009334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69d9      	ldr	r1, [r3, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	691a      	ldr	r2, [r3, #16]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	61da      	str	r2, [r3, #28]
      break;
 8009348:	e062      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68b9      	ldr	r1, [r7, #8]
 8009350:	4618      	mov	r0, r3
 8009352:	f000 fb97 	bl	8009a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	69da      	ldr	r2, [r3, #28]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009364:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	69da      	ldr	r2, [r3, #28]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69d9      	ldr	r1, [r3, #28]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	021a      	lsls	r2, r3, #8
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	61da      	str	r2, [r3, #28]
      break;
 800938a:	e041      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fbce 	bl	8009b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0208 	orr.w	r2, r2, #8
 80093a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0204 	bic.w	r2, r2, #4
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	691a      	ldr	r2, [r3, #16]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093ca:	e021      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68b9      	ldr	r1, [r7, #8]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 fc00 	bl	8009bd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	021a      	lsls	r2, r3, #8
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800940c:	e000      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800940e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop

08009424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009434:	2b01      	cmp	r3, #1
 8009436:	d101      	bne.n	800943c <HAL_TIM_ConfigClockSource+0x18>
 8009438:	2302      	movs	r3, #2
 800943a:	e0b3      	b.n	80095a4 <HAL_TIM_ConfigClockSource+0x180>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2202      	movs	r2, #2
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4b55      	ldr	r3, [pc, #340]	; (80095ac <HAL_TIM_ConfigClockSource+0x188>)
 8009458:	4013      	ands	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009462:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009474:	d03e      	beq.n	80094f4 <HAL_TIM_ConfigClockSource+0xd0>
 8009476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800947a:	f200 8087 	bhi.w	800958c <HAL_TIM_ConfigClockSource+0x168>
 800947e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009482:	f000 8085 	beq.w	8009590 <HAL_TIM_ConfigClockSource+0x16c>
 8009486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948a:	d87f      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 800948c:	2b70      	cmp	r3, #112	; 0x70
 800948e:	d01a      	beq.n	80094c6 <HAL_TIM_ConfigClockSource+0xa2>
 8009490:	2b70      	cmp	r3, #112	; 0x70
 8009492:	d87b      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 8009494:	2b60      	cmp	r3, #96	; 0x60
 8009496:	d050      	beq.n	800953a <HAL_TIM_ConfigClockSource+0x116>
 8009498:	2b60      	cmp	r3, #96	; 0x60
 800949a:	d877      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 800949c:	2b50      	cmp	r3, #80	; 0x50
 800949e:	d03c      	beq.n	800951a <HAL_TIM_ConfigClockSource+0xf6>
 80094a0:	2b50      	cmp	r3, #80	; 0x50
 80094a2:	d873      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 80094a4:	2b40      	cmp	r3, #64	; 0x40
 80094a6:	d058      	beq.n	800955a <HAL_TIM_ConfigClockSource+0x136>
 80094a8:	2b40      	cmp	r3, #64	; 0x40
 80094aa:	d86f      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 80094ac:	2b30      	cmp	r3, #48	; 0x30
 80094ae:	d064      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x156>
 80094b0:	2b30      	cmp	r3, #48	; 0x30
 80094b2:	d86b      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	d060      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x156>
 80094b8:	2b20      	cmp	r3, #32
 80094ba:	d867      	bhi.n	800958c <HAL_TIM_ConfigClockSource+0x168>
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d05c      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x156>
 80094c0:	2b10      	cmp	r3, #16
 80094c2:	d05a      	beq.n	800957a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80094c4:	e062      	b.n	800958c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	6899      	ldr	r1, [r3, #8]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	685a      	ldr	r2, [r3, #4]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f000 fcdd 	bl	8009e94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	609a      	str	r2, [r3, #8]
      break;
 80094f2:	e04e      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6899      	ldr	r1, [r3, #8]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f000 fcc6 	bl	8009e94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009516:	609a      	str	r2, [r3, #8]
      break;
 8009518:	e03b      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	6859      	ldr	r1, [r3, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	461a      	mov	r2, r3
 8009528:	f000 fc3a 	bl	8009da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2150      	movs	r1, #80	; 0x50
 8009532:	4618      	mov	r0, r3
 8009534:	f000 fc93 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 8009538:	e02b      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	6859      	ldr	r1, [r3, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	461a      	mov	r2, r3
 8009548:	f000 fc59 	bl	8009dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2160      	movs	r1, #96	; 0x60
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fc83 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 8009558:	e01b      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	6859      	ldr	r1, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	461a      	mov	r2, r3
 8009568:	f000 fc1a 	bl	8009da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2140      	movs	r1, #64	; 0x40
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fc73 	bl	8009e5e <TIM_ITRx_SetConfig>
      break;
 8009578:	e00b      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4619      	mov	r1, r3
 8009584:	4610      	mov	r0, r2
 8009586:	f000 fc6a 	bl	8009e5e <TIM_ITRx_SetConfig>
        break;
 800958a:	e002      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800958c:	bf00      	nop
 800958e:	e000      	b.n	8009592 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009590:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	fffeff88 	.word	0xfffeff88

080095b0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d101      	bne.n	80095c8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80095c4:	2302      	movs	r3, #2
 80095c6:	e031      	b.n	800962c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2202      	movs	r2, #2
 80095d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb50 	bl	8009c80 <TIM_SlaveTimer_SetConfig>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d009      	beq.n	80095fa <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e018      	b.n	800962c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009608:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68da      	ldr	r2, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009618:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009664:	bf00      	nop
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a40      	ldr	r2, [pc, #256]	; (8009798 <TIM_Base_SetConfig+0x114>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d013      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a2:	d00f      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a3d      	ldr	r2, [pc, #244]	; (800979c <TIM_Base_SetConfig+0x118>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a3c      	ldr	r2, [pc, #240]	; (80097a0 <TIM_Base_SetConfig+0x11c>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a3b      	ldr	r2, [pc, #236]	; (80097a4 <TIM_Base_SetConfig+0x120>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_Base_SetConfig+0x40>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a3a      	ldr	r2, [pc, #232]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d108      	bne.n	80096d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2f      	ldr	r2, [pc, #188]	; (8009798 <TIM_Base_SetConfig+0x114>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d02b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e4:	d027      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2c      	ldr	r2, [pc, #176]	; (800979c <TIM_Base_SetConfig+0x118>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d023      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a2b      	ldr	r2, [pc, #172]	; (80097a0 <TIM_Base_SetConfig+0x11c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d01f      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a2a      	ldr	r2, [pc, #168]	; (80097a4 <TIM_Base_SetConfig+0x120>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d01b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a29      	ldr	r2, [pc, #164]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d017      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <TIM_Base_SetConfig+0x128>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d013      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <TIM_Base_SetConfig+0x12c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d00f      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a26      	ldr	r2, [pc, #152]	; (80097b4 <TIM_Base_SetConfig+0x130>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d00b      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a25      	ldr	r2, [pc, #148]	; (80097b8 <TIM_Base_SetConfig+0x134>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d007      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a24      	ldr	r2, [pc, #144]	; (80097bc <TIM_Base_SetConfig+0x138>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d003      	beq.n	8009736 <TIM_Base_SetConfig+0xb2>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a23      	ldr	r2, [pc, #140]	; (80097c0 <TIM_Base_SetConfig+0x13c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d108      	bne.n	8009748 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800973c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a0a      	ldr	r2, [pc, #40]	; (8009798 <TIM_Base_SetConfig+0x114>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_Base_SetConfig+0xf8>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a0c      	ldr	r2, [pc, #48]	; (80097a8 <TIM_Base_SetConfig+0x124>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d103      	bne.n	8009784 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	691a      	ldr	r2, [r3, #16]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	615a      	str	r2, [r3, #20]
}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	40010000 	.word	0x40010000
 800979c:	40000400 	.word	0x40000400
 80097a0:	40000800 	.word	0x40000800
 80097a4:	40000c00 	.word	0x40000c00
 80097a8:	40010400 	.word	0x40010400
 80097ac:	40014000 	.word	0x40014000
 80097b0:	40014400 	.word	0x40014400
 80097b4:	40014800 	.word	0x40014800
 80097b8:	40001800 	.word	0x40001800
 80097bc:	40001c00 	.word	0x40001c00
 80097c0:	40002000 	.word	0x40002000

080097c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	f023 0201 	bic.w	r2, r3, #1
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a1b      	ldr	r3, [r3, #32]
 80097de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	4b2b      	ldr	r3, [pc, #172]	; (800989c <TIM_OC1_SetConfig+0xd8>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 0302 	bic.w	r3, r3, #2
 800980c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	4313      	orrs	r3, r2
 8009816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a21      	ldr	r2, [pc, #132]	; (80098a0 <TIM_OC1_SetConfig+0xdc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d003      	beq.n	8009828 <TIM_OC1_SetConfig+0x64>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a20      	ldr	r2, [pc, #128]	; (80098a4 <TIM_OC1_SetConfig+0xe0>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d10c      	bne.n	8009842 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f023 0308 	bic.w	r3, r3, #8
 800982e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	f023 0304 	bic.w	r3, r3, #4
 8009840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <TIM_OC1_SetConfig+0xdc>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d003      	beq.n	8009852 <TIM_OC1_SetConfig+0x8e>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a15      	ldr	r2, [pc, #84]	; (80098a4 <TIM_OC1_SetConfig+0xe0>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d111      	bne.n	8009876 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	4313      	orrs	r3, r2
 8009874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685a      	ldr	r2, [r3, #4]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	621a      	str	r2, [r3, #32]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	fffeff8f 	.word	0xfffeff8f
 80098a0:	40010000 	.word	0x40010000
 80098a4:	40010400 	.word	0x40010400

080098a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	f023 0210 	bic.w	r2, r3, #16
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	4b2e      	ldr	r3, [pc, #184]	; (800998c <TIM_OC2_SetConfig+0xe4>)
 80098d4:	4013      	ands	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	021b      	lsls	r3, r3, #8
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4313      	orrs	r3, r2
 80098ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f023 0320 	bic.w	r3, r3, #32
 80098f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	697a      	ldr	r2, [r7, #20]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a23      	ldr	r2, [pc, #140]	; (8009990 <TIM_OC2_SetConfig+0xe8>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d003      	beq.n	8009910 <TIM_OC2_SetConfig+0x68>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a22      	ldr	r2, [pc, #136]	; (8009994 <TIM_OC2_SetConfig+0xec>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d10d      	bne.n	800992c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	011b      	lsls	r3, r3, #4
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4313      	orrs	r3, r2
 8009922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800992a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a18      	ldr	r2, [pc, #96]	; (8009990 <TIM_OC2_SetConfig+0xe8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC2_SetConfig+0x94>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a17      	ldr	r2, [pc, #92]	; (8009994 <TIM_OC2_SetConfig+0xec>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d113      	bne.n	8009964 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800994a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4313      	orrs	r3, r2
 8009962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	621a      	str	r2, [r3, #32]
}
 800997e:	bf00      	nop
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	feff8fff 	.word	0xfeff8fff
 8009990:	40010000 	.word	0x40010000
 8009994:	40010400 	.word	0x40010400

08009998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	4b2d      	ldr	r3, [pc, #180]	; (8009a78 <TIM_OC3_SetConfig+0xe0>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0303 	bic.w	r3, r3, #3
 80099ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	021b      	lsls	r3, r3, #8
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <TIM_OC3_SetConfig+0xe4>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d003      	beq.n	80099fe <TIM_OC3_SetConfig+0x66>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <TIM_OC3_SetConfig+0xe8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d10d      	bne.n	8009a1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	021b      	lsls	r3, r3, #8
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a17      	ldr	r2, [pc, #92]	; (8009a7c <TIM_OC3_SetConfig+0xe4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d003      	beq.n	8009a2a <TIM_OC3_SetConfig+0x92>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a16      	ldr	r2, [pc, #88]	; (8009a80 <TIM_OC3_SetConfig+0xe8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d113      	bne.n	8009a52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	695b      	ldr	r3, [r3, #20]
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	011b      	lsls	r3, r3, #4
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	693a      	ldr	r2, [r7, #16]
 8009a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68fa      	ldr	r2, [r7, #12]
 8009a5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	621a      	str	r2, [r3, #32]
}
 8009a6c:	bf00      	nop
 8009a6e:	371c      	adds	r7, #28
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	fffeff8f 	.word	0xfffeff8f
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40010400 	.word	0x40010400

08009a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a1b      	ldr	r3, [r3, #32]
 8009a9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	69db      	ldr	r3, [r3, #28]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009aac:	68fa      	ldr	r2, [r7, #12]
 8009aae:	4b1e      	ldr	r3, [pc, #120]	; (8009b28 <TIM_OC4_SetConfig+0xa4>)
 8009ab0:	4013      	ands	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	021b      	lsls	r3, r3, #8
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	031b      	lsls	r3, r3, #12
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a13      	ldr	r2, [pc, #76]	; (8009b2c <TIM_OC4_SetConfig+0xa8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d003      	beq.n	8009aec <TIM_OC4_SetConfig+0x68>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a12      	ldr	r2, [pc, #72]	; (8009b30 <TIM_OC4_SetConfig+0xac>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d109      	bne.n	8009b00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009af2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	019b      	lsls	r3, r3, #6
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	697a      	ldr	r2, [r7, #20]
 8009b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	feff8fff 	.word	0xfeff8fff
 8009b2c:	40010000 	.word	0x40010000
 8009b30:	40010400 	.word	0x40010400

08009b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	4b1b      	ldr	r3, [pc, #108]	; (8009bcc <TIM_OC5_SetConfig+0x98>)
 8009b60:	4013      	ands	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	041b      	lsls	r3, r3, #16
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <TIM_OC5_SetConfig+0x9c>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d003      	beq.n	8009b92 <TIM_OC5_SetConfig+0x5e>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4a11      	ldr	r2, [pc, #68]	; (8009bd4 <TIM_OC5_SetConfig+0xa0>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d109      	bne.n	8009ba6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	697a      	ldr	r2, [r7, #20]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	621a      	str	r2, [r3, #32]
}
 8009bc0:	bf00      	nop
 8009bc2:	371c      	adds	r7, #28
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	fffeff8f 	.word	0xfffeff8f
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40010400 	.word	0x40010400

08009bd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <TIM_OC6_SetConfig+0x9c>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	051b      	lsls	r3, r3, #20
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a13      	ldr	r2, [pc, #76]	; (8009c78 <TIM_OC6_SetConfig+0xa0>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d003      	beq.n	8009c38 <TIM_OC6_SetConfig+0x60>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a12      	ldr	r2, [pc, #72]	; (8009c7c <TIM_OC6_SetConfig+0xa4>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d109      	bne.n	8009c4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	029b      	lsls	r3, r3, #10
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	697a      	ldr	r2, [r7, #20]
 8009c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	621a      	str	r2, [r3, #32]
}
 8009c66:	bf00      	nop
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	feff8fff 	.word	0xfeff8fff
 8009c78:	40010000 	.word	0x40010000
 8009c7c:	40010400 	.word	0x40010400

08009c80 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c98:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4b3d      	ldr	r3, [pc, #244]	; (8009d9c <TIM_SlaveTimer_SetConfig+0x11c>)
 8009ca8:	4013      	ands	r3, r2
 8009caa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b70      	cmp	r3, #112	; 0x70
 8009cc4:	d01a      	beq.n	8009cfc <TIM_SlaveTimer_SetConfig+0x7c>
 8009cc6:	2b70      	cmp	r3, #112	; 0x70
 8009cc8:	d860      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009cca:	2b60      	cmp	r3, #96	; 0x60
 8009ccc:	d054      	beq.n	8009d78 <TIM_SlaveTimer_SetConfig+0xf8>
 8009cce:	2b60      	cmp	r3, #96	; 0x60
 8009cd0:	d85c      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009cd2:	2b50      	cmp	r3, #80	; 0x50
 8009cd4:	d046      	beq.n	8009d64 <TIM_SlaveTimer_SetConfig+0xe4>
 8009cd6:	2b50      	cmp	r3, #80	; 0x50
 8009cd8:	d858      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009cda:	2b40      	cmp	r3, #64	; 0x40
 8009cdc:	d019      	beq.n	8009d12 <TIM_SlaveTimer_SetConfig+0x92>
 8009cde:	2b40      	cmp	r3, #64	; 0x40
 8009ce0:	d854      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009ce2:	2b30      	cmp	r3, #48	; 0x30
 8009ce4:	d054      	beq.n	8009d90 <TIM_SlaveTimer_SetConfig+0x110>
 8009ce6:	2b30      	cmp	r3, #48	; 0x30
 8009ce8:	d850      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	d050      	beq.n	8009d90 <TIM_SlaveTimer_SetConfig+0x110>
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d84c      	bhi.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d04c      	beq.n	8009d90 <TIM_SlaveTimer_SetConfig+0x110>
 8009cf6:	2b10      	cmp	r3, #16
 8009cf8:	d04a      	beq.n	8009d90 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8009cfa:	e047      	b.n	8009d8c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	68d9      	ldr	r1, [r3, #12]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	f000 f8c2 	bl	8009e94 <TIM_ETR_SetConfig>
      break;
 8009d10:	e03f      	b.n	8009d92 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	d101      	bne.n	8009d1e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e03a      	b.n	8009d94 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6a1b      	ldr	r3, [r3, #32]
 8009d24:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6a1a      	ldr	r2, [r3, #32]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0201 	bic.w	r2, r2, #1
 8009d34:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	699b      	ldr	r3, [r3, #24]
 8009d3c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d44:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	011b      	lsls	r3, r3, #4
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68fa      	ldr	r2, [r7, #12]
 8009d58:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	621a      	str	r2, [r3, #32]
      break;
 8009d62:	e016      	b.n	8009d92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6818      	ldr	r0, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	6899      	ldr	r1, [r3, #8]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	691b      	ldr	r3, [r3, #16]
 8009d70:	461a      	mov	r2, r3
 8009d72:	f000 f815 	bl	8009da0 <TIM_TI1_ConfigInputStage>
      break;
 8009d76:	e00c      	b.n	8009d92 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	6899      	ldr	r1, [r3, #8]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	461a      	mov	r2, r3
 8009d86:	f000 f83a 	bl	8009dfe <TIM_TI2_ConfigInputStage>
      break;
 8009d8a:	e002      	b.n	8009d92 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8009d8c:	bf00      	nop
 8009d8e:	e000      	b.n	8009d92 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8009d90:	bf00      	nop
  }
  return HAL_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	fffefff8 	.word	0xfffefff8

08009da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6a1b      	ldr	r3, [r3, #32]
 8009db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	f023 0201 	bic.w	r2, r3, #1
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	011b      	lsls	r3, r3, #4
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f023 030a 	bic.w	r3, r3, #10
 8009ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	621a      	str	r2, [r3, #32]
}
 8009df2:	bf00      	nop
 8009df4:	371c      	adds	r7, #28
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b087      	sub	sp, #28
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f023 0210 	bic.w	r2, r3, #16
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	031b      	lsls	r3, r3, #12
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	4313      	orrs	r3, r2
 8009e32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	011b      	lsls	r3, r3, #4
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	4313      	orrs	r3, r2
 8009e44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	f043 0307 	orr.w	r3, r3, #7
 8009e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	609a      	str	r2, [r3, #8]
}
 8009e88:	bf00      	nop
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	021a      	lsls	r2, r3, #8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	431a      	orrs	r2, r3
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	609a      	str	r2, [r3, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	371c      	adds	r7, #28
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f003 031f 	and.w	r3, r3, #31
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8009eec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	6a1a      	ldr	r2, [r3, #32]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	401a      	ands	r2, r3
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	6879      	ldr	r1, [r7, #4]
 8009f08:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d109      	bne.n	8009f44 <HAL_TIMEx_PWMN_Start+0x24>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	bf14      	ite	ne
 8009f3c:	2301      	movne	r3, #1
 8009f3e:	2300      	moveq	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	e022      	b.n	8009f8a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d109      	bne.n	8009f5e <HAL_TIMEx_PWMN_Start+0x3e>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	bf14      	ite	ne
 8009f56:	2301      	movne	r3, #1
 8009f58:	2300      	moveq	r3, #0
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	e015      	b.n	8009f8a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b08      	cmp	r3, #8
 8009f62:	d109      	bne.n	8009f78 <HAL_TIMEx_PWMN_Start+0x58>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	bf14      	ite	ne
 8009f70:	2301      	movne	r3, #1
 8009f72:	2300      	moveq	r3, #0
 8009f74:	b2db      	uxtb	r3, r3
 8009f76:	e008      	b.n	8009f8a <HAL_TIMEx_PWMN_Start+0x6a>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	bf14      	ite	ne
 8009f84:	2301      	movne	r3, #1
 8009f86:	2300      	moveq	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d001      	beq.n	8009f92 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e073      	b.n	800a07a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d104      	bne.n	8009fa2 <HAL_TIMEx_PWMN_Start+0x82>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa0:	e013      	b.n	8009fca <HAL_TIMEx_PWMN_Start+0xaa>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d104      	bne.n	8009fb2 <HAL_TIMEx_PWMN_Start+0x92>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fb0:	e00b      	b.n	8009fca <HAL_TIMEx_PWMN_Start+0xaa>
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b08      	cmp	r3, #8
 8009fb6:	d104      	bne.n	8009fc2 <HAL_TIMEx_PWMN_Start+0xa2>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009fc0:	e003      	b.n	8009fca <HAL_TIMEx_PWMN_Start+0xaa>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2204      	movs	r2, #4
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f990 	bl	800a2f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fe6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a25      	ldr	r2, [pc, #148]	; (800a084 <HAL_TIMEx_PWMN_Start+0x164>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d022      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ffa:	d01d      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a21      	ldr	r2, [pc, #132]	; (800a088 <HAL_TIMEx_PWMN_Start+0x168>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d018      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a20      	ldr	r2, [pc, #128]	; (800a08c <HAL_TIMEx_PWMN_Start+0x16c>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d013      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a1e      	ldr	r2, [pc, #120]	; (800a090 <HAL_TIMEx_PWMN_Start+0x170>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d00e      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <HAL_TIMEx_PWMN_Start+0x174>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d009      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a1b      	ldr	r2, [pc, #108]	; (800a098 <HAL_TIMEx_PWMN_Start+0x178>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d004      	beq.n	800a038 <HAL_TIMEx_PWMN_Start+0x118>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a1a      	ldr	r2, [pc, #104]	; (800a09c <HAL_TIMEx_PWMN_Start+0x17c>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d115      	bne.n	800a064 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689a      	ldr	r2, [r3, #8]
 800a03e:	4b18      	ldr	r3, [pc, #96]	; (800a0a0 <HAL_TIMEx_PWMN_Start+0x180>)
 800a040:	4013      	ands	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b06      	cmp	r3, #6
 800a048:	d015      	beq.n	800a076 <HAL_TIMEx_PWMN_Start+0x156>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a050:	d011      	beq.n	800a076 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f042 0201 	orr.w	r2, r2, #1
 800a060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a062:	e008      	b.n	800a076 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0201 	orr.w	r2, r2, #1
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	e000      	b.n	800a078 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	40010000 	.word	0x40010000
 800a088:	40000400 	.word	0x40000400
 800a08c:	40000800 	.word	0x40000800
 800a090:	40000c00 	.word	0x40000c00
 800a094:	40010400 	.word	0x40010400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40001800 	.word	0x40001800
 800a0a0:	00010007 	.word	0x00010007

0800a0a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d101      	bne.n	800a0bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0b8:	2302      	movs	r3, #2
 800a0ba:	e06d      	b.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2202      	movs	r2, #2
 800a0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a30      	ldr	r2, [pc, #192]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d004      	beq.n	800a0f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a2f      	ldr	r2, [pc, #188]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d108      	bne.n	800a102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a0f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	68fa      	ldr	r2, [r7, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4313      	orrs	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a20      	ldr	r2, [pc, #128]	; (800a1a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d022      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a12e:	d01d      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a1d      	ldr	r2, [pc, #116]	; (800a1ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d018      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a1c      	ldr	r2, [pc, #112]	; (800a1b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d013      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a1a      	ldr	r2, [pc, #104]	; (800a1b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00e      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a15      	ldr	r2, [pc, #84]	; (800a1a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d009      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a16      	ldr	r2, [pc, #88]	; (800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a15      	ldr	r2, [pc, #84]	; (800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d10c      	bne.n	800a186 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a172:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a196:	2300      	movs	r3, #0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	40010000 	.word	0x40010000
 800a1a8:	40010400 	.word	0x40010400
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40014000 	.word	0x40014000
 800a1bc:	40001800 	.word	0x40001800

0800a1c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d101      	bne.n	800a1dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a1d8:	2302      	movs	r3, #2
 800a1da:	e065      	b.n	800a2a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4313      	orrs	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	691b      	ldr	r3, [r3, #16]
 800a226:	4313      	orrs	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	4313      	orrs	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a242:	4313      	orrs	r3, r2
 800a244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	041b      	lsls	r3, r3, #16
 800a252:	4313      	orrs	r3, r2
 800a254:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a16      	ldr	r2, [pc, #88]	; (800a2b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a14      	ldr	r2, [pc, #80]	; (800a2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d115      	bne.n	800a296 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	051b      	lsls	r3, r3, #20
 800a276:	4313      	orrs	r3, r2
 800a278:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	6a1b      	ldr	r3, [r3, #32]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	40010000 	.word	0x40010000
 800a2b8:	40010400 	.word	0x40010400

0800a2bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2c4:	bf00      	nop
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b087      	sub	sp, #28
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f003 031f 	and.w	r3, r3, #31
 800a30a:	2204      	movs	r2, #4
 800a30c:	fa02 f303 	lsl.w	r3, r2, r3
 800a310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1a      	ldr	r2, [r3, #32]
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	43db      	mvns	r3, r3
 800a31a:	401a      	ands	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a1a      	ldr	r2, [r3, #32]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f003 031f 	and.w	r3, r3, #31
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	fa01 f303 	lsl.w	r3, r1, r3
 800a330:	431a      	orrs	r2, r3
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	621a      	str	r2, [r3, #32]
}
 800a336:	bf00      	nop
 800a338:	371c      	adds	r7, #28
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e040      	b.n	800a3d6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d106      	bne.n	800a36a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7fa fecf 	bl	8005108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2224      	movs	r2, #36	; 0x24
 800a36e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f8bf 	bl	800a504 <UART_SetConfig>
 800a386:	4603      	mov	r3, r0
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e022      	b.n	800a3d6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb15 	bl	800a9c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f042 0201 	orr.w	r2, r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 fb9c 	bl	800ab0c <UART_CheckIdleState>
 800a3d4:	4603      	mov	r3, r0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b08a      	sub	sp, #40	; 0x28
 800a3e2:	af02      	add	r7, sp, #8
 800a3e4:	60f8      	str	r0, [r7, #12]
 800a3e6:	60b9      	str	r1, [r7, #8]
 800a3e8:	603b      	str	r3, [r7, #0]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	f040 8081 	bne.w	800a4fa <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d002      	beq.n	800a404 <HAL_UART_Transmit+0x26>
 800a3fe:	88fb      	ldrh	r3, [r7, #6]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e079      	b.n	800a4fc <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d101      	bne.n	800a416 <HAL_UART_Transmit+0x38>
 800a412:	2302      	movs	r3, #2
 800a414:	e072      	b.n	800a4fc <HAL_UART_Transmit+0x11e>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2221      	movs	r2, #33	; 0x21
 800a42a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a42c:	f7fb f8a6 	bl	800557c <HAL_GetTick>
 800a430:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	88fa      	ldrh	r2, [r7, #6]
 800a436:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	88fa      	ldrh	r2, [r7, #6]
 800a43e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44a:	d108      	bne.n	800a45e <HAL_UART_Transmit+0x80>
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d104      	bne.n	800a45e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	61bb      	str	r3, [r7, #24]
 800a45c:	e003      	b.n	800a466 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a462:	2300      	movs	r3, #0
 800a464:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a46e:	e02c      	b.n	800a4ca <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	2200      	movs	r2, #0
 800a478:	2180      	movs	r1, #128	; 0x80
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 fb79 	bl	800ab72 <UART_WaitOnFlagUntilTimeout>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e038      	b.n	800a4fc <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d10b      	bne.n	800a4a8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	461a      	mov	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	3302      	adds	r3, #2
 800a4a4:	61bb      	str	r3, [r7, #24]
 800a4a6:	e007      	b.n	800a4b8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	781a      	ldrb	r2, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1cc      	bne.n	800a470 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	9300      	str	r3, [sp, #0]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	2140      	movs	r1, #64	; 0x40
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 fb46 	bl	800ab72 <UART_WaitOnFlagUntilTimeout>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e005      	b.n	800a4fc <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2220      	movs	r2, #32
 800a4f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	e000      	b.n	800a4fc <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a4fa:	2302      	movs	r3, #2
  }
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3720      	adds	r7, #32
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b088      	sub	sp, #32
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	431a      	orrs	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	695b      	ldr	r3, [r3, #20]
 800a51e:	431a      	orrs	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	69db      	ldr	r3, [r3, #28]
 800a524:	4313      	orrs	r3, r2
 800a526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	4ba7      	ldr	r3, [pc, #668]	; (800a7cc <UART_SetConfig+0x2c8>)
 800a530:	4013      	ands	r3, r2
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	6979      	ldr	r1, [r7, #20]
 800a538:	430b      	orrs	r3, r1
 800a53a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a1b      	ldr	r3, [r3, #32]
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	430a      	orrs	r2, r1
 800a574:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a95      	ldr	r2, [pc, #596]	; (800a7d0 <UART_SetConfig+0x2cc>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d120      	bne.n	800a5c2 <UART_SetConfig+0xbe>
 800a580:	4b94      	ldr	r3, [pc, #592]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d816      	bhi.n	800a5bc <UART_SetConfig+0xb8>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x90>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5b1 	.word	0x0800a5b1
 800a59c:	0800a5ab 	.word	0x0800a5ab
 800a5a0:	0800a5b7 	.word	0x0800a5b7
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	e14f      	b.n	800a84a <UART_SetConfig+0x346>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e14c      	b.n	800a84a <UART_SetConfig+0x346>
 800a5b0:	2304      	movs	r3, #4
 800a5b2:	77fb      	strb	r3, [r7, #31]
 800a5b4:	e149      	b.n	800a84a <UART_SetConfig+0x346>
 800a5b6:	2308      	movs	r3, #8
 800a5b8:	77fb      	strb	r3, [r7, #31]
 800a5ba:	e146      	b.n	800a84a <UART_SetConfig+0x346>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	77fb      	strb	r3, [r7, #31]
 800a5c0:	e143      	b.n	800a84a <UART_SetConfig+0x346>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a84      	ldr	r2, [pc, #528]	; (800a7d8 <UART_SetConfig+0x2d4>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d132      	bne.n	800a632 <UART_SetConfig+0x12e>
 800a5cc:	4b81      	ldr	r3, [pc, #516]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5d2:	f003 030c 	and.w	r3, r3, #12
 800a5d6:	2b0c      	cmp	r3, #12
 800a5d8:	d828      	bhi.n	800a62c <UART_SetConfig+0x128>
 800a5da:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <UART_SetConfig+0xdc>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a615 	.word	0x0800a615
 800a5e4:	0800a62d 	.word	0x0800a62d
 800a5e8:	0800a62d 	.word	0x0800a62d
 800a5ec:	0800a62d 	.word	0x0800a62d
 800a5f0:	0800a621 	.word	0x0800a621
 800a5f4:	0800a62d 	.word	0x0800a62d
 800a5f8:	0800a62d 	.word	0x0800a62d
 800a5fc:	0800a62d 	.word	0x0800a62d
 800a600:	0800a61b 	.word	0x0800a61b
 800a604:	0800a62d 	.word	0x0800a62d
 800a608:	0800a62d 	.word	0x0800a62d
 800a60c:	0800a62d 	.word	0x0800a62d
 800a610:	0800a627 	.word	0x0800a627
 800a614:	2300      	movs	r3, #0
 800a616:	77fb      	strb	r3, [r7, #31]
 800a618:	e117      	b.n	800a84a <UART_SetConfig+0x346>
 800a61a:	2302      	movs	r3, #2
 800a61c:	77fb      	strb	r3, [r7, #31]
 800a61e:	e114      	b.n	800a84a <UART_SetConfig+0x346>
 800a620:	2304      	movs	r3, #4
 800a622:	77fb      	strb	r3, [r7, #31]
 800a624:	e111      	b.n	800a84a <UART_SetConfig+0x346>
 800a626:	2308      	movs	r3, #8
 800a628:	77fb      	strb	r3, [r7, #31]
 800a62a:	e10e      	b.n	800a84a <UART_SetConfig+0x346>
 800a62c:	2310      	movs	r3, #16
 800a62e:	77fb      	strb	r3, [r7, #31]
 800a630:	e10b      	b.n	800a84a <UART_SetConfig+0x346>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a69      	ldr	r2, [pc, #420]	; (800a7dc <UART_SetConfig+0x2d8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d120      	bne.n	800a67e <UART_SetConfig+0x17a>
 800a63c:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a642:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a646:	2b30      	cmp	r3, #48	; 0x30
 800a648:	d013      	beq.n	800a672 <UART_SetConfig+0x16e>
 800a64a:	2b30      	cmp	r3, #48	; 0x30
 800a64c:	d814      	bhi.n	800a678 <UART_SetConfig+0x174>
 800a64e:	2b20      	cmp	r3, #32
 800a650:	d009      	beq.n	800a666 <UART_SetConfig+0x162>
 800a652:	2b20      	cmp	r3, #32
 800a654:	d810      	bhi.n	800a678 <UART_SetConfig+0x174>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d002      	beq.n	800a660 <UART_SetConfig+0x15c>
 800a65a:	2b10      	cmp	r3, #16
 800a65c:	d006      	beq.n	800a66c <UART_SetConfig+0x168>
 800a65e:	e00b      	b.n	800a678 <UART_SetConfig+0x174>
 800a660:	2300      	movs	r3, #0
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e0f1      	b.n	800a84a <UART_SetConfig+0x346>
 800a666:	2302      	movs	r3, #2
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e0ee      	b.n	800a84a <UART_SetConfig+0x346>
 800a66c:	2304      	movs	r3, #4
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e0eb      	b.n	800a84a <UART_SetConfig+0x346>
 800a672:	2308      	movs	r3, #8
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e0e8      	b.n	800a84a <UART_SetConfig+0x346>
 800a678:	2310      	movs	r3, #16
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e0e5      	b.n	800a84a <UART_SetConfig+0x346>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a57      	ldr	r2, [pc, #348]	; (800a7e0 <UART_SetConfig+0x2dc>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d120      	bne.n	800a6ca <UART_SetConfig+0x1c6>
 800a688:	4b52      	ldr	r3, [pc, #328]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a692:	2bc0      	cmp	r3, #192	; 0xc0
 800a694:	d013      	beq.n	800a6be <UART_SetConfig+0x1ba>
 800a696:	2bc0      	cmp	r3, #192	; 0xc0
 800a698:	d814      	bhi.n	800a6c4 <UART_SetConfig+0x1c0>
 800a69a:	2b80      	cmp	r3, #128	; 0x80
 800a69c:	d009      	beq.n	800a6b2 <UART_SetConfig+0x1ae>
 800a69e:	2b80      	cmp	r3, #128	; 0x80
 800a6a0:	d810      	bhi.n	800a6c4 <UART_SetConfig+0x1c0>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <UART_SetConfig+0x1a8>
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d006      	beq.n	800a6b8 <UART_SetConfig+0x1b4>
 800a6aa:	e00b      	b.n	800a6c4 <UART_SetConfig+0x1c0>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	77fb      	strb	r3, [r7, #31]
 800a6b0:	e0cb      	b.n	800a84a <UART_SetConfig+0x346>
 800a6b2:	2302      	movs	r3, #2
 800a6b4:	77fb      	strb	r3, [r7, #31]
 800a6b6:	e0c8      	b.n	800a84a <UART_SetConfig+0x346>
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	77fb      	strb	r3, [r7, #31]
 800a6bc:	e0c5      	b.n	800a84a <UART_SetConfig+0x346>
 800a6be:	2308      	movs	r3, #8
 800a6c0:	77fb      	strb	r3, [r7, #31]
 800a6c2:	e0c2      	b.n	800a84a <UART_SetConfig+0x346>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	77fb      	strb	r3, [r7, #31]
 800a6c8:	e0bf      	b.n	800a84a <UART_SetConfig+0x346>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a45      	ldr	r2, [pc, #276]	; (800a7e4 <UART_SetConfig+0x2e0>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d125      	bne.n	800a720 <UART_SetConfig+0x21c>
 800a6d4:	4b3f      	ldr	r3, [pc, #252]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6e2:	d017      	beq.n	800a714 <UART_SetConfig+0x210>
 800a6e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6e8:	d817      	bhi.n	800a71a <UART_SetConfig+0x216>
 800a6ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6ee:	d00b      	beq.n	800a708 <UART_SetConfig+0x204>
 800a6f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6f4:	d811      	bhi.n	800a71a <UART_SetConfig+0x216>
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <UART_SetConfig+0x1fe>
 800a6fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6fe:	d006      	beq.n	800a70e <UART_SetConfig+0x20a>
 800a700:	e00b      	b.n	800a71a <UART_SetConfig+0x216>
 800a702:	2300      	movs	r3, #0
 800a704:	77fb      	strb	r3, [r7, #31]
 800a706:	e0a0      	b.n	800a84a <UART_SetConfig+0x346>
 800a708:	2302      	movs	r3, #2
 800a70a:	77fb      	strb	r3, [r7, #31]
 800a70c:	e09d      	b.n	800a84a <UART_SetConfig+0x346>
 800a70e:	2304      	movs	r3, #4
 800a710:	77fb      	strb	r3, [r7, #31]
 800a712:	e09a      	b.n	800a84a <UART_SetConfig+0x346>
 800a714:	2308      	movs	r3, #8
 800a716:	77fb      	strb	r3, [r7, #31]
 800a718:	e097      	b.n	800a84a <UART_SetConfig+0x346>
 800a71a:	2310      	movs	r3, #16
 800a71c:	77fb      	strb	r3, [r7, #31]
 800a71e:	e094      	b.n	800a84a <UART_SetConfig+0x346>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a30      	ldr	r2, [pc, #192]	; (800a7e8 <UART_SetConfig+0x2e4>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d125      	bne.n	800a776 <UART_SetConfig+0x272>
 800a72a:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a734:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a738:	d017      	beq.n	800a76a <UART_SetConfig+0x266>
 800a73a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a73e:	d817      	bhi.n	800a770 <UART_SetConfig+0x26c>
 800a740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a744:	d00b      	beq.n	800a75e <UART_SetConfig+0x25a>
 800a746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a74a:	d811      	bhi.n	800a770 <UART_SetConfig+0x26c>
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d003      	beq.n	800a758 <UART_SetConfig+0x254>
 800a750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a754:	d006      	beq.n	800a764 <UART_SetConfig+0x260>
 800a756:	e00b      	b.n	800a770 <UART_SetConfig+0x26c>
 800a758:	2301      	movs	r3, #1
 800a75a:	77fb      	strb	r3, [r7, #31]
 800a75c:	e075      	b.n	800a84a <UART_SetConfig+0x346>
 800a75e:	2302      	movs	r3, #2
 800a760:	77fb      	strb	r3, [r7, #31]
 800a762:	e072      	b.n	800a84a <UART_SetConfig+0x346>
 800a764:	2304      	movs	r3, #4
 800a766:	77fb      	strb	r3, [r7, #31]
 800a768:	e06f      	b.n	800a84a <UART_SetConfig+0x346>
 800a76a:	2308      	movs	r3, #8
 800a76c:	77fb      	strb	r3, [r7, #31]
 800a76e:	e06c      	b.n	800a84a <UART_SetConfig+0x346>
 800a770:	2310      	movs	r3, #16
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	e069      	b.n	800a84a <UART_SetConfig+0x346>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a1c      	ldr	r2, [pc, #112]	; (800a7ec <UART_SetConfig+0x2e8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d137      	bne.n	800a7f0 <UART_SetConfig+0x2ec>
 800a780:	4b14      	ldr	r3, [pc, #80]	; (800a7d4 <UART_SetConfig+0x2d0>)
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a786:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a78a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a78e:	d017      	beq.n	800a7c0 <UART_SetConfig+0x2bc>
 800a790:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a794:	d817      	bhi.n	800a7c6 <UART_SetConfig+0x2c2>
 800a796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a79a:	d00b      	beq.n	800a7b4 <UART_SetConfig+0x2b0>
 800a79c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a0:	d811      	bhi.n	800a7c6 <UART_SetConfig+0x2c2>
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <UART_SetConfig+0x2aa>
 800a7a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7aa:	d006      	beq.n	800a7ba <UART_SetConfig+0x2b6>
 800a7ac:	e00b      	b.n	800a7c6 <UART_SetConfig+0x2c2>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	77fb      	strb	r3, [r7, #31]
 800a7b2:	e04a      	b.n	800a84a <UART_SetConfig+0x346>
 800a7b4:	2302      	movs	r3, #2
 800a7b6:	77fb      	strb	r3, [r7, #31]
 800a7b8:	e047      	b.n	800a84a <UART_SetConfig+0x346>
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	77fb      	strb	r3, [r7, #31]
 800a7be:	e044      	b.n	800a84a <UART_SetConfig+0x346>
 800a7c0:	2308      	movs	r3, #8
 800a7c2:	77fb      	strb	r3, [r7, #31]
 800a7c4:	e041      	b.n	800a84a <UART_SetConfig+0x346>
 800a7c6:	2310      	movs	r3, #16
 800a7c8:	77fb      	strb	r3, [r7, #31]
 800a7ca:	e03e      	b.n	800a84a <UART_SetConfig+0x346>
 800a7cc:	efff69f3 	.word	0xefff69f3
 800a7d0:	40011000 	.word	0x40011000
 800a7d4:	40023800 	.word	0x40023800
 800a7d8:	40004400 	.word	0x40004400
 800a7dc:	40004800 	.word	0x40004800
 800a7e0:	40004c00 	.word	0x40004c00
 800a7e4:	40005000 	.word	0x40005000
 800a7e8:	40011400 	.word	0x40011400
 800a7ec:	40007800 	.word	0x40007800
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a71      	ldr	r2, [pc, #452]	; (800a9bc <UART_SetConfig+0x4b8>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d125      	bne.n	800a846 <UART_SetConfig+0x342>
 800a7fa:	4b71      	ldr	r3, [pc, #452]	; (800a9c0 <UART_SetConfig+0x4bc>)
 800a7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a804:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a808:	d017      	beq.n	800a83a <UART_SetConfig+0x336>
 800a80a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a80e:	d817      	bhi.n	800a840 <UART_SetConfig+0x33c>
 800a810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a814:	d00b      	beq.n	800a82e <UART_SetConfig+0x32a>
 800a816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a81a:	d811      	bhi.n	800a840 <UART_SetConfig+0x33c>
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d003      	beq.n	800a828 <UART_SetConfig+0x324>
 800a820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a824:	d006      	beq.n	800a834 <UART_SetConfig+0x330>
 800a826:	e00b      	b.n	800a840 <UART_SetConfig+0x33c>
 800a828:	2300      	movs	r3, #0
 800a82a:	77fb      	strb	r3, [r7, #31]
 800a82c:	e00d      	b.n	800a84a <UART_SetConfig+0x346>
 800a82e:	2302      	movs	r3, #2
 800a830:	77fb      	strb	r3, [r7, #31]
 800a832:	e00a      	b.n	800a84a <UART_SetConfig+0x346>
 800a834:	2304      	movs	r3, #4
 800a836:	77fb      	strb	r3, [r7, #31]
 800a838:	e007      	b.n	800a84a <UART_SetConfig+0x346>
 800a83a:	2308      	movs	r3, #8
 800a83c:	77fb      	strb	r3, [r7, #31]
 800a83e:	e004      	b.n	800a84a <UART_SetConfig+0x346>
 800a840:	2310      	movs	r3, #16
 800a842:	77fb      	strb	r3, [r7, #31]
 800a844:	e001      	b.n	800a84a <UART_SetConfig+0x346>
 800a846:	2310      	movs	r3, #16
 800a848:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a852:	d15b      	bne.n	800a90c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800a854:	7ffb      	ldrb	r3, [r7, #31]
 800a856:	2b08      	cmp	r3, #8
 800a858:	d827      	bhi.n	800a8aa <UART_SetConfig+0x3a6>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x35c>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a885 	.word	0x0800a885
 800a864:	0800a88d 	.word	0x0800a88d
 800a868:	0800a895 	.word	0x0800a895
 800a86c:	0800a8ab 	.word	0x0800a8ab
 800a870:	0800a89b 	.word	0x0800a89b
 800a874:	0800a8ab 	.word	0x0800a8ab
 800a878:	0800a8ab 	.word	0x0800a8ab
 800a87c:	0800a8ab 	.word	0x0800a8ab
 800a880:	0800a8a3 	.word	0x0800a8a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a884:	f7fc ff12 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 800a888:	61b8      	str	r0, [r7, #24]
        break;
 800a88a:	e013      	b.n	800a8b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a88c:	f7fc ff22 	bl	80076d4 <HAL_RCC_GetPCLK2Freq>
 800a890:	61b8      	str	r0, [r7, #24]
        break;
 800a892:	e00f      	b.n	800a8b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a894:	4b4b      	ldr	r3, [pc, #300]	; (800a9c4 <UART_SetConfig+0x4c0>)
 800a896:	61bb      	str	r3, [r7, #24]
        break;
 800a898:	e00c      	b.n	800a8b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a89a:	f7fc fe19 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800a89e:	61b8      	str	r0, [r7, #24]
        break;
 800a8a0:	e008      	b.n	800a8b4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8a6:	61bb      	str	r3, [r7, #24]
        break;
 800a8a8:	e004      	b.n	800a8b4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a8b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d074      	beq.n	800a9a4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8ba:	69bb      	ldr	r3, [r7, #24]
 800a8bc:	005a      	lsls	r2, r3, #1
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	085b      	lsrs	r3, r3, #1
 800a8c4:	441a      	add	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	2b0f      	cmp	r3, #15
 800a8d6:	d916      	bls.n	800a906 <UART_SetConfig+0x402>
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8de:	d212      	bcs.n	800a906 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	f023 030f 	bic.w	r3, r3, #15
 800a8e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	085b      	lsrs	r3, r3, #1
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	89fb      	ldrh	r3, [r7, #14]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	89fa      	ldrh	r2, [r7, #14]
 800a902:	60da      	str	r2, [r3, #12]
 800a904:	e04e      	b.n	800a9a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	77bb      	strb	r3, [r7, #30]
 800a90a:	e04b      	b.n	800a9a4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a90c:	7ffb      	ldrb	r3, [r7, #31]
 800a90e:	2b08      	cmp	r3, #8
 800a910:	d827      	bhi.n	800a962 <UART_SetConfig+0x45e>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <UART_SetConfig+0x414>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a93d 	.word	0x0800a93d
 800a91c:	0800a945 	.word	0x0800a945
 800a920:	0800a94d 	.word	0x0800a94d
 800a924:	0800a963 	.word	0x0800a963
 800a928:	0800a953 	.word	0x0800a953
 800a92c:	0800a963 	.word	0x0800a963
 800a930:	0800a963 	.word	0x0800a963
 800a934:	0800a963 	.word	0x0800a963
 800a938:	0800a95b 	.word	0x0800a95b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a93c:	f7fc feb6 	bl	80076ac <HAL_RCC_GetPCLK1Freq>
 800a940:	61b8      	str	r0, [r7, #24]
        break;
 800a942:	e013      	b.n	800a96c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a944:	f7fc fec6 	bl	80076d4 <HAL_RCC_GetPCLK2Freq>
 800a948:	61b8      	str	r0, [r7, #24]
        break;
 800a94a:	e00f      	b.n	800a96c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a94c:	4b1d      	ldr	r3, [pc, #116]	; (800a9c4 <UART_SetConfig+0x4c0>)
 800a94e:	61bb      	str	r3, [r7, #24]
        break;
 800a950:	e00c      	b.n	800a96c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a952:	f7fc fdbd 	bl	80074d0 <HAL_RCC_GetSysClockFreq>
 800a956:	61b8      	str	r0, [r7, #24]
        break;
 800a958:	e008      	b.n	800a96c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a95a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a95e:	61bb      	str	r3, [r7, #24]
        break;
 800a960:	e004      	b.n	800a96c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800a962:	2300      	movs	r3, #0
 800a964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	77bb      	strb	r3, [r7, #30]
        break;
 800a96a:	bf00      	nop
    }

    if (pclk != 0U)
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d018      	beq.n	800a9a4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	085a      	lsrs	r2, r3, #1
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	441a      	add	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	fbb2 f3f3 	udiv	r3, r2, r3
 800a984:	b29b      	uxth	r3, r3
 800a986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2b0f      	cmp	r3, #15
 800a98c:	d908      	bls.n	800a9a0 <UART_SetConfig+0x49c>
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a994:	d204      	bcs.n	800a9a0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	60da      	str	r2, [r3, #12]
 800a99e:	e001      	b.n	800a9a4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a9b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	40007c00 	.word	0x40007c00
 800a9c0:	40023800 	.word	0x40023800
 800a9c4:	00f42400 	.word	0x00f42400

0800a9c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b083      	sub	sp, #12
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d4:	f003 0301 	and.w	r3, r3, #1
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d00a      	beq.n	800a9f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	f003 0302 	and.w	r3, r3, #2
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00a      	beq.n	800aa14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	430a      	orrs	r2, r1
 800aa12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	f003 0304 	and.w	r3, r3, #4
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00a      	beq.n	800aa36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	430a      	orrs	r2, r1
 800aa34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3a:	f003 0308 	and.w	r3, r3, #8
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00a      	beq.n	800aa58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00a      	beq.n	800aa7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01a      	beq.n	800aade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	430a      	orrs	r2, r1
 800aabc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aac6:	d10a      	bne.n	800aade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	605a      	str	r2, [r3, #4]
  }
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab1c:	f7fa fd2e 	bl	800557c <HAL_GetTick>
 800ab20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0308 	and.w	r3, r3, #8
 800ab2c:	2b08      	cmp	r3, #8
 800ab2e:	d10e      	bne.n	800ab4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab34:	9300      	str	r3, [sp, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f817 	bl	800ab72 <UART_WaitOnFlagUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e00d      	b.n	800ab6a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2220      	movs	r2, #32
 800ab52:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2220      	movs	r2, #32
 800ab58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	603b      	str	r3, [r7, #0]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab82:	e05e      	b.n	800ac42 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8a:	d05a      	beq.n	800ac42 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab8c:	f7fa fcf6 	bl	800557c <HAL_GetTick>
 800ab90:	4602      	mov	r2, r0
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	1ad3      	subs	r3, r2, r3
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d302      	bcc.n	800aba2 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d11b      	bne.n	800abda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800abb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	689a      	ldr	r2, [r3, #8]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f022 0201 	bic.w	r2, r2, #1
 800abc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2220      	movs	r2, #32
 800abc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2220      	movs	r2, #32
 800abcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800abd6:	2303      	movs	r3, #3
 800abd8:	e043      	b.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d02c      	beq.n	800ac42 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abf6:	d124      	bne.n	800ac42 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac10:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0201 	bic.w	r2, r2, #1
 800ac20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2220      	movs	r2, #32
 800ac26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e00f      	b.n	800ac62 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	bf0c      	ite	eq
 800ac52:	2301      	moveq	r3, #1
 800ac54:	2300      	movne	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	461a      	mov	r2, r3
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d091      	beq.n	800ab84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
	...

0800ac6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	f107 001c 	add.w	r0, r7, #28
 800ac7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d126      	bne.n	800acd2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	4b23      	ldr	r3, [pc, #140]	; (800ad24 <USB_CoreInit+0xb8>)
 800ac96:	4013      	ands	r3, r2
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f043 0210 	orr.w	r2, r3, #16
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d105      	bne.n	800acc6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fa5a 	bl	800b180 <USB_CoreReset>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]
 800acd0:	e010      	b.n	800acf4 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa4e 	bl	800b180 <USB_CoreReset>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d10b      	bne.n	800ad12 <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f043 0206 	orr.w	r2, r3, #6
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f043 0220 	orr.w	r2, r3, #32
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad1e:	b004      	add	sp, #16
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop
 800ad24:	ffbdffbf 	.word	0xffbdffbf

0800ad28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f023 0201 	bic.w	r2, r3, #1
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad3c:	2300      	movs	r3, #0
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d106      	bne.n	800ad76 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	60da      	str	r2, [r3, #12]
 800ad74:	e00b      	b.n	800ad8e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d106      	bne.n	800ad8a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	60da      	str	r2, [r3, #12]
 800ad88:	e001      	b.n	800ad8e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e003      	b.n	800ad96 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ad8e:	2032      	movs	r0, #50	; 0x32
 800ad90:	f7fa fc00 	bl	8005594 <HAL_Delay>

  return HAL_OK;
 800ad94:	2300      	movs	r3, #0
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
	...

0800ada0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ada0:	b084      	sub	sp, #16
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b086      	sub	sp, #24
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800adae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	e009      	b.n	800add4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	3340      	adds	r3, #64	; 0x40
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	2200      	movs	r2, #0
 800adcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	3301      	adds	r3, #1
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	2b0e      	cmp	r3, #14
 800add8:	d9f2      	bls.n	800adc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800adda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800addc:	2b00      	cmp	r3, #0
 800adde:	d11c      	bne.n	800ae1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800adee:	f043 0302 	orr.w	r3, r3, #2
 800adf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e005      	b.n	800ae26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae40:	461a      	mov	r2, r3
 800ae42:	680b      	ldr	r3, [r1, #0]
 800ae44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d10c      	bne.n	800ae66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae52:	2100      	movs	r1, #0
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f959 	bl	800b10c <USB_SetDevSpeed>
 800ae5a:	e018      	b.n	800ae8e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f954 	bl	800b10c <USB_SetDevSpeed>
 800ae64:	e013      	b.n	800ae8e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800ae66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae68:	2b03      	cmp	r3, #3
 800ae6a:	d10c      	bne.n	800ae86 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ae6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d104      	bne.n	800ae7c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ae72:	2100      	movs	r1, #0
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f949 	bl	800b10c <USB_SetDevSpeed>
 800ae7a:	e008      	b.n	800ae8e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f944 	bl	800b10c <USB_SetDevSpeed>
 800ae84:	e003      	b.n	800ae8e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ae86:	2103      	movs	r1, #3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 f93f 	bl	800b10c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ae8e:	2110      	movs	r1, #16
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f8f3 	bl	800b07c <USB_FlushTxFifo>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 f911 	bl	800b0c8 <USB_FlushRxFifo>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d001      	beq.n	800aeb0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	2300      	movs	r3, #0
 800aeba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec2:	461a      	mov	r2, r3
 800aec4:	2300      	movs	r3, #0
 800aec6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aece:	461a      	mov	r2, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	e043      	b.n	800af62 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aef0:	d118      	bne.n	800af24 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af04:	461a      	mov	r2, r3
 800af06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	e013      	b.n	800af36 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1a:	461a      	mov	r2, r3
 800af1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	e008      	b.n	800af36 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af30:	461a      	mov	r2, r3
 800af32:	2300      	movs	r3, #0
 800af34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af42:	461a      	mov	r2, r3
 800af44:	2300      	movs	r3, #0
 800af46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af54:	461a      	mov	r2, r3
 800af56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	3301      	adds	r3, #1
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	d3b7      	bcc.n	800aeda <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	e043      	b.n	800aff8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af86:	d118      	bne.n	800afba <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d10a      	bne.n	800afa4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9a:	461a      	mov	r2, r3
 800af9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	e013      	b.n	800afcc <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb0:	461a      	mov	r2, r3
 800afb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	e008      	b.n	800afcc <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afc6:	461a      	mov	r2, r3
 800afc8:	2300      	movs	r3, #0
 800afca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afd8:	461a      	mov	r2, r3
 800afda:	2300      	movs	r3, #0
 800afdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	015a      	lsls	r2, r3, #5
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4413      	add	r3, r2
 800afe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afea:	461a      	mov	r2, r3
 800afec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aff0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	3301      	adds	r3, #1
 800aff6:	613b      	str	r3, [r7, #16]
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	429a      	cmp	r2, r3
 800affe:	d3b7      	bcc.n	800af70 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b00e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b012:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b020:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b024:	2b00      	cmp	r3, #0
 800b026:	d105      	bne.n	800b034 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	f043 0210 	orr.w	r2, r3, #16
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	699a      	ldr	r2, [r3, #24]
 800b038:	4b0e      	ldr	r3, [pc, #56]	; (800b074 <USB_DevInit+0x2d4>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b042:	2b00      	cmp	r3, #0
 800b044:	d005      	beq.n	800b052 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	f043 0208 	orr.w	r2, r3, #8
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d105      	bne.n	800b064 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	699a      	ldr	r2, [r3, #24]
 800b05c:	4b06      	ldr	r3, [pc, #24]	; (800b078 <USB_DevInit+0x2d8>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b070:	b004      	add	sp, #16
 800b072:	4770      	bx	lr
 800b074:	803c3800 	.word	0x803c3800
 800b078:	40000004 	.word	0x40000004

0800b07c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	019b      	lsls	r3, r3, #6
 800b08e:	f043 0220 	orr.w	r2, r3, #32
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4a09      	ldr	r2, [pc, #36]	; (800b0c4 <USB_FlushTxFifo+0x48>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d901      	bls.n	800b0a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e006      	b.n	800b0b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	f003 0320 	and.w	r3, r3, #32
 800b0b0:	2b20      	cmp	r3, #32
 800b0b2:	d0f0      	beq.n	800b096 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b0b4:	2300      	movs	r3, #0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3714      	adds	r7, #20
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	00030d40 	.word	0x00030d40

0800b0c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2210      	movs	r2, #16
 800b0d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4a09      	ldr	r2, [pc, #36]	; (800b108 <USB_FlushRxFifo+0x40>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d901      	bls.n	800b0ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e006      	b.n	800b0fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b10      	cmp	r3, #16
 800b0f6:	d0f0      	beq.n	800b0da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3714      	adds	r7, #20
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr
 800b106:	bf00      	nop
 800b108:	00030d40 	.word	0x00030d40

0800b10c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	460b      	mov	r3, r1
 800b116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	68f9      	ldr	r1, [r7, #12]
 800b128:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b12c:	4313      	orrs	r3, r2
 800b12e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b158:	f023 0303 	bic.w	r3, r3, #3
 800b15c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b16c:	f043 0302 	orr.w	r3, r3, #2
 800b170:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b180:	b480      	push	{r7}
 800b182:	b085      	sub	sp, #20
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	4a13      	ldr	r2, [pc, #76]	; (800b1e4 <USB_CoreReset+0x64>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d901      	bls.n	800b19e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e01b      	b.n	800b1d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	daf2      	bge.n	800b18c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	691b      	ldr	r3, [r3, #16]
 800b1ae:	f043 0201 	orr.w	r2, r3, #1
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	60fb      	str	r3, [r7, #12]
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4a09      	ldr	r2, [pc, #36]	; (800b1e4 <USB_CoreReset+0x64>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d901      	bls.n	800b1c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e006      	b.n	800b1d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d0f0      	beq.n	800b1b6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	00030d40 	.word	0x00030d40

0800b1e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b1e8:	b480      	push	{r7}
 800b1ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b1ec:	bf00      	nop
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1fe:	f3ef 8305 	mrs	r3, IPSR
 800b202:	60bb      	str	r3, [r7, #8]
  return(result);
 800b204:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10f      	bne.n	800b22a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b20a:	f3ef 8310 	mrs	r3, PRIMASK
 800b20e:	607b      	str	r3, [r7, #4]
  return(result);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d105      	bne.n	800b222 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b216:	f3ef 8311 	mrs	r3, BASEPRI
 800b21a:	603b      	str	r3, [r7, #0]
  return(result);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d007      	beq.n	800b232 <osKernelInitialize+0x3a>
 800b222:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <osKernelInitialize+0x64>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d103      	bne.n	800b232 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b22a:	f06f 0305 	mvn.w	r3, #5
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	e00c      	b.n	800b24c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b232:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <osKernelInitialize+0x64>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d105      	bne.n	800b246 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b23a:	4b08      	ldr	r3, [pc, #32]	; (800b25c <osKernelInitialize+0x64>)
 800b23c:	2201      	movs	r2, #1
 800b23e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b240:	2300      	movs	r3, #0
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b246:	f04f 33ff 	mov.w	r3, #4294967295
 800b24a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b24c:	68fb      	ldr	r3, [r7, #12]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	2000021c 	.word	0x2000021c

0800b260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b266:	f3ef 8305 	mrs	r3, IPSR
 800b26a:	60bb      	str	r3, [r7, #8]
  return(result);
 800b26c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10f      	bne.n	800b292 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	607b      	str	r3, [r7, #4]
  return(result);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d105      	bne.n	800b28a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b27e:	f3ef 8311 	mrs	r3, BASEPRI
 800b282:	603b      	str	r3, [r7, #0]
  return(result);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <osKernelStart+0x3a>
 800b28a:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <osKernelStart+0x68>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d103      	bne.n	800b29a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b292:	f06f 0305 	mvn.w	r3, #5
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	e010      	b.n	800b2bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b29a:	4b0b      	ldr	r3, [pc, #44]	; (800b2c8 <osKernelStart+0x68>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d109      	bne.n	800b2b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b2a2:	f7ff ffa1 	bl	800b1e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b2a6:	4b08      	ldr	r3, [pc, #32]	; (800b2c8 <osKernelStart+0x68>)
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b2ac:	f001 f9aa 	bl	800c604 <vTaskStartScheduler>
      stat = osOK;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	e002      	b.n	800b2bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	2000021c 	.word	0x2000021c

0800b2cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2d2:	f3ef 8305 	mrs	r3, IPSR
 800b2d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10f      	bne.n	800b2fe <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2de:	f3ef 8310 	mrs	r3, PRIMASK
 800b2e2:	607b      	str	r3, [r7, #4]
  return(result);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2ea:	f3ef 8311 	mrs	r3, BASEPRI
 800b2ee:	603b      	str	r3, [r7, #0]
  return(result);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d007      	beq.n	800b306 <osKernelGetTickCount+0x3a>
 800b2f6:	4b08      	ldr	r3, [pc, #32]	; (800b318 <osKernelGetTickCount+0x4c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d103      	bne.n	800b306 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800b2fe:	f001 faa9 	bl	800c854 <xTaskGetTickCountFromISR>
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	e002      	b.n	800b30c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800b306:	f001 fa95 	bl	800c834 <xTaskGetTickCount>
 800b30a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800b30c:	68fb      	ldr	r3, [r7, #12]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	2000021c 	.word	0x2000021c

0800b31c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800b31c:	b480      	push	{r7}
 800b31e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800b320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800b324:	4618      	mov	r0, r3
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b330:	b580      	push	{r7, lr}
 800b332:	b090      	sub	sp, #64	; 0x40
 800b334:	af04      	add	r7, sp, #16
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b340:	f3ef 8305 	mrs	r3, IPSR
 800b344:	61fb      	str	r3, [r7, #28]
  return(result);
 800b346:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b348:	2b00      	cmp	r3, #0
 800b34a:	f040 808f 	bne.w	800b46c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b34e:	f3ef 8310 	mrs	r3, PRIMASK
 800b352:	61bb      	str	r3, [r7, #24]
  return(result);
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d105      	bne.n	800b366 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b35a:	f3ef 8311 	mrs	r3, BASEPRI
 800b35e:	617b      	str	r3, [r7, #20]
  return(result);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <osThreadNew+0x3e>
 800b366:	4b44      	ldr	r3, [pc, #272]	; (800b478 <osThreadNew+0x148>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d07e      	beq.n	800b46c <osThreadNew+0x13c>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d07b      	beq.n	800b46c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b374:	2380      	movs	r3, #128	; 0x80
 800b376:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b378:	2318      	movs	r3, #24
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b37c:	2300      	movs	r3, #0
 800b37e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b380:	f04f 33ff 	mov.w	r3, #4294967295
 800b384:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d045      	beq.n	800b418 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <osThreadNew+0x6a>
        name = attr->name;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d002      	beq.n	800b3a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d008      	beq.n	800b3c0 <osThreadNew+0x90>
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	2b38      	cmp	r3, #56	; 0x38
 800b3b2:	d805      	bhi.n	800b3c0 <osThreadNew+0x90>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d001      	beq.n	800b3c4 <osThreadNew+0x94>
        return (NULL);
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	e054      	b.n	800b46e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	695b      	ldr	r3, [r3, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	089b      	lsrs	r3, r3, #2
 800b3d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d00e      	beq.n	800b3fa <osThreadNew+0xca>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	2b5b      	cmp	r3, #91	; 0x5b
 800b3e2:	d90a      	bls.n	800b3fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d006      	beq.n	800b3fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <osThreadNew+0xca>
        mem = 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	623b      	str	r3, [r7, #32]
 800b3f8:	e010      	b.n	800b41c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10c      	bne.n	800b41c <osThreadNew+0xec>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68db      	ldr	r3, [r3, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d108      	bne.n	800b41c <osThreadNew+0xec>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d104      	bne.n	800b41c <osThreadNew+0xec>
          mem = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	623b      	str	r3, [r7, #32]
 800b416:	e001      	b.n	800b41c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800b418:	2300      	movs	r3, #0
 800b41a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d110      	bne.n	800b444 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b42a:	9202      	str	r2, [sp, #8]
 800b42c:	9301      	str	r3, [sp, #4]
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f000 fe7f 	bl	800c13c <xTaskCreateStatic>
 800b43e:	4603      	mov	r3, r0
 800b440:	613b      	str	r3, [r7, #16]
 800b442:	e013      	b.n	800b46c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800b444:	6a3b      	ldr	r3, [r7, #32]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d110      	bne.n	800b46c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	f107 0310 	add.w	r3, r7, #16
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f000 fed0 	bl	800c202 <xTaskCreate>
 800b462:	4603      	mov	r3, r0
 800b464:	2b01      	cmp	r3, #1
 800b466:	d001      	beq.n	800b46c <osThreadNew+0x13c>
          hTask = NULL;
 800b468:	2300      	movs	r3, #0
 800b46a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b46c:	693b      	ldr	r3, [r7, #16]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3730      	adds	r7, #48	; 0x30
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2000021c 	.word	0x2000021c

0800b47c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b484:	f3ef 8305 	mrs	r3, IPSR
 800b488:	613b      	str	r3, [r7, #16]
  return(result);
 800b48a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d10f      	bne.n	800b4b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b490:	f3ef 8310 	mrs	r3, PRIMASK
 800b494:	60fb      	str	r3, [r7, #12]
  return(result);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d105      	bne.n	800b4a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b49c:	f3ef 8311 	mrs	r3, BASEPRI
 800b4a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d007      	beq.n	800b4b8 <osDelay+0x3c>
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <osDelay+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d103      	bne.n	800b4b8 <osDelay+0x3c>
    stat = osErrorISR;
 800b4b0:	f06f 0305 	mvn.w	r3, #5
 800b4b4:	617b      	str	r3, [r7, #20]
 800b4b6:	e007      	b.n	800b4c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d002      	beq.n	800b4c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f001 f868 	bl	800c598 <vTaskDelay>
    }
  }

  return (stat);
 800b4c8:	697b      	ldr	r3, [r7, #20]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	2000021c 	.word	0x2000021c

0800b4d8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4e0:	f3ef 8305 	mrs	r3, IPSR
 800b4e4:	617b      	str	r3, [r7, #20]
  return(result);
 800b4e6:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d10f      	bne.n	800b50c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4ec:	f3ef 8310 	mrs	r3, PRIMASK
 800b4f0:	613b      	str	r3, [r7, #16]
  return(result);
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4f8:	f3ef 8311 	mrs	r3, BASEPRI
 800b4fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d007      	beq.n	800b514 <osDelayUntil+0x3c>
 800b504:	4b13      	ldr	r3, [pc, #76]	; (800b554 <osDelayUntil+0x7c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b02      	cmp	r3, #2
 800b50a:	d103      	bne.n	800b514 <osDelayUntil+0x3c>
    stat = osErrorISR;
 800b50c:	f06f 0305 	mvn.w	r3, #5
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	e019      	b.n	800b548 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 800b514:	2300      	movs	r3, #0
 800b516:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 800b518:	f001 f98c 	bl	800c834 <xTaskGetTickCount>
 800b51c:	4603      	mov	r3, r0
 800b51e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d009      	beq.n	800b542 <osDelayUntil+0x6a>
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	db06      	blt.n	800b542 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 800b534:	f107 0308 	add.w	r3, r7, #8
 800b538:	69b9      	ldr	r1, [r7, #24]
 800b53a:	4618      	mov	r0, r3
 800b53c:	f000 ffa8 	bl	800c490 <vTaskDelayUntil>
 800b540:	e002      	b.n	800b548 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800b542:	f06f 0303 	mvn.w	r3, #3
 800b546:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800b548:	69fb      	ldr	r3, [r7, #28]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	2000021c 	.word	0x2000021c

0800b558 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4a07      	ldr	r2, [pc, #28]	; (800b584 <vApplicationGetIdleTaskMemory+0x2c>)
 800b568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a06      	ldr	r2, [pc, #24]	; (800b588 <vApplicationGetIdleTaskMemory+0x30>)
 800b56e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2280      	movs	r2, #128	; 0x80
 800b574:	601a      	str	r2, [r3, #0]
}
 800b576:	bf00      	nop
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	20000220 	.word	0x20000220
 800b588:	2000027c 	.word	0x2000027c

0800b58c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	4a07      	ldr	r2, [pc, #28]	; (800b5b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b59c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a06      	ldr	r2, [pc, #24]	; (800b5bc <vApplicationGetTimerTaskMemory+0x30>)
 800b5a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5aa:	601a      	str	r2, [r3, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	3714      	adds	r7, #20
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	2000047c 	.word	0x2000047c
 800b5bc:	200004d8 	.word	0x200004d8

0800b5c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f103 0208 	add.w	r2, r3, #8
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f103 0208 	add.w	r2, r3, #8
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f103 0208 	add.w	r2, r3, #8
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b60e:	bf00      	nop
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	683a      	ldr	r2, [r7, #0]
 800b63e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	1c5a      	adds	r2, r3, #1
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	bf00      	nop
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b662:	b480      	push	{r7}
 800b664:	b085      	sub	sp, #20
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b678:	d103      	bne.n	800b682 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	60fb      	str	r3, [r7, #12]
 800b680:	e00c      	b.n	800b69c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3308      	adds	r3, #8
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	e002      	b.n	800b690 <vListInsert+0x2e>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d2f6      	bcs.n	800b68a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	685a      	ldr	r2, [r3, #4]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	601a      	str	r2, [r3, #0]
}
 800b6c8:	bf00      	nop
 800b6ca:	3714      	adds	r7, #20
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr

0800b6d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b085      	sub	sp, #20
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	6892      	ldr	r2, [r2, #8]
 800b6ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	689b      	ldr	r3, [r3, #8]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6852      	ldr	r2, [r2, #4]
 800b6f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d103      	bne.n	800b708 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	1e5a      	subs	r2, r3, #1
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10c      	bne.n	800b756 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b740:	b672      	cpsid	i
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	b662      	cpsie	i
 800b750:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b752:	bf00      	nop
 800b754:	e7fe      	b.n	800b754 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b756:	f002 f9f1 	bl	800db3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b766:	fb01 f303 	mul.w	r3, r1, r3
 800b76a:	441a      	add	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b786:	3b01      	subs	r3, #1
 800b788:	68f9      	ldr	r1, [r7, #12]
 800b78a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b78c:	fb01 f303 	mul.w	r3, r1, r3
 800b790:	441a      	add	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	22ff      	movs	r2, #255	; 0xff
 800b79a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	22ff      	movs	r2, #255	; 0xff
 800b7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d114      	bne.n	800b7d6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d01a      	beq.n	800b7ea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	3310      	adds	r3, #16
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f001 f9cd 	bl	800cb58 <xTaskRemoveFromEventList>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d012      	beq.n	800b7ea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <xQueueGenericReset+0xd0>)
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	f3bf 8f4f 	dsb	sy
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	e009      	b.n	800b7ea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3310      	adds	r3, #16
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff fef0 	bl	800b5c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3324      	adds	r3, #36	; 0x24
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7ff feeb 	bl	800b5c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b7ea:	f002 f9db 	bl	800dba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b7ee:	2301      	movs	r3, #1
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	e000ed04 	.word	0xe000ed04

0800b7fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b08e      	sub	sp, #56	; 0x38
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10c      	bne.n	800b82a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	b672      	cpsid	i
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	b662      	cpsie	i
 800b824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10c      	bne.n	800b84a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	b672      	cpsid	i
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	b662      	cpsie	i
 800b844:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <xQueueGenericCreateStatic+0x5a>
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <xQueueGenericCreateStatic+0x5e>
 800b856:	2301      	movs	r3, #1
 800b858:	e000      	b.n	800b85c <xQueueGenericCreateStatic+0x60>
 800b85a:	2300      	movs	r3, #0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10c      	bne.n	800b87a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	b672      	cpsid	i
 800b866:	f383 8811 	msr	BASEPRI, r3
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	f3bf 8f4f 	dsb	sy
 800b872:	b662      	cpsie	i
 800b874:	623b      	str	r3, [r7, #32]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <xQueueGenericCreateStatic+0x8a>
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <xQueueGenericCreateStatic+0x8e>
 800b886:	2301      	movs	r3, #1
 800b888:	e000      	b.n	800b88c <xQueueGenericCreateStatic+0x90>
 800b88a:	2300      	movs	r3, #0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10c      	bne.n	800b8aa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	b672      	cpsid	i
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	b662      	cpsie	i
 800b8a4:	61fb      	str	r3, [r7, #28]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8aa:	2350      	movs	r3, #80	; 0x50
 800b8ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	2b50      	cmp	r3, #80	; 0x50
 800b8b2:	d00c      	beq.n	800b8ce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	b672      	cpsid	i
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	b662      	cpsie	i
 800b8c8:	61bb      	str	r3, [r7, #24]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b8ce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d00d      	beq.n	800b8f6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8dc:	2201      	movs	r2, #1
 800b8de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8e2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	68b9      	ldr	r1, [r7, #8]
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f000 f805 	bl	800b900 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3730      	adds	r7, #48	; 0x30
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d103      	bne.n	800b91c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	69ba      	ldr	r2, [r7, #24]
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e002      	b.n	800b922 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b92e:	2101      	movs	r1, #1
 800b930:	69b8      	ldr	r0, [r7, #24]
 800b932:	f7ff fef9 	bl	800b728 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08e      	sub	sp, #56	; 0x38
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b956:	2300      	movs	r3, #0
 800b958:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10c      	bne.n	800b97e <xQueueGenericSend+0x36>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	b672      	cpsid	i
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	b662      	cpsie	i
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d103      	bne.n	800b98c <xQueueGenericSend+0x44>
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <xQueueGenericSend+0x48>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e000      	b.n	800b992 <xQueueGenericSend+0x4a>
 800b990:	2300      	movs	r3, #0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10c      	bne.n	800b9b0 <xQueueGenericSend+0x68>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	b672      	cpsid	i
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	b662      	cpsie	i
 800b9aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d103      	bne.n	800b9be <xQueueGenericSend+0x76>
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d101      	bne.n	800b9c2 <xQueueGenericSend+0x7a>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e000      	b.n	800b9c4 <xQueueGenericSend+0x7c>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10c      	bne.n	800b9e2 <xQueueGenericSend+0x9a>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	b672      	cpsid	i
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	b662      	cpsie	i
 800b9dc:	623b      	str	r3, [r7, #32]
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9e2:	f001 fa7f 	bl	800cee4 <xTaskGetSchedulerState>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d102      	bne.n	800b9f2 <xQueueGenericSend+0xaa>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d101      	bne.n	800b9f6 <xQueueGenericSend+0xae>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <xQueueGenericSend+0xb0>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10c      	bne.n	800ba16 <xQueueGenericSend+0xce>
	__asm volatile
 800b9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba00:	b672      	cpsid	i
 800ba02:	f383 8811 	msr	BASEPRI, r3
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	b662      	cpsie	i
 800ba10:	61fb      	str	r3, [r7, #28]
}
 800ba12:	bf00      	nop
 800ba14:	e7fe      	b.n	800ba14 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba16:	f002 f891 	bl	800db3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d302      	bcc.n	800ba2c <xQueueGenericSend+0xe4>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	d129      	bne.n	800ba80 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba2c:	683a      	ldr	r2, [r7, #0]
 800ba2e:	68b9      	ldr	r1, [r7, #8]
 800ba30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba32:	f000 fa15 	bl	800be60 <prvCopyDataToQueue>
 800ba36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d010      	beq.n	800ba62 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	3324      	adds	r3, #36	; 0x24
 800ba44:	4618      	mov	r0, r3
 800ba46:	f001 f887 	bl	800cb58 <xTaskRemoveFromEventList>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d013      	beq.n	800ba78 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ba50:	4b3f      	ldr	r3, [pc, #252]	; (800bb50 <xQueueGenericSend+0x208>)
 800ba52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	e00a      	b.n	800ba78 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d007      	beq.n	800ba78 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ba68:	4b39      	ldr	r3, [pc, #228]	; (800bb50 <xQueueGenericSend+0x208>)
 800ba6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba6e:	601a      	str	r2, [r3, #0]
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ba78:	f002 f894 	bl	800dba4 <vPortExitCritical>
				return pdPASS;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e063      	b.n	800bb48 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba86:	f002 f88d 	bl	800dba4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e05c      	b.n	800bb48 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d106      	bne.n	800baa2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba94:	f107 0314 	add.w	r3, r7, #20
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f001 f8c3 	bl	800cc24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800baa2:	f002 f87f 	bl	800dba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800baa6:	f000 fe17 	bl	800c6d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800baaa:	f002 f847 	bl	800db3c <vPortEnterCritical>
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baba:	d103      	bne.n	800bac4 <xQueueGenericSend+0x17c>
 800babc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baca:	b25b      	sxtb	r3, r3
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d103      	bne.n	800bada <xQueueGenericSend+0x192>
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bada:	f002 f863 	bl	800dba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bade:	1d3a      	adds	r2, r7, #4
 800bae0:	f107 0314 	add.w	r3, r7, #20
 800bae4:	4611      	mov	r1, r2
 800bae6:	4618      	mov	r0, r3
 800bae8:	f001 f8b2 	bl	800cc50 <xTaskCheckForTimeOut>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d124      	bne.n	800bb3c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800baf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800baf4:	f000 faac 	bl	800c050 <prvIsQueueFull>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d018      	beq.n	800bb30 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	3310      	adds	r3, #16
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	4611      	mov	r1, r2
 800bb06:	4618      	mov	r0, r3
 800bb08:	f000 ffd2 	bl	800cab0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bb0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb0e:	f000 fa37 	bl	800bf80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bb12:	f000 fdef 	bl	800c6f4 <xTaskResumeAll>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f47f af7c 	bne.w	800ba16 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <xQueueGenericSend+0x208>)
 800bb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	f3bf 8f4f 	dsb	sy
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	e772      	b.n	800ba16 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bb30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb32:	f000 fa25 	bl	800bf80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb36:	f000 fddd 	bl	800c6f4 <xTaskResumeAll>
 800bb3a:	e76c      	b.n	800ba16 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb3e:	f000 fa1f 	bl	800bf80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb42:	f000 fdd7 	bl	800c6f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bb46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3738      	adds	r7, #56	; 0x38
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	e000ed04 	.word	0xe000ed04

0800bb54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08e      	sub	sp, #56	; 0x38
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10c      	bne.n	800bb86 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	b672      	cpsid	i
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	b662      	cpsie	i
 800bb80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d103      	bne.n	800bb94 <xQueueGenericSendFromISR+0x40>
 800bb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <xQueueGenericSendFromISR+0x44>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <xQueueGenericSendFromISR+0x46>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	b672      	cpsid	i
 800bba4:	f383 8811 	msr	BASEPRI, r3
 800bba8:	f3bf 8f6f 	isb	sy
 800bbac:	f3bf 8f4f 	dsb	sy
 800bbb0:	b662      	cpsie	i
 800bbb2:	623b      	str	r3, [r7, #32]
}
 800bbb4:	bf00      	nop
 800bbb6:	e7fe      	b.n	800bbb6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	d103      	bne.n	800bbc6 <xQueueGenericSendFromISR+0x72>
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d101      	bne.n	800bbca <xQueueGenericSendFromISR+0x76>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <xQueueGenericSendFromISR+0x78>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d10c      	bne.n	800bbea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800bbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd4:	b672      	cpsid	i
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	b662      	cpsie	i
 800bbe4:	61fb      	str	r3, [r7, #28]
}
 800bbe6:	bf00      	nop
 800bbe8:	e7fe      	b.n	800bbe8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbea:	f002 f88f 	bl	800dd0c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bbee:	f3ef 8211 	mrs	r2, BASEPRI
 800bbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf6:	b672      	cpsid	i
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	b662      	cpsie	i
 800bc06:	61ba      	str	r2, [r7, #24]
 800bc08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bc0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d302      	bcc.n	800bc20 <xQueueGenericSendFromISR+0xcc>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d12c      	bne.n	800bc7a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc30:	f000 f916 	bl	800be60 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bc34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bc38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3c:	d112      	bne.n	800bc64 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d016      	beq.n	800bc74 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	3324      	adds	r3, #36	; 0x24
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f000 ff84 	bl	800cb58 <xTaskRemoveFromEventList>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00e      	beq.n	800bc74 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d00b      	beq.n	800bc74 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e007      	b.n	800bc74 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bc64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bc68:	3301      	adds	r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	b25a      	sxtb	r2, r3
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bc74:	2301      	movs	r3, #1
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bc78:	e001      	b.n	800bc7e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bc88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3738      	adds	r7, #56	; 0x38
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b08c      	sub	sp, #48	; 0x30
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10c      	bne.n	800bcc8 <xQueueReceive+0x34>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	b672      	cpsid	i
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	b662      	cpsie	i
 800bcc2:	623b      	str	r3, [r7, #32]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d103      	bne.n	800bcd6 <xQueueReceive+0x42>
 800bcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <xQueueReceive+0x46>
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e000      	b.n	800bcdc <xQueueReceive+0x48>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10c      	bne.n	800bcfa <xQueueReceive+0x66>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	b672      	cpsid	i
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	b662      	cpsie	i
 800bcf4:	61fb      	str	r3, [r7, #28]
}
 800bcf6:	bf00      	nop
 800bcf8:	e7fe      	b.n	800bcf8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bcfa:	f001 f8f3 	bl	800cee4 <xTaskGetSchedulerState>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <xQueueReceive+0x76>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <xQueueReceive+0x7a>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e000      	b.n	800bd10 <xQueueReceive+0x7c>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d10c      	bne.n	800bd2e <xQueueReceive+0x9a>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	b672      	cpsid	i
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	b662      	cpsie	i
 800bd28:	61bb      	str	r3, [r7, #24]
}
 800bd2a:	bf00      	nop
 800bd2c:	e7fe      	b.n	800bd2c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd2e:	f001 ff05 	bl	800db3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d01f      	beq.n	800bd7e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd42:	f000 f8f7 	bl	800bf34 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	1e5a      	subs	r2, r3, #1
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00f      	beq.n	800bd76 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	3310      	adds	r3, #16
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fefc 	bl	800cb58 <xTaskRemoveFromEventList>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d007      	beq.n	800bd76 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bd66:	4b3d      	ldr	r3, [pc, #244]	; (800be5c <xQueueReceive+0x1c8>)
 800bd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6c:	601a      	str	r2, [r3, #0]
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bd76:	f001 ff15 	bl	800dba4 <vPortExitCritical>
				return pdPASS;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e069      	b.n	800be52 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d103      	bne.n	800bd8c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd84:	f001 ff0e 	bl	800dba4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e062      	b.n	800be52 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd92:	f107 0310 	add.w	r3, r7, #16
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 ff44 	bl	800cc24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bda0:	f001 ff00 	bl	800dba4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bda4:	f000 fc98 	bl	800c6d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bda8:	f001 fec8 	bl	800db3c <vPortEnterCritical>
 800bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb8:	d103      	bne.n	800bdc2 <xQueueReceive+0x12e>
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdc8:	b25b      	sxtb	r3, r3
 800bdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdce:	d103      	bne.n	800bdd8 <xQueueReceive+0x144>
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdd8:	f001 fee4 	bl	800dba4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bddc:	1d3a      	adds	r2, r7, #4
 800bdde:	f107 0310 	add.w	r3, r7, #16
 800bde2:	4611      	mov	r1, r2
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 ff33 	bl	800cc50 <xTaskCheckForTimeOut>
 800bdea:	4603      	mov	r3, r0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d123      	bne.n	800be38 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdf2:	f000 f917 	bl	800c024 <prvIsQueueEmpty>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d017      	beq.n	800be2c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	3324      	adds	r3, #36	; 0x24
 800be00:	687a      	ldr	r2, [r7, #4]
 800be02:	4611      	mov	r1, r2
 800be04:	4618      	mov	r0, r3
 800be06:	f000 fe53 	bl	800cab0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be0c:	f000 f8b8 	bl	800bf80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be10:	f000 fc70 	bl	800c6f4 <xTaskResumeAll>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d189      	bne.n	800bd2e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800be1a:	4b10      	ldr	r3, [pc, #64]	; (800be5c <xQueueReceive+0x1c8>)
 800be1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	e780      	b.n	800bd2e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be2e:	f000 f8a7 	bl	800bf80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be32:	f000 fc5f 	bl	800c6f4 <xTaskResumeAll>
 800be36:	e77a      	b.n	800bd2e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be3a:	f000 f8a1 	bl	800bf80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be3e:	f000 fc59 	bl	800c6f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be44:	f000 f8ee 	bl	800c024 <prvIsQueueEmpty>
 800be48:	4603      	mov	r3, r0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f43f af6f 	beq.w	800bd2e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800be50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800be52:	4618      	mov	r0, r3
 800be54:	3730      	adds	r7, #48	; 0x30
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	e000ed04 	.word	0xe000ed04

0800be60 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800be6c:	2300      	movs	r3, #0
 800be6e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be74:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10d      	bne.n	800be9a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d14d      	bne.n	800bf22 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f001 f848 	bl	800cf20 <xTaskPriorityDisinherit>
 800be90:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2200      	movs	r2, #0
 800be96:	609a      	str	r2, [r3, #8]
 800be98:	e043      	b.n	800bf22 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d119      	bne.n	800bed4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6858      	ldr	r0, [r3, #4]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	461a      	mov	r2, r3
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	f002 fb70 	bl	800e590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	685a      	ldr	r2, [r3, #4]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb8:	441a      	add	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d32b      	bcc.n	800bf22 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681a      	ldr	r2, [r3, #0]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	605a      	str	r2, [r3, #4]
 800bed2:	e026      	b.n	800bf22 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	68d8      	ldr	r0, [r3, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bedc:	461a      	mov	r2, r3
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	f002 fb56 	bl	800e590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	68da      	ldr	r2, [r3, #12]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beec:	425b      	negs	r3, r3
 800beee:	441a      	add	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d207      	bcs.n	800bf10 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689a      	ldr	r2, [r3, #8]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf08:	425b      	negs	r3, r3
 800bf0a:	441a      	add	r2, r3
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d105      	bne.n	800bf22 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d002      	beq.n	800bf22 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	1c5a      	adds	r2, r3, #1
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf2a:	697b      	ldr	r3, [r7, #20]
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3718      	adds	r7, #24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b082      	sub	sp, #8
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d018      	beq.n	800bf78 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68da      	ldr	r2, [r3, #12]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4e:	441a      	add	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68da      	ldr	r2, [r3, #12]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d303      	bcc.n	800bf68 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	68d9      	ldr	r1, [r3, #12]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	461a      	mov	r2, r3
 800bf72:	6838      	ldr	r0, [r7, #0]
 800bf74:	f002 fb0c 	bl	800e590 <memcpy>
	}
}
 800bf78:	bf00      	nop
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bf88:	f001 fdd8 	bl	800db3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf92:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf94:	e011      	b.n	800bfba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d012      	beq.n	800bfc4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	3324      	adds	r3, #36	; 0x24
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 fdd8 	bl	800cb58 <xTaskRemoveFromEventList>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bfae:	f000 feb5 	bl	800cd1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bfba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dce9      	bgt.n	800bf96 <prvUnlockQueue+0x16>
 800bfc2:	e000      	b.n	800bfc6 <prvUnlockQueue+0x46>
					break;
 800bfc4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	22ff      	movs	r2, #255	; 0xff
 800bfca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bfce:	f001 fde9 	bl	800dba4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bfd2:	f001 fdb3 	bl	800db3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfdc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bfde:	e011      	b.n	800c004 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d012      	beq.n	800c00e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	3310      	adds	r3, #16
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 fdb3 	bl	800cb58 <xTaskRemoveFromEventList>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bff8:	f000 fe90 	bl	800cd1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bffc:	7bbb      	ldrb	r3, [r7, #14]
 800bffe:	3b01      	subs	r3, #1
 800c000:	b2db      	uxtb	r3, r3
 800c002:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c004:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	dce9      	bgt.n	800bfe0 <prvUnlockQueue+0x60>
 800c00c:	e000      	b.n	800c010 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c00e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	22ff      	movs	r2, #255	; 0xff
 800c014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c018:	f001 fdc4 	bl	800dba4 <vPortExitCritical>
}
 800c01c:	bf00      	nop
 800c01e:	3710      	adds	r7, #16
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c02c:	f001 fd86 	bl	800db3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c038:	2301      	movs	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]
 800c03c:	e001      	b.n	800c042 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c042:	f001 fdaf 	bl	800dba4 <vPortExitCritical>

	return xReturn;
 800c046:	68fb      	ldr	r3, [r7, #12]
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3710      	adds	r7, #16
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c058:	f001 fd70 	bl	800db3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c064:	429a      	cmp	r2, r3
 800c066:	d102      	bne.n	800c06e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c068:	2301      	movs	r3, #1
 800c06a:	60fb      	str	r3, [r7, #12]
 800c06c:	e001      	b.n	800c072 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c072:	f001 fd97 	bl	800dba4 <vPortExitCritical>

	return xReturn;
 800c076:	68fb      	ldr	r3, [r7, #12]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3710      	adds	r7, #16
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	e014      	b.n	800c0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c090:	4a0f      	ldr	r2, [pc, #60]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10b      	bne.n	800c0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c09c:	490c      	ldr	r1, [pc, #48]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	683a      	ldr	r2, [r7, #0]
 800c0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c0a6:	4a0a      	ldr	r2, [pc, #40]	; (800c0d0 <vQueueAddToRegistry+0x50>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	4413      	add	r3, r2
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c0b2:	e006      	b.n	800c0c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	60fb      	str	r3, [r7, #12]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2b07      	cmp	r3, #7
 800c0be:	d9e7      	bls.n	800c090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c0c0:	bf00      	nop
 800c0c2:	bf00      	nop
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
 800c0ce:	bf00      	nop
 800c0d0:	20005208 	.word	0x20005208

0800c0d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b086      	sub	sp, #24
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c0e4:	f001 fd2a 	bl	800db3c <vPortEnterCritical>
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0ee:	b25b      	sxtb	r3, r3
 800c0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f4:	d103      	bne.n	800c0fe <vQueueWaitForMessageRestricted+0x2a>
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c104:	b25b      	sxtb	r3, r3
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d103      	bne.n	800c114 <vQueueWaitForMessageRestricted+0x40>
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2200      	movs	r2, #0
 800c110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c114:	f001 fd46 	bl	800dba4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d106      	bne.n	800c12e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3324      	adds	r3, #36	; 0x24
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	68b9      	ldr	r1, [r7, #8]
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fce7 	bl	800cafc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c12e:	6978      	ldr	r0, [r7, #20]
 800c130:	f7ff ff26 	bl	800bf80 <prvUnlockQueue>
	}
 800c134:	bf00      	nop
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08e      	sub	sp, #56	; 0x38
 800c140:	af04      	add	r7, sp, #16
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d10c      	bne.n	800c16a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	b672      	cpsid	i
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	b662      	cpsie	i
 800c164:	623b      	str	r3, [r7, #32]
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10c      	bne.n	800c18a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	b672      	cpsid	i
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	b662      	cpsie	i
 800c184:	61fb      	str	r3, [r7, #28]
}
 800c186:	bf00      	nop
 800c188:	e7fe      	b.n	800c188 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c18a:	235c      	movs	r3, #92	; 0x5c
 800c18c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2b5c      	cmp	r3, #92	; 0x5c
 800c192:	d00c      	beq.n	800c1ae <xTaskCreateStatic+0x72>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	b672      	cpsid	i
 800c19a:	f383 8811 	msr	BASEPRI, r3
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f3bf 8f4f 	dsb	sy
 800c1a6:	b662      	cpsie	i
 800c1a8:	61bb      	str	r3, [r7, #24]
}
 800c1aa:	bf00      	nop
 800c1ac:	e7fe      	b.n	800c1ac <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c1ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d01e      	beq.n	800c1f4 <xTaskCreateStatic+0xb8>
 800c1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d01b      	beq.n	800c1f4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	2202      	movs	r2, #2
 800c1ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	9303      	str	r3, [sp, #12]
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	9302      	str	r3, [sp, #8]
 800c1d6:	f107 0314 	add.w	r3, r7, #20
 800c1da:	9301      	str	r3, [sp, #4]
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	68b9      	ldr	r1, [r7, #8]
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f000 f850 	bl	800c28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c1ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c1ee:	f000 f8df 	bl	800c3b0 <prvAddNewTaskToReadyList>
 800c1f2:	e001      	b.n	800c1f8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c1f8:	697b      	ldr	r3, [r7, #20]
	}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3728      	adds	r7, #40	; 0x28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c202:	b580      	push	{r7, lr}
 800c204:	b08c      	sub	sp, #48	; 0x30
 800c206:	af04      	add	r7, sp, #16
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	60b9      	str	r1, [r7, #8]
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c212:	88fb      	ldrh	r3, [r7, #6]
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4618      	mov	r0, r3
 800c218:	f001 fdbc 	bl	800dd94 <pvPortMalloc>
 800c21c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d00e      	beq.n	800c242 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c224:	205c      	movs	r0, #92	; 0x5c
 800c226:	f001 fdb5 	bl	800dd94 <pvPortMalloc>
 800c22a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	631a      	str	r2, [r3, #48]	; 0x30
 800c238:	e005      	b.n	800c246 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c23a:	6978      	ldr	r0, [r7, #20]
 800c23c:	f001 fe74 	bl	800df28 <vPortFree>
 800c240:	e001      	b.n	800c246 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c242:	2300      	movs	r3, #0
 800c244:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d017      	beq.n	800c27c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c254:	88fa      	ldrh	r2, [r7, #6]
 800c256:	2300      	movs	r3, #0
 800c258:	9303      	str	r3, [sp, #12]
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	9302      	str	r3, [sp, #8]
 800c25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c260:	9301      	str	r3, [sp, #4]
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	68f8      	ldr	r0, [r7, #12]
 800c26c:	f000 f80e 	bl	800c28c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c270:	69f8      	ldr	r0, [r7, #28]
 800c272:	f000 f89d 	bl	800c3b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c276:	2301      	movs	r3, #1
 800c278:	61bb      	str	r3, [r7, #24]
 800c27a:	e002      	b.n	800c282 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c27c:	f04f 33ff 	mov.w	r3, #4294967295
 800c280:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c282:	69bb      	ldr	r3, [r7, #24]
	}
 800c284:	4618      	mov	r0, r3
 800c286:	3720      	adds	r7, #32
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b088      	sub	sp, #32
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	21a5      	movs	r1, #165	; 0xa5
 800c2a6:	f002 f981 	bl	800e5ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2ae:	6879      	ldr	r1, [r7, #4]
 800c2b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c2b4:	440b      	add	r3, r1
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	f023 0307 	bic.w	r3, r3, #7
 800c2c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	f003 0307 	and.w	r3, r3, #7
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d00c      	beq.n	800c2e8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d2:	b672      	cpsid	i
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	b662      	cpsie	i
 800c2e2:	617b      	str	r3, [r7, #20]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01f      	beq.n	800c32e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	61fb      	str	r3, [r7, #28]
 800c2f2:	e012      	b.n	800c31a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c2f4:	68ba      	ldr	r2, [r7, #8]
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	7819      	ldrb	r1, [r3, #0]
 800c2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	4413      	add	r3, r2
 800c302:	3334      	adds	r3, #52	; 0x34
 800c304:	460a      	mov	r2, r1
 800c306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	4413      	add	r3, r2
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d006      	beq.n	800c322 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	3301      	adds	r3, #1
 800c318:	61fb      	str	r3, [r7, #28]
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b0f      	cmp	r3, #15
 800c31e:	d9e9      	bls.n	800c2f4 <prvInitialiseNewTask+0x68>
 800c320:	e000      	b.n	800c324 <prvInitialiseNewTask+0x98>
			{
				break;
 800c322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	2200      	movs	r2, #0
 800c328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c32c:	e003      	b.n	800c336 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	2200      	movs	r2, #0
 800c332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c338:	2b37      	cmp	r3, #55	; 0x37
 800c33a:	d901      	bls.n	800c340 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c33c:	2337      	movs	r3, #55	; 0x37
 800c33e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c34a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c34e:	2200      	movs	r2, #0
 800c350:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c354:	3304      	adds	r3, #4
 800c356:	4618      	mov	r0, r3
 800c358:	f7ff f952 	bl	800b600 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	3318      	adds	r3, #24
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff f94d 	bl	800b600 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c36a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c37a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	2200      	movs	r2, #0
 800c380:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	68f9      	ldr	r1, [r7, #12]
 800c38e:	69b8      	ldr	r0, [r7, #24]
 800c390:	f001 fac8 	bl	800d924 <pxPortInitialiseStack>
 800c394:	4602      	mov	r2, r0
 800c396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c398:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d002      	beq.n	800c3a6 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3a6:	bf00      	nop
 800c3a8:	3720      	adds	r7, #32
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
	...

0800c3b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c3b8:	f001 fbc0 	bl	800db3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c3bc:	4b2d      	ldr	r3, [pc, #180]	; (800c474 <prvAddNewTaskToReadyList+0xc4>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	4a2c      	ldr	r2, [pc, #176]	; (800c474 <prvAddNewTaskToReadyList+0xc4>)
 800c3c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c3c6:	4b2c      	ldr	r3, [pc, #176]	; (800c478 <prvAddNewTaskToReadyList+0xc8>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d109      	bne.n	800c3e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3ce:	4a2a      	ldr	r2, [pc, #168]	; (800c478 <prvAddNewTaskToReadyList+0xc8>)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3d4:	4b27      	ldr	r3, [pc, #156]	; (800c474 <prvAddNewTaskToReadyList+0xc4>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d110      	bne.n	800c3fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c3dc:	f000 fcc2 	bl	800cd64 <prvInitialiseTaskLists>
 800c3e0:	e00d      	b.n	800c3fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c3e2:	4b26      	ldr	r3, [pc, #152]	; (800c47c <prvAddNewTaskToReadyList+0xcc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d109      	bne.n	800c3fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c3ea:	4b23      	ldr	r3, [pc, #140]	; (800c478 <prvAddNewTaskToReadyList+0xc8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d802      	bhi.n	800c3fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c3f8:	4a1f      	ldr	r2, [pc, #124]	; (800c478 <prvAddNewTaskToReadyList+0xc8>)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c3fe:	4b20      	ldr	r3, [pc, #128]	; (800c480 <prvAddNewTaskToReadyList+0xd0>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	3301      	adds	r3, #1
 800c404:	4a1e      	ldr	r2, [pc, #120]	; (800c480 <prvAddNewTaskToReadyList+0xd0>)
 800c406:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c408:	4b1d      	ldr	r3, [pc, #116]	; (800c480 <prvAddNewTaskToReadyList+0xd0>)
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c414:	4b1b      	ldr	r3, [pc, #108]	; (800c484 <prvAddNewTaskToReadyList+0xd4>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d903      	bls.n	800c424 <prvAddNewTaskToReadyList+0x74>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a18      	ldr	r2, [pc, #96]	; (800c484 <prvAddNewTaskToReadyList+0xd4>)
 800c422:	6013      	str	r3, [r2, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c428:	4613      	mov	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4413      	add	r3, r2
 800c42e:	009b      	lsls	r3, r3, #2
 800c430:	4a15      	ldr	r2, [pc, #84]	; (800c488 <prvAddNewTaskToReadyList+0xd8>)
 800c432:	441a      	add	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	3304      	adds	r3, #4
 800c438:	4619      	mov	r1, r3
 800c43a:	4610      	mov	r0, r2
 800c43c:	f7ff f8ed 	bl	800b61a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c440:	f001 fbb0 	bl	800dba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c444:	4b0d      	ldr	r3, [pc, #52]	; (800c47c <prvAddNewTaskToReadyList+0xcc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00e      	beq.n	800c46a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <prvAddNewTaskToReadyList+0xc8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c456:	429a      	cmp	r2, r3
 800c458:	d207      	bcs.n	800c46a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c45a:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <prvAddNewTaskToReadyList+0xdc>)
 800c45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c460:	601a      	str	r2, [r3, #0]
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c46a:	bf00      	nop
 800c46c:	3708      	adds	r7, #8
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20000dac 	.word	0x20000dac
 800c478:	200008d8 	.word	0x200008d8
 800c47c:	20000db8 	.word	0x20000db8
 800c480:	20000dc8 	.word	0x20000dc8
 800c484:	20000db4 	.word	0x20000db4
 800c488:	200008dc 	.word	0x200008dc
 800c48c:	e000ed04 	.word	0xe000ed04

0800c490 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08a      	sub	sp, #40	; 0x28
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c49a:	2300      	movs	r3, #0
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10c      	bne.n	800c4be <vTaskDelayUntil+0x2e>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	b672      	cpsid	i
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	b662      	cpsie	i
 800c4b8:	617b      	str	r3, [r7, #20]
}
 800c4ba:	bf00      	nop
 800c4bc:	e7fe      	b.n	800c4bc <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10c      	bne.n	800c4de <vTaskDelayUntil+0x4e>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	b672      	cpsid	i
 800c4ca:	f383 8811 	msr	BASEPRI, r3
 800c4ce:	f3bf 8f6f 	isb	sy
 800c4d2:	f3bf 8f4f 	dsb	sy
 800c4d6:	b662      	cpsie	i
 800c4d8:	613b      	str	r3, [r7, #16]
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <vTaskDelayUntil+0xfc>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00c      	beq.n	800c500 <vTaskDelayUntil+0x70>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	b672      	cpsid	i
 800c4ec:	f383 8811 	msr	BASEPRI, r3
 800c4f0:	f3bf 8f6f 	isb	sy
 800c4f4:	f3bf 8f4f 	dsb	sy
 800c4f8:	b662      	cpsie	i
 800c4fa:	60fb      	str	r3, [r7, #12]
}
 800c4fc:	bf00      	nop
 800c4fe:	e7fe      	b.n	800c4fe <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c500:	f000 f8ea 	bl	800c6d8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c504:	4b22      	ldr	r3, [pc, #136]	; (800c590 <vTaskDelayUntil+0x100>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	683a      	ldr	r2, [r7, #0]
 800c510:	4413      	add	r3, r2
 800c512:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6a3a      	ldr	r2, [r7, #32]
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d20b      	bcs.n	800c536 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	69fa      	ldr	r2, [r7, #28]
 800c524:	429a      	cmp	r2, r3
 800c526:	d211      	bcs.n	800c54c <vTaskDelayUntil+0xbc>
 800c528:	69fa      	ldr	r2, [r7, #28]
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d90d      	bls.n	800c54c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c530:	2301      	movs	r3, #1
 800c532:	627b      	str	r3, [r7, #36]	; 0x24
 800c534:	e00a      	b.n	800c54c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69fa      	ldr	r2, [r7, #28]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d303      	bcc.n	800c548 <vTaskDelayUntil+0xb8>
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	6a3b      	ldr	r3, [r7, #32]
 800c544:	429a      	cmp	r2, r3
 800c546:	d901      	bls.n	800c54c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c548:	2301      	movs	r3, #1
 800c54a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	69fa      	ldr	r2, [r7, #28]
 800c550:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	2100      	movs	r1, #0
 800c560:	4618      	mov	r0, r3
 800c562:	f000 fe2f 	bl	800d1c4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c566:	f000 f8c5 	bl	800c6f4 <xTaskResumeAll>
 800c56a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d107      	bne.n	800c582 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c572:	4b08      	ldr	r3, [pc, #32]	; (800c594 <vTaskDelayUntil+0x104>)
 800c574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c578:	601a      	str	r2, [r3, #0]
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c582:	bf00      	nop
 800c584:	3728      	adds	r7, #40	; 0x28
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000dd4 	.word	0x20000dd4
 800c590:	20000db0 	.word	0x20000db0
 800c594:	e000ed04 	.word	0xe000ed04

0800c598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d019      	beq.n	800c5de <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c5aa:	4b14      	ldr	r3, [pc, #80]	; (800c5fc <vTaskDelay+0x64>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00c      	beq.n	800c5cc <vTaskDelay+0x34>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b6:	b672      	cpsid	i
 800c5b8:	f383 8811 	msr	BASEPRI, r3
 800c5bc:	f3bf 8f6f 	isb	sy
 800c5c0:	f3bf 8f4f 	dsb	sy
 800c5c4:	b662      	cpsie	i
 800c5c6:	60bb      	str	r3, [r7, #8]
}
 800c5c8:	bf00      	nop
 800c5ca:	e7fe      	b.n	800c5ca <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c5cc:	f000 f884 	bl	800c6d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fdf6 	bl	800d1c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c5d8:	f000 f88c 	bl	800c6f4 <xTaskResumeAll>
 800c5dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d107      	bne.n	800c5f4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c5e4:	4b06      	ldr	r3, [pc, #24]	; (800c600 <vTaskDelay+0x68>)
 800c5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ea:	601a      	str	r2, [r3, #0]
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c5f4:	bf00      	nop
 800c5f6:	3710      	adds	r7, #16
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	20000dd4 	.word	0x20000dd4
 800c600:	e000ed04 	.word	0xe000ed04

0800c604 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b08a      	sub	sp, #40	; 0x28
 800c608:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c60a:	2300      	movs	r3, #0
 800c60c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c612:	463a      	mov	r2, r7
 800c614:	1d39      	adds	r1, r7, #4
 800c616:	f107 0308 	add.w	r3, r7, #8
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7fe ff9c 	bl	800b558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c620:	6839      	ldr	r1, [r7, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	68ba      	ldr	r2, [r7, #8]
 800c626:	9202      	str	r2, [sp, #8]
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	2300      	movs	r3, #0
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	2300      	movs	r3, #0
 800c630:	460a      	mov	r2, r1
 800c632:	4923      	ldr	r1, [pc, #140]	; (800c6c0 <vTaskStartScheduler+0xbc>)
 800c634:	4823      	ldr	r0, [pc, #140]	; (800c6c4 <vTaskStartScheduler+0xc0>)
 800c636:	f7ff fd81 	bl	800c13c <xTaskCreateStatic>
 800c63a:	4603      	mov	r3, r0
 800c63c:	4a22      	ldr	r2, [pc, #136]	; (800c6c8 <vTaskStartScheduler+0xc4>)
 800c63e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c640:	4b21      	ldr	r3, [pc, #132]	; (800c6c8 <vTaskStartScheduler+0xc4>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c648:	2301      	movs	r3, #1
 800c64a:	617b      	str	r3, [r7, #20]
 800c64c:	e001      	b.n	800c652 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c64e:	2300      	movs	r3, #0
 800c650:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d102      	bne.n	800c65e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c658:	f000 fe08 	bl	800d26c <xTimerCreateTimerTask>
 800c65c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d118      	bne.n	800c696 <vTaskStartScheduler+0x92>
	__asm volatile
 800c664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c668:	b672      	cpsid	i
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	b662      	cpsie	i
 800c678:	613b      	str	r3, [r7, #16]
}
 800c67a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c67c:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <vTaskStartScheduler+0xc8>)
 800c67e:	f04f 32ff 	mov.w	r2, #4294967295
 800c682:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c684:	4b12      	ldr	r3, [pc, #72]	; (800c6d0 <vTaskStartScheduler+0xcc>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c68a:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <vTaskStartScheduler+0xd0>)
 800c68c:	2200      	movs	r2, #0
 800c68e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c690:	f001 f9d6 	bl	800da40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c694:	e010      	b.n	800c6b8 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69c:	d10c      	bne.n	800c6b8 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a2:	b672      	cpsid	i
 800c6a4:	f383 8811 	msr	BASEPRI, r3
 800c6a8:	f3bf 8f6f 	isb	sy
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	b662      	cpsie	i
 800c6b2:	60fb      	str	r3, [r7, #12]
}
 800c6b4:	bf00      	nop
 800c6b6:	e7fe      	b.n	800c6b6 <vTaskStartScheduler+0xb2>
}
 800c6b8:	bf00      	nop
 800c6ba:	3718      	adds	r7, #24
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	08012260 	.word	0x08012260
 800c6c4:	0800cd35 	.word	0x0800cd35
 800c6c8:	20000dd0 	.word	0x20000dd0
 800c6cc:	20000dcc 	.word	0x20000dcc
 800c6d0:	20000db8 	.word	0x20000db8
 800c6d4:	20000db0 	.word	0x20000db0

0800c6d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c6d8:	b480      	push	{r7}
 800c6da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c6dc:	4b04      	ldr	r3, [pc, #16]	; (800c6f0 <vTaskSuspendAll+0x18>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	4a03      	ldr	r2, [pc, #12]	; (800c6f0 <vTaskSuspendAll+0x18>)
 800c6e4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c6e6:	bf00      	nop
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr
 800c6f0:	20000dd4 	.word	0x20000dd4

0800c6f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c6fe:	2300      	movs	r3, #0
 800c700:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c702:	4b43      	ldr	r3, [pc, #268]	; (800c810 <xTaskResumeAll+0x11c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10c      	bne.n	800c724 <xTaskResumeAll+0x30>
	__asm volatile
 800c70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70e:	b672      	cpsid	i
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	b662      	cpsie	i
 800c71e:	603b      	str	r3, [r7, #0]
}
 800c720:	bf00      	nop
 800c722:	e7fe      	b.n	800c722 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c724:	f001 fa0a 	bl	800db3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c728:	4b39      	ldr	r3, [pc, #228]	; (800c810 <xTaskResumeAll+0x11c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3b01      	subs	r3, #1
 800c72e:	4a38      	ldr	r2, [pc, #224]	; (800c810 <xTaskResumeAll+0x11c>)
 800c730:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c732:	4b37      	ldr	r3, [pc, #220]	; (800c810 <xTaskResumeAll+0x11c>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d162      	bne.n	800c800 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c73a:	4b36      	ldr	r3, [pc, #216]	; (800c814 <xTaskResumeAll+0x120>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d05e      	beq.n	800c800 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c742:	e02f      	b.n	800c7a4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c744:	4b34      	ldr	r3, [pc, #208]	; (800c818 <xTaskResumeAll+0x124>)
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	3318      	adds	r3, #24
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe ffbf 	bl	800b6d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3304      	adds	r3, #4
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe ffba 	bl	800b6d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c764:	4b2d      	ldr	r3, [pc, #180]	; (800c81c <xTaskResumeAll+0x128>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d903      	bls.n	800c774 <xTaskResumeAll+0x80>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c770:	4a2a      	ldr	r2, [pc, #168]	; (800c81c <xTaskResumeAll+0x128>)
 800c772:	6013      	str	r3, [r2, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c778:	4613      	mov	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4413      	add	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4a27      	ldr	r2, [pc, #156]	; (800c820 <xTaskResumeAll+0x12c>)
 800c782:	441a      	add	r2, r3
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3304      	adds	r3, #4
 800c788:	4619      	mov	r1, r3
 800c78a:	4610      	mov	r0, r2
 800c78c:	f7fe ff45 	bl	800b61a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c794:	4b23      	ldr	r3, [pc, #140]	; (800c824 <xTaskResumeAll+0x130>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d302      	bcc.n	800c7a4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c79e:	4b22      	ldr	r3, [pc, #136]	; (800c828 <xTaskResumeAll+0x134>)
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7a4:	4b1c      	ldr	r3, [pc, #112]	; (800c818 <xTaskResumeAll+0x124>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1cb      	bne.n	800c744 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c7b2:	f000 fb77 	bl	800cea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c7b6:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <xTaskResumeAll+0x138>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d010      	beq.n	800c7e4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c7c2:	f000 f859 	bl	800c878 <xTaskIncrementTick>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c7cc:	4b16      	ldr	r3, [pc, #88]	; (800c828 <xTaskResumeAll+0x134>)
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	3b01      	subs	r3, #1
 800c7d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1f1      	bne.n	800c7c2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c7de:	4b13      	ldr	r3, [pc, #76]	; (800c82c <xTaskResumeAll+0x138>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c7e4:	4b10      	ldr	r3, [pc, #64]	; (800c828 <xTaskResumeAll+0x134>)
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d009      	beq.n	800c800 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c7f0:	4b0f      	ldr	r3, [pc, #60]	; (800c830 <xTaskResumeAll+0x13c>)
 800c7f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7f6:	601a      	str	r2, [r3, #0]
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c800:	f001 f9d0 	bl	800dba4 <vPortExitCritical>

	return xAlreadyYielded;
 800c804:	68bb      	ldr	r3, [r7, #8]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20000dd4 	.word	0x20000dd4
 800c814:	20000dac 	.word	0x20000dac
 800c818:	20000d6c 	.word	0x20000d6c
 800c81c:	20000db4 	.word	0x20000db4
 800c820:	200008dc 	.word	0x200008dc
 800c824:	200008d8 	.word	0x200008d8
 800c828:	20000dc0 	.word	0x20000dc0
 800c82c:	20000dbc 	.word	0x20000dbc
 800c830:	e000ed04 	.word	0xe000ed04

0800c834 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c83a:	4b05      	ldr	r3, [pc, #20]	; (800c850 <xTaskGetTickCount+0x1c>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c840:	687b      	ldr	r3, [r7, #4]
}
 800c842:	4618      	mov	r0, r3
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20000db0 	.word	0x20000db0

0800c854 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c85a:	f001 fa57 	bl	800dd0c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c85e:	2300      	movs	r3, #0
 800c860:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c862:	4b04      	ldr	r3, [pc, #16]	; (800c874 <xTaskGetTickCountFromISR+0x20>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c868:	683b      	ldr	r3, [r7, #0]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	20000db0 	.word	0x20000db0

0800c878 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c87e:	2300      	movs	r3, #0
 800c880:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c882:	4b50      	ldr	r3, [pc, #320]	; (800c9c4 <xTaskIncrementTick+0x14c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	f040 808b 	bne.w	800c9a2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c88c:	4b4e      	ldr	r3, [pc, #312]	; (800c9c8 <xTaskIncrementTick+0x150>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	3301      	adds	r3, #1
 800c892:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c894:	4a4c      	ldr	r2, [pc, #304]	; (800c9c8 <xTaskIncrementTick+0x150>)
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d122      	bne.n	800c8e6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c8a0:	4b4a      	ldr	r3, [pc, #296]	; (800c9cc <xTaskIncrementTick+0x154>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	b672      	cpsid	i
 800c8b0:	f383 8811 	msr	BASEPRI, r3
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	f3bf 8f4f 	dsb	sy
 800c8bc:	b662      	cpsie	i
 800c8be:	603b      	str	r3, [r7, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	e7fe      	b.n	800c8c2 <xTaskIncrementTick+0x4a>
 800c8c4:	4b41      	ldr	r3, [pc, #260]	; (800c9cc <xTaskIncrementTick+0x154>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	4b41      	ldr	r3, [pc, #260]	; (800c9d0 <xTaskIncrementTick+0x158>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a3f      	ldr	r2, [pc, #252]	; (800c9cc <xTaskIncrementTick+0x154>)
 800c8d0:	6013      	str	r3, [r2, #0]
 800c8d2:	4a3f      	ldr	r2, [pc, #252]	; (800c9d0 <xTaskIncrementTick+0x158>)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6013      	str	r3, [r2, #0]
 800c8d8:	4b3e      	ldr	r3, [pc, #248]	; (800c9d4 <xTaskIncrementTick+0x15c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	4a3d      	ldr	r2, [pc, #244]	; (800c9d4 <xTaskIncrementTick+0x15c>)
 800c8e0:	6013      	str	r3, [r2, #0]
 800c8e2:	f000 fadf 	bl	800cea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c8e6:	4b3c      	ldr	r3, [pc, #240]	; (800c9d8 <xTaskIncrementTick+0x160>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d349      	bcc.n	800c984 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c8f0:	4b36      	ldr	r3, [pc, #216]	; (800c9cc <xTaskIncrementTick+0x154>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d104      	bne.n	800c904 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8fa:	4b37      	ldr	r3, [pc, #220]	; (800c9d8 <xTaskIncrementTick+0x160>)
 800c8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800c900:	601a      	str	r2, [r3, #0]
					break;
 800c902:	e03f      	b.n	800c984 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c904:	4b31      	ldr	r3, [pc, #196]	; (800c9cc <xTaskIncrementTick+0x154>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c914:	693a      	ldr	r2, [r7, #16]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d203      	bcs.n	800c924 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c91c:	4a2e      	ldr	r2, [pc, #184]	; (800c9d8 <xTaskIncrementTick+0x160>)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c922:	e02f      	b.n	800c984 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	3304      	adds	r3, #4
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fed3 	bl	800b6d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c932:	2b00      	cmp	r3, #0
 800c934:	d004      	beq.n	800c940 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	3318      	adds	r3, #24
 800c93a:	4618      	mov	r0, r3
 800c93c:	f7fe feca 	bl	800b6d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c944:	4b25      	ldr	r3, [pc, #148]	; (800c9dc <xTaskIncrementTick+0x164>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d903      	bls.n	800c954 <xTaskIncrementTick+0xdc>
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c950:	4a22      	ldr	r2, [pc, #136]	; (800c9dc <xTaskIncrementTick+0x164>)
 800c952:	6013      	str	r3, [r2, #0]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c958:	4613      	mov	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	4a1f      	ldr	r2, [pc, #124]	; (800c9e0 <xTaskIncrementTick+0x168>)
 800c962:	441a      	add	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	3304      	adds	r3, #4
 800c968:	4619      	mov	r1, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	f7fe fe55 	bl	800b61a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c974:	4b1b      	ldr	r3, [pc, #108]	; (800c9e4 <xTaskIncrementTick+0x16c>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d3b8      	bcc.n	800c8f0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c97e:	2301      	movs	r3, #1
 800c980:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c982:	e7b5      	b.n	800c8f0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c984:	4b17      	ldr	r3, [pc, #92]	; (800c9e4 <xTaskIncrementTick+0x16c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98a:	4915      	ldr	r1, [pc, #84]	; (800c9e0 <xTaskIncrementTick+0x168>)
 800c98c:	4613      	mov	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	4413      	add	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	440b      	add	r3, r1
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2b01      	cmp	r3, #1
 800c99a:	d907      	bls.n	800c9ac <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c99c:	2301      	movs	r3, #1
 800c99e:	617b      	str	r3, [r7, #20]
 800c9a0:	e004      	b.n	800c9ac <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c9a2:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <xTaskIncrementTick+0x170>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	4a0f      	ldr	r2, [pc, #60]	; (800c9e8 <xTaskIncrementTick+0x170>)
 800c9aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	; (800c9ec <xTaskIncrementTick+0x174>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d001      	beq.n	800c9b8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c9b8:	697b      	ldr	r3, [r7, #20]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3718      	adds	r7, #24
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000dd4 	.word	0x20000dd4
 800c9c8:	20000db0 	.word	0x20000db0
 800c9cc:	20000d64 	.word	0x20000d64
 800c9d0:	20000d68 	.word	0x20000d68
 800c9d4:	20000dc4 	.word	0x20000dc4
 800c9d8:	20000dcc 	.word	0x20000dcc
 800c9dc:	20000db4 	.word	0x20000db4
 800c9e0:	200008dc 	.word	0x200008dc
 800c9e4:	200008d8 	.word	0x200008d8
 800c9e8:	20000dbc 	.word	0x20000dbc
 800c9ec:	20000dc0 	.word	0x20000dc0

0800c9f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c9f6:	4b29      	ldr	r3, [pc, #164]	; (800ca9c <vTaskSwitchContext+0xac>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c9fe:	4b28      	ldr	r3, [pc, #160]	; (800caa0 <vTaskSwitchContext+0xb0>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca04:	e043      	b.n	800ca8e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800ca06:	4b26      	ldr	r3, [pc, #152]	; (800caa0 <vTaskSwitchContext+0xb0>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca0c:	4b25      	ldr	r3, [pc, #148]	; (800caa4 <vTaskSwitchContext+0xb4>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	e012      	b.n	800ca3a <vTaskSwitchContext+0x4a>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d10c      	bne.n	800ca34 <vTaskSwitchContext+0x44>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	b672      	cpsid	i
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	b662      	cpsie	i
 800ca2e:	607b      	str	r3, [r7, #4]
}
 800ca30:	bf00      	nop
 800ca32:	e7fe      	b.n	800ca32 <vTaskSwitchContext+0x42>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	60fb      	str	r3, [r7, #12]
 800ca3a:	491b      	ldr	r1, [pc, #108]	; (800caa8 <vTaskSwitchContext+0xb8>)
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	440b      	add	r3, r1
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d0e2      	beq.n	800ca14 <vTaskSwitchContext+0x24>
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4a13      	ldr	r2, [pc, #76]	; (800caa8 <vTaskSwitchContext+0xb8>)
 800ca5a:	4413      	add	r3, r2
 800ca5c:	60bb      	str	r3, [r7, #8]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	685a      	ldr	r2, [r3, #4]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	605a      	str	r2, [r3, #4]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	3308      	adds	r3, #8
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d104      	bne.n	800ca7e <vTaskSwitchContext+0x8e>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	4a09      	ldr	r2, [pc, #36]	; (800caac <vTaskSwitchContext+0xbc>)
 800ca86:	6013      	str	r3, [r2, #0]
 800ca88:	4a06      	ldr	r2, [pc, #24]	; (800caa4 <vTaskSwitchContext+0xb4>)
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6013      	str	r3, [r2, #0]
}
 800ca8e:	bf00      	nop
 800ca90:	3714      	adds	r7, #20
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
 800ca9a:	bf00      	nop
 800ca9c:	20000dd4 	.word	0x20000dd4
 800caa0:	20000dc0 	.word	0x20000dc0
 800caa4:	20000db4 	.word	0x20000db4
 800caa8:	200008dc 	.word	0x200008dc
 800caac:	200008d8 	.word	0x200008d8

0800cab0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d10c      	bne.n	800cada <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac4:	b672      	cpsid	i
 800cac6:	f383 8811 	msr	BASEPRI, r3
 800caca:	f3bf 8f6f 	isb	sy
 800cace:	f3bf 8f4f 	dsb	sy
 800cad2:	b662      	cpsie	i
 800cad4:	60fb      	str	r3, [r7, #12]
}
 800cad6:	bf00      	nop
 800cad8:	e7fe      	b.n	800cad8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cada:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <vTaskPlaceOnEventList+0x48>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3318      	adds	r3, #24
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7fe fdbd 	bl	800b662 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cae8:	2101      	movs	r1, #1
 800caea:	6838      	ldr	r0, [r7, #0]
 800caec:	f000 fb6a 	bl	800d1c4 <prvAddCurrentTaskToDelayedList>
}
 800caf0:	bf00      	nop
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	200008d8 	.word	0x200008d8

0800cafc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10c      	bne.n	800cb28 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	b672      	cpsid	i
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	b662      	cpsie	i
 800cb22:	617b      	str	r3, [r7, #20]
}
 800cb24:	bf00      	nop
 800cb26:	e7fe      	b.n	800cb26 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb28:	4b0a      	ldr	r3, [pc, #40]	; (800cb54 <vTaskPlaceOnEventListRestricted+0x58>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	3318      	adds	r3, #24
 800cb2e:	4619      	mov	r1, r3
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7fe fd72 	bl	800b61a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d002      	beq.n	800cb42 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	68b8      	ldr	r0, [r7, #8]
 800cb46:	f000 fb3d 	bl	800d1c4 <prvAddCurrentTaskToDelayedList>
	}
 800cb4a:	bf00      	nop
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200008d8 	.word	0x200008d8

0800cb58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10c      	bne.n	800cb88 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	b672      	cpsid	i
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	b662      	cpsie	i
 800cb82:	60fb      	str	r3, [r7, #12]
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	3318      	adds	r3, #24
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fe fda1 	bl	800b6d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb92:	4b1e      	ldr	r3, [pc, #120]	; (800cc0c <xTaskRemoveFromEventList+0xb4>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d11d      	bne.n	800cbd6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fe fd98 	bl	800b6d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba8:	4b19      	ldr	r3, [pc, #100]	; (800cc10 <xTaskRemoveFromEventList+0xb8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d903      	bls.n	800cbb8 <xTaskRemoveFromEventList+0x60>
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	4a16      	ldr	r2, [pc, #88]	; (800cc10 <xTaskRemoveFromEventList+0xb8>)
 800cbb6:	6013      	str	r3, [r2, #0]
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4a13      	ldr	r2, [pc, #76]	; (800cc14 <xTaskRemoveFromEventList+0xbc>)
 800cbc6:	441a      	add	r2, r3
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	3304      	adds	r3, #4
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	f7fe fd23 	bl	800b61a <vListInsertEnd>
 800cbd4:	e005      	b.n	800cbe2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	3318      	adds	r3, #24
 800cbda:	4619      	mov	r1, r3
 800cbdc:	480e      	ldr	r0, [pc, #56]	; (800cc18 <xTaskRemoveFromEventList+0xc0>)
 800cbde:	f7fe fd1c 	bl	800b61a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbe6:	4b0d      	ldr	r3, [pc, #52]	; (800cc1c <xTaskRemoveFromEventList+0xc4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d905      	bls.n	800cbfc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cbf4:	4b0a      	ldr	r3, [pc, #40]	; (800cc20 <xTaskRemoveFromEventList+0xc8>)
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	e001      	b.n	800cc00 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc00:	697b      	ldr	r3, [r7, #20]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000dd4 	.word	0x20000dd4
 800cc10:	20000db4 	.word	0x20000db4
 800cc14:	200008dc 	.word	0x200008dc
 800cc18:	20000d6c 	.word	0x20000d6c
 800cc1c:	200008d8 	.word	0x200008d8
 800cc20:	20000dc0 	.word	0x20000dc0

0800cc24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <vTaskInternalSetTimeOutState+0x24>)
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc34:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <vTaskInternalSetTimeOutState+0x28>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	605a      	str	r2, [r3, #4]
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr
 800cc48:	20000dc4 	.word	0x20000dc4
 800cc4c:	20000db0 	.word	0x20000db0

0800cc50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
 800cc58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10c      	bne.n	800cc7a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	b672      	cpsid	i
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	b662      	cpsie	i
 800cc74:	613b      	str	r3, [r7, #16]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10c      	bne.n	800cc9a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	b672      	cpsid	i
 800cc86:	f383 8811 	msr	BASEPRI, r3
 800cc8a:	f3bf 8f6f 	isb	sy
 800cc8e:	f3bf 8f4f 	dsb	sy
 800cc92:	b662      	cpsie	i
 800cc94:	60fb      	str	r3, [r7, #12]
}
 800cc96:	bf00      	nop
 800cc98:	e7fe      	b.n	800cc98 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cc9a:	f000 ff4f 	bl	800db3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cc9e:	4b1d      	ldr	r3, [pc, #116]	; (800cd14 <xTaskCheckForTimeOut+0xc4>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	69ba      	ldr	r2, [r7, #24]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb6:	d102      	bne.n	800ccbe <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	e023      	b.n	800cd06 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	4b15      	ldr	r3, [pc, #84]	; (800cd18 <xTaskCheckForTimeOut+0xc8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d007      	beq.n	800ccda <xTaskCheckForTimeOut+0x8a>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	685b      	ldr	r3, [r3, #4]
 800ccce:	69ba      	ldr	r2, [r7, #24]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d302      	bcc.n	800ccda <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	e015      	b.n	800cd06 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d20b      	bcs.n	800ccfc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	1ad2      	subs	r2, r2, r3
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f7ff ff97 	bl	800cc24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	61fb      	str	r3, [r7, #28]
 800ccfa:	e004      	b.n	800cd06 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd02:	2301      	movs	r3, #1
 800cd04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd06:	f000 ff4d 	bl	800dba4 <vPortExitCritical>

	return xReturn;
 800cd0a:	69fb      	ldr	r3, [r7, #28]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3720      	adds	r7, #32
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000db0 	.word	0x20000db0
 800cd18:	20000dc4 	.word	0x20000dc4

0800cd1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd20:	4b03      	ldr	r3, [pc, #12]	; (800cd30 <vTaskMissedYield+0x14>)
 800cd22:	2201      	movs	r2, #1
 800cd24:	601a      	str	r2, [r3, #0]
}
 800cd26:	bf00      	nop
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	20000dc0 	.word	0x20000dc0

0800cd34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd3c:	f000 f852 	bl	800cde4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd40:	4b06      	ldr	r3, [pc, #24]	; (800cd5c <prvIdleTask+0x28>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d9f9      	bls.n	800cd3c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cd48:	4b05      	ldr	r3, [pc, #20]	; (800cd60 <prvIdleTask+0x2c>)
 800cd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cd58:	e7f0      	b.n	800cd3c <prvIdleTask+0x8>
 800cd5a:	bf00      	nop
 800cd5c:	200008dc 	.word	0x200008dc
 800cd60:	e000ed04 	.word	0xe000ed04

0800cd64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	607b      	str	r3, [r7, #4]
 800cd6e:	e00c      	b.n	800cd8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cd70:	687a      	ldr	r2, [r7, #4]
 800cd72:	4613      	mov	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	4413      	add	r3, r2
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4a12      	ldr	r2, [pc, #72]	; (800cdc4 <prvInitialiseTaskLists+0x60>)
 800cd7c:	4413      	add	r3, r2
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fe fc1e 	bl	800b5c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	3301      	adds	r3, #1
 800cd88:	607b      	str	r3, [r7, #4]
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b37      	cmp	r3, #55	; 0x37
 800cd8e:	d9ef      	bls.n	800cd70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cd90:	480d      	ldr	r0, [pc, #52]	; (800cdc8 <prvInitialiseTaskLists+0x64>)
 800cd92:	f7fe fc15 	bl	800b5c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cd96:	480d      	ldr	r0, [pc, #52]	; (800cdcc <prvInitialiseTaskLists+0x68>)
 800cd98:	f7fe fc12 	bl	800b5c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cd9c:	480c      	ldr	r0, [pc, #48]	; (800cdd0 <prvInitialiseTaskLists+0x6c>)
 800cd9e:	f7fe fc0f 	bl	800b5c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cda2:	480c      	ldr	r0, [pc, #48]	; (800cdd4 <prvInitialiseTaskLists+0x70>)
 800cda4:	f7fe fc0c 	bl	800b5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cda8:	480b      	ldr	r0, [pc, #44]	; (800cdd8 <prvInitialiseTaskLists+0x74>)
 800cdaa:	f7fe fc09 	bl	800b5c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cdae:	4b0b      	ldr	r3, [pc, #44]	; (800cddc <prvInitialiseTaskLists+0x78>)
 800cdb0:	4a05      	ldr	r2, [pc, #20]	; (800cdc8 <prvInitialiseTaskLists+0x64>)
 800cdb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <prvInitialiseTaskLists+0x7c>)
 800cdb6:	4a05      	ldr	r2, [pc, #20]	; (800cdcc <prvInitialiseTaskLists+0x68>)
 800cdb8:	601a      	str	r2, [r3, #0]
}
 800cdba:	bf00      	nop
 800cdbc:	3708      	adds	r7, #8
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	200008dc 	.word	0x200008dc
 800cdc8:	20000d3c 	.word	0x20000d3c
 800cdcc:	20000d50 	.word	0x20000d50
 800cdd0:	20000d6c 	.word	0x20000d6c
 800cdd4:	20000d80 	.word	0x20000d80
 800cdd8:	20000d98 	.word	0x20000d98
 800cddc:	20000d64 	.word	0x20000d64
 800cde0:	20000d68 	.word	0x20000d68

0800cde4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cdea:	e019      	b.n	800ce20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cdec:	f000 fea6 	bl	800db3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdf0:	4b10      	ldr	r3, [pc, #64]	; (800ce34 <prvCheckTasksWaitingTermination+0x50>)
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3304      	adds	r3, #4
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fe fc69 	bl	800b6d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce02:	4b0d      	ldr	r3, [pc, #52]	; (800ce38 <prvCheckTasksWaitingTermination+0x54>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	4a0b      	ldr	r2, [pc, #44]	; (800ce38 <prvCheckTasksWaitingTermination+0x54>)
 800ce0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce0c:	4b0b      	ldr	r3, [pc, #44]	; (800ce3c <prvCheckTasksWaitingTermination+0x58>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3b01      	subs	r3, #1
 800ce12:	4a0a      	ldr	r2, [pc, #40]	; (800ce3c <prvCheckTasksWaitingTermination+0x58>)
 800ce14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce16:	f000 fec5 	bl	800dba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f810 	bl	800ce40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce20:	4b06      	ldr	r3, [pc, #24]	; (800ce3c <prvCheckTasksWaitingTermination+0x58>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e1      	bne.n	800cdec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	3708      	adds	r7, #8
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20000d80 	.word	0x20000d80
 800ce38:	20000dac 	.word	0x20000dac
 800ce3c:	20000d94 	.word	0x20000d94

0800ce40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b084      	sub	sp, #16
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d108      	bne.n	800ce64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce56:	4618      	mov	r0, r3
 800ce58:	f001 f866 	bl	800df28 <vPortFree>
				vPortFree( pxTCB );
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f001 f863 	bl	800df28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ce62:	e01a      	b.n	800ce9a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d103      	bne.n	800ce76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f001 f85a 	bl	800df28 <vPortFree>
	}
 800ce74:	e011      	b.n	800ce9a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	d00c      	beq.n	800ce9a <prvDeleteTCB+0x5a>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	b672      	cpsid	i
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	b662      	cpsie	i
 800ce94:	60fb      	str	r3, [r7, #12]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <prvDeleteTCB+0x58>
	}
 800ce9a:	bf00      	nop
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceaa:	4b0c      	ldr	r3, [pc, #48]	; (800cedc <prvResetNextTaskUnblockTime+0x38>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ceb4:	4b0a      	ldr	r3, [pc, #40]	; (800cee0 <prvResetNextTaskUnblockTime+0x3c>)
 800ceb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cebc:	e008      	b.n	800ced0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cebe:	4b07      	ldr	r3, [pc, #28]	; (800cedc <prvResetNextTaskUnblockTime+0x38>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	68db      	ldr	r3, [r3, #12]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	4a04      	ldr	r2, [pc, #16]	; (800cee0 <prvResetNextTaskUnblockTime+0x3c>)
 800cece:	6013      	str	r3, [r2, #0]
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr
 800cedc:	20000d64 	.word	0x20000d64
 800cee0:	20000dcc 	.word	0x20000dcc

0800cee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ceea:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <xTaskGetSchedulerState+0x34>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d102      	bne.n	800cef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cef2:	2301      	movs	r3, #1
 800cef4:	607b      	str	r3, [r7, #4]
 800cef6:	e008      	b.n	800cf0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cef8:	4b08      	ldr	r3, [pc, #32]	; (800cf1c <xTaskGetSchedulerState+0x38>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d102      	bne.n	800cf06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf00:	2302      	movs	r3, #2
 800cf02:	607b      	str	r3, [r7, #4]
 800cf04:	e001      	b.n	800cf0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf06:	2300      	movs	r3, #0
 800cf08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf0a:	687b      	ldr	r3, [r7, #4]
	}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	20000db8 	.word	0x20000db8
 800cf1c:	20000dd4 	.word	0x20000dd4

0800cf20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d05a      	beq.n	800cfec <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf36:	4b30      	ldr	r3, [pc, #192]	; (800cff8 <xTaskPriorityDisinherit+0xd8>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d00c      	beq.n	800cf5a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf44:	b672      	cpsid	i
 800cf46:	f383 8811 	msr	BASEPRI, r3
 800cf4a:	f3bf 8f6f 	isb	sy
 800cf4e:	f3bf 8f4f 	dsb	sy
 800cf52:	b662      	cpsie	i
 800cf54:	60fb      	str	r3, [r7, #12]
}
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10c      	bne.n	800cf7c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	b672      	cpsid	i
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	b662      	cpsie	i
 800cf76:	60bb      	str	r3, [r7, #8]
}
 800cf78:	bf00      	nop
 800cf7a:	e7fe      	b.n	800cf7a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf80:	1e5a      	subs	r2, r3, #1
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d02c      	beq.n	800cfec <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d128      	bne.n	800cfec <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fe fb98 	bl	800b6d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbc:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <xTaskPriorityDisinherit+0xdc>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d903      	bls.n	800cfcc <xTaskPriorityDisinherit+0xac>
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc8:	4a0c      	ldr	r2, [pc, #48]	; (800cffc <xTaskPriorityDisinherit+0xdc>)
 800cfca:	6013      	str	r3, [r2, #0]
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4a09      	ldr	r2, [pc, #36]	; (800d000 <xTaskPriorityDisinherit+0xe0>)
 800cfda:	441a      	add	r2, r3
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	f7fe fb19 	bl	800b61a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfec:	697b      	ldr	r3, [r7, #20]
	}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	200008d8 	.word	0x200008d8
 800cffc:	20000db4 	.word	0x20000db4
 800d000:	200008dc 	.word	0x200008dc

0800d004 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d00e:	f000 fd95 	bl	800db3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d012:	4b1e      	ldr	r3, [pc, #120]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d113      	bne.n	800d044 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d01c:	4b1b      	ldr	r3, [pc, #108]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00b      	beq.n	800d044 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d02c:	2101      	movs	r1, #1
 800d02e:	6838      	ldr	r0, [r7, #0]
 800d030:	f000 f8c8 	bl	800d1c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d034:	4b16      	ldr	r3, [pc, #88]	; (800d090 <ulTaskNotifyTake+0x8c>)
 800d036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d03a:	601a      	str	r2, [r3, #0]
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d044:	f000 fdae 	bl	800dba4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d048:	f000 fd78 	bl	800db3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d04c:	4b0f      	ldr	r3, [pc, #60]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d052:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00c      	beq.n	800d074 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d004      	beq.n	800d06a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d060:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2200      	movs	r2, #0
 800d066:	655a      	str	r2, [r3, #84]	; 0x54
 800d068:	e004      	b.n	800d074 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d06a:	4b08      	ldr	r3, [pc, #32]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	3a01      	subs	r2, #1
 800d072:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d074:	4b05      	ldr	r3, [pc, #20]	; (800d08c <ulTaskNotifyTake+0x88>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800d07e:	f000 fd91 	bl	800dba4 <vPortExitCritical>

		return ulReturn;
 800d082:	68fb      	ldr	r3, [r7, #12]
	}
 800d084:	4618      	mov	r0, r3
 800d086:	3710      	adds	r7, #16
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	200008d8 	.word	0x200008d8
 800d090:	e000ed04 	.word	0xe000ed04

0800d094 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d094:	b580      	push	{r7, lr}
 800d096:	b08a      	sub	sp, #40	; 0x28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d10c      	bne.n	800d0be <vTaskNotifyGiveFromISR+0x2a>
	__asm volatile
 800d0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a8:	b672      	cpsid	i
 800d0aa:	f383 8811 	msr	BASEPRI, r3
 800d0ae:	f3bf 8f6f 	isb	sy
 800d0b2:	f3bf 8f4f 	dsb	sy
 800d0b6:	b662      	cpsie	i
 800d0b8:	61bb      	str	r3, [r7, #24]
}
 800d0ba:	bf00      	nop
 800d0bc:	e7fe      	b.n	800d0bc <vTaskNotifyGiveFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0be:	f000 fe25 	bl	800dd0c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800d0c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ce:	b672      	cpsid	i
 800d0d0:	f383 8811 	msr	BASEPRI, r3
 800d0d4:	f3bf 8f6f 	isb	sy
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	b662      	cpsie	i
 800d0de:	617a      	str	r2, [r7, #20]
 800d0e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d0e2:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0e4:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800d0ec:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f0:	2202      	movs	r2, #2
 800d0f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d0fa:	1c5a      	adds	r2, r3, #1
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	655a      	str	r2, [r3, #84]	; 0x54

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d100:	7ffb      	ldrb	r3, [r7, #31]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d148      	bne.n	800d198 <vTaskNotifyGiveFromISR+0x104>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00c      	beq.n	800d128 <vTaskNotifyGiveFromISR+0x94>
	__asm volatile
 800d10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d112:	b672      	cpsid	i
 800d114:	f383 8811 	msr	BASEPRI, r3
 800d118:	f3bf 8f6f 	isb	sy
 800d11c:	f3bf 8f4f 	dsb	sy
 800d120:	b662      	cpsie	i
 800d122:	60fb      	str	r3, [r7, #12]
}
 800d124:	bf00      	nop
 800d126:	e7fe      	b.n	800d126 <vTaskNotifyGiveFromISR+0x92>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d128:	4b20      	ldr	r3, [pc, #128]	; (800d1ac <vTaskNotifyGiveFromISR+0x118>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d11d      	bne.n	800d16c <vTaskNotifyGiveFromISR+0xd8>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d132:	3304      	adds	r3, #4
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe facd 	bl	800b6d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13e:	4b1c      	ldr	r3, [pc, #112]	; (800d1b0 <vTaskNotifyGiveFromISR+0x11c>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	429a      	cmp	r2, r3
 800d144:	d903      	bls.n	800d14e <vTaskNotifyGiveFromISR+0xba>
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d14a:	4a19      	ldr	r2, [pc, #100]	; (800d1b0 <vTaskNotifyGiveFromISR+0x11c>)
 800d14c:	6013      	str	r3, [r2, #0]
 800d14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d152:	4613      	mov	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4a16      	ldr	r2, [pc, #88]	; (800d1b4 <vTaskNotifyGiveFromISR+0x120>)
 800d15c:	441a      	add	r2, r3
 800d15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d160:	3304      	adds	r3, #4
 800d162:	4619      	mov	r1, r3
 800d164:	4610      	mov	r0, r2
 800d166:	f7fe fa58 	bl	800b61a <vListInsertEnd>
 800d16a:	e005      	b.n	800d178 <vTaskNotifyGiveFromISR+0xe4>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16e:	3318      	adds	r3, #24
 800d170:	4619      	mov	r1, r3
 800d172:	4811      	ldr	r0, [pc, #68]	; (800d1b8 <vTaskNotifyGiveFromISR+0x124>)
 800d174:	f7fe fa51 	bl	800b61a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <vTaskNotifyGiveFromISR+0x128>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d182:	429a      	cmp	r2, r3
 800d184:	d908      	bls.n	800d198 <vTaskNotifyGiveFromISR+0x104>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <vTaskNotifyGiveFromISR+0xfe>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	2201      	movs	r2, #1
 800d190:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d192:	4b0b      	ldr	r3, [pc, #44]	; (800d1c0 <vTaskNotifyGiveFromISR+0x12c>)
 800d194:	2201      	movs	r2, #1
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	6a3b      	ldr	r3, [r7, #32]
 800d19a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f383 8811 	msr	BASEPRI, r3
}
 800d1a2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d1a4:	bf00      	nop
 800d1a6:	3728      	adds	r7, #40	; 0x28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	20000dd4 	.word	0x20000dd4
 800d1b0:	20000db4 	.word	0x20000db4
 800d1b4:	200008dc 	.word	0x200008dc
 800d1b8:	20000d6c 	.word	0x20000d6c
 800d1bc:	200008d8 	.word	0x200008d8
 800d1c0:	20000dc0 	.word	0x20000dc0

0800d1c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d1ce:	4b21      	ldr	r3, [pc, #132]	; (800d254 <prvAddCurrentTaskToDelayedList+0x90>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1d4:	4b20      	ldr	r3, [pc, #128]	; (800d258 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3304      	adds	r3, #4
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fa7a 	bl	800b6d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1e6:	d10a      	bne.n	800d1fe <prvAddCurrentTaskToDelayedList+0x3a>
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d007      	beq.n	800d1fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1ee:	4b1a      	ldr	r3, [pc, #104]	; (800d258 <prvAddCurrentTaskToDelayedList+0x94>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	4819      	ldr	r0, [pc, #100]	; (800d25c <prvAddCurrentTaskToDelayedList+0x98>)
 800d1f8:	f7fe fa0f 	bl	800b61a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d1fc:	e026      	b.n	800d24c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d1fe:	68fa      	ldr	r2, [r7, #12]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4413      	add	r3, r2
 800d204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d206:	4b14      	ldr	r3, [pc, #80]	; (800d258 <prvAddCurrentTaskToDelayedList+0x94>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d20e:	68ba      	ldr	r2, [r7, #8]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	429a      	cmp	r2, r3
 800d214:	d209      	bcs.n	800d22a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d216:	4b12      	ldr	r3, [pc, #72]	; (800d260 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	4b0f      	ldr	r3, [pc, #60]	; (800d258 <prvAddCurrentTaskToDelayedList+0x94>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	3304      	adds	r3, #4
 800d220:	4619      	mov	r1, r3
 800d222:	4610      	mov	r0, r2
 800d224:	f7fe fa1d 	bl	800b662 <vListInsert>
}
 800d228:	e010      	b.n	800d24c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d22a:	4b0e      	ldr	r3, [pc, #56]	; (800d264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4b0a      	ldr	r3, [pc, #40]	; (800d258 <prvAddCurrentTaskToDelayedList+0x94>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	3304      	adds	r3, #4
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fe fa13 	bl	800b662 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d23c:	4b0a      	ldr	r3, [pc, #40]	; (800d268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	68ba      	ldr	r2, [r7, #8]
 800d242:	429a      	cmp	r2, r3
 800d244:	d202      	bcs.n	800d24c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d246:	4a08      	ldr	r2, [pc, #32]	; (800d268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	6013      	str	r3, [r2, #0]
}
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	20000db0 	.word	0x20000db0
 800d258:	200008d8 	.word	0x200008d8
 800d25c:	20000d98 	.word	0x20000d98
 800d260:	20000d68 	.word	0x20000d68
 800d264:	20000d64 	.word	0x20000d64
 800d268:	20000dcc 	.word	0x20000dcc

0800d26c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b08a      	sub	sp, #40	; 0x28
 800d270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d272:	2300      	movs	r3, #0
 800d274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d276:	f000 fb15 	bl	800d8a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d27a:	4b1d      	ldr	r3, [pc, #116]	; (800d2f0 <xTimerCreateTimerTask+0x84>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d021      	beq.n	800d2c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d286:	2300      	movs	r3, #0
 800d288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d28a:	1d3a      	adds	r2, r7, #4
 800d28c:	f107 0108 	add.w	r1, r7, #8
 800d290:	f107 030c 	add.w	r3, r7, #12
 800d294:	4618      	mov	r0, r3
 800d296:	f7fe f979 	bl	800b58c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d29a:	6879      	ldr	r1, [r7, #4]
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	68fa      	ldr	r2, [r7, #12]
 800d2a0:	9202      	str	r2, [sp, #8]
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	460a      	mov	r2, r1
 800d2ac:	4911      	ldr	r1, [pc, #68]	; (800d2f4 <xTimerCreateTimerTask+0x88>)
 800d2ae:	4812      	ldr	r0, [pc, #72]	; (800d2f8 <xTimerCreateTimerTask+0x8c>)
 800d2b0:	f7fe ff44 	bl	800c13c <xTaskCreateStatic>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	4a11      	ldr	r2, [pc, #68]	; (800d2fc <xTimerCreateTimerTask+0x90>)
 800d2b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d2ba:	4b10      	ldr	r3, [pc, #64]	; (800d2fc <xTimerCreateTimerTask+0x90>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d001      	beq.n	800d2c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10c      	bne.n	800d2e6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	b672      	cpsid	i
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	b662      	cpsie	i
 800d2e0:	613b      	str	r3, [r7, #16]
}
 800d2e2:	bf00      	nop
 800d2e4:	e7fe      	b.n	800d2e4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d2e6:	697b      	ldr	r3, [r7, #20]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20000e08 	.word	0x20000e08
 800d2f4:	08012268 	.word	0x08012268
 800d2f8:	0800d43d 	.word	0x0800d43d
 800d2fc:	20000e0c 	.word	0x20000e0c

0800d300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b08a      	sub	sp, #40	; 0x28
 800d304:	af00      	add	r7, sp, #0
 800d306:	60f8      	str	r0, [r7, #12]
 800d308:	60b9      	str	r1, [r7, #8]
 800d30a:	607a      	str	r2, [r7, #4]
 800d30c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d30e:	2300      	movs	r3, #0
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10c      	bne.n	800d332 <xTimerGenericCommand+0x32>
	__asm volatile
 800d318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31c:	b672      	cpsid	i
 800d31e:	f383 8811 	msr	BASEPRI, r3
 800d322:	f3bf 8f6f 	isb	sy
 800d326:	f3bf 8f4f 	dsb	sy
 800d32a:	b662      	cpsie	i
 800d32c:	623b      	str	r3, [r7, #32]
}
 800d32e:	bf00      	nop
 800d330:	e7fe      	b.n	800d330 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d332:	4b1a      	ldr	r3, [pc, #104]	; (800d39c <xTimerGenericCommand+0x9c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d02a      	beq.n	800d390 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	2b05      	cmp	r3, #5
 800d34a:	dc18      	bgt.n	800d37e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d34c:	f7ff fdca 	bl	800cee4 <xTaskGetSchedulerState>
 800d350:	4603      	mov	r3, r0
 800d352:	2b02      	cmp	r3, #2
 800d354:	d109      	bne.n	800d36a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d356:	4b11      	ldr	r3, [pc, #68]	; (800d39c <xTimerGenericCommand+0x9c>)
 800d358:	6818      	ldr	r0, [r3, #0]
 800d35a:	f107 0110 	add.w	r1, r7, #16
 800d35e:	2300      	movs	r3, #0
 800d360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d362:	f7fe faf1 	bl	800b948 <xQueueGenericSend>
 800d366:	6278      	str	r0, [r7, #36]	; 0x24
 800d368:	e012      	b.n	800d390 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d36a:	4b0c      	ldr	r3, [pc, #48]	; (800d39c <xTimerGenericCommand+0x9c>)
 800d36c:	6818      	ldr	r0, [r3, #0]
 800d36e:	f107 0110 	add.w	r1, r7, #16
 800d372:	2300      	movs	r3, #0
 800d374:	2200      	movs	r2, #0
 800d376:	f7fe fae7 	bl	800b948 <xQueueGenericSend>
 800d37a:	6278      	str	r0, [r7, #36]	; 0x24
 800d37c:	e008      	b.n	800d390 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d37e:	4b07      	ldr	r3, [pc, #28]	; (800d39c <xTimerGenericCommand+0x9c>)
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	f107 0110 	add.w	r1, r7, #16
 800d386:	2300      	movs	r3, #0
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	f7fe fbe3 	bl	800bb54 <xQueueGenericSendFromISR>
 800d38e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d392:	4618      	mov	r0, r3
 800d394:	3728      	adds	r7, #40	; 0x28
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20000e08 	.word	0x20000e08

0800d3a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b088      	sub	sp, #32
 800d3a4:	af02      	add	r7, sp, #8
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3aa:	4b23      	ldr	r3, [pc, #140]	; (800d438 <prvProcessExpiredTimer+0x98>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	68db      	ldr	r3, [r3, #12]
 800d3b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	3304      	adds	r3, #4
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	f7fe f98b 	bl	800b6d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3c4:	f003 0304 	and.w	r3, r3, #4
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d024      	beq.n	800d416 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	699a      	ldr	r2, [r3, #24]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	18d1      	adds	r1, r2, r3
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	6978      	ldr	r0, [r7, #20]
 800d3da:	f000 f8d3 	bl	800d584 <prvInsertTimerInActiveList>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d021      	beq.n	800d428 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	6978      	ldr	r0, [r7, #20]
 800d3f0:	f7ff ff86 	bl	800d300 <xTimerGenericCommand>
 800d3f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d115      	bne.n	800d428 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	b672      	cpsid	i
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	b662      	cpsie	i
 800d410:	60fb      	str	r3, [r7, #12]
}
 800d412:	bf00      	nop
 800d414:	e7fe      	b.n	800d414 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d41c:	f023 0301 	bic.w	r3, r3, #1
 800d420:	b2da      	uxtb	r2, r3
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	6a1b      	ldr	r3, [r3, #32]
 800d42c:	6978      	ldr	r0, [r7, #20]
 800d42e:	4798      	blx	r3
}
 800d430:	bf00      	nop
 800d432:	3718      	adds	r7, #24
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	20000e00 	.word	0x20000e00

0800d43c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d444:	f107 0308 	add.w	r3, r7, #8
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f857 	bl	800d4fc <prvGetNextExpireTime>
 800d44e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f803 	bl	800d460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d45a:	f000 f8d5 	bl	800d608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d45e:	e7f1      	b.n	800d444 <prvTimerTask+0x8>

0800d460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d46a:	f7ff f935 	bl	800c6d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4618      	mov	r0, r3
 800d474:	f000 f866 	bl	800d544 <prvSampleTimeNow>
 800d478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d130      	bne.n	800d4e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10a      	bne.n	800d49c <prvProcessTimerOrBlockTask+0x3c>
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d806      	bhi.n	800d49c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d48e:	f7ff f931 	bl	800c6f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d492:	68f9      	ldr	r1, [r7, #12]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff ff83 	bl	800d3a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d49a:	e024      	b.n	800d4e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d008      	beq.n	800d4b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d4a2:	4b13      	ldr	r3, [pc, #76]	; (800d4f0 <prvProcessTimerOrBlockTask+0x90>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <prvProcessTimerOrBlockTask+0x50>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e000      	b.n	800d4b2 <prvProcessTimerOrBlockTask+0x52>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d4b4:	4b0f      	ldr	r3, [pc, #60]	; (800d4f4 <prvProcessTimerOrBlockTask+0x94>)
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	1ad3      	subs	r3, r2, r3
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	f7fe fe07 	bl	800c0d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d4c6:	f7ff f915 	bl	800c6f4 <xTaskResumeAll>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10a      	bne.n	800d4e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d4d0:	4b09      	ldr	r3, [pc, #36]	; (800d4f8 <prvProcessTimerOrBlockTask+0x98>)
 800d4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4d6:	601a      	str	r2, [r3, #0]
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	f3bf 8f6f 	isb	sy
}
 800d4e0:	e001      	b.n	800d4e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d4e2:	f7ff f907 	bl	800c6f4 <xTaskResumeAll>
}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}
 800d4ee:	bf00      	nop
 800d4f0:	20000e04 	.word	0x20000e04
 800d4f4:	20000e08 	.word	0x20000e08
 800d4f8:	e000ed04 	.word	0xe000ed04

0800d4fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b085      	sub	sp, #20
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d504:	4b0e      	ldr	r3, [pc, #56]	; (800d540 <prvGetNextExpireTime+0x44>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d101      	bne.n	800d512 <prvGetNextExpireTime+0x16>
 800d50e:	2201      	movs	r2, #1
 800d510:	e000      	b.n	800d514 <prvGetNextExpireTime+0x18>
 800d512:	2200      	movs	r2, #0
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d105      	bne.n	800d52c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d520:	4b07      	ldr	r3, [pc, #28]	; (800d540 <prvGetNextExpireTime+0x44>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	e001      	b.n	800d530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d530:	68fb      	ldr	r3, [r7, #12]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3714      	adds	r7, #20
 800d536:	46bd      	mov	sp, r7
 800d538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop
 800d540:	20000e00 	.word	0x20000e00

0800d544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d54c:	f7ff f972 	bl	800c834 <xTaskGetTickCount>
 800d550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d552:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <prvSampleTimeNow+0x3c>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	68fa      	ldr	r2, [r7, #12]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d205      	bcs.n	800d568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d55c:	f000 f93c 	bl	800d7d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e002      	b.n	800d56e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d56e:	4a04      	ldr	r2, [pc, #16]	; (800d580 <prvSampleTimeNow+0x3c>)
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d574:	68fb      	ldr	r3, [r7, #12]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20000e10 	.word	0x20000e10

0800d584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b086      	sub	sp, #24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	60f8      	str	r0, [r7, #12]
 800d58c:	60b9      	str	r1, [r7, #8]
 800d58e:	607a      	str	r2, [r7, #4]
 800d590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d592:	2300      	movs	r3, #0
 800d594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d812      	bhi.n	800d5d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	699b      	ldr	r3, [r3, #24]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d302      	bcc.n	800d5be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	617b      	str	r3, [r7, #20]
 800d5bc:	e01b      	b.n	800d5f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d5be:	4b10      	ldr	r3, [pc, #64]	; (800d600 <prvInsertTimerInActiveList+0x7c>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3304      	adds	r3, #4
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	4610      	mov	r0, r2
 800d5ca:	f7fe f84a 	bl	800b662 <vListInsert>
 800d5ce:	e012      	b.n	800d5f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d206      	bcs.n	800d5e6 <prvInsertTimerInActiveList+0x62>
 800d5d8:	68ba      	ldr	r2, [r7, #8]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d302      	bcc.n	800d5e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	617b      	str	r3, [r7, #20]
 800d5e4:	e007      	b.n	800d5f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5e6:	4b07      	ldr	r3, [pc, #28]	; (800d604 <prvInsertTimerInActiveList+0x80>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f7fe f836 	bl	800b662 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d5f6:	697b      	ldr	r3, [r7, #20]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3718      	adds	r7, #24
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	20000e04 	.word	0x20000e04
 800d604:	20000e00 	.word	0x20000e00

0800d608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b08e      	sub	sp, #56	; 0x38
 800d60c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d60e:	e0d0      	b.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	da1a      	bge.n	800d64c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d616:	1d3b      	adds	r3, r7, #4
 800d618:	3304      	adds	r3, #4
 800d61a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10c      	bne.n	800d63c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	b672      	cpsid	i
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	b662      	cpsie	i
 800d636:	61fb      	str	r3, [r7, #28]
}
 800d638:	bf00      	nop
 800d63a:	e7fe      	b.n	800d63a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d642:	6850      	ldr	r0, [r2, #4]
 800d644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d646:	6892      	ldr	r2, [r2, #8]
 800d648:	4611      	mov	r1, r2
 800d64a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f2c0 80ae 	blt.w	800d7b0 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65a:	695b      	ldr	r3, [r3, #20]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d004      	beq.n	800d66a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	3304      	adds	r3, #4
 800d664:	4618      	mov	r0, r3
 800d666:	f7fe f835 	bl	800b6d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d66a:	463b      	mov	r3, r7
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7ff ff69 	bl	800d544 <prvSampleTimeNow>
 800d672:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b09      	cmp	r3, #9
 800d678:	f200 809b 	bhi.w	800d7b2 <prvProcessReceivedCommands+0x1aa>
 800d67c:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <prvProcessReceivedCommands+0x7c>)
 800d67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d682:	bf00      	nop
 800d684:	0800d6ad 	.word	0x0800d6ad
 800d688:	0800d6ad 	.word	0x0800d6ad
 800d68c:	0800d6ad 	.word	0x0800d6ad
 800d690:	0800d725 	.word	0x0800d725
 800d694:	0800d739 	.word	0x0800d739
 800d698:	0800d787 	.word	0x0800d787
 800d69c:	0800d6ad 	.word	0x0800d6ad
 800d6a0:	0800d6ad 	.word	0x0800d6ad
 800d6a4:	0800d725 	.word	0x0800d725
 800d6a8:	0800d739 	.word	0x0800d739
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6b2:	f043 0301 	orr.w	r3, r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	699b      	ldr	r3, [r3, #24]
 800d6c4:	18d1      	adds	r1, r2, r3
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6cc:	f7ff ff5a 	bl	800d584 <prvInsertTimerInActiveList>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d06d      	beq.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6e4:	f003 0304 	and.w	r3, r3, #4
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d062      	beq.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6f0:	699b      	ldr	r3, [r3, #24]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fe:	f7ff fdff 	bl	800d300 <xTimerGenericCommand>
 800d702:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d704:	6a3b      	ldr	r3, [r7, #32]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d153      	bne.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	b672      	cpsid	i
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	b662      	cpsie	i
 800d71e:	61bb      	str	r3, [r7, #24]
}
 800d720:	bf00      	nop
 800d722:	e7fe      	b.n	800d722 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d72a:	f023 0301 	bic.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d736:	e03c      	b.n	800d7b2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d73e:	f043 0301 	orr.w	r3, r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	699b      	ldr	r3, [r3, #24]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10c      	bne.n	800d772 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75c:	b672      	cpsid	i
 800d75e:	f383 8811 	msr	BASEPRI, r3
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	f3bf 8f4f 	dsb	sy
 800d76a:	b662      	cpsie	i
 800d76c:	617b      	str	r3, [r7, #20]
}
 800d76e:	bf00      	nop
 800d770:	e7fe      	b.n	800d770 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	18d1      	adds	r1, r2, r3
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d780:	f7ff ff00 	bl	800d584 <prvInsertTimerInActiveList>
					break;
 800d784:	e015      	b.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d103      	bne.n	800d79c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d796:	f000 fbc7 	bl	800df28 <vPortFree>
 800d79a:	e00a      	b.n	800d7b2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7a2:	f023 0301 	bic.w	r3, r3, #1
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d7ae:	e000      	b.n	800d7b2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d7b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7b2:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <prvProcessReceivedCommands+0x1cc>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	1d39      	adds	r1, r7, #4
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7fe fa6a 	bl	800bc94 <xQueueReceive>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af24 	bne.w	800d610 <prvProcessReceivedCommands+0x8>
	}
}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3730      	adds	r7, #48	; 0x30
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	20000e08 	.word	0x20000e08

0800d7d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d7de:	e04a      	b.n	800d876 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d7e0:	4b2e      	ldr	r3, [pc, #184]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68db      	ldr	r3, [r3, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ea:	4b2c      	ldr	r3, [pc, #176]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f7fd ff6b 	bl	800b6d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	68f8      	ldr	r0, [r7, #12]
 800d804:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d80c:	f003 0304 	and.w	r3, r3, #4
 800d810:	2b00      	cmp	r3, #0
 800d812:	d030      	beq.n	800d876 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	699b      	ldr	r3, [r3, #24]
 800d818:	693a      	ldr	r2, [r7, #16]
 800d81a:	4413      	add	r3, r2
 800d81c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d90e      	bls.n	800d844 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68ba      	ldr	r2, [r7, #8]
 800d82a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d832:	4b1a      	ldr	r3, [pc, #104]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d834:	681a      	ldr	r2, [r3, #0]
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3304      	adds	r3, #4
 800d83a:	4619      	mov	r1, r3
 800d83c:	4610      	mov	r0, r2
 800d83e:	f7fd ff10 	bl	800b662 <vListInsert>
 800d842:	e018      	b.n	800d876 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d844:	2300      	movs	r3, #0
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	2300      	movs	r3, #0
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	2100      	movs	r1, #0
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fd56 	bl	800d300 <xTimerGenericCommand>
 800d854:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10c      	bne.n	800d876 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	b672      	cpsid	i
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	b662      	cpsie	i
 800d870:	603b      	str	r3, [r7, #0]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d876:	4b09      	ldr	r3, [pc, #36]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1af      	bne.n	800d7e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d880:	4b06      	ldr	r3, [pc, #24]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d886:	4b06      	ldr	r3, [pc, #24]	; (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a04      	ldr	r2, [pc, #16]	; (800d89c <prvSwitchTimerLists+0xc4>)
 800d88c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d88e:	4a04      	ldr	r2, [pc, #16]	; (800d8a0 <prvSwitchTimerLists+0xc8>)
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	6013      	str	r3, [r2, #0]
}
 800d894:	bf00      	nop
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	20000e00 	.word	0x20000e00
 800d8a0:	20000e04 	.word	0x20000e04

0800d8a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d8aa:	f000 f947 	bl	800db3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d8ae:	4b15      	ldr	r3, [pc, #84]	; (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d120      	bne.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d8b6:	4814      	ldr	r0, [pc, #80]	; (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8b8:	f7fd fe82 	bl	800b5c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d8bc:	4813      	ldr	r0, [pc, #76]	; (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8be:	f7fd fe7f 	bl	800b5c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	; (800d910 <prvCheckForValidListAndQueue+0x6c>)
 800d8c4:	4a10      	ldr	r2, [pc, #64]	; (800d908 <prvCheckForValidListAndQueue+0x64>)
 800d8c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d8c8:	4b12      	ldr	r3, [pc, #72]	; (800d914 <prvCheckForValidListAndQueue+0x70>)
 800d8ca:	4a10      	ldr	r2, [pc, #64]	; (800d90c <prvCheckForValidListAndQueue+0x68>)
 800d8cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	4b11      	ldr	r3, [pc, #68]	; (800d918 <prvCheckForValidListAndQueue+0x74>)
 800d8d4:	4a11      	ldr	r2, [pc, #68]	; (800d91c <prvCheckForValidListAndQueue+0x78>)
 800d8d6:	2110      	movs	r1, #16
 800d8d8:	200a      	movs	r0, #10
 800d8da:	f7fd ff8f 	bl	800b7fc <xQueueGenericCreateStatic>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	4a08      	ldr	r2, [pc, #32]	; (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d8e4:	4b07      	ldr	r3, [pc, #28]	; (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d005      	beq.n	800d8f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d8ec:	4b05      	ldr	r3, [pc, #20]	; (800d904 <prvCheckForValidListAndQueue+0x60>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	490b      	ldr	r1, [pc, #44]	; (800d920 <prvCheckForValidListAndQueue+0x7c>)
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	f7fe fbc4 	bl	800c080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8f8:	f000 f954 	bl	800dba4 <vPortExitCritical>
}
 800d8fc:	bf00      	nop
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	20000e08 	.word	0x20000e08
 800d908:	20000dd8 	.word	0x20000dd8
 800d90c:	20000dec 	.word	0x20000dec
 800d910:	20000e00 	.word	0x20000e00
 800d914:	20000e04 	.word	0x20000e04
 800d918:	20000eb4 	.word	0x20000eb4
 800d91c:	20000e14 	.word	0x20000e14
 800d920:	08012270 	.word	0x08012270

0800d924 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	3b04      	subs	r3, #4
 800d934:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3b04      	subs	r3, #4
 800d942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d944:	68bb      	ldr	r3, [r7, #8]
 800d946:	f023 0201 	bic.w	r2, r3, #1
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	3b04      	subs	r3, #4
 800d952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d954:	4a0c      	ldr	r2, [pc, #48]	; (800d988 <pxPortInitialiseStack+0x64>)
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3b14      	subs	r3, #20
 800d95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3b04      	subs	r3, #4
 800d96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f06f 0202 	mvn.w	r2, #2
 800d972:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3b20      	subs	r3, #32
 800d978:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d97a:	68fb      	ldr	r3, [r7, #12]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3714      	adds	r7, #20
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	0800d98d 	.word	0x0800d98d

0800d98c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d992:	2300      	movs	r3, #0
 800d994:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d996:	4b14      	ldr	r3, [pc, #80]	; (800d9e8 <prvTaskExitError+0x5c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d99e:	d00c      	beq.n	800d9ba <prvTaskExitError+0x2e>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	b672      	cpsid	i
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	b662      	cpsie	i
 800d9b4:	60fb      	str	r3, [r7, #12]
}
 800d9b6:	bf00      	nop
 800d9b8:	e7fe      	b.n	800d9b8 <prvTaskExitError+0x2c>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9be:	b672      	cpsid	i
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	b662      	cpsie	i
 800d9ce:	60bb      	str	r3, [r7, #8]
}
 800d9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9d2:	bf00      	nop
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0fc      	beq.n	800d9d4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9da:	bf00      	nop
 800d9dc:	bf00      	nop
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	2000000c 	.word	0x2000000c
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9f0:	4b07      	ldr	r3, [pc, #28]	; (800da10 <pxCurrentTCBConst2>)
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	6808      	ldr	r0, [r1, #0]
 800d9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f380 8809 	msr	PSP, r0
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f04f 0000 	mov.w	r0, #0
 800da06:	f380 8811 	msr	BASEPRI, r0
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst2>:
 800da10:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop

0800da18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da18:	4808      	ldr	r0, [pc, #32]	; (800da3c <prvPortStartFirstTask+0x24>)
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	6800      	ldr	r0, [r0, #0]
 800da1e:	f380 8808 	msr	MSP, r0
 800da22:	f04f 0000 	mov.w	r0, #0
 800da26:	f380 8814 	msr	CONTROL, r0
 800da2a:	b662      	cpsie	i
 800da2c:	b661      	cpsie	f
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	df00      	svc	0
 800da38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da3a:	bf00      	nop
 800da3c:	e000ed08 	.word	0xe000ed08

0800da40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da46:	4b37      	ldr	r3, [pc, #220]	; (800db24 <xPortStartScheduler+0xe4>)
 800da48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	22ff      	movs	r2, #255	; 0xff
 800da56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	4b2f      	ldr	r3, [pc, #188]	; (800db28 <xPortStartScheduler+0xe8>)
 800da6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da6e:	4b2f      	ldr	r3, [pc, #188]	; (800db2c <xPortStartScheduler+0xec>)
 800da70:	2207      	movs	r2, #7
 800da72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da74:	e009      	b.n	800da8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800da76:	4b2d      	ldr	r3, [pc, #180]	; (800db2c <xPortStartScheduler+0xec>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	3b01      	subs	r3, #1
 800da7c:	4a2b      	ldr	r2, [pc, #172]	; (800db2c <xPortStartScheduler+0xec>)
 800da7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da80:	78fb      	ldrb	r3, [r7, #3]
 800da82:	b2db      	uxtb	r3, r3
 800da84:	005b      	lsls	r3, r3, #1
 800da86:	b2db      	uxtb	r3, r3
 800da88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da8a:	78fb      	ldrb	r3, [r7, #3]
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da92:	2b80      	cmp	r3, #128	; 0x80
 800da94:	d0ef      	beq.n	800da76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800da96:	4b25      	ldr	r3, [pc, #148]	; (800db2c <xPortStartScheduler+0xec>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	f1c3 0307 	rsb	r3, r3, #7
 800da9e:	2b04      	cmp	r3, #4
 800daa0:	d00c      	beq.n	800dabc <xPortStartScheduler+0x7c>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	b672      	cpsid	i
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	b662      	cpsie	i
 800dab6:	60bb      	str	r3, [r7, #8]
}
 800dab8:	bf00      	nop
 800daba:	e7fe      	b.n	800daba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dabc:	4b1b      	ldr	r3, [pc, #108]	; (800db2c <xPortStartScheduler+0xec>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	021b      	lsls	r3, r3, #8
 800dac2:	4a1a      	ldr	r2, [pc, #104]	; (800db2c <xPortStartScheduler+0xec>)
 800dac4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dac6:	4b19      	ldr	r3, [pc, #100]	; (800db2c <xPortStartScheduler+0xec>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dace:	4a17      	ldr	r2, [pc, #92]	; (800db2c <xPortStartScheduler+0xec>)
 800dad0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dada:	4b15      	ldr	r3, [pc, #84]	; (800db30 <xPortStartScheduler+0xf0>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a14      	ldr	r2, [pc, #80]	; (800db30 <xPortStartScheduler+0xf0>)
 800dae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dae4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dae6:	4b12      	ldr	r3, [pc, #72]	; (800db30 <xPortStartScheduler+0xf0>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a11      	ldr	r2, [pc, #68]	; (800db30 <xPortStartScheduler+0xf0>)
 800daec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800daf0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800daf2:	f000 f8dd 	bl	800dcb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800daf6:	4b0f      	ldr	r3, [pc, #60]	; (800db34 <xPortStartScheduler+0xf4>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dafc:	f000 f8fc 	bl	800dcf8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db00:	4b0d      	ldr	r3, [pc, #52]	; (800db38 <xPortStartScheduler+0xf8>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a0c      	ldr	r2, [pc, #48]	; (800db38 <xPortStartScheduler+0xf8>)
 800db06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db0c:	f7ff ff84 	bl	800da18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db10:	f7fe ff6e 	bl	800c9f0 <vTaskSwitchContext>
	prvTaskExitError();
 800db14:	f7ff ff3a 	bl	800d98c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	e000e400 	.word	0xe000e400
 800db28:	20000f04 	.word	0x20000f04
 800db2c:	20000f08 	.word	0x20000f08
 800db30:	e000ed20 	.word	0xe000ed20
 800db34:	2000000c 	.word	0x2000000c
 800db38:	e000ef34 	.word	0xe000ef34

0800db3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db46:	b672      	cpsid	i
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	b662      	cpsie	i
 800db56:	607b      	str	r3, [r7, #4]
}
 800db58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db5a:	4b10      	ldr	r3, [pc, #64]	; (800db9c <vPortEnterCritical+0x60>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	3301      	adds	r3, #1
 800db60:	4a0e      	ldr	r2, [pc, #56]	; (800db9c <vPortEnterCritical+0x60>)
 800db62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db64:	4b0d      	ldr	r3, [pc, #52]	; (800db9c <vPortEnterCritical+0x60>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d111      	bne.n	800db90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db6c:	4b0c      	ldr	r3, [pc, #48]	; (800dba0 <vPortEnterCritical+0x64>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00c      	beq.n	800db90 <vPortEnterCritical+0x54>
	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	b672      	cpsid	i
 800db7c:	f383 8811 	msr	BASEPRI, r3
 800db80:	f3bf 8f6f 	isb	sy
 800db84:	f3bf 8f4f 	dsb	sy
 800db88:	b662      	cpsie	i
 800db8a:	603b      	str	r3, [r7, #0]
}
 800db8c:	bf00      	nop
 800db8e:	e7fe      	b.n	800db8e <vPortEnterCritical+0x52>
	}
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	2000000c 	.word	0x2000000c
 800dba0:	e000ed04 	.word	0xe000ed04

0800dba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b083      	sub	sp, #12
 800dba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbaa:	4b13      	ldr	r3, [pc, #76]	; (800dbf8 <vPortExitCritical+0x54>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d10c      	bne.n	800dbcc <vPortExitCritical+0x28>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	b672      	cpsid	i
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	b662      	cpsie	i
 800dbc6:	607b      	str	r3, [r7, #4]
}
 800dbc8:	bf00      	nop
 800dbca:	e7fe      	b.n	800dbca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <vPortExitCritical+0x54>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3b01      	subs	r3, #1
 800dbd2:	4a09      	ldr	r2, [pc, #36]	; (800dbf8 <vPortExitCritical+0x54>)
 800dbd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbd6:	4b08      	ldr	r3, [pc, #32]	; (800dbf8 <vPortExitCritical+0x54>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d105      	bne.n	800dbea <vPortExitCritical+0x46>
 800dbde:	2300      	movs	r3, #0
 800dbe0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	f383 8811 	msr	BASEPRI, r3
}
 800dbe8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbea:	bf00      	nop
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr
 800dbf6:	bf00      	nop
 800dbf8:	2000000c 	.word	0x2000000c
 800dbfc:	00000000 	.word	0x00000000

0800dc00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc00:	f3ef 8009 	mrs	r0, PSP
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <pxCurrentTCBConst>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	f01e 0f10 	tst.w	lr, #16
 800dc10:	bf08      	it	eq
 800dc12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1a:	6010      	str	r0, [r2, #0]
 800dc1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc24:	b672      	cpsid	i
 800dc26:	f380 8811 	msr	BASEPRI, r0
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	b662      	cpsie	i
 800dc34:	f7fe fedc 	bl	800c9f0 <vTaskSwitchContext>
 800dc38:	f04f 0000 	mov.w	r0, #0
 800dc3c:	f380 8811 	msr	BASEPRI, r0
 800dc40:	bc09      	pop	{r0, r3}
 800dc42:	6819      	ldr	r1, [r3, #0]
 800dc44:	6808      	ldr	r0, [r1, #0]
 800dc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4a:	f01e 0f10 	tst.w	lr, #16
 800dc4e:	bf08      	it	eq
 800dc50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc54:	f380 8809 	msr	PSP, r0
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop

0800dc60 <pxCurrentTCBConst>:
 800dc60:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc64:	bf00      	nop
 800dc66:	bf00      	nop

0800dc68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	b672      	cpsid	i
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	b662      	cpsie	i
 800dc82:	607b      	str	r3, [r7, #4]
}
 800dc84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc86:	f7fe fdf7 	bl	800c878 <xTaskIncrementTick>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d003      	beq.n	800dc98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc90:	4b06      	ldr	r3, [pc, #24]	; (800dcac <SysTick_Handler+0x44>)
 800dc92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc96:	601a      	str	r2, [r3, #0]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	f383 8811 	msr	BASEPRI, r3
}
 800dca2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	e000ed04 	.word	0xe000ed04

0800dcb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcb4:	4b0b      	ldr	r3, [pc, #44]	; (800dce4 <vPortSetupTimerInterrupt+0x34>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcba:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <vPortSetupTimerInterrupt+0x38>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <vPortSetupTimerInterrupt+0x3c>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4a0a      	ldr	r2, [pc, #40]	; (800dcf0 <vPortSetupTimerInterrupt+0x40>)
 800dcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcca:	099b      	lsrs	r3, r3, #6
 800dccc:	4a09      	ldr	r2, [pc, #36]	; (800dcf4 <vPortSetupTimerInterrupt+0x44>)
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcd2:	4b04      	ldr	r3, [pc, #16]	; (800dce4 <vPortSetupTimerInterrupt+0x34>)
 800dcd4:	2207      	movs	r2, #7
 800dcd6:	601a      	str	r2, [r3, #0]
}
 800dcd8:	bf00      	nop
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
 800dce2:	bf00      	nop
 800dce4:	e000e010 	.word	0xe000e010
 800dce8:	e000e018 	.word	0xe000e018
 800dcec:	20000000 	.word	0x20000000
 800dcf0:	10624dd3 	.word	0x10624dd3
 800dcf4:	e000e014 	.word	0xe000e014

0800dcf8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dcf8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd08 <vPortEnableVFP+0x10>
 800dcfc:	6801      	ldr	r1, [r0, #0]
 800dcfe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd02:	6001      	str	r1, [r0, #0]
 800dd04:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd06:	bf00      	nop
 800dd08:	e000ed88 	.word	0xe000ed88

0800dd0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd12:	f3ef 8305 	mrs	r3, IPSR
 800dd16:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2b0f      	cmp	r3, #15
 800dd1c:	d916      	bls.n	800dd4c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd1e:	4a19      	ldr	r2, [pc, #100]	; (800dd84 <vPortValidateInterruptPriority+0x78>)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	4413      	add	r3, r2
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd28:	4b17      	ldr	r3, [pc, #92]	; (800dd88 <vPortValidateInterruptPriority+0x7c>)
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	7afa      	ldrb	r2, [r7, #11]
 800dd2e:	429a      	cmp	r2, r3
 800dd30:	d20c      	bcs.n	800dd4c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	b672      	cpsid	i
 800dd38:	f383 8811 	msr	BASEPRI, r3
 800dd3c:	f3bf 8f6f 	isb	sy
 800dd40:	f3bf 8f4f 	dsb	sy
 800dd44:	b662      	cpsie	i
 800dd46:	607b      	str	r3, [r7, #4]
}
 800dd48:	bf00      	nop
 800dd4a:	e7fe      	b.n	800dd4a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd4c:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <vPortValidateInterruptPriority+0x80>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd54:	4b0e      	ldr	r3, [pc, #56]	; (800dd90 <vPortValidateInterruptPriority+0x84>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d90c      	bls.n	800dd76 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800dd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd60:	b672      	cpsid	i
 800dd62:	f383 8811 	msr	BASEPRI, r3
 800dd66:	f3bf 8f6f 	isb	sy
 800dd6a:	f3bf 8f4f 	dsb	sy
 800dd6e:	b662      	cpsie	i
 800dd70:	603b      	str	r3, [r7, #0]
}
 800dd72:	bf00      	nop
 800dd74:	e7fe      	b.n	800dd74 <vPortValidateInterruptPriority+0x68>
	}
 800dd76:	bf00      	nop
 800dd78:	3714      	adds	r7, #20
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	e000e3f0 	.word	0xe000e3f0
 800dd88:	20000f04 	.word	0x20000f04
 800dd8c:	e000ed0c 	.word	0xe000ed0c
 800dd90:	20000f08 	.word	0x20000f08

0800dd94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08a      	sub	sp, #40	; 0x28
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dda0:	f7fe fc9a 	bl	800c6d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dda4:	4b5b      	ldr	r3, [pc, #364]	; (800df14 <pvPortMalloc+0x180>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d101      	bne.n	800ddb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddac:	f000 f91a 	bl	800dfe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddb0:	4b59      	ldr	r3, [pc, #356]	; (800df18 <pvPortMalloc+0x184>)
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f040 8092 	bne.w	800dee2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d01f      	beq.n	800de04 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ddc4:	2208      	movs	r2, #8
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	4413      	add	r3, r2
 800ddca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f003 0307 	and.w	r3, r3, #7
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d016      	beq.n	800de04 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f023 0307 	bic.w	r3, r3, #7
 800dddc:	3308      	adds	r3, #8
 800ddde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f003 0307 	and.w	r3, r3, #7
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d00c      	beq.n	800de04 <pvPortMalloc+0x70>
	__asm volatile
 800ddea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddee:	b672      	cpsid	i
 800ddf0:	f383 8811 	msr	BASEPRI, r3
 800ddf4:	f3bf 8f6f 	isb	sy
 800ddf8:	f3bf 8f4f 	dsb	sy
 800ddfc:	b662      	cpsie	i
 800ddfe:	617b      	str	r3, [r7, #20]
}
 800de00:	bf00      	nop
 800de02:	e7fe      	b.n	800de02 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d06b      	beq.n	800dee2 <pvPortMalloc+0x14e>
 800de0a:	4b44      	ldr	r3, [pc, #272]	; (800df1c <pvPortMalloc+0x188>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	429a      	cmp	r2, r3
 800de12:	d866      	bhi.n	800dee2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de14:	4b42      	ldr	r3, [pc, #264]	; (800df20 <pvPortMalloc+0x18c>)
 800de16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de18:	4b41      	ldr	r3, [pc, #260]	; (800df20 <pvPortMalloc+0x18c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de1e:	e004      	b.n	800de2a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	d903      	bls.n	800de3c <pvPortMalloc+0xa8>
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f1      	bne.n	800de20 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de3c:	4b35      	ldr	r3, [pc, #212]	; (800df14 <pvPortMalloc+0x180>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	429a      	cmp	r2, r3
 800de44:	d04d      	beq.n	800dee2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2208      	movs	r2, #8
 800de4c:	4413      	add	r3, r2
 800de4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	1ad2      	subs	r2, r2, r3
 800de60:	2308      	movs	r3, #8
 800de62:	005b      	lsls	r3, r3, #1
 800de64:	429a      	cmp	r2, r3
 800de66:	d921      	bls.n	800deac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4413      	add	r3, r2
 800de6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	f003 0307 	and.w	r3, r3, #7
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00c      	beq.n	800de94 <pvPortMalloc+0x100>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	b672      	cpsid	i
 800de80:	f383 8811 	msr	BASEPRI, r3
 800de84:	f3bf 8f6f 	isb	sy
 800de88:	f3bf 8f4f 	dsb	sy
 800de8c:	b662      	cpsie	i
 800de8e:	613b      	str	r3, [r7, #16]
}
 800de90:	bf00      	nop
 800de92:	e7fe      	b.n	800de92 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	685a      	ldr	r2, [r3, #4]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	1ad2      	subs	r2, r2, r3
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dea6:	69b8      	ldr	r0, [r7, #24]
 800dea8:	f000 f8fe 	bl	800e0a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800deac:	4b1b      	ldr	r3, [pc, #108]	; (800df1c <pvPortMalloc+0x188>)
 800deae:	681a      	ldr	r2, [r3, #0]
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	4a19      	ldr	r2, [pc, #100]	; (800df1c <pvPortMalloc+0x188>)
 800deb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800deba:	4b18      	ldr	r3, [pc, #96]	; (800df1c <pvPortMalloc+0x188>)
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	4b19      	ldr	r3, [pc, #100]	; (800df24 <pvPortMalloc+0x190>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d203      	bcs.n	800dece <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dec6:	4b15      	ldr	r3, [pc, #84]	; (800df1c <pvPortMalloc+0x188>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a16      	ldr	r2, [pc, #88]	; (800df24 <pvPortMalloc+0x190>)
 800decc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	4b11      	ldr	r3, [pc, #68]	; (800df18 <pvPortMalloc+0x184>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	431a      	orrs	r2, r3
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	2200      	movs	r2, #0
 800dee0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dee2:	f7fe fc07 	bl	800c6f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	f003 0307 	and.w	r3, r3, #7
 800deec:	2b00      	cmp	r3, #0
 800deee:	d00c      	beq.n	800df0a <pvPortMalloc+0x176>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	b672      	cpsid	i
 800def6:	f383 8811 	msr	BASEPRI, r3
 800defa:	f3bf 8f6f 	isb	sy
 800defe:	f3bf 8f4f 	dsb	sy
 800df02:	b662      	cpsie	i
 800df04:	60fb      	str	r3, [r7, #12]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <pvPortMalloc+0x174>
	return pvReturn;
 800df0a:	69fb      	ldr	r3, [r7, #28]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3728      	adds	r7, #40	; 0x28
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	20004b14 	.word	0x20004b14
 800df18:	20004b20 	.word	0x20004b20
 800df1c:	20004b18 	.word	0x20004b18
 800df20:	20004b0c 	.word	0x20004b0c
 800df24:	20004b1c 	.word	0x20004b1c

0800df28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d04c      	beq.n	800dfd4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df3a:	2308      	movs	r3, #8
 800df3c:	425b      	negs	r3, r3
 800df3e:	697a      	ldr	r2, [r7, #20]
 800df40:	4413      	add	r3, r2
 800df42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	4b23      	ldr	r3, [pc, #140]	; (800dfdc <vPortFree+0xb4>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4013      	ands	r3, r2
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10c      	bne.n	800df70 <vPortFree+0x48>
	__asm volatile
 800df56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5a:	b672      	cpsid	i
 800df5c:	f383 8811 	msr	BASEPRI, r3
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	f3bf 8f4f 	dsb	sy
 800df68:	b662      	cpsie	i
 800df6a:	60fb      	str	r3, [r7, #12]
}
 800df6c:	bf00      	nop
 800df6e:	e7fe      	b.n	800df6e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00c      	beq.n	800df92 <vPortFree+0x6a>
	__asm volatile
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	b672      	cpsid	i
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	b662      	cpsie	i
 800df8c:	60bb      	str	r3, [r7, #8]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	685a      	ldr	r2, [r3, #4]
 800df96:	4b11      	ldr	r3, [pc, #68]	; (800dfdc <vPortFree+0xb4>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d019      	beq.n	800dfd4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d115      	bne.n	800dfd4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	4b0b      	ldr	r3, [pc, #44]	; (800dfdc <vPortFree+0xb4>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	43db      	mvns	r3, r3
 800dfb2:	401a      	ands	r2, r3
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dfb8:	f7fe fb8e 	bl	800c6d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	4b07      	ldr	r3, [pc, #28]	; (800dfe0 <vPortFree+0xb8>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	4a06      	ldr	r2, [pc, #24]	; (800dfe0 <vPortFree+0xb8>)
 800dfc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfca:	6938      	ldr	r0, [r7, #16]
 800dfcc:	f000 f86c 	bl	800e0a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dfd0:	f7fe fb90 	bl	800c6f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfd4:	bf00      	nop
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	20004b20 	.word	0x20004b20
 800dfe0:	20004b18 	.word	0x20004b18

0800dfe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dfee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dff0:	4b27      	ldr	r3, [pc, #156]	; (800e090 <prvHeapInit+0xac>)
 800dff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f003 0307 	and.w	r3, r3, #7
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d00c      	beq.n	800e018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	3307      	adds	r3, #7
 800e002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f023 0307 	bic.w	r3, r3, #7
 800e00a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	4a1f      	ldr	r2, [pc, #124]	; (800e090 <prvHeapInit+0xac>)
 800e014:	4413      	add	r3, r2
 800e016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e01c:	4a1d      	ldr	r2, [pc, #116]	; (800e094 <prvHeapInit+0xb0>)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e022:	4b1c      	ldr	r3, [pc, #112]	; (800e094 <prvHeapInit+0xb0>)
 800e024:	2200      	movs	r2, #0
 800e026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	4413      	add	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e030:	2208      	movs	r2, #8
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	1a9b      	subs	r3, r3, r2
 800e036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f023 0307 	bic.w	r3, r3, #7
 800e03e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4a15      	ldr	r2, [pc, #84]	; (800e098 <prvHeapInit+0xb4>)
 800e044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e046:	4b14      	ldr	r3, [pc, #80]	; (800e098 <prvHeapInit+0xb4>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2200      	movs	r2, #0
 800e04c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e04e:	4b12      	ldr	r3, [pc, #72]	; (800e098 <prvHeapInit+0xb4>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	68fa      	ldr	r2, [r7, #12]
 800e05e:	1ad2      	subs	r2, r2, r3
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e064:	4b0c      	ldr	r3, [pc, #48]	; (800e098 <prvHeapInit+0xb4>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	4a0a      	ldr	r2, [pc, #40]	; (800e09c <prvHeapInit+0xb8>)
 800e072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	4a09      	ldr	r2, [pc, #36]	; (800e0a0 <prvHeapInit+0xbc>)
 800e07a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e07c:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <prvHeapInit+0xc0>)
 800e07e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e082:	601a      	str	r2, [r3, #0]
}
 800e084:	bf00      	nop
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	20000f0c 	.word	0x20000f0c
 800e094:	20004b0c 	.word	0x20004b0c
 800e098:	20004b14 	.word	0x20004b14
 800e09c:	20004b1c 	.word	0x20004b1c
 800e0a0:	20004b18 	.word	0x20004b18
 800e0a4:	20004b20 	.word	0x20004b20

0800e0a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0a8:	b480      	push	{r7}
 800e0aa:	b085      	sub	sp, #20
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0b0:	4b28      	ldr	r3, [pc, #160]	; (800e154 <prvInsertBlockIntoFreeList+0xac>)
 800e0b2:	60fb      	str	r3, [r7, #12]
 800e0b4:	e002      	b.n	800e0bc <prvInsertBlockIntoFreeList+0x14>
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	60fb      	str	r3, [r7, #12]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d8f7      	bhi.n	800e0b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d108      	bne.n	800e0ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	441a      	add	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	441a      	add	r2, r3
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d118      	bne.n	800e130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	4b15      	ldr	r3, [pc, #84]	; (800e158 <prvInsertBlockIntoFreeList+0xb0>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	429a      	cmp	r2, r3
 800e108:	d00d      	beq.n	800e126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685a      	ldr	r2, [r3, #4]
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	441a      	add	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	681a      	ldr	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e008      	b.n	800e138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e126:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <prvInsertBlockIntoFreeList+0xb0>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	601a      	str	r2, [r3, #0]
 800e12e:	e003      	b.n	800e138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	429a      	cmp	r2, r3
 800e13e:	d002      	beq.n	800e146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e146:	bf00      	nop
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	20004b0c 	.word	0x20004b0c
 800e158:	20004b14 	.word	0x20004b14

0800e15c <arm_sin_f32>:
 800e15c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e160:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e1d8 <arm_sin_f32+0x7c>
 800e164:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800e170:	d42c      	bmi.n	800e1cc <arm_sin_f32+0x70>
 800e172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e176:	eddf 6a19 	vldr	s13, [pc, #100]	; 800e1dc <arm_sin_f32+0x80>
 800e17a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e17e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e182:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e18a:	db01      	blt.n	800e190 <arm_sin_f32+0x34>
 800e18c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e190:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800e194:	4a12      	ldr	r2, [pc, #72]	; (800e1e0 <arm_sin_f32+0x84>)
 800e196:	ee17 3a10 	vmov	r3, s14
 800e19a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e19e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1a2:	ee06 3a90 	vmov	s13, r3
 800e1a6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800e1aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800e1ae:	ed91 0a00 	vldr	s0, [r1]
 800e1b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e1b6:	edd1 6a01 	vldr	s13, [r1, #4]
 800e1ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1c2:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e1c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e1ca:	4770      	bx	lr
 800e1cc:	ee17 3a90 	vmov	r3, s15
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	ee07 3a90 	vmov	s15, r3
 800e1d6:	e7cc      	b.n	800e172 <arm_sin_f32+0x16>
 800e1d8:	3e22f983 	.word	0x3e22f983
 800e1dc:	44000000 	.word	0x44000000
 800e1e0:	08012344 	.word	0x08012344

0800e1e4 <arm_cos_f32>:
 800e1e4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e258 <arm_cos_f32+0x74>
 800e1e8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800e1ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e1f0:	ee30 0a07 	vadd.f32	s0, s0, s14
 800e1f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e1f8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	d504      	bpl.n	800e20c <arm_cos_f32+0x28>
 800e202:	ee17 3a90 	vmov	r3, s15
 800e206:	3b01      	subs	r3, #1
 800e208:	ee07 3a90 	vmov	s15, r3
 800e20c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e210:	eddf 6a12 	vldr	s13, [pc, #72]	; 800e25c <arm_cos_f32+0x78>
 800e214:	4a12      	ldr	r2, [pc, #72]	; (800e260 <arm_cos_f32+0x7c>)
 800e216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e21a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e21e:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e222:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800e226:	ee17 3a90 	vmov	r3, s15
 800e22a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22e:	ee07 3a90 	vmov	s15, r3
 800e232:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800e236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e23a:	edd1 6a00 	vldr	s13, [r1]
 800e23e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e242:	ed91 0a01 	vldr	s0, [r1, #4]
 800e246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e24a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e24e:	ee27 0a26 	vmul.f32	s0, s14, s13
 800e252:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e256:	4770      	bx	lr
 800e258:	3e22f983 	.word	0x3e22f983
 800e25c:	44000000 	.word	0x44000000
 800e260:	08012344 	.word	0x08012344

0800e264 <_Znwj>:
 800e264:	2801      	cmp	r0, #1
 800e266:	bf38      	it	cc
 800e268:	2001      	movcc	r0, #1
 800e26a:	b510      	push	{r4, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	4620      	mov	r0, r4
 800e270:	f000 f986 	bl	800e580 <malloc>
 800e274:	b930      	cbnz	r0, 800e284 <_Znwj+0x20>
 800e276:	f000 f81b 	bl	800e2b0 <_ZSt15get_new_handlerv>
 800e27a:	b908      	cbnz	r0, 800e280 <_Znwj+0x1c>
 800e27c:	f000 f94e 	bl	800e51c <abort>
 800e280:	4780      	blx	r0
 800e282:	e7f4      	b.n	800e26e <_Znwj+0xa>
 800e284:	bd10      	pop	{r4, pc}

0800e286 <__cxa_pure_virtual>:
 800e286:	b508      	push	{r3, lr}
 800e288:	f000 f80c 	bl	800e2a4 <_ZSt9terminatev>

0800e28c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800e28c:	b508      	push	{r3, lr}
 800e28e:	4780      	blx	r0
 800e290:	f000 f944 	bl	800e51c <abort>

0800e294 <_ZSt13get_terminatev>:
 800e294:	4b02      	ldr	r3, [pc, #8]	; (800e2a0 <_ZSt13get_terminatev+0xc>)
 800e296:	6818      	ldr	r0, [r3, #0]
 800e298:	f3bf 8f5b 	dmb	ish
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	20000010 	.word	0x20000010

0800e2a4 <_ZSt9terminatev>:
 800e2a4:	b508      	push	{r3, lr}
 800e2a6:	f7ff fff5 	bl	800e294 <_ZSt13get_terminatev>
 800e2aa:	f7ff ffef 	bl	800e28c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800e2b0 <_ZSt15get_new_handlerv>:
 800e2b0:	4b02      	ldr	r3, [pc, #8]	; (800e2bc <_ZSt15get_new_handlerv+0xc>)
 800e2b2:	6818      	ldr	r0, [r3, #0]
 800e2b4:	f3bf 8f5b 	dmb	ish
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	20004b24 	.word	0x20004b24

0800e2c0 <floor>:
 800e2c0:	ec51 0b10 	vmov	r0, r1, d0
 800e2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e2cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e2d0:	2e13      	cmp	r6, #19
 800e2d2:	ee10 5a10 	vmov	r5, s0
 800e2d6:	ee10 8a10 	vmov	r8, s0
 800e2da:	460c      	mov	r4, r1
 800e2dc:	dc32      	bgt.n	800e344 <floor+0x84>
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	da14      	bge.n	800e30c <floor+0x4c>
 800e2e2:	a333      	add	r3, pc, #204	; (adr r3, 800e3b0 <floor+0xf0>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	f7f1 fff8 	bl	80002dc <__adddf3>
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f7f2 fc3a 	bl	8000b68 <__aeabi_dcmpgt>
 800e2f4:	b138      	cbz	r0, 800e306 <floor+0x46>
 800e2f6:	2c00      	cmp	r4, #0
 800e2f8:	da57      	bge.n	800e3aa <floor+0xea>
 800e2fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e2fe:	431d      	orrs	r5, r3
 800e300:	d001      	beq.n	800e306 <floor+0x46>
 800e302:	4c2d      	ldr	r4, [pc, #180]	; (800e3b8 <floor+0xf8>)
 800e304:	2500      	movs	r5, #0
 800e306:	4621      	mov	r1, r4
 800e308:	4628      	mov	r0, r5
 800e30a:	e025      	b.n	800e358 <floor+0x98>
 800e30c:	4f2b      	ldr	r7, [pc, #172]	; (800e3bc <floor+0xfc>)
 800e30e:	4137      	asrs	r7, r6
 800e310:	ea01 0307 	and.w	r3, r1, r7
 800e314:	4303      	orrs	r3, r0
 800e316:	d01f      	beq.n	800e358 <floor+0x98>
 800e318:	a325      	add	r3, pc, #148	; (adr r3, 800e3b0 <floor+0xf0>)
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	f7f1 ffdd 	bl	80002dc <__adddf3>
 800e322:	2200      	movs	r2, #0
 800e324:	2300      	movs	r3, #0
 800e326:	f7f2 fc1f 	bl	8000b68 <__aeabi_dcmpgt>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d0eb      	beq.n	800e306 <floor+0x46>
 800e32e:	2c00      	cmp	r4, #0
 800e330:	bfbe      	ittt	lt
 800e332:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e336:	fa43 f606 	asrlt.w	r6, r3, r6
 800e33a:	19a4      	addlt	r4, r4, r6
 800e33c:	ea24 0407 	bic.w	r4, r4, r7
 800e340:	2500      	movs	r5, #0
 800e342:	e7e0      	b.n	800e306 <floor+0x46>
 800e344:	2e33      	cmp	r6, #51	; 0x33
 800e346:	dd0b      	ble.n	800e360 <floor+0xa0>
 800e348:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e34c:	d104      	bne.n	800e358 <floor+0x98>
 800e34e:	ee10 2a10 	vmov	r2, s0
 800e352:	460b      	mov	r3, r1
 800e354:	f7f1 ffc2 	bl	80002dc <__adddf3>
 800e358:	ec41 0b10 	vmov	d0, r0, r1
 800e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e360:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e364:	f04f 33ff 	mov.w	r3, #4294967295
 800e368:	fa23 f707 	lsr.w	r7, r3, r7
 800e36c:	4207      	tst	r7, r0
 800e36e:	d0f3      	beq.n	800e358 <floor+0x98>
 800e370:	a30f      	add	r3, pc, #60	; (adr r3, 800e3b0 <floor+0xf0>)
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	f7f1 ffb1 	bl	80002dc <__adddf3>
 800e37a:	2200      	movs	r2, #0
 800e37c:	2300      	movs	r3, #0
 800e37e:	f7f2 fbf3 	bl	8000b68 <__aeabi_dcmpgt>
 800e382:	2800      	cmp	r0, #0
 800e384:	d0bf      	beq.n	800e306 <floor+0x46>
 800e386:	2c00      	cmp	r4, #0
 800e388:	da02      	bge.n	800e390 <floor+0xd0>
 800e38a:	2e14      	cmp	r6, #20
 800e38c:	d103      	bne.n	800e396 <floor+0xd6>
 800e38e:	3401      	adds	r4, #1
 800e390:	ea25 0507 	bic.w	r5, r5, r7
 800e394:	e7b7      	b.n	800e306 <floor+0x46>
 800e396:	2301      	movs	r3, #1
 800e398:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e39c:	fa03 f606 	lsl.w	r6, r3, r6
 800e3a0:	4435      	add	r5, r6
 800e3a2:	4545      	cmp	r5, r8
 800e3a4:	bf38      	it	cc
 800e3a6:	18e4      	addcc	r4, r4, r3
 800e3a8:	e7f2      	b.n	800e390 <floor+0xd0>
 800e3aa:	2500      	movs	r5, #0
 800e3ac:	462c      	mov	r4, r5
 800e3ae:	e7aa      	b.n	800e306 <floor+0x46>
 800e3b0:	8800759c 	.word	0x8800759c
 800e3b4:	7e37e43c 	.word	0x7e37e43c
 800e3b8:	bff00000 	.word	0xbff00000
 800e3bc:	000fffff 	.word	0x000fffff

0800e3c0 <fmodf>:
 800e3c0:	b508      	push	{r3, lr}
 800e3c2:	ed2d 8b02 	vpush	{d8}
 800e3c6:	eef0 8a40 	vmov.f32	s17, s0
 800e3ca:	eeb0 8a60 	vmov.f32	s16, s1
 800e3ce:	f000 f823 	bl	800e418 <__ieee754_fmodf>
 800e3d2:	4b0f      	ldr	r3, [pc, #60]	; (800e410 <fmodf+0x50>)
 800e3d4:	f993 3000 	ldrsb.w	r3, [r3]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	d016      	beq.n	800e40a <fmodf+0x4a>
 800e3dc:	eeb4 8a48 	vcmp.f32	s16, s16
 800e3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e4:	d611      	bvs.n	800e40a <fmodf+0x4a>
 800e3e6:	eef4 8a68 	vcmp.f32	s17, s17
 800e3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ee:	d60c      	bvs.n	800e40a <fmodf+0x4a>
 800e3f0:	eddf 8a08 	vldr	s17, [pc, #32]	; 800e414 <fmodf+0x54>
 800e3f4:	eeb4 8a68 	vcmp.f32	s16, s17
 800e3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3fc:	d105      	bne.n	800e40a <fmodf+0x4a>
 800e3fe:	f000 f895 	bl	800e52c <__errno>
 800e402:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e406:	2321      	movs	r3, #33	; 0x21
 800e408:	6003      	str	r3, [r0, #0]
 800e40a:	ecbd 8b02 	vpop	{d8}
 800e40e:	bd08      	pop	{r3, pc}
 800e410:	20000014 	.word	0x20000014
 800e414:	00000000 	.word	0x00000000

0800e418 <__ieee754_fmodf>:
 800e418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e41a:	ee10 6a90 	vmov	r6, s1
 800e41e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800e422:	d009      	beq.n	800e438 <__ieee754_fmodf+0x20>
 800e424:	ee10 2a10 	vmov	r2, s0
 800e428:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e42c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e430:	da02      	bge.n	800e438 <__ieee754_fmodf+0x20>
 800e432:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e436:	dd04      	ble.n	800e442 <__ieee754_fmodf+0x2a>
 800e438:	ee60 0a20 	vmul.f32	s1, s0, s1
 800e43c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800e440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e442:	42ab      	cmp	r3, r5
 800e444:	dbfc      	blt.n	800e440 <__ieee754_fmodf+0x28>
 800e446:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 800e44a:	d106      	bne.n	800e45a <__ieee754_fmodf+0x42>
 800e44c:	4a32      	ldr	r2, [pc, #200]	; (800e518 <__ieee754_fmodf+0x100>)
 800e44e:	0fe3      	lsrs	r3, r4, #31
 800e450:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e454:	ed93 0a00 	vldr	s0, [r3]
 800e458:	e7f2      	b.n	800e440 <__ieee754_fmodf+0x28>
 800e45a:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800e45e:	d13f      	bne.n	800e4e0 <__ieee754_fmodf+0xc8>
 800e460:	0219      	lsls	r1, r3, #8
 800e462:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800e466:	2900      	cmp	r1, #0
 800e468:	dc37      	bgt.n	800e4da <__ieee754_fmodf+0xc2>
 800e46a:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800e46e:	d13d      	bne.n	800e4ec <__ieee754_fmodf+0xd4>
 800e470:	022f      	lsls	r7, r5, #8
 800e472:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800e476:	2f00      	cmp	r7, #0
 800e478:	da35      	bge.n	800e4e6 <__ieee754_fmodf+0xce>
 800e47a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800e47e:	bfbb      	ittet	lt
 800e480:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e484:	1a12      	sublt	r2, r2, r0
 800e486:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800e48a:	4093      	lsllt	r3, r2
 800e48c:	bfa8      	it	ge
 800e48e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800e492:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e496:	bfb5      	itete	lt
 800e498:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800e49c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800e4a0:	1a52      	sublt	r2, r2, r1
 800e4a2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800e4a6:	bfb8      	it	lt
 800e4a8:	4095      	lsllt	r5, r2
 800e4aa:	1a40      	subs	r0, r0, r1
 800e4ac:	1b5a      	subs	r2, r3, r5
 800e4ae:	bb00      	cbnz	r0, 800e4f2 <__ieee754_fmodf+0xda>
 800e4b0:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800e4b4:	bf38      	it	cc
 800e4b6:	4613      	movcc	r3, r2
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d0c7      	beq.n	800e44c <__ieee754_fmodf+0x34>
 800e4bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4c0:	db1f      	blt.n	800e502 <__ieee754_fmodf+0xea>
 800e4c2:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800e4c6:	db1f      	blt.n	800e508 <__ieee754_fmodf+0xf0>
 800e4c8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800e4cc:	317f      	adds	r1, #127	; 0x7f
 800e4ce:	4323      	orrs	r3, r4
 800e4d0:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800e4d4:	ee00 3a10 	vmov	s0, r3
 800e4d8:	e7b2      	b.n	800e440 <__ieee754_fmodf+0x28>
 800e4da:	3801      	subs	r0, #1
 800e4dc:	0049      	lsls	r1, r1, #1
 800e4de:	e7c2      	b.n	800e466 <__ieee754_fmodf+0x4e>
 800e4e0:	15d8      	asrs	r0, r3, #23
 800e4e2:	387f      	subs	r0, #127	; 0x7f
 800e4e4:	e7c1      	b.n	800e46a <__ieee754_fmodf+0x52>
 800e4e6:	3901      	subs	r1, #1
 800e4e8:	007f      	lsls	r7, r7, #1
 800e4ea:	e7c4      	b.n	800e476 <__ieee754_fmodf+0x5e>
 800e4ec:	15e9      	asrs	r1, r5, #23
 800e4ee:	397f      	subs	r1, #127	; 0x7f
 800e4f0:	e7c3      	b.n	800e47a <__ieee754_fmodf+0x62>
 800e4f2:	2a00      	cmp	r2, #0
 800e4f4:	da02      	bge.n	800e4fc <__ieee754_fmodf+0xe4>
 800e4f6:	005b      	lsls	r3, r3, #1
 800e4f8:	3801      	subs	r0, #1
 800e4fa:	e7d7      	b.n	800e4ac <__ieee754_fmodf+0x94>
 800e4fc:	d0a6      	beq.n	800e44c <__ieee754_fmodf+0x34>
 800e4fe:	0053      	lsls	r3, r2, #1
 800e500:	e7fa      	b.n	800e4f8 <__ieee754_fmodf+0xe0>
 800e502:	005b      	lsls	r3, r3, #1
 800e504:	3901      	subs	r1, #1
 800e506:	e7d9      	b.n	800e4bc <__ieee754_fmodf+0xa4>
 800e508:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800e50c:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800e510:	3182      	adds	r1, #130	; 0x82
 800e512:	410b      	asrs	r3, r1
 800e514:	4323      	orrs	r3, r4
 800e516:	e7dd      	b.n	800e4d4 <__ieee754_fmodf+0xbc>
 800e518:	08012b48 	.word	0x08012b48

0800e51c <abort>:
 800e51c:	b508      	push	{r3, lr}
 800e51e:	2006      	movs	r0, #6
 800e520:	f000 fe26 	bl	800f170 <raise>
 800e524:	2001      	movs	r0, #1
 800e526:	f7f6 ff1b 	bl	8005360 <_exit>
	...

0800e52c <__errno>:
 800e52c:	4b01      	ldr	r3, [pc, #4]	; (800e534 <__errno+0x8>)
 800e52e:	6818      	ldr	r0, [r3, #0]
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	20000018 	.word	0x20000018

0800e538 <__libc_init_array>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	4d0d      	ldr	r5, [pc, #52]	; (800e570 <__libc_init_array+0x38>)
 800e53c:	4c0d      	ldr	r4, [pc, #52]	; (800e574 <__libc_init_array+0x3c>)
 800e53e:	1b64      	subs	r4, r4, r5
 800e540:	10a4      	asrs	r4, r4, #2
 800e542:	2600      	movs	r6, #0
 800e544:	42a6      	cmp	r6, r4
 800e546:	d109      	bne.n	800e55c <__libc_init_array+0x24>
 800e548:	4d0b      	ldr	r5, [pc, #44]	; (800e578 <__libc_init_array+0x40>)
 800e54a:	4c0c      	ldr	r4, [pc, #48]	; (800e57c <__libc_init_array+0x44>)
 800e54c:	f002 fd76 	bl	801103c <_init>
 800e550:	1b64      	subs	r4, r4, r5
 800e552:	10a4      	asrs	r4, r4, #2
 800e554:	2600      	movs	r6, #0
 800e556:	42a6      	cmp	r6, r4
 800e558:	d105      	bne.n	800e566 <__libc_init_array+0x2e>
 800e55a:	bd70      	pop	{r4, r5, r6, pc}
 800e55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e560:	4798      	blx	r3
 800e562:	3601      	adds	r6, #1
 800e564:	e7ee      	b.n	800e544 <__libc_init_array+0xc>
 800e566:	f855 3b04 	ldr.w	r3, [r5], #4
 800e56a:	4798      	blx	r3
 800e56c:	3601      	adds	r6, #1
 800e56e:	e7f2      	b.n	800e556 <__libc_init_array+0x1e>
 800e570:	08012f3c 	.word	0x08012f3c
 800e574:	08012f3c 	.word	0x08012f3c
 800e578:	08012f3c 	.word	0x08012f3c
 800e57c:	08012f40 	.word	0x08012f40

0800e580 <malloc>:
 800e580:	4b02      	ldr	r3, [pc, #8]	; (800e58c <malloc+0xc>)
 800e582:	4601      	mov	r1, r0
 800e584:	6818      	ldr	r0, [r3, #0]
 800e586:	f000 b869 	b.w	800e65c <_malloc_r>
 800e58a:	bf00      	nop
 800e58c:	20000018 	.word	0x20000018

0800e590 <memcpy>:
 800e590:	440a      	add	r2, r1
 800e592:	4291      	cmp	r1, r2
 800e594:	f100 33ff 	add.w	r3, r0, #4294967295
 800e598:	d100      	bne.n	800e59c <memcpy+0xc>
 800e59a:	4770      	bx	lr
 800e59c:	b510      	push	{r4, lr}
 800e59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5a6:	4291      	cmp	r1, r2
 800e5a8:	d1f9      	bne.n	800e59e <memcpy+0xe>
 800e5aa:	bd10      	pop	{r4, pc}

0800e5ac <memset>:
 800e5ac:	4402      	add	r2, r0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d100      	bne.n	800e5b6 <memset+0xa>
 800e5b4:	4770      	bx	lr
 800e5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ba:	e7f9      	b.n	800e5b0 <memset+0x4>

0800e5bc <_free_r>:
 800e5bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5be:	2900      	cmp	r1, #0
 800e5c0:	d048      	beq.n	800e654 <_free_r+0x98>
 800e5c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5c6:	9001      	str	r0, [sp, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e5ce:	bfb8      	it	lt
 800e5d0:	18e4      	addlt	r4, r4, r3
 800e5d2:	f001 ff45 	bl	8010460 <__malloc_lock>
 800e5d6:	4a20      	ldr	r2, [pc, #128]	; (800e658 <_free_r+0x9c>)
 800e5d8:	9801      	ldr	r0, [sp, #4]
 800e5da:	6813      	ldr	r3, [r2, #0]
 800e5dc:	4615      	mov	r5, r2
 800e5de:	b933      	cbnz	r3, 800e5ee <_free_r+0x32>
 800e5e0:	6063      	str	r3, [r4, #4]
 800e5e2:	6014      	str	r4, [r2, #0]
 800e5e4:	b003      	add	sp, #12
 800e5e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5ea:	f001 bf3f 	b.w	801046c <__malloc_unlock>
 800e5ee:	42a3      	cmp	r3, r4
 800e5f0:	d90b      	bls.n	800e60a <_free_r+0x4e>
 800e5f2:	6821      	ldr	r1, [r4, #0]
 800e5f4:	1862      	adds	r2, r4, r1
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	bf04      	itt	eq
 800e5fa:	681a      	ldreq	r2, [r3, #0]
 800e5fc:	685b      	ldreq	r3, [r3, #4]
 800e5fe:	6063      	str	r3, [r4, #4]
 800e600:	bf04      	itt	eq
 800e602:	1852      	addeq	r2, r2, r1
 800e604:	6022      	streq	r2, [r4, #0]
 800e606:	602c      	str	r4, [r5, #0]
 800e608:	e7ec      	b.n	800e5e4 <_free_r+0x28>
 800e60a:	461a      	mov	r2, r3
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	b10b      	cbz	r3, 800e614 <_free_r+0x58>
 800e610:	42a3      	cmp	r3, r4
 800e612:	d9fa      	bls.n	800e60a <_free_r+0x4e>
 800e614:	6811      	ldr	r1, [r2, #0]
 800e616:	1855      	adds	r5, r2, r1
 800e618:	42a5      	cmp	r5, r4
 800e61a:	d10b      	bne.n	800e634 <_free_r+0x78>
 800e61c:	6824      	ldr	r4, [r4, #0]
 800e61e:	4421      	add	r1, r4
 800e620:	1854      	adds	r4, r2, r1
 800e622:	42a3      	cmp	r3, r4
 800e624:	6011      	str	r1, [r2, #0]
 800e626:	d1dd      	bne.n	800e5e4 <_free_r+0x28>
 800e628:	681c      	ldr	r4, [r3, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	6053      	str	r3, [r2, #4]
 800e62e:	4421      	add	r1, r4
 800e630:	6011      	str	r1, [r2, #0]
 800e632:	e7d7      	b.n	800e5e4 <_free_r+0x28>
 800e634:	d902      	bls.n	800e63c <_free_r+0x80>
 800e636:	230c      	movs	r3, #12
 800e638:	6003      	str	r3, [r0, #0]
 800e63a:	e7d3      	b.n	800e5e4 <_free_r+0x28>
 800e63c:	6825      	ldr	r5, [r4, #0]
 800e63e:	1961      	adds	r1, r4, r5
 800e640:	428b      	cmp	r3, r1
 800e642:	bf04      	itt	eq
 800e644:	6819      	ldreq	r1, [r3, #0]
 800e646:	685b      	ldreq	r3, [r3, #4]
 800e648:	6063      	str	r3, [r4, #4]
 800e64a:	bf04      	itt	eq
 800e64c:	1949      	addeq	r1, r1, r5
 800e64e:	6021      	streq	r1, [r4, #0]
 800e650:	6054      	str	r4, [r2, #4]
 800e652:	e7c7      	b.n	800e5e4 <_free_r+0x28>
 800e654:	b003      	add	sp, #12
 800e656:	bd30      	pop	{r4, r5, pc}
 800e658:	20004b28 	.word	0x20004b28

0800e65c <_malloc_r>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	1ccd      	adds	r5, r1, #3
 800e660:	f025 0503 	bic.w	r5, r5, #3
 800e664:	3508      	adds	r5, #8
 800e666:	2d0c      	cmp	r5, #12
 800e668:	bf38      	it	cc
 800e66a:	250c      	movcc	r5, #12
 800e66c:	2d00      	cmp	r5, #0
 800e66e:	4606      	mov	r6, r0
 800e670:	db01      	blt.n	800e676 <_malloc_r+0x1a>
 800e672:	42a9      	cmp	r1, r5
 800e674:	d903      	bls.n	800e67e <_malloc_r+0x22>
 800e676:	230c      	movs	r3, #12
 800e678:	6033      	str	r3, [r6, #0]
 800e67a:	2000      	movs	r0, #0
 800e67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e67e:	f001 feef 	bl	8010460 <__malloc_lock>
 800e682:	4921      	ldr	r1, [pc, #132]	; (800e708 <_malloc_r+0xac>)
 800e684:	680a      	ldr	r2, [r1, #0]
 800e686:	4614      	mov	r4, r2
 800e688:	b99c      	cbnz	r4, 800e6b2 <_malloc_r+0x56>
 800e68a:	4f20      	ldr	r7, [pc, #128]	; (800e70c <_malloc_r+0xb0>)
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	b923      	cbnz	r3, 800e69a <_malloc_r+0x3e>
 800e690:	4621      	mov	r1, r4
 800e692:	4630      	mov	r0, r6
 800e694:	f000 fd34 	bl	800f100 <_sbrk_r>
 800e698:	6038      	str	r0, [r7, #0]
 800e69a:	4629      	mov	r1, r5
 800e69c:	4630      	mov	r0, r6
 800e69e:	f000 fd2f 	bl	800f100 <_sbrk_r>
 800e6a2:	1c43      	adds	r3, r0, #1
 800e6a4:	d123      	bne.n	800e6ee <_malloc_r+0x92>
 800e6a6:	230c      	movs	r3, #12
 800e6a8:	6033      	str	r3, [r6, #0]
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	f001 fede 	bl	801046c <__malloc_unlock>
 800e6b0:	e7e3      	b.n	800e67a <_malloc_r+0x1e>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	1b5b      	subs	r3, r3, r5
 800e6b6:	d417      	bmi.n	800e6e8 <_malloc_r+0x8c>
 800e6b8:	2b0b      	cmp	r3, #11
 800e6ba:	d903      	bls.n	800e6c4 <_malloc_r+0x68>
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	441c      	add	r4, r3
 800e6c0:	6025      	str	r5, [r4, #0]
 800e6c2:	e004      	b.n	800e6ce <_malloc_r+0x72>
 800e6c4:	6863      	ldr	r3, [r4, #4]
 800e6c6:	42a2      	cmp	r2, r4
 800e6c8:	bf0c      	ite	eq
 800e6ca:	600b      	streq	r3, [r1, #0]
 800e6cc:	6053      	strne	r3, [r2, #4]
 800e6ce:	4630      	mov	r0, r6
 800e6d0:	f001 fecc 	bl	801046c <__malloc_unlock>
 800e6d4:	f104 000b 	add.w	r0, r4, #11
 800e6d8:	1d23      	adds	r3, r4, #4
 800e6da:	f020 0007 	bic.w	r0, r0, #7
 800e6de:	1ac2      	subs	r2, r0, r3
 800e6e0:	d0cc      	beq.n	800e67c <_malloc_r+0x20>
 800e6e2:	1a1b      	subs	r3, r3, r0
 800e6e4:	50a3      	str	r3, [r4, r2]
 800e6e6:	e7c9      	b.n	800e67c <_malloc_r+0x20>
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	6864      	ldr	r4, [r4, #4]
 800e6ec:	e7cc      	b.n	800e688 <_malloc_r+0x2c>
 800e6ee:	1cc4      	adds	r4, r0, #3
 800e6f0:	f024 0403 	bic.w	r4, r4, #3
 800e6f4:	42a0      	cmp	r0, r4
 800e6f6:	d0e3      	beq.n	800e6c0 <_malloc_r+0x64>
 800e6f8:	1a21      	subs	r1, r4, r0
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	f000 fd00 	bl	800f100 <_sbrk_r>
 800e700:	3001      	adds	r0, #1
 800e702:	d1dd      	bne.n	800e6c0 <_malloc_r+0x64>
 800e704:	e7cf      	b.n	800e6a6 <_malloc_r+0x4a>
 800e706:	bf00      	nop
 800e708:	20004b28 	.word	0x20004b28
 800e70c:	20004b2c 	.word	0x20004b2c

0800e710 <__cvt>:
 800e710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e714:	ec55 4b10 	vmov	r4, r5, d0
 800e718:	2d00      	cmp	r5, #0
 800e71a:	460e      	mov	r6, r1
 800e71c:	4619      	mov	r1, r3
 800e71e:	462b      	mov	r3, r5
 800e720:	bfbb      	ittet	lt
 800e722:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e726:	461d      	movlt	r5, r3
 800e728:	2300      	movge	r3, #0
 800e72a:	232d      	movlt	r3, #45	; 0x2d
 800e72c:	700b      	strb	r3, [r1, #0]
 800e72e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e730:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e734:	4691      	mov	r9, r2
 800e736:	f023 0820 	bic.w	r8, r3, #32
 800e73a:	bfbc      	itt	lt
 800e73c:	4622      	movlt	r2, r4
 800e73e:	4614      	movlt	r4, r2
 800e740:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e744:	d005      	beq.n	800e752 <__cvt+0x42>
 800e746:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e74a:	d100      	bne.n	800e74e <__cvt+0x3e>
 800e74c:	3601      	adds	r6, #1
 800e74e:	2102      	movs	r1, #2
 800e750:	e000      	b.n	800e754 <__cvt+0x44>
 800e752:	2103      	movs	r1, #3
 800e754:	ab03      	add	r3, sp, #12
 800e756:	9301      	str	r3, [sp, #4]
 800e758:	ab02      	add	r3, sp, #8
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	ec45 4b10 	vmov	d0, r4, r5
 800e760:	4653      	mov	r3, sl
 800e762:	4632      	mov	r2, r6
 800e764:	f000 fe6c 	bl	800f440 <_dtoa_r>
 800e768:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e76c:	4607      	mov	r7, r0
 800e76e:	d102      	bne.n	800e776 <__cvt+0x66>
 800e770:	f019 0f01 	tst.w	r9, #1
 800e774:	d022      	beq.n	800e7bc <__cvt+0xac>
 800e776:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e77a:	eb07 0906 	add.w	r9, r7, r6
 800e77e:	d110      	bne.n	800e7a2 <__cvt+0x92>
 800e780:	783b      	ldrb	r3, [r7, #0]
 800e782:	2b30      	cmp	r3, #48	; 0x30
 800e784:	d10a      	bne.n	800e79c <__cvt+0x8c>
 800e786:	2200      	movs	r2, #0
 800e788:	2300      	movs	r3, #0
 800e78a:	4620      	mov	r0, r4
 800e78c:	4629      	mov	r1, r5
 800e78e:	f7f2 f9c3 	bl	8000b18 <__aeabi_dcmpeq>
 800e792:	b918      	cbnz	r0, 800e79c <__cvt+0x8c>
 800e794:	f1c6 0601 	rsb	r6, r6, #1
 800e798:	f8ca 6000 	str.w	r6, [sl]
 800e79c:	f8da 3000 	ldr.w	r3, [sl]
 800e7a0:	4499      	add	r9, r3
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4620      	mov	r0, r4
 800e7a8:	4629      	mov	r1, r5
 800e7aa:	f7f2 f9b5 	bl	8000b18 <__aeabi_dcmpeq>
 800e7ae:	b108      	cbz	r0, 800e7b4 <__cvt+0xa4>
 800e7b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7b4:	2230      	movs	r2, #48	; 0x30
 800e7b6:	9b03      	ldr	r3, [sp, #12]
 800e7b8:	454b      	cmp	r3, r9
 800e7ba:	d307      	bcc.n	800e7cc <__cvt+0xbc>
 800e7bc:	9b03      	ldr	r3, [sp, #12]
 800e7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7c0:	1bdb      	subs	r3, r3, r7
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	6013      	str	r3, [r2, #0]
 800e7c6:	b004      	add	sp, #16
 800e7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7cc:	1c59      	adds	r1, r3, #1
 800e7ce:	9103      	str	r1, [sp, #12]
 800e7d0:	701a      	strb	r2, [r3, #0]
 800e7d2:	e7f0      	b.n	800e7b6 <__cvt+0xa6>

0800e7d4 <__exponent>:
 800e7d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2900      	cmp	r1, #0
 800e7da:	bfb8      	it	lt
 800e7dc:	4249      	neglt	r1, r1
 800e7de:	f803 2b02 	strb.w	r2, [r3], #2
 800e7e2:	bfb4      	ite	lt
 800e7e4:	222d      	movlt	r2, #45	; 0x2d
 800e7e6:	222b      	movge	r2, #43	; 0x2b
 800e7e8:	2909      	cmp	r1, #9
 800e7ea:	7042      	strb	r2, [r0, #1]
 800e7ec:	dd2a      	ble.n	800e844 <__exponent+0x70>
 800e7ee:	f10d 0407 	add.w	r4, sp, #7
 800e7f2:	46a4      	mov	ip, r4
 800e7f4:	270a      	movs	r7, #10
 800e7f6:	46a6      	mov	lr, r4
 800e7f8:	460a      	mov	r2, r1
 800e7fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7fe:	fb07 1516 	mls	r5, r7, r6, r1
 800e802:	3530      	adds	r5, #48	; 0x30
 800e804:	2a63      	cmp	r2, #99	; 0x63
 800e806:	f104 34ff 	add.w	r4, r4, #4294967295
 800e80a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e80e:	4631      	mov	r1, r6
 800e810:	dcf1      	bgt.n	800e7f6 <__exponent+0x22>
 800e812:	3130      	adds	r1, #48	; 0x30
 800e814:	f1ae 0502 	sub.w	r5, lr, #2
 800e818:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e81c:	1c44      	adds	r4, r0, #1
 800e81e:	4629      	mov	r1, r5
 800e820:	4561      	cmp	r1, ip
 800e822:	d30a      	bcc.n	800e83a <__exponent+0x66>
 800e824:	f10d 0209 	add.w	r2, sp, #9
 800e828:	eba2 020e 	sub.w	r2, r2, lr
 800e82c:	4565      	cmp	r5, ip
 800e82e:	bf88      	it	hi
 800e830:	2200      	movhi	r2, #0
 800e832:	4413      	add	r3, r2
 800e834:	1a18      	subs	r0, r3, r0
 800e836:	b003      	add	sp, #12
 800e838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e83e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e842:	e7ed      	b.n	800e820 <__exponent+0x4c>
 800e844:	2330      	movs	r3, #48	; 0x30
 800e846:	3130      	adds	r1, #48	; 0x30
 800e848:	7083      	strb	r3, [r0, #2]
 800e84a:	70c1      	strb	r1, [r0, #3]
 800e84c:	1d03      	adds	r3, r0, #4
 800e84e:	e7f1      	b.n	800e834 <__exponent+0x60>

0800e850 <_printf_float>:
 800e850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e854:	ed2d 8b02 	vpush	{d8}
 800e858:	b08d      	sub	sp, #52	; 0x34
 800e85a:	460c      	mov	r4, r1
 800e85c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e860:	4616      	mov	r6, r2
 800e862:	461f      	mov	r7, r3
 800e864:	4605      	mov	r5, r0
 800e866:	f001 fd8f 	bl	8010388 <_localeconv_r>
 800e86a:	f8d0 a000 	ldr.w	sl, [r0]
 800e86e:	4650      	mov	r0, sl
 800e870:	f7f1 fcd6 	bl	8000220 <strlen>
 800e874:	2300      	movs	r3, #0
 800e876:	930a      	str	r3, [sp, #40]	; 0x28
 800e878:	6823      	ldr	r3, [r4, #0]
 800e87a:	9305      	str	r3, [sp, #20]
 800e87c:	f8d8 3000 	ldr.w	r3, [r8]
 800e880:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e884:	3307      	adds	r3, #7
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	f103 0208 	add.w	r2, r3, #8
 800e88e:	f8c8 2000 	str.w	r2, [r8]
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e89a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e89e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e8a2:	9307      	str	r3, [sp, #28]
 800e8a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8a8:	ee08 0a10 	vmov	s16, r0
 800e8ac:	4b9f      	ldr	r3, [pc, #636]	; (800eb2c <_printf_float+0x2dc>)
 800e8ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b6:	f7f2 f961 	bl	8000b7c <__aeabi_dcmpun>
 800e8ba:	bb88      	cbnz	r0, 800e920 <_printf_float+0xd0>
 800e8bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8c0:	4b9a      	ldr	r3, [pc, #616]	; (800eb2c <_printf_float+0x2dc>)
 800e8c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c6:	f7f2 f93b 	bl	8000b40 <__aeabi_dcmple>
 800e8ca:	bb48      	cbnz	r0, 800e920 <_printf_float+0xd0>
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	f7f2 f92a 	bl	8000b2c <__aeabi_dcmplt>
 800e8d8:	b110      	cbz	r0, 800e8e0 <_printf_float+0x90>
 800e8da:	232d      	movs	r3, #45	; 0x2d
 800e8dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8e0:	4b93      	ldr	r3, [pc, #588]	; (800eb30 <_printf_float+0x2e0>)
 800e8e2:	4894      	ldr	r0, [pc, #592]	; (800eb34 <_printf_float+0x2e4>)
 800e8e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e8e8:	bf94      	ite	ls
 800e8ea:	4698      	movls	r8, r3
 800e8ec:	4680      	movhi	r8, r0
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	9b05      	ldr	r3, [sp, #20]
 800e8f4:	f023 0204 	bic.w	r2, r3, #4
 800e8f8:	6022      	str	r2, [r4, #0]
 800e8fa:	f04f 0900 	mov.w	r9, #0
 800e8fe:	9700      	str	r7, [sp, #0]
 800e900:	4633      	mov	r3, r6
 800e902:	aa0b      	add	r2, sp, #44	; 0x2c
 800e904:	4621      	mov	r1, r4
 800e906:	4628      	mov	r0, r5
 800e908:	f000 f9d8 	bl	800ecbc <_printf_common>
 800e90c:	3001      	adds	r0, #1
 800e90e:	f040 8090 	bne.w	800ea32 <_printf_float+0x1e2>
 800e912:	f04f 30ff 	mov.w	r0, #4294967295
 800e916:	b00d      	add	sp, #52	; 0x34
 800e918:	ecbd 8b02 	vpop	{d8}
 800e91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e920:	4642      	mov	r2, r8
 800e922:	464b      	mov	r3, r9
 800e924:	4640      	mov	r0, r8
 800e926:	4649      	mov	r1, r9
 800e928:	f7f2 f928 	bl	8000b7c <__aeabi_dcmpun>
 800e92c:	b140      	cbz	r0, 800e940 <_printf_float+0xf0>
 800e92e:	464b      	mov	r3, r9
 800e930:	2b00      	cmp	r3, #0
 800e932:	bfbc      	itt	lt
 800e934:	232d      	movlt	r3, #45	; 0x2d
 800e936:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e93a:	487f      	ldr	r0, [pc, #508]	; (800eb38 <_printf_float+0x2e8>)
 800e93c:	4b7f      	ldr	r3, [pc, #508]	; (800eb3c <_printf_float+0x2ec>)
 800e93e:	e7d1      	b.n	800e8e4 <_printf_float+0x94>
 800e940:	6863      	ldr	r3, [r4, #4]
 800e942:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e946:	9206      	str	r2, [sp, #24]
 800e948:	1c5a      	adds	r2, r3, #1
 800e94a:	d13f      	bne.n	800e9cc <_printf_float+0x17c>
 800e94c:	2306      	movs	r3, #6
 800e94e:	6063      	str	r3, [r4, #4]
 800e950:	9b05      	ldr	r3, [sp, #20]
 800e952:	6861      	ldr	r1, [r4, #4]
 800e954:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e958:	2300      	movs	r3, #0
 800e95a:	9303      	str	r3, [sp, #12]
 800e95c:	ab0a      	add	r3, sp, #40	; 0x28
 800e95e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e962:	ab09      	add	r3, sp, #36	; 0x24
 800e964:	ec49 8b10 	vmov	d0, r8, r9
 800e968:	9300      	str	r3, [sp, #0]
 800e96a:	6022      	str	r2, [r4, #0]
 800e96c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e970:	4628      	mov	r0, r5
 800e972:	f7ff fecd 	bl	800e710 <__cvt>
 800e976:	9b06      	ldr	r3, [sp, #24]
 800e978:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e97a:	2b47      	cmp	r3, #71	; 0x47
 800e97c:	4680      	mov	r8, r0
 800e97e:	d108      	bne.n	800e992 <_printf_float+0x142>
 800e980:	1cc8      	adds	r0, r1, #3
 800e982:	db02      	blt.n	800e98a <_printf_float+0x13a>
 800e984:	6863      	ldr	r3, [r4, #4]
 800e986:	4299      	cmp	r1, r3
 800e988:	dd41      	ble.n	800ea0e <_printf_float+0x1be>
 800e98a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e98e:	fa5f fb8b 	uxtb.w	fp, fp
 800e992:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e996:	d820      	bhi.n	800e9da <_printf_float+0x18a>
 800e998:	3901      	subs	r1, #1
 800e99a:	465a      	mov	r2, fp
 800e99c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e9a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e9a2:	f7ff ff17 	bl	800e7d4 <__exponent>
 800e9a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9a8:	1813      	adds	r3, r2, r0
 800e9aa:	2a01      	cmp	r2, #1
 800e9ac:	4681      	mov	r9, r0
 800e9ae:	6123      	str	r3, [r4, #16]
 800e9b0:	dc02      	bgt.n	800e9b8 <_printf_float+0x168>
 800e9b2:	6822      	ldr	r2, [r4, #0]
 800e9b4:	07d2      	lsls	r2, r2, #31
 800e9b6:	d501      	bpl.n	800e9bc <_printf_float+0x16c>
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	6123      	str	r3, [r4, #16]
 800e9bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d09c      	beq.n	800e8fe <_printf_float+0xae>
 800e9c4:	232d      	movs	r3, #45	; 0x2d
 800e9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9ca:	e798      	b.n	800e8fe <_printf_float+0xae>
 800e9cc:	9a06      	ldr	r2, [sp, #24]
 800e9ce:	2a47      	cmp	r2, #71	; 0x47
 800e9d0:	d1be      	bne.n	800e950 <_printf_float+0x100>
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1bc      	bne.n	800e950 <_printf_float+0x100>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e7b9      	b.n	800e94e <_printf_float+0xfe>
 800e9da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e9de:	d118      	bne.n	800ea12 <_printf_float+0x1c2>
 800e9e0:	2900      	cmp	r1, #0
 800e9e2:	6863      	ldr	r3, [r4, #4]
 800e9e4:	dd0b      	ble.n	800e9fe <_printf_float+0x1ae>
 800e9e6:	6121      	str	r1, [r4, #16]
 800e9e8:	b913      	cbnz	r3, 800e9f0 <_printf_float+0x1a0>
 800e9ea:	6822      	ldr	r2, [r4, #0]
 800e9ec:	07d0      	lsls	r0, r2, #31
 800e9ee:	d502      	bpl.n	800e9f6 <_printf_float+0x1a6>
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	440b      	add	r3, r1
 800e9f4:	6123      	str	r3, [r4, #16]
 800e9f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e9f8:	f04f 0900 	mov.w	r9, #0
 800e9fc:	e7de      	b.n	800e9bc <_printf_float+0x16c>
 800e9fe:	b913      	cbnz	r3, 800ea06 <_printf_float+0x1b6>
 800ea00:	6822      	ldr	r2, [r4, #0]
 800ea02:	07d2      	lsls	r2, r2, #31
 800ea04:	d501      	bpl.n	800ea0a <_printf_float+0x1ba>
 800ea06:	3302      	adds	r3, #2
 800ea08:	e7f4      	b.n	800e9f4 <_printf_float+0x1a4>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	e7f2      	b.n	800e9f4 <_printf_float+0x1a4>
 800ea0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ea12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea14:	4299      	cmp	r1, r3
 800ea16:	db05      	blt.n	800ea24 <_printf_float+0x1d4>
 800ea18:	6823      	ldr	r3, [r4, #0]
 800ea1a:	6121      	str	r1, [r4, #16]
 800ea1c:	07d8      	lsls	r0, r3, #31
 800ea1e:	d5ea      	bpl.n	800e9f6 <_printf_float+0x1a6>
 800ea20:	1c4b      	adds	r3, r1, #1
 800ea22:	e7e7      	b.n	800e9f4 <_printf_float+0x1a4>
 800ea24:	2900      	cmp	r1, #0
 800ea26:	bfd4      	ite	le
 800ea28:	f1c1 0202 	rsble	r2, r1, #2
 800ea2c:	2201      	movgt	r2, #1
 800ea2e:	4413      	add	r3, r2
 800ea30:	e7e0      	b.n	800e9f4 <_printf_float+0x1a4>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	055a      	lsls	r2, r3, #21
 800ea36:	d407      	bmi.n	800ea48 <_printf_float+0x1f8>
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	4642      	mov	r2, r8
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	4628      	mov	r0, r5
 800ea40:	47b8      	blx	r7
 800ea42:	3001      	adds	r0, #1
 800ea44:	d12c      	bne.n	800eaa0 <_printf_float+0x250>
 800ea46:	e764      	b.n	800e912 <_printf_float+0xc2>
 800ea48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea4c:	f240 80e0 	bls.w	800ec10 <_printf_float+0x3c0>
 800ea50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea54:	2200      	movs	r2, #0
 800ea56:	2300      	movs	r3, #0
 800ea58:	f7f2 f85e 	bl	8000b18 <__aeabi_dcmpeq>
 800ea5c:	2800      	cmp	r0, #0
 800ea5e:	d034      	beq.n	800eaca <_printf_float+0x27a>
 800ea60:	4a37      	ldr	r2, [pc, #220]	; (800eb40 <_printf_float+0x2f0>)
 800ea62:	2301      	movs	r3, #1
 800ea64:	4631      	mov	r1, r6
 800ea66:	4628      	mov	r0, r5
 800ea68:	47b8      	blx	r7
 800ea6a:	3001      	adds	r0, #1
 800ea6c:	f43f af51 	beq.w	800e912 <_printf_float+0xc2>
 800ea70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea74:	429a      	cmp	r2, r3
 800ea76:	db02      	blt.n	800ea7e <_printf_float+0x22e>
 800ea78:	6823      	ldr	r3, [r4, #0]
 800ea7a:	07d8      	lsls	r0, r3, #31
 800ea7c:	d510      	bpl.n	800eaa0 <_printf_float+0x250>
 800ea7e:	ee18 3a10 	vmov	r3, s16
 800ea82:	4652      	mov	r2, sl
 800ea84:	4631      	mov	r1, r6
 800ea86:	4628      	mov	r0, r5
 800ea88:	47b8      	blx	r7
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	f43f af41 	beq.w	800e912 <_printf_float+0xc2>
 800ea90:	f04f 0800 	mov.w	r8, #0
 800ea94:	f104 091a 	add.w	r9, r4, #26
 800ea98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea9a:	3b01      	subs	r3, #1
 800ea9c:	4543      	cmp	r3, r8
 800ea9e:	dc09      	bgt.n	800eab4 <_printf_float+0x264>
 800eaa0:	6823      	ldr	r3, [r4, #0]
 800eaa2:	079b      	lsls	r3, r3, #30
 800eaa4:	f100 8105 	bmi.w	800ecb2 <_printf_float+0x462>
 800eaa8:	68e0      	ldr	r0, [r4, #12]
 800eaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eaac:	4298      	cmp	r0, r3
 800eaae:	bfb8      	it	lt
 800eab0:	4618      	movlt	r0, r3
 800eab2:	e730      	b.n	800e916 <_printf_float+0xc6>
 800eab4:	2301      	movs	r3, #1
 800eab6:	464a      	mov	r2, r9
 800eab8:	4631      	mov	r1, r6
 800eaba:	4628      	mov	r0, r5
 800eabc:	47b8      	blx	r7
 800eabe:	3001      	adds	r0, #1
 800eac0:	f43f af27 	beq.w	800e912 <_printf_float+0xc2>
 800eac4:	f108 0801 	add.w	r8, r8, #1
 800eac8:	e7e6      	b.n	800ea98 <_printf_float+0x248>
 800eaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eacc:	2b00      	cmp	r3, #0
 800eace:	dc39      	bgt.n	800eb44 <_printf_float+0x2f4>
 800ead0:	4a1b      	ldr	r2, [pc, #108]	; (800eb40 <_printf_float+0x2f0>)
 800ead2:	2301      	movs	r3, #1
 800ead4:	4631      	mov	r1, r6
 800ead6:	4628      	mov	r0, r5
 800ead8:	47b8      	blx	r7
 800eada:	3001      	adds	r0, #1
 800eadc:	f43f af19 	beq.w	800e912 <_printf_float+0xc2>
 800eae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eae4:	4313      	orrs	r3, r2
 800eae6:	d102      	bne.n	800eaee <_printf_float+0x29e>
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	07d9      	lsls	r1, r3, #31
 800eaec:	d5d8      	bpl.n	800eaa0 <_printf_float+0x250>
 800eaee:	ee18 3a10 	vmov	r3, s16
 800eaf2:	4652      	mov	r2, sl
 800eaf4:	4631      	mov	r1, r6
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	47b8      	blx	r7
 800eafa:	3001      	adds	r0, #1
 800eafc:	f43f af09 	beq.w	800e912 <_printf_float+0xc2>
 800eb00:	f04f 0900 	mov.w	r9, #0
 800eb04:	f104 0a1a 	add.w	sl, r4, #26
 800eb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb0a:	425b      	negs	r3, r3
 800eb0c:	454b      	cmp	r3, r9
 800eb0e:	dc01      	bgt.n	800eb14 <_printf_float+0x2c4>
 800eb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb12:	e792      	b.n	800ea3a <_printf_float+0x1ea>
 800eb14:	2301      	movs	r3, #1
 800eb16:	4652      	mov	r2, sl
 800eb18:	4631      	mov	r1, r6
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	47b8      	blx	r7
 800eb1e:	3001      	adds	r0, #1
 800eb20:	f43f aef7 	beq.w	800e912 <_printf_float+0xc2>
 800eb24:	f109 0901 	add.w	r9, r9, #1
 800eb28:	e7ee      	b.n	800eb08 <_printf_float+0x2b8>
 800eb2a:	bf00      	nop
 800eb2c:	7fefffff 	.word	0x7fefffff
 800eb30:	08012b54 	.word	0x08012b54
 800eb34:	08012b58 	.word	0x08012b58
 800eb38:	08012b60 	.word	0x08012b60
 800eb3c:	08012b5c 	.word	0x08012b5c
 800eb40:	08012b64 	.word	0x08012b64
 800eb44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	bfa8      	it	ge
 800eb4c:	461a      	movge	r2, r3
 800eb4e:	2a00      	cmp	r2, #0
 800eb50:	4691      	mov	r9, r2
 800eb52:	dc37      	bgt.n	800ebc4 <_printf_float+0x374>
 800eb54:	f04f 0b00 	mov.w	fp, #0
 800eb58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb5c:	f104 021a 	add.w	r2, r4, #26
 800eb60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eb62:	9305      	str	r3, [sp, #20]
 800eb64:	eba3 0309 	sub.w	r3, r3, r9
 800eb68:	455b      	cmp	r3, fp
 800eb6a:	dc33      	bgt.n	800ebd4 <_printf_float+0x384>
 800eb6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb70:	429a      	cmp	r2, r3
 800eb72:	db3b      	blt.n	800ebec <_printf_float+0x39c>
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	07da      	lsls	r2, r3, #31
 800eb78:	d438      	bmi.n	800ebec <_printf_float+0x39c>
 800eb7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb7c:	9b05      	ldr	r3, [sp, #20]
 800eb7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb80:	1ad3      	subs	r3, r2, r3
 800eb82:	eba2 0901 	sub.w	r9, r2, r1
 800eb86:	4599      	cmp	r9, r3
 800eb88:	bfa8      	it	ge
 800eb8a:	4699      	movge	r9, r3
 800eb8c:	f1b9 0f00 	cmp.w	r9, #0
 800eb90:	dc35      	bgt.n	800ebfe <_printf_float+0x3ae>
 800eb92:	f04f 0800 	mov.w	r8, #0
 800eb96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb9a:	f104 0a1a 	add.w	sl, r4, #26
 800eb9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eba2:	1a9b      	subs	r3, r3, r2
 800eba4:	eba3 0309 	sub.w	r3, r3, r9
 800eba8:	4543      	cmp	r3, r8
 800ebaa:	f77f af79 	ble.w	800eaa0 <_printf_float+0x250>
 800ebae:	2301      	movs	r3, #1
 800ebb0:	4652      	mov	r2, sl
 800ebb2:	4631      	mov	r1, r6
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	47b8      	blx	r7
 800ebb8:	3001      	adds	r0, #1
 800ebba:	f43f aeaa 	beq.w	800e912 <_printf_float+0xc2>
 800ebbe:	f108 0801 	add.w	r8, r8, #1
 800ebc2:	e7ec      	b.n	800eb9e <_printf_float+0x34e>
 800ebc4:	4613      	mov	r3, r2
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4642      	mov	r2, r8
 800ebca:	4628      	mov	r0, r5
 800ebcc:	47b8      	blx	r7
 800ebce:	3001      	adds	r0, #1
 800ebd0:	d1c0      	bne.n	800eb54 <_printf_float+0x304>
 800ebd2:	e69e      	b.n	800e912 <_printf_float+0xc2>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	4628      	mov	r0, r5
 800ebda:	9205      	str	r2, [sp, #20]
 800ebdc:	47b8      	blx	r7
 800ebde:	3001      	adds	r0, #1
 800ebe0:	f43f ae97 	beq.w	800e912 <_printf_float+0xc2>
 800ebe4:	9a05      	ldr	r2, [sp, #20]
 800ebe6:	f10b 0b01 	add.w	fp, fp, #1
 800ebea:	e7b9      	b.n	800eb60 <_printf_float+0x310>
 800ebec:	ee18 3a10 	vmov	r3, s16
 800ebf0:	4652      	mov	r2, sl
 800ebf2:	4631      	mov	r1, r6
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	47b8      	blx	r7
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	d1be      	bne.n	800eb7a <_printf_float+0x32a>
 800ebfc:	e689      	b.n	800e912 <_printf_float+0xc2>
 800ebfe:	9a05      	ldr	r2, [sp, #20]
 800ec00:	464b      	mov	r3, r9
 800ec02:	4442      	add	r2, r8
 800ec04:	4631      	mov	r1, r6
 800ec06:	4628      	mov	r0, r5
 800ec08:	47b8      	blx	r7
 800ec0a:	3001      	adds	r0, #1
 800ec0c:	d1c1      	bne.n	800eb92 <_printf_float+0x342>
 800ec0e:	e680      	b.n	800e912 <_printf_float+0xc2>
 800ec10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec12:	2a01      	cmp	r2, #1
 800ec14:	dc01      	bgt.n	800ec1a <_printf_float+0x3ca>
 800ec16:	07db      	lsls	r3, r3, #31
 800ec18:	d538      	bpl.n	800ec8c <_printf_float+0x43c>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	4642      	mov	r2, r8
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	f43f ae74 	beq.w	800e912 <_printf_float+0xc2>
 800ec2a:	ee18 3a10 	vmov	r3, s16
 800ec2e:	4652      	mov	r2, sl
 800ec30:	4631      	mov	r1, r6
 800ec32:	4628      	mov	r0, r5
 800ec34:	47b8      	blx	r7
 800ec36:	3001      	adds	r0, #1
 800ec38:	f43f ae6b 	beq.w	800e912 <_printf_float+0xc2>
 800ec3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec40:	2200      	movs	r2, #0
 800ec42:	2300      	movs	r3, #0
 800ec44:	f7f1 ff68 	bl	8000b18 <__aeabi_dcmpeq>
 800ec48:	b9d8      	cbnz	r0, 800ec82 <_printf_float+0x432>
 800ec4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec4c:	f108 0201 	add.w	r2, r8, #1
 800ec50:	3b01      	subs	r3, #1
 800ec52:	4631      	mov	r1, r6
 800ec54:	4628      	mov	r0, r5
 800ec56:	47b8      	blx	r7
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d10e      	bne.n	800ec7a <_printf_float+0x42a>
 800ec5c:	e659      	b.n	800e912 <_printf_float+0xc2>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	4652      	mov	r2, sl
 800ec62:	4631      	mov	r1, r6
 800ec64:	4628      	mov	r0, r5
 800ec66:	47b8      	blx	r7
 800ec68:	3001      	adds	r0, #1
 800ec6a:	f43f ae52 	beq.w	800e912 <_printf_float+0xc2>
 800ec6e:	f108 0801 	add.w	r8, r8, #1
 800ec72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec74:	3b01      	subs	r3, #1
 800ec76:	4543      	cmp	r3, r8
 800ec78:	dcf1      	bgt.n	800ec5e <_printf_float+0x40e>
 800ec7a:	464b      	mov	r3, r9
 800ec7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec80:	e6dc      	b.n	800ea3c <_printf_float+0x1ec>
 800ec82:	f04f 0800 	mov.w	r8, #0
 800ec86:	f104 0a1a 	add.w	sl, r4, #26
 800ec8a:	e7f2      	b.n	800ec72 <_printf_float+0x422>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	4642      	mov	r2, r8
 800ec90:	e7df      	b.n	800ec52 <_printf_float+0x402>
 800ec92:	2301      	movs	r3, #1
 800ec94:	464a      	mov	r2, r9
 800ec96:	4631      	mov	r1, r6
 800ec98:	4628      	mov	r0, r5
 800ec9a:	47b8      	blx	r7
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	f43f ae38 	beq.w	800e912 <_printf_float+0xc2>
 800eca2:	f108 0801 	add.w	r8, r8, #1
 800eca6:	68e3      	ldr	r3, [r4, #12]
 800eca8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ecaa:	1a5b      	subs	r3, r3, r1
 800ecac:	4543      	cmp	r3, r8
 800ecae:	dcf0      	bgt.n	800ec92 <_printf_float+0x442>
 800ecb0:	e6fa      	b.n	800eaa8 <_printf_float+0x258>
 800ecb2:	f04f 0800 	mov.w	r8, #0
 800ecb6:	f104 0919 	add.w	r9, r4, #25
 800ecba:	e7f4      	b.n	800eca6 <_printf_float+0x456>

0800ecbc <_printf_common>:
 800ecbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc0:	4616      	mov	r6, r2
 800ecc2:	4699      	mov	r9, r3
 800ecc4:	688a      	ldr	r2, [r1, #8]
 800ecc6:	690b      	ldr	r3, [r1, #16]
 800ecc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eccc:	4293      	cmp	r3, r2
 800ecce:	bfb8      	it	lt
 800ecd0:	4613      	movlt	r3, r2
 800ecd2:	6033      	str	r3, [r6, #0]
 800ecd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ecd8:	4607      	mov	r7, r0
 800ecda:	460c      	mov	r4, r1
 800ecdc:	b10a      	cbz	r2, 800ece2 <_printf_common+0x26>
 800ecde:	3301      	adds	r3, #1
 800ece0:	6033      	str	r3, [r6, #0]
 800ece2:	6823      	ldr	r3, [r4, #0]
 800ece4:	0699      	lsls	r1, r3, #26
 800ece6:	bf42      	ittt	mi
 800ece8:	6833      	ldrmi	r3, [r6, #0]
 800ecea:	3302      	addmi	r3, #2
 800ecec:	6033      	strmi	r3, [r6, #0]
 800ecee:	6825      	ldr	r5, [r4, #0]
 800ecf0:	f015 0506 	ands.w	r5, r5, #6
 800ecf4:	d106      	bne.n	800ed04 <_printf_common+0x48>
 800ecf6:	f104 0a19 	add.w	sl, r4, #25
 800ecfa:	68e3      	ldr	r3, [r4, #12]
 800ecfc:	6832      	ldr	r2, [r6, #0]
 800ecfe:	1a9b      	subs	r3, r3, r2
 800ed00:	42ab      	cmp	r3, r5
 800ed02:	dc26      	bgt.n	800ed52 <_printf_common+0x96>
 800ed04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ed08:	1e13      	subs	r3, r2, #0
 800ed0a:	6822      	ldr	r2, [r4, #0]
 800ed0c:	bf18      	it	ne
 800ed0e:	2301      	movne	r3, #1
 800ed10:	0692      	lsls	r2, r2, #26
 800ed12:	d42b      	bmi.n	800ed6c <_printf_common+0xb0>
 800ed14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed18:	4649      	mov	r1, r9
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	47c0      	blx	r8
 800ed1e:	3001      	adds	r0, #1
 800ed20:	d01e      	beq.n	800ed60 <_printf_common+0xa4>
 800ed22:	6823      	ldr	r3, [r4, #0]
 800ed24:	68e5      	ldr	r5, [r4, #12]
 800ed26:	6832      	ldr	r2, [r6, #0]
 800ed28:	f003 0306 	and.w	r3, r3, #6
 800ed2c:	2b04      	cmp	r3, #4
 800ed2e:	bf08      	it	eq
 800ed30:	1aad      	subeq	r5, r5, r2
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	6922      	ldr	r2, [r4, #16]
 800ed36:	bf0c      	ite	eq
 800ed38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed3c:	2500      	movne	r5, #0
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	bfc4      	itt	gt
 800ed42:	1a9b      	subgt	r3, r3, r2
 800ed44:	18ed      	addgt	r5, r5, r3
 800ed46:	2600      	movs	r6, #0
 800ed48:	341a      	adds	r4, #26
 800ed4a:	42b5      	cmp	r5, r6
 800ed4c:	d11a      	bne.n	800ed84 <_printf_common+0xc8>
 800ed4e:	2000      	movs	r0, #0
 800ed50:	e008      	b.n	800ed64 <_printf_common+0xa8>
 800ed52:	2301      	movs	r3, #1
 800ed54:	4652      	mov	r2, sl
 800ed56:	4649      	mov	r1, r9
 800ed58:	4638      	mov	r0, r7
 800ed5a:	47c0      	blx	r8
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d103      	bne.n	800ed68 <_printf_common+0xac>
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295
 800ed64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed68:	3501      	adds	r5, #1
 800ed6a:	e7c6      	b.n	800ecfa <_printf_common+0x3e>
 800ed6c:	18e1      	adds	r1, r4, r3
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	2030      	movs	r0, #48	; 0x30
 800ed72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed76:	4422      	add	r2, r4
 800ed78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed80:	3302      	adds	r3, #2
 800ed82:	e7c7      	b.n	800ed14 <_printf_common+0x58>
 800ed84:	2301      	movs	r3, #1
 800ed86:	4622      	mov	r2, r4
 800ed88:	4649      	mov	r1, r9
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	47c0      	blx	r8
 800ed8e:	3001      	adds	r0, #1
 800ed90:	d0e6      	beq.n	800ed60 <_printf_common+0xa4>
 800ed92:	3601      	adds	r6, #1
 800ed94:	e7d9      	b.n	800ed4a <_printf_common+0x8e>
	...

0800ed98 <_printf_i>:
 800ed98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	4691      	mov	r9, r2
 800eda0:	7e27      	ldrb	r7, [r4, #24]
 800eda2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800eda4:	2f78      	cmp	r7, #120	; 0x78
 800eda6:	4680      	mov	r8, r0
 800eda8:	469a      	mov	sl, r3
 800edaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edae:	d807      	bhi.n	800edc0 <_printf_i+0x28>
 800edb0:	2f62      	cmp	r7, #98	; 0x62
 800edb2:	d80a      	bhi.n	800edca <_printf_i+0x32>
 800edb4:	2f00      	cmp	r7, #0
 800edb6:	f000 80d8 	beq.w	800ef6a <_printf_i+0x1d2>
 800edba:	2f58      	cmp	r7, #88	; 0x58
 800edbc:	f000 80a3 	beq.w	800ef06 <_printf_i+0x16e>
 800edc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800edc8:	e03a      	b.n	800ee40 <_printf_i+0xa8>
 800edca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800edce:	2b15      	cmp	r3, #21
 800edd0:	d8f6      	bhi.n	800edc0 <_printf_i+0x28>
 800edd2:	a001      	add	r0, pc, #4	; (adr r0, 800edd8 <_printf_i+0x40>)
 800edd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800edd8:	0800ee31 	.word	0x0800ee31
 800eddc:	0800ee45 	.word	0x0800ee45
 800ede0:	0800edc1 	.word	0x0800edc1
 800ede4:	0800edc1 	.word	0x0800edc1
 800ede8:	0800edc1 	.word	0x0800edc1
 800edec:	0800edc1 	.word	0x0800edc1
 800edf0:	0800ee45 	.word	0x0800ee45
 800edf4:	0800edc1 	.word	0x0800edc1
 800edf8:	0800edc1 	.word	0x0800edc1
 800edfc:	0800edc1 	.word	0x0800edc1
 800ee00:	0800edc1 	.word	0x0800edc1
 800ee04:	0800ef51 	.word	0x0800ef51
 800ee08:	0800ee75 	.word	0x0800ee75
 800ee0c:	0800ef33 	.word	0x0800ef33
 800ee10:	0800edc1 	.word	0x0800edc1
 800ee14:	0800edc1 	.word	0x0800edc1
 800ee18:	0800ef73 	.word	0x0800ef73
 800ee1c:	0800edc1 	.word	0x0800edc1
 800ee20:	0800ee75 	.word	0x0800ee75
 800ee24:	0800edc1 	.word	0x0800edc1
 800ee28:	0800edc1 	.word	0x0800edc1
 800ee2c:	0800ef3b 	.word	0x0800ef3b
 800ee30:	680b      	ldr	r3, [r1, #0]
 800ee32:	1d1a      	adds	r2, r3, #4
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	600a      	str	r2, [r1, #0]
 800ee38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ee3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee40:	2301      	movs	r3, #1
 800ee42:	e0a3      	b.n	800ef8c <_printf_i+0x1f4>
 800ee44:	6825      	ldr	r5, [r4, #0]
 800ee46:	6808      	ldr	r0, [r1, #0]
 800ee48:	062e      	lsls	r6, r5, #24
 800ee4a:	f100 0304 	add.w	r3, r0, #4
 800ee4e:	d50a      	bpl.n	800ee66 <_printf_i+0xce>
 800ee50:	6805      	ldr	r5, [r0, #0]
 800ee52:	600b      	str	r3, [r1, #0]
 800ee54:	2d00      	cmp	r5, #0
 800ee56:	da03      	bge.n	800ee60 <_printf_i+0xc8>
 800ee58:	232d      	movs	r3, #45	; 0x2d
 800ee5a:	426d      	negs	r5, r5
 800ee5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee60:	485e      	ldr	r0, [pc, #376]	; (800efdc <_printf_i+0x244>)
 800ee62:	230a      	movs	r3, #10
 800ee64:	e019      	b.n	800ee9a <_printf_i+0x102>
 800ee66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ee6a:	6805      	ldr	r5, [r0, #0]
 800ee6c:	600b      	str	r3, [r1, #0]
 800ee6e:	bf18      	it	ne
 800ee70:	b22d      	sxthne	r5, r5
 800ee72:	e7ef      	b.n	800ee54 <_printf_i+0xbc>
 800ee74:	680b      	ldr	r3, [r1, #0]
 800ee76:	6825      	ldr	r5, [r4, #0]
 800ee78:	1d18      	adds	r0, r3, #4
 800ee7a:	6008      	str	r0, [r1, #0]
 800ee7c:	0628      	lsls	r0, r5, #24
 800ee7e:	d501      	bpl.n	800ee84 <_printf_i+0xec>
 800ee80:	681d      	ldr	r5, [r3, #0]
 800ee82:	e002      	b.n	800ee8a <_printf_i+0xf2>
 800ee84:	0669      	lsls	r1, r5, #25
 800ee86:	d5fb      	bpl.n	800ee80 <_printf_i+0xe8>
 800ee88:	881d      	ldrh	r5, [r3, #0]
 800ee8a:	4854      	ldr	r0, [pc, #336]	; (800efdc <_printf_i+0x244>)
 800ee8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee8e:	bf0c      	ite	eq
 800ee90:	2308      	moveq	r3, #8
 800ee92:	230a      	movne	r3, #10
 800ee94:	2100      	movs	r1, #0
 800ee96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee9a:	6866      	ldr	r6, [r4, #4]
 800ee9c:	60a6      	str	r6, [r4, #8]
 800ee9e:	2e00      	cmp	r6, #0
 800eea0:	bfa2      	ittt	ge
 800eea2:	6821      	ldrge	r1, [r4, #0]
 800eea4:	f021 0104 	bicge.w	r1, r1, #4
 800eea8:	6021      	strge	r1, [r4, #0]
 800eeaa:	b90d      	cbnz	r5, 800eeb0 <_printf_i+0x118>
 800eeac:	2e00      	cmp	r6, #0
 800eeae:	d04d      	beq.n	800ef4c <_printf_i+0x1b4>
 800eeb0:	4616      	mov	r6, r2
 800eeb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eeb6:	fb03 5711 	mls	r7, r3, r1, r5
 800eeba:	5dc7      	ldrb	r7, [r0, r7]
 800eebc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eec0:	462f      	mov	r7, r5
 800eec2:	42bb      	cmp	r3, r7
 800eec4:	460d      	mov	r5, r1
 800eec6:	d9f4      	bls.n	800eeb2 <_printf_i+0x11a>
 800eec8:	2b08      	cmp	r3, #8
 800eeca:	d10b      	bne.n	800eee4 <_printf_i+0x14c>
 800eecc:	6823      	ldr	r3, [r4, #0]
 800eece:	07df      	lsls	r7, r3, #31
 800eed0:	d508      	bpl.n	800eee4 <_printf_i+0x14c>
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	6861      	ldr	r1, [r4, #4]
 800eed6:	4299      	cmp	r1, r3
 800eed8:	bfde      	ittt	le
 800eeda:	2330      	movle	r3, #48	; 0x30
 800eedc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eee0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eee4:	1b92      	subs	r2, r2, r6
 800eee6:	6122      	str	r2, [r4, #16]
 800eee8:	f8cd a000 	str.w	sl, [sp]
 800eeec:	464b      	mov	r3, r9
 800eeee:	aa03      	add	r2, sp, #12
 800eef0:	4621      	mov	r1, r4
 800eef2:	4640      	mov	r0, r8
 800eef4:	f7ff fee2 	bl	800ecbc <_printf_common>
 800eef8:	3001      	adds	r0, #1
 800eefa:	d14c      	bne.n	800ef96 <_printf_i+0x1fe>
 800eefc:	f04f 30ff 	mov.w	r0, #4294967295
 800ef00:	b004      	add	sp, #16
 800ef02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef06:	4835      	ldr	r0, [pc, #212]	; (800efdc <_printf_i+0x244>)
 800ef08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ef0c:	6823      	ldr	r3, [r4, #0]
 800ef0e:	680e      	ldr	r6, [r1, #0]
 800ef10:	061f      	lsls	r7, r3, #24
 800ef12:	f856 5b04 	ldr.w	r5, [r6], #4
 800ef16:	600e      	str	r6, [r1, #0]
 800ef18:	d514      	bpl.n	800ef44 <_printf_i+0x1ac>
 800ef1a:	07d9      	lsls	r1, r3, #31
 800ef1c:	bf44      	itt	mi
 800ef1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ef22:	6023      	strmi	r3, [r4, #0]
 800ef24:	b91d      	cbnz	r5, 800ef2e <_printf_i+0x196>
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	f023 0320 	bic.w	r3, r3, #32
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	2310      	movs	r3, #16
 800ef30:	e7b0      	b.n	800ee94 <_printf_i+0xfc>
 800ef32:	6823      	ldr	r3, [r4, #0]
 800ef34:	f043 0320 	orr.w	r3, r3, #32
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	2378      	movs	r3, #120	; 0x78
 800ef3c:	4828      	ldr	r0, [pc, #160]	; (800efe0 <_printf_i+0x248>)
 800ef3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ef42:	e7e3      	b.n	800ef0c <_printf_i+0x174>
 800ef44:	065e      	lsls	r6, r3, #25
 800ef46:	bf48      	it	mi
 800ef48:	b2ad      	uxthmi	r5, r5
 800ef4a:	e7e6      	b.n	800ef1a <_printf_i+0x182>
 800ef4c:	4616      	mov	r6, r2
 800ef4e:	e7bb      	b.n	800eec8 <_printf_i+0x130>
 800ef50:	680b      	ldr	r3, [r1, #0]
 800ef52:	6826      	ldr	r6, [r4, #0]
 800ef54:	6960      	ldr	r0, [r4, #20]
 800ef56:	1d1d      	adds	r5, r3, #4
 800ef58:	600d      	str	r5, [r1, #0]
 800ef5a:	0635      	lsls	r5, r6, #24
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	d501      	bpl.n	800ef64 <_printf_i+0x1cc>
 800ef60:	6018      	str	r0, [r3, #0]
 800ef62:	e002      	b.n	800ef6a <_printf_i+0x1d2>
 800ef64:	0671      	lsls	r1, r6, #25
 800ef66:	d5fb      	bpl.n	800ef60 <_printf_i+0x1c8>
 800ef68:	8018      	strh	r0, [r3, #0]
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	6123      	str	r3, [r4, #16]
 800ef6e:	4616      	mov	r6, r2
 800ef70:	e7ba      	b.n	800eee8 <_printf_i+0x150>
 800ef72:	680b      	ldr	r3, [r1, #0]
 800ef74:	1d1a      	adds	r2, r3, #4
 800ef76:	600a      	str	r2, [r1, #0]
 800ef78:	681e      	ldr	r6, [r3, #0]
 800ef7a:	6862      	ldr	r2, [r4, #4]
 800ef7c:	2100      	movs	r1, #0
 800ef7e:	4630      	mov	r0, r6
 800ef80:	f7f1 f956 	bl	8000230 <memchr>
 800ef84:	b108      	cbz	r0, 800ef8a <_printf_i+0x1f2>
 800ef86:	1b80      	subs	r0, r0, r6
 800ef88:	6060      	str	r0, [r4, #4]
 800ef8a:	6863      	ldr	r3, [r4, #4]
 800ef8c:	6123      	str	r3, [r4, #16]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef94:	e7a8      	b.n	800eee8 <_printf_i+0x150>
 800ef96:	6923      	ldr	r3, [r4, #16]
 800ef98:	4632      	mov	r2, r6
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	4640      	mov	r0, r8
 800ef9e:	47d0      	blx	sl
 800efa0:	3001      	adds	r0, #1
 800efa2:	d0ab      	beq.n	800eefc <_printf_i+0x164>
 800efa4:	6823      	ldr	r3, [r4, #0]
 800efa6:	079b      	lsls	r3, r3, #30
 800efa8:	d413      	bmi.n	800efd2 <_printf_i+0x23a>
 800efaa:	68e0      	ldr	r0, [r4, #12]
 800efac:	9b03      	ldr	r3, [sp, #12]
 800efae:	4298      	cmp	r0, r3
 800efb0:	bfb8      	it	lt
 800efb2:	4618      	movlt	r0, r3
 800efb4:	e7a4      	b.n	800ef00 <_printf_i+0x168>
 800efb6:	2301      	movs	r3, #1
 800efb8:	4632      	mov	r2, r6
 800efba:	4649      	mov	r1, r9
 800efbc:	4640      	mov	r0, r8
 800efbe:	47d0      	blx	sl
 800efc0:	3001      	adds	r0, #1
 800efc2:	d09b      	beq.n	800eefc <_printf_i+0x164>
 800efc4:	3501      	adds	r5, #1
 800efc6:	68e3      	ldr	r3, [r4, #12]
 800efc8:	9903      	ldr	r1, [sp, #12]
 800efca:	1a5b      	subs	r3, r3, r1
 800efcc:	42ab      	cmp	r3, r5
 800efce:	dcf2      	bgt.n	800efb6 <_printf_i+0x21e>
 800efd0:	e7eb      	b.n	800efaa <_printf_i+0x212>
 800efd2:	2500      	movs	r5, #0
 800efd4:	f104 0619 	add.w	r6, r4, #25
 800efd8:	e7f5      	b.n	800efc6 <_printf_i+0x22e>
 800efda:	bf00      	nop
 800efdc:	08012b66 	.word	0x08012b66
 800efe0:	08012b77 	.word	0x08012b77

0800efe4 <iprintf>:
 800efe4:	b40f      	push	{r0, r1, r2, r3}
 800efe6:	4b0a      	ldr	r3, [pc, #40]	; (800f010 <iprintf+0x2c>)
 800efe8:	b513      	push	{r0, r1, r4, lr}
 800efea:	681c      	ldr	r4, [r3, #0]
 800efec:	b124      	cbz	r4, 800eff8 <iprintf+0x14>
 800efee:	69a3      	ldr	r3, [r4, #24]
 800eff0:	b913      	cbnz	r3, 800eff8 <iprintf+0x14>
 800eff2:	4620      	mov	r0, r4
 800eff4:	f001 f92a 	bl	801024c <__sinit>
 800eff8:	ab05      	add	r3, sp, #20
 800effa:	9a04      	ldr	r2, [sp, #16]
 800effc:	68a1      	ldr	r1, [r4, #8]
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	4620      	mov	r0, r4
 800f002:	f001 fdef 	bl	8010be4 <_vfiprintf_r>
 800f006:	b002      	add	sp, #8
 800f008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f00c:	b004      	add	sp, #16
 800f00e:	4770      	bx	lr
 800f010:	20000018 	.word	0x20000018

0800f014 <_puts_r>:
 800f014:	b570      	push	{r4, r5, r6, lr}
 800f016:	460e      	mov	r6, r1
 800f018:	4605      	mov	r5, r0
 800f01a:	b118      	cbz	r0, 800f024 <_puts_r+0x10>
 800f01c:	6983      	ldr	r3, [r0, #24]
 800f01e:	b90b      	cbnz	r3, 800f024 <_puts_r+0x10>
 800f020:	f001 f914 	bl	801024c <__sinit>
 800f024:	69ab      	ldr	r3, [r5, #24]
 800f026:	68ac      	ldr	r4, [r5, #8]
 800f028:	b913      	cbnz	r3, 800f030 <_puts_r+0x1c>
 800f02a:	4628      	mov	r0, r5
 800f02c:	f001 f90e 	bl	801024c <__sinit>
 800f030:	4b2c      	ldr	r3, [pc, #176]	; (800f0e4 <_puts_r+0xd0>)
 800f032:	429c      	cmp	r4, r3
 800f034:	d120      	bne.n	800f078 <_puts_r+0x64>
 800f036:	686c      	ldr	r4, [r5, #4]
 800f038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f03a:	07db      	lsls	r3, r3, #31
 800f03c:	d405      	bmi.n	800f04a <_puts_r+0x36>
 800f03e:	89a3      	ldrh	r3, [r4, #12]
 800f040:	0598      	lsls	r0, r3, #22
 800f042:	d402      	bmi.n	800f04a <_puts_r+0x36>
 800f044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f046:	f001 f9a4 	bl	8010392 <__retarget_lock_acquire_recursive>
 800f04a:	89a3      	ldrh	r3, [r4, #12]
 800f04c:	0719      	lsls	r1, r3, #28
 800f04e:	d51d      	bpl.n	800f08c <_puts_r+0x78>
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	b1db      	cbz	r3, 800f08c <_puts_r+0x78>
 800f054:	3e01      	subs	r6, #1
 800f056:	68a3      	ldr	r3, [r4, #8]
 800f058:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f05c:	3b01      	subs	r3, #1
 800f05e:	60a3      	str	r3, [r4, #8]
 800f060:	bb39      	cbnz	r1, 800f0b2 <_puts_r+0x9e>
 800f062:	2b00      	cmp	r3, #0
 800f064:	da38      	bge.n	800f0d8 <_puts_r+0xc4>
 800f066:	4622      	mov	r2, r4
 800f068:	210a      	movs	r1, #10
 800f06a:	4628      	mov	r0, r5
 800f06c:	f000 f89c 	bl	800f1a8 <__swbuf_r>
 800f070:	3001      	adds	r0, #1
 800f072:	d011      	beq.n	800f098 <_puts_r+0x84>
 800f074:	250a      	movs	r5, #10
 800f076:	e011      	b.n	800f09c <_puts_r+0x88>
 800f078:	4b1b      	ldr	r3, [pc, #108]	; (800f0e8 <_puts_r+0xd4>)
 800f07a:	429c      	cmp	r4, r3
 800f07c:	d101      	bne.n	800f082 <_puts_r+0x6e>
 800f07e:	68ac      	ldr	r4, [r5, #8]
 800f080:	e7da      	b.n	800f038 <_puts_r+0x24>
 800f082:	4b1a      	ldr	r3, [pc, #104]	; (800f0ec <_puts_r+0xd8>)
 800f084:	429c      	cmp	r4, r3
 800f086:	bf08      	it	eq
 800f088:	68ec      	ldreq	r4, [r5, #12]
 800f08a:	e7d5      	b.n	800f038 <_puts_r+0x24>
 800f08c:	4621      	mov	r1, r4
 800f08e:	4628      	mov	r0, r5
 800f090:	f000 f8dc 	bl	800f24c <__swsetup_r>
 800f094:	2800      	cmp	r0, #0
 800f096:	d0dd      	beq.n	800f054 <_puts_r+0x40>
 800f098:	f04f 35ff 	mov.w	r5, #4294967295
 800f09c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f09e:	07da      	lsls	r2, r3, #31
 800f0a0:	d405      	bmi.n	800f0ae <_puts_r+0x9a>
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	059b      	lsls	r3, r3, #22
 800f0a6:	d402      	bmi.n	800f0ae <_puts_r+0x9a>
 800f0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0aa:	f001 f973 	bl	8010394 <__retarget_lock_release_recursive>
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	bd70      	pop	{r4, r5, r6, pc}
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	da04      	bge.n	800f0c0 <_puts_r+0xac>
 800f0b6:	69a2      	ldr	r2, [r4, #24]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	dc06      	bgt.n	800f0ca <_puts_r+0xb6>
 800f0bc:	290a      	cmp	r1, #10
 800f0be:	d004      	beq.n	800f0ca <_puts_r+0xb6>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	1c5a      	adds	r2, r3, #1
 800f0c4:	6022      	str	r2, [r4, #0]
 800f0c6:	7019      	strb	r1, [r3, #0]
 800f0c8:	e7c5      	b.n	800f056 <_puts_r+0x42>
 800f0ca:	4622      	mov	r2, r4
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	f000 f86b 	bl	800f1a8 <__swbuf_r>
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	d1bf      	bne.n	800f056 <_puts_r+0x42>
 800f0d6:	e7df      	b.n	800f098 <_puts_r+0x84>
 800f0d8:	6823      	ldr	r3, [r4, #0]
 800f0da:	250a      	movs	r5, #10
 800f0dc:	1c5a      	adds	r2, r3, #1
 800f0de:	6022      	str	r2, [r4, #0]
 800f0e0:	701d      	strb	r5, [r3, #0]
 800f0e2:	e7db      	b.n	800f09c <_puts_r+0x88>
 800f0e4:	08012c3c 	.word	0x08012c3c
 800f0e8:	08012c5c 	.word	0x08012c5c
 800f0ec:	08012c1c 	.word	0x08012c1c

0800f0f0 <puts>:
 800f0f0:	4b02      	ldr	r3, [pc, #8]	; (800f0fc <puts+0xc>)
 800f0f2:	4601      	mov	r1, r0
 800f0f4:	6818      	ldr	r0, [r3, #0]
 800f0f6:	f7ff bf8d 	b.w	800f014 <_puts_r>
 800f0fa:	bf00      	nop
 800f0fc:	20000018 	.word	0x20000018

0800f100 <_sbrk_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4d06      	ldr	r5, [pc, #24]	; (800f11c <_sbrk_r+0x1c>)
 800f104:	2300      	movs	r3, #0
 800f106:	4604      	mov	r4, r0
 800f108:	4608      	mov	r0, r1
 800f10a:	602b      	str	r3, [r5, #0]
 800f10c:	f7f6 f9a0 	bl	8005450 <_sbrk>
 800f110:	1c43      	adds	r3, r0, #1
 800f112:	d102      	bne.n	800f11a <_sbrk_r+0x1a>
 800f114:	682b      	ldr	r3, [r5, #0]
 800f116:	b103      	cbz	r3, 800f11a <_sbrk_r+0x1a>
 800f118:	6023      	str	r3, [r4, #0]
 800f11a:	bd38      	pop	{r3, r4, r5, pc}
 800f11c:	20005254 	.word	0x20005254

0800f120 <_raise_r>:
 800f120:	291f      	cmp	r1, #31
 800f122:	b538      	push	{r3, r4, r5, lr}
 800f124:	4604      	mov	r4, r0
 800f126:	460d      	mov	r5, r1
 800f128:	d904      	bls.n	800f134 <_raise_r+0x14>
 800f12a:	2316      	movs	r3, #22
 800f12c:	6003      	str	r3, [r0, #0]
 800f12e:	f04f 30ff 	mov.w	r0, #4294967295
 800f132:	bd38      	pop	{r3, r4, r5, pc}
 800f134:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f136:	b112      	cbz	r2, 800f13e <_raise_r+0x1e>
 800f138:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f13c:	b94b      	cbnz	r3, 800f152 <_raise_r+0x32>
 800f13e:	4620      	mov	r0, r4
 800f140:	f000 f830 	bl	800f1a4 <_getpid_r>
 800f144:	462a      	mov	r2, r5
 800f146:	4601      	mov	r1, r0
 800f148:	4620      	mov	r0, r4
 800f14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f14e:	f000 b817 	b.w	800f180 <_kill_r>
 800f152:	2b01      	cmp	r3, #1
 800f154:	d00a      	beq.n	800f16c <_raise_r+0x4c>
 800f156:	1c59      	adds	r1, r3, #1
 800f158:	d103      	bne.n	800f162 <_raise_r+0x42>
 800f15a:	2316      	movs	r3, #22
 800f15c:	6003      	str	r3, [r0, #0]
 800f15e:	2001      	movs	r0, #1
 800f160:	e7e7      	b.n	800f132 <_raise_r+0x12>
 800f162:	2400      	movs	r4, #0
 800f164:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f168:	4628      	mov	r0, r5
 800f16a:	4798      	blx	r3
 800f16c:	2000      	movs	r0, #0
 800f16e:	e7e0      	b.n	800f132 <_raise_r+0x12>

0800f170 <raise>:
 800f170:	4b02      	ldr	r3, [pc, #8]	; (800f17c <raise+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	f7ff bfd3 	b.w	800f120 <_raise_r>
 800f17a:	bf00      	nop
 800f17c:	20000018 	.word	0x20000018

0800f180 <_kill_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	; (800f1a0 <_kill_r+0x20>)
 800f184:	2300      	movs	r3, #0
 800f186:	4604      	mov	r4, r0
 800f188:	4608      	mov	r0, r1
 800f18a:	4611      	mov	r1, r2
 800f18c:	602b      	str	r3, [r5, #0]
 800f18e:	f7f6 f8d7 	bl	8005340 <_kill>
 800f192:	1c43      	adds	r3, r0, #1
 800f194:	d102      	bne.n	800f19c <_kill_r+0x1c>
 800f196:	682b      	ldr	r3, [r5, #0]
 800f198:	b103      	cbz	r3, 800f19c <_kill_r+0x1c>
 800f19a:	6023      	str	r3, [r4, #0]
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	bf00      	nop
 800f1a0:	20005254 	.word	0x20005254

0800f1a4 <_getpid_r>:
 800f1a4:	f7f6 b8c4 	b.w	8005330 <_getpid>

0800f1a8 <__swbuf_r>:
 800f1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1aa:	460e      	mov	r6, r1
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	b118      	cbz	r0, 800f1ba <__swbuf_r+0x12>
 800f1b2:	6983      	ldr	r3, [r0, #24]
 800f1b4:	b90b      	cbnz	r3, 800f1ba <__swbuf_r+0x12>
 800f1b6:	f001 f849 	bl	801024c <__sinit>
 800f1ba:	4b21      	ldr	r3, [pc, #132]	; (800f240 <__swbuf_r+0x98>)
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	d12b      	bne.n	800f218 <__swbuf_r+0x70>
 800f1c0:	686c      	ldr	r4, [r5, #4]
 800f1c2:	69a3      	ldr	r3, [r4, #24]
 800f1c4:	60a3      	str	r3, [r4, #8]
 800f1c6:	89a3      	ldrh	r3, [r4, #12]
 800f1c8:	071a      	lsls	r2, r3, #28
 800f1ca:	d52f      	bpl.n	800f22c <__swbuf_r+0x84>
 800f1cc:	6923      	ldr	r3, [r4, #16]
 800f1ce:	b36b      	cbz	r3, 800f22c <__swbuf_r+0x84>
 800f1d0:	6923      	ldr	r3, [r4, #16]
 800f1d2:	6820      	ldr	r0, [r4, #0]
 800f1d4:	1ac0      	subs	r0, r0, r3
 800f1d6:	6963      	ldr	r3, [r4, #20]
 800f1d8:	b2f6      	uxtb	r6, r6
 800f1da:	4283      	cmp	r3, r0
 800f1dc:	4637      	mov	r7, r6
 800f1de:	dc04      	bgt.n	800f1ea <__swbuf_r+0x42>
 800f1e0:	4621      	mov	r1, r4
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	f000 ff9e 	bl	8010124 <_fflush_r>
 800f1e8:	bb30      	cbnz	r0, 800f238 <__swbuf_r+0x90>
 800f1ea:	68a3      	ldr	r3, [r4, #8]
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	60a3      	str	r3, [r4, #8]
 800f1f0:	6823      	ldr	r3, [r4, #0]
 800f1f2:	1c5a      	adds	r2, r3, #1
 800f1f4:	6022      	str	r2, [r4, #0]
 800f1f6:	701e      	strb	r6, [r3, #0]
 800f1f8:	6963      	ldr	r3, [r4, #20]
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	4283      	cmp	r3, r0
 800f1fe:	d004      	beq.n	800f20a <__swbuf_r+0x62>
 800f200:	89a3      	ldrh	r3, [r4, #12]
 800f202:	07db      	lsls	r3, r3, #31
 800f204:	d506      	bpl.n	800f214 <__swbuf_r+0x6c>
 800f206:	2e0a      	cmp	r6, #10
 800f208:	d104      	bne.n	800f214 <__swbuf_r+0x6c>
 800f20a:	4621      	mov	r1, r4
 800f20c:	4628      	mov	r0, r5
 800f20e:	f000 ff89 	bl	8010124 <_fflush_r>
 800f212:	b988      	cbnz	r0, 800f238 <__swbuf_r+0x90>
 800f214:	4638      	mov	r0, r7
 800f216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f218:	4b0a      	ldr	r3, [pc, #40]	; (800f244 <__swbuf_r+0x9c>)
 800f21a:	429c      	cmp	r4, r3
 800f21c:	d101      	bne.n	800f222 <__swbuf_r+0x7a>
 800f21e:	68ac      	ldr	r4, [r5, #8]
 800f220:	e7cf      	b.n	800f1c2 <__swbuf_r+0x1a>
 800f222:	4b09      	ldr	r3, [pc, #36]	; (800f248 <__swbuf_r+0xa0>)
 800f224:	429c      	cmp	r4, r3
 800f226:	bf08      	it	eq
 800f228:	68ec      	ldreq	r4, [r5, #12]
 800f22a:	e7ca      	b.n	800f1c2 <__swbuf_r+0x1a>
 800f22c:	4621      	mov	r1, r4
 800f22e:	4628      	mov	r0, r5
 800f230:	f000 f80c 	bl	800f24c <__swsetup_r>
 800f234:	2800      	cmp	r0, #0
 800f236:	d0cb      	beq.n	800f1d0 <__swbuf_r+0x28>
 800f238:	f04f 37ff 	mov.w	r7, #4294967295
 800f23c:	e7ea      	b.n	800f214 <__swbuf_r+0x6c>
 800f23e:	bf00      	nop
 800f240:	08012c3c 	.word	0x08012c3c
 800f244:	08012c5c 	.word	0x08012c5c
 800f248:	08012c1c 	.word	0x08012c1c

0800f24c <__swsetup_r>:
 800f24c:	4b32      	ldr	r3, [pc, #200]	; (800f318 <__swsetup_r+0xcc>)
 800f24e:	b570      	push	{r4, r5, r6, lr}
 800f250:	681d      	ldr	r5, [r3, #0]
 800f252:	4606      	mov	r6, r0
 800f254:	460c      	mov	r4, r1
 800f256:	b125      	cbz	r5, 800f262 <__swsetup_r+0x16>
 800f258:	69ab      	ldr	r3, [r5, #24]
 800f25a:	b913      	cbnz	r3, 800f262 <__swsetup_r+0x16>
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 fff5 	bl	801024c <__sinit>
 800f262:	4b2e      	ldr	r3, [pc, #184]	; (800f31c <__swsetup_r+0xd0>)
 800f264:	429c      	cmp	r4, r3
 800f266:	d10f      	bne.n	800f288 <__swsetup_r+0x3c>
 800f268:	686c      	ldr	r4, [r5, #4]
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f270:	0719      	lsls	r1, r3, #28
 800f272:	d42c      	bmi.n	800f2ce <__swsetup_r+0x82>
 800f274:	06dd      	lsls	r5, r3, #27
 800f276:	d411      	bmi.n	800f29c <__swsetup_r+0x50>
 800f278:	2309      	movs	r3, #9
 800f27a:	6033      	str	r3, [r6, #0]
 800f27c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f280:	81a3      	strh	r3, [r4, #12]
 800f282:	f04f 30ff 	mov.w	r0, #4294967295
 800f286:	e03e      	b.n	800f306 <__swsetup_r+0xba>
 800f288:	4b25      	ldr	r3, [pc, #148]	; (800f320 <__swsetup_r+0xd4>)
 800f28a:	429c      	cmp	r4, r3
 800f28c:	d101      	bne.n	800f292 <__swsetup_r+0x46>
 800f28e:	68ac      	ldr	r4, [r5, #8]
 800f290:	e7eb      	b.n	800f26a <__swsetup_r+0x1e>
 800f292:	4b24      	ldr	r3, [pc, #144]	; (800f324 <__swsetup_r+0xd8>)
 800f294:	429c      	cmp	r4, r3
 800f296:	bf08      	it	eq
 800f298:	68ec      	ldreq	r4, [r5, #12]
 800f29a:	e7e6      	b.n	800f26a <__swsetup_r+0x1e>
 800f29c:	0758      	lsls	r0, r3, #29
 800f29e:	d512      	bpl.n	800f2c6 <__swsetup_r+0x7a>
 800f2a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2a2:	b141      	cbz	r1, 800f2b6 <__swsetup_r+0x6a>
 800f2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2a8:	4299      	cmp	r1, r3
 800f2aa:	d002      	beq.n	800f2b2 <__swsetup_r+0x66>
 800f2ac:	4630      	mov	r0, r6
 800f2ae:	f7ff f985 	bl	800e5bc <_free_r>
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2bc:	81a3      	strh	r3, [r4, #12]
 800f2be:	2300      	movs	r3, #0
 800f2c0:	6063      	str	r3, [r4, #4]
 800f2c2:	6923      	ldr	r3, [r4, #16]
 800f2c4:	6023      	str	r3, [r4, #0]
 800f2c6:	89a3      	ldrh	r3, [r4, #12]
 800f2c8:	f043 0308 	orr.w	r3, r3, #8
 800f2cc:	81a3      	strh	r3, [r4, #12]
 800f2ce:	6923      	ldr	r3, [r4, #16]
 800f2d0:	b94b      	cbnz	r3, 800f2e6 <__swsetup_r+0x9a>
 800f2d2:	89a3      	ldrh	r3, [r4, #12]
 800f2d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f2d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f2dc:	d003      	beq.n	800f2e6 <__swsetup_r+0x9a>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f001 f87d 	bl	80103e0 <__smakebuf_r>
 800f2e6:	89a0      	ldrh	r0, [r4, #12]
 800f2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2ec:	f010 0301 	ands.w	r3, r0, #1
 800f2f0:	d00a      	beq.n	800f308 <__swsetup_r+0xbc>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	60a3      	str	r3, [r4, #8]
 800f2f6:	6963      	ldr	r3, [r4, #20]
 800f2f8:	425b      	negs	r3, r3
 800f2fa:	61a3      	str	r3, [r4, #24]
 800f2fc:	6923      	ldr	r3, [r4, #16]
 800f2fe:	b943      	cbnz	r3, 800f312 <__swsetup_r+0xc6>
 800f300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f304:	d1ba      	bne.n	800f27c <__swsetup_r+0x30>
 800f306:	bd70      	pop	{r4, r5, r6, pc}
 800f308:	0781      	lsls	r1, r0, #30
 800f30a:	bf58      	it	pl
 800f30c:	6963      	ldrpl	r3, [r4, #20]
 800f30e:	60a3      	str	r3, [r4, #8]
 800f310:	e7f4      	b.n	800f2fc <__swsetup_r+0xb0>
 800f312:	2000      	movs	r0, #0
 800f314:	e7f7      	b.n	800f306 <__swsetup_r+0xba>
 800f316:	bf00      	nop
 800f318:	20000018 	.word	0x20000018
 800f31c:	08012c3c 	.word	0x08012c3c
 800f320:	08012c5c 	.word	0x08012c5c
 800f324:	08012c1c 	.word	0x08012c1c

0800f328 <quorem>:
 800f328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32c:	6903      	ldr	r3, [r0, #16]
 800f32e:	690c      	ldr	r4, [r1, #16]
 800f330:	42a3      	cmp	r3, r4
 800f332:	4607      	mov	r7, r0
 800f334:	f2c0 8081 	blt.w	800f43a <quorem+0x112>
 800f338:	3c01      	subs	r4, #1
 800f33a:	f101 0814 	add.w	r8, r1, #20
 800f33e:	f100 0514 	add.w	r5, r0, #20
 800f342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f346:	9301      	str	r3, [sp, #4]
 800f348:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f34c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f350:	3301      	adds	r3, #1
 800f352:	429a      	cmp	r2, r3
 800f354:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f358:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f35c:	fbb2 f6f3 	udiv	r6, r2, r3
 800f360:	d331      	bcc.n	800f3c6 <quorem+0x9e>
 800f362:	f04f 0e00 	mov.w	lr, #0
 800f366:	4640      	mov	r0, r8
 800f368:	46ac      	mov	ip, r5
 800f36a:	46f2      	mov	sl, lr
 800f36c:	f850 2b04 	ldr.w	r2, [r0], #4
 800f370:	b293      	uxth	r3, r2
 800f372:	fb06 e303 	mla	r3, r6, r3, lr
 800f376:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f37a:	b29b      	uxth	r3, r3
 800f37c:	ebaa 0303 	sub.w	r3, sl, r3
 800f380:	0c12      	lsrs	r2, r2, #16
 800f382:	f8dc a000 	ldr.w	sl, [ip]
 800f386:	fb06 e202 	mla	r2, r6, r2, lr
 800f38a:	fa13 f38a 	uxtah	r3, r3, sl
 800f38e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f392:	fa1f fa82 	uxth.w	sl, r2
 800f396:	f8dc 2000 	ldr.w	r2, [ip]
 800f39a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f39e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3a8:	4581      	cmp	r9, r0
 800f3aa:	f84c 3b04 	str.w	r3, [ip], #4
 800f3ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f3b2:	d2db      	bcs.n	800f36c <quorem+0x44>
 800f3b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800f3b8:	b92b      	cbnz	r3, 800f3c6 <quorem+0x9e>
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	3b04      	subs	r3, #4
 800f3be:	429d      	cmp	r5, r3
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	d32e      	bcc.n	800f422 <quorem+0xfa>
 800f3c4:	613c      	str	r4, [r7, #16]
 800f3c6:	4638      	mov	r0, r7
 800f3c8:	f001 fad4 	bl	8010974 <__mcmp>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	db24      	blt.n	800f41a <quorem+0xf2>
 800f3d0:	3601      	adds	r6, #1
 800f3d2:	4628      	mov	r0, r5
 800f3d4:	f04f 0c00 	mov.w	ip, #0
 800f3d8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3dc:	f8d0 e000 	ldr.w	lr, [r0]
 800f3e0:	b293      	uxth	r3, r2
 800f3e2:	ebac 0303 	sub.w	r3, ip, r3
 800f3e6:	0c12      	lsrs	r2, r2, #16
 800f3e8:	fa13 f38e 	uxtah	r3, r3, lr
 800f3ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f3f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f3f4:	b29b      	uxth	r3, r3
 800f3f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3fa:	45c1      	cmp	r9, r8
 800f3fc:	f840 3b04 	str.w	r3, [r0], #4
 800f400:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f404:	d2e8      	bcs.n	800f3d8 <quorem+0xb0>
 800f406:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f40e:	b922      	cbnz	r2, 800f41a <quorem+0xf2>
 800f410:	3b04      	subs	r3, #4
 800f412:	429d      	cmp	r5, r3
 800f414:	461a      	mov	r2, r3
 800f416:	d30a      	bcc.n	800f42e <quorem+0x106>
 800f418:	613c      	str	r4, [r7, #16]
 800f41a:	4630      	mov	r0, r6
 800f41c:	b003      	add	sp, #12
 800f41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	3b04      	subs	r3, #4
 800f426:	2a00      	cmp	r2, #0
 800f428:	d1cc      	bne.n	800f3c4 <quorem+0x9c>
 800f42a:	3c01      	subs	r4, #1
 800f42c:	e7c7      	b.n	800f3be <quorem+0x96>
 800f42e:	6812      	ldr	r2, [r2, #0]
 800f430:	3b04      	subs	r3, #4
 800f432:	2a00      	cmp	r2, #0
 800f434:	d1f0      	bne.n	800f418 <quorem+0xf0>
 800f436:	3c01      	subs	r4, #1
 800f438:	e7eb      	b.n	800f412 <quorem+0xea>
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7ee      	b.n	800f41c <quorem+0xf4>
	...

0800f440 <_dtoa_r>:
 800f440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f444:	ed2d 8b02 	vpush	{d8}
 800f448:	ec57 6b10 	vmov	r6, r7, d0
 800f44c:	b095      	sub	sp, #84	; 0x54
 800f44e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f450:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f454:	9105      	str	r1, [sp, #20]
 800f456:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f45a:	4604      	mov	r4, r0
 800f45c:	9209      	str	r2, [sp, #36]	; 0x24
 800f45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f460:	b975      	cbnz	r5, 800f480 <_dtoa_r+0x40>
 800f462:	2010      	movs	r0, #16
 800f464:	f7ff f88c 	bl	800e580 <malloc>
 800f468:	4602      	mov	r2, r0
 800f46a:	6260      	str	r0, [r4, #36]	; 0x24
 800f46c:	b920      	cbnz	r0, 800f478 <_dtoa_r+0x38>
 800f46e:	4bb2      	ldr	r3, [pc, #712]	; (800f738 <_dtoa_r+0x2f8>)
 800f470:	21ea      	movs	r1, #234	; 0xea
 800f472:	48b2      	ldr	r0, [pc, #712]	; (800f73c <_dtoa_r+0x2fc>)
 800f474:	f001 fd3c 	bl	8010ef0 <__assert_func>
 800f478:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f47c:	6005      	str	r5, [r0, #0]
 800f47e:	60c5      	str	r5, [r0, #12]
 800f480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f482:	6819      	ldr	r1, [r3, #0]
 800f484:	b151      	cbz	r1, 800f49c <_dtoa_r+0x5c>
 800f486:	685a      	ldr	r2, [r3, #4]
 800f488:	604a      	str	r2, [r1, #4]
 800f48a:	2301      	movs	r3, #1
 800f48c:	4093      	lsls	r3, r2
 800f48e:	608b      	str	r3, [r1, #8]
 800f490:	4620      	mov	r0, r4
 800f492:	f001 f831 	bl	80104f8 <_Bfree>
 800f496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f498:	2200      	movs	r2, #0
 800f49a:	601a      	str	r2, [r3, #0]
 800f49c:	1e3b      	subs	r3, r7, #0
 800f49e:	bfb9      	ittee	lt
 800f4a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f4a4:	9303      	strlt	r3, [sp, #12]
 800f4a6:	2300      	movge	r3, #0
 800f4a8:	f8c8 3000 	strge.w	r3, [r8]
 800f4ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f4b0:	4ba3      	ldr	r3, [pc, #652]	; (800f740 <_dtoa_r+0x300>)
 800f4b2:	bfbc      	itt	lt
 800f4b4:	2201      	movlt	r2, #1
 800f4b6:	f8c8 2000 	strlt.w	r2, [r8]
 800f4ba:	ea33 0309 	bics.w	r3, r3, r9
 800f4be:	d11b      	bne.n	800f4f8 <_dtoa_r+0xb8>
 800f4c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f4c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4cc:	4333      	orrs	r3, r6
 800f4ce:	f000 857a 	beq.w	800ffc6 <_dtoa_r+0xb86>
 800f4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4d4:	b963      	cbnz	r3, 800f4f0 <_dtoa_r+0xb0>
 800f4d6:	4b9b      	ldr	r3, [pc, #620]	; (800f744 <_dtoa_r+0x304>)
 800f4d8:	e024      	b.n	800f524 <_dtoa_r+0xe4>
 800f4da:	4b9b      	ldr	r3, [pc, #620]	; (800f748 <_dtoa_r+0x308>)
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f4e2:	6013      	str	r3, [r2, #0]
 800f4e4:	9800      	ldr	r0, [sp, #0]
 800f4e6:	b015      	add	sp, #84	; 0x54
 800f4e8:	ecbd 8b02 	vpop	{d8}
 800f4ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f0:	4b94      	ldr	r3, [pc, #592]	; (800f744 <_dtoa_r+0x304>)
 800f4f2:	9300      	str	r3, [sp, #0]
 800f4f4:	3303      	adds	r3, #3
 800f4f6:	e7f3      	b.n	800f4e0 <_dtoa_r+0xa0>
 800f4f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	ec51 0b17 	vmov	r0, r1, d7
 800f502:	2300      	movs	r3, #0
 800f504:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f508:	f7f1 fb06 	bl	8000b18 <__aeabi_dcmpeq>
 800f50c:	4680      	mov	r8, r0
 800f50e:	b158      	cbz	r0, 800f528 <_dtoa_r+0xe8>
 800f510:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f512:	2301      	movs	r3, #1
 800f514:	6013      	str	r3, [r2, #0]
 800f516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f000 8551 	beq.w	800ffc0 <_dtoa_r+0xb80>
 800f51e:	488b      	ldr	r0, [pc, #556]	; (800f74c <_dtoa_r+0x30c>)
 800f520:	6018      	str	r0, [r3, #0]
 800f522:	1e43      	subs	r3, r0, #1
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	e7dd      	b.n	800f4e4 <_dtoa_r+0xa4>
 800f528:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f52c:	aa12      	add	r2, sp, #72	; 0x48
 800f52e:	a913      	add	r1, sp, #76	; 0x4c
 800f530:	4620      	mov	r0, r4
 800f532:	f001 fac3 	bl	8010abc <__d2b>
 800f536:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f53a:	4683      	mov	fp, r0
 800f53c:	2d00      	cmp	r5, #0
 800f53e:	d07c      	beq.n	800f63a <_dtoa_r+0x1fa>
 800f540:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f542:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800f546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f54a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800f54e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f552:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f556:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f55a:	4b7d      	ldr	r3, [pc, #500]	; (800f750 <_dtoa_r+0x310>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	4630      	mov	r0, r6
 800f560:	4639      	mov	r1, r7
 800f562:	f7f0 feb9 	bl	80002d8 <__aeabi_dsub>
 800f566:	a36e      	add	r3, pc, #440	; (adr r3, 800f720 <_dtoa_r+0x2e0>)
 800f568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56c:	f7f1 f86c 	bl	8000648 <__aeabi_dmul>
 800f570:	a36d      	add	r3, pc, #436	; (adr r3, 800f728 <_dtoa_r+0x2e8>)
 800f572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f576:	f7f0 feb1 	bl	80002dc <__adddf3>
 800f57a:	4606      	mov	r6, r0
 800f57c:	4628      	mov	r0, r5
 800f57e:	460f      	mov	r7, r1
 800f580:	f7f0 fff8 	bl	8000574 <__aeabi_i2d>
 800f584:	a36a      	add	r3, pc, #424	; (adr r3, 800f730 <_dtoa_r+0x2f0>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f1 f85d 	bl	8000648 <__aeabi_dmul>
 800f58e:	4602      	mov	r2, r0
 800f590:	460b      	mov	r3, r1
 800f592:	4630      	mov	r0, r6
 800f594:	4639      	mov	r1, r7
 800f596:	f7f0 fea1 	bl	80002dc <__adddf3>
 800f59a:	4606      	mov	r6, r0
 800f59c:	460f      	mov	r7, r1
 800f59e:	f7f1 fb03 	bl	8000ba8 <__aeabi_d2iz>
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	4682      	mov	sl, r0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	4639      	mov	r1, r7
 800f5ac:	f7f1 fabe 	bl	8000b2c <__aeabi_dcmplt>
 800f5b0:	b148      	cbz	r0, 800f5c6 <_dtoa_r+0x186>
 800f5b2:	4650      	mov	r0, sl
 800f5b4:	f7f0 ffde 	bl	8000574 <__aeabi_i2d>
 800f5b8:	4632      	mov	r2, r6
 800f5ba:	463b      	mov	r3, r7
 800f5bc:	f7f1 faac 	bl	8000b18 <__aeabi_dcmpeq>
 800f5c0:	b908      	cbnz	r0, 800f5c6 <_dtoa_r+0x186>
 800f5c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5c6:	f1ba 0f16 	cmp.w	sl, #22
 800f5ca:	d854      	bhi.n	800f676 <_dtoa_r+0x236>
 800f5cc:	4b61      	ldr	r3, [pc, #388]	; (800f754 <_dtoa_r+0x314>)
 800f5ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f5da:	f7f1 faa7 	bl	8000b2c <__aeabi_dcmplt>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d04b      	beq.n	800f67a <_dtoa_r+0x23a>
 800f5e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	930e      	str	r3, [sp, #56]	; 0x38
 800f5ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f5ec:	1b5d      	subs	r5, r3, r5
 800f5ee:	1e6b      	subs	r3, r5, #1
 800f5f0:	9304      	str	r3, [sp, #16]
 800f5f2:	bf43      	ittte	mi
 800f5f4:	2300      	movmi	r3, #0
 800f5f6:	f1c5 0801 	rsbmi	r8, r5, #1
 800f5fa:	9304      	strmi	r3, [sp, #16]
 800f5fc:	f04f 0800 	movpl.w	r8, #0
 800f600:	f1ba 0f00 	cmp.w	sl, #0
 800f604:	db3b      	blt.n	800f67e <_dtoa_r+0x23e>
 800f606:	9b04      	ldr	r3, [sp, #16]
 800f608:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800f60c:	4453      	add	r3, sl
 800f60e:	9304      	str	r3, [sp, #16]
 800f610:	2300      	movs	r3, #0
 800f612:	9306      	str	r3, [sp, #24]
 800f614:	9b05      	ldr	r3, [sp, #20]
 800f616:	2b09      	cmp	r3, #9
 800f618:	d869      	bhi.n	800f6ee <_dtoa_r+0x2ae>
 800f61a:	2b05      	cmp	r3, #5
 800f61c:	bfc4      	itt	gt
 800f61e:	3b04      	subgt	r3, #4
 800f620:	9305      	strgt	r3, [sp, #20]
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	f1a3 0302 	sub.w	r3, r3, #2
 800f628:	bfcc      	ite	gt
 800f62a:	2500      	movgt	r5, #0
 800f62c:	2501      	movle	r5, #1
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d869      	bhi.n	800f706 <_dtoa_r+0x2c6>
 800f632:	e8df f003 	tbb	[pc, r3]
 800f636:	4e2c      	.short	0x4e2c
 800f638:	5a4c      	.short	0x5a4c
 800f63a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800f63e:	441d      	add	r5, r3
 800f640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f644:	2b20      	cmp	r3, #32
 800f646:	bfc1      	itttt	gt
 800f648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f64c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f650:	fa09 f303 	lslgt.w	r3, r9, r3
 800f654:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f658:	bfda      	itte	le
 800f65a:	f1c3 0320 	rsble	r3, r3, #32
 800f65e:	fa06 f003 	lslle.w	r0, r6, r3
 800f662:	4318      	orrgt	r0, r3
 800f664:	f7f0 ff76 	bl	8000554 <__aeabi_ui2d>
 800f668:	2301      	movs	r3, #1
 800f66a:	4606      	mov	r6, r0
 800f66c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f670:	3d01      	subs	r5, #1
 800f672:	9310      	str	r3, [sp, #64]	; 0x40
 800f674:	e771      	b.n	800f55a <_dtoa_r+0x11a>
 800f676:	2301      	movs	r3, #1
 800f678:	e7b6      	b.n	800f5e8 <_dtoa_r+0x1a8>
 800f67a:	900e      	str	r0, [sp, #56]	; 0x38
 800f67c:	e7b5      	b.n	800f5ea <_dtoa_r+0x1aa>
 800f67e:	f1ca 0300 	rsb	r3, sl, #0
 800f682:	9306      	str	r3, [sp, #24]
 800f684:	2300      	movs	r3, #0
 800f686:	eba8 080a 	sub.w	r8, r8, sl
 800f68a:	930d      	str	r3, [sp, #52]	; 0x34
 800f68c:	e7c2      	b.n	800f614 <_dtoa_r+0x1d4>
 800f68e:	2300      	movs	r3, #0
 800f690:	9308      	str	r3, [sp, #32]
 800f692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f694:	2b00      	cmp	r3, #0
 800f696:	dc39      	bgt.n	800f70c <_dtoa_r+0x2cc>
 800f698:	f04f 0901 	mov.w	r9, #1
 800f69c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f6a0:	464b      	mov	r3, r9
 800f6a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f6a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	6042      	str	r2, [r0, #4]
 800f6ac:	2204      	movs	r2, #4
 800f6ae:	f102 0614 	add.w	r6, r2, #20
 800f6b2:	429e      	cmp	r6, r3
 800f6b4:	6841      	ldr	r1, [r0, #4]
 800f6b6:	d92f      	bls.n	800f718 <_dtoa_r+0x2d8>
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f000 fedd 	bl	8010478 <_Balloc>
 800f6be:	9000      	str	r0, [sp, #0]
 800f6c0:	2800      	cmp	r0, #0
 800f6c2:	d14b      	bne.n	800f75c <_dtoa_r+0x31c>
 800f6c4:	4b24      	ldr	r3, [pc, #144]	; (800f758 <_dtoa_r+0x318>)
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f6cc:	e6d1      	b.n	800f472 <_dtoa_r+0x32>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e7de      	b.n	800f690 <_dtoa_r+0x250>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	9308      	str	r3, [sp, #32]
 800f6d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6d8:	eb0a 0903 	add.w	r9, sl, r3
 800f6dc:	f109 0301 	add.w	r3, r9, #1
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	9301      	str	r3, [sp, #4]
 800f6e4:	bfb8      	it	lt
 800f6e6:	2301      	movlt	r3, #1
 800f6e8:	e7dd      	b.n	800f6a6 <_dtoa_r+0x266>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e7f2      	b.n	800f6d4 <_dtoa_r+0x294>
 800f6ee:	2501      	movs	r5, #1
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	9305      	str	r3, [sp, #20]
 800f6f4:	9508      	str	r5, [sp, #32]
 800f6f6:	f04f 39ff 	mov.w	r9, #4294967295
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800f700:	2312      	movs	r3, #18
 800f702:	9209      	str	r2, [sp, #36]	; 0x24
 800f704:	e7cf      	b.n	800f6a6 <_dtoa_r+0x266>
 800f706:	2301      	movs	r3, #1
 800f708:	9308      	str	r3, [sp, #32]
 800f70a:	e7f4      	b.n	800f6f6 <_dtoa_r+0x2b6>
 800f70c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f710:	f8cd 9004 	str.w	r9, [sp, #4]
 800f714:	464b      	mov	r3, r9
 800f716:	e7c6      	b.n	800f6a6 <_dtoa_r+0x266>
 800f718:	3101      	adds	r1, #1
 800f71a:	6041      	str	r1, [r0, #4]
 800f71c:	0052      	lsls	r2, r2, #1
 800f71e:	e7c6      	b.n	800f6ae <_dtoa_r+0x26e>
 800f720:	636f4361 	.word	0x636f4361
 800f724:	3fd287a7 	.word	0x3fd287a7
 800f728:	8b60c8b3 	.word	0x8b60c8b3
 800f72c:	3fc68a28 	.word	0x3fc68a28
 800f730:	509f79fb 	.word	0x509f79fb
 800f734:	3fd34413 	.word	0x3fd34413
 800f738:	08012b95 	.word	0x08012b95
 800f73c:	08012bac 	.word	0x08012bac
 800f740:	7ff00000 	.word	0x7ff00000
 800f744:	08012b91 	.word	0x08012b91
 800f748:	08012b88 	.word	0x08012b88
 800f74c:	08012b65 	.word	0x08012b65
 800f750:	3ff80000 	.word	0x3ff80000
 800f754:	08012d08 	.word	0x08012d08
 800f758:	08012c0b 	.word	0x08012c0b
 800f75c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f75e:	9a00      	ldr	r2, [sp, #0]
 800f760:	601a      	str	r2, [r3, #0]
 800f762:	9b01      	ldr	r3, [sp, #4]
 800f764:	2b0e      	cmp	r3, #14
 800f766:	f200 80ad 	bhi.w	800f8c4 <_dtoa_r+0x484>
 800f76a:	2d00      	cmp	r5, #0
 800f76c:	f000 80aa 	beq.w	800f8c4 <_dtoa_r+0x484>
 800f770:	f1ba 0f00 	cmp.w	sl, #0
 800f774:	dd36      	ble.n	800f7e4 <_dtoa_r+0x3a4>
 800f776:	4ac3      	ldr	r2, [pc, #780]	; (800fa84 <_dtoa_r+0x644>)
 800f778:	f00a 030f 	and.w	r3, sl, #15
 800f77c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f780:	ed93 7b00 	vldr	d7, [r3]
 800f784:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800f788:	ea4f 172a 	mov.w	r7, sl, asr #4
 800f78c:	eeb0 8a47 	vmov.f32	s16, s14
 800f790:	eef0 8a67 	vmov.f32	s17, s15
 800f794:	d016      	beq.n	800f7c4 <_dtoa_r+0x384>
 800f796:	4bbc      	ldr	r3, [pc, #752]	; (800fa88 <_dtoa_r+0x648>)
 800f798:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f79c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7a0:	f7f1 f87c 	bl	800089c <__aeabi_ddiv>
 800f7a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7a8:	f007 070f 	and.w	r7, r7, #15
 800f7ac:	2503      	movs	r5, #3
 800f7ae:	4eb6      	ldr	r6, [pc, #728]	; (800fa88 <_dtoa_r+0x648>)
 800f7b0:	b957      	cbnz	r7, 800f7c8 <_dtoa_r+0x388>
 800f7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f7b6:	ec53 2b18 	vmov	r2, r3, d8
 800f7ba:	f7f1 f86f 	bl	800089c <__aeabi_ddiv>
 800f7be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c2:	e029      	b.n	800f818 <_dtoa_r+0x3d8>
 800f7c4:	2502      	movs	r5, #2
 800f7c6:	e7f2      	b.n	800f7ae <_dtoa_r+0x36e>
 800f7c8:	07f9      	lsls	r1, r7, #31
 800f7ca:	d508      	bpl.n	800f7de <_dtoa_r+0x39e>
 800f7cc:	ec51 0b18 	vmov	r0, r1, d8
 800f7d0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f7d4:	f7f0 ff38 	bl	8000648 <__aeabi_dmul>
 800f7d8:	ec41 0b18 	vmov	d8, r0, r1
 800f7dc:	3501      	adds	r5, #1
 800f7de:	107f      	asrs	r7, r7, #1
 800f7e0:	3608      	adds	r6, #8
 800f7e2:	e7e5      	b.n	800f7b0 <_dtoa_r+0x370>
 800f7e4:	f000 80a6 	beq.w	800f934 <_dtoa_r+0x4f4>
 800f7e8:	f1ca 0600 	rsb	r6, sl, #0
 800f7ec:	4ba5      	ldr	r3, [pc, #660]	; (800fa84 <_dtoa_r+0x644>)
 800f7ee:	4fa6      	ldr	r7, [pc, #664]	; (800fa88 <_dtoa_r+0x648>)
 800f7f0:	f006 020f 	and.w	r2, r6, #15
 800f7f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f800:	f7f0 ff22 	bl	8000648 <__aeabi_dmul>
 800f804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f808:	1136      	asrs	r6, r6, #4
 800f80a:	2300      	movs	r3, #0
 800f80c:	2502      	movs	r5, #2
 800f80e:	2e00      	cmp	r6, #0
 800f810:	f040 8085 	bne.w	800f91e <_dtoa_r+0x4de>
 800f814:	2b00      	cmp	r3, #0
 800f816:	d1d2      	bne.n	800f7be <_dtoa_r+0x37e>
 800f818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 808c 	beq.w	800f938 <_dtoa_r+0x4f8>
 800f820:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f824:	4b99      	ldr	r3, [pc, #612]	; (800fa8c <_dtoa_r+0x64c>)
 800f826:	2200      	movs	r2, #0
 800f828:	4630      	mov	r0, r6
 800f82a:	4639      	mov	r1, r7
 800f82c:	f7f1 f97e 	bl	8000b2c <__aeabi_dcmplt>
 800f830:	2800      	cmp	r0, #0
 800f832:	f000 8081 	beq.w	800f938 <_dtoa_r+0x4f8>
 800f836:	9b01      	ldr	r3, [sp, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d07d      	beq.n	800f938 <_dtoa_r+0x4f8>
 800f83c:	f1b9 0f00 	cmp.w	r9, #0
 800f840:	dd3c      	ble.n	800f8bc <_dtoa_r+0x47c>
 800f842:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f846:	9307      	str	r3, [sp, #28]
 800f848:	2200      	movs	r2, #0
 800f84a:	4b91      	ldr	r3, [pc, #580]	; (800fa90 <_dtoa_r+0x650>)
 800f84c:	4630      	mov	r0, r6
 800f84e:	4639      	mov	r1, r7
 800f850:	f7f0 fefa 	bl	8000648 <__aeabi_dmul>
 800f854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f858:	3501      	adds	r5, #1
 800f85a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f85e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f862:	4628      	mov	r0, r5
 800f864:	f7f0 fe86 	bl	8000574 <__aeabi_i2d>
 800f868:	4632      	mov	r2, r6
 800f86a:	463b      	mov	r3, r7
 800f86c:	f7f0 feec 	bl	8000648 <__aeabi_dmul>
 800f870:	4b88      	ldr	r3, [pc, #544]	; (800fa94 <_dtoa_r+0x654>)
 800f872:	2200      	movs	r2, #0
 800f874:	f7f0 fd32 	bl	80002dc <__adddf3>
 800f878:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f87c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f880:	9303      	str	r3, [sp, #12]
 800f882:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f884:	2b00      	cmp	r3, #0
 800f886:	d15c      	bne.n	800f942 <_dtoa_r+0x502>
 800f888:	4b83      	ldr	r3, [pc, #524]	; (800fa98 <_dtoa_r+0x658>)
 800f88a:	2200      	movs	r2, #0
 800f88c:	4630      	mov	r0, r6
 800f88e:	4639      	mov	r1, r7
 800f890:	f7f0 fd22 	bl	80002d8 <__aeabi_dsub>
 800f894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f898:	4606      	mov	r6, r0
 800f89a:	460f      	mov	r7, r1
 800f89c:	f7f1 f964 	bl	8000b68 <__aeabi_dcmpgt>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	f040 8296 	bne.w	800fdd2 <_dtoa_r+0x992>
 800f8a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8b0:	4639      	mov	r1, r7
 800f8b2:	f7f1 f93b 	bl	8000b2c <__aeabi_dcmplt>
 800f8b6:	2800      	cmp	r0, #0
 800f8b8:	f040 8288 	bne.w	800fdcc <_dtoa_r+0x98c>
 800f8bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f8c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f8c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f2c0 8158 	blt.w	800fb7c <_dtoa_r+0x73c>
 800f8cc:	f1ba 0f0e 	cmp.w	sl, #14
 800f8d0:	f300 8154 	bgt.w	800fb7c <_dtoa_r+0x73c>
 800f8d4:	4b6b      	ldr	r3, [pc, #428]	; (800fa84 <_dtoa_r+0x644>)
 800f8d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f8da:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f280 80e3 	bge.w	800faac <_dtoa_r+0x66c>
 800f8e6:	9b01      	ldr	r3, [sp, #4]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f300 80df 	bgt.w	800faac <_dtoa_r+0x66c>
 800f8ee:	f040 826d 	bne.w	800fdcc <_dtoa_r+0x98c>
 800f8f2:	4b69      	ldr	r3, [pc, #420]	; (800fa98 <_dtoa_r+0x658>)
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	f7f0 fea5 	bl	8000648 <__aeabi_dmul>
 800f8fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f902:	f7f1 f927 	bl	8000b54 <__aeabi_dcmpge>
 800f906:	9e01      	ldr	r6, [sp, #4]
 800f908:	4637      	mov	r7, r6
 800f90a:	2800      	cmp	r0, #0
 800f90c:	f040 8243 	bne.w	800fd96 <_dtoa_r+0x956>
 800f910:	9d00      	ldr	r5, [sp, #0]
 800f912:	2331      	movs	r3, #49	; 0x31
 800f914:	f805 3b01 	strb.w	r3, [r5], #1
 800f918:	f10a 0a01 	add.w	sl, sl, #1
 800f91c:	e23f      	b.n	800fd9e <_dtoa_r+0x95e>
 800f91e:	07f2      	lsls	r2, r6, #31
 800f920:	d505      	bpl.n	800f92e <_dtoa_r+0x4ee>
 800f922:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f926:	f7f0 fe8f 	bl	8000648 <__aeabi_dmul>
 800f92a:	3501      	adds	r5, #1
 800f92c:	2301      	movs	r3, #1
 800f92e:	1076      	asrs	r6, r6, #1
 800f930:	3708      	adds	r7, #8
 800f932:	e76c      	b.n	800f80e <_dtoa_r+0x3ce>
 800f934:	2502      	movs	r5, #2
 800f936:	e76f      	b.n	800f818 <_dtoa_r+0x3d8>
 800f938:	9b01      	ldr	r3, [sp, #4]
 800f93a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f93e:	930c      	str	r3, [sp, #48]	; 0x30
 800f940:	e78d      	b.n	800f85e <_dtoa_r+0x41e>
 800f942:	9900      	ldr	r1, [sp, #0]
 800f944:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f946:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f948:	4b4e      	ldr	r3, [pc, #312]	; (800fa84 <_dtoa_r+0x644>)
 800f94a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f94e:	4401      	add	r1, r0
 800f950:	9102      	str	r1, [sp, #8]
 800f952:	9908      	ldr	r1, [sp, #32]
 800f954:	eeb0 8a47 	vmov.f32	s16, s14
 800f958:	eef0 8a67 	vmov.f32	s17, s15
 800f95c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f960:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f964:	2900      	cmp	r1, #0
 800f966:	d045      	beq.n	800f9f4 <_dtoa_r+0x5b4>
 800f968:	494c      	ldr	r1, [pc, #304]	; (800fa9c <_dtoa_r+0x65c>)
 800f96a:	2000      	movs	r0, #0
 800f96c:	f7f0 ff96 	bl	800089c <__aeabi_ddiv>
 800f970:	ec53 2b18 	vmov	r2, r3, d8
 800f974:	f7f0 fcb0 	bl	80002d8 <__aeabi_dsub>
 800f978:	9d00      	ldr	r5, [sp, #0]
 800f97a:	ec41 0b18 	vmov	d8, r0, r1
 800f97e:	4639      	mov	r1, r7
 800f980:	4630      	mov	r0, r6
 800f982:	f7f1 f911 	bl	8000ba8 <__aeabi_d2iz>
 800f986:	900c      	str	r0, [sp, #48]	; 0x30
 800f988:	f7f0 fdf4 	bl	8000574 <__aeabi_i2d>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	4630      	mov	r0, r6
 800f992:	4639      	mov	r1, r7
 800f994:	f7f0 fca0 	bl	80002d8 <__aeabi_dsub>
 800f998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f99a:	3330      	adds	r3, #48	; 0x30
 800f99c:	f805 3b01 	strb.w	r3, [r5], #1
 800f9a0:	ec53 2b18 	vmov	r2, r3, d8
 800f9a4:	4606      	mov	r6, r0
 800f9a6:	460f      	mov	r7, r1
 800f9a8:	f7f1 f8c0 	bl	8000b2c <__aeabi_dcmplt>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d165      	bne.n	800fa7c <_dtoa_r+0x63c>
 800f9b0:	4632      	mov	r2, r6
 800f9b2:	463b      	mov	r3, r7
 800f9b4:	4935      	ldr	r1, [pc, #212]	; (800fa8c <_dtoa_r+0x64c>)
 800f9b6:	2000      	movs	r0, #0
 800f9b8:	f7f0 fc8e 	bl	80002d8 <__aeabi_dsub>
 800f9bc:	ec53 2b18 	vmov	r2, r3, d8
 800f9c0:	f7f1 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	f040 80b9 	bne.w	800fb3c <_dtoa_r+0x6fc>
 800f9ca:	9b02      	ldr	r3, [sp, #8]
 800f9cc:	429d      	cmp	r5, r3
 800f9ce:	f43f af75 	beq.w	800f8bc <_dtoa_r+0x47c>
 800f9d2:	4b2f      	ldr	r3, [pc, #188]	; (800fa90 <_dtoa_r+0x650>)
 800f9d4:	ec51 0b18 	vmov	r0, r1, d8
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f7f0 fe35 	bl	8000648 <__aeabi_dmul>
 800f9de:	4b2c      	ldr	r3, [pc, #176]	; (800fa90 <_dtoa_r+0x650>)
 800f9e0:	ec41 0b18 	vmov	d8, r0, r1
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	f7f0 fe2d 	bl	8000648 <__aeabi_dmul>
 800f9ee:	4606      	mov	r6, r0
 800f9f0:	460f      	mov	r7, r1
 800f9f2:	e7c4      	b.n	800f97e <_dtoa_r+0x53e>
 800f9f4:	ec51 0b17 	vmov	r0, r1, d7
 800f9f8:	f7f0 fe26 	bl	8000648 <__aeabi_dmul>
 800f9fc:	9b02      	ldr	r3, [sp, #8]
 800f9fe:	9d00      	ldr	r5, [sp, #0]
 800fa00:	930c      	str	r3, [sp, #48]	; 0x30
 800fa02:	ec41 0b18 	vmov	d8, r0, r1
 800fa06:	4639      	mov	r1, r7
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f7f1 f8cd 	bl	8000ba8 <__aeabi_d2iz>
 800fa0e:	9011      	str	r0, [sp, #68]	; 0x44
 800fa10:	f7f0 fdb0 	bl	8000574 <__aeabi_i2d>
 800fa14:	4602      	mov	r2, r0
 800fa16:	460b      	mov	r3, r1
 800fa18:	4630      	mov	r0, r6
 800fa1a:	4639      	mov	r1, r7
 800fa1c:	f7f0 fc5c 	bl	80002d8 <__aeabi_dsub>
 800fa20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fa22:	3330      	adds	r3, #48	; 0x30
 800fa24:	f805 3b01 	strb.w	r3, [r5], #1
 800fa28:	9b02      	ldr	r3, [sp, #8]
 800fa2a:	429d      	cmp	r5, r3
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	460f      	mov	r7, r1
 800fa30:	f04f 0200 	mov.w	r2, #0
 800fa34:	d134      	bne.n	800faa0 <_dtoa_r+0x660>
 800fa36:	4b19      	ldr	r3, [pc, #100]	; (800fa9c <_dtoa_r+0x65c>)
 800fa38:	ec51 0b18 	vmov	r0, r1, d8
 800fa3c:	f7f0 fc4e 	bl	80002dc <__adddf3>
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	4630      	mov	r0, r6
 800fa46:	4639      	mov	r1, r7
 800fa48:	f7f1 f88e 	bl	8000b68 <__aeabi_dcmpgt>
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d175      	bne.n	800fb3c <_dtoa_r+0x6fc>
 800fa50:	ec53 2b18 	vmov	r2, r3, d8
 800fa54:	4911      	ldr	r1, [pc, #68]	; (800fa9c <_dtoa_r+0x65c>)
 800fa56:	2000      	movs	r0, #0
 800fa58:	f7f0 fc3e 	bl	80002d8 <__aeabi_dsub>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	460b      	mov	r3, r1
 800fa60:	4630      	mov	r0, r6
 800fa62:	4639      	mov	r1, r7
 800fa64:	f7f1 f862 	bl	8000b2c <__aeabi_dcmplt>
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	f43f af27 	beq.w	800f8bc <_dtoa_r+0x47c>
 800fa6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa70:	1e6b      	subs	r3, r5, #1
 800fa72:	930c      	str	r3, [sp, #48]	; 0x30
 800fa74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fa78:	2b30      	cmp	r3, #48	; 0x30
 800fa7a:	d0f8      	beq.n	800fa6e <_dtoa_r+0x62e>
 800fa7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fa80:	e04a      	b.n	800fb18 <_dtoa_r+0x6d8>
 800fa82:	bf00      	nop
 800fa84:	08012d08 	.word	0x08012d08
 800fa88:	08012ce0 	.word	0x08012ce0
 800fa8c:	3ff00000 	.word	0x3ff00000
 800fa90:	40240000 	.word	0x40240000
 800fa94:	401c0000 	.word	0x401c0000
 800fa98:	40140000 	.word	0x40140000
 800fa9c:	3fe00000 	.word	0x3fe00000
 800faa0:	4baf      	ldr	r3, [pc, #700]	; (800fd60 <_dtoa_r+0x920>)
 800faa2:	f7f0 fdd1 	bl	8000648 <__aeabi_dmul>
 800faa6:	4606      	mov	r6, r0
 800faa8:	460f      	mov	r7, r1
 800faaa:	e7ac      	b.n	800fa06 <_dtoa_r+0x5c6>
 800faac:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fab0:	9d00      	ldr	r5, [sp, #0]
 800fab2:	4642      	mov	r2, r8
 800fab4:	464b      	mov	r3, r9
 800fab6:	4630      	mov	r0, r6
 800fab8:	4639      	mov	r1, r7
 800faba:	f7f0 feef 	bl	800089c <__aeabi_ddiv>
 800fabe:	f7f1 f873 	bl	8000ba8 <__aeabi_d2iz>
 800fac2:	9002      	str	r0, [sp, #8]
 800fac4:	f7f0 fd56 	bl	8000574 <__aeabi_i2d>
 800fac8:	4642      	mov	r2, r8
 800faca:	464b      	mov	r3, r9
 800facc:	f7f0 fdbc 	bl	8000648 <__aeabi_dmul>
 800fad0:	4602      	mov	r2, r0
 800fad2:	460b      	mov	r3, r1
 800fad4:	4630      	mov	r0, r6
 800fad6:	4639      	mov	r1, r7
 800fad8:	f7f0 fbfe 	bl	80002d8 <__aeabi_dsub>
 800fadc:	9e02      	ldr	r6, [sp, #8]
 800fade:	9f01      	ldr	r7, [sp, #4]
 800fae0:	3630      	adds	r6, #48	; 0x30
 800fae2:	f805 6b01 	strb.w	r6, [r5], #1
 800fae6:	9e00      	ldr	r6, [sp, #0]
 800fae8:	1bae      	subs	r6, r5, r6
 800faea:	42b7      	cmp	r7, r6
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	d137      	bne.n	800fb62 <_dtoa_r+0x722>
 800faf2:	f7f0 fbf3 	bl	80002dc <__adddf3>
 800faf6:	4642      	mov	r2, r8
 800faf8:	464b      	mov	r3, r9
 800fafa:	4606      	mov	r6, r0
 800fafc:	460f      	mov	r7, r1
 800fafe:	f7f1 f833 	bl	8000b68 <__aeabi_dcmpgt>
 800fb02:	b9c8      	cbnz	r0, 800fb38 <_dtoa_r+0x6f8>
 800fb04:	4642      	mov	r2, r8
 800fb06:	464b      	mov	r3, r9
 800fb08:	4630      	mov	r0, r6
 800fb0a:	4639      	mov	r1, r7
 800fb0c:	f7f1 f804 	bl	8000b18 <__aeabi_dcmpeq>
 800fb10:	b110      	cbz	r0, 800fb18 <_dtoa_r+0x6d8>
 800fb12:	9b02      	ldr	r3, [sp, #8]
 800fb14:	07d9      	lsls	r1, r3, #31
 800fb16:	d40f      	bmi.n	800fb38 <_dtoa_r+0x6f8>
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4659      	mov	r1, fp
 800fb1c:	f000 fcec 	bl	80104f8 <_Bfree>
 800fb20:	2300      	movs	r3, #0
 800fb22:	702b      	strb	r3, [r5, #0]
 800fb24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb26:	f10a 0001 	add.w	r0, sl, #1
 800fb2a:	6018      	str	r0, [r3, #0]
 800fb2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f43f acd8 	beq.w	800f4e4 <_dtoa_r+0xa4>
 800fb34:	601d      	str	r5, [r3, #0]
 800fb36:	e4d5      	b.n	800f4e4 <_dtoa_r+0xa4>
 800fb38:	f8cd a01c 	str.w	sl, [sp, #28]
 800fb3c:	462b      	mov	r3, r5
 800fb3e:	461d      	mov	r5, r3
 800fb40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb44:	2a39      	cmp	r2, #57	; 0x39
 800fb46:	d108      	bne.n	800fb5a <_dtoa_r+0x71a>
 800fb48:	9a00      	ldr	r2, [sp, #0]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d1f7      	bne.n	800fb3e <_dtoa_r+0x6fe>
 800fb4e:	9a07      	ldr	r2, [sp, #28]
 800fb50:	9900      	ldr	r1, [sp, #0]
 800fb52:	3201      	adds	r2, #1
 800fb54:	9207      	str	r2, [sp, #28]
 800fb56:	2230      	movs	r2, #48	; 0x30
 800fb58:	700a      	strb	r2, [r1, #0]
 800fb5a:	781a      	ldrb	r2, [r3, #0]
 800fb5c:	3201      	adds	r2, #1
 800fb5e:	701a      	strb	r2, [r3, #0]
 800fb60:	e78c      	b.n	800fa7c <_dtoa_r+0x63c>
 800fb62:	4b7f      	ldr	r3, [pc, #508]	; (800fd60 <_dtoa_r+0x920>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	f7f0 fd6f 	bl	8000648 <__aeabi_dmul>
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	4606      	mov	r6, r0
 800fb70:	460f      	mov	r7, r1
 800fb72:	f7f0 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	d09b      	beq.n	800fab2 <_dtoa_r+0x672>
 800fb7a:	e7cd      	b.n	800fb18 <_dtoa_r+0x6d8>
 800fb7c:	9a08      	ldr	r2, [sp, #32]
 800fb7e:	2a00      	cmp	r2, #0
 800fb80:	f000 80c4 	beq.w	800fd0c <_dtoa_r+0x8cc>
 800fb84:	9a05      	ldr	r2, [sp, #20]
 800fb86:	2a01      	cmp	r2, #1
 800fb88:	f300 80a8 	bgt.w	800fcdc <_dtoa_r+0x89c>
 800fb8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800fb8e:	2a00      	cmp	r2, #0
 800fb90:	f000 80a0 	beq.w	800fcd4 <_dtoa_r+0x894>
 800fb94:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fb98:	9e06      	ldr	r6, [sp, #24]
 800fb9a:	4645      	mov	r5, r8
 800fb9c:	9a04      	ldr	r2, [sp, #16]
 800fb9e:	2101      	movs	r1, #1
 800fba0:	441a      	add	r2, r3
 800fba2:	4620      	mov	r0, r4
 800fba4:	4498      	add	r8, r3
 800fba6:	9204      	str	r2, [sp, #16]
 800fba8:	f000 fd62 	bl	8010670 <__i2b>
 800fbac:	4607      	mov	r7, r0
 800fbae:	2d00      	cmp	r5, #0
 800fbb0:	dd0b      	ble.n	800fbca <_dtoa_r+0x78a>
 800fbb2:	9b04      	ldr	r3, [sp, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	dd08      	ble.n	800fbca <_dtoa_r+0x78a>
 800fbb8:	42ab      	cmp	r3, r5
 800fbba:	9a04      	ldr	r2, [sp, #16]
 800fbbc:	bfa8      	it	ge
 800fbbe:	462b      	movge	r3, r5
 800fbc0:	eba8 0803 	sub.w	r8, r8, r3
 800fbc4:	1aed      	subs	r5, r5, r3
 800fbc6:	1ad3      	subs	r3, r2, r3
 800fbc8:	9304      	str	r3, [sp, #16]
 800fbca:	9b06      	ldr	r3, [sp, #24]
 800fbcc:	b1fb      	cbz	r3, 800fc0e <_dtoa_r+0x7ce>
 800fbce:	9b08      	ldr	r3, [sp, #32]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 809f 	beq.w	800fd14 <_dtoa_r+0x8d4>
 800fbd6:	2e00      	cmp	r6, #0
 800fbd8:	dd11      	ble.n	800fbfe <_dtoa_r+0x7be>
 800fbda:	4639      	mov	r1, r7
 800fbdc:	4632      	mov	r2, r6
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 fe02 	bl	80107e8 <__pow5mult>
 800fbe4:	465a      	mov	r2, fp
 800fbe6:	4601      	mov	r1, r0
 800fbe8:	4607      	mov	r7, r0
 800fbea:	4620      	mov	r0, r4
 800fbec:	f000 fd56 	bl	801069c <__multiply>
 800fbf0:	4659      	mov	r1, fp
 800fbf2:	9007      	str	r0, [sp, #28]
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	f000 fc7f 	bl	80104f8 <_Bfree>
 800fbfa:	9b07      	ldr	r3, [sp, #28]
 800fbfc:	469b      	mov	fp, r3
 800fbfe:	9b06      	ldr	r3, [sp, #24]
 800fc00:	1b9a      	subs	r2, r3, r6
 800fc02:	d004      	beq.n	800fc0e <_dtoa_r+0x7ce>
 800fc04:	4659      	mov	r1, fp
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 fdee 	bl	80107e8 <__pow5mult>
 800fc0c:	4683      	mov	fp, r0
 800fc0e:	2101      	movs	r1, #1
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 fd2d 	bl	8010670 <__i2b>
 800fc16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	dd7c      	ble.n	800fd18 <_dtoa_r+0x8d8>
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4601      	mov	r1, r0
 800fc22:	4620      	mov	r0, r4
 800fc24:	f000 fde0 	bl	80107e8 <__pow5mult>
 800fc28:	9b05      	ldr	r3, [sp, #20]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	4606      	mov	r6, r0
 800fc2e:	dd76      	ble.n	800fd1e <_dtoa_r+0x8de>
 800fc30:	2300      	movs	r3, #0
 800fc32:	9306      	str	r3, [sp, #24]
 800fc34:	6933      	ldr	r3, [r6, #16]
 800fc36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fc3a:	6918      	ldr	r0, [r3, #16]
 800fc3c:	f000 fcc8 	bl	80105d0 <__hi0bits>
 800fc40:	f1c0 0020 	rsb	r0, r0, #32
 800fc44:	9b04      	ldr	r3, [sp, #16]
 800fc46:	4418      	add	r0, r3
 800fc48:	f010 001f 	ands.w	r0, r0, #31
 800fc4c:	f000 8086 	beq.w	800fd5c <_dtoa_r+0x91c>
 800fc50:	f1c0 0320 	rsb	r3, r0, #32
 800fc54:	2b04      	cmp	r3, #4
 800fc56:	dd7f      	ble.n	800fd58 <_dtoa_r+0x918>
 800fc58:	f1c0 001c 	rsb	r0, r0, #28
 800fc5c:	9b04      	ldr	r3, [sp, #16]
 800fc5e:	4403      	add	r3, r0
 800fc60:	4480      	add	r8, r0
 800fc62:	4405      	add	r5, r0
 800fc64:	9304      	str	r3, [sp, #16]
 800fc66:	f1b8 0f00 	cmp.w	r8, #0
 800fc6a:	dd05      	ble.n	800fc78 <_dtoa_r+0x838>
 800fc6c:	4659      	mov	r1, fp
 800fc6e:	4642      	mov	r2, r8
 800fc70:	4620      	mov	r0, r4
 800fc72:	f000 fe13 	bl	801089c <__lshift>
 800fc76:	4683      	mov	fp, r0
 800fc78:	9b04      	ldr	r3, [sp, #16]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	dd05      	ble.n	800fc8a <_dtoa_r+0x84a>
 800fc7e:	4631      	mov	r1, r6
 800fc80:	461a      	mov	r2, r3
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 fe0a 	bl	801089c <__lshift>
 800fc88:	4606      	mov	r6, r0
 800fc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d069      	beq.n	800fd64 <_dtoa_r+0x924>
 800fc90:	4631      	mov	r1, r6
 800fc92:	4658      	mov	r0, fp
 800fc94:	f000 fe6e 	bl	8010974 <__mcmp>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	da63      	bge.n	800fd64 <_dtoa_r+0x924>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	4659      	mov	r1, fp
 800fca0:	220a      	movs	r2, #10
 800fca2:	4620      	mov	r0, r4
 800fca4:	f000 fc4a 	bl	801053c <__multadd>
 800fca8:	9b08      	ldr	r3, [sp, #32]
 800fcaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fcae:	4683      	mov	fp, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	f000 818f 	beq.w	800ffd4 <_dtoa_r+0xb94>
 800fcb6:	4639      	mov	r1, r7
 800fcb8:	2300      	movs	r3, #0
 800fcba:	220a      	movs	r2, #10
 800fcbc:	4620      	mov	r0, r4
 800fcbe:	f000 fc3d 	bl	801053c <__multadd>
 800fcc2:	f1b9 0f00 	cmp.w	r9, #0
 800fcc6:	4607      	mov	r7, r0
 800fcc8:	f300 808e 	bgt.w	800fde8 <_dtoa_r+0x9a8>
 800fccc:	9b05      	ldr	r3, [sp, #20]
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	dc50      	bgt.n	800fd74 <_dtoa_r+0x934>
 800fcd2:	e089      	b.n	800fde8 <_dtoa_r+0x9a8>
 800fcd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fcda:	e75d      	b.n	800fb98 <_dtoa_r+0x758>
 800fcdc:	9b01      	ldr	r3, [sp, #4]
 800fcde:	1e5e      	subs	r6, r3, #1
 800fce0:	9b06      	ldr	r3, [sp, #24]
 800fce2:	42b3      	cmp	r3, r6
 800fce4:	bfbf      	itttt	lt
 800fce6:	9b06      	ldrlt	r3, [sp, #24]
 800fce8:	9606      	strlt	r6, [sp, #24]
 800fcea:	1af2      	sublt	r2, r6, r3
 800fcec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800fcee:	bfb6      	itet	lt
 800fcf0:	189b      	addlt	r3, r3, r2
 800fcf2:	1b9e      	subge	r6, r3, r6
 800fcf4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800fcf6:	9b01      	ldr	r3, [sp, #4]
 800fcf8:	bfb8      	it	lt
 800fcfa:	2600      	movlt	r6, #0
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	bfb5      	itete	lt
 800fd00:	eba8 0503 	sublt.w	r5, r8, r3
 800fd04:	9b01      	ldrge	r3, [sp, #4]
 800fd06:	2300      	movlt	r3, #0
 800fd08:	4645      	movge	r5, r8
 800fd0a:	e747      	b.n	800fb9c <_dtoa_r+0x75c>
 800fd0c:	9e06      	ldr	r6, [sp, #24]
 800fd0e:	9f08      	ldr	r7, [sp, #32]
 800fd10:	4645      	mov	r5, r8
 800fd12:	e74c      	b.n	800fbae <_dtoa_r+0x76e>
 800fd14:	9a06      	ldr	r2, [sp, #24]
 800fd16:	e775      	b.n	800fc04 <_dtoa_r+0x7c4>
 800fd18:	9b05      	ldr	r3, [sp, #20]
 800fd1a:	2b01      	cmp	r3, #1
 800fd1c:	dc18      	bgt.n	800fd50 <_dtoa_r+0x910>
 800fd1e:	9b02      	ldr	r3, [sp, #8]
 800fd20:	b9b3      	cbnz	r3, 800fd50 <_dtoa_r+0x910>
 800fd22:	9b03      	ldr	r3, [sp, #12]
 800fd24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd28:	b9a3      	cbnz	r3, 800fd54 <_dtoa_r+0x914>
 800fd2a:	9b03      	ldr	r3, [sp, #12]
 800fd2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fd30:	0d1b      	lsrs	r3, r3, #20
 800fd32:	051b      	lsls	r3, r3, #20
 800fd34:	b12b      	cbz	r3, 800fd42 <_dtoa_r+0x902>
 800fd36:	9b04      	ldr	r3, [sp, #16]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	9304      	str	r3, [sp, #16]
 800fd3c:	f108 0801 	add.w	r8, r8, #1
 800fd40:	2301      	movs	r3, #1
 800fd42:	9306      	str	r3, [sp, #24]
 800fd44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f47f af74 	bne.w	800fc34 <_dtoa_r+0x7f4>
 800fd4c:	2001      	movs	r0, #1
 800fd4e:	e779      	b.n	800fc44 <_dtoa_r+0x804>
 800fd50:	2300      	movs	r3, #0
 800fd52:	e7f6      	b.n	800fd42 <_dtoa_r+0x902>
 800fd54:	9b02      	ldr	r3, [sp, #8]
 800fd56:	e7f4      	b.n	800fd42 <_dtoa_r+0x902>
 800fd58:	d085      	beq.n	800fc66 <_dtoa_r+0x826>
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	301c      	adds	r0, #28
 800fd5e:	e77d      	b.n	800fc5c <_dtoa_r+0x81c>
 800fd60:	40240000 	.word	0x40240000
 800fd64:	9b01      	ldr	r3, [sp, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dc38      	bgt.n	800fddc <_dtoa_r+0x99c>
 800fd6a:	9b05      	ldr	r3, [sp, #20]
 800fd6c:	2b02      	cmp	r3, #2
 800fd6e:	dd35      	ble.n	800fddc <_dtoa_r+0x99c>
 800fd70:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fd74:	f1b9 0f00 	cmp.w	r9, #0
 800fd78:	d10d      	bne.n	800fd96 <_dtoa_r+0x956>
 800fd7a:	4631      	mov	r1, r6
 800fd7c:	464b      	mov	r3, r9
 800fd7e:	2205      	movs	r2, #5
 800fd80:	4620      	mov	r0, r4
 800fd82:	f000 fbdb 	bl	801053c <__multadd>
 800fd86:	4601      	mov	r1, r0
 800fd88:	4606      	mov	r6, r0
 800fd8a:	4658      	mov	r0, fp
 800fd8c:	f000 fdf2 	bl	8010974 <__mcmp>
 800fd90:	2800      	cmp	r0, #0
 800fd92:	f73f adbd 	bgt.w	800f910 <_dtoa_r+0x4d0>
 800fd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd98:	9d00      	ldr	r5, [sp, #0]
 800fd9a:	ea6f 0a03 	mvn.w	sl, r3
 800fd9e:	f04f 0800 	mov.w	r8, #0
 800fda2:	4631      	mov	r1, r6
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 fba7 	bl	80104f8 <_Bfree>
 800fdaa:	2f00      	cmp	r7, #0
 800fdac:	f43f aeb4 	beq.w	800fb18 <_dtoa_r+0x6d8>
 800fdb0:	f1b8 0f00 	cmp.w	r8, #0
 800fdb4:	d005      	beq.n	800fdc2 <_dtoa_r+0x982>
 800fdb6:	45b8      	cmp	r8, r7
 800fdb8:	d003      	beq.n	800fdc2 <_dtoa_r+0x982>
 800fdba:	4641      	mov	r1, r8
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 fb9b 	bl	80104f8 <_Bfree>
 800fdc2:	4639      	mov	r1, r7
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	f000 fb97 	bl	80104f8 <_Bfree>
 800fdca:	e6a5      	b.n	800fb18 <_dtoa_r+0x6d8>
 800fdcc:	2600      	movs	r6, #0
 800fdce:	4637      	mov	r7, r6
 800fdd0:	e7e1      	b.n	800fd96 <_dtoa_r+0x956>
 800fdd2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fdd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800fdd8:	4637      	mov	r7, r6
 800fdda:	e599      	b.n	800f910 <_dtoa_r+0x4d0>
 800fddc:	9b08      	ldr	r3, [sp, #32]
 800fdde:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 80fd 	beq.w	800ffe2 <_dtoa_r+0xba2>
 800fde8:	2d00      	cmp	r5, #0
 800fdea:	dd05      	ble.n	800fdf8 <_dtoa_r+0x9b8>
 800fdec:	4639      	mov	r1, r7
 800fdee:	462a      	mov	r2, r5
 800fdf0:	4620      	mov	r0, r4
 800fdf2:	f000 fd53 	bl	801089c <__lshift>
 800fdf6:	4607      	mov	r7, r0
 800fdf8:	9b06      	ldr	r3, [sp, #24]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d05c      	beq.n	800feb8 <_dtoa_r+0xa78>
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	4620      	mov	r0, r4
 800fe02:	f000 fb39 	bl	8010478 <_Balloc>
 800fe06:	4605      	mov	r5, r0
 800fe08:	b928      	cbnz	r0, 800fe16 <_dtoa_r+0x9d6>
 800fe0a:	4b80      	ldr	r3, [pc, #512]	; (801000c <_dtoa_r+0xbcc>)
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fe12:	f7ff bb2e 	b.w	800f472 <_dtoa_r+0x32>
 800fe16:	693a      	ldr	r2, [r7, #16]
 800fe18:	3202      	adds	r2, #2
 800fe1a:	0092      	lsls	r2, r2, #2
 800fe1c:	f107 010c 	add.w	r1, r7, #12
 800fe20:	300c      	adds	r0, #12
 800fe22:	f7fe fbb5 	bl	800e590 <memcpy>
 800fe26:	2201      	movs	r2, #1
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4620      	mov	r0, r4
 800fe2c:	f000 fd36 	bl	801089c <__lshift>
 800fe30:	9b00      	ldr	r3, [sp, #0]
 800fe32:	3301      	adds	r3, #1
 800fe34:	9301      	str	r3, [sp, #4]
 800fe36:	9b00      	ldr	r3, [sp, #0]
 800fe38:	444b      	add	r3, r9
 800fe3a:	9307      	str	r3, [sp, #28]
 800fe3c:	9b02      	ldr	r3, [sp, #8]
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	46b8      	mov	r8, r7
 800fe44:	9306      	str	r3, [sp, #24]
 800fe46:	4607      	mov	r7, r0
 800fe48:	9b01      	ldr	r3, [sp, #4]
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	3b01      	subs	r3, #1
 800fe4e:	4658      	mov	r0, fp
 800fe50:	9302      	str	r3, [sp, #8]
 800fe52:	f7ff fa69 	bl	800f328 <quorem>
 800fe56:	4603      	mov	r3, r0
 800fe58:	3330      	adds	r3, #48	; 0x30
 800fe5a:	9004      	str	r0, [sp, #16]
 800fe5c:	4641      	mov	r1, r8
 800fe5e:	4658      	mov	r0, fp
 800fe60:	9308      	str	r3, [sp, #32]
 800fe62:	f000 fd87 	bl	8010974 <__mcmp>
 800fe66:	463a      	mov	r2, r7
 800fe68:	4681      	mov	r9, r0
 800fe6a:	4631      	mov	r1, r6
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	f000 fd9d 	bl	80109ac <__mdiff>
 800fe72:	68c2      	ldr	r2, [r0, #12]
 800fe74:	9b08      	ldr	r3, [sp, #32]
 800fe76:	4605      	mov	r5, r0
 800fe78:	bb02      	cbnz	r2, 800febc <_dtoa_r+0xa7c>
 800fe7a:	4601      	mov	r1, r0
 800fe7c:	4658      	mov	r0, fp
 800fe7e:	f000 fd79 	bl	8010974 <__mcmp>
 800fe82:	9b08      	ldr	r3, [sp, #32]
 800fe84:	4602      	mov	r2, r0
 800fe86:	4629      	mov	r1, r5
 800fe88:	4620      	mov	r0, r4
 800fe8a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800fe8e:	f000 fb33 	bl	80104f8 <_Bfree>
 800fe92:	9b05      	ldr	r3, [sp, #20]
 800fe94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe96:	9d01      	ldr	r5, [sp, #4]
 800fe98:	ea43 0102 	orr.w	r1, r3, r2
 800fe9c:	9b06      	ldr	r3, [sp, #24]
 800fe9e:	430b      	orrs	r3, r1
 800fea0:	9b08      	ldr	r3, [sp, #32]
 800fea2:	d10d      	bne.n	800fec0 <_dtoa_r+0xa80>
 800fea4:	2b39      	cmp	r3, #57	; 0x39
 800fea6:	d029      	beq.n	800fefc <_dtoa_r+0xabc>
 800fea8:	f1b9 0f00 	cmp.w	r9, #0
 800feac:	dd01      	ble.n	800feb2 <_dtoa_r+0xa72>
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	3331      	adds	r3, #49	; 0x31
 800feb2:	9a02      	ldr	r2, [sp, #8]
 800feb4:	7013      	strb	r3, [r2, #0]
 800feb6:	e774      	b.n	800fda2 <_dtoa_r+0x962>
 800feb8:	4638      	mov	r0, r7
 800feba:	e7b9      	b.n	800fe30 <_dtoa_r+0x9f0>
 800febc:	2201      	movs	r2, #1
 800febe:	e7e2      	b.n	800fe86 <_dtoa_r+0xa46>
 800fec0:	f1b9 0f00 	cmp.w	r9, #0
 800fec4:	db06      	blt.n	800fed4 <_dtoa_r+0xa94>
 800fec6:	9905      	ldr	r1, [sp, #20]
 800fec8:	ea41 0909 	orr.w	r9, r1, r9
 800fecc:	9906      	ldr	r1, [sp, #24]
 800fece:	ea59 0101 	orrs.w	r1, r9, r1
 800fed2:	d120      	bne.n	800ff16 <_dtoa_r+0xad6>
 800fed4:	2a00      	cmp	r2, #0
 800fed6:	ddec      	ble.n	800feb2 <_dtoa_r+0xa72>
 800fed8:	4659      	mov	r1, fp
 800feda:	2201      	movs	r2, #1
 800fedc:	4620      	mov	r0, r4
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	f000 fcdc 	bl	801089c <__lshift>
 800fee4:	4631      	mov	r1, r6
 800fee6:	4683      	mov	fp, r0
 800fee8:	f000 fd44 	bl	8010974 <__mcmp>
 800feec:	2800      	cmp	r0, #0
 800feee:	9b01      	ldr	r3, [sp, #4]
 800fef0:	dc02      	bgt.n	800fef8 <_dtoa_r+0xab8>
 800fef2:	d1de      	bne.n	800feb2 <_dtoa_r+0xa72>
 800fef4:	07da      	lsls	r2, r3, #31
 800fef6:	d5dc      	bpl.n	800feb2 <_dtoa_r+0xa72>
 800fef8:	2b39      	cmp	r3, #57	; 0x39
 800fefa:	d1d8      	bne.n	800feae <_dtoa_r+0xa6e>
 800fefc:	9a02      	ldr	r2, [sp, #8]
 800fefe:	2339      	movs	r3, #57	; 0x39
 800ff00:	7013      	strb	r3, [r2, #0]
 800ff02:	462b      	mov	r3, r5
 800ff04:	461d      	mov	r5, r3
 800ff06:	3b01      	subs	r3, #1
 800ff08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ff0c:	2a39      	cmp	r2, #57	; 0x39
 800ff0e:	d050      	beq.n	800ffb2 <_dtoa_r+0xb72>
 800ff10:	3201      	adds	r2, #1
 800ff12:	701a      	strb	r2, [r3, #0]
 800ff14:	e745      	b.n	800fda2 <_dtoa_r+0x962>
 800ff16:	2a00      	cmp	r2, #0
 800ff18:	dd03      	ble.n	800ff22 <_dtoa_r+0xae2>
 800ff1a:	2b39      	cmp	r3, #57	; 0x39
 800ff1c:	d0ee      	beq.n	800fefc <_dtoa_r+0xabc>
 800ff1e:	3301      	adds	r3, #1
 800ff20:	e7c7      	b.n	800feb2 <_dtoa_r+0xa72>
 800ff22:	9a01      	ldr	r2, [sp, #4]
 800ff24:	9907      	ldr	r1, [sp, #28]
 800ff26:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff2a:	428a      	cmp	r2, r1
 800ff2c:	d02a      	beq.n	800ff84 <_dtoa_r+0xb44>
 800ff2e:	4659      	mov	r1, fp
 800ff30:	2300      	movs	r3, #0
 800ff32:	220a      	movs	r2, #10
 800ff34:	4620      	mov	r0, r4
 800ff36:	f000 fb01 	bl	801053c <__multadd>
 800ff3a:	45b8      	cmp	r8, r7
 800ff3c:	4683      	mov	fp, r0
 800ff3e:	f04f 0300 	mov.w	r3, #0
 800ff42:	f04f 020a 	mov.w	r2, #10
 800ff46:	4641      	mov	r1, r8
 800ff48:	4620      	mov	r0, r4
 800ff4a:	d107      	bne.n	800ff5c <_dtoa_r+0xb1c>
 800ff4c:	f000 faf6 	bl	801053c <__multadd>
 800ff50:	4680      	mov	r8, r0
 800ff52:	4607      	mov	r7, r0
 800ff54:	9b01      	ldr	r3, [sp, #4]
 800ff56:	3301      	adds	r3, #1
 800ff58:	9301      	str	r3, [sp, #4]
 800ff5a:	e775      	b.n	800fe48 <_dtoa_r+0xa08>
 800ff5c:	f000 faee 	bl	801053c <__multadd>
 800ff60:	4639      	mov	r1, r7
 800ff62:	4680      	mov	r8, r0
 800ff64:	2300      	movs	r3, #0
 800ff66:	220a      	movs	r2, #10
 800ff68:	4620      	mov	r0, r4
 800ff6a:	f000 fae7 	bl	801053c <__multadd>
 800ff6e:	4607      	mov	r7, r0
 800ff70:	e7f0      	b.n	800ff54 <_dtoa_r+0xb14>
 800ff72:	f1b9 0f00 	cmp.w	r9, #0
 800ff76:	9a00      	ldr	r2, [sp, #0]
 800ff78:	bfcc      	ite	gt
 800ff7a:	464d      	movgt	r5, r9
 800ff7c:	2501      	movle	r5, #1
 800ff7e:	4415      	add	r5, r2
 800ff80:	f04f 0800 	mov.w	r8, #0
 800ff84:	4659      	mov	r1, fp
 800ff86:	2201      	movs	r2, #1
 800ff88:	4620      	mov	r0, r4
 800ff8a:	9301      	str	r3, [sp, #4]
 800ff8c:	f000 fc86 	bl	801089c <__lshift>
 800ff90:	4631      	mov	r1, r6
 800ff92:	4683      	mov	fp, r0
 800ff94:	f000 fcee 	bl	8010974 <__mcmp>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	dcb2      	bgt.n	800ff02 <_dtoa_r+0xac2>
 800ff9c:	d102      	bne.n	800ffa4 <_dtoa_r+0xb64>
 800ff9e:	9b01      	ldr	r3, [sp, #4]
 800ffa0:	07db      	lsls	r3, r3, #31
 800ffa2:	d4ae      	bmi.n	800ff02 <_dtoa_r+0xac2>
 800ffa4:	462b      	mov	r3, r5
 800ffa6:	461d      	mov	r5, r3
 800ffa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffac:	2a30      	cmp	r2, #48	; 0x30
 800ffae:	d0fa      	beq.n	800ffa6 <_dtoa_r+0xb66>
 800ffb0:	e6f7      	b.n	800fda2 <_dtoa_r+0x962>
 800ffb2:	9a00      	ldr	r2, [sp, #0]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d1a5      	bne.n	800ff04 <_dtoa_r+0xac4>
 800ffb8:	f10a 0a01 	add.w	sl, sl, #1
 800ffbc:	2331      	movs	r3, #49	; 0x31
 800ffbe:	e779      	b.n	800feb4 <_dtoa_r+0xa74>
 800ffc0:	4b13      	ldr	r3, [pc, #76]	; (8010010 <_dtoa_r+0xbd0>)
 800ffc2:	f7ff baaf 	b.w	800f524 <_dtoa_r+0xe4>
 800ffc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f47f aa86 	bne.w	800f4da <_dtoa_r+0x9a>
 800ffce:	4b11      	ldr	r3, [pc, #68]	; (8010014 <_dtoa_r+0xbd4>)
 800ffd0:	f7ff baa8 	b.w	800f524 <_dtoa_r+0xe4>
 800ffd4:	f1b9 0f00 	cmp.w	r9, #0
 800ffd8:	dc03      	bgt.n	800ffe2 <_dtoa_r+0xba2>
 800ffda:	9b05      	ldr	r3, [sp, #20]
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	f73f aec9 	bgt.w	800fd74 <_dtoa_r+0x934>
 800ffe2:	9d00      	ldr	r5, [sp, #0]
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	4658      	mov	r0, fp
 800ffe8:	f7ff f99e 	bl	800f328 <quorem>
 800ffec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fff0:	f805 3b01 	strb.w	r3, [r5], #1
 800fff4:	9a00      	ldr	r2, [sp, #0]
 800fff6:	1aaa      	subs	r2, r5, r2
 800fff8:	4591      	cmp	r9, r2
 800fffa:	ddba      	ble.n	800ff72 <_dtoa_r+0xb32>
 800fffc:	4659      	mov	r1, fp
 800fffe:	2300      	movs	r3, #0
 8010000:	220a      	movs	r2, #10
 8010002:	4620      	mov	r0, r4
 8010004:	f000 fa9a 	bl	801053c <__multadd>
 8010008:	4683      	mov	fp, r0
 801000a:	e7eb      	b.n	800ffe4 <_dtoa_r+0xba4>
 801000c:	08012c0b 	.word	0x08012c0b
 8010010:	08012b64 	.word	0x08012b64
 8010014:	08012b88 	.word	0x08012b88

08010018 <__sflush_r>:
 8010018:	898a      	ldrh	r2, [r1, #12]
 801001a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801001e:	4605      	mov	r5, r0
 8010020:	0710      	lsls	r0, r2, #28
 8010022:	460c      	mov	r4, r1
 8010024:	d458      	bmi.n	80100d8 <__sflush_r+0xc0>
 8010026:	684b      	ldr	r3, [r1, #4]
 8010028:	2b00      	cmp	r3, #0
 801002a:	dc05      	bgt.n	8010038 <__sflush_r+0x20>
 801002c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801002e:	2b00      	cmp	r3, #0
 8010030:	dc02      	bgt.n	8010038 <__sflush_r+0x20>
 8010032:	2000      	movs	r0, #0
 8010034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010038:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801003a:	2e00      	cmp	r6, #0
 801003c:	d0f9      	beq.n	8010032 <__sflush_r+0x1a>
 801003e:	2300      	movs	r3, #0
 8010040:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010044:	682f      	ldr	r7, [r5, #0]
 8010046:	602b      	str	r3, [r5, #0]
 8010048:	d032      	beq.n	80100b0 <__sflush_r+0x98>
 801004a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	075a      	lsls	r2, r3, #29
 8010050:	d505      	bpl.n	801005e <__sflush_r+0x46>
 8010052:	6863      	ldr	r3, [r4, #4]
 8010054:	1ac0      	subs	r0, r0, r3
 8010056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010058:	b10b      	cbz	r3, 801005e <__sflush_r+0x46>
 801005a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801005c:	1ac0      	subs	r0, r0, r3
 801005e:	2300      	movs	r3, #0
 8010060:	4602      	mov	r2, r0
 8010062:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010064:	6a21      	ldr	r1, [r4, #32]
 8010066:	4628      	mov	r0, r5
 8010068:	47b0      	blx	r6
 801006a:	1c43      	adds	r3, r0, #1
 801006c:	89a3      	ldrh	r3, [r4, #12]
 801006e:	d106      	bne.n	801007e <__sflush_r+0x66>
 8010070:	6829      	ldr	r1, [r5, #0]
 8010072:	291d      	cmp	r1, #29
 8010074:	d82c      	bhi.n	80100d0 <__sflush_r+0xb8>
 8010076:	4a2a      	ldr	r2, [pc, #168]	; (8010120 <__sflush_r+0x108>)
 8010078:	40ca      	lsrs	r2, r1
 801007a:	07d6      	lsls	r6, r2, #31
 801007c:	d528      	bpl.n	80100d0 <__sflush_r+0xb8>
 801007e:	2200      	movs	r2, #0
 8010080:	6062      	str	r2, [r4, #4]
 8010082:	04d9      	lsls	r1, r3, #19
 8010084:	6922      	ldr	r2, [r4, #16]
 8010086:	6022      	str	r2, [r4, #0]
 8010088:	d504      	bpl.n	8010094 <__sflush_r+0x7c>
 801008a:	1c42      	adds	r2, r0, #1
 801008c:	d101      	bne.n	8010092 <__sflush_r+0x7a>
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	b903      	cbnz	r3, 8010094 <__sflush_r+0x7c>
 8010092:	6560      	str	r0, [r4, #84]	; 0x54
 8010094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010096:	602f      	str	r7, [r5, #0]
 8010098:	2900      	cmp	r1, #0
 801009a:	d0ca      	beq.n	8010032 <__sflush_r+0x1a>
 801009c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a0:	4299      	cmp	r1, r3
 80100a2:	d002      	beq.n	80100aa <__sflush_r+0x92>
 80100a4:	4628      	mov	r0, r5
 80100a6:	f7fe fa89 	bl	800e5bc <_free_r>
 80100aa:	2000      	movs	r0, #0
 80100ac:	6360      	str	r0, [r4, #52]	; 0x34
 80100ae:	e7c1      	b.n	8010034 <__sflush_r+0x1c>
 80100b0:	6a21      	ldr	r1, [r4, #32]
 80100b2:	2301      	movs	r3, #1
 80100b4:	4628      	mov	r0, r5
 80100b6:	47b0      	blx	r6
 80100b8:	1c41      	adds	r1, r0, #1
 80100ba:	d1c7      	bne.n	801004c <__sflush_r+0x34>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d0c4      	beq.n	801004c <__sflush_r+0x34>
 80100c2:	2b1d      	cmp	r3, #29
 80100c4:	d001      	beq.n	80100ca <__sflush_r+0xb2>
 80100c6:	2b16      	cmp	r3, #22
 80100c8:	d101      	bne.n	80100ce <__sflush_r+0xb6>
 80100ca:	602f      	str	r7, [r5, #0]
 80100cc:	e7b1      	b.n	8010032 <__sflush_r+0x1a>
 80100ce:	89a3      	ldrh	r3, [r4, #12]
 80100d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100d4:	81a3      	strh	r3, [r4, #12]
 80100d6:	e7ad      	b.n	8010034 <__sflush_r+0x1c>
 80100d8:	690f      	ldr	r7, [r1, #16]
 80100da:	2f00      	cmp	r7, #0
 80100dc:	d0a9      	beq.n	8010032 <__sflush_r+0x1a>
 80100de:	0793      	lsls	r3, r2, #30
 80100e0:	680e      	ldr	r6, [r1, #0]
 80100e2:	bf08      	it	eq
 80100e4:	694b      	ldreq	r3, [r1, #20]
 80100e6:	600f      	str	r7, [r1, #0]
 80100e8:	bf18      	it	ne
 80100ea:	2300      	movne	r3, #0
 80100ec:	eba6 0807 	sub.w	r8, r6, r7
 80100f0:	608b      	str	r3, [r1, #8]
 80100f2:	f1b8 0f00 	cmp.w	r8, #0
 80100f6:	dd9c      	ble.n	8010032 <__sflush_r+0x1a>
 80100f8:	6a21      	ldr	r1, [r4, #32]
 80100fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80100fc:	4643      	mov	r3, r8
 80100fe:	463a      	mov	r2, r7
 8010100:	4628      	mov	r0, r5
 8010102:	47b0      	blx	r6
 8010104:	2800      	cmp	r0, #0
 8010106:	dc06      	bgt.n	8010116 <__sflush_r+0xfe>
 8010108:	89a3      	ldrh	r3, [r4, #12]
 801010a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801010e:	81a3      	strh	r3, [r4, #12]
 8010110:	f04f 30ff 	mov.w	r0, #4294967295
 8010114:	e78e      	b.n	8010034 <__sflush_r+0x1c>
 8010116:	4407      	add	r7, r0
 8010118:	eba8 0800 	sub.w	r8, r8, r0
 801011c:	e7e9      	b.n	80100f2 <__sflush_r+0xda>
 801011e:	bf00      	nop
 8010120:	20400001 	.word	0x20400001

08010124 <_fflush_r>:
 8010124:	b538      	push	{r3, r4, r5, lr}
 8010126:	690b      	ldr	r3, [r1, #16]
 8010128:	4605      	mov	r5, r0
 801012a:	460c      	mov	r4, r1
 801012c:	b913      	cbnz	r3, 8010134 <_fflush_r+0x10>
 801012e:	2500      	movs	r5, #0
 8010130:	4628      	mov	r0, r5
 8010132:	bd38      	pop	{r3, r4, r5, pc}
 8010134:	b118      	cbz	r0, 801013e <_fflush_r+0x1a>
 8010136:	6983      	ldr	r3, [r0, #24]
 8010138:	b90b      	cbnz	r3, 801013e <_fflush_r+0x1a>
 801013a:	f000 f887 	bl	801024c <__sinit>
 801013e:	4b14      	ldr	r3, [pc, #80]	; (8010190 <_fflush_r+0x6c>)
 8010140:	429c      	cmp	r4, r3
 8010142:	d11b      	bne.n	801017c <_fflush_r+0x58>
 8010144:	686c      	ldr	r4, [r5, #4]
 8010146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d0ef      	beq.n	801012e <_fflush_r+0xa>
 801014e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010150:	07d0      	lsls	r0, r2, #31
 8010152:	d404      	bmi.n	801015e <_fflush_r+0x3a>
 8010154:	0599      	lsls	r1, r3, #22
 8010156:	d402      	bmi.n	801015e <_fflush_r+0x3a>
 8010158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801015a:	f000 f91a 	bl	8010392 <__retarget_lock_acquire_recursive>
 801015e:	4628      	mov	r0, r5
 8010160:	4621      	mov	r1, r4
 8010162:	f7ff ff59 	bl	8010018 <__sflush_r>
 8010166:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010168:	07da      	lsls	r2, r3, #31
 801016a:	4605      	mov	r5, r0
 801016c:	d4e0      	bmi.n	8010130 <_fflush_r+0xc>
 801016e:	89a3      	ldrh	r3, [r4, #12]
 8010170:	059b      	lsls	r3, r3, #22
 8010172:	d4dd      	bmi.n	8010130 <_fflush_r+0xc>
 8010174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010176:	f000 f90d 	bl	8010394 <__retarget_lock_release_recursive>
 801017a:	e7d9      	b.n	8010130 <_fflush_r+0xc>
 801017c:	4b05      	ldr	r3, [pc, #20]	; (8010194 <_fflush_r+0x70>)
 801017e:	429c      	cmp	r4, r3
 8010180:	d101      	bne.n	8010186 <_fflush_r+0x62>
 8010182:	68ac      	ldr	r4, [r5, #8]
 8010184:	e7df      	b.n	8010146 <_fflush_r+0x22>
 8010186:	4b04      	ldr	r3, [pc, #16]	; (8010198 <_fflush_r+0x74>)
 8010188:	429c      	cmp	r4, r3
 801018a:	bf08      	it	eq
 801018c:	68ec      	ldreq	r4, [r5, #12]
 801018e:	e7da      	b.n	8010146 <_fflush_r+0x22>
 8010190:	08012c3c 	.word	0x08012c3c
 8010194:	08012c5c 	.word	0x08012c5c
 8010198:	08012c1c 	.word	0x08012c1c

0801019c <std>:
 801019c:	2300      	movs	r3, #0
 801019e:	b510      	push	{r4, lr}
 80101a0:	4604      	mov	r4, r0
 80101a2:	e9c0 3300 	strd	r3, r3, [r0]
 80101a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80101aa:	6083      	str	r3, [r0, #8]
 80101ac:	8181      	strh	r1, [r0, #12]
 80101ae:	6643      	str	r3, [r0, #100]	; 0x64
 80101b0:	81c2      	strh	r2, [r0, #14]
 80101b2:	6183      	str	r3, [r0, #24]
 80101b4:	4619      	mov	r1, r3
 80101b6:	2208      	movs	r2, #8
 80101b8:	305c      	adds	r0, #92	; 0x5c
 80101ba:	f7fe f9f7 	bl	800e5ac <memset>
 80101be:	4b05      	ldr	r3, [pc, #20]	; (80101d4 <std+0x38>)
 80101c0:	6263      	str	r3, [r4, #36]	; 0x24
 80101c2:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <std+0x3c>)
 80101c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80101c6:	4b05      	ldr	r3, [pc, #20]	; (80101dc <std+0x40>)
 80101c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101ca:	4b05      	ldr	r3, [pc, #20]	; (80101e0 <std+0x44>)
 80101cc:	6224      	str	r4, [r4, #32]
 80101ce:	6323      	str	r3, [r4, #48]	; 0x30
 80101d0:	bd10      	pop	{r4, pc}
 80101d2:	bf00      	nop
 80101d4:	08010e45 	.word	0x08010e45
 80101d8:	08010e67 	.word	0x08010e67
 80101dc:	08010e9f 	.word	0x08010e9f
 80101e0:	08010ec3 	.word	0x08010ec3

080101e4 <_cleanup_r>:
 80101e4:	4901      	ldr	r1, [pc, #4]	; (80101ec <_cleanup_r+0x8>)
 80101e6:	f000 b8af 	b.w	8010348 <_fwalk_reent>
 80101ea:	bf00      	nop
 80101ec:	08010125 	.word	0x08010125

080101f0 <__sfmoreglue>:
 80101f0:	b570      	push	{r4, r5, r6, lr}
 80101f2:	1e4a      	subs	r2, r1, #1
 80101f4:	2568      	movs	r5, #104	; 0x68
 80101f6:	4355      	muls	r5, r2
 80101f8:	460e      	mov	r6, r1
 80101fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80101fe:	f7fe fa2d 	bl	800e65c <_malloc_r>
 8010202:	4604      	mov	r4, r0
 8010204:	b140      	cbz	r0, 8010218 <__sfmoreglue+0x28>
 8010206:	2100      	movs	r1, #0
 8010208:	e9c0 1600 	strd	r1, r6, [r0]
 801020c:	300c      	adds	r0, #12
 801020e:	60a0      	str	r0, [r4, #8]
 8010210:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010214:	f7fe f9ca 	bl	800e5ac <memset>
 8010218:	4620      	mov	r0, r4
 801021a:	bd70      	pop	{r4, r5, r6, pc}

0801021c <__sfp_lock_acquire>:
 801021c:	4801      	ldr	r0, [pc, #4]	; (8010224 <__sfp_lock_acquire+0x8>)
 801021e:	f000 b8b8 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010222:	bf00      	nop
 8010224:	20005250 	.word	0x20005250

08010228 <__sfp_lock_release>:
 8010228:	4801      	ldr	r0, [pc, #4]	; (8010230 <__sfp_lock_release+0x8>)
 801022a:	f000 b8b3 	b.w	8010394 <__retarget_lock_release_recursive>
 801022e:	bf00      	nop
 8010230:	20005250 	.word	0x20005250

08010234 <__sinit_lock_acquire>:
 8010234:	4801      	ldr	r0, [pc, #4]	; (801023c <__sinit_lock_acquire+0x8>)
 8010236:	f000 b8ac 	b.w	8010392 <__retarget_lock_acquire_recursive>
 801023a:	bf00      	nop
 801023c:	2000524b 	.word	0x2000524b

08010240 <__sinit_lock_release>:
 8010240:	4801      	ldr	r0, [pc, #4]	; (8010248 <__sinit_lock_release+0x8>)
 8010242:	f000 b8a7 	b.w	8010394 <__retarget_lock_release_recursive>
 8010246:	bf00      	nop
 8010248:	2000524b 	.word	0x2000524b

0801024c <__sinit>:
 801024c:	b510      	push	{r4, lr}
 801024e:	4604      	mov	r4, r0
 8010250:	f7ff fff0 	bl	8010234 <__sinit_lock_acquire>
 8010254:	69a3      	ldr	r3, [r4, #24]
 8010256:	b11b      	cbz	r3, 8010260 <__sinit+0x14>
 8010258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801025c:	f7ff bff0 	b.w	8010240 <__sinit_lock_release>
 8010260:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010264:	6523      	str	r3, [r4, #80]	; 0x50
 8010266:	4b13      	ldr	r3, [pc, #76]	; (80102b4 <__sinit+0x68>)
 8010268:	4a13      	ldr	r2, [pc, #76]	; (80102b8 <__sinit+0x6c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	62a2      	str	r2, [r4, #40]	; 0x28
 801026e:	42a3      	cmp	r3, r4
 8010270:	bf04      	itt	eq
 8010272:	2301      	moveq	r3, #1
 8010274:	61a3      	streq	r3, [r4, #24]
 8010276:	4620      	mov	r0, r4
 8010278:	f000 f820 	bl	80102bc <__sfp>
 801027c:	6060      	str	r0, [r4, #4]
 801027e:	4620      	mov	r0, r4
 8010280:	f000 f81c 	bl	80102bc <__sfp>
 8010284:	60a0      	str	r0, [r4, #8]
 8010286:	4620      	mov	r0, r4
 8010288:	f000 f818 	bl	80102bc <__sfp>
 801028c:	2200      	movs	r2, #0
 801028e:	60e0      	str	r0, [r4, #12]
 8010290:	2104      	movs	r1, #4
 8010292:	6860      	ldr	r0, [r4, #4]
 8010294:	f7ff ff82 	bl	801019c <std>
 8010298:	68a0      	ldr	r0, [r4, #8]
 801029a:	2201      	movs	r2, #1
 801029c:	2109      	movs	r1, #9
 801029e:	f7ff ff7d 	bl	801019c <std>
 80102a2:	68e0      	ldr	r0, [r4, #12]
 80102a4:	2202      	movs	r2, #2
 80102a6:	2112      	movs	r1, #18
 80102a8:	f7ff ff78 	bl	801019c <std>
 80102ac:	2301      	movs	r3, #1
 80102ae:	61a3      	str	r3, [r4, #24]
 80102b0:	e7d2      	b.n	8010258 <__sinit+0xc>
 80102b2:	bf00      	nop
 80102b4:	08012b50 	.word	0x08012b50
 80102b8:	080101e5 	.word	0x080101e5

080102bc <__sfp>:
 80102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102be:	4607      	mov	r7, r0
 80102c0:	f7ff ffac 	bl	801021c <__sfp_lock_acquire>
 80102c4:	4b1e      	ldr	r3, [pc, #120]	; (8010340 <__sfp+0x84>)
 80102c6:	681e      	ldr	r6, [r3, #0]
 80102c8:	69b3      	ldr	r3, [r6, #24]
 80102ca:	b913      	cbnz	r3, 80102d2 <__sfp+0x16>
 80102cc:	4630      	mov	r0, r6
 80102ce:	f7ff ffbd 	bl	801024c <__sinit>
 80102d2:	3648      	adds	r6, #72	; 0x48
 80102d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80102d8:	3b01      	subs	r3, #1
 80102da:	d503      	bpl.n	80102e4 <__sfp+0x28>
 80102dc:	6833      	ldr	r3, [r6, #0]
 80102de:	b30b      	cbz	r3, 8010324 <__sfp+0x68>
 80102e0:	6836      	ldr	r6, [r6, #0]
 80102e2:	e7f7      	b.n	80102d4 <__sfp+0x18>
 80102e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80102e8:	b9d5      	cbnz	r5, 8010320 <__sfp+0x64>
 80102ea:	4b16      	ldr	r3, [pc, #88]	; (8010344 <__sfp+0x88>)
 80102ec:	60e3      	str	r3, [r4, #12]
 80102ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80102f2:	6665      	str	r5, [r4, #100]	; 0x64
 80102f4:	f000 f84c 	bl	8010390 <__retarget_lock_init_recursive>
 80102f8:	f7ff ff96 	bl	8010228 <__sfp_lock_release>
 80102fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010300:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010304:	6025      	str	r5, [r4, #0]
 8010306:	61a5      	str	r5, [r4, #24]
 8010308:	2208      	movs	r2, #8
 801030a:	4629      	mov	r1, r5
 801030c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010310:	f7fe f94c 	bl	800e5ac <memset>
 8010314:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010318:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801031c:	4620      	mov	r0, r4
 801031e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010320:	3468      	adds	r4, #104	; 0x68
 8010322:	e7d9      	b.n	80102d8 <__sfp+0x1c>
 8010324:	2104      	movs	r1, #4
 8010326:	4638      	mov	r0, r7
 8010328:	f7ff ff62 	bl	80101f0 <__sfmoreglue>
 801032c:	4604      	mov	r4, r0
 801032e:	6030      	str	r0, [r6, #0]
 8010330:	2800      	cmp	r0, #0
 8010332:	d1d5      	bne.n	80102e0 <__sfp+0x24>
 8010334:	f7ff ff78 	bl	8010228 <__sfp_lock_release>
 8010338:	230c      	movs	r3, #12
 801033a:	603b      	str	r3, [r7, #0]
 801033c:	e7ee      	b.n	801031c <__sfp+0x60>
 801033e:	bf00      	nop
 8010340:	08012b50 	.word	0x08012b50
 8010344:	ffff0001 	.word	0xffff0001

08010348 <_fwalk_reent>:
 8010348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801034c:	4606      	mov	r6, r0
 801034e:	4688      	mov	r8, r1
 8010350:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010354:	2700      	movs	r7, #0
 8010356:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801035a:	f1b9 0901 	subs.w	r9, r9, #1
 801035e:	d505      	bpl.n	801036c <_fwalk_reent+0x24>
 8010360:	6824      	ldr	r4, [r4, #0]
 8010362:	2c00      	cmp	r4, #0
 8010364:	d1f7      	bne.n	8010356 <_fwalk_reent+0xe>
 8010366:	4638      	mov	r0, r7
 8010368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801036c:	89ab      	ldrh	r3, [r5, #12]
 801036e:	2b01      	cmp	r3, #1
 8010370:	d907      	bls.n	8010382 <_fwalk_reent+0x3a>
 8010372:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010376:	3301      	adds	r3, #1
 8010378:	d003      	beq.n	8010382 <_fwalk_reent+0x3a>
 801037a:	4629      	mov	r1, r5
 801037c:	4630      	mov	r0, r6
 801037e:	47c0      	blx	r8
 8010380:	4307      	orrs	r7, r0
 8010382:	3568      	adds	r5, #104	; 0x68
 8010384:	e7e9      	b.n	801035a <_fwalk_reent+0x12>
	...

08010388 <_localeconv_r>:
 8010388:	4800      	ldr	r0, [pc, #0]	; (801038c <_localeconv_r+0x4>)
 801038a:	4770      	bx	lr
 801038c:	2000016c 	.word	0x2000016c

08010390 <__retarget_lock_init_recursive>:
 8010390:	4770      	bx	lr

08010392 <__retarget_lock_acquire_recursive>:
 8010392:	4770      	bx	lr

08010394 <__retarget_lock_release_recursive>:
 8010394:	4770      	bx	lr

08010396 <__swhatbuf_r>:
 8010396:	b570      	push	{r4, r5, r6, lr}
 8010398:	460e      	mov	r6, r1
 801039a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801039e:	2900      	cmp	r1, #0
 80103a0:	b096      	sub	sp, #88	; 0x58
 80103a2:	4614      	mov	r4, r2
 80103a4:	461d      	mov	r5, r3
 80103a6:	da07      	bge.n	80103b8 <__swhatbuf_r+0x22>
 80103a8:	2300      	movs	r3, #0
 80103aa:	602b      	str	r3, [r5, #0]
 80103ac:	89b3      	ldrh	r3, [r6, #12]
 80103ae:	061a      	lsls	r2, r3, #24
 80103b0:	d410      	bmi.n	80103d4 <__swhatbuf_r+0x3e>
 80103b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103b6:	e00e      	b.n	80103d6 <__swhatbuf_r+0x40>
 80103b8:	466a      	mov	r2, sp
 80103ba:	f000 fdd9 	bl	8010f70 <_fstat_r>
 80103be:	2800      	cmp	r0, #0
 80103c0:	dbf2      	blt.n	80103a8 <__swhatbuf_r+0x12>
 80103c2:	9a01      	ldr	r2, [sp, #4]
 80103c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80103c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80103cc:	425a      	negs	r2, r3
 80103ce:	415a      	adcs	r2, r3
 80103d0:	602a      	str	r2, [r5, #0]
 80103d2:	e7ee      	b.n	80103b2 <__swhatbuf_r+0x1c>
 80103d4:	2340      	movs	r3, #64	; 0x40
 80103d6:	2000      	movs	r0, #0
 80103d8:	6023      	str	r3, [r4, #0]
 80103da:	b016      	add	sp, #88	; 0x58
 80103dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080103e0 <__smakebuf_r>:
 80103e0:	898b      	ldrh	r3, [r1, #12]
 80103e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80103e4:	079d      	lsls	r5, r3, #30
 80103e6:	4606      	mov	r6, r0
 80103e8:	460c      	mov	r4, r1
 80103ea:	d507      	bpl.n	80103fc <__smakebuf_r+0x1c>
 80103ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80103f0:	6023      	str	r3, [r4, #0]
 80103f2:	6123      	str	r3, [r4, #16]
 80103f4:	2301      	movs	r3, #1
 80103f6:	6163      	str	r3, [r4, #20]
 80103f8:	b002      	add	sp, #8
 80103fa:	bd70      	pop	{r4, r5, r6, pc}
 80103fc:	ab01      	add	r3, sp, #4
 80103fe:	466a      	mov	r2, sp
 8010400:	f7ff ffc9 	bl	8010396 <__swhatbuf_r>
 8010404:	9900      	ldr	r1, [sp, #0]
 8010406:	4605      	mov	r5, r0
 8010408:	4630      	mov	r0, r6
 801040a:	f7fe f927 	bl	800e65c <_malloc_r>
 801040e:	b948      	cbnz	r0, 8010424 <__smakebuf_r+0x44>
 8010410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010414:	059a      	lsls	r2, r3, #22
 8010416:	d4ef      	bmi.n	80103f8 <__smakebuf_r+0x18>
 8010418:	f023 0303 	bic.w	r3, r3, #3
 801041c:	f043 0302 	orr.w	r3, r3, #2
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	e7e3      	b.n	80103ec <__smakebuf_r+0xc>
 8010424:	4b0d      	ldr	r3, [pc, #52]	; (801045c <__smakebuf_r+0x7c>)
 8010426:	62b3      	str	r3, [r6, #40]	; 0x28
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	6020      	str	r0, [r4, #0]
 801042c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	9b00      	ldr	r3, [sp, #0]
 8010434:	6163      	str	r3, [r4, #20]
 8010436:	9b01      	ldr	r3, [sp, #4]
 8010438:	6120      	str	r0, [r4, #16]
 801043a:	b15b      	cbz	r3, 8010454 <__smakebuf_r+0x74>
 801043c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010440:	4630      	mov	r0, r6
 8010442:	f000 fda7 	bl	8010f94 <_isatty_r>
 8010446:	b128      	cbz	r0, 8010454 <__smakebuf_r+0x74>
 8010448:	89a3      	ldrh	r3, [r4, #12]
 801044a:	f023 0303 	bic.w	r3, r3, #3
 801044e:	f043 0301 	orr.w	r3, r3, #1
 8010452:	81a3      	strh	r3, [r4, #12]
 8010454:	89a0      	ldrh	r0, [r4, #12]
 8010456:	4305      	orrs	r5, r0
 8010458:	81a5      	strh	r5, [r4, #12]
 801045a:	e7cd      	b.n	80103f8 <__smakebuf_r+0x18>
 801045c:	080101e5 	.word	0x080101e5

08010460 <__malloc_lock>:
 8010460:	4801      	ldr	r0, [pc, #4]	; (8010468 <__malloc_lock+0x8>)
 8010462:	f7ff bf96 	b.w	8010392 <__retarget_lock_acquire_recursive>
 8010466:	bf00      	nop
 8010468:	2000524c 	.word	0x2000524c

0801046c <__malloc_unlock>:
 801046c:	4801      	ldr	r0, [pc, #4]	; (8010474 <__malloc_unlock+0x8>)
 801046e:	f7ff bf91 	b.w	8010394 <__retarget_lock_release_recursive>
 8010472:	bf00      	nop
 8010474:	2000524c 	.word	0x2000524c

08010478 <_Balloc>:
 8010478:	b570      	push	{r4, r5, r6, lr}
 801047a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801047c:	4604      	mov	r4, r0
 801047e:	460d      	mov	r5, r1
 8010480:	b976      	cbnz	r6, 80104a0 <_Balloc+0x28>
 8010482:	2010      	movs	r0, #16
 8010484:	f7fe f87c 	bl	800e580 <malloc>
 8010488:	4602      	mov	r2, r0
 801048a:	6260      	str	r0, [r4, #36]	; 0x24
 801048c:	b920      	cbnz	r0, 8010498 <_Balloc+0x20>
 801048e:	4b18      	ldr	r3, [pc, #96]	; (80104f0 <_Balloc+0x78>)
 8010490:	4818      	ldr	r0, [pc, #96]	; (80104f4 <_Balloc+0x7c>)
 8010492:	2166      	movs	r1, #102	; 0x66
 8010494:	f000 fd2c 	bl	8010ef0 <__assert_func>
 8010498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801049c:	6006      	str	r6, [r0, #0]
 801049e:	60c6      	str	r6, [r0, #12]
 80104a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80104a2:	68f3      	ldr	r3, [r6, #12]
 80104a4:	b183      	cbz	r3, 80104c8 <_Balloc+0x50>
 80104a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104ae:	b9b8      	cbnz	r0, 80104e0 <_Balloc+0x68>
 80104b0:	2101      	movs	r1, #1
 80104b2:	fa01 f605 	lsl.w	r6, r1, r5
 80104b6:	1d72      	adds	r2, r6, #5
 80104b8:	0092      	lsls	r2, r2, #2
 80104ba:	4620      	mov	r0, r4
 80104bc:	f000 fb5a 	bl	8010b74 <_calloc_r>
 80104c0:	b160      	cbz	r0, 80104dc <_Balloc+0x64>
 80104c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104c6:	e00e      	b.n	80104e6 <_Balloc+0x6e>
 80104c8:	2221      	movs	r2, #33	; 0x21
 80104ca:	2104      	movs	r1, #4
 80104cc:	4620      	mov	r0, r4
 80104ce:	f000 fb51 	bl	8010b74 <_calloc_r>
 80104d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80104d4:	60f0      	str	r0, [r6, #12]
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d1e4      	bne.n	80104a6 <_Balloc+0x2e>
 80104dc:	2000      	movs	r0, #0
 80104de:	bd70      	pop	{r4, r5, r6, pc}
 80104e0:	6802      	ldr	r2, [r0, #0]
 80104e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80104e6:	2300      	movs	r3, #0
 80104e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80104ec:	e7f7      	b.n	80104de <_Balloc+0x66>
 80104ee:	bf00      	nop
 80104f0:	08012b95 	.word	0x08012b95
 80104f4:	08012c7c 	.word	0x08012c7c

080104f8 <_Bfree>:
 80104f8:	b570      	push	{r4, r5, r6, lr}
 80104fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80104fc:	4605      	mov	r5, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	b976      	cbnz	r6, 8010520 <_Bfree+0x28>
 8010502:	2010      	movs	r0, #16
 8010504:	f7fe f83c 	bl	800e580 <malloc>
 8010508:	4602      	mov	r2, r0
 801050a:	6268      	str	r0, [r5, #36]	; 0x24
 801050c:	b920      	cbnz	r0, 8010518 <_Bfree+0x20>
 801050e:	4b09      	ldr	r3, [pc, #36]	; (8010534 <_Bfree+0x3c>)
 8010510:	4809      	ldr	r0, [pc, #36]	; (8010538 <_Bfree+0x40>)
 8010512:	218a      	movs	r1, #138	; 0x8a
 8010514:	f000 fcec 	bl	8010ef0 <__assert_func>
 8010518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801051c:	6006      	str	r6, [r0, #0]
 801051e:	60c6      	str	r6, [r0, #12]
 8010520:	b13c      	cbz	r4, 8010532 <_Bfree+0x3a>
 8010522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010524:	6862      	ldr	r2, [r4, #4]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801052c:	6021      	str	r1, [r4, #0]
 801052e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010532:	bd70      	pop	{r4, r5, r6, pc}
 8010534:	08012b95 	.word	0x08012b95
 8010538:	08012c7c 	.word	0x08012c7c

0801053c <__multadd>:
 801053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010540:	690e      	ldr	r6, [r1, #16]
 8010542:	4607      	mov	r7, r0
 8010544:	4698      	mov	r8, r3
 8010546:	460c      	mov	r4, r1
 8010548:	f101 0014 	add.w	r0, r1, #20
 801054c:	2300      	movs	r3, #0
 801054e:	6805      	ldr	r5, [r0, #0]
 8010550:	b2a9      	uxth	r1, r5
 8010552:	fb02 8101 	mla	r1, r2, r1, r8
 8010556:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801055a:	0c2d      	lsrs	r5, r5, #16
 801055c:	fb02 c505 	mla	r5, r2, r5, ip
 8010560:	b289      	uxth	r1, r1
 8010562:	3301      	adds	r3, #1
 8010564:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8010568:	429e      	cmp	r6, r3
 801056a:	f840 1b04 	str.w	r1, [r0], #4
 801056e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8010572:	dcec      	bgt.n	801054e <__multadd+0x12>
 8010574:	f1b8 0f00 	cmp.w	r8, #0
 8010578:	d022      	beq.n	80105c0 <__multadd+0x84>
 801057a:	68a3      	ldr	r3, [r4, #8]
 801057c:	42b3      	cmp	r3, r6
 801057e:	dc19      	bgt.n	80105b4 <__multadd+0x78>
 8010580:	6861      	ldr	r1, [r4, #4]
 8010582:	4638      	mov	r0, r7
 8010584:	3101      	adds	r1, #1
 8010586:	f7ff ff77 	bl	8010478 <_Balloc>
 801058a:	4605      	mov	r5, r0
 801058c:	b928      	cbnz	r0, 801059a <__multadd+0x5e>
 801058e:	4602      	mov	r2, r0
 8010590:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <__multadd+0x8c>)
 8010592:	480e      	ldr	r0, [pc, #56]	; (80105cc <__multadd+0x90>)
 8010594:	21b5      	movs	r1, #181	; 0xb5
 8010596:	f000 fcab 	bl	8010ef0 <__assert_func>
 801059a:	6922      	ldr	r2, [r4, #16]
 801059c:	3202      	adds	r2, #2
 801059e:	f104 010c 	add.w	r1, r4, #12
 80105a2:	0092      	lsls	r2, r2, #2
 80105a4:	300c      	adds	r0, #12
 80105a6:	f7fd fff3 	bl	800e590 <memcpy>
 80105aa:	4621      	mov	r1, r4
 80105ac:	4638      	mov	r0, r7
 80105ae:	f7ff ffa3 	bl	80104f8 <_Bfree>
 80105b2:	462c      	mov	r4, r5
 80105b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80105b8:	3601      	adds	r6, #1
 80105ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80105be:	6126      	str	r6, [r4, #16]
 80105c0:	4620      	mov	r0, r4
 80105c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c6:	bf00      	nop
 80105c8:	08012c0b 	.word	0x08012c0b
 80105cc:	08012c7c 	.word	0x08012c7c

080105d0 <__hi0bits>:
 80105d0:	0c03      	lsrs	r3, r0, #16
 80105d2:	041b      	lsls	r3, r3, #16
 80105d4:	b9d3      	cbnz	r3, 801060c <__hi0bits+0x3c>
 80105d6:	0400      	lsls	r0, r0, #16
 80105d8:	2310      	movs	r3, #16
 80105da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105de:	bf04      	itt	eq
 80105e0:	0200      	lsleq	r0, r0, #8
 80105e2:	3308      	addeq	r3, #8
 80105e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80105e8:	bf04      	itt	eq
 80105ea:	0100      	lsleq	r0, r0, #4
 80105ec:	3304      	addeq	r3, #4
 80105ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80105f2:	bf04      	itt	eq
 80105f4:	0080      	lsleq	r0, r0, #2
 80105f6:	3302      	addeq	r3, #2
 80105f8:	2800      	cmp	r0, #0
 80105fa:	db05      	blt.n	8010608 <__hi0bits+0x38>
 80105fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010600:	f103 0301 	add.w	r3, r3, #1
 8010604:	bf08      	it	eq
 8010606:	2320      	moveq	r3, #32
 8010608:	4618      	mov	r0, r3
 801060a:	4770      	bx	lr
 801060c:	2300      	movs	r3, #0
 801060e:	e7e4      	b.n	80105da <__hi0bits+0xa>

08010610 <__lo0bits>:
 8010610:	6803      	ldr	r3, [r0, #0]
 8010612:	f013 0207 	ands.w	r2, r3, #7
 8010616:	4601      	mov	r1, r0
 8010618:	d00b      	beq.n	8010632 <__lo0bits+0x22>
 801061a:	07da      	lsls	r2, r3, #31
 801061c:	d424      	bmi.n	8010668 <__lo0bits+0x58>
 801061e:	0798      	lsls	r0, r3, #30
 8010620:	bf49      	itett	mi
 8010622:	085b      	lsrmi	r3, r3, #1
 8010624:	089b      	lsrpl	r3, r3, #2
 8010626:	2001      	movmi	r0, #1
 8010628:	600b      	strmi	r3, [r1, #0]
 801062a:	bf5c      	itt	pl
 801062c:	600b      	strpl	r3, [r1, #0]
 801062e:	2002      	movpl	r0, #2
 8010630:	4770      	bx	lr
 8010632:	b298      	uxth	r0, r3
 8010634:	b9b0      	cbnz	r0, 8010664 <__lo0bits+0x54>
 8010636:	0c1b      	lsrs	r3, r3, #16
 8010638:	2010      	movs	r0, #16
 801063a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801063e:	bf04      	itt	eq
 8010640:	0a1b      	lsreq	r3, r3, #8
 8010642:	3008      	addeq	r0, #8
 8010644:	071a      	lsls	r2, r3, #28
 8010646:	bf04      	itt	eq
 8010648:	091b      	lsreq	r3, r3, #4
 801064a:	3004      	addeq	r0, #4
 801064c:	079a      	lsls	r2, r3, #30
 801064e:	bf04      	itt	eq
 8010650:	089b      	lsreq	r3, r3, #2
 8010652:	3002      	addeq	r0, #2
 8010654:	07da      	lsls	r2, r3, #31
 8010656:	d403      	bmi.n	8010660 <__lo0bits+0x50>
 8010658:	085b      	lsrs	r3, r3, #1
 801065a:	f100 0001 	add.w	r0, r0, #1
 801065e:	d005      	beq.n	801066c <__lo0bits+0x5c>
 8010660:	600b      	str	r3, [r1, #0]
 8010662:	4770      	bx	lr
 8010664:	4610      	mov	r0, r2
 8010666:	e7e8      	b.n	801063a <__lo0bits+0x2a>
 8010668:	2000      	movs	r0, #0
 801066a:	4770      	bx	lr
 801066c:	2020      	movs	r0, #32
 801066e:	4770      	bx	lr

08010670 <__i2b>:
 8010670:	b510      	push	{r4, lr}
 8010672:	460c      	mov	r4, r1
 8010674:	2101      	movs	r1, #1
 8010676:	f7ff feff 	bl	8010478 <_Balloc>
 801067a:	4602      	mov	r2, r0
 801067c:	b928      	cbnz	r0, 801068a <__i2b+0x1a>
 801067e:	4b05      	ldr	r3, [pc, #20]	; (8010694 <__i2b+0x24>)
 8010680:	4805      	ldr	r0, [pc, #20]	; (8010698 <__i2b+0x28>)
 8010682:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010686:	f000 fc33 	bl	8010ef0 <__assert_func>
 801068a:	2301      	movs	r3, #1
 801068c:	6144      	str	r4, [r0, #20]
 801068e:	6103      	str	r3, [r0, #16]
 8010690:	bd10      	pop	{r4, pc}
 8010692:	bf00      	nop
 8010694:	08012c0b 	.word	0x08012c0b
 8010698:	08012c7c 	.word	0x08012c7c

0801069c <__multiply>:
 801069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106a0:	4614      	mov	r4, r2
 80106a2:	690a      	ldr	r2, [r1, #16]
 80106a4:	6923      	ldr	r3, [r4, #16]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	bfb8      	it	lt
 80106aa:	460b      	movlt	r3, r1
 80106ac:	460d      	mov	r5, r1
 80106ae:	bfbc      	itt	lt
 80106b0:	4625      	movlt	r5, r4
 80106b2:	461c      	movlt	r4, r3
 80106b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80106b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80106bc:	68ab      	ldr	r3, [r5, #8]
 80106be:	6869      	ldr	r1, [r5, #4]
 80106c0:	eb0a 0709 	add.w	r7, sl, r9
 80106c4:	42bb      	cmp	r3, r7
 80106c6:	b085      	sub	sp, #20
 80106c8:	bfb8      	it	lt
 80106ca:	3101      	addlt	r1, #1
 80106cc:	f7ff fed4 	bl	8010478 <_Balloc>
 80106d0:	b930      	cbnz	r0, 80106e0 <__multiply+0x44>
 80106d2:	4602      	mov	r2, r0
 80106d4:	4b42      	ldr	r3, [pc, #264]	; (80107e0 <__multiply+0x144>)
 80106d6:	4843      	ldr	r0, [pc, #268]	; (80107e4 <__multiply+0x148>)
 80106d8:	f240 115d 	movw	r1, #349	; 0x15d
 80106dc:	f000 fc08 	bl	8010ef0 <__assert_func>
 80106e0:	f100 0614 	add.w	r6, r0, #20
 80106e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80106e8:	4633      	mov	r3, r6
 80106ea:	2200      	movs	r2, #0
 80106ec:	4543      	cmp	r3, r8
 80106ee:	d31e      	bcc.n	801072e <__multiply+0x92>
 80106f0:	f105 0c14 	add.w	ip, r5, #20
 80106f4:	f104 0314 	add.w	r3, r4, #20
 80106f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80106fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010700:	9202      	str	r2, [sp, #8]
 8010702:	ebac 0205 	sub.w	r2, ip, r5
 8010706:	3a15      	subs	r2, #21
 8010708:	f022 0203 	bic.w	r2, r2, #3
 801070c:	3204      	adds	r2, #4
 801070e:	f105 0115 	add.w	r1, r5, #21
 8010712:	458c      	cmp	ip, r1
 8010714:	bf38      	it	cc
 8010716:	2204      	movcc	r2, #4
 8010718:	9201      	str	r2, [sp, #4]
 801071a:	9a02      	ldr	r2, [sp, #8]
 801071c:	9303      	str	r3, [sp, #12]
 801071e:	429a      	cmp	r2, r3
 8010720:	d808      	bhi.n	8010734 <__multiply+0x98>
 8010722:	2f00      	cmp	r7, #0
 8010724:	dc55      	bgt.n	80107d2 <__multiply+0x136>
 8010726:	6107      	str	r7, [r0, #16]
 8010728:	b005      	add	sp, #20
 801072a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072e:	f843 2b04 	str.w	r2, [r3], #4
 8010732:	e7db      	b.n	80106ec <__multiply+0x50>
 8010734:	f8b3 a000 	ldrh.w	sl, [r3]
 8010738:	f1ba 0f00 	cmp.w	sl, #0
 801073c:	d020      	beq.n	8010780 <__multiply+0xe4>
 801073e:	f105 0e14 	add.w	lr, r5, #20
 8010742:	46b1      	mov	r9, r6
 8010744:	2200      	movs	r2, #0
 8010746:	f85e 4b04 	ldr.w	r4, [lr], #4
 801074a:	f8d9 b000 	ldr.w	fp, [r9]
 801074e:	b2a1      	uxth	r1, r4
 8010750:	fa1f fb8b 	uxth.w	fp, fp
 8010754:	fb0a b101 	mla	r1, sl, r1, fp
 8010758:	4411      	add	r1, r2
 801075a:	f8d9 2000 	ldr.w	r2, [r9]
 801075e:	0c24      	lsrs	r4, r4, #16
 8010760:	0c12      	lsrs	r2, r2, #16
 8010762:	fb0a 2404 	mla	r4, sl, r4, r2
 8010766:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801076a:	b289      	uxth	r1, r1
 801076c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010770:	45f4      	cmp	ip, lr
 8010772:	f849 1b04 	str.w	r1, [r9], #4
 8010776:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801077a:	d8e4      	bhi.n	8010746 <__multiply+0xaa>
 801077c:	9901      	ldr	r1, [sp, #4]
 801077e:	5072      	str	r2, [r6, r1]
 8010780:	9a03      	ldr	r2, [sp, #12]
 8010782:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010786:	3304      	adds	r3, #4
 8010788:	f1b9 0f00 	cmp.w	r9, #0
 801078c:	d01f      	beq.n	80107ce <__multiply+0x132>
 801078e:	6834      	ldr	r4, [r6, #0]
 8010790:	f105 0114 	add.w	r1, r5, #20
 8010794:	46b6      	mov	lr, r6
 8010796:	f04f 0a00 	mov.w	sl, #0
 801079a:	880a      	ldrh	r2, [r1, #0]
 801079c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80107a0:	fb09 b202 	mla	r2, r9, r2, fp
 80107a4:	4492      	add	sl, r2
 80107a6:	b2a4      	uxth	r4, r4
 80107a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80107ac:	f84e 4b04 	str.w	r4, [lr], #4
 80107b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80107b4:	f8be 2000 	ldrh.w	r2, [lr]
 80107b8:	0c24      	lsrs	r4, r4, #16
 80107ba:	fb09 2404 	mla	r4, r9, r4, r2
 80107be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80107c2:	458c      	cmp	ip, r1
 80107c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80107c8:	d8e7      	bhi.n	801079a <__multiply+0xfe>
 80107ca:	9a01      	ldr	r2, [sp, #4]
 80107cc:	50b4      	str	r4, [r6, r2]
 80107ce:	3604      	adds	r6, #4
 80107d0:	e7a3      	b.n	801071a <__multiply+0x7e>
 80107d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1a5      	bne.n	8010726 <__multiply+0x8a>
 80107da:	3f01      	subs	r7, #1
 80107dc:	e7a1      	b.n	8010722 <__multiply+0x86>
 80107de:	bf00      	nop
 80107e0:	08012c0b 	.word	0x08012c0b
 80107e4:	08012c7c 	.word	0x08012c7c

080107e8 <__pow5mult>:
 80107e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107ec:	4615      	mov	r5, r2
 80107ee:	f012 0203 	ands.w	r2, r2, #3
 80107f2:	4606      	mov	r6, r0
 80107f4:	460f      	mov	r7, r1
 80107f6:	d007      	beq.n	8010808 <__pow5mult+0x20>
 80107f8:	4c25      	ldr	r4, [pc, #148]	; (8010890 <__pow5mult+0xa8>)
 80107fa:	3a01      	subs	r2, #1
 80107fc:	2300      	movs	r3, #0
 80107fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010802:	f7ff fe9b 	bl	801053c <__multadd>
 8010806:	4607      	mov	r7, r0
 8010808:	10ad      	asrs	r5, r5, #2
 801080a:	d03d      	beq.n	8010888 <__pow5mult+0xa0>
 801080c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801080e:	b97c      	cbnz	r4, 8010830 <__pow5mult+0x48>
 8010810:	2010      	movs	r0, #16
 8010812:	f7fd feb5 	bl	800e580 <malloc>
 8010816:	4602      	mov	r2, r0
 8010818:	6270      	str	r0, [r6, #36]	; 0x24
 801081a:	b928      	cbnz	r0, 8010828 <__pow5mult+0x40>
 801081c:	4b1d      	ldr	r3, [pc, #116]	; (8010894 <__pow5mult+0xac>)
 801081e:	481e      	ldr	r0, [pc, #120]	; (8010898 <__pow5mult+0xb0>)
 8010820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010824:	f000 fb64 	bl	8010ef0 <__assert_func>
 8010828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801082c:	6004      	str	r4, [r0, #0]
 801082e:	60c4      	str	r4, [r0, #12]
 8010830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010838:	b94c      	cbnz	r4, 801084e <__pow5mult+0x66>
 801083a:	f240 2171 	movw	r1, #625	; 0x271
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff ff16 	bl	8010670 <__i2b>
 8010844:	2300      	movs	r3, #0
 8010846:	f8c8 0008 	str.w	r0, [r8, #8]
 801084a:	4604      	mov	r4, r0
 801084c:	6003      	str	r3, [r0, #0]
 801084e:	f04f 0900 	mov.w	r9, #0
 8010852:	07eb      	lsls	r3, r5, #31
 8010854:	d50a      	bpl.n	801086c <__pow5mult+0x84>
 8010856:	4639      	mov	r1, r7
 8010858:	4622      	mov	r2, r4
 801085a:	4630      	mov	r0, r6
 801085c:	f7ff ff1e 	bl	801069c <__multiply>
 8010860:	4639      	mov	r1, r7
 8010862:	4680      	mov	r8, r0
 8010864:	4630      	mov	r0, r6
 8010866:	f7ff fe47 	bl	80104f8 <_Bfree>
 801086a:	4647      	mov	r7, r8
 801086c:	106d      	asrs	r5, r5, #1
 801086e:	d00b      	beq.n	8010888 <__pow5mult+0xa0>
 8010870:	6820      	ldr	r0, [r4, #0]
 8010872:	b938      	cbnz	r0, 8010884 <__pow5mult+0x9c>
 8010874:	4622      	mov	r2, r4
 8010876:	4621      	mov	r1, r4
 8010878:	4630      	mov	r0, r6
 801087a:	f7ff ff0f 	bl	801069c <__multiply>
 801087e:	6020      	str	r0, [r4, #0]
 8010880:	f8c0 9000 	str.w	r9, [r0]
 8010884:	4604      	mov	r4, r0
 8010886:	e7e4      	b.n	8010852 <__pow5mult+0x6a>
 8010888:	4638      	mov	r0, r7
 801088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801088e:	bf00      	nop
 8010890:	08012dd0 	.word	0x08012dd0
 8010894:	08012b95 	.word	0x08012b95
 8010898:	08012c7c 	.word	0x08012c7c

0801089c <__lshift>:
 801089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108a0:	460c      	mov	r4, r1
 80108a2:	6849      	ldr	r1, [r1, #4]
 80108a4:	6923      	ldr	r3, [r4, #16]
 80108a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108aa:	68a3      	ldr	r3, [r4, #8]
 80108ac:	4607      	mov	r7, r0
 80108ae:	4691      	mov	r9, r2
 80108b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108b4:	f108 0601 	add.w	r6, r8, #1
 80108b8:	42b3      	cmp	r3, r6
 80108ba:	db0b      	blt.n	80108d4 <__lshift+0x38>
 80108bc:	4638      	mov	r0, r7
 80108be:	f7ff fddb 	bl	8010478 <_Balloc>
 80108c2:	4605      	mov	r5, r0
 80108c4:	b948      	cbnz	r0, 80108da <__lshift+0x3e>
 80108c6:	4602      	mov	r2, r0
 80108c8:	4b28      	ldr	r3, [pc, #160]	; (801096c <__lshift+0xd0>)
 80108ca:	4829      	ldr	r0, [pc, #164]	; (8010970 <__lshift+0xd4>)
 80108cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108d0:	f000 fb0e 	bl	8010ef0 <__assert_func>
 80108d4:	3101      	adds	r1, #1
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	e7ee      	b.n	80108b8 <__lshift+0x1c>
 80108da:	2300      	movs	r3, #0
 80108dc:	f100 0114 	add.w	r1, r0, #20
 80108e0:	f100 0210 	add.w	r2, r0, #16
 80108e4:	4618      	mov	r0, r3
 80108e6:	4553      	cmp	r3, sl
 80108e8:	db33      	blt.n	8010952 <__lshift+0xb6>
 80108ea:	6920      	ldr	r0, [r4, #16]
 80108ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108f0:	f104 0314 	add.w	r3, r4, #20
 80108f4:	f019 091f 	ands.w	r9, r9, #31
 80108f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010900:	d02b      	beq.n	801095a <__lshift+0xbe>
 8010902:	f1c9 0e20 	rsb	lr, r9, #32
 8010906:	468a      	mov	sl, r1
 8010908:	2200      	movs	r2, #0
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	fa00 f009 	lsl.w	r0, r0, r9
 8010910:	4302      	orrs	r2, r0
 8010912:	f84a 2b04 	str.w	r2, [sl], #4
 8010916:	f853 2b04 	ldr.w	r2, [r3], #4
 801091a:	459c      	cmp	ip, r3
 801091c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010920:	d8f3      	bhi.n	801090a <__lshift+0x6e>
 8010922:	ebac 0304 	sub.w	r3, ip, r4
 8010926:	3b15      	subs	r3, #21
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	3304      	adds	r3, #4
 801092e:	f104 0015 	add.w	r0, r4, #21
 8010932:	4584      	cmp	ip, r0
 8010934:	bf38      	it	cc
 8010936:	2304      	movcc	r3, #4
 8010938:	50ca      	str	r2, [r1, r3]
 801093a:	b10a      	cbz	r2, 8010940 <__lshift+0xa4>
 801093c:	f108 0602 	add.w	r6, r8, #2
 8010940:	3e01      	subs	r6, #1
 8010942:	4638      	mov	r0, r7
 8010944:	612e      	str	r6, [r5, #16]
 8010946:	4621      	mov	r1, r4
 8010948:	f7ff fdd6 	bl	80104f8 <_Bfree>
 801094c:	4628      	mov	r0, r5
 801094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010952:	f842 0f04 	str.w	r0, [r2, #4]!
 8010956:	3301      	adds	r3, #1
 8010958:	e7c5      	b.n	80108e6 <__lshift+0x4a>
 801095a:	3904      	subs	r1, #4
 801095c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010960:	f841 2f04 	str.w	r2, [r1, #4]!
 8010964:	459c      	cmp	ip, r3
 8010966:	d8f9      	bhi.n	801095c <__lshift+0xc0>
 8010968:	e7ea      	b.n	8010940 <__lshift+0xa4>
 801096a:	bf00      	nop
 801096c:	08012c0b 	.word	0x08012c0b
 8010970:	08012c7c 	.word	0x08012c7c

08010974 <__mcmp>:
 8010974:	b530      	push	{r4, r5, lr}
 8010976:	6902      	ldr	r2, [r0, #16]
 8010978:	690c      	ldr	r4, [r1, #16]
 801097a:	1b12      	subs	r2, r2, r4
 801097c:	d10e      	bne.n	801099c <__mcmp+0x28>
 801097e:	f100 0314 	add.w	r3, r0, #20
 8010982:	3114      	adds	r1, #20
 8010984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801098c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010994:	42a5      	cmp	r5, r4
 8010996:	d003      	beq.n	80109a0 <__mcmp+0x2c>
 8010998:	d305      	bcc.n	80109a6 <__mcmp+0x32>
 801099a:	2201      	movs	r2, #1
 801099c:	4610      	mov	r0, r2
 801099e:	bd30      	pop	{r4, r5, pc}
 80109a0:	4283      	cmp	r3, r0
 80109a2:	d3f3      	bcc.n	801098c <__mcmp+0x18>
 80109a4:	e7fa      	b.n	801099c <__mcmp+0x28>
 80109a6:	f04f 32ff 	mov.w	r2, #4294967295
 80109aa:	e7f7      	b.n	801099c <__mcmp+0x28>

080109ac <__mdiff>:
 80109ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109b0:	460c      	mov	r4, r1
 80109b2:	4606      	mov	r6, r0
 80109b4:	4611      	mov	r1, r2
 80109b6:	4620      	mov	r0, r4
 80109b8:	4617      	mov	r7, r2
 80109ba:	f7ff ffdb 	bl	8010974 <__mcmp>
 80109be:	1e05      	subs	r5, r0, #0
 80109c0:	d110      	bne.n	80109e4 <__mdiff+0x38>
 80109c2:	4629      	mov	r1, r5
 80109c4:	4630      	mov	r0, r6
 80109c6:	f7ff fd57 	bl	8010478 <_Balloc>
 80109ca:	b930      	cbnz	r0, 80109da <__mdiff+0x2e>
 80109cc:	4b39      	ldr	r3, [pc, #228]	; (8010ab4 <__mdiff+0x108>)
 80109ce:	4602      	mov	r2, r0
 80109d0:	f240 2132 	movw	r1, #562	; 0x232
 80109d4:	4838      	ldr	r0, [pc, #224]	; (8010ab8 <__mdiff+0x10c>)
 80109d6:	f000 fa8b 	bl	8010ef0 <__assert_func>
 80109da:	2301      	movs	r3, #1
 80109dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109e4:	bfa4      	itt	ge
 80109e6:	463b      	movge	r3, r7
 80109e8:	4627      	movge	r7, r4
 80109ea:	4630      	mov	r0, r6
 80109ec:	6879      	ldr	r1, [r7, #4]
 80109ee:	bfa6      	itte	ge
 80109f0:	461c      	movge	r4, r3
 80109f2:	2500      	movge	r5, #0
 80109f4:	2501      	movlt	r5, #1
 80109f6:	f7ff fd3f 	bl	8010478 <_Balloc>
 80109fa:	b920      	cbnz	r0, 8010a06 <__mdiff+0x5a>
 80109fc:	4b2d      	ldr	r3, [pc, #180]	; (8010ab4 <__mdiff+0x108>)
 80109fe:	4602      	mov	r2, r0
 8010a00:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a04:	e7e6      	b.n	80109d4 <__mdiff+0x28>
 8010a06:	693e      	ldr	r6, [r7, #16]
 8010a08:	60c5      	str	r5, [r0, #12]
 8010a0a:	6925      	ldr	r5, [r4, #16]
 8010a0c:	f107 0114 	add.w	r1, r7, #20
 8010a10:	f104 0914 	add.w	r9, r4, #20
 8010a14:	f100 0e14 	add.w	lr, r0, #20
 8010a18:	f107 0210 	add.w	r2, r7, #16
 8010a1c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010a20:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010a24:	46f2      	mov	sl, lr
 8010a26:	2700      	movs	r7, #0
 8010a28:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a30:	fa1f f883 	uxth.w	r8, r3
 8010a34:	fa17 f78b 	uxtah	r7, r7, fp
 8010a38:	0c1b      	lsrs	r3, r3, #16
 8010a3a:	eba7 0808 	sub.w	r8, r7, r8
 8010a3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a46:	fa1f f888 	uxth.w	r8, r8
 8010a4a:	141f      	asrs	r7, r3, #16
 8010a4c:	454d      	cmp	r5, r9
 8010a4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a52:	f84a 3b04 	str.w	r3, [sl], #4
 8010a56:	d8e7      	bhi.n	8010a28 <__mdiff+0x7c>
 8010a58:	1b2b      	subs	r3, r5, r4
 8010a5a:	3b15      	subs	r3, #21
 8010a5c:	f023 0303 	bic.w	r3, r3, #3
 8010a60:	3304      	adds	r3, #4
 8010a62:	3415      	adds	r4, #21
 8010a64:	42a5      	cmp	r5, r4
 8010a66:	bf38      	it	cc
 8010a68:	2304      	movcc	r3, #4
 8010a6a:	4419      	add	r1, r3
 8010a6c:	4473      	add	r3, lr
 8010a6e:	469e      	mov	lr, r3
 8010a70:	460d      	mov	r5, r1
 8010a72:	4565      	cmp	r5, ip
 8010a74:	d30e      	bcc.n	8010a94 <__mdiff+0xe8>
 8010a76:	f10c 0203 	add.w	r2, ip, #3
 8010a7a:	1a52      	subs	r2, r2, r1
 8010a7c:	f022 0203 	bic.w	r2, r2, #3
 8010a80:	3903      	subs	r1, #3
 8010a82:	458c      	cmp	ip, r1
 8010a84:	bf38      	it	cc
 8010a86:	2200      	movcc	r2, #0
 8010a88:	441a      	add	r2, r3
 8010a8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010a8e:	b17b      	cbz	r3, 8010ab0 <__mdiff+0x104>
 8010a90:	6106      	str	r6, [r0, #16]
 8010a92:	e7a5      	b.n	80109e0 <__mdiff+0x34>
 8010a94:	f855 8b04 	ldr.w	r8, [r5], #4
 8010a98:	fa17 f488 	uxtah	r4, r7, r8
 8010a9c:	1422      	asrs	r2, r4, #16
 8010a9e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010aa2:	b2a4      	uxth	r4, r4
 8010aa4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010aa8:	f84e 4b04 	str.w	r4, [lr], #4
 8010aac:	1417      	asrs	r7, r2, #16
 8010aae:	e7e0      	b.n	8010a72 <__mdiff+0xc6>
 8010ab0:	3e01      	subs	r6, #1
 8010ab2:	e7ea      	b.n	8010a8a <__mdiff+0xde>
 8010ab4:	08012c0b 	.word	0x08012c0b
 8010ab8:	08012c7c 	.word	0x08012c7c

08010abc <__d2b>:
 8010abc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ac0:	4689      	mov	r9, r1
 8010ac2:	2101      	movs	r1, #1
 8010ac4:	ec57 6b10 	vmov	r6, r7, d0
 8010ac8:	4690      	mov	r8, r2
 8010aca:	f7ff fcd5 	bl	8010478 <_Balloc>
 8010ace:	4604      	mov	r4, r0
 8010ad0:	b930      	cbnz	r0, 8010ae0 <__d2b+0x24>
 8010ad2:	4602      	mov	r2, r0
 8010ad4:	4b25      	ldr	r3, [pc, #148]	; (8010b6c <__d2b+0xb0>)
 8010ad6:	4826      	ldr	r0, [pc, #152]	; (8010b70 <__d2b+0xb4>)
 8010ad8:	f240 310a 	movw	r1, #778	; 0x30a
 8010adc:	f000 fa08 	bl	8010ef0 <__assert_func>
 8010ae0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010ae4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010ae8:	bb35      	cbnz	r5, 8010b38 <__d2b+0x7c>
 8010aea:	2e00      	cmp	r6, #0
 8010aec:	9301      	str	r3, [sp, #4]
 8010aee:	d028      	beq.n	8010b42 <__d2b+0x86>
 8010af0:	4668      	mov	r0, sp
 8010af2:	9600      	str	r6, [sp, #0]
 8010af4:	f7ff fd8c 	bl	8010610 <__lo0bits>
 8010af8:	9900      	ldr	r1, [sp, #0]
 8010afa:	b300      	cbz	r0, 8010b3e <__d2b+0x82>
 8010afc:	9a01      	ldr	r2, [sp, #4]
 8010afe:	f1c0 0320 	rsb	r3, r0, #32
 8010b02:	fa02 f303 	lsl.w	r3, r2, r3
 8010b06:	430b      	orrs	r3, r1
 8010b08:	40c2      	lsrs	r2, r0
 8010b0a:	6163      	str	r3, [r4, #20]
 8010b0c:	9201      	str	r2, [sp, #4]
 8010b0e:	9b01      	ldr	r3, [sp, #4]
 8010b10:	61a3      	str	r3, [r4, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bf14      	ite	ne
 8010b16:	2202      	movne	r2, #2
 8010b18:	2201      	moveq	r2, #1
 8010b1a:	6122      	str	r2, [r4, #16]
 8010b1c:	b1d5      	cbz	r5, 8010b54 <__d2b+0x98>
 8010b1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b22:	4405      	add	r5, r0
 8010b24:	f8c9 5000 	str.w	r5, [r9]
 8010b28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b2c:	f8c8 0000 	str.w	r0, [r8]
 8010b30:	4620      	mov	r0, r4
 8010b32:	b003      	add	sp, #12
 8010b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b3c:	e7d5      	b.n	8010aea <__d2b+0x2e>
 8010b3e:	6161      	str	r1, [r4, #20]
 8010b40:	e7e5      	b.n	8010b0e <__d2b+0x52>
 8010b42:	a801      	add	r0, sp, #4
 8010b44:	f7ff fd64 	bl	8010610 <__lo0bits>
 8010b48:	9b01      	ldr	r3, [sp, #4]
 8010b4a:	6163      	str	r3, [r4, #20]
 8010b4c:	2201      	movs	r2, #1
 8010b4e:	6122      	str	r2, [r4, #16]
 8010b50:	3020      	adds	r0, #32
 8010b52:	e7e3      	b.n	8010b1c <__d2b+0x60>
 8010b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b5c:	f8c9 0000 	str.w	r0, [r9]
 8010b60:	6918      	ldr	r0, [r3, #16]
 8010b62:	f7ff fd35 	bl	80105d0 <__hi0bits>
 8010b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b6a:	e7df      	b.n	8010b2c <__d2b+0x70>
 8010b6c:	08012c0b 	.word	0x08012c0b
 8010b70:	08012c7c 	.word	0x08012c7c

08010b74 <_calloc_r>:
 8010b74:	b513      	push	{r0, r1, r4, lr}
 8010b76:	434a      	muls	r2, r1
 8010b78:	4611      	mov	r1, r2
 8010b7a:	9201      	str	r2, [sp, #4]
 8010b7c:	f7fd fd6e 	bl	800e65c <_malloc_r>
 8010b80:	4604      	mov	r4, r0
 8010b82:	b118      	cbz	r0, 8010b8c <_calloc_r+0x18>
 8010b84:	9a01      	ldr	r2, [sp, #4]
 8010b86:	2100      	movs	r1, #0
 8010b88:	f7fd fd10 	bl	800e5ac <memset>
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	b002      	add	sp, #8
 8010b90:	bd10      	pop	{r4, pc}

08010b92 <__sfputc_r>:
 8010b92:	6893      	ldr	r3, [r2, #8]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	b410      	push	{r4}
 8010b9a:	6093      	str	r3, [r2, #8]
 8010b9c:	da08      	bge.n	8010bb0 <__sfputc_r+0x1e>
 8010b9e:	6994      	ldr	r4, [r2, #24]
 8010ba0:	42a3      	cmp	r3, r4
 8010ba2:	db01      	blt.n	8010ba8 <__sfputc_r+0x16>
 8010ba4:	290a      	cmp	r1, #10
 8010ba6:	d103      	bne.n	8010bb0 <__sfputc_r+0x1e>
 8010ba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bac:	f7fe bafc 	b.w	800f1a8 <__swbuf_r>
 8010bb0:	6813      	ldr	r3, [r2, #0]
 8010bb2:	1c58      	adds	r0, r3, #1
 8010bb4:	6010      	str	r0, [r2, #0]
 8010bb6:	7019      	strb	r1, [r3, #0]
 8010bb8:	4608      	mov	r0, r1
 8010bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <__sfputs_r>:
 8010bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bc2:	4606      	mov	r6, r0
 8010bc4:	460f      	mov	r7, r1
 8010bc6:	4614      	mov	r4, r2
 8010bc8:	18d5      	adds	r5, r2, r3
 8010bca:	42ac      	cmp	r4, r5
 8010bcc:	d101      	bne.n	8010bd2 <__sfputs_r+0x12>
 8010bce:	2000      	movs	r0, #0
 8010bd0:	e007      	b.n	8010be2 <__sfputs_r+0x22>
 8010bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bd6:	463a      	mov	r2, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	f7ff ffda 	bl	8010b92 <__sfputc_r>
 8010bde:	1c43      	adds	r3, r0, #1
 8010be0:	d1f3      	bne.n	8010bca <__sfputs_r+0xa>
 8010be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010be4 <_vfiprintf_r>:
 8010be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010be8:	460d      	mov	r5, r1
 8010bea:	b09d      	sub	sp, #116	; 0x74
 8010bec:	4614      	mov	r4, r2
 8010bee:	4698      	mov	r8, r3
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	b118      	cbz	r0, 8010bfc <_vfiprintf_r+0x18>
 8010bf4:	6983      	ldr	r3, [r0, #24]
 8010bf6:	b90b      	cbnz	r3, 8010bfc <_vfiprintf_r+0x18>
 8010bf8:	f7ff fb28 	bl	801024c <__sinit>
 8010bfc:	4b89      	ldr	r3, [pc, #548]	; (8010e24 <_vfiprintf_r+0x240>)
 8010bfe:	429d      	cmp	r5, r3
 8010c00:	d11b      	bne.n	8010c3a <_vfiprintf_r+0x56>
 8010c02:	6875      	ldr	r5, [r6, #4]
 8010c04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c06:	07d9      	lsls	r1, r3, #31
 8010c08:	d405      	bmi.n	8010c16 <_vfiprintf_r+0x32>
 8010c0a:	89ab      	ldrh	r3, [r5, #12]
 8010c0c:	059a      	lsls	r2, r3, #22
 8010c0e:	d402      	bmi.n	8010c16 <_vfiprintf_r+0x32>
 8010c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c12:	f7ff fbbe 	bl	8010392 <__retarget_lock_acquire_recursive>
 8010c16:	89ab      	ldrh	r3, [r5, #12]
 8010c18:	071b      	lsls	r3, r3, #28
 8010c1a:	d501      	bpl.n	8010c20 <_vfiprintf_r+0x3c>
 8010c1c:	692b      	ldr	r3, [r5, #16]
 8010c1e:	b9eb      	cbnz	r3, 8010c5c <_vfiprintf_r+0x78>
 8010c20:	4629      	mov	r1, r5
 8010c22:	4630      	mov	r0, r6
 8010c24:	f7fe fb12 	bl	800f24c <__swsetup_r>
 8010c28:	b1c0      	cbz	r0, 8010c5c <_vfiprintf_r+0x78>
 8010c2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c2c:	07dc      	lsls	r4, r3, #31
 8010c2e:	d50e      	bpl.n	8010c4e <_vfiprintf_r+0x6a>
 8010c30:	f04f 30ff 	mov.w	r0, #4294967295
 8010c34:	b01d      	add	sp, #116	; 0x74
 8010c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c3a:	4b7b      	ldr	r3, [pc, #492]	; (8010e28 <_vfiprintf_r+0x244>)
 8010c3c:	429d      	cmp	r5, r3
 8010c3e:	d101      	bne.n	8010c44 <_vfiprintf_r+0x60>
 8010c40:	68b5      	ldr	r5, [r6, #8]
 8010c42:	e7df      	b.n	8010c04 <_vfiprintf_r+0x20>
 8010c44:	4b79      	ldr	r3, [pc, #484]	; (8010e2c <_vfiprintf_r+0x248>)
 8010c46:	429d      	cmp	r5, r3
 8010c48:	bf08      	it	eq
 8010c4a:	68f5      	ldreq	r5, [r6, #12]
 8010c4c:	e7da      	b.n	8010c04 <_vfiprintf_r+0x20>
 8010c4e:	89ab      	ldrh	r3, [r5, #12]
 8010c50:	0598      	lsls	r0, r3, #22
 8010c52:	d4ed      	bmi.n	8010c30 <_vfiprintf_r+0x4c>
 8010c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c56:	f7ff fb9d 	bl	8010394 <__retarget_lock_release_recursive>
 8010c5a:	e7e9      	b.n	8010c30 <_vfiprintf_r+0x4c>
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010c60:	2320      	movs	r3, #32
 8010c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c6a:	2330      	movs	r3, #48	; 0x30
 8010c6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010e30 <_vfiprintf_r+0x24c>
 8010c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c74:	f04f 0901 	mov.w	r9, #1
 8010c78:	4623      	mov	r3, r4
 8010c7a:	469a      	mov	sl, r3
 8010c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c80:	b10a      	cbz	r2, 8010c86 <_vfiprintf_r+0xa2>
 8010c82:	2a25      	cmp	r2, #37	; 0x25
 8010c84:	d1f9      	bne.n	8010c7a <_vfiprintf_r+0x96>
 8010c86:	ebba 0b04 	subs.w	fp, sl, r4
 8010c8a:	d00b      	beq.n	8010ca4 <_vfiprintf_r+0xc0>
 8010c8c:	465b      	mov	r3, fp
 8010c8e:	4622      	mov	r2, r4
 8010c90:	4629      	mov	r1, r5
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ff ff94 	bl	8010bc0 <__sfputs_r>
 8010c98:	3001      	adds	r0, #1
 8010c9a:	f000 80aa 	beq.w	8010df2 <_vfiprintf_r+0x20e>
 8010c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ca0:	445a      	add	r2, fp
 8010ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	f000 80a2 	beq.w	8010df2 <_vfiprintf_r+0x20e>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cb8:	f10a 0a01 	add.w	sl, sl, #1
 8010cbc:	9304      	str	r3, [sp, #16]
 8010cbe:	9307      	str	r3, [sp, #28]
 8010cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8010cc6:	4654      	mov	r4, sl
 8010cc8:	2205      	movs	r2, #5
 8010cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cce:	4858      	ldr	r0, [pc, #352]	; (8010e30 <_vfiprintf_r+0x24c>)
 8010cd0:	f7ef faae 	bl	8000230 <memchr>
 8010cd4:	9a04      	ldr	r2, [sp, #16]
 8010cd6:	b9d8      	cbnz	r0, 8010d10 <_vfiprintf_r+0x12c>
 8010cd8:	06d1      	lsls	r1, r2, #27
 8010cda:	bf44      	itt	mi
 8010cdc:	2320      	movmi	r3, #32
 8010cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce2:	0713      	lsls	r3, r2, #28
 8010ce4:	bf44      	itt	mi
 8010ce6:	232b      	movmi	r3, #43	; 0x2b
 8010ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cec:	f89a 3000 	ldrb.w	r3, [sl]
 8010cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8010cf2:	d015      	beq.n	8010d20 <_vfiprintf_r+0x13c>
 8010cf4:	9a07      	ldr	r2, [sp, #28]
 8010cf6:	4654      	mov	r4, sl
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	f04f 0c0a 	mov.w	ip, #10
 8010cfe:	4621      	mov	r1, r4
 8010d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d04:	3b30      	subs	r3, #48	; 0x30
 8010d06:	2b09      	cmp	r3, #9
 8010d08:	d94e      	bls.n	8010da8 <_vfiprintf_r+0x1c4>
 8010d0a:	b1b0      	cbz	r0, 8010d3a <_vfiprintf_r+0x156>
 8010d0c:	9207      	str	r2, [sp, #28]
 8010d0e:	e014      	b.n	8010d3a <_vfiprintf_r+0x156>
 8010d10:	eba0 0308 	sub.w	r3, r0, r8
 8010d14:	fa09 f303 	lsl.w	r3, r9, r3
 8010d18:	4313      	orrs	r3, r2
 8010d1a:	9304      	str	r3, [sp, #16]
 8010d1c:	46a2      	mov	sl, r4
 8010d1e:	e7d2      	b.n	8010cc6 <_vfiprintf_r+0xe2>
 8010d20:	9b03      	ldr	r3, [sp, #12]
 8010d22:	1d19      	adds	r1, r3, #4
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	9103      	str	r1, [sp, #12]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	bfbb      	ittet	lt
 8010d2c:	425b      	neglt	r3, r3
 8010d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8010d32:	9307      	strge	r3, [sp, #28]
 8010d34:	9307      	strlt	r3, [sp, #28]
 8010d36:	bfb8      	it	lt
 8010d38:	9204      	strlt	r2, [sp, #16]
 8010d3a:	7823      	ldrb	r3, [r4, #0]
 8010d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8010d3e:	d10c      	bne.n	8010d5a <_vfiprintf_r+0x176>
 8010d40:	7863      	ldrb	r3, [r4, #1]
 8010d42:	2b2a      	cmp	r3, #42	; 0x2a
 8010d44:	d135      	bne.n	8010db2 <_vfiprintf_r+0x1ce>
 8010d46:	9b03      	ldr	r3, [sp, #12]
 8010d48:	1d1a      	adds	r2, r3, #4
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	9203      	str	r2, [sp, #12]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	bfb8      	it	lt
 8010d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d56:	3402      	adds	r4, #2
 8010d58:	9305      	str	r3, [sp, #20]
 8010d5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010e40 <_vfiprintf_r+0x25c>
 8010d5e:	7821      	ldrb	r1, [r4, #0]
 8010d60:	2203      	movs	r2, #3
 8010d62:	4650      	mov	r0, sl
 8010d64:	f7ef fa64 	bl	8000230 <memchr>
 8010d68:	b140      	cbz	r0, 8010d7c <_vfiprintf_r+0x198>
 8010d6a:	2340      	movs	r3, #64	; 0x40
 8010d6c:	eba0 000a 	sub.w	r0, r0, sl
 8010d70:	fa03 f000 	lsl.w	r0, r3, r0
 8010d74:	9b04      	ldr	r3, [sp, #16]
 8010d76:	4303      	orrs	r3, r0
 8010d78:	3401      	adds	r4, #1
 8010d7a:	9304      	str	r3, [sp, #16]
 8010d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d80:	482c      	ldr	r0, [pc, #176]	; (8010e34 <_vfiprintf_r+0x250>)
 8010d82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d86:	2206      	movs	r2, #6
 8010d88:	f7ef fa52 	bl	8000230 <memchr>
 8010d8c:	2800      	cmp	r0, #0
 8010d8e:	d03f      	beq.n	8010e10 <_vfiprintf_r+0x22c>
 8010d90:	4b29      	ldr	r3, [pc, #164]	; (8010e38 <_vfiprintf_r+0x254>)
 8010d92:	bb1b      	cbnz	r3, 8010ddc <_vfiprintf_r+0x1f8>
 8010d94:	9b03      	ldr	r3, [sp, #12]
 8010d96:	3307      	adds	r3, #7
 8010d98:	f023 0307 	bic.w	r3, r3, #7
 8010d9c:	3308      	adds	r3, #8
 8010d9e:	9303      	str	r3, [sp, #12]
 8010da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010da2:	443b      	add	r3, r7
 8010da4:	9309      	str	r3, [sp, #36]	; 0x24
 8010da6:	e767      	b.n	8010c78 <_vfiprintf_r+0x94>
 8010da8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010dac:	460c      	mov	r4, r1
 8010dae:	2001      	movs	r0, #1
 8010db0:	e7a5      	b.n	8010cfe <_vfiprintf_r+0x11a>
 8010db2:	2300      	movs	r3, #0
 8010db4:	3401      	adds	r4, #1
 8010db6:	9305      	str	r3, [sp, #20]
 8010db8:	4619      	mov	r1, r3
 8010dba:	f04f 0c0a 	mov.w	ip, #10
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dc4:	3a30      	subs	r2, #48	; 0x30
 8010dc6:	2a09      	cmp	r2, #9
 8010dc8:	d903      	bls.n	8010dd2 <_vfiprintf_r+0x1ee>
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d0c5      	beq.n	8010d5a <_vfiprintf_r+0x176>
 8010dce:	9105      	str	r1, [sp, #20]
 8010dd0:	e7c3      	b.n	8010d5a <_vfiprintf_r+0x176>
 8010dd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dd6:	4604      	mov	r4, r0
 8010dd8:	2301      	movs	r3, #1
 8010dda:	e7f0      	b.n	8010dbe <_vfiprintf_r+0x1da>
 8010ddc:	ab03      	add	r3, sp, #12
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	462a      	mov	r2, r5
 8010de2:	4b16      	ldr	r3, [pc, #88]	; (8010e3c <_vfiprintf_r+0x258>)
 8010de4:	a904      	add	r1, sp, #16
 8010de6:	4630      	mov	r0, r6
 8010de8:	f7fd fd32 	bl	800e850 <_printf_float>
 8010dec:	4607      	mov	r7, r0
 8010dee:	1c78      	adds	r0, r7, #1
 8010df0:	d1d6      	bne.n	8010da0 <_vfiprintf_r+0x1bc>
 8010df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010df4:	07d9      	lsls	r1, r3, #31
 8010df6:	d405      	bmi.n	8010e04 <_vfiprintf_r+0x220>
 8010df8:	89ab      	ldrh	r3, [r5, #12]
 8010dfa:	059a      	lsls	r2, r3, #22
 8010dfc:	d402      	bmi.n	8010e04 <_vfiprintf_r+0x220>
 8010dfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e00:	f7ff fac8 	bl	8010394 <__retarget_lock_release_recursive>
 8010e04:	89ab      	ldrh	r3, [r5, #12]
 8010e06:	065b      	lsls	r3, r3, #25
 8010e08:	f53f af12 	bmi.w	8010c30 <_vfiprintf_r+0x4c>
 8010e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e0e:	e711      	b.n	8010c34 <_vfiprintf_r+0x50>
 8010e10:	ab03      	add	r3, sp, #12
 8010e12:	9300      	str	r3, [sp, #0]
 8010e14:	462a      	mov	r2, r5
 8010e16:	4b09      	ldr	r3, [pc, #36]	; (8010e3c <_vfiprintf_r+0x258>)
 8010e18:	a904      	add	r1, sp, #16
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	f7fd ffbc 	bl	800ed98 <_printf_i>
 8010e20:	e7e4      	b.n	8010dec <_vfiprintf_r+0x208>
 8010e22:	bf00      	nop
 8010e24:	08012c3c 	.word	0x08012c3c
 8010e28:	08012c5c 	.word	0x08012c5c
 8010e2c:	08012c1c 	.word	0x08012c1c
 8010e30:	08012ddc 	.word	0x08012ddc
 8010e34:	08012de6 	.word	0x08012de6
 8010e38:	0800e851 	.word	0x0800e851
 8010e3c:	08010bc1 	.word	0x08010bc1
 8010e40:	08012de2 	.word	0x08012de2

08010e44 <__sread>:
 8010e44:	b510      	push	{r4, lr}
 8010e46:	460c      	mov	r4, r1
 8010e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4c:	f000 f8d6 	bl	8010ffc <_read_r>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	bfab      	itete	ge
 8010e54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010e56:	89a3      	ldrhlt	r3, [r4, #12]
 8010e58:	181b      	addge	r3, r3, r0
 8010e5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e5e:	bfac      	ite	ge
 8010e60:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e62:	81a3      	strhlt	r3, [r4, #12]
 8010e64:	bd10      	pop	{r4, pc}

08010e66 <__swrite>:
 8010e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e6a:	461f      	mov	r7, r3
 8010e6c:	898b      	ldrh	r3, [r1, #12]
 8010e6e:	05db      	lsls	r3, r3, #23
 8010e70:	4605      	mov	r5, r0
 8010e72:	460c      	mov	r4, r1
 8010e74:	4616      	mov	r6, r2
 8010e76:	d505      	bpl.n	8010e84 <__swrite+0x1e>
 8010e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f000 f898 	bl	8010fb4 <_lseek_r>
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e8e:	81a3      	strh	r3, [r4, #12]
 8010e90:	4632      	mov	r2, r6
 8010e92:	463b      	mov	r3, r7
 8010e94:	4628      	mov	r0, r5
 8010e96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e9a:	f000 b817 	b.w	8010ecc <_write_r>

08010e9e <__sseek>:
 8010e9e:	b510      	push	{r4, lr}
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ea6:	f000 f885 	bl	8010fb4 <_lseek_r>
 8010eaa:	1c43      	adds	r3, r0, #1
 8010eac:	89a3      	ldrh	r3, [r4, #12]
 8010eae:	bf15      	itete	ne
 8010eb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8010eb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010eb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010eba:	81a3      	strheq	r3, [r4, #12]
 8010ebc:	bf18      	it	ne
 8010ebe:	81a3      	strhne	r3, [r4, #12]
 8010ec0:	bd10      	pop	{r4, pc}

08010ec2 <__sclose>:
 8010ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ec6:	f000 b831 	b.w	8010f2c <_close_r>
	...

08010ecc <_write_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	; (8010eec <_write_r+0x20>)
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	602a      	str	r2, [r5, #0]
 8010eda:	461a      	mov	r2, r3
 8010edc:	f7f4 fa67 	bl	80053ae <_write>
 8010ee0:	1c43      	adds	r3, r0, #1
 8010ee2:	d102      	bne.n	8010eea <_write_r+0x1e>
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	b103      	cbz	r3, 8010eea <_write_r+0x1e>
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	20005254 	.word	0x20005254

08010ef0 <__assert_func>:
 8010ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ef2:	4614      	mov	r4, r2
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	4b09      	ldr	r3, [pc, #36]	; (8010f1c <__assert_func+0x2c>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4605      	mov	r5, r0
 8010efc:	68d8      	ldr	r0, [r3, #12]
 8010efe:	b14c      	cbz	r4, 8010f14 <__assert_func+0x24>
 8010f00:	4b07      	ldr	r3, [pc, #28]	; (8010f20 <__assert_func+0x30>)
 8010f02:	9100      	str	r1, [sp, #0]
 8010f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010f08:	4906      	ldr	r1, [pc, #24]	; (8010f24 <__assert_func+0x34>)
 8010f0a:	462b      	mov	r3, r5
 8010f0c:	f000 f81e 	bl	8010f4c <fiprintf>
 8010f10:	f7fd fb04 	bl	800e51c <abort>
 8010f14:	4b04      	ldr	r3, [pc, #16]	; (8010f28 <__assert_func+0x38>)
 8010f16:	461c      	mov	r4, r3
 8010f18:	e7f3      	b.n	8010f02 <__assert_func+0x12>
 8010f1a:	bf00      	nop
 8010f1c:	20000018 	.word	0x20000018
 8010f20:	08012ded 	.word	0x08012ded
 8010f24:	08012dfa 	.word	0x08012dfa
 8010f28:	08012e28 	.word	0x08012e28

08010f2c <_close_r>:
 8010f2c:	b538      	push	{r3, r4, r5, lr}
 8010f2e:	4d06      	ldr	r5, [pc, #24]	; (8010f48 <_close_r+0x1c>)
 8010f30:	2300      	movs	r3, #0
 8010f32:	4604      	mov	r4, r0
 8010f34:	4608      	mov	r0, r1
 8010f36:	602b      	str	r3, [r5, #0]
 8010f38:	f7f4 fa55 	bl	80053e6 <_close>
 8010f3c:	1c43      	adds	r3, r0, #1
 8010f3e:	d102      	bne.n	8010f46 <_close_r+0x1a>
 8010f40:	682b      	ldr	r3, [r5, #0]
 8010f42:	b103      	cbz	r3, 8010f46 <_close_r+0x1a>
 8010f44:	6023      	str	r3, [r4, #0]
 8010f46:	bd38      	pop	{r3, r4, r5, pc}
 8010f48:	20005254 	.word	0x20005254

08010f4c <fiprintf>:
 8010f4c:	b40e      	push	{r1, r2, r3}
 8010f4e:	b503      	push	{r0, r1, lr}
 8010f50:	4601      	mov	r1, r0
 8010f52:	ab03      	add	r3, sp, #12
 8010f54:	4805      	ldr	r0, [pc, #20]	; (8010f6c <fiprintf+0x20>)
 8010f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f5a:	6800      	ldr	r0, [r0, #0]
 8010f5c:	9301      	str	r3, [sp, #4]
 8010f5e:	f7ff fe41 	bl	8010be4 <_vfiprintf_r>
 8010f62:	b002      	add	sp, #8
 8010f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f68:	b003      	add	sp, #12
 8010f6a:	4770      	bx	lr
 8010f6c:	20000018 	.word	0x20000018

08010f70 <_fstat_r>:
 8010f70:	b538      	push	{r3, r4, r5, lr}
 8010f72:	4d07      	ldr	r5, [pc, #28]	; (8010f90 <_fstat_r+0x20>)
 8010f74:	2300      	movs	r3, #0
 8010f76:	4604      	mov	r4, r0
 8010f78:	4608      	mov	r0, r1
 8010f7a:	4611      	mov	r1, r2
 8010f7c:	602b      	str	r3, [r5, #0]
 8010f7e:	f7f4 fa3e 	bl	80053fe <_fstat>
 8010f82:	1c43      	adds	r3, r0, #1
 8010f84:	d102      	bne.n	8010f8c <_fstat_r+0x1c>
 8010f86:	682b      	ldr	r3, [r5, #0]
 8010f88:	b103      	cbz	r3, 8010f8c <_fstat_r+0x1c>
 8010f8a:	6023      	str	r3, [r4, #0]
 8010f8c:	bd38      	pop	{r3, r4, r5, pc}
 8010f8e:	bf00      	nop
 8010f90:	20005254 	.word	0x20005254

08010f94 <_isatty_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4d06      	ldr	r5, [pc, #24]	; (8010fb0 <_isatty_r+0x1c>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	602b      	str	r3, [r5, #0]
 8010fa0:	f7f4 fa3d 	bl	800541e <_isatty>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d102      	bne.n	8010fae <_isatty_r+0x1a>
 8010fa8:	682b      	ldr	r3, [r5, #0]
 8010faa:	b103      	cbz	r3, 8010fae <_isatty_r+0x1a>
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	20005254 	.word	0x20005254

08010fb4 <_lseek_r>:
 8010fb4:	b538      	push	{r3, r4, r5, lr}
 8010fb6:	4d07      	ldr	r5, [pc, #28]	; (8010fd4 <_lseek_r+0x20>)
 8010fb8:	4604      	mov	r4, r0
 8010fba:	4608      	mov	r0, r1
 8010fbc:	4611      	mov	r1, r2
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	602a      	str	r2, [r5, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	f7f4 fa36 	bl	8005434 <_lseek>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	d102      	bne.n	8010fd2 <_lseek_r+0x1e>
 8010fcc:	682b      	ldr	r3, [r5, #0]
 8010fce:	b103      	cbz	r3, 8010fd2 <_lseek_r+0x1e>
 8010fd0:	6023      	str	r3, [r4, #0]
 8010fd2:	bd38      	pop	{r3, r4, r5, pc}
 8010fd4:	20005254 	.word	0x20005254

08010fd8 <__ascii_mbtowc>:
 8010fd8:	b082      	sub	sp, #8
 8010fda:	b901      	cbnz	r1, 8010fde <__ascii_mbtowc+0x6>
 8010fdc:	a901      	add	r1, sp, #4
 8010fde:	b142      	cbz	r2, 8010ff2 <__ascii_mbtowc+0x1a>
 8010fe0:	b14b      	cbz	r3, 8010ff6 <__ascii_mbtowc+0x1e>
 8010fe2:	7813      	ldrb	r3, [r2, #0]
 8010fe4:	600b      	str	r3, [r1, #0]
 8010fe6:	7812      	ldrb	r2, [r2, #0]
 8010fe8:	1e10      	subs	r0, r2, #0
 8010fea:	bf18      	it	ne
 8010fec:	2001      	movne	r0, #1
 8010fee:	b002      	add	sp, #8
 8010ff0:	4770      	bx	lr
 8010ff2:	4610      	mov	r0, r2
 8010ff4:	e7fb      	b.n	8010fee <__ascii_mbtowc+0x16>
 8010ff6:	f06f 0001 	mvn.w	r0, #1
 8010ffa:	e7f8      	b.n	8010fee <__ascii_mbtowc+0x16>

08010ffc <_read_r>:
 8010ffc:	b538      	push	{r3, r4, r5, lr}
 8010ffe:	4d07      	ldr	r5, [pc, #28]	; (801101c <_read_r+0x20>)
 8011000:	4604      	mov	r4, r0
 8011002:	4608      	mov	r0, r1
 8011004:	4611      	mov	r1, r2
 8011006:	2200      	movs	r2, #0
 8011008:	602a      	str	r2, [r5, #0]
 801100a:	461a      	mov	r2, r3
 801100c:	f7f4 f9b2 	bl	8005374 <_read>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	d102      	bne.n	801101a <_read_r+0x1e>
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	b103      	cbz	r3, 801101a <_read_r+0x1e>
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	20005254 	.word	0x20005254

08011020 <__ascii_wctomb>:
 8011020:	b149      	cbz	r1, 8011036 <__ascii_wctomb+0x16>
 8011022:	2aff      	cmp	r2, #255	; 0xff
 8011024:	bf85      	ittet	hi
 8011026:	238a      	movhi	r3, #138	; 0x8a
 8011028:	6003      	strhi	r3, [r0, #0]
 801102a:	700a      	strbls	r2, [r1, #0]
 801102c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011030:	bf98      	it	ls
 8011032:	2001      	movls	r0, #1
 8011034:	4770      	bx	lr
 8011036:	4608      	mov	r0, r1
 8011038:	4770      	bx	lr
	...

0801103c <_init>:
 801103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103e:	bf00      	nop
 8011040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011042:	bc08      	pop	{r3}
 8011044:	469e      	mov	lr, r3
 8011046:	4770      	bx	lr

08011048 <_fini>:
 8011048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104a:	bf00      	nop
 801104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801104e:	bc08      	pop	{r3}
 8011050:	469e      	mov	lr, r3
 8011052:	4770      	bx	lr
