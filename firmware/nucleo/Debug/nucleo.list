
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d950  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001118  0800db30  0800db30  0001db30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec48  0800ec48  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec48  0800ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec50  0800ec50  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec50  0800ec50  0001ec50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec54  0800ec54  0001ec54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ec58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fa0  200001e4  0800ee3c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005184  0800ee3c  00025184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b206  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005921  00000000  00000000  0004b41a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e40  00000000  00000000  00050d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bc8  00000000  00000000  00052b80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029f05  00000000  00000000  00054748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bc20  00000000  00000000  0007e64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f33d7  00000000  00000000  0009a26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d644  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e2c  00000000  00000000  0018d6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800db18 	.word	0x0800db18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e8 	.word	0x200001e8
 800021c:	0800db18 	.word	0x0800db18

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <_ZN7EncoderC1Ev>:

protected:
	void set_angle(float new_angle); // angle_ can be set by child classes that implement specific encoders

public:
	Encoder() {} // constructor does nothing
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <_ZN7EncoderC1Ev+0x2c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	0800e8f8 	.word	0x0800e8f8

08000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>:
/* NOTE: Code is written for SPI mode 1 (I think), with 8-bit words. Could be rewritten for 16-bit words using HAL NSS pin function. */

/**
 * @brief Constructor.
 */
AS5048A::AS5048A(
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	807b      	strh	r3, [r7, #2]
		uint16_t encoder_cs_pin,
		uint32_t spi_timeout)
	: encoder_spi_(encoder_spi)
	, encoder_cs_port_(encoder_cs_port)
	, encoder_cs_pin_(encoder_cs_pin)
	, spi_timeout_(spi_timeout)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ffdd 	bl	8000f98 <_ZN7EncoderC1Ev>
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm+0x40>)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	829a      	strh	r2, [r3, #20]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	619a      	str	r2, [r3, #24]
{

}
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4618      	mov	r0, r3
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800e8e8 	.word	0x0800e8e8

0800100c <_ZN7AS5048A4InitEv>:

/**
 * @brief Initializes the interface to the AS5048A
 */
void AS5048A::Init() {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	ClearErrorFlag_(); // clear the error flag in case it was set during a previous transaction
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 f8f5 	bl	8001204 <_ZN7AS5048A15ClearErrorFlag_Ev>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZN7AS5048A6UpdateEv>:

/**
 * @brief Reads the AS5048A encoder over SPI.
 */
void AS5048A::Update() {
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	set_angle(ReadAngle_());
 800102a:	687c      	ldr	r4, [r7, #4]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f89f 	bl	8001170 <_ZN7AS5048A10ReadAngle_Ev>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	4620      	mov	r0, r4
 800103c:	f000 f9e8 	bl	8001410 <_ZN7Encoder9set_angleEf>
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}

08001048 <_ZN7AS5048A15CalcEvenParity_Et>:
/**
 * @brief Calculates the parity bit to ensure that a 16-bit unsigned integer has even parity.
 * @param[in] val 16-bit value that needs a parity bit (only the 15 LS bits are read).
 * @retval The parity bit that will reside in the MS bit to make the uint16_t have even parity.
 */
uint8_t AS5048A::CalcEvenParity_(uint16_t val) {
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
	uint8_t par = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 8001058:	2300      	movs	r3, #0
 800105a:	73bb      	strb	r3, [r7, #14]
 800105c:	7bbb      	ldrb	r3, [r7, #14]
 800105e:	2b0e      	cmp	r3, #14
 8001060:	d810      	bhi.n	8001084 <_ZN7AS5048A15CalcEvenParity_Et+0x3c>
		par ^= ((val >> shift) & 0x1);
 8001062:	887a      	ldrh	r2, [r7, #2]
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	fa42 f303 	asr.w	r3, r2, r3
 800106a:	b25b      	sxtb	r3, r3
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b25a      	sxtb	r2, r3
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4053      	eors	r3, r2
 8001078:	b25b      	sxtb	r3, r3
 800107a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t shift = 0; shift < 15; shift++) {
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	3301      	adds	r3, #1
 8001080:	73bb      	strb	r3, [r7, #14]
 8001082:	e7eb      	b.n	800105c <_ZN7AS5048A15CalcEvenParity_Et+0x14>
	}
	return par;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_ZN7AS5048A20CreateCommandPacket_Eth>:
 * @brief Creates a data packet for specifying an AS5048A address.
 * @param[in] addr 14 bit address code.
 * @param[in] rw 1-bit read(1)/write(0) flag.
 * @retval 16-bit command packet.
 */
uint16_t AS5048A::CreateCommandPacket_(uint16_t addr, uint8_t rw) {
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
 800109e:	4613      	mov	r3, r2
 80010a0:	707b      	strb	r3, [r7, #1]
	uint16_t pack = addr & (0xFFFF >> 2); // ignore 2 MSbs
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010a8:	81fb      	strh	r3, [r7, #14]
	pack |= (rw & 0b1) << 14; // mask r/w bit, set as bit 15
 80010aa:	787b      	ldrb	r3, [r7, #1]
 80010ac:	039b      	lsls	r3, r3, #14
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b21b      	sxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010c0:	89fb      	ldrh	r3, [r7, #14]
 80010c2:	4619      	mov	r1, r3
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ffbf 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 80010ca:	4603      	mov	r3, r0
 80010cc:	03db      	lsls	r3, r3, #15
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	81fb      	strh	r3, [r7, #14]
	return pack;
 80010da:	89fb      	ldrh	r3, [r7, #14]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7AS5048A18CreateWritePacket_Et>:
/**
 * @brief Creates a data packet that can be written to a previously specified AS5048A address.
 * @param[in] data 14 bit data to write to the selected address.
 * @retval 16-bit write packet with parity bit and reserved bit populated.
 */
uint16_t AS5048A::CreateWritePacket_(uint16_t data) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
	uint16_t pack = data & (0xFFFF >> 2); // ignore 2 MSBs
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80010f6:	81fb      	strh	r3, [r7, #14]
	// bit 14 has to be 0 (already done)
	pack |= CalcEvenParity_(pack) << 15; // set parity bit
 80010f8:	89fb      	ldrh	r3, [r7, #14]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff ffa3 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001102:	4603      	mov	r3, r0
 8001104:	03db      	lsls	r3, r3, #15
 8001106:	b21a      	sxth	r2, r3
 8001108:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	81fb      	strh	r3, [r7, #14]
	return pack;
 8001112:	89fb      	ldrh	r3, [r7, #14]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <_ZN7AS5048A20ParseReceivedPacket_Et>:
/**
 * @brief Extracts data from a packet received from the AS5048A. Can indicate a parity error with PARSE_ERR.
 * @param[in] packet Raw SPI packet received from AS5048a.
 * @retval Extracted data if parse successful, otherwise PARSE_ERR.
 */
uint16_t AS5048A::ParseReceivedPacket_(uint16_t packet) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
	if ((packet >> 14) & 0x1) {
 8001128:	887b      	ldrh	r3, [r7, #2]
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <_ZN7AS5048A20ParseReceivedPacket_Et+0x1c>
		// EF error flag is set, issue with previous host transmission
		return PARSE_ERR;
 8001132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001136:	e016      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	if (CalcEvenParity_(packet) != (packet >> 15)) {
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	4619      	mov	r1, r3
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff83 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	13db      	asrs	r3, r3, #15
 800114a:	429a      	cmp	r2, r3
 800114c:	bf14      	ite	ne
 800114e:	2301      	movne	r3, #1
 8001150:	2300      	moveq	r3, #0
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <_ZN7AS5048A20ParseReceivedPacket_Et+0x42>
		// parity bit is incorrect
		return PARSE_ERR;
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	e003      	b.n	8001166 <_ZN7AS5048A20ParseReceivedPacket_Et+0x4a>
	}
	return (packet & (0xFFFF >> 2));
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001164:	b29b      	uxth	r3, r3
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <_ZN7AS5048A10ReadAngle_Ev>:

/**
 * @brief SPI interface function that reads the current angle from the encoder.
 * @retval The value of the angle that was read, or PARSE_ERR (0xFFFF) if error encountered.
 */
float AS5048A::ReadAngle_() {
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint16_t read_cmd = CreateCommandPacket_(ADDR_ANGLE, CMD_READ);
 8001178:	2201      	movs	r2, #1
 800117a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff87 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001184:	4603      	mov	r3, r0
 8001186:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(read_cmd);
 8001188:	89fb      	ldrh	r3, [r7, #14]
 800118a:	4619      	mov	r1, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f85d 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>

	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001192:	2100      	movs	r1, #0
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffa5 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800119a:	4603      	mov	r3, r0
 800119c:	81bb      	strh	r3, [r7, #12]
	uint16_t raw_angle_val = ParseReceivedPacket_(SPITransmitReceive16_(dummy_data));
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	4619      	mov	r1, r3
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f87c 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4619      	mov	r1, r3
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffb5 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 80011b2:	4603      	mov	r3, r0
 80011b4:	817b      	strh	r3, [r7, #10]
	return raw_angle_val * 360.0 / DATA_MAX;
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9db 	bl	8000574 <__aeabi_i2d>
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <_ZN7AS5048A10ReadAngle_Ev+0x90>)
 80011c4:	f7ff fa40 	bl	8000648 <__aeabi_dmul>
 80011c8:	4603      	mov	r3, r0
 80011ca:	460c      	mov	r4, r1
 80011cc:	4618      	mov	r0, r3
 80011ce:	4621      	mov	r1, r4
 80011d0:	a309      	add	r3, pc, #36	; (adr r3, 80011f8 <_ZN7AS5048A10ReadAngle_Ev+0x88>)
 80011d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d6:	f7ff fb61 	bl	800089c <__aeabi_ddiv>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	4618      	mov	r0, r3
 80011e0:	4621      	mov	r1, r4
 80011e2:	f7ff fd09 	bl	8000bf8 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	ee07 3a90 	vmov	s15, r3
}
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd90      	pop	{r4, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	00000000 	.word	0x00000000
 80011fc:	40cfff80 	.word	0x40cfff80
 8001200:	40768000 	.word	0x40768000

08001204 <_ZN7AS5048A15ClearErrorFlag_Ev>:

/**
 * @brief Clears the error flag from the AS5048A to allow transmissions to continue after an error.
 * @retval The contents of the error register (parity bit and error flag masked off, 14 LSb's only).
 */
uint16_t AS5048A::ClearErrorFlag_() {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	uint16_t clear_err_flag_cmd = CreateCommandPacket_(ADDR_CLEAR_ERROR_FLAG, CMD_READ);
 800120c:	2201      	movs	r2, #1
 800120e:	2101      	movs	r1, #1
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff3e 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
	SPITransmit16_(clear_err_flag_cmd);
 800121a:	89fb      	ldrh	r3, [r7, #14]
 800121c:	4619      	mov	r1, r3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f814 	bl	800124c <_ZN7AS5048A14SPITransmit16_Et>
	uint16_t dummy_data = CreateWritePacket_(DATA_DUMMY);
 8001224:	2100      	movs	r1, #0
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff5c 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 800122c:	4603      	mov	r3, r0
 800122e:	81bb      	strh	r3, [r7, #12]
	uint16_t error_reg_content = SPITransmitReceive16_(dummy_data) & (0xFF >> 2); // mask off parity bit and error flag
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f833 	bl	80012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001240:	817b      	strh	r3, [r7, #10]
	// new error reg contents will be returned on next command
	return error_reg_content;
 8001242:	897b      	ldrh	r3, [r7, #10]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN7AS5048A14SPITransmit16_Et>:

/**
 * @brief Helper utility that writes 16 bits over SPI. Used because sending MSB first is a pain.
 */
void AS5048A::SPITransmit16_(uint16_t tx_data) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	tx_buf[0] = tx_data >> 8; // MSB first
 8001258:	887b      	ldrh	r3, [r7, #2]
 800125a:	121b      	asrs	r3, r3, #8
 800125c:	b2db      	uxtb	r3, r3
 800125e:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // LSB second
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	b2db      	uxtb	r3, r3
 8001264:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6918      	ldr	r0, [r3, #16]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	8a9b      	ldrh	r3, [r3, #20]
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	f003 fb23 	bl	80048bc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(encoder_spi_, (uint8_t *)&tx_buf, 2, spi_timeout_);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68d8      	ldr	r0, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f107 010c 	add.w	r1, r7, #12
 8001282:	2202      	movs	r2, #2
 8001284:	f004 fd9e 	bl	8005dc4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6918      	ldr	r0, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	8a9b      	ldrh	r3, [r3, #20]
 8001290:	2201      	movs	r2, #1
 8001292:	4619      	mov	r1, r3
 8001294:	f003 fb12 	bl	80048bc <HAL_GPIO_WritePin>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN7AS5048A21SPITransmitReceive16_Et>:

/**
 * @brief Helper utility that writes 16 bits and reads 16 bits over SPI. Used because sending MSB first is a pain.
 * @retval 16 bits that are read.
 */
uint16_t AS5048A::SPITransmitReceive16_(uint16_t tx_data) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
	uint8_t tx_buf[2];
	uint8_t rx_buf[2];
	tx_buf[0] = tx_data >> 8; // send MSB first
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	121b      	asrs	r3, r3, #8
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	733b      	strb	r3, [r7, #12]
	tx_buf[1] = tx_data & 0xFF; // send LSB second
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(encoder_cs_port_, encoder_cs_pin_, GPIO_PIN_RESET);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6918      	ldr	r0, [r3, #16]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8a9b      	ldrh	r3, [r3, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	f003 faf9 	bl	80048bc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(encoder_spi_, (uint8_t *)&tx_buf, (uint8_t *)&rx_buf, 2, spi_timeout_);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68d8      	ldr	r0, [r3, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f107 0208 	add.w	r2, r7, #8
 80012d6:	f107 010c 	add.w	r1, r7, #12
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2302      	movs	r3, #2
 80012de:	f004 fed7 	bl	8006090 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(encoder_cs_port_,  encoder_cs_pin_, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6918      	ldr	r0, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a9b      	ldrh	r3, [r3, #20]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f003 fae5 	bl	80048bc <HAL_GPIO_WritePin>

	uint16_t rx_data = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	81fb      	strh	r3, [r7, #14]
	rx_data |= (rx_buf[0] << 8); // received MSB first
 80012f6:	7a3b      	ldrb	r3, [r7, #8]
 80012f8:	021b      	lsls	r3, r3, #8
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001300:	4313      	orrs	r3, r2
 8001302:	b21b      	sxth	r3, r3
 8001304:	81fb      	strh	r3, [r7, #14]
	rx_data |= rx_buf[1]; // received LSB second TODO: is this right?
 8001306:	7a7b      	ldrb	r3, [r7, #9]
 8001308:	b29a      	uxth	r2, r3
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	4313      	orrs	r3, r2
 800130e:	81fb      	strh	r3, [r7, #14]
	return rx_data;
 8001310:	89fb      	ldrh	r3, [r7, #14]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <_ZN7Encoder10WrapAngle_Ef>:
/**
 * @brief Helper function that wraps an angle into the range 0-360 degrees.
 * @param[in] angle Angle value to be wrapped (float, degrees).
 * @retval Wrapped value, in degrees.
 */
float Encoder::WrapAngle_(float raw_angle) {
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	ed87 0a00 	vstr	s0, [r7]
	float wrapped_angle = raw_angle - 360.0 * floor(raw_angle / 360.0);
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f7ff f935 	bl	8000598 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	6838      	ldr	r0, [r7, #0]
 8001334:	f7ff f930 	bl	8000598 <__aeabi_f2d>
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 800133e:	f7ff faad 	bl	800089c <__aeabi_ddiv>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	ec43 2b17 	vmov	d7, r2, r3
 800134a:	eeb0 0a47 	vmov.f32	s0, s14
 800134e:	eef0 0a67 	vmov.f32	s1, s15
 8001352:	f009 ff51 	bl	800b1f8 <floor>
 8001356:	ec51 0b10 	vmov	r0, r1, d0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <_ZN7Encoder10WrapAngle_Ef+0x94>)
 8001360:	f7ff f972 	bl	8000648 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7fe ffb4 	bl	80002d8 <__aeabi_dsub>
 8001370:	4603      	mov	r3, r0
 8001372:	460c      	mov	r4, r1
 8001374:	4618      	mov	r0, r3
 8001376:	4621      	mov	r1, r4
 8001378:	f7ff fc3e 	bl	8000bf8 <__aeabi_d2f>
 800137c:	4603      	mov	r3, r0
 800137e:	60fb      	str	r3, [r7, #12]
	if (wrapped_angle < 0) {
 8001380:	edd7 7a03 	vldr	s15, [r7, #12]
 8001384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138c:	d507      	bpl.n	800139e <_ZN7Encoder10WrapAngle_Ef+0x82>
		wrapped_angle += 360.0;
 800138e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001392:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013b4 <_ZN7Encoder10WrapAngle_Ef+0x98>
 8001396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139a:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return wrapped_angle;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ee07 3a90 	vmov	s15, r3
}
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bdb0      	pop	{r4, r5, r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40768000 	.word	0x40768000
 80013b4:	43b40000 	.word	0x43b40000

080013b8 <_ZN7Encoder14set_zero_angleEf>:

/**
 * @brief Sets the encoder zero position to a specific value.
 * @param[in] new_zero_angle The new zero position of the encoder, in degrees.
 */
void Encoder::set_zero_angle(float new_zero_angle) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	ed87 0a00 	vstr	s0, [r7]
	zero_angle_ = WrapAngle_(new_zero_angle);
 80013c4:	ed97 0a00 	vldr	s0, [r7]
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffa7 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_ZN7Encoder9get_angleEv>:

/**
 * @brief Returns the current angle of the encoder, in degrees.
 * @retval Angle of the encoder, in degrees.
 */
float Encoder::get_angle() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	return WrapAngle_(angle_ - zero_angle_);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff8d 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
}
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_ZN7Encoder9set_angleEf>:
/**
 * @brief Sets the angle (in degrees) stored by the Encoder object. Takes care of wrapping to store the value
 * between 0-360.
 * @param[in] angle Angle value in degrees (float).
 */
void Encoder::set_angle(float new_angle) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	ed87 0a00 	vstr	s0, [r7]
	angle_ = WrapAngle_(new_angle);
 800141c:	ed97 0a00 	vldr	s0, [r7]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff7b 	bl	800131c <_ZN7Encoder10WrapAngle_Ef>
 8001426:	eef0 7a40 	vmov.f32	s15, s0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_ZN10HalfBridge11get_op_modeEv>:

/**
 * @brief Returns the operation mode of the half-bridge.
 * @retval Halfbridge operation mode.
 */
HalfBridge::OpMode HalfBridge::get_op_mode() {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	return op_mode_;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7a1b      	ldrb	r3, [r3, #8]
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <_ZN9STSPIN8304InitEv>:


/**
 * @brief Initializes the relevant channel of the STSPIN320 half-bridge.
 */
void STSPIN830::Init() {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	// Initialize with H-bridge in high-Z state.
	HAL_GPIO_WritePin(en_port_, en_pin_, en_state_);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68d8      	ldr	r0, [r3, #12]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	8a19      	ldrh	r1, [r3, #16]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e9b      	ldrb	r3, [r3, #26]
 8001464:	461a      	mov	r2, r3
 8001466:	f003 fa29 	bl	80048bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(in_port_, in_pin_, in_state_);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6958      	ldr	r0, [r3, #20]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	8b19      	ldrh	r1, [r3, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7edb      	ldrb	r3, [r3, #27]
 8001476:	461a      	mov	r2, r3
 8001478:	f003 fa20 	bl	80048bc <HAL_GPIO_WritePin>
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_ZN9STSPIN8306UpdateEv>:

void STSPIN830::Update() {
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	// Check current
	current_ma_ = ((static_cast<float>(curr_sense_adc_voltage_) / kADCMaxCounts) - kADCOffsetVolts) / kADCGain;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800149a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80014cc <_ZN9STSPIN8306UpdateEv+0x48>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80014d0 <_ZN9STSPIN8306UpdateEv+0x4c>
 80014a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80014aa:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80014d4 <_ZN9STSPIN8306UpdateEv+0x50>
 80014ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014b6:	ee17 3a90 	vmov	r3, s15
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	841a      	strh	r2, [r3, #32]

}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	467ffc00 	.word	0x467ffc00
 80014d0:	3fc7ae14 	.word	0x3fc7ae14
 80014d4:	3f014120 	.word	0x3f014120

080014d8 <_ZN13PIDControllerC1EfffRKf>:
 * @param[in] k_p_in Proportional gain.
 * @param[in] k_i_in Integral gain.
 * @param[in] k_d_in Derivative gain.
 * @param[in] state_in Reference to the plant state, which is read during every update.
 */
PIDController::PIDController(float k_p_in, float k_i_in, float k_d_in, const float& state_in)
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6178      	str	r0, [r7, #20]
 80014e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80014e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80014e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80014ec:	6079      	str	r1, [r7, #4]
	: k_p(k_p_in)
	, k_i(k_i_in)
	, k_d(k_d_in)
	, state(state_in){}
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2264      	movs	r2, #100	; 0x64
 80014f2:	801a      	strh	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	3304      	adds	r3, #4
 80014f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 ff3b 	bl	800b37a <memset>
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2200      	movs	r2, #0
 8001508:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZN13PIDController6UpdateEf>:
 * @brief Updates the PID controller based on a new sample. Updates output and error accumulator
 * based on the state and target of the plant, as well as the time elapsed since the last update.
 * @param[in] ms_since_last_update Milliseconds elapsed since last update function call. Used for
 * integrating error in the error accumulator.
 */
void PIDController::Update(float ms_since_last_update) {
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	ed87 0a00 	vstr	s0, [r7]
	// Populate circular error memory buffer with integrated chunk of previous error.
	float prev_error = error_;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001566:	60fb      	str	r3, [r7, #12]
	error_mem_[error_mem_index_] = prev_error  * ms_since_last_update;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800156e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001572:	edd7 7a00 	vldr	s15, [r7]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	3304      	adds	r3, #4
 8001582:	edc3 7a00 	vstr	s15, [r3]
	error_mem_index_++;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8b3 3194 	ldrh.w	r3, [r3, #404]	; 0x194
 800158c:	3301      	adds	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	if (error_mem_index_ > error_mem_depth_) {
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8b3 2194 	ldrh.w	r2, [r3, #404]	; 0x194
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d903      	bls.n	80015ac <_ZN13PIDController6UpdateEf+0x58>
		error_mem_index_ = 0; // wrap error memory index
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	}

	// Proportional Error.
	error_ = state - target; // calculate current error
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80015b2:	ed93 7a00 	vldr	s14, [r3]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 7a6c 	vldr	s15, [r3, #432]	; 0x1b0
 80015bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c

	// Integral Error.
	float cum_prev_error = 0;
 80015c6:	f04f 0300 	mov.w	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 80015cc:	2300      	movs	r3, #0
 80015ce:	827b      	strh	r3, [r7, #18]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	8a7a      	ldrh	r2, [r7, #18]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d210      	bcs.n	80015fc <_ZN13PIDController6UpdateEf+0xa8>
		cum_prev_error += error_mem_[i];
 80015da:	8a7b      	ldrh	r3, [r7, #18]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3304      	adds	r3, #4
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80015ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f0:	edc7 7a05 	vstr	s15, [r7, #20]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 80015f4:	8a7b      	ldrh	r3, [r7, #18]
 80015f6:	3301      	adds	r3, #1
 80015f8:	827b      	strh	r3, [r7, #18]
 80015fa:	e7e9      	b.n	80015d0 <_ZN13PIDController6UpdateEf+0x7c>
	}

	output_ = k_p * (error_) + k_i * cum_prev_error + k_d * (error_ - prev_error);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	ed93 7a68 	vldr	s14, [r3, #416]	; 0x1a0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a67 	vldr	s15, [r3, #412]	; 0x19c
 8001608:	ee27 7a27 	vmul.f32	s14, s14, s15
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	edd3 6a69 	vldr	s13, [r3, #420]	; 0x1a4
 8001612:	edd7 7a05 	vldr	s15, [r7, #20]
 8001616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800161a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	edd3 6a6a 	vldr	s13, [r3, #424]	; 0x1a8
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 6a67 	vldr	s12, [r3, #412]	; 0x19c
 800162a:	edd7 7a03 	vldr	s15, [r7, #12]
 800162e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edc3 7a66 	vstr	s15, [r3, #408]	; 0x198
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_ZN13PIDController5ResetEv>:

/**
 * @brief Zeroes the integral accumulator of the PID Controller and forces an update.
 */
void PIDController::Reset() {
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 8001654:	2300      	movs	r3, #0
 8001656:	81fb      	strh	r3, [r7, #14]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	89fa      	ldrh	r2, [r7, #14]
 800165e:	429a      	cmp	r2, r3
 8001660:	d20b      	bcs.n	800167a <_ZN13PIDController5ResetEv+0x2e>
		error_mem_[i] = 0;
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3304      	adds	r3, #4
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
	for (uint16_t i = 0; i < error_mem_depth_; i++) {
 8001672:	89fb      	ldrh	r3, [r7, #14]
 8001674:	3301      	adds	r3, #1
 8001676:	81fb      	strh	r3, [r7, #14]
 8001678:	e7ee      	b.n	8001658 <_ZN13PIDController5ResetEv+0xc>
	}
	error_ = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	Update(0);
 8001684:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001698 <_ZN13PIDController5ResetEv+0x4c>
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff63 	bl	8001554 <_ZN13PIDController6UpdateEf>
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	00000000 	.word	0x00000000

0800169c <_ZN13PIDController10get_outputEv>:

float PIDController::get_output() {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	return output_;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80016aa:	ee07 3a90 	vmov	s15, r3
}
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <main_run>:

/**
 * @brief Main function that avoids all the auto-generated junk from ST CubeMX.
 * @retval int
 */
int main_run() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0

#ifdef RUN_TESTS
	RunAllTests();
 80016c0:	f000 f82a 	bl	8001718 <_Z11RunAllTestsv>
#endif

	task1Handle = osThreadNew(startTask1, NULL, &task1Attributes);
 80016c4:	4a05      	ldr	r2, [pc, #20]	; (80016dc <main_run+0x20>)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <main_run+0x24>)
 80016ca:	f006 ff8f 	bl	80085ec <osThreadNew>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <main_run+0x28>)
 80016d2:	601a      	str	r2, [r3, #0]

	return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800e910 	.word	0x0800e910
 80016e0:	080016e9 	.word	0x080016e9
 80016e4:	20000200 	.word	0x20000200

080016e8 <_Z10startTask1Pv>:

void startTask1(void * argument) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	while(1) {
		uint32_t osTickCount = osKernelGetTickCount();
 80016f0:	f006 ff4a 	bl	8008588 <osKernelGetTickCount>
 80016f4:	60f8      	str	r0, [r7, #12]
		uint32_t osTickFreq = osKernelGetTickFreq();
 80016f6:	f006 ff6f 	bl	80085d8 <osKernelGetTickFreq>
 80016fa:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <_Z10startTask1Pv+0x2c>)
 8001700:	f003 f8f5 	bl	80048ee <HAL_GPIO_TogglePin>
		osDelayUntil(osTickCount + osTickFreq / task1Freq);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	085a      	lsrs	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f007 f841 	bl	8008794 <osDelayUntil>
	}
 8001712:	e7ed      	b.n	80016f0 <_Z10startTask1Pv+0x8>
 8001714:	40020400 	.word	0x40020400

08001718 <_Z11RunAllTestsv>:
}

#ifdef RUN_TESTS
void RunAllTests() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	TestEncoderAll();
 800171c:	f000 fac6 	bl	8001cac <_Z14TestEncoderAllv>
	TestHalfBridgeAll();
 8001720:	f000 fba6 	bl	8001e70 <_Z17TestHalfBridgeAllv>
	TestPIDControllerAll();
 8001724:	f000 ff4c 	bl	80025c0 <_Z20TestPIDControllerAllv>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <_Z17TestEncoderCreatev>:
//#define TEST_SPI // run actual SPI test on the honest to god SPI port (use logic analyzer to debug)
#ifdef TEST_SPI
#include "main.h" // gives access to encoder_spi global handle
#endif

bool TestEncoderCreate() {
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af02      	add	r7, sp, #8
	TEST_PRINT("Create Encoder.\r\n");
 8001732:	4817      	ldr	r0, [pc, #92]	; (8001790 <_Z17TestEncoderCreatev+0x64>)
 8001734:	f00a fafa 	bl	800bd2c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001744:	8bfa      	ldrh	r2, [r7, #30]
 8001746:	4638      	mov	r0, r7
 8001748:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4613      	mov	r3, r2
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001754:	f7ff fc38 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	uint16_t enc_angle = enc.get_angle();
 8001758:	463b      	mov	r3, r7
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe40 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001760:	eef0 7a40 	vmov.f32	s15, s0
 8001764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001768:	ee17 3a90 	vmov	r3, s15
 800176c:	83bb      	strh	r3, [r7, #28]
	if (enc_angle != 0) {
 800176e:	8bbb      	ldrh	r3, [r7, #28]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d007      	beq.n	8001784 <_Z17TestEncoderCreatev+0x58>
		FAIL_PRINT("Initialized with nonzero encoder angle: got %d but expected %d.\r\n", enc_angle, 0);
 8001774:	8bbb      	ldrh	r3, [r7, #28]
 8001776:	2200      	movs	r2, #0
 8001778:	4619      	mov	r1, r3
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <_Z17TestEncoderCreatev+0x68>)
 800177c:	f00a fa62 	bl	800bc44 <iprintf>
		return false;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <_Z17TestEncoderCreatev+0x5a>
	}

	return true;
 8001784:	2301      	movs	r3, #1
}
 8001786:	4618      	mov	r0, r3
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	0800db38 	.word	0x0800db38
 8001794:	0800db58 	.word	0x0800db58

08001798 <_Z15TestEncoderZerov>:

bool TestEncoderZero() {
 8001798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179a:	b08f      	sub	sp, #60	; 0x3c
 800179c:	af02      	add	r7, sp, #8
	TEST_PRINT("Zero Encoder.\r\n");
 800179e:	4839      	ldr	r0, [pc, #228]	; (8001884 <_Z15TestEncoderZerov+0xec>)
 80017a0:	f00a fac4 	bl	800bd2c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80017b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80017b2:	4638      	mov	r0, r7
 80017b4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80017c0:	f7ff fc02 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test negative relative angle.\r\n");
 80017c4:	4830      	ldr	r0, [pc, #192]	; (8001888 <_Z15TestEncoderZerov+0xf0>)
 80017c6:	f00a fab1 	bl	800bd2c <puts>
	enc.set_zero_angle(55); // set zero angle to 55 degrees
 80017ca:	463b      	mov	r3, r7
 80017cc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800188c <_Z15TestEncoderZerov+0xf4>
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fdf1 	bl	80013b8 <_ZN7Encoder14set_zero_angleEf>
	float angle = enc.get_angle();
 80017d6:	463b      	mov	r3, r7
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe01 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 80017de:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 360.0 - 55;
 80017e2:	4b2b      	ldr	r3, [pc, #172]	; (8001890 <_Z15TestEncoderZerov+0xf8>)
 80017e4:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 80017e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	d012      	beq.n	800181e <_Z15TestEncoderZerov+0x86>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 80017f8:	69f8      	ldr	r0, [r7, #28]
 80017fa:	f7fe fecd 	bl	8000598 <__aeabi_f2d>
 80017fe:	4605      	mov	r5, r0
 8001800:	460e      	mov	r6, r1
 8001802:	6a38      	ldr	r0, [r7, #32]
 8001804:	f7fe fec8 	bl	8000598 <__aeabi_f2d>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	e9cd 3400 	strd	r3, r4, [sp]
 8001810:	462a      	mov	r2, r5
 8001812:	4633      	mov	r3, r6
 8001814:	481f      	ldr	r0, [pc, #124]	; (8001894 <_Z15TestEncoderZerov+0xfc>)
 8001816:	f00a fa15 	bl	800bc44 <iprintf>
		return false;
 800181a:	2300      	movs	r3, #0
 800181c:	e02e      	b.n	800187c <_Z15TestEncoderZerov+0xe4>
	}

	T_TEST_PRINT("Test setting zero angle too large.\r\n");
 800181e:	481e      	ldr	r0, [pc, #120]	; (8001898 <_Z15TestEncoderZerov+0x100>)
 8001820:	f00a fa84 	bl	800bd2c <puts>
	enc.set_zero_angle(3600);
 8001824:	463b      	mov	r3, r7
 8001826:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800189c <_Z15TestEncoderZerov+0x104>
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fdc4 	bl	80013b8 <_ZN7Encoder14set_zero_angleEf>
	angle = enc.get_angle();
 8001830:	463b      	mov	r3, r7
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fdd4 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001838:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = 0;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001842:	ed97 7a08 	vldr	s14, [r7, #32]
 8001846:	edd7 7a07 	vldr	s15, [r7, #28]
 800184a:	eeb4 7a67 	vcmp.f32	s14, s15
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d012      	beq.n	800187a <_Z15TestEncoderZerov+0xe2>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001854:	69f8      	ldr	r0, [r7, #28]
 8001856:	f7fe fe9f 	bl	8000598 <__aeabi_f2d>
 800185a:	4605      	mov	r5, r0
 800185c:	460e      	mov	r6, r1
 800185e:	6a38      	ldr	r0, [r7, #32]
 8001860:	f7fe fe9a 	bl	8000598 <__aeabi_f2d>
 8001864:	4603      	mov	r3, r0
 8001866:	460c      	mov	r4, r1
 8001868:	e9cd 3400 	strd	r3, r4, [sp]
 800186c:	462a      	mov	r2, r5
 800186e:	4633      	mov	r3, r6
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <_Z15TestEncoderZerov+0xfc>)
 8001872:	f00a f9e7 	bl	800bc44 <iprintf>
		return false;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <_Z15TestEncoderZerov+0xe4>
	}

	return true;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3734      	adds	r7, #52	; 0x34
 8001880:	46bd      	mov	sp, r7
 8001882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001884:	0800dbb4 	.word	0x0800dbb4
 8001888:	0800dbd4 	.word	0x0800dbd4
 800188c:	425c0000 	.word	0x425c0000
 8001890:	43988000 	.word	0x43988000
 8001894:	0800dc04 	.word	0x0800dc04
 8001898:	0800dc48 	.word	0x0800dc48
 800189c:	45610000 	.word	0x45610000

080018a0 <_Z16TestEncoderAnglev>:

bool TestEncoderAngle() {
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b08f      	sub	sp, #60	; 0x3c
 80018a4:	af02      	add	r7, sp, #8
	TEST_PRINT("Test encoder angle.\r\n");
 80018a6:	4839      	ldr	r0, [pc, #228]	; (800198c <_Z16TestEncoderAnglev+0xec>)
 80018a8:	f00a fa40 	bl	800bd2c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80018b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80018ba:	4638      	mov	r0, r7
 80018bc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4613      	mov	r3, r2
 80018c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018c8:	f7ff fb7e 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test positive wrap.\r\n");
 80018cc:	4830      	ldr	r0, [pc, #192]	; (8001990 <_Z16TestEncoderAnglev+0xf0>)
 80018ce:	f00a fa2d 	bl	800bd2c <puts>
	enc.set_angle(450.5);
 80018d2:	463b      	mov	r3, r7
 80018d4:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001994 <_Z16TestEncoderAnglev+0xf4>
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fd99 	bl	8001410 <_ZN7Encoder9set_angleEf>
	float angle = enc.get_angle();
 80018de:	463b      	mov	r3, r7
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fd7d 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 80018e6:	ed87 0a08 	vstr	s0, [r7, #32]
	float expect_angle = 450.5 - 360;
 80018ea:	4b2b      	ldr	r3, [pc, #172]	; (8001998 <_Z16TestEncoderAnglev+0xf8>)
 80018ec:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 80018ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80018f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f6:	eeb4 7a67 	vcmp.f32	s14, s15
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d012      	beq.n	8001926 <_Z16TestEncoderAnglev+0x86>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 8001900:	69f8      	ldr	r0, [r7, #28]
 8001902:	f7fe fe49 	bl	8000598 <__aeabi_f2d>
 8001906:	4605      	mov	r5, r0
 8001908:	460e      	mov	r6, r1
 800190a:	6a38      	ldr	r0, [r7, #32]
 800190c:	f7fe fe44 	bl	8000598 <__aeabi_f2d>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	e9cd 3400 	strd	r3, r4, [sp]
 8001918:	462a      	mov	r2, r5
 800191a:	4633      	mov	r3, r6
 800191c:	481f      	ldr	r0, [pc, #124]	; (800199c <_Z16TestEncoderAnglev+0xfc>)
 800191e:	f00a f991 	bl	800bc44 <iprintf>
		return false;
 8001922:	2300      	movs	r3, #0
 8001924:	e02d      	b.n	8001982 <_Z16TestEncoderAnglev+0xe2>
	}

	T_TEST_PRINT("Test negative wrap.\r\n");
 8001926:	481e      	ldr	r0, [pc, #120]	; (80019a0 <_Z16TestEncoderAnglev+0x100>)
 8001928:	f00a fa00 	bl	800bd2c <puts>
	enc.set_angle(-500.9);
 800192c:	463b      	mov	r3, r7
 800192e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80019a4 <_Z16TestEncoderAnglev+0x104>
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fd6c 	bl	8001410 <_ZN7Encoder9set_angleEf>
	angle = enc.get_angle();
 8001938:	463b      	mov	r3, r7
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fd50 	bl	80013e0 <_ZN7Encoder9get_angleEv>
 8001940:	ed87 0a08 	vstr	s0, [r7, #32]
	expect_angle = -500.9 + 2*360;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <_Z16TestEncoderAnglev+0x108>)
 8001946:	61fb      	str	r3, [r7, #28]
	if (angle != expect_angle) {
 8001948:	ed97 7a08 	vldr	s14, [r7, #32]
 800194c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001950:	eeb4 7a67 	vcmp.f32	s14, s15
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d012      	beq.n	8001980 <_Z16TestEncoderAnglev+0xe0>
		TT_FAIL_PRINT("Expected angle to be %f but got %f.\r\n", expect_angle, angle);
 800195a:	69f8      	ldr	r0, [r7, #28]
 800195c:	f7fe fe1c 	bl	8000598 <__aeabi_f2d>
 8001960:	4605      	mov	r5, r0
 8001962:	460e      	mov	r6, r1
 8001964:	6a38      	ldr	r0, [r7, #32]
 8001966:	f7fe fe17 	bl	8000598 <__aeabi_f2d>
 800196a:	4603      	mov	r3, r0
 800196c:	460c      	mov	r4, r1
 800196e:	e9cd 3400 	strd	r3, r4, [sp]
 8001972:	462a      	mov	r2, r5
 8001974:	4633      	mov	r3, r6
 8001976:	4809      	ldr	r0, [pc, #36]	; (800199c <_Z16TestEncoderAnglev+0xfc>)
 8001978:	f00a f964 	bl	800bc44 <iprintf>
		return false;
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <_Z16TestEncoderAnglev+0xe2>
	}

	return true;
 8001980:	2301      	movs	r3, #1
}
 8001982:	4618      	mov	r0, r3
 8001984:	3734      	adds	r7, #52	; 0x34
 8001986:	46bd      	mov	sp, r7
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	bf00      	nop
 800198c:	0800dc80 	.word	0x0800dc80
 8001990:	0800dca4 	.word	0x0800dca4
 8001994:	43e14000 	.word	0x43e14000
 8001998:	42b50000 	.word	0x42b50000
 800199c:	0800dc04 	.word	0x0800dc04
 80019a0:	0800dccc 	.word	0x0800dccc
 80019a4:	c3fa7333 	.word	0xc3fa7333
 80019a8:	435b199a 	.word	0x435b199a

080019ac <_Z17TestAS5048AParityv>:

bool TestAS5048AParity() {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI parity helper.\r\n");
 80019b2:	483d      	ldr	r0, [pc, #244]	; (8001aa8 <_Z17TestAS5048AParityv+0xfc>)
 80019b4:	f00a f9ba 	bl	800bd2c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_TypeDef * dummy_cs_port = NULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
	uint16_t dummy_cs_pin = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	83fb      	strh	r3, [r7, #30]
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 80019c4:	8bfa      	ldrh	r2, [r7, #30]
 80019c6:	4638      	mov	r0, r7
 80019c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4613      	mov	r3, r2
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019d4:	f7ff faf8 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test parity on 0x0.\r\n");
 80019d8:	4834      	ldr	r0, [pc, #208]	; (8001aac <_Z17TestAS5048AParityv+0x100>)
 80019da:	f00a f9a7 	bl	800bd2c <puts>
	uint8_t par = enc.CalcEvenParity_(0b0000000000000000);
 80019de:	463b      	mov	r3, r7
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fb30 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 80019e8:	4603      	mov	r3, r0
 80019ea:	777b      	strb	r3, [r7, #29]
	uint8_t expect_par = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 80019f0:	7f7a      	ldrb	r2, [r7, #29]
 80019f2:	7f3b      	ldrb	r3, [r7, #28]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d007      	beq.n	8001a08 <_Z17TestAS5048AParityv+0x5c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 80019f8:	7f3b      	ldrb	r3, [r7, #28]
 80019fa:	7f7a      	ldrb	r2, [r7, #29]
 80019fc:	4619      	mov	r1, r3
 80019fe:	482c      	ldr	r0, [pc, #176]	; (8001ab0 <_Z17TestAS5048AParityv+0x104>)
 8001a00:	f00a f920 	bl	800bc44 <iprintf>
		return false;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e04a      	b.n	8001a9e <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 0x1.\r\n");
 8001a08:	482a      	ldr	r0, [pc, #168]	; (8001ab4 <_Z17TestAS5048AParityv+0x108>)
 8001a0a:	f00a f98f 	bl	800bd2c <puts>
	par = enc.CalcEvenParity_(0b0000000000000001);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	2101      	movs	r1, #1
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fb18 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001a20:	7f7a      	ldrb	r2, [r7, #29]
 8001a22:	7f3b      	ldrb	r3, [r7, #28]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d007      	beq.n	8001a38 <_Z17TestAS5048AParityv+0x8c>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001a28:	7f3b      	ldrb	r3, [r7, #28]
 8001a2a:	7f7a      	ldrb	r2, [r7, #29]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4820      	ldr	r0, [pc, #128]	; (8001ab0 <_Z17TestAS5048AParityv+0x104>)
 8001a30:	f00a f908 	bl	800bc44 <iprintf>
		return false;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e032      	b.n	8001a9e <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on 15th bit is 1.\r\n");
 8001a38:	481f      	ldr	r0, [pc, #124]	; (8001ab8 <_Z17TestAS5048AParityv+0x10c>)
 8001a3a:	f00a f977 	bl	800bd2c <puts>
	par = enc.CalcEvenParity_(0b0100000000000000);
 8001a3e:	463b      	mov	r3, r7
 8001a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff faff 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	777b      	strb	r3, [r7, #29]
	expect_par = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001a52:	7f7a      	ldrb	r2, [r7, #29]
 8001a54:	7f3b      	ldrb	r3, [r7, #28]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d007      	beq.n	8001a6a <_Z17TestAS5048AParityv+0xbe>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001a5a:	7f3b      	ldrb	r3, [r7, #28]
 8001a5c:	7f7a      	ldrb	r2, [r7, #29]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <_Z17TestAS5048AParityv+0x104>)
 8001a62:	f00a f8ef 	bl	800bc44 <iprintf>
		return false;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e019      	b.n	8001a9e <_Z17TestAS5048AParityv+0xf2>
	}

	T_TEST_PRINT("Test parity on ignore 16th bit.\r\n");
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <_Z17TestAS5048AParityv+0x110>)
 8001a6c:	f00a f95e 	bl	800bd2c <puts>
	par = enc.CalcEvenParity_(0b1000000000000000);
 8001a70:	463b      	mov	r3, r7
 8001a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff fae6 	bl	8001048 <_ZN7AS5048A15CalcEvenParity_Et>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	777b      	strb	r3, [r7, #29]
	expect_par = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	773b      	strb	r3, [r7, #28]
	if (par != expect_par) {
 8001a84:	7f7a      	ldrb	r2, [r7, #29]
 8001a86:	7f3b      	ldrb	r3, [r7, #28]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d007      	beq.n	8001a9c <_Z17TestAS5048AParityv+0xf0>
		TT_FAIL_PRINT("Expected parity bit to be %d but got %d.\r\n", expect_par, par);
 8001a8c:	7f3b      	ldrb	r3, [r7, #28]
 8001a8e:	7f7a      	ldrb	r2, [r7, #29]
 8001a90:	4619      	mov	r1, r3
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <_Z17TestAS5048AParityv+0x104>)
 8001a94:	f00a f8d6 	bl	800bc44 <iprintf>
		return false;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <_Z17TestAS5048AParityv+0xf2>
	}

	return true;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800dcf4 	.word	0x0800dcf4
 8001aac:	0800dd24 	.word	0x0800dd24
 8001ab0:	0800dd4c 	.word	0x0800dd4c
 8001ab4:	0800dd94 	.word	0x0800dd94
 8001ab8:	0800ddbc 	.word	0x0800ddbc
 8001abc:	0800ddec 	.word	0x0800ddec

08001ac0 <_Z18TestAS5048APacketsv>:

bool TestAS5048APackets() {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af02      	add	r7, sp, #8
	TEST_PRINT("Test AS5048A SPI Packet Assemblers.\r\n");
 8001ac6:	486e      	ldr	r0, [pc, #440]	; (8001c80 <_Z18TestAS5048APacketsv+0x1c0>)
 8001ac8:	f00a f930 	bl	800bd2c <puts>
	SPI_HandleTypeDef * dummy_spi = NULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_TypeDef * dummy_cs_port = NULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t dummy_cs_pin = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
	AS5048A enc(dummy_spi, dummy_cs_port, dummy_cs_pin);
 8001ad8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001ada:	4638      	mov	r0, r7
 8001adc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ae8:	f7ff fa6e 	bl	8000fc8 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftm>

	T_TEST_PRINT("Test CreateCommandPacket (write).\r\n");
 8001aec:	4865      	ldr	r0, [pc, #404]	; (8001c84 <_Z18TestAS5048APacketsv+0x1c4>)
 8001aee:	f00a f91d 	bl	800bd2c <puts>
	uint16_t pack = enc.CreateCommandPacket_(0xBEEF, 1);
 8001af2:	463b      	mov	r3, r7
 8001af4:	2201      	movs	r2, #1
 8001af6:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fac9 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001b00:	4603      	mov	r3, r0
 8001b02:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t expect_pack = 0b1111111011101111;
 8001b04:	f64f 63ef 	movw	r3, #65263	; 0xfeef
 8001b08:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d007      	beq.n	8001b22 <_Z18TestAS5048APacketsv+0x62>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	485b      	ldr	r0, [pc, #364]	; (8001c88 <_Z18TestAS5048APacketsv+0x1c8>)
 8001b1a:	f00a f893 	bl	800bc44 <iprintf>
		return false;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e0a9      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateCommandPacket (read).\r\n");
 8001b22:	485a      	ldr	r0, [pc, #360]	; (8001c8c <_Z18TestAS5048APacketsv+0x1cc>)
 8001b24:	f00a f902 	bl	800bd2c <puts>
	pack = enc.CreateCommandPacket_(0xBEEF, 0);
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f64b 61ef 	movw	r1, #48879	; 0xbeef
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff faae 	bl	8001092 <_ZN7AS5048A20CreateCommandPacket_Eth>
 8001b36:	4603      	mov	r3, r0
 8001b38:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b0011111011101111;
 8001b3a:	f643 63ef 	movw	r3, #16111	; 0x3eef
 8001b3e:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001b40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d007      	beq.n	8001b58 <_Z18TestAS5048APacketsv+0x98>
		TT_FAIL_PRINT("Expected CommandPacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001b48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	484e      	ldr	r0, [pc, #312]	; (8001c88 <_Z18TestAS5048APacketsv+0x1c8>)
 8001b50:	f00a f878 	bl	800bc44 <iprintf>
		return false;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e08e      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test CreateWritePacket.\r\n");
 8001b58:	484d      	ldr	r0, [pc, #308]	; (8001c90 <_Z18TestAS5048APacketsv+0x1d0>)
 8001b5a:	f00a f8e7 	bl	800bd2c <puts>
	pack = enc.CreateWritePacket_(0xDEAD);
 8001b5e:	463b      	mov	r3, r7
 8001b60:	f64d 61ad 	movw	r1, #57005	; 0xdead
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fabd 	bl	80010e4 <_ZN7AS5048A18CreateWritePacket_Et>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	expect_pack = 0b1001111010101101;
 8001b6e:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8001b72:	847b      	strh	r3, [r7, #34]	; 0x22
	if (pack != expect_pack) {
 8001b74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d007      	beq.n	8001b8c <_Z18TestAS5048APacketsv+0xcc>
		TT_FAIL_PRINT("Expected WritePacket to be 0x%x but got 0x%x\r\n.", expect_pack, pack);
 8001b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4844      	ldr	r0, [pc, #272]	; (8001c94 <_Z18TestAS5048APacketsv+0x1d4>)
 8001b84:	f00a f85e 	bl	800bc44 <iprintf>
		return false;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e074      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (nominal).\r\n");
 8001b8c:	4842      	ldr	r0, [pc, #264]	; (8001c98 <_Z18TestAS5048APacketsv+0x1d8>)
 8001b8e:	f00a f8cd 	bl	800bd2c <puts>
	uint16_t received_pack = 0b1001111010101101;
 8001b92:	f649 63ad 	movw	r3, #40621	; 0x9ead
 8001b96:	843b      	strh	r3, [r7, #32]
	uint16_t data = enc.ParseReceivedPacket_(received_pack);
 8001b98:	8c3a      	ldrh	r2, [r7, #32]
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fabc 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	83fb      	strh	r3, [r7, #30]
	uint16_t expect_data = 0xDEAD & (0xFFFF >> 2);
 8001ba8:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001bac:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8001bae:	8bfa      	ldrh	r2, [r7, #30]
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d007      	beq.n	8001bc6 <_Z18TestAS5048APacketsv+0x106>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8001bb6:	8bbb      	ldrh	r3, [r7, #28]
 8001bb8:	8bfa      	ldrh	r2, [r7, #30]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4837      	ldr	r0, [pc, #220]	; (8001c9c <_Z18TestAS5048APacketsv+0x1dc>)
 8001bbe:	f00a f841 	bl	800bc44 <iprintf>
		return false;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e057      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity error).\r\n");
 8001bc6:	4836      	ldr	r0, [pc, #216]	; (8001ca0 <_Z18TestAS5048APacketsv+0x1e0>)
 8001bc8:	f00a f8b0 	bl	800bd2c <puts>
	received_pack = 0b0001111010101101;
 8001bcc:	f641 63ad 	movw	r3, #7853	; 0x1ead
 8001bd0:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8001bd2:	8c3a      	ldrh	r2, [r7, #32]
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fa9f 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001bde:	4603      	mov	r3, r0
 8001be0:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8001be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be6:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8001be8:	8bfa      	ldrh	r2, [r7, #30]
 8001bea:	8bbb      	ldrh	r3, [r7, #28]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d007      	beq.n	8001c00 <_Z18TestAS5048APacketsv+0x140>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8001bf0:	8bbb      	ldrh	r3, [r7, #28]
 8001bf2:	8bfa      	ldrh	r2, [r7, #30]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4829      	ldr	r0, [pc, #164]	; (8001c9c <_Z18TestAS5048APacketsv+0x1dc>)
 8001bf8:	f00a f824 	bl	800bc44 <iprintf>
		return false;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e03a      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (host err).\r\n");
 8001c00:	4828      	ldr	r0, [pc, #160]	; (8001ca4 <_Z18TestAS5048APacketsv+0x1e4>)
 8001c02:	f00a f893 	bl	800bd2c <puts>
	received_pack = 0b0101111010101101;
 8001c06:	f645 63ad 	movw	r3, #24237	; 0x5ead
 8001c0a:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8001c0c:	8c3a      	ldrh	r2, [r7, #32]
 8001c0e:	463b      	mov	r3, r7
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fa82 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8001c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c20:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8001c22:	8bfa      	ldrh	r2, [r7, #30]
 8001c24:	8bbb      	ldrh	r3, [r7, #28]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d007      	beq.n	8001c3a <_Z18TestAS5048APacketsv+0x17a>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	8bfa      	ldrh	r2, [r7, #30]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	481a      	ldr	r0, [pc, #104]	; (8001c9c <_Z18TestAS5048APacketsv+0x1dc>)
 8001c32:	f00a f807 	bl	800bc44 <iprintf>
		return false;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e01d      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	T_TEST_PRINT("Test ParseReceivedPacket (parity and host err).\r\n");
 8001c3a:	481b      	ldr	r0, [pc, #108]	; (8001ca8 <_Z18TestAS5048APacketsv+0x1e8>)
 8001c3c:	f00a f876 	bl	800bd2c <puts>
	received_pack = 0b1101111010101101;
 8001c40:	f64d 63ad 	movw	r3, #57005	; 0xdead
 8001c44:	843b      	strh	r3, [r7, #32]
	data = enc.ParseReceivedPacket_(received_pack);
 8001c46:	8c3a      	ldrh	r2, [r7, #32]
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fa65 	bl	800111c <_ZN7AS5048A20ParseReceivedPacket_Et>
 8001c52:	4603      	mov	r3, r0
 8001c54:	83fb      	strh	r3, [r7, #30]
	expect_data = 0xFFFF; // PARSE_ERR
 8001c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5a:	83bb      	strh	r3, [r7, #28]
	if (data != expect_data) {
 8001c5c:	8bfa      	ldrh	r2, [r7, #30]
 8001c5e:	8bbb      	ldrh	r3, [r7, #28]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d007      	beq.n	8001c74 <_Z18TestAS5048APacketsv+0x1b4>
		TT_FAIL_PRINT("Expected data to be 0x%x but got 0x%x.\r\n", expect_data, data);
 8001c64:	8bbb      	ldrh	r3, [r7, #28]
 8001c66:	8bfa      	ldrh	r2, [r7, #30]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480c      	ldr	r0, [pc, #48]	; (8001c9c <_Z18TestAS5048APacketsv+0x1dc>)
 8001c6c:	f009 ffea 	bl	800bc44 <iprintf>
		return false;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <_Z18TestAS5048APacketsv+0x1b6>
	}

	return true;
 8001c74:	2301      	movs	r3, #1
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3730      	adds	r7, #48	; 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0800de20 	.word	0x0800de20
 8001c84:	0800de54 	.word	0x0800de54
 8001c88:	0800de88 	.word	0x0800de88
 8001c8c:	0800ded8 	.word	0x0800ded8
 8001c90:	0800df0c 	.word	0x0800df0c
 8001c94:	0800df38 	.word	0x0800df38
 8001c98:	0800df84 	.word	0x0800df84
 8001c9c:	0800dfbc 	.word	0x0800dfbc
 8001ca0:	0800e000 	.word	0x0800e000
 8001ca4:	0800e03c 	.word	0x0800e03c
 8001ca8:	0800e074 	.word	0x0800e074

08001cac <_Z14TestEncoderAllv>:

	return false;
}
#endif

void TestEncoderAll() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
	bool enc_passed = true;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	71fb      	strb	r3, [r7, #7]
	L_PRINT("Test Encoder Class");
 8001cb6:	492c      	ldr	r1, [pc, #176]	; (8001d68 <_Z14TestEncoderAllv+0xbc>)
 8001cb8:	482c      	ldr	r0, [pc, #176]	; (8001d6c <_Z14TestEncoderAllv+0xc0>)
 8001cba:	f009 ffc3 	bl	800bc44 <iprintf>
	enc_passed &= TestEncoderCreate();
 8001cbe:	f7ff fd35 	bl	800172c <_Z17TestEncoderCreatev>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderZero();
 8001cd4:	f7ff fd60 	bl	8001798 <_Z15TestEncoderZerov>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	enc_passed &= TestEncoderAngle();
 8001cea:	f7ff fdd9 	bl	80018a0 <_Z16TestEncoderAnglev>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf14      	ite	ne
 8001cfa:	2301      	movne	r3, #1
 8001cfc:	2300      	moveq	r3, #0
 8001cfe:	71fb      	strb	r3, [r7, #7]
	if (enc_passed) {
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <_Z14TestEncoderAllv+0x62>
		PASS_PRINT("Encoder Class\r\n");
 8001d06:	481a      	ldr	r0, [pc, #104]	; (8001d70 <_Z14TestEncoderAllv+0xc4>)
 8001d08:	f00a f810 	bl	800bd2c <puts>
 8001d0c:	e002      	b.n	8001d14 <_Z14TestEncoderAllv+0x68>
	} else {
		FAIL_PRINT("Encoder Class\r\n");
 8001d0e:	4819      	ldr	r0, [pc, #100]	; (8001d74 <_Z14TestEncoderAllv+0xc8>)
 8001d10:	f00a f80c 	bl	800bd2c <puts>
	}

	L_PRINT("Test AS5048A Class");
 8001d14:	4918      	ldr	r1, [pc, #96]	; (8001d78 <_Z14TestEncoderAllv+0xcc>)
 8001d16:	4815      	ldr	r0, [pc, #84]	; (8001d6c <_Z14TestEncoderAllv+0xc0>)
 8001d18:	f009 ff94 	bl	800bc44 <iprintf>
	bool as5048a_passed = true;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048AParity();
 8001d20:	f7ff fe44 	bl	80019ac <_Z17TestAS5048AParityv>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	71bb      	strb	r3, [r7, #6]
	as5048a_passed &= TestAS5048APackets();
 8001d36:	f7ff fec3 	bl	8001ac0 <_Z18TestAS5048APacketsv>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	bf14      	ite	ne
 8001d46:	2301      	movne	r3, #1
 8001d48:	2300      	moveq	r3, #0
 8001d4a:	71bb      	strb	r3, [r7, #6]
	if (as5048a_passed) {
 8001d4c:	79bb      	ldrb	r3, [r7, #6]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <_Z14TestEncoderAllv+0xae>
		PASS_PRINT("AS5048A Class\r\n");
 8001d52:	480a      	ldr	r0, [pc, #40]	; (8001d7c <_Z14TestEncoderAllv+0xd0>)
 8001d54:	f009 ffea 	bl	800bd2c <puts>
		TestEncoderSPI();
		// restart test if comms fail
	}
#endif

}
 8001d58:	e002      	b.n	8001d60 <_Z14TestEncoderAllv+0xb4>
		FAIL_PRINT("AS5048A Class\r\n");
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <_Z14TestEncoderAllv+0xd4>)
 8001d5c:	f009 ffe6 	bl	800bd2c <puts>
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	0800e0b8 	.word	0x0800e0b8
 8001d6c:	0800e0cc 	.word	0x0800e0cc
 8001d70:	0800e0e0 	.word	0x0800e0e0
 8001d74:	0800e108 	.word	0x0800e108
 8001d78:	0800e130 	.word	0x0800e130
 8001d7c:	0800e144 	.word	0x0800e144
 8001d80:	0800e16c 	.word	0x0800e16c

08001d84 <_ZN10HalfBridgeC1Ev>:
		HIGH_SIDE_ON, // lock high side of half-bridge ON, low side OFF
		CURR_LIMIT, // control current through half-bridge with PWM
		FAULT // overcurrent or other event has occurred, half-bridge disabled
	};

	HalfBridge() {} // abstract class due to pure virtual functions: constructor does nothing
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <_ZN10HalfBridgeC1Ev+0x30>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	809a      	strh	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	80da      	strh	r2, [r3, #6]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	721a      	strb	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	0800e93c 	.word	0x0800e93c

08001db8 <_ZN9STSPIN830C1EP12GPIO_TypeDeftS1_tRKt>:
	 * @param[in] in_pin 					GPIO pin for the INx pin.
	 * @param[in] curr_sense_adc_voltage	Pointer to the ADC current sense value, to be updated continuously over DMA.
	 * 										Passed as a const reference; will not be changed by the STSPIN830. Is a count
	 * 										out of the full resolution of the ADC.
	 */
	STSPIN830(
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	80fb      	strh	r3, [r7, #6]
			const uint16_t& curr_sense_adc_voltage)
		: en_port_(en_port)
		, en_pin_(en_pin)
		, in_port_(in_port)
		, in_pin_(in_pin)
		, curr_sense_adc_voltage_(curr_sense_adc_voltage) {};
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffda 	bl	8001d84 <_ZN10HalfBridgeC1Ev>
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <_ZN9STSPIN830C1EP12GPIO_TypeDeftS1_tRKt+0x60>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	60da      	str	r2, [r3, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	88fa      	ldrh	r2, [r7, #6]
 8001de0:	821a      	strh	r2, [r3, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8b3a      	ldrh	r2, [r7, #24]
 8001dec:	831a      	strh	r2, [r3, #24]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	769a      	strb	r2, [r3, #26]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	76da      	strb	r2, [r3, #27]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	841a      	strh	r2, [r3, #32]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0c:	845a      	strh	r2, [r3, #34]	; 0x22
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	0800e908 	.word	0x0800e908

08001e1c <_Z20TestHalfBridgeCreatev>:

/**
 * Test Setup Instructions
 */

bool TestHalfBridgeCreate() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08e      	sub	sp, #56	; 0x38
 8001e20:	af02      	add	r7, sp, #8
	GPIO_TypeDef * dummy_gpio_port = NULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t dummy_gpio_pin = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	857b      	strh	r3, [r7, #42]	; 0x2a
	STSPIN830 half_bridge(
			dummy_gpio_port,
			dummy_gpio_pin,
			dummy_gpio_port,
			dummy_gpio_pin,
			adc_buf[0]);
 8001e2a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001e2c:	1d38      	adds	r0, r7, #4
 8001e2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001e3c:	f7ff ffbc 	bl	8001db8 <_ZN9STSPIN830C1EP12GPIO_TypeDeftS1_tRKt>

	if (half_bridge.get_op_mode() != HalfBridge::OFF) {
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff faf8 	bl	8001438 <_ZN10HalfBridge11get_op_modeEv>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bf14      	ite	ne
 8001e4e:	2301      	movne	r3, #1
 8001e50:	2300      	moveq	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <_Z20TestHalfBridgeCreatev+0x46>
		FAIL_PRINT("HalfBridge not initialized in OFF op mode.\r\n");
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <_Z20TestHalfBridgeCreatev+0x50>)
 8001e5a:	f009 ff67 	bl	800bd2c <puts>
		return false;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e000      	b.n	8001e64 <_Z20TestHalfBridgeCreatev+0x48>
	}
	return true;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3730      	adds	r7, #48	; 0x30
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	0800e194 	.word	0x0800e194

08001e70 <_Z17TestHalfBridgeAllv>:


void TestHalfBridgeAll() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
	L_PRINT("Test HalfBridge Class");
 8001e76:	490f      	ldr	r1, [pc, #60]	; (8001eb4 <_Z17TestHalfBridgeAllv+0x44>)
 8001e78:	480f      	ldr	r0, [pc, #60]	; (8001eb8 <_Z17TestHalfBridgeAllv+0x48>)
 8001e7a:	f009 fee3 	bl	800bc44 <iprintf>
	bool hb_passed = true;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
	hb_passed &= TestHalfBridgeCreate();
 8001e82:	f7ff ffcb 	bl	8001e1c <_Z20TestHalfBridgeCreatev>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	71fb      	strb	r3, [r7, #7]
	if (hb_passed) {
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <_Z17TestHalfBridgeAllv+0x36>
		PASS_PRINT("HalfBridge Class\r\n");
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <_Z17TestHalfBridgeAllv+0x4c>)
 8001ea0:	f009 ff44 	bl	800bd2c <puts>
	} else {
		FAIL_PRINT("HalfBridge Class\r\n");
	}

}
 8001ea4:	e002      	b.n	8001eac <_Z17TestHalfBridgeAllv+0x3c>
		FAIL_PRINT("HalfBridge Class\r\n");
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <_Z17TestHalfBridgeAllv+0x50>)
 8001ea8:	f009 ff40 	bl	800bd2c <puts>
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	0800e1d8 	.word	0x0800e1d8
 8001eb8:	0800e1f0 	.word	0x0800e1f0
 8001ebc:	0800e204 	.word	0x0800e204
 8001ec0:	0800e230 	.word	0x0800e230

08001ec4 <_Z23TestPIDControllerCreatev>:
#include "test_pid_controller.hh"

#define private public
#include "pid_controller.hh"

bool TestPIDControllerCreate() {
 8001ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec6:	b0f5      	sub	sp, #468	; 0x1d4
 8001ec8:	af02      	add	r7, sp, #8
	TEST_PRINT("Create PID Controller.\r\n");
 8001eca:	486a      	ldr	r0, [pc, #424]	; (8002074 <_Z23TestPIDControllerCreatev+0x1b0>)
 8001ecc:	f009 ff2e 	bl	800bd2c <puts>

	T_TEST_PRINT("Set gains with PID values.\r\n");
 8001ed0:	4869      	ldr	r0, [pc, #420]	; (8002078 <_Z23TestPIDControllerCreatev+0x1b4>)
 8001ed2:	f009 ff2b 	bl	800bd2c <puts>
	float k_p = 1.2;
 8001ed6:	4b69      	ldr	r3, [pc, #420]	; (800207c <_Z23TestPIDControllerCreatev+0x1b8>)
 8001ed8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
	float k_i = 3.4;
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <_Z23TestPIDControllerCreatev+0x1bc>)
 8001ede:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
	float k_d = 5.6;
 8001ee2:	4b68      	ldr	r3, [pc, #416]	; (8002084 <_Z23TestPIDControllerCreatev+0x1c0>)
 8001ee4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	float state = 2.1;
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <_Z23TestPIDControllerCreatev+0x1c4>)
 8001eea:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	PIDController pid(k_p, k_i, k_d, state);
 8001eee:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	ed97 1a6f 	vldr	s2, [r7, #444]	; 0x1bc
 8001efa:	edd7 0a70 	vldr	s1, [r7, #448]	; 0x1c0
 8001efe:	ed97 0a71 	vldr	s0, [r7, #452]	; 0x1c4
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fae8 	bl	80014d8 <_ZN13PIDControllerC1EfffRKf>

	if (pid.k_p != k_p) {
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	edd3 7a68 	vldr	s15, [r3, #416]	; 0x1a0
 8001f0e:	ed97 7a71 	vldr	s14, [r7, #452]	; 0x1c4
 8001f12:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	d016      	beq.n	8001f4a <_Z23TestPIDControllerCreatev+0x86>
		T_FAIL_PRINT("Incorrect k_p, constructed with %f but got %f.\r\n", k_p, pid.k_p);
 8001f1c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8001f20:	f7fe fb3a 	bl	8000598 <__aeabi_f2d>
 8001f24:	4605      	mov	r5, r0
 8001f26:	460e      	mov	r6, r1
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb32 	bl	8000598 <__aeabi_f2d>
 8001f34:	4603      	mov	r3, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	e9cd 3400 	strd	r3, r4, [sp]
 8001f3c:	462a      	mov	r2, r5
 8001f3e:	4633      	mov	r3, r6
 8001f40:	4852      	ldr	r0, [pc, #328]	; (800208c <_Z23TestPIDControllerCreatev+0x1c8>)
 8001f42:	f009 fe7f 	bl	800bc44 <iprintf>
		return false;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e08f      	b.n	800206a <_Z23TestPIDControllerCreatev+0x1a6>
	}
	if (pid.k_i != k_i) {
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	edd3 7a69 	vldr	s15, [r3, #420]	; 0x1a4
 8001f50:	ed97 7a70 	vldr	s14, [r7, #448]	; 0x1c0
 8001f54:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	d016      	beq.n	8001f8c <_Z23TestPIDControllerCreatev+0xc8>
		T_FAIL_PRINT("Incorrect k_i, constructed with %f but got %f.\r\n", k_i, pid.k_i);
 8001f5e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8001f62:	f7fe fb19 	bl	8000598 <__aeabi_f2d>
 8001f66:	4605      	mov	r5, r0
 8001f68:	460e      	mov	r6, r1
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fb11 	bl	8000598 <__aeabi_f2d>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	e9cd 3400 	strd	r3, r4, [sp]
 8001f7e:	462a      	mov	r2, r5
 8001f80:	4633      	mov	r3, r6
 8001f82:	4843      	ldr	r0, [pc, #268]	; (8002090 <_Z23TestPIDControllerCreatev+0x1cc>)
 8001f84:	f009 fe5e 	bl	800bc44 <iprintf>
		return false;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e06e      	b.n	800206a <_Z23TestPIDControllerCreatev+0x1a6>
	}
	if (pid.k_d != k_d) {
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	edd3 7a6a 	vldr	s15, [r3, #424]	; 0x1a8
 8001f92:	ed97 7a6f 	vldr	s14, [r7, #444]	; 0x1bc
 8001f96:	eeb4 7a67 	vcmp.f32	s14, s15
 8001f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9e:	d016      	beq.n	8001fce <_Z23TestPIDControllerCreatev+0x10a>
		T_FAIL_PRINT("Incorrect k_d, constructed with %f but got %f.\r\n", k_d, pid.k_d);
 8001fa0:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8001fa4:	f7fe faf8 	bl	8000598 <__aeabi_f2d>
 8001fa8:	4605      	mov	r5, r0
 8001faa:	460e      	mov	r6, r1
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe faf0 	bl	8000598 <__aeabi_f2d>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	460c      	mov	r4, r1
 8001fbc:	e9cd 3400 	strd	r3, r4, [sp]
 8001fc0:	462a      	mov	r2, r5
 8001fc2:	4633      	mov	r3, r6
 8001fc4:	4833      	ldr	r0, [pc, #204]	; (8002094 <_Z23TestPIDControllerCreatev+0x1d0>)
 8001fc6:	f009 fe3d 	bl	800bc44 <iprintf>
		return false;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e04d      	b.n	800206a <_Z23TestPIDControllerCreatev+0x1a6>
	}

	if (pid.state != state) {
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001fd4:	ed93 7a00 	vldr	s14, [r3]
 8001fd8:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 8001fdc:	eeb4 7a67 	vcmp.f32	s14, s15
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d018      	beq.n	8002018 <_Z23TestPIDControllerCreatev+0x154>
		T_FAIL_PRINT("Incorrect state, constructed with %f but got %f.\r\n", state, pid.state);
 8001fe6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fad4 	bl	8000598 <__aeabi_f2d>
 8001ff0:	4605      	mov	r5, r0
 8001ff2:	460e      	mov	r6, r1
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe facb 	bl	8000598 <__aeabi_f2d>
 8002002:	4603      	mov	r3, r0
 8002004:	460c      	mov	r4, r1
 8002006:	e9cd 3400 	strd	r3, r4, [sp]
 800200a:	462a      	mov	r2, r5
 800200c:	4633      	mov	r3, r6
 800200e:	4822      	ldr	r0, [pc, #136]	; (8002098 <_Z23TestPIDControllerCreatev+0x1d4>)
 8002010:	f009 fe18 	bl	800bc44 <iprintf>
		return false;
 8002014:	2300      	movs	r3, #0
 8002016:	e028      	b.n	800206a <_Z23TestPIDControllerCreatev+0x1a6>
	}
	state = 345.67;
 8002018:	4b20      	ldr	r3, [pc, #128]	; (800209c <_Z23TestPIDControllerCreatev+0x1d8>)
 800201a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
	if (pid.state != state) {
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	edd7 7a6e 	vldr	s15, [r7, #440]	; 0x1b8
 800202c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	d018      	beq.n	8002068 <_Z23TestPIDControllerCreatev+0x1a4>
		T_FAIL_PRINT("State does not track, expected %f but got %f.\r\n", state, pid.state);
 8002036:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe faac 	bl	8000598 <__aeabi_f2d>
 8002040:	4605      	mov	r5, r0
 8002042:	460e      	mov	r6, r1
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	e9cd 3400 	strd	r3, r4, [sp]
 800205a:	462a      	mov	r2, r5
 800205c:	4633      	mov	r3, r6
 800205e:	4810      	ldr	r0, [pc, #64]	; (80020a0 <_Z23TestPIDControllerCreatev+0x1dc>)
 8002060:	f009 fdf0 	bl	800bc44 <iprintf>
		return false;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <_Z23TestPIDControllerCreatev+0x1a6>
	}

	return true;
 8002068:	2301      	movs	r3, #1
}
 800206a:	4618      	mov	r0, r3
 800206c:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8002070:	46bd      	mov	sp, r7
 8002072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002074:	0800e25c 	.word	0x0800e25c
 8002078:	0800e284 	.word	0x0800e284
 800207c:	3f99999a 	.word	0x3f99999a
 8002080:	4059999a 	.word	0x4059999a
 8002084:	40b33333 	.word	0x40b33333
 8002088:	40066666 	.word	0x40066666
 800208c:	0800e2b4 	.word	0x0800e2b4
 8002090:	0800e300 	.word	0x0800e300
 8002094:	0800e34c 	.word	0x0800e34c
 8002098:	0800e398 	.word	0x0800e398
 800209c:	43acd5c3 	.word	0x43acd5c3
 80020a0:	0800e3e4 	.word	0x0800e3e4
 80020a4:	00000000 	.word	0x00000000

080020a8 <_Z25TestPIDControllerResponsev>:

bool TestPIDControllerResponse() {
 80020a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020ac:	b0f3      	sub	sp, #460	; 0x1cc
 80020ae:	af02      	add	r7, sp, #8
	TEST_PRINT("Test PID Controller Response.\r\n");
 80020b0:	48bb      	ldr	r0, [pc, #748]	; (80023a0 <_Z25TestPIDControllerResponsev+0x2f8>)
 80020b2:	f009 fe3b 	bl	800bd2c <puts>
	T_TEST_PRINT("Test default response afer initialization.\r\n");
 80020b6:	48bb      	ldr	r0, [pc, #748]	; (80023a4 <_Z25TestPIDControllerResponsev+0x2fc>)
 80020b8:	f009 fe38 	bl	800bd2c <puts>
	float state = 0;
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	PIDController pid = PIDController(0, 0, 0, state);
 80020c4:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80020c8:	463b      	mov	r3, r7
 80020ca:	4611      	mov	r1, r2
 80020cc:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 80023a8 <_Z25TestPIDControllerResponsev+0x300>
 80020d0:	eddf 0ab5 	vldr	s1, [pc, #724]	; 80023a8 <_Z25TestPIDControllerResponsev+0x300>
 80020d4:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80023a8 <_Z25TestPIDControllerResponsev+0x300>
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f9fd 	bl	80014d8 <_ZN13PIDControllerC1EfffRKf>
	if (pid.get_output() != 0) {
 80020de:	463b      	mov	r3, r7
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fadb 	bl	800169c <_ZN13PIDController10get_outputEv>
 80020e6:	eef0 7a40 	vmov.f32	s15, s0
 80020ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d015      	beq.n	800212a <_Z25TestPIDControllerResponsev+0x82>
		T_FAIL_PRINT("Nonzero output after creation, expected %f but got %f.\r\n", 0.0, pid.get_output());
 80020fe:	463b      	mov	r3, r7
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff facb 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002106:	ee10 3a10 	vmov	r3, s0
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa44 	bl	8000598 <__aeabi_f2d>
 8002110:	4603      	mov	r3, r0
 8002112:	460c      	mov	r4, r1
 8002114:	e9cd 3400 	strd	r3, r4, [sp]
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	48a2      	ldr	r0, [pc, #648]	; (80023ac <_Z25TestPIDControllerResponsev+0x304>)
 8002122:	f009 fd8f 	bl	800bc44 <iprintf>
		return false;
 8002126:	2300      	movs	r3, #0
 8002128:	e230      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_p Test #1.\r\n");
 800212a:	48a1      	ldr	r0, [pc, #644]	; (80023b0 <_Z25TestPIDControllerResponsev+0x308>)
 800212c:	f009 fdfe 	bl	800bd2c <puts>
	state = 1.0;
 8002130:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002134:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 2.0;
 8002138:	463b      	mov	r3, r7
 800213a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800213e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.k_p = 5.0;
 8002142:	463b      	mov	r3, r7
 8002144:	4a9b      	ldr	r2, [pc, #620]	; (80023b4 <_Z25TestPIDControllerResponsev+0x30c>)
 8002146:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.Update(10.5);
 800214a:	463b      	mov	r3, r7
 800214c:	eeb2 0a05 	vmov.f32	s0, #37	; 0x41280000  10.5
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff f9ff 	bl	8001554 <_ZN13PIDController6UpdateEf>
	float expect_output = (1.0 - 2.0) * 5.0;
 8002156:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <_Z25TestPIDControllerResponsev+0x310>)
 8002158:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 800215c:	463b      	mov	r3, r7
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fa9c 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002164:	eeb0 7a40 	vmov.f32	s14, s0
 8002168:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 800216c:	eef4 7a47 	vcmp.f32	s15, s14
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <_Z25TestPIDControllerResponsev+0x10c>
		T_FAIL_PRINT("Failed k_p test #1, expected output %f but got %f.\r\n",
 8002180:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002184:	f7fe fa08 	bl	8000598 <__aeabi_f2d>
 8002188:	4605      	mov	r5, r0
 800218a:	460e      	mov	r6, r1
 800218c:	463b      	mov	r3, r7
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff fa84 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002194:	ee10 3a10 	vmov	r3, s0
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f9fd 	bl	8000598 <__aeabi_f2d>
 800219e:	4603      	mov	r3, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	e9cd 3400 	strd	r3, r4, [sp]
 80021a6:	462a      	mov	r2, r5
 80021a8:	4633      	mov	r3, r6
 80021aa:	4884      	ldr	r0, [pc, #528]	; (80023bc <_Z25TestPIDControllerResponsev+0x314>)
 80021ac:	f009 fd4a 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e1eb      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #1.\r\n");
 80021b4:	4882      	ldr	r0, [pc, #520]	; (80023c0 <_Z25TestPIDControllerResponsev+0x318>)
 80021b6:	f009 fdb9 	bl	800bd2c <puts>
	pid.k_p = 0;
 80021ba:	463b      	mov	r3, r7
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.k_i = 3;
 80021c4:	463b      	mov	r3, r7
 80021c6:	4a7f      	ldr	r2, [pc, #508]	; (80023c4 <_Z25TestPIDControllerResponsev+0x31c>)
 80021c8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	pid.target = 98.5;
 80021cc:	463b      	mov	r3, r7
 80021ce:	4a7e      	ldr	r2, [pc, #504]	; (80023c8 <_Z25TestPIDControllerResponsev+0x320>)
 80021d0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	state = 70;
 80021d4:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <_Z25TestPIDControllerResponsev+0x324>)
 80021d6:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.Update(10.7);
 80021da:	463b      	mov	r3, r7
 80021dc:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80023d0 <_Z25TestPIDControllerResponsev+0x328>
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff f9b7 	bl	8001554 <_ZN13PIDController6UpdateEf>
	expect_output = (1.0-2.0) * 10.7 * 3;
 80021e6:	4b7b      	ldr	r3, [pc, #492]	; (80023d4 <_Z25TestPIDControllerResponsev+0x32c>)
 80021e8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 80021ec:	463b      	mov	r3, r7
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fa54 	bl	800169c <_ZN13PIDController10get_outputEv>
 80021f4:	eeb0 7a40 	vmov.f32	s14, s0
 80021f8:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80021fc:	eef4 7a47 	vcmp.f32	s15, s14
 8002200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d019      	beq.n	8002244 <_Z25TestPIDControllerResponsev+0x19c>
		T_FAIL_PRINT("Failed k_i test #1, expected output %f but got %f.\r\n",
 8002210:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002214:	f7fe f9c0 	bl	8000598 <__aeabi_f2d>
 8002218:	4605      	mov	r5, r0
 800221a:	460e      	mov	r6, r1
 800221c:	463b      	mov	r3, r7
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fa3c 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002224:	ee10 3a10 	vmov	r3, s0
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f9b5 	bl	8000598 <__aeabi_f2d>
 800222e:	4603      	mov	r3, r0
 8002230:	460c      	mov	r4, r1
 8002232:	e9cd 3400 	strd	r3, r4, [sp]
 8002236:	462a      	mov	r2, r5
 8002238:	4633      	mov	r3, r6
 800223a:	4867      	ldr	r0, [pc, #412]	; (80023d8 <_Z25TestPIDControllerResponsev+0x330>)
 800223c:	f009 fd02 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002240:	2300      	movs	r3, #0
 8002242:	e1a3      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #2.\r\n");
 8002244:	4865      	ldr	r0, [pc, #404]	; (80023dc <_Z25TestPIDControllerResponsev+0x334>)
 8002246:	f009 fd71 	bl	800bd2c <puts>
	pid.Update(11.9);
 800224a:	463b      	mov	r3, r7
 800224c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80023e0 <_Z25TestPIDControllerResponsev+0x338>
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff f97f 	bl	8001554 <_ZN13PIDController6UpdateEf>
	expect_output += (70-98.5) * 11.9 * 3;
 8002256:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800225a:	f7fe f99d 	bl	8000598 <__aeabi_f2d>
 800225e:	a34c      	add	r3, pc, #304	; (adr r3, 8002390 <_Z25TestPIDControllerResponsev+0x2e8>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f838 	bl	80002d8 <__aeabi_dsub>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4618      	mov	r0, r3
 800226e:	4621      	mov	r1, r4
 8002270:	f7fe fcc2 	bl	8000bf8 <__aeabi_d2f>
 8002274:	4603      	mov	r3, r0
 8002276:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 800227a:	463b      	mov	r3, r7
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fa0d 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002282:	eeb0 7a40 	vmov.f32	s14, s0
 8002286:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 800228a:	eef4 7a47 	vcmp.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d019      	beq.n	80022d2 <_Z25TestPIDControllerResponsev+0x22a>
		T_FAIL_PRINT("Failed k_i test #2, expected output %f but got %f.\r\n",
 800229e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80022a2:	f7fe f979 	bl	8000598 <__aeabi_f2d>
 80022a6:	4605      	mov	r5, r0
 80022a8:	460e      	mov	r6, r1
 80022aa:	463b      	mov	r3, r7
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f9f5 	bl	800169c <_ZN13PIDController10get_outputEv>
 80022b2:	ee10 3a10 	vmov	r3, s0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe f96e 	bl	8000598 <__aeabi_f2d>
 80022bc:	4603      	mov	r3, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	e9cd 3400 	strd	r3, r4, [sp]
 80022c4:	462a      	mov	r2, r5
 80022c6:	4633      	mov	r3, r6
 80022c8:	4846      	ldr	r0, [pc, #280]	; (80023e4 <_Z25TestPIDControllerResponsev+0x33c>)
 80022ca:	f009 fcbb 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 80022ce:	2300      	movs	r3, #0
 80022d0:	e15c      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_i Test #3 (overflow test).\r\n");
 80022d2:	4845      	ldr	r0, [pc, #276]	; (80023e8 <_Z25TestPIDControllerResponsev+0x340>)
 80022d4:	f009 fd2a 	bl	800bd2c <puts>
	for (uint16_t i = 0; i < 2*pid.error_mem_depth_; i++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 80022de:	f8b7 21ba 	ldrh.w	r2, [r7, #442]	; 0x1ba
 80022e2:	463b      	mov	r3, r7
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f280 8083 	bge.w	80023f4 <_Z25TestPIDControllerResponsev+0x34c>
		pid.Update(12.1);
 80022ee:	463b      	mov	r3, r7
 80022f0:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80023ec <_Z25TestPIDControllerResponsev+0x344>
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff f92d 	bl	8001554 <_ZN13PIDController6UpdateEf>
		expect_output += (70-98.5) * 12.1 * 3;
 80022fa:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80022fe:	f7fe f94b 	bl	8000598 <__aeabi_f2d>
 8002302:	a325      	add	r3, pc, #148	; (adr r3, 8002398 <_Z25TestPIDControllerResponsev+0x2f0>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fd ffe6 	bl	80002d8 <__aeabi_dsub>
 800230c:	4603      	mov	r3, r0
 800230e:	460c      	mov	r4, r1
 8002310:	4618      	mov	r0, r3
 8002312:	4621      	mov	r1, r4
 8002314:	f7fe fc70 	bl	8000bf8 <__aeabi_d2f>
 8002318:	4603      	mov	r3, r0
 800231a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		if (!CheckClose(pid.get_output(), expect_output, (float)0.5)) {
 800231e:	463b      	mov	r3, r7
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f9bb 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002326:	eef0 7a40 	vmov.f32	s15, s0
 800232a:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800232e:	edd7 0a6f 	vldr	s1, [r7, #444]	; 0x1bc
 8002332:	eeb0 0a67 	vmov.f32	s0, s15
 8002336:	f000 f979 	bl	800262c <_Z10CheckCloseIfEbT_S0_S0_>
 800233a:	4603      	mov	r3, r0
 800233c:	f083 0301 	eor.w	r3, r3, #1
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01c      	beq.n	8002380 <_Z25TestPIDControllerResponsev+0x2d8>
			T_FAIL_PRINT("Failed overflow test on iteration %d, expected output %f but got %f.\r\n",
 8002346:	f8b7 51ba 	ldrh.w	r5, [r7, #442]	; 0x1ba
 800234a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800234e:	f7fe f923 	bl	8000598 <__aeabi_f2d>
 8002352:	4680      	mov	r8, r0
 8002354:	4689      	mov	r9, r1
 8002356:	463b      	mov	r3, r7
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f99f 	bl	800169c <_ZN13PIDController10get_outputEv>
 800235e:	ee10 3a10 	vmov	r3, s0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f918 	bl	8000598 <__aeabi_f2d>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	e9cd 3400 	strd	r3, r4, [sp]
 8002370:	4642      	mov	r2, r8
 8002372:	464b      	mov	r3, r9
 8002374:	4629      	mov	r1, r5
 8002376:	481e      	ldr	r0, [pc, #120]	; (80023f0 <_Z25TestPIDControllerResponsev+0x348>)
 8002378:	f009 fc64 	bl	800bc44 <iprintf>
					i, expect_output, pid.get_output());
			return false;
 800237c:	2300      	movs	r3, #0
 800237e:	e105      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	for (uint16_t i = 0; i < 2*pid.error_mem_depth_; i++) {
 8002380:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 8002384:	3301      	adds	r3, #1
 8002386:	f8a7 31ba 	strh.w	r3, [r7, #442]	; 0x1ba
 800238a:	e7a8      	b.n	80022de <_Z25TestPIDControllerResponsev+0x236>
 800238c:	f3af 8000 	nop.w
 8002390:	9999999a 	.word	0x9999999a
 8002394:	408fcb99 	.word	0x408fcb99
 8002398:	33333333 	.word	0x33333333
 800239c:	40902a33 	.word	0x40902a33
 80023a0:	0800e430 	.word	0x0800e430
 80023a4:	0800e460 	.word	0x0800e460
 80023a8:	00000000 	.word	0x00000000
 80023ac:	0800e4a0 	.word	0x0800e4a0
 80023b0:	0800e4f4 	.word	0x0800e4f4
 80023b4:	40a00000 	.word	0x40a00000
 80023b8:	c0a00000 	.word	0xc0a00000
 80023bc:	0800e514 	.word	0x0800e514
 80023c0:	0800e564 	.word	0x0800e564
 80023c4:	40400000 	.word	0x40400000
 80023c8:	42c50000 	.word	0x42c50000
 80023cc:	428c0000 	.word	0x428c0000
 80023d0:	412b3333 	.word	0x412b3333
 80023d4:	c2006666 	.word	0xc2006666
 80023d8:	0800e584 	.word	0x0800e584
 80023dc:	0800e5d4 	.word	0x0800e5d4
 80023e0:	413e6666 	.word	0x413e6666
 80023e4:	0800e5f4 	.word	0x0800e5f4
 80023e8:	0800e644 	.word	0x0800e644
 80023ec:	4141999a 	.word	0x4141999a
 80023f0:	0800e674 	.word	0x0800e674
		}
	}

	T_TEST_PRINT("Reset Test #1.\r\n");
 80023f4:	4868      	ldr	r0, [pc, #416]	; (8002598 <_Z25TestPIDControllerResponsev+0x4f0>)
 80023f6:	f009 fc99 	bl	800bd2c <puts>
	pid.Reset();
 80023fa:	463b      	mov	r3, r7
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f925 	bl	800164c <_ZN13PIDController5ResetEv>
	pid.k_p = 0;
 8002402:	463b      	mov	r3, r7
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	pid.k_i = 0;
 800240c:	463b      	mov	r3, r7
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	pid.k_d = 0;
 8002416:	463b      	mov	r3, r7
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	expect_output = 0;
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002428:	463b      	mov	r3, r7
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f936 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002430:	eeb0 7a40 	vmov.f32	s14, s0
 8002434:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8002438:	eef4 7a47 	vcmp.f32	s15, s14
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <_Z25TestPIDControllerResponsev+0x3d8>
		T_FAIL_PRINT("Failed reset test #1, expected output %f but got %f.\r\n",
 800244c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8002450:	f7fe f8a2 	bl	8000598 <__aeabi_f2d>
 8002454:	4605      	mov	r5, r0
 8002456:	460e      	mov	r6, r1
 8002458:	463b      	mov	r3, r7
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff f91e 	bl	800169c <_ZN13PIDController10get_outputEv>
 8002460:	ee10 3a10 	vmov	r3, s0
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f897 	bl	8000598 <__aeabi_f2d>
 800246a:	4603      	mov	r3, r0
 800246c:	460c      	mov	r4, r1
 800246e:	e9cd 3400 	strd	r3, r4, [sp]
 8002472:	462a      	mov	r2, r5
 8002474:	4633      	mov	r3, r6
 8002476:	4849      	ldr	r0, [pc, #292]	; (800259c <_Z25TestPIDControllerResponsev+0x4f4>)
 8002478:	f009 fbe4 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 800247c:	2300      	movs	r3, #0
 800247e:	e085      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("Reset Test #2.\r\n");
 8002480:	4847      	ldr	r0, [pc, #284]	; (80025a0 <_Z25TestPIDControllerResponsev+0x4f8>)
 8002482:	f009 fc53 	bl	800bd2c <puts>
	state = 0;
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 0;
 800248e:	463b      	mov	r3, r7
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.Update(10);
 8002498:	463b      	mov	r3, r7
 800249a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff f858 	bl	8001554 <_ZN13PIDController6UpdateEf>
	expect_output = 0;
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 80024ac:	463b      	mov	r3, r7
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f8f4 	bl	800169c <_ZN13PIDController10get_outputEv>
 80024b4:	eeb0 7a40 	vmov.f32	s14, s0
 80024b8:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 80024bc:	eef4 7a47 	vcmp.f32	s15, s14
 80024c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c4:	bf14      	ite	ne
 80024c6:	2301      	movne	r3, #1
 80024c8:	2300      	moveq	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d019      	beq.n	8002504 <_Z25TestPIDControllerResponsev+0x45c>
		T_FAIL_PRINT("Failed reset test #2, expected output %f but got %f.\r\n",
 80024d0:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 80024d4:	f7fe f860 	bl	8000598 <__aeabi_f2d>
 80024d8:	4605      	mov	r5, r0
 80024da:	460e      	mov	r6, r1
 80024dc:	463b      	mov	r3, r7
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f8dc 	bl	800169c <_ZN13PIDController10get_outputEv>
 80024e4:	ee10 3a10 	vmov	r3, s0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f855 	bl	8000598 <__aeabi_f2d>
 80024ee:	4603      	mov	r3, r0
 80024f0:	460c      	mov	r4, r1
 80024f2:	e9cd 3400 	strd	r3, r4, [sp]
 80024f6:	462a      	mov	r2, r5
 80024f8:	4633      	mov	r3, r6
 80024fa:	482a      	ldr	r0, [pc, #168]	; (80025a4 <_Z25TestPIDControllerResponsev+0x4fc>)
 80024fc:	f009 fba2 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002500:	2300      	movs	r3, #0
 8002502:	e043      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	T_TEST_PRINT("k_d Test #1.\r\n");
 8002504:	4828      	ldr	r0, [pc, #160]	; (80025a8 <_Z25TestPIDControllerResponsev+0x500>)
 8002506:	f009 fc11 	bl	800bd2c <puts>
	pid.k_d = 13.5;
 800250a:	463b      	mov	r3, r7
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <_Z25TestPIDControllerResponsev+0x504>)
 800250e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	state = -487.3;
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <_Z25TestPIDControllerResponsev+0x508>)
 8002514:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
	pid.target = 22;
 8002518:	463b      	mov	r3, r7
 800251a:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <_Z25TestPIDControllerResponsev+0x50c>)
 800251c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	pid.Update(10);
 8002520:	463b      	mov	r3, r7
 8002522:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff f814 	bl	8001554 <_ZN13PIDController6UpdateEf>
	expect_output = (-487.3 - 22) * 13.5;
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <_Z25TestPIDControllerResponsev+0x510>)
 800252e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	if (pid.get_output() != expect_output) {
 8002532:	463b      	mov	r3, r7
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f8b1 	bl	800169c <_ZN13PIDController10get_outputEv>
 800253a:	eeb0 7a40 	vmov.f32	s14, s0
 800253e:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8002542:	eef4 7a47 	vcmp.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d019      	beq.n	800258a <_Z25TestPIDControllerResponsev+0x4e2>
		T_FAIL_PRINT("Failed k_d Test #1, expected output %f but got %f.\r\n",
 8002556:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 800255a:	f7fe f81d 	bl	8000598 <__aeabi_f2d>
 800255e:	4605      	mov	r5, r0
 8002560:	460e      	mov	r6, r1
 8002562:	463b      	mov	r3, r7
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff f899 	bl	800169c <_ZN13PIDController10get_outputEv>
 800256a:	ee10 3a10 	vmov	r3, s0
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe f812 	bl	8000598 <__aeabi_f2d>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	e9cd 3400 	strd	r3, r4, [sp]
 800257c:	462a      	mov	r2, r5
 800257e:	4633      	mov	r3, r6
 8002580:	480e      	ldr	r0, [pc, #56]	; (80025bc <_Z25TestPIDControllerResponsev+0x514>)
 8002582:	f009 fb5f 	bl	800bc44 <iprintf>
				expect_output, pid.get_output());
		return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e000      	b.n	800258c <_Z25TestPIDControllerResponsev+0x4e4>
	}

	return true;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	f507 77e2 	add.w	r7, r7, #452	; 0x1c4
 8002592:	46bd      	mov	sp, r7
 8002594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002598:	0800e6d4 	.word	0x0800e6d4
 800259c:	0800e6f8 	.word	0x0800e6f8
 80025a0:	0800e748 	.word	0x0800e748
 80025a4:	0800e76c 	.word	0x0800e76c
 80025a8:	0800e7bc 	.word	0x0800e7bc
 80025ac:	41580000 	.word	0x41580000
 80025b0:	c3f3a666 	.word	0xc3f3a666
 80025b4:	41b00000 	.word	0x41b00000
 80025b8:	c5d6dc66 	.word	0xc5d6dc66
 80025bc:	0800e7dc 	.word	0x0800e7dc

080025c0 <_Z20TestPIDControllerAllv>:

void TestPIDControllerAll() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
	L_PRINT("Test PID Controller Class");
 80025c6:	4915      	ldr	r1, [pc, #84]	; (800261c <_Z20TestPIDControllerAllv+0x5c>)
 80025c8:	4815      	ldr	r0, [pc, #84]	; (8002620 <_Z20TestPIDControllerAllv+0x60>)
 80025ca:	f009 fb3b 	bl	800bc44 <iprintf>
	bool pid_passed = true;
 80025ce:	2301      	movs	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerCreate();
 80025d2:	f7ff fc77 	bl	8001ec4 <_Z23TestPIDControllerCreatev>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	4013      	ands	r3, r2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
	pid_passed &= TestPIDControllerResponse();
 80025e8:	f7ff fd5e 	bl	80020a8 <_Z25TestPIDControllerResponsev>
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf14      	ite	ne
 80025f8:	2301      	movne	r3, #1
 80025fa:	2300      	moveq	r3, #0
 80025fc:	71fb      	strb	r3, [r7, #7]
	if (pid_passed) {
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <_Z20TestPIDControllerAllv+0x4c>
		PASS_PRINT("PID Controller Class\r\n");
 8002604:	4807      	ldr	r0, [pc, #28]	; (8002624 <_Z20TestPIDControllerAllv+0x64>)
 8002606:	f009 fb91 	bl	800bd2c <puts>
	} else {
		FAIL_PRINT("PID Controller Class\r\n");
	}
}
 800260a:	e002      	b.n	8002612 <_Z20TestPIDControllerAllv+0x52>
		FAIL_PRINT("PID Controller Class\r\n");
 800260c:	4806      	ldr	r0, [pc, #24]	; (8002628 <_Z20TestPIDControllerAllv+0x68>)
 800260e:	f009 fb8d 	bl	800bd2c <puts>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	0800e82c 	.word	0x0800e82c
 8002620:	0800e848 	.word	0x0800e848
 8002624:	0800e85c 	.word	0x0800e85c
 8002628:	0800e88c 	.word	0x0800e88c

0800262c <_Z10CheckCloseIfEbT_S0_S0_>:
bool CheckEqual(T a, T b) {
	return a == b;
}

template <class T>
bool CheckClose(T a, T b, T margin) {
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	ed87 0a03 	vstr	s0, [r7, #12]
 8002636:	edc7 0a02 	vstr	s1, [r7, #8]
 800263a:	ed87 1a01 	vstr	s2, [r7, #4]
	return (a - b <= margin) || (b - a <= margin);
 800263e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002642:	edd7 7a02 	vldr	s15, [r7, #8]
 8002646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264a:	ed97 7a01 	vldr	s14, [r7, #4]
 800264e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002656:	da0c      	bge.n	8002672 <_Z10CheckCloseIfEbT_S0_S0_+0x46>
 8002658:	ed97 7a02 	vldr	s14, [r7, #8]
 800265c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002664:	ed97 7a01 	vldr	s14, [r7, #4]
 8002668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	db01      	blt.n	8002676 <_Z10CheckCloseIfEbT_S0_S0_+0x4a>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <_Z10CheckCloseIfEbT_S0_S0_+0x4c>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	dbprint_uart = &huart3;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <main+0x74>)
 800268a:	4a1c      	ldr	r2, [pc, #112]	; (80026fc <main+0x78>)
 800268c:	601a      	str	r2, [r3, #0]
	encoder_hspi = &hspi5;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <main+0x7c>)
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <main+0x80>)
 8002692:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002694:	f000 fec5 	bl	8003422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002698:	f000 f844 	bl	8002724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269c:	f000 fa76 	bl	8002b8c <MX_GPIO_Init>
  MX_DMA_Init();
 80026a0:	f000 fa56 	bl	8002b50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80026a4:	f000 f9f6 	bl	8002a94 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80026a8:	f000 fa24 	bl	8002af4 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI5_Init();
 80026ac:	f000 f93e 	bl	800292c <MX_SPI5_Init>
  MX_ADC1_Init();
 80026b0:	f000 f8ce 	bl	8002850 <MX_ADC1_Init>
  MX_TIM4_Init();
 80026b4:	f000 f978 	bl	80029a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_SET); // start with CS deselected
 80026b8:	2201      	movs	r2, #1
 80026ba:	2110      	movs	r1, #16
 80026bc:	4812      	ldr	r0, [pc, #72]	; (8002708 <main+0x84>)
 80026be:	f002 f8fd 	bl	80048bc <HAL_GPIO_WritePin>

  // Begin ADC sampling + transfer over DMA
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)hadc1_buf, ADC_BUF_LEN) != HAL_OK) {
 80026c2:	2203      	movs	r2, #3
 80026c4:	4911      	ldr	r1, [pc, #68]	; (800270c <main+0x88>)
 80026c6:	4812      	ldr	r0, [pc, #72]	; (8002710 <main+0x8c>)
 80026c8:	f000 ff3e 	bl	8003548 <HAL_ADC_Start_DMA>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <main+0x52>
  	  Error_Handler();
 80026d2:	f000 fb61 	bl	8002d98 <Error_Handler>
  }
  HAL_TIM_Base_Start_IT(&htim4);
 80026d6:	480f      	ldr	r0, [pc, #60]	; (8002714 <main+0x90>)
 80026d8:	f004 f836 	bl	8006748 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80026dc:	f005 feea 	bl	80084b4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <main+0x94>)
 80026e2:	2100      	movs	r1, #0
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <main+0x98>)
 80026e6:	f005 ff81 	bl	80085ec <osThreadNew>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <main+0x9c>)
 80026ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80026f0:	f005 ff14 	bl	800851c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <main+0x70>
 80026f6:	bf00      	nop
 80026f8:	200050f8 	.word	0x200050f8
 80026fc:	20004bc8 	.word	0x20004bc8
 8002700:	2000504c 	.word	0x2000504c
 8002704:	20004b24 	.word	0x20004b24
 8002708:	40020000 	.word	0x40020000
 800270c:	20000204 	.word	0x20000204
 8002710:	20005050 	.word	0x20005050
 8002714:	20004b88 	.word	0x20004b88
 8002718:	0800e944 	.word	0x0800e944
 800271c:	08002d51 	.word	0x08002d51
 8002720:	20004b20 	.word	0x20004b20

08002724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b4      	sub	sp, #208	; 0xd0
 8002728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800272e:	2230      	movs	r2, #48	; 0x30
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f008 fe21 	bl	800b37a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f008 fe12 	bl	800b37a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002756:	f002 fa2d 	bl	8004bb4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b3a      	ldr	r3, [pc, #232]	; (8002844 <SystemClock_Config+0x120>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a39      	ldr	r2, [pc, #228]	; (8002844 <SystemClock_Config+0x120>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <SystemClock_Config+0x120>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002772:	4b35      	ldr	r3, [pc, #212]	; (8002848 <SystemClock_Config+0x124>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a34      	ldr	r2, [pc, #208]	; (8002848 <SystemClock_Config+0x124>)
 8002778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <SystemClock_Config+0x124>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800278a:	2301      	movs	r3, #1
 800278c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002794:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002798:	2302      	movs	r3, #2
 800279a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027a6:	2304      	movs	r3, #4
 80027a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80027ac:	23d8      	movs	r3, #216	; 0xd8
 80027ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80027b8:	2309      	movs	r3, #9
 80027ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f002 fa56 	bl	8004c74 <HAL_RCC_OscConfig>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027ce:	f000 fae3 	bl	8002d98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80027d2:	f002 f9ff 	bl	8004bd4 <HAL_PWREx_EnableOverDrive>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80027dc:	f000 fadc 	bl	8002d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027e0:	230f      	movs	r3, #15
 80027e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002802:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002806:	2107      	movs	r1, #7
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fcd7 	bl	80051bc <HAL_RCC_ClockConfig>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002814:	f000 fac0 	bl	8002d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <SystemClock_Config+0x128>)
 800281a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800281c:	2300      	movs	r3, #0
 800281e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002820:	2300      	movs	r3, #0
 8002822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002826:	f107 030c 	add.w	r3, r7, #12
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fef0 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8002836:	f000 faaf 	bl	8002d98 <Error_Handler>
  }
}
 800283a:	bf00      	nop
 800283c:	37d0      	adds	r7, #208	; 0xd0
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40007000 	.word	0x40007000
 800284c:	00200100 	.word	0x00200100

08002850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	463b      	mov	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002862:	4b30      	ldr	r3, [pc, #192]	; (8002924 <MX_ADC1_Init+0xd4>)
 8002864:	4a30      	ldr	r2, [pc, #192]	; (8002928 <MX_ADC1_Init+0xd8>)
 8002866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <MX_ADC1_Init+0xd4>)
 800286a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800286e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002870:	4b2c      	ldr	r3, [pc, #176]	; (8002924 <MX_ADC1_Init+0xd4>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002876:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <MX_ADC1_Init+0xd4>)
 8002878:	2201      	movs	r2, #1
 800287a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800287c:	4b29      	ldr	r3, [pc, #164]	; (8002924 <MX_ADC1_Init+0xd4>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002882:	4b28      	ldr	r3, [pc, #160]	; (8002924 <MX_ADC1_Init+0xd4>)
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800288a:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_ADC1_Init+0xd4>)
 800288c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_TRGO;
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <MX_ADC1_Init+0xd4>)
 8002894:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <MX_ADC1_Init+0xd4>)
 800289c:	2200      	movs	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028a2:	2203      	movs	r2, #3
 80028a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028b4:	481b      	ldr	r0, [pc, #108]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028b6:	f000 fe03 	bl	80034c0 <HAL_ADC_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80028c0:	f000 fa6a 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028c8:	2301      	movs	r3, #1
 80028ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028d0:	463b      	mov	r3, r7
 80028d2:	4619      	mov	r1, r3
 80028d4:	4813      	ldr	r0, [pc, #76]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028d6:	f000 ff39 	bl	800374c <HAL_ADC_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80028e0:	f000 fa5a 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028e4:	2307      	movs	r3, #7
 80028e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028e8:	2302      	movs	r3, #2
 80028ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_ADC1_Init+0xd4>)
 80028f2:	f000 ff2b 	bl	800374c <HAL_ADC_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80028fc:	f000 fa4c 	bl	8002d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002900:	2308      	movs	r3, #8
 8002902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002904:	2303      	movs	r3, #3
 8002906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_ADC1_Init+0xd4>)
 800290e:	f000 ff1d 	bl	800374c <HAL_ADC_ConfigChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8002918:	f000 fa3e 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20005050 	.word	0x20005050
 8002928:	40012000 	.word	0x40012000

0800292c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <MX_SPI5_Init+0x78>)
 8002934:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002936:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002938:	f44f 7282 	mov.w	r2, #260	; 0x104
 800293c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002946:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800294a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_SPI5_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002954:	2201      	movs	r2, #1
 8002956:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002958:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <MX_SPI5_Init+0x74>)
 800295a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002962:	2218      	movs	r2, #24
 8002964:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_SPI5_Init+0x74>)
 800296e:	2200      	movs	r2, #0
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_SPI5_Init+0x74>)
 800297a:	2207      	movs	r2, #7
 800297c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002980:	2200      	movs	r2, #0
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_SPI5_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_SPI5_Init+0x74>)
 800298c:	f003 f988 	bl	8005ca0 <HAL_SPI_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002996:	f000 f9ff 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20004b24 	.word	0x20004b24
 80029a4:	40015000 	.word	0x40015000

080029a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	f107 031c 	add.w	r3, r7, #28
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c8:	463b      	mov	r3, r7
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	611a      	str	r2, [r3, #16]
 80029d6:	615a      	str	r2, [r3, #20]
 80029d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <MX_TIM4_Init+0xe8>)
 80029de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 21600;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029e2:	f245 4260 	movw	r2, #21600	; 0x5460
 80029e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e8:	4b28      	ldr	r3, [pc, #160]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029f6:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029fc:	4b23      	ldr	r3, [pc, #140]	; (8002a8c <MX_TIM4_Init+0xe4>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a02:	4822      	ldr	r0, [pc, #136]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a04:	f003 fe74 	bl	80066f0 <HAL_TIM_Base_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8002a0e:	f000 f9c3 	bl	8002d98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481b      	ldr	r0, [pc, #108]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a20:	f004 f88e 	bl	8006b40 <HAL_TIM_ConfigClockSource>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8002a2a:	f000 f9b5 	bl	8002d98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002a2e:	4817      	ldr	r0, [pc, #92]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a30:	f003 feb4 	bl	800679c <HAL_TIM_OC_Init>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8002a3a:	f000 f9ad 	bl	8002d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	480f      	ldr	r0, [pc, #60]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a4e:	f004 fcf1 	bl	8007434 <HAL_TIMEx_MasterConfigSynchronization>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002a58:	f000 f99e 	bl	8002d98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	220c      	movs	r2, #12
 8002a70:	4619      	mov	r1, r3
 8002a72:	4806      	ldr	r0, [pc, #24]	; (8002a8c <MX_TIM4_Init+0xe4>)
 8002a74:	f003 ffe6 	bl	8006a44 <HAL_TIM_OC_ConfigChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8002a7e:	f000 f98b 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a82:	bf00      	nop
 8002a84:	3738      	adds	r7, #56	; 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20004b88 	.word	0x20004b88
 8002a90:	40000800 	.word	0x40000800

08002a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <MX_USART3_UART_Init+0x5c>)
 8002a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ab2:	4b0e      	ldr	r3, [pc, #56]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002aba:	220c      	movs	r2, #12
 8002abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ad6:	4805      	ldr	r0, [pc, #20]	; (8002aec <MX_USART3_UART_Init+0x58>)
 8002ad8:	f004 fd58 	bl	800758c <HAL_UART_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ae2:	f000 f959 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20004bc8 	.word	0x20004bc8
 8002af0:	40004800 	.word	0x40004800

08002af4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002afa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002afe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b02:	2206      	movs	r2, #6
 8002b04:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b0e:	2202      	movs	r2, #2
 8002b10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b14:	2201      	movs	r2, #1
 8002b16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002b38:	f001 fef3 	bl	8004922 <HAL_PCD_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002b42:	f000 f929 	bl	8002d98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20004c48 	.word	0x20004c48

08002b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <MX_DMA_Init+0x38>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <MX_DMA_Init+0x38>)
 8002b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_DMA_Init+0x38>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2105      	movs	r1, #5
 8002b72:	2038      	movs	r0, #56	; 0x38
 8002b74:	f001 f968 	bl	8003e48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b78:	2038      	movs	r0, #56	; 0x38
 8002b7a:	f001 f981 	bl	8003e80 <HAL_NVIC_EnableIRQ>

}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023800 	.word	0x40023800

08002b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	; 0x30
 8002b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba2:	4b56      	ldr	r3, [pc, #344]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b53      	ldr	r3, [pc, #332]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	61bb      	str	r3, [r7, #24]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bba:	4b50      	ldr	r3, [pc, #320]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a4f      	ldr	r2, [pc, #316]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b4d      	ldr	r3, [pc, #308]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a49      	ldr	r2, [pc, #292]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bea:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a3d      	ldr	r2, [pc, #244]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a37      	ldr	r2, [pc, #220]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c32:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a31      	ldr	r2, [pc, #196]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <MX_GPIO_Init+0x170>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	603b      	str	r3, [r7, #0]
 8002c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENC_SPI_CS_GPIO_Port, ENC_SPI_CS_Pin, GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	482c      	ldr	r0, [pc, #176]	; (8002d00 <MX_GPIO_Init+0x174>)
 8002c50:	f001 fe34 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8002c5a:	482a      	ldr	r0, [pc, #168]	; (8002d04 <MX_GPIO_Init+0x178>)
 8002c5c:	f001 fe2e 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	4828      	ldr	r0, [pc, #160]	; (8002d08 <MX_GPIO_Init+0x17c>)
 8002c66:	f001 fe29 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <MX_GPIO_Init+0x180>)
 8002c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c78:	f107 031c 	add.w	r3, r7, #28
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4824      	ldr	r0, [pc, #144]	; (8002d10 <MX_GPIO_Init+0x184>)
 8002c80:	f001 fc82 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SPI_CS_Pin */
  GPIO_InitStruct.Pin = ENC_SPI_CS_Pin;
 8002c84:	2310      	movs	r3, #16
 8002c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c90:	2302      	movs	r3, #2
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ENC_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8002c94:	f107 031c 	add.w	r3, r7, #28
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4819      	ldr	r0, [pc, #100]	; (8002d00 <MX_GPIO_Init+0x174>)
 8002c9c:	f001 fc74 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ca0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8002ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4812      	ldr	r0, [pc, #72]	; (8002d04 <MX_GPIO_Init+0x178>)
 8002cba:	f001 fc65 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cbe:	2340      	movs	r3, #64	; 0x40
 8002cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <MX_GPIO_Init+0x17c>)
 8002cd6:	f001 fc57 	bl	8004588 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ce6:	f107 031c 	add.w	r3, r7, #28
 8002cea:	4619      	mov	r1, r3
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <MX_GPIO_Init+0x17c>)
 8002cee:	f001 fc4b 	bl	8004588 <HAL_GPIO_Init>

}
 8002cf2:	bf00      	nop
 8002cf4:	3730      	adds	r7, #48	; 0x30
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40020400 	.word	0x40020400
 8002d08:	40021800 	.word	0x40021800
 8002d0c:	10110000 	.word	0x10110000
 8002d10:	40020800 	.word	0x40020800

08002d14 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(dbprint_uart, (uint8_t *)&ch, 1, 0xFFFF);
 8002d1c:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <__io_putchar+0x24>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	1d39      	adds	r1, r7, #4
 8002d22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d26:	2201      	movs	r2, #1
 8002d28:	f004 fc7e 	bl	8007628 <HAL_UART_Transmit>

  return ch;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200050f8 	.word	0x200050f8

08002d3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* This is called after the conversion is completed */
//  printf("hay\r\n");
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  main_run();
 8002d58:	f7fe fcb0 	bl	80016bc <main_run>
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <StartDefaultTask+0x20>)
 8002d62:	f001 fdc4 	bl	80048ee <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8002d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d6a:	f005 fce5 	bl	8008738 <osDelay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002d6e:	e7f5      	b.n	8002d5c <StartDefaultTask+0xc>
 8002d70:	40020400 	.word	0x40020400

08002d74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d86:	f000 fb59 	bl	800343c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40001000 	.word	0x40001000

08002d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <Error_Handler+0x6>

08002da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_MspInit+0x4c>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_MspInit+0x4c>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_MspInit+0x4c>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_MspInit+0x4c>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HAL_MspInit+0x4c>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_MspInit+0x4c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	210f      	movs	r1, #15
 8002dda:	f06f 0001 	mvn.w	r0, #1
 8002dde:	f001 f833 	bl	8003e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08a      	sub	sp, #40	; 0x28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_ADC_MspInit+0x104>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d16c      	bne.n	8002eec <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2a:	4b33      	ldr	r3, [pc, #204]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a2c      	ldr	r2, [pc, #176]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b2a      	ldr	r3, [pc, #168]	; (8002ef8 <HAL_ADC_MspInit+0x108>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8002e5a:	2382      	movs	r3, #130	; 0x82
 8002e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4823      	ldr	r0, [pc, #140]	; (8002efc <HAL_ADC_MspInit+0x10c>)
 8002e6e:	f001 fb8b 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e72:	2301      	movs	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e76:	2303      	movs	r3, #3
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	481e      	ldr	r0, [pc, #120]	; (8002f00 <HAL_ADC_MspInit+0x110>)
 8002e86:	f001 fb7f 	bl	8004588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002e8c:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_ADC_MspInit+0x118>)
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e90:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002eb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ec4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ec8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ed0:	480c      	ldr	r0, [pc, #48]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ed2:	f000 ffe3 	bl	8003e9c <HAL_DMA_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8002edc:	f7ff ff5c 	bl	8002d98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ee6:	4a07      	ldr	r2, [pc, #28]	; (8002f04 <HAL_ADC_MspInit+0x114>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40012000 	.word	0x40012000
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	20005098 	.word	0x20005098
 8002f08:	40026410 	.word	0x40026410

08002f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_SPI_MspInit+0x7c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d128      	bne.n	8002f80 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002f2e:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f4c:	f043 0320 	orr.w	r3, r3, #32
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <HAL_SPI_MspInit+0x80>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF11     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8002f5e:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002f70:	2305      	movs	r3, #5
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4805      	ldr	r0, [pc, #20]	; (8002f90 <HAL_SPI_MspInit+0x84>)
 8002f7c:	f001 fb04 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002f80:	bf00      	nop
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40015000 	.word	0x40015000
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40021400 	.word	0x40021400

08002f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <HAL_TIM_Base_MspInit+0x38>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8002fac:	f043 0304 	orr.w	r3, r3, #4
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <HAL_TIM_Base_MspInit+0x3c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08a      	sub	sp, #40	; 0x28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_UART_MspInit+0x7c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d128      	bne.n	8003048 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ff6:	4b17      	ldr	r3, [pc, #92]	; (8003054 <HAL_UART_MspInit+0x80>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <HAL_UART_MspInit+0x80>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_UART_MspInit+0x80>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300a:	613b      	str	r3, [r7, #16]
 800300c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_UART_MspInit+0x80>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	4a10      	ldr	r2, [pc, #64]	; (8003054 <HAL_UART_MspInit+0x80>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	6313      	str	r3, [r2, #48]	; 0x30
 800301a:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <HAL_UART_MspInit+0x80>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800302a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003034:	2303      	movs	r3, #3
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003038:	2307      	movs	r3, #7
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4619      	mov	r1, r3
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <HAL_UART_MspInit+0x84>)
 8003044:	f001 faa0 	bl	8004588 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003048:	bf00      	nop
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40004800 	.word	0x40004800
 8003054:	40023800 	.word	0x40023800
 8003058:	40020c00 	.word	0x40020c00

0800305c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307c:	d141      	bne.n	8003102 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	4b23      	ldr	r3, [pc, #140]	; (800310c <HAL_PCD_MspInit+0xb0>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a22      	ldr	r2, [pc, #136]	; (800310c <HAL_PCD_MspInit+0xb0>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <HAL_PCD_MspInit+0xb0>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003096:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800309a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80030a8:	230a      	movs	r3, #10
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4817      	ldr	r0, [pc, #92]	; (8003110 <HAL_PCD_MspInit+0xb4>)
 80030b4:	f001 fa68 	bl	8004588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80030b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	4619      	mov	r1, r3
 80030cc:	4810      	ldr	r0, [pc, #64]	; (8003110 <HAL_PCD_MspInit+0xb4>)
 80030ce:	f001 fa5b 	bl	8004588 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	4a0d      	ldr	r2, [pc, #52]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030dc:	6353      	str	r3, [r2, #52]	; 0x34
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	4a07      	ldr	r2, [pc, #28]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030f4:	6453      	str	r3, [r2, #68]	; 0x44
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_PCD_MspInit+0xb0>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3728      	adds	r7, #40	; 0x28
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	40020000 	.word	0x40020000

08003114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08c      	sub	sp, #48	; 0x30
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	2036      	movs	r0, #54	; 0x36
 800312a:	f000 fe8d 	bl	8003e48 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800312e:	2036      	movs	r0, #54	; 0x36
 8003130:	f000 fea6 	bl	8003e80 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_InitTick+0xa0>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_InitTick+0xa0>)
 800313a:	f043 0310 	orr.w	r3, r3, #16
 800313e:	6413      	str	r3, [r2, #64]	; 0x40
 8003140:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_InitTick+0xa0>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800314c:	f107 0210 	add.w	r2, r7, #16
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f002 fa28 	bl	80055ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800315c:	f002 f9fe 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 8003160:	4603      	mov	r3, r0
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <HAL_InitTick+0xa4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	3b01      	subs	r3, #1
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <HAL_InitTick+0xa8>)
 8003176:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_InitTick+0xac>)
 8003178:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_InitTick+0xa8>)
 800317c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003180:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_InitTick+0xa8>)
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_InitTick+0xa8>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_InitTick+0xa8>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003194:	4809      	ldr	r0, [pc, #36]	; (80031bc <HAL_InitTick+0xa8>)
 8003196:	f003 faab 	bl	80066f0 <HAL_TIM_Base_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d104      	bne.n	80031aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80031a0:	4806      	ldr	r0, [pc, #24]	; (80031bc <HAL_InitTick+0xa8>)
 80031a2:	f003 fad1 	bl	8006748 <HAL_TIM_Base_Start_IT>
 80031a6:	4603      	mov	r3, r0
 80031a8:	e000      	b.n	80031ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3730      	adds	r7, #48	; 0x30
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40023800 	.word	0x40023800
 80031b8:	431bde83 	.word	0x431bde83
 80031bc:	200050fc 	.word	0x200050fc
 80031c0:	40001000 	.word	0x40001000

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031c8:	e7fe      	b.n	80031c8 <NMI_Handler+0x4>

080031ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <TIM6_DAC_IRQHandler+0x10>)
 80031f6:	f003 fb06 	bl	8006806 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200050fc 	.word	0x200050fc

08003204 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <DMA2_Stream0_IRQHandler+0x10>)
 800320a:	f000 ff55 	bl	80040b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20005098 	.word	0x20005098

08003218 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
	return 1;
 800321c:	2301      	movs	r3, #1
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_kill>:

int _kill(int pid, int sig)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003232:	f008 f86d 	bl	800b310 <__errno>
 8003236:	4602      	mov	r2, r0
 8003238:	2316      	movs	r3, #22
 800323a:	6013      	str	r3, [r2, #0]
	return -1;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_exit>:

void _exit (int status)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ffe7 	bl	8003228 <_kill>
	while (1) {}		/* Make sure we hang here */
 800325a:	e7fe      	b.n	800325a <_exit+0x12>

0800325c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e00a      	b.n	8003284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800326e:	f3af 8000 	nop.w
 8003272:	4601      	mov	r1, r0
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	60ba      	str	r2, [r7, #8]
 800327a:	b2ca      	uxtb	r2, r1
 800327c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3301      	adds	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697a      	ldr	r2, [r7, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	429a      	cmp	r2, r3
 800328a:	dbf0      	blt.n	800326e <_read+0x12>
	}

return len;
 800328c:	687b      	ldr	r3, [r7, #4]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e009      	b.n	80032bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	60ba      	str	r2, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fd2f 	bl	8002d14 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	dbf1      	blt.n	80032a8 <_write+0x12>
	}
	return len;
 80032c4:	687b      	ldr	r3, [r7, #4]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <_close>:

int _close(int file)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	return -1;
 80032d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032f6:	605a      	str	r2, [r3, #4]
	return 0;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <_isatty>:

int _isatty(int file)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
	return 1;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	return 0;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <_sbrk+0x5c>)
 8003342:	4b15      	ldr	r3, [pc, #84]	; (8003398 <_sbrk+0x60>)
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <_sbrk+0x64>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003354:	4b11      	ldr	r3, [pc, #68]	; (800339c <_sbrk+0x64>)
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <_sbrk+0x68>)
 8003358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4413      	add	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d207      	bcs.n	8003378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003368:	f007 ffd2 	bl	800b310 <__errno>
 800336c:	4602      	mov	r2, r0
 800336e:	230c      	movs	r3, #12
 8003370:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003376:	e009      	b.n	800338c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003378:	4b08      	ldr	r3, [pc, #32]	; (800339c <_sbrk+0x64>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800337e:	4b07      	ldr	r3, [pc, #28]	; (800339c <_sbrk+0x64>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	4a05      	ldr	r2, [pc, #20]	; (800339c <_sbrk+0x64>)
 8003388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20040000 	.word	0x20040000
 8003398:	00000400 	.word	0x00000400
 800339c:	2000020c 	.word	0x2000020c
 80033a0:	20005188 	.word	0x20005188

080033a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <SystemInit+0x28>)
 80033aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <SystemInit+0x28>)
 80033b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <SystemInit+0x28>)
 80033ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033be:	609a      	str	r2, [r3, #8]
#endif
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80033d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80033d6:	e003      	b.n	80033e0 <LoopCopyDataInit>

080033d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80033d8:	4b0c      	ldr	r3, [pc, #48]	; (800340c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80033da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80033dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80033de:	3104      	adds	r1, #4

080033e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80033e0:	480b      	ldr	r0, [pc, #44]	; (8003410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80033e2:	4b0c      	ldr	r3, [pc, #48]	; (8003414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80033e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80033e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80033e8:	d3f6      	bcc.n	80033d8 <CopyDataInit>
  ldr  r2, =_sbss
 80033ea:	4a0b      	ldr	r2, [pc, #44]	; (8003418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80033ec:	e002      	b.n	80033f4 <LoopFillZerobss>

080033ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80033ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80033f0:	f842 3b04 	str.w	r3, [r2], #4

080033f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80033f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80033f8:	d3f9      	bcc.n	80033ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033fa:	f7ff ffd3 	bl	80033a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033fe:	f007 ff8d 	bl	800b31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003402:	f7ff f93f 	bl	8002684 <main>
  bx  lr    
 8003406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003408:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 800340c:	0800ec58 	.word	0x0800ec58
  ldr  r0, =_sdata
 8003410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003414:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003418:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800341c:	20005184 	.word	0x20005184

08003420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC_IRQHandler>

08003422 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003426:	2003      	movs	r0, #3
 8003428:	f000 fd03 	bl	8003e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342c:	2000      	movs	r0, #0
 800342e:	f7ff fe71 	bl	8003114 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003432:	f7ff fcb5 	bl	8002da0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000008 	.word	0x20000008
 8003460:	2000513c 	.word	0x2000513c

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000513c 	.word	0x2000513c

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_Delay+0x40>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034a2:	bf00      	nop
 80034a4:	f7ff ffde 	bl	8003464 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000008 	.word	0x20000008

080034c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e031      	b.n	800353a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7ff fc86 	bl	8002df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d116      	bne.n	800352c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <HAL_ADC_Init+0x84>)
 8003504:	4013      	ands	r3, r2
 8003506:	f043 0202 	orr.w	r2, r3, #2
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa66 	bl	80039e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f023 0303 	bic.w	r3, r3, #3
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
 800352a:	e001      	b.n	8003530 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003538:	7bfb      	ldrb	r3, [r7, #15]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	ffffeefd 	.word	0xffffeefd

08003548 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_ADC_Start_DMA+0x1e>
 8003562:	2302      	movs	r3, #2
 8003564:	e0c7      	b.n	80036f6 <HAL_ADC_Start_DMA+0x1ae>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d018      	beq.n	80035ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0201 	orr.w	r2, r2, #1
 800358a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800358c:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <HAL_ADC_Start_DMA+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a5c      	ldr	r2, [pc, #368]	; (8003704 <HAL_ADC_Start_DMA+0x1bc>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	0c9a      	lsrs	r2, r3, #18
 8003598:	4613      	mov	r3, r2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	4413      	add	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035a0:	e002      	b.n	80035a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f9      	bne.n	80035a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 809b 	bne.w	80036f4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035c2:	4b51      	ldr	r3, [pc, #324]	; (8003708 <HAL_ADC_Start_DMA+0x1c0>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d007      	beq.n	80035ec <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f8:	d106      	bne.n	8003608 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f023 0206 	bic.w	r2, r3, #6
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
 8003606:	e002      	b.n	800360e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_ADC_Start_DMA+0x1c4>)
 800361c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <HAL_ADC_Start_DMA+0x1c8>)
 8003624:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <HAL_ADC_Start_DMA+0x1cc>)
 800362c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003636:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003646:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003656:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	334c      	adds	r3, #76	; 0x4c
 8003662:	4619      	mov	r1, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f000 fcc6 	bl	8003ff8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_ADC_Start_DMA+0x1d0>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10f      	bne.n	8003698 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d136      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003694:	609a      	str	r2, [r3, #8]
 8003696:	e02d      	b.n	80036f4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_ADC_Start_DMA+0x1d4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10e      	bne.n	80036c0 <HAL_ADC_Start_DMA+0x178>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d107      	bne.n	80036c0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036be:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <HAL_ADC_Start_DMA+0x1d0>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a13      	ldr	r2, [pc, #76]	; (8003720 <HAL_ADC_Start_DMA+0x1d8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10e      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x1ac>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d107      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036f2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000000 	.word	0x20000000
 8003704:	431bde83 	.word	0x431bde83
 8003708:	fffff8fe 	.word	0xfffff8fe
 800370c:	08003bd5 	.word	0x08003bd5
 8003710:	08003c8f 	.word	0x08003c8f
 8003714:	08003cab 	.word	0x08003cab
 8003718:	40012300 	.word	0x40012300
 800371c:	40012000 	.word	0x40012000
 8003720:	40012200 	.word	0x40012200

08003724 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e12a      	b.n	80039be <HAL_ADC_ConfigChannel+0x272>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b09      	cmp	r3, #9
 8003776:	d93a      	bls.n	80037ee <HAL_ADC_ConfigChannel+0xa2>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003780:	d035      	beq.n	80037ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68d9      	ldr	r1, [r3, #12]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	461a      	mov	r2, r3
 8003790:	4613      	mov	r3, r2
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	4413      	add	r3, r2
 8003796:	3b1e      	subs	r3, #30
 8003798:	2207      	movs	r2, #7
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	400a      	ands	r2, r1
 80037a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a87      	ldr	r2, [pc, #540]	; (80039cc <HAL_ADC_ConfigChannel+0x280>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10a      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	061a      	lsls	r2, r3, #24
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037c6:	e035      	b.n	8003834 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68d9      	ldr	r1, [r3, #12]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	4618      	mov	r0, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4403      	add	r3, r0
 80037e0:	3b1e      	subs	r3, #30
 80037e2:	409a      	lsls	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037ec:	e022      	b.n	8003834 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6919      	ldr	r1, [r3, #16]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	4613      	mov	r3, r2
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	2207      	movs	r2, #7
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43da      	mvns	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	400a      	ands	r2, r1
 8003810:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6919      	ldr	r1, [r3, #16]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4618      	mov	r0, r3
 8003824:	4603      	mov	r3, r0
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4403      	add	r3, r0
 800382a:	409a      	lsls	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b06      	cmp	r3, #6
 800383a:	d824      	bhi.n	8003886 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	3b05      	subs	r3, #5
 800384e:	221f      	movs	r2, #31
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43da      	mvns	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	400a      	ands	r2, r1
 800385c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	4618      	mov	r0, r3
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	3b05      	subs	r3, #5
 8003878:	fa00 f203 	lsl.w	r2, r0, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	635a      	str	r2, [r3, #52]	; 0x34
 8003884:	e04c      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d824      	bhi.n	80038d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b23      	subs	r3, #35	; 0x23
 80038a0:	221f      	movs	r2, #31
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	400a      	ands	r2, r1
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4618      	mov	r0, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b23      	subs	r3, #35	; 0x23
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
 80038d6:	e023      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	3b41      	subs	r3, #65	; 0x41
 80038ea:	221f      	movs	r2, #31
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43da      	mvns	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	400a      	ands	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	4618      	mov	r0, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	3b41      	subs	r3, #65	; 0x41
 8003914:	fa00 f203 	lsl.w	r2, r0, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <HAL_ADC_ConfigChannel+0x284>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10a      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1f4>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003932:	d105      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003934:	4b27      	ldr	r3, [pc, #156]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 800393a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800393e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <HAL_ADC_ConfigChannel+0x284>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d109      	bne.n	800395e <HAL_ADC_ConfigChannel+0x212>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b12      	cmp	r3, #18
 8003950:	d105      	bne.n	800395e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4a1f      	ldr	r2, [pc, #124]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 8003958:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800395c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a1b      	ldr	r2, [pc, #108]	; (80039d0 <HAL_ADC_ConfigChannel+0x284>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d125      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x268>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a17      	ldr	r2, [pc, #92]	; (80039cc <HAL_ADC_ConfigChannel+0x280>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d003      	beq.n	800397a <HAL_ADC_ConfigChannel+0x22e>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b11      	cmp	r3, #17
 8003978:	d11c      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800397a:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <HAL_ADC_ConfigChannel+0x288>)
 8003980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003984:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a10      	ldr	r2, [pc, #64]	; (80039cc <HAL_ADC_ConfigChannel+0x280>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d111      	bne.n	80039b4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_ADC_ConfigChannel+0x28c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a11      	ldr	r2, [pc, #68]	; (80039dc <HAL_ADC_ConfigChannel+0x290>)
 8003996:	fba2 2303 	umull	r2, r3, r2, r3
 800399a:	0c9a      	lsrs	r2, r3, #18
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039a6:	e002      	b.n	80039ae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f9      	bne.n	80039a8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	10000012 	.word	0x10000012
 80039d0:	40012000 	.word	0x40012000
 80039d4:	40012300 	.word	0x40012300
 80039d8:	20000000 	.word	0x20000000
 80039dc:	431bde83 	.word	0x431bde83

080039e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039e8:	4b78      	ldr	r3, [pc, #480]	; (8003bcc <ADC_Init+0x1ec>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	4a77      	ldr	r2, [pc, #476]	; (8003bcc <ADC_Init+0x1ec>)
 80039ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039f4:	4b75      	ldr	r3, [pc, #468]	; (8003bcc <ADC_Init+0x1ec>)
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4973      	ldr	r1, [pc, #460]	; (8003bcc <ADC_Init+0x1ec>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6859      	ldr	r1, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	021a      	lsls	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6e:	4a58      	ldr	r2, [pc, #352]	; (8003bd0 <ADC_Init+0x1f0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d022      	beq.n	8003aba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	e00f      	b.n	8003ada <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ad8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0202 	bic.w	r2, r2, #2
 8003ae8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6899      	ldr	r1, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	005a      	lsls	r2, r3, #1
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	3b01      	subs	r3, #1
 8003b34:	035a      	lsls	r2, r3, #13
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e007      	b.n	8003b50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	051a      	lsls	r2, r3, #20
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6899      	ldr	r1, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b92:	025a      	lsls	r2, r3, #9
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6899      	ldr	r1, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	029a      	lsls	r2, r3, #10
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	40012300 	.word	0x40012300
 8003bd0:	0f000001 	.word	0x0f000001

08003bd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d13c      	bne.n	8003c68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d12b      	bne.n	8003c60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d127      	bne.n	8003c60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d119      	bne.n	8003c60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0220 	bic.w	r2, r2, #32
 8003c3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0201 	orr.w	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff f86b 	bl	8002d3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c66:	e00e      	b.n	8003c86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fd5f 	bl	8003738 <HAL_ADC_ErrorCallback>
}
 8003c7a:	e004      	b.n	8003c86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	4798      	blx	r3
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fd41 	bl	8003724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b084      	sub	sp, #16
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2240      	movs	r2, #64	; 0x40
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f043 0204 	orr.w	r2, r3, #4
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fd34 	bl	8003738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <__NVIC_SetPriorityGrouping+0x40>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <__NVIC_SetPriorityGrouping+0x44>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x40>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00
 8003d1c:	05fa0000 	.word	0x05fa0000

08003d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d24:	4b04      	ldr	r3, [pc, #16]	; (8003d38 <__NVIC_GetPriorityGrouping+0x18>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 0307 	and.w	r3, r3, #7
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	e000ed00 	.word	0xe000ed00

08003d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	db0b      	blt.n	8003d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	f003 021f 	and.w	r2, r3, #31
 8003d54:	4907      	ldr	r1, [pc, #28]	; (8003d74 <__NVIC_EnableIRQ+0x38>)
 8003d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	; 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	; 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ff4c 	bl	8003cd8 <__NVIC_SetPriorityGrouping>
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5a:	f7ff ff61 	bl	8003d20 <__NVIC_GetPriorityGrouping>
 8003e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	6978      	ldr	r0, [r7, #20]
 8003e66:	f7ff ffb1 	bl	8003dcc <NVIC_EncodePriority>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ff80 	bl	8003d78 <__NVIC_SetPriority>
}
 8003e78:	bf00      	nop
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff ff54 	bl	8003d3c <__NVIC_EnableIRQ>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7ff fadc 	bl	8003464 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e099      	b.n	8003fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed8:	e00f      	b.n	8003efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eda:	f7ff fac3 	bl	8003464 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d908      	bls.n	8003efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e078      	b.n	8003fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e8      	bne.n	8003eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <HAL_DMA_Init+0x158>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d117      	bne.n	8003fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa77 	bl	8004494 <DMA_CheckFifoParam>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e016      	b.n	8003fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa2e 	bl	8004428 <DMA_CalcBaseAndBitshift>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	223f      	movs	r2, #63	; 0x3f
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	e010803f 	.word	0xe010803f

08003ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_DMA_Start_IT+0x26>
 800401a:	2302      	movs	r3, #2
 800401c:	e048      	b.n	80040b0 <HAL_DMA_Start_IT+0xb8>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d137      	bne.n	80040a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f9c0 	bl	80043cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	223f      	movs	r2, #63	; 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0216 	orr.w	r2, r2, #22
 8004066:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695a      	ldr	r2, [r3, #20]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004076:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	e005      	b.n	80040ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
 80040ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80040c4:	4b92      	ldr	r3, [pc, #584]	; (8004310 <HAL_DMA_IRQHandler+0x258>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a92      	ldr	r2, [pc, #584]	; (8004314 <HAL_DMA_IRQHandler+0x25c>)
 80040ca:	fba2 2303 	umull	r2, r3, r2, r3
 80040ce:	0a9b      	lsrs	r3, r3, #10
 80040d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e2:	2208      	movs	r2, #8
 80040e4:	409a      	lsls	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d013      	beq.n	8004124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0204 	bic.w	r2, r2, #4
 800410a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	2208      	movs	r2, #8
 8004112:	409a      	lsls	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	f043 0201 	orr.w	r2, r3, #1
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d012      	beq.n	800415a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	2201      	movs	r2, #1
 8004148:	409a      	lsls	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f043 0202 	orr.w	r2, r3, #2
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2204      	movs	r2, #4
 8004160:	409a      	lsls	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d012      	beq.n	8004190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	2204      	movs	r2, #4
 800417e:	409a      	lsls	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	f043 0204 	orr.w	r2, r3, #4
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004194:	2210      	movs	r2, #16
 8004196:	409a      	lsls	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4013      	ands	r3, r2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d043      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d03c      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	2210      	movs	r2, #16
 80041b4:	409a      	lsls	r2, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d018      	beq.n	80041fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d024      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	4798      	blx	r3
 80041e6:	e01f      	b.n	8004228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	4798      	blx	r3
 80041f8:	e016      	b.n	8004228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 0208 	bic.w	r2, r2, #8
 8004216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2220      	movs	r2, #32
 800422e:	409a      	lsls	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4013      	ands	r3, r2
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 808e 	beq.w	8004356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8086 	beq.w	8004356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2220      	movs	r2, #32
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b05      	cmp	r3, #5
 8004260:	d136      	bne.n	80042d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0216 	bic.w	r2, r2, #22
 8004270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695a      	ldr	r2, [r3, #20]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d103      	bne.n	8004292 <HAL_DMA_IRQHandler+0x1da>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a6:	223f      	movs	r2, #63	; 0x3f
 80042a8:	409a      	lsls	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d07d      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	4798      	blx	r3
        }
        return;
 80042ce:	e078      	b.n	80043c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d01c      	beq.n	8004318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d108      	bne.n	80042fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d030      	beq.n	8004356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
 80042fc:	e02b      	b.n	8004356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d027      	beq.n	8004356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
 800430e:	e022      	b.n	8004356 <HAL_DMA_IRQHandler+0x29e>
 8004310:	20000000 	.word	0x20000000
 8004314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0210 	bic.w	r2, r2, #16
 8004334:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	2b00      	cmp	r3, #0
 800435c:	d032      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2205      	movs	r2, #5
 800436e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	3301      	adds	r3, #1
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	429a      	cmp	r2, r3
 800438c:	d307      	bcc.n	800439e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f2      	bne.n	8004382 <HAL_DMA_IRQHandler+0x2ca>
 800439c:	e000      	b.n	80043a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800439e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	4798      	blx	r3
 80043c0:	e000      	b.n	80043c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80043c2:	bf00      	nop
    }
  }
}
 80043c4:	3718      	adds	r7, #24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop

080043cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d108      	bne.n	800440c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800440a:	e007      	b.n	800441c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	3b10      	subs	r3, #16
 8004438:	4a13      	ldr	r2, [pc, #76]	; (8004488 <DMA_CalcBaseAndBitshift+0x60>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004442:	4a12      	ldr	r2, [pc, #72]	; (800448c <DMA_CalcBaseAndBitshift+0x64>)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d908      	bls.n	8004468 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <DMA_CalcBaseAndBitshift+0x68>)
 800445e:	4013      	ands	r3, r2
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	659a      	str	r2, [r3, #88]	; 0x58
 8004466:	e006      	b.n	8004476 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <DMA_CalcBaseAndBitshift+0x68>)
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	aaaaaaab 	.word	0xaaaaaaab
 800448c:	0800e980 	.word	0x0800e980
 8004490:	fffffc00 	.word	0xfffffc00

08004494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d11f      	bne.n	80044ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d855      	bhi.n	8004560 <DMA_CheckFifoParam+0xcc>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <DMA_CheckFifoParam+0x28>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	080044cd 	.word	0x080044cd
 80044c0:	080044df 	.word	0x080044df
 80044c4:	080044cd 	.word	0x080044cd
 80044c8:	08004561 	.word	0x08004561
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d045      	beq.n	8004564 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044dc:	e042      	b.n	8004564 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044e6:	d13f      	bne.n	8004568 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ec:	e03c      	b.n	8004568 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044f6:	d121      	bne.n	800453c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d836      	bhi.n	800456c <DMA_CheckFifoParam+0xd8>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <DMA_CheckFifoParam+0x70>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004515 	.word	0x08004515
 8004508:	0800451b 	.word	0x0800451b
 800450c:	08004515 	.word	0x08004515
 8004510:	0800452d 	.word	0x0800452d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      break;
 8004518:	e02f      	b.n	800457a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d024      	beq.n	8004570 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800452a:	e021      	b.n	8004570 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004534:	d11e      	bne.n	8004574 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800453a:	e01b      	b.n	8004574 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d902      	bls.n	8004548 <DMA_CheckFifoParam+0xb4>
 8004542:	2b03      	cmp	r3, #3
 8004544:	d003      	beq.n	800454e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004546:	e018      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	73fb      	strb	r3, [r7, #15]
      break;
 800454c:	e015      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
      break;
 800455e:	e00b      	b.n	8004578 <DMA_CheckFifoParam+0xe4>
      break;
 8004560:	bf00      	nop
 8004562:	e00a      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;
 8004564:	bf00      	nop
 8004566:	e008      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;
 8004568:	bf00      	nop
 800456a:	e006      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;
 800456c:	bf00      	nop
 800456e:	e004      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;
 8004570:	bf00      	nop
 8004572:	e002      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;   
 8004574:	bf00      	nop
 8004576:	e000      	b.n	800457a <DMA_CheckFifoParam+0xe6>
      break;
 8004578:	bf00      	nop
    }
  } 
  
  return status; 
 800457a:	7bfb      	ldrb	r3, [r7, #15]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004588:	b480      	push	{r7}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e169      	b.n	800487c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045a8:	2201      	movs	r2, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4013      	ands	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	f040 8158 	bne.w	8004876 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d00b      	beq.n	80045e6 <HAL_GPIO_Init+0x5e>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d007      	beq.n	80045e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045da:	2b11      	cmp	r3, #17
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b12      	cmp	r3, #18
 80045e4:	d130      	bne.n	8004648 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	2203      	movs	r2, #3
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800461c:	2201      	movs	r2, #1
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 0201 	and.w	r2, r3, #1
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	fa02 f303 	lsl.w	r3, r2, r3
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	4313      	orrs	r3, r2
 8004640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4013      	ands	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4313      	orrs	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x100>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b12      	cmp	r3, #18
 8004686:	d123      	bne.n	80046d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	08da      	lsrs	r2, r3, #3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3208      	adds	r2, #8
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	220f      	movs	r2, #15
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	08da      	lsrs	r2, r3, #3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3208      	adds	r2, #8
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	2203      	movs	r2, #3
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 0203 	and.w	r2, r3, #3
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 80b2 	beq.w	8004876 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004712:	4b5f      	ldr	r3, [pc, #380]	; (8004890 <HAL_GPIO_Init+0x308>)
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	4a5e      	ldr	r2, [pc, #376]	; (8004890 <HAL_GPIO_Init+0x308>)
 8004718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800471c:	6453      	str	r3, [r2, #68]	; 0x44
 800471e:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_GPIO_Init+0x308>)
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800472a:	4a5a      	ldr	r2, [pc, #360]	; (8004894 <HAL_GPIO_Init+0x30c>)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	3302      	adds	r3, #2
 8004732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004736:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	220f      	movs	r2, #15
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	4013      	ands	r3, r2
 800474c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a51      	ldr	r2, [pc, #324]	; (8004898 <HAL_GPIO_Init+0x310>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d02b      	beq.n	80047ae <HAL_GPIO_Init+0x226>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a50      	ldr	r2, [pc, #320]	; (800489c <HAL_GPIO_Init+0x314>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d025      	beq.n	80047aa <HAL_GPIO_Init+0x222>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4f      	ldr	r2, [pc, #316]	; (80048a0 <HAL_GPIO_Init+0x318>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01f      	beq.n	80047a6 <HAL_GPIO_Init+0x21e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a4e      	ldr	r2, [pc, #312]	; (80048a4 <HAL_GPIO_Init+0x31c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d019      	beq.n	80047a2 <HAL_GPIO_Init+0x21a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4d      	ldr	r2, [pc, #308]	; (80048a8 <HAL_GPIO_Init+0x320>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d013      	beq.n	800479e <HAL_GPIO_Init+0x216>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a4c      	ldr	r2, [pc, #304]	; (80048ac <HAL_GPIO_Init+0x324>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00d      	beq.n	800479a <HAL_GPIO_Init+0x212>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a4b      	ldr	r2, [pc, #300]	; (80048b0 <HAL_GPIO_Init+0x328>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d007      	beq.n	8004796 <HAL_GPIO_Init+0x20e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4a      	ldr	r2, [pc, #296]	; (80048b4 <HAL_GPIO_Init+0x32c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d101      	bne.n	8004792 <HAL_GPIO_Init+0x20a>
 800478e:	2307      	movs	r3, #7
 8004790:	e00e      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 8004792:	2308      	movs	r3, #8
 8004794:	e00c      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 8004796:	2306      	movs	r3, #6
 8004798:	e00a      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 800479a:	2305      	movs	r3, #5
 800479c:	e008      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 800479e:	2304      	movs	r3, #4
 80047a0:	e006      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 80047a2:	2303      	movs	r3, #3
 80047a4:	e004      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_GPIO_Init+0x228>
 80047ae:	2300      	movs	r3, #0
 80047b0:	69fa      	ldr	r2, [r7, #28]
 80047b2:	f002 0203 	and.w	r2, r2, #3
 80047b6:	0092      	lsls	r2, r2, #2
 80047b8:	4093      	lsls	r3, r2
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047c0:	4934      	ldr	r1, [pc, #208]	; (8004894 <HAL_GPIO_Init+0x30c>)
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	3302      	adds	r3, #2
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047ce:	4b3a      	ldr	r3, [pc, #232]	; (80048b8 <HAL_GPIO_Init+0x330>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	43db      	mvns	r3, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4013      	ands	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047f2:	4a31      	ldr	r2, [pc, #196]	; (80048b8 <HAL_GPIO_Init+0x330>)
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047f8:	4b2f      	ldr	r3, [pc, #188]	; (80048b8 <HAL_GPIO_Init+0x330>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <HAL_GPIO_Init+0x330>)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_GPIO_Init+0x330>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004846:	4a1c      	ldr	r2, [pc, #112]	; (80048b8 <HAL_GPIO_Init+0x330>)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800484c:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_GPIO_Init+0x330>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	43db      	mvns	r3, r3
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4013      	ands	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <HAL_GPIO_Init+0x330>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	3301      	adds	r3, #1
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	f67f ae92 	bls.w	80045a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004884:	bf00      	nop
 8004886:	3724      	adds	r7, #36	; 0x24
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40023800 	.word	0x40023800
 8004894:	40013800 	.word	0x40013800
 8004898:	40020000 	.word	0x40020000
 800489c:	40020400 	.word	0x40020400
 80048a0:	40020800 	.word	0x40020800
 80048a4:	40020c00 	.word	0x40020c00
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40021400 	.word	0x40021400
 80048b0:	40021800 	.word	0x40021800
 80048b4:	40021c00 	.word	0x40021c00
 80048b8:	40013c00 	.word	0x40013c00

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048d8:	e003      	b.n	80048e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	041a      	lsls	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	619a      	str	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	887b      	ldrh	r3, [r7, #2]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d004      	beq.n	8004910 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800490e:	e002      	b.n	8004916 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004910:	887a      	ldrh	r2, [r7, #2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	619a      	str	r2, [r3, #24]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004924:	b08f      	sub	sp, #60	; 0x3c
 8004926:	af0a      	add	r7, sp, #40	; 0x28
 8004928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e116      	b.n	8004b62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7fe fb84 	bl	800305c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f003 fb3e 	bl	8007ff4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	687e      	ldr	r6, [r7, #4]
 8004980:	466d      	mov	r5, sp
 8004982:	f106 0410 	add.w	r4, r6, #16
 8004986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800498c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800498e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004992:	e885 0003 	stmia.w	r5, {r0, r1}
 8004996:	1d33      	adds	r3, r6, #4
 8004998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800499a:	6838      	ldr	r0, [r7, #0]
 800499c:	f003 facc 	bl	8007f38 <USB_CoreInit>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e0d7      	b.n	8004b62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2100      	movs	r1, #0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f003 fb2c 	bl	8008016 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	e04a      	b.n	8004a5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	333d      	adds	r3, #61	; 0x3d
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049d8:	7bfa      	ldrb	r2, [r7, #15]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	333c      	adds	r3, #60	; 0x3c
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	b298      	uxth	r0, r3
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	3342      	adds	r3, #66	; 0x42
 8004a00:	4602      	mov	r2, r0
 8004a02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a04:	7bfa      	ldrb	r2, [r7, #15]
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	1a9b      	subs	r3, r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	333f      	adds	r3, #63	; 0x3f
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a18:	7bfa      	ldrb	r2, [r7, #15]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	3344      	adds	r3, #68	; 0x44
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	3348      	adds	r3, #72	; 0x48
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	3350      	adds	r3, #80	; 0x50
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	3301      	adds	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d3af      	bcc.n	80049c4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e044      	b.n	8004af4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	3301      	adds	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d3b5      	bcc.n	8004a6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	687e      	ldr	r6, [r7, #4]
 8004b06:	466d      	mov	r5, sp
 8004b08:	f106 0410 	add.w	r4, r6, #16
 8004b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b1c:	1d33      	adds	r3, r6, #4
 8004b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b20:	6838      	ldr	r0, [r7, #0]
 8004b22:	f003 faa3 	bl	800806c <USB_DevInit>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e014      	b.n	8004b62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f80b 	bl	8004b6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f003 fc55 	bl	800840a <USB_DevDisconnect>

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3714      	adds	r7, #20
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	10000003 	.word	0x10000003

08004bb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	40007000 	.word	0x40007000

08004bd4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bde:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bea:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <HAL_PWREx_EnableOverDrive+0x98>)
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bf6:	4b1e      	ldr	r3, [pc, #120]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a1d      	ldr	r2, [pc, #116]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c02:	f7fe fc2f 	bl	8003464 <HAL_GetTick>
 8004c06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c08:	e009      	b.n	8004c1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c0a:	f7fe fc2b 	bl	8003464 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c18:	d901      	bls.n	8004c1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e022      	b.n	8004c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2a:	d1ee      	bne.n	8004c0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a0f      	ldr	r2, [pc, #60]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c38:	f7fe fc14 	bl	8003464 <HAL_GetTick>
 8004c3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c3e:	e009      	b.n	8004c54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c40:	f7fe fc10 	bl	8003464 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c4e:	d901      	bls.n	8004c54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e007      	b.n	8004c64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c60:	d1ee      	bne.n	8004c40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40007000 	.word	0x40007000

08004c74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b086      	sub	sp, #24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e291      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8087 	beq.w	8004da6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c98:	4b96      	ldr	r3, [pc, #600]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d00c      	beq.n	8004cbe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca4:	4b93      	ldr	r3, [pc, #588]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d112      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x62>
 8004cb0:	4b90      	ldr	r3, [pc, #576]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cbe:	4b8d      	ldr	r3, [pc, #564]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d06c      	beq.n	8004da4 <HAL_RCC_OscConfig+0x130>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d168      	bne.n	8004da4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e26b      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x7a>
 8004ce0:	4b84      	ldr	r3, [pc, #528]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a83      	ldr	r2, [pc, #524]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	e02e      	b.n	8004d4c <HAL_RCC_OscConfig+0xd8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x9c>
 8004cf6:	4b7f      	ldr	r3, [pc, #508]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a7e      	ldr	r2, [pc, #504]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b7c      	ldr	r3, [pc, #496]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a7b      	ldr	r2, [pc, #492]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	e01d      	b.n	8004d4c <HAL_RCC_OscConfig+0xd8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	d10c      	bne.n	8004d34 <HAL_RCC_OscConfig+0xc0>
 8004d1a:	4b76      	ldr	r3, [pc, #472]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a75      	ldr	r2, [pc, #468]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b73      	ldr	r3, [pc, #460]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a72      	ldr	r2, [pc, #456]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e00b      	b.n	8004d4c <HAL_RCC_OscConfig+0xd8>
 8004d34:	4b6f      	ldr	r3, [pc, #444]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a6e      	ldr	r2, [pc, #440]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b6c      	ldr	r3, [pc, #432]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a6b      	ldr	r2, [pc, #428]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fe fb86 	bl	8003464 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d5c:	f7fe fb82 	bl	8003464 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b64      	cmp	r3, #100	; 0x64
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e21f      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d6e:	4b61      	ldr	r3, [pc, #388]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0f0      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe8>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d7c:	f7fe fb72 	bl	8003464 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d84:	f7fe fb6e 	bl	8003464 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e20b      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d96:	4b57      	ldr	r3, [pc, #348]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f0      	bne.n	8004d84 <HAL_RCC_OscConfig+0x110>
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d069      	beq.n	8004e86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004db2:	4b50      	ldr	r3, [pc, #320]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dbe:	4b4d      	ldr	r3, [pc, #308]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d11c      	bne.n	8004e04 <HAL_RCC_OscConfig+0x190>
 8004dca:	4b4a      	ldr	r3, [pc, #296]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d116      	bne.n	8004e04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dd6:	4b47      	ldr	r3, [pc, #284]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <HAL_RCC_OscConfig+0x17a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e1df      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b41      	ldr	r3, [pc, #260]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	493d      	ldr	r1, [pc, #244]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e02:	e040      	b.n	8004e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d023      	beq.n	8004e54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b39      	ldr	r3, [pc, #228]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a38      	ldr	r2, [pc, #224]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fe fb24 	bl	8003464 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fe fb20 	bl	8003464 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1bd      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	4b30      	ldr	r3, [pc, #192]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0f0      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	4929      	ldr	r1, [pc, #164]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	600b      	str	r3, [r1, #0]
 8004e52:	e018      	b.n	8004e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e5a:	f023 0301 	bic.w	r3, r3, #1
 8004e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fe fb00 	bl	8003464 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e68:	f7fe fafc 	bl	8003464 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e199      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d038      	beq.n	8004f04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d019      	beq.n	8004ece <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9e:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fe fadd 	bl	8003464 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fe fad9 	bl	8003464 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e176      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x23a>
 8004ecc:	e01a      	b.n	8004f04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ece:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed2:	4a08      	ldr	r2, [pc, #32]	; (8004ef4 <HAL_RCC_OscConfig+0x280>)
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fe fac3 	bl	8003464 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fe fabf 	bl	8003464 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d903      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e15c      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
 8004ef4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	4b91      	ldr	r3, [pc, #580]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004efa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ee      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80a4 	beq.w	800505a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f12:	4b8b      	ldr	r3, [pc, #556]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10d      	bne.n	8004f3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	4b88      	ldr	r3, [pc, #544]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	4a87      	ldr	r2, [pc, #540]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2a:	4b85      	ldr	r3, [pc, #532]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	60bb      	str	r3, [r7, #8]
 8004f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f3a:	4b82      	ldr	r3, [pc, #520]	; (8005144 <HAL_RCC_OscConfig+0x4d0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d118      	bne.n	8004f78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f46:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <HAL_RCC_OscConfig+0x4d0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a7e      	ldr	r2, [pc, #504]	; (8005144 <HAL_RCC_OscConfig+0x4d0>)
 8004f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f52:	f7fe fa87 	bl	8003464 <HAL_GetTick>
 8004f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5a:	f7fe fa83 	bl	8003464 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b64      	cmp	r3, #100	; 0x64
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e120      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6c:	4b75      	ldr	r3, [pc, #468]	; (8005144 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d106      	bne.n	8004f8e <HAL_RCC_OscConfig+0x31a>
 8004f80:	4b6f      	ldr	r3, [pc, #444]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f84:	4a6e      	ldr	r2, [pc, #440]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8c:	e02d      	b.n	8004fea <HAL_RCC_OscConfig+0x376>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x33c>
 8004f96:	4b6a      	ldr	r3, [pc, #424]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a69      	ldr	r2, [pc, #420]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004f9c:	f023 0301 	bic.w	r3, r3, #1
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8004fa2:	4b67      	ldr	r3, [pc, #412]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	4a66      	ldr	r2, [pc, #408]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fa8:	f023 0304 	bic.w	r3, r3, #4
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e01c      	b.n	8004fea <HAL_RCC_OscConfig+0x376>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b05      	cmp	r3, #5
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x35e>
 8004fb8:	4b61      	ldr	r3, [pc, #388]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fbc:	4a60      	ldr	r2, [pc, #384]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fbe:	f043 0304 	orr.w	r3, r3, #4
 8004fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004fc4:	4b5e      	ldr	r3, [pc, #376]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	4a5d      	ldr	r2, [pc, #372]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6713      	str	r3, [r2, #112]	; 0x70
 8004fd0:	e00b      	b.n	8004fea <HAL_RCC_OscConfig+0x376>
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd6:	4a5a      	ldr	r2, [pc, #360]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fd8:	f023 0301 	bic.w	r3, r3, #1
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004fde:	4b58      	ldr	r3, [pc, #352]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe2:	4a57      	ldr	r2, [pc, #348]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8004fe4:	f023 0304 	bic.w	r3, r3, #4
 8004fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d015      	beq.n	800501e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff2:	f7fe fa37 	bl	8003464 <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff8:	e00a      	b.n	8005010 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ffa:	f7fe fa33 	bl	8003464 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	f241 3288 	movw	r2, #5000	; 0x1388
 8005008:	4293      	cmp	r3, r2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0ce      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	4b4b      	ldr	r3, [pc, #300]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0ee      	beq.n	8004ffa <HAL_RCC_OscConfig+0x386>
 800501c:	e014      	b.n	8005048 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fe fa21 	bl	8003464 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005024:	e00a      	b.n	800503c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fe fa1d 	bl	8003464 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	; 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0b8      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800503c:	4b40      	ldr	r3, [pc, #256]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ee      	bne.n	8005026 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005048:	7dfb      	ldrb	r3, [r7, #23]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d105      	bne.n	800505a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800504e:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 80a4 	beq.w	80051ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005064:	4b36      	ldr	r3, [pc, #216]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d06b      	beq.n	8005148 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	2b02      	cmp	r3, #2
 8005076:	d149      	bne.n	800510c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a30      	ldr	r2, [pc, #192]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 800507e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005084:	f7fe f9ee 	bl	8003464 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800508c:	f7fe f9ea 	bl	8003464 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e087      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69da      	ldr	r2, [r3, #28]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	085b      	lsrs	r3, r3, #1
 80050c2:	3b01      	subs	r3, #1
 80050c4:	041b      	lsls	r3, r3, #16
 80050c6:	431a      	orrs	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	061b      	lsls	r3, r3, #24
 80050ce:	4313      	orrs	r3, r2
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 80050d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 80050de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe f9be 	bl	8003464 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe f9ba 	bl	8003464 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e057      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f0      	beq.n	80050ec <HAL_RCC_OscConfig+0x478>
 800510a:	e04f      	b.n	80051ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fe f9a4 	bl	8003464 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fe f9a0 	bl	8003464 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e03d      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_RCC_OscConfig+0x4cc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0x4ac>
 800513e:	e035      	b.n	80051ac <HAL_RCC_OscConfig+0x538>
 8005140:	40023800 	.word	0x40023800
 8005144:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCC_OscConfig+0x544>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d028      	beq.n	80051a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d121      	bne.n	80051a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800516e:	429a      	cmp	r2, r3
 8005170:	d11a      	bne.n	80051a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800517e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005180:	4293      	cmp	r3, r2
 8005182:	d111      	bne.n	80051a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518e:	085b      	lsrs	r3, r3, #1
 8005190:	3b01      	subs	r3, #1
 8005192:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800

080051bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0d0      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d910      	bls.n	8005204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 020f 	bic.w	r2, r3, #15
 80051ea:	4965      	ldr	r1, [pc, #404]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0b8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800521c:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a58      	ldr	r2, [pc, #352]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005234:	4b53      	ldr	r3, [pc, #332]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a52      	ldr	r2, [pc, #328]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800523e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b50      	ldr	r3, [pc, #320]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	494d      	ldr	r1, [pc, #308]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d040      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e073      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06b      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b39      	ldr	r3, [pc, #228]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4936      	ldr	r1, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fe f8d8 	bl	8003464 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fe f8d4 	bl	8003464 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e053      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d210      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 020f 	bic.w	r2, r3, #15
 80052f6:	4922      	ldr	r1, [pc, #136]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e032      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4916      	ldr	r1, [pc, #88]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	490e      	ldr	r1, [pc, #56]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534e:	f000 f821 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005352:	4601      	mov	r1, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	4a0a      	ldr	r2, [pc, #40]	; (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005360:	5cd3      	ldrb	r3, [r2, r3]
 8005362:	fa21 f303 	lsr.w	r3, r1, r3
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1d4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd fed0 	bl	8003114 <HAL_InitTick>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40023c00 	.word	0x40023c00
 8005384:	40023800 	.word	0x40023800
 8005388:	0800e968 	.word	0x0800e968
 800538c:	20000000 	.word	0x20000000
 8005390:	20000004 	.word	0x20000004

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	2300      	movs	r3, #0
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053aa:	4b63      	ldr	r3, [pc, #396]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d007      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x32>
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d008      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x38>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 80b4 	bne.w	8005528 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80053c2:	60bb      	str	r3, [r7, #8]
      break;
 80053c4:	e0b3      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053c6:	4b5e      	ldr	r3, [pc, #376]	; (8005540 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80053c8:	60bb      	str	r3, [r7, #8]
      break;
 80053ca:	e0b0      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053cc:	4b5a      	ldr	r3, [pc, #360]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053d6:	4b58      	ldr	r3, [pc, #352]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d04a      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e2:	4b55      	ldr	r3, [pc, #340]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	f04f 0400 	mov.w	r4, #0
 80053ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	ea03 0501 	and.w	r5, r3, r1
 80053f8:	ea04 0602 	and.w	r6, r4, r2
 80053fc:	4629      	mov	r1, r5
 80053fe:	4632      	mov	r2, r6
 8005400:	f04f 0300 	mov.w	r3, #0
 8005404:	f04f 0400 	mov.w	r4, #0
 8005408:	0154      	lsls	r4, r2, #5
 800540a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800540e:	014b      	lsls	r3, r1, #5
 8005410:	4619      	mov	r1, r3
 8005412:	4622      	mov	r2, r4
 8005414:	1b49      	subs	r1, r1, r5
 8005416:	eb62 0206 	sbc.w	r2, r2, r6
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	f04f 0400 	mov.w	r4, #0
 8005422:	0194      	lsls	r4, r2, #6
 8005424:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005428:	018b      	lsls	r3, r1, #6
 800542a:	1a5b      	subs	r3, r3, r1
 800542c:	eb64 0402 	sbc.w	r4, r4, r2
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	00e2      	lsls	r2, r4, #3
 800543a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800543e:	00d9      	lsls	r1, r3, #3
 8005440:	460b      	mov	r3, r1
 8005442:	4614      	mov	r4, r2
 8005444:	195b      	adds	r3, r3, r5
 8005446:	eb44 0406 	adc.w	r4, r4, r6
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	0262      	lsls	r2, r4, #9
 8005454:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005458:	0259      	lsls	r1, r3, #9
 800545a:	460b      	mov	r3, r1
 800545c:	4614      	mov	r4, r2
 800545e:	4618      	mov	r0, r3
 8005460:	4621      	mov	r1, r4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f04f 0400 	mov.w	r4, #0
 8005468:	461a      	mov	r2, r3
 800546a:	4623      	mov	r3, r4
 800546c:	f7fb fc14 	bl	8000c98 <__aeabi_uldivmod>
 8005470:	4603      	mov	r3, r0
 8005472:	460c      	mov	r4, r1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e049      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005478:	4b2f      	ldr	r3, [pc, #188]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	f04f 0400 	mov.w	r4, #0
 8005482:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005486:	f04f 0200 	mov.w	r2, #0
 800548a:	ea03 0501 	and.w	r5, r3, r1
 800548e:	ea04 0602 	and.w	r6, r4, r2
 8005492:	4629      	mov	r1, r5
 8005494:	4632      	mov	r2, r6
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	f04f 0400 	mov.w	r4, #0
 800549e:	0154      	lsls	r4, r2, #5
 80054a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054a4:	014b      	lsls	r3, r1, #5
 80054a6:	4619      	mov	r1, r3
 80054a8:	4622      	mov	r2, r4
 80054aa:	1b49      	subs	r1, r1, r5
 80054ac:	eb62 0206 	sbc.w	r2, r2, r6
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	f04f 0400 	mov.w	r4, #0
 80054b8:	0194      	lsls	r4, r2, #6
 80054ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80054be:	018b      	lsls	r3, r1, #6
 80054c0:	1a5b      	subs	r3, r3, r1
 80054c2:	eb64 0402 	sbc.w	r4, r4, r2
 80054c6:	f04f 0100 	mov.w	r1, #0
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80054d4:	00d9      	lsls	r1, r3, #3
 80054d6:	460b      	mov	r3, r1
 80054d8:	4614      	mov	r4, r2
 80054da:	195b      	adds	r3, r3, r5
 80054dc:	eb44 0406 	adc.w	r4, r4, r6
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	02a2      	lsls	r2, r4, #10
 80054ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80054ee:	0299      	lsls	r1, r3, #10
 80054f0:	460b      	mov	r3, r1
 80054f2:	4614      	mov	r4, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	4621      	mov	r1, r4
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f04f 0400 	mov.w	r4, #0
 80054fe:	461a      	mov	r2, r3
 8005500:	4623      	mov	r3, r4
 8005502:	f7fb fbc9 	bl	8000c98 <__aeabi_uldivmod>
 8005506:	4603      	mov	r3, r0
 8005508:	460c      	mov	r4, r1
 800550a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	0c1b      	lsrs	r3, r3, #16
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	3301      	adds	r3, #1
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	60bb      	str	r3, [r7, #8]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800552a:	60bb      	str	r3, [r7, #8]
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	68bb      	ldr	r3, [r7, #8]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	00f42400 	.word	0x00f42400
 8005540:	007a1200 	.word	0x007a1200

08005544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCC_GetHCLKFreq+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005560:	f7ff fff0 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 8005564:	4601      	mov	r1, r0
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	0a9b      	lsrs	r3, r3, #10
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4a03      	ldr	r2, [pc, #12]	; (8005580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005572:	5cd3      	ldrb	r3, [r2, r3]
 8005574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	0800e978 	.word	0x0800e978

08005584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005588:	f7ff ffdc 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 800558c:	4601      	mov	r1, r0
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0b5b      	lsrs	r3, r3, #13
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800559a:	5cd3      	ldrb	r3, [r2, r3]
 800559c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	0800e978 	.word	0x0800e978

080055ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	220f      	movs	r2, #15
 80055ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055bc:	4b12      	ldr	r3, [pc, #72]	; (8005608 <HAL_RCC_GetClockConfig+0x5c>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 0203 	and.w	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_RCC_GetClockConfig+0x5c>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <HAL_RCC_GetClockConfig+0x5c>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055e0:	4b09      	ldr	r3, [pc, #36]	; (8005608 <HAL_RCC_GetClockConfig+0x5c>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055ee:	4b07      	ldr	r3, [pc, #28]	; (800560c <HAL_RCC_GetClockConfig+0x60>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 020f 	and.w	r2, r3, #15
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	601a      	str	r2, [r3, #0]
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800
 800560c:	40023c00 	.word	0x40023c00

08005610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800561c:	2300      	movs	r3, #0
 800561e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005634:	4b65      	ldr	r3, [pc, #404]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800563a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800563e:	6093      	str	r3, [r2, #8]
 8005640:	4b62      	ldr	r3, [pc, #392]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	4960      	ldr	r1, [pc, #384]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564a:	4313      	orrs	r3, r2
 800564c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8005656:	2301      	movs	r3, #1
 8005658:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005666:	4b59      	ldr	r3, [pc, #356]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005674:	4955      	ldr	r1, [pc, #340]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005676:	4313      	orrs	r3, r2
 8005678:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005684:	d101      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8005692:	2301      	movs	r3, #1
 8005694:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d017      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056a2:	4b4a      	ldr	r3, [pc, #296]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	4946      	ldr	r1, [pc, #280]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056c0:	d101      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 808b 	beq.w	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056e0:	4b3a      	ldr	r3, [pc, #232]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	4a39      	ldr	r2, [pc, #228]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ea:	6413      	str	r3, [r2, #64]	; 0x40
 80056ec:	4b37      	ldr	r3, [pc, #220]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056f8:	4b35      	ldr	r3, [pc, #212]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a34      	ldr	r2, [pc, #208]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005704:	f7fd feae 	bl	8003464 <HAL_GetTick>
 8005708:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570c:	f7fd feaa 	bl	8003464 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b64      	cmp	r3, #100	; 0x64
 8005718:	d901      	bls.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e2ba      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800571e:	4b2c      	ldr	r3, [pc, #176]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800572a:	4b28      	ldr	r3, [pc, #160]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d035      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	429a      	cmp	r2, r3
 8005746:	d02e      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005748:	4b20      	ldr	r3, [pc, #128]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005750:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005752:	4b1e      	ldr	r3, [pc, #120]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a1d      	ldr	r2, [pc, #116]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800575e:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005768:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800576a:	4a18      	ldr	r2, [pc, #96]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b01      	cmp	r3, #1
 800577a:	d114      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fe72 	bl	8003464 <HAL_GetTick>
 8005780:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005782:	e00a      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005784:	f7fd fe6e 	bl	8003464 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005792:	4293      	cmp	r3, r2
 8005794:	d901      	bls.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e27c      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0ee      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057b2:	d111      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80057b4:	4b05      	ldr	r3, [pc, #20]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80057c2:	400b      	ands	r3, r1
 80057c4:	4901      	ldr	r1, [pc, #4]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
 80057ca:	e00b      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80057cc:	40023800 	.word	0x40023800
 80057d0:	40007000 	.word	0x40007000
 80057d4:	0ffffcff 	.word	0x0ffffcff
 80057d8:	4ba3      	ldr	r3, [pc, #652]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4aa2      	ldr	r2, [pc, #648]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057e2:	6093      	str	r3, [r2, #8]
 80057e4:	4ba0      	ldr	r3, [pc, #640]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057f0:	499d      	ldr	r1, [pc, #628]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d010      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005802:	4b99      	ldr	r3, [pc, #612]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005808:	4a97      	ldr	r2, [pc, #604]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800580a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005812:	4b95      	ldr	r3, [pc, #596]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005814:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4992      	ldr	r1, [pc, #584]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005830:	4b8d      	ldr	r3, [pc, #564]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005836:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	498a      	ldr	r1, [pc, #552]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005852:	4b85      	ldr	r3, [pc, #532]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005858:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005860:	4981      	ldr	r1, [pc, #516]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005874:	4b7c      	ldr	r3, [pc, #496]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005882:	4979      	ldr	r1, [pc, #484]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005896:	4b74      	ldr	r3, [pc, #464]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589c:	f023 0203 	bic.w	r2, r3, #3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	4970      	ldr	r1, [pc, #448]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058b8:	4b6b      	ldr	r3, [pc, #428]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f023 020c 	bic.w	r2, r3, #12
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	4968      	ldr	r1, [pc, #416]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058da:	4b63      	ldr	r3, [pc, #396]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e8:	495f      	ldr	r1, [pc, #380]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058fc:	4b5a      	ldr	r3, [pc, #360]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590a:	4957      	ldr	r1, [pc, #348]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800591e:	4b52      	ldr	r3, [pc, #328]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592c:	494e      	ldr	r1, [pc, #312]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005940:	4b49      	ldr	r3, [pc, #292]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	4946      	ldr	r1, [pc, #280]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005962:	4b41      	ldr	r3, [pc, #260]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005970:	493d      	ldr	r1, [pc, #244]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005984:	4b38      	ldr	r3, [pc, #224]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4935      	ldr	r1, [pc, #212]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059b4:	492c      	ldr	r1, [pc, #176]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c4:	d101      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059d6:	4b24      	ldr	r3, [pc, #144]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e4:	4920      	ldr	r1, [pc, #128]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a06:	4918      	ldr	r1, [pc, #96]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a1a:	4b13      	ldr	r3, [pc, #76]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a28:	490f      	ldr	r1, [pc, #60]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d005      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3e:	f040 809c 	bne.w	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4e:	f7fd fd09 	bl	8003464 <HAL_GetTick>
 8005a52:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a54:	e00a      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a56:	f7fd fd05 	bl	8003464 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d903      	bls.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e115      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a6c:	4b8b      	ldr	r3, [pc, #556]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ee      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d017      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d113      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a8c:	4b83      	ldr	r3, [pc, #524]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a92:	0e1b      	lsrs	r3, r3, #24
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	019a      	lsls	r2, r3, #6
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	061b      	lsls	r3, r3, #24
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	071b      	lsls	r3, r3, #28
 8005aac:	497b      	ldr	r1, [pc, #492]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d024      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ade:	d11f      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ae0:	4b6e      	ldr	r3, [pc, #440]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ae6:	0f1b      	lsrs	r3, r3, #28
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	019a      	lsls	r2, r3, #6
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	061b      	lsls	r3, r3, #24
 8005afa:	431a      	orrs	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	071b      	lsls	r3, r3, #28
 8005b00:	4966      	ldr	r1, [pc, #408]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b08:	4b64      	ldr	r3, [pc, #400]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0e:	f023 021f 	bic.w	r2, r3, #31
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	4960      	ldr	r1, [pc, #384]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00d      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	019a      	lsls	r2, r3, #6
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	061b      	lsls	r3, r3, #24
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	071b      	lsls	r3, r3, #28
 8005b40:	4956      	ldr	r1, [pc, #344]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b48:	4b54      	ldr	r3, [pc, #336]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a53      	ldr	r2, [pc, #332]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fd fc86 	bl	8003464 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b5c:	f7fd fc82 	bl	8003464 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e092      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 8088 	bne.w	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b82:	4b46      	ldr	r3, [pc, #280]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a45      	ldr	r2, [pc, #276]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b8e:	f7fd fc69 	bl	8003464 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b96:	f7fd fc65 	bl	8003464 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b64      	cmp	r3, #100	; 0x64
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e075      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb4:	d0ef      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d024      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d120      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be4:	0c1b      	lsrs	r3, r3, #16
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	019a      	lsls	r2, r3, #6
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	061b      	lsls	r3, r3, #24
 8005bfe:	4927      	ldr	r1, [pc, #156]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c06:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	3b01      	subs	r3, #1
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	4920      	ldr	r1, [pc, #128]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d018      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c34:	d113      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	0e1b      	lsrs	r3, r3, #24
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	019a      	lsls	r2, r3, #6
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	041b      	lsls	r3, r3, #16
 8005c50:	431a      	orrs	r2, r3
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	061b      	lsls	r3, r3, #24
 8005c56:	4911      	ldr	r1, [pc, #68]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6a:	f7fd fbfb 	bl	8003464 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c72:	f7fd fbf7 	bl	8003464 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e007      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c90:	d1ef      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40023800 	.word	0x40023800

08005ca0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e084      	b.n	8005dbc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d106      	bne.n	8005cd2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fd f91d 	bl	8002f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cf2:	d902      	bls.n	8005cfa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e002      	b.n	8005d00 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d08:	d007      	beq.n	8005d1a <HAL_SPI_Init+0x7a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d12:	d002      	beq.n	8005d1a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d2a:	d903      	bls.n	8005d34 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	631a      	str	r2, [r3, #48]	; 0x30
 8005d32:	e002      	b.n	8005d3a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	ea42 0103 	orr.w	r1, r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	0c1b      	lsrs	r3, r3, #16
 8005d7a:	f003 0204 	and.w	r2, r3, #4
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	ea42 0103 	orr.w	r1, r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005daa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_SPI_Transmit+0x22>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e150      	b.n	8006088 <HAL_SPI_Transmit+0x2c4>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dee:	f7fd fb39 	bl	8003464 <HAL_GetTick>
 8005df2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005df4:	88fb      	ldrh	r3, [r7, #6]
 8005df6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e04:	2302      	movs	r3, #2
 8005e06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e08:	e135      	b.n	8006076 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_SPI_Transmit+0x52>
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d102      	bne.n	8005e1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e1a:	e12c      	b.n	8006076 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2203      	movs	r2, #3
 8005e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	88fa      	ldrh	r2, [r7, #6]
 8005e34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	88fa      	ldrh	r2, [r7, #6]
 8005e3a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e66:	d107      	bne.n	8005e78 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e76:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d007      	beq.n	8005e96 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e9e:	d94b      	bls.n	8005f38 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_Transmit+0xea>
 8005ea8:	8afb      	ldrh	r3, [r7, #22]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d13e      	bne.n	8005f2c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed2:	e02b      	b.n	8005f2c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d112      	bne.n	8005f08 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee6:	881a      	ldrh	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	1c9a      	adds	r2, r3, #2
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f06:	e011      	b.n	8005f2c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f08:	f7fd faac 	bl	8003464 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d803      	bhi.n	8005f20 <HAL_SPI_Transmit+0x15c>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f1e:	d102      	bne.n	8005f26 <HAL_SPI_Transmit+0x162>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d102      	bne.n	8005f2c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f2a:	e0a4      	b.n	8006076 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1ce      	bne.n	8005ed4 <HAL_SPI_Transmit+0x110>
 8005f36:	e07c      	b.n	8006032 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_Transmit+0x182>
 8005f40:	8afb      	ldrh	r3, [r7, #22]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d170      	bne.n	8006028 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d912      	bls.n	8005f76 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f60:	1c9a      	adds	r2, r3, #2
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	3b02      	subs	r3, #2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f74:	e058      	b.n	8006028 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	330c      	adds	r3, #12
 8005f80:	7812      	ldrb	r2, [r2, #0]
 8005f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f9c:	e044      	b.n	8006028 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d12b      	bne.n	8006004 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d912      	bls.n	8005fdc <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	881a      	ldrh	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc6:	1c9a      	adds	r2, r3, #2
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b02      	subs	r3, #2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fda:	e025      	b.n	8006028 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	330c      	adds	r3, #12
 8005fe6:	7812      	ldrb	r2, [r2, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006002:	e011      	b.n	8006028 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006004:	f7fd fa2e 	bl	8003464 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d803      	bhi.n	800601c <HAL_SPI_Transmit+0x258>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800601a:	d102      	bne.n	8006022 <HAL_SPI_Transmit+0x25e>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d102      	bne.n	8006028 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006026:	e026      	b.n	8006076 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1b5      	bne.n	8005f9e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 fb14 	bl	8006664 <SPI_EndRxTxTransaction>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10a      	bne.n	8006066 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006050:	2300      	movs	r3, #0
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	77fb      	strb	r3, [r7, #31]
 8006072:	e000      	b.n	8006076 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006074:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006086:	7ffb      	ldrb	r3, [r7, #31]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08a      	sub	sp, #40	; 0x28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800609e:	2301      	movs	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_SPI_TransmitReceive+0x26>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e1fb      	b.n	80064ae <HAL_SPI_TransmitReceive+0x41e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060be:	f7fd f9d1 	bl	8003464 <HAL_GetTick>
 80060c2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060ca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80060d2:	887b      	ldrh	r3, [r7, #2]
 80060d4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80060d6:	887b      	ldrh	r3, [r7, #2]
 80060d8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80060da:	7efb      	ldrb	r3, [r7, #27]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d00e      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x6e>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e6:	d106      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_SPI_TransmitReceive+0x66>
 80060f0:	7efb      	ldrb	r3, [r7, #27]
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d003      	beq.n	80060fe <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80060f6:	2302      	movs	r3, #2
 80060f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80060fc:	e1cd      	b.n	800649a <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x80>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_SPI_TransmitReceive+0x80>
 800610a:	887b      	ldrh	r3, [r7, #2]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d103      	bne.n	8006118 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006116:	e1c0      	b.n	800649a <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b04      	cmp	r3, #4
 8006122:	d003      	beq.n	800612c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2205      	movs	r2, #5
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	887a      	ldrh	r2, [r7, #2]
 800613c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	887a      	ldrh	r2, [r7, #2]
 8006144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	887a      	ldrh	r2, [r7, #2]
 8006152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	887a      	ldrh	r2, [r7, #2]
 8006158:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800616e:	d802      	bhi.n	8006176 <HAL_SPI_TransmitReceive+0xe6>
 8006170:	8a3b      	ldrh	r3, [r7, #16]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d908      	bls.n	8006188 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	e007      	b.n	8006198 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006196:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	d007      	beq.n	80061b6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061be:	d97c      	bls.n	80062ba <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <HAL_SPI_TransmitReceive+0x13e>
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d169      	bne.n	80062a2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	881a      	ldrh	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061f2:	e056      	b.n	80062a2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d11b      	bne.n	800623a <HAL_SPI_TransmitReceive+0x1aa>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006206:	b29b      	uxth	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d016      	beq.n	800623a <HAL_SPI_TransmitReceive+0x1aa>
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	2b01      	cmp	r3, #1
 8006210:	d113      	bne.n	800623a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006216:	881a      	ldrh	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	1c9a      	adds	r2, r3, #2
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800622c:	b29b      	uxth	r3, r3
 800622e:	3b01      	subs	r3, #1
 8006230:	b29a      	uxth	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d11c      	bne.n	8006282 <HAL_SPI_TransmitReceive+0x1f2>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800624e:	b29b      	uxth	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d016      	beq.n	8006282 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	b292      	uxth	r2, r2
 8006260:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	1c9a      	adds	r2, r3, #2
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800627e:	2301      	movs	r3, #1
 8006280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006282:	f7fd f8ef 	bl	8003464 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628e:	429a      	cmp	r2, r3
 8006290:	d807      	bhi.n	80062a2 <HAL_SPI_TransmitReceive+0x212>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006298:	d003      	beq.n	80062a2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80062a0:	e0fb      	b.n	800649a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1a3      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x164>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d19d      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x164>
 80062b8:	e0df      	b.n	800647a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_SPI_TransmitReceive+0x23a>
 80062c2:	8a7b      	ldrh	r3, [r7, #18]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f040 80cb 	bne.w	8006460 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d912      	bls.n	80062fa <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d8:	881a      	ldrh	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	1c9a      	adds	r2, r3, #2
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	3b02      	subs	r3, #2
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062f8:	e0b2      	b.n	8006460 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	7812      	ldrb	r2, [r2, #0]
 8006306:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006320:	e09e      	b.n	8006460 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 0302 	and.w	r3, r3, #2
 800632c:	2b02      	cmp	r3, #2
 800632e:	d134      	bne.n	800639a <HAL_SPI_TransmitReceive+0x30a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d02f      	beq.n	800639a <HAL_SPI_TransmitReceive+0x30a>
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	2b01      	cmp	r3, #1
 800633e:	d12c      	bne.n	800639a <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b01      	cmp	r3, #1
 8006348:	d912      	bls.n	8006370 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634e:	881a      	ldrh	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006364:	b29b      	uxth	r3, r3
 8006366:	3b02      	subs	r3, #2
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800636e:	e012      	b.n	8006396 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	7812      	ldrb	r2, [r2, #0]
 800637c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d148      	bne.n	800643a <HAL_SPI_TransmitReceive+0x3aa>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d042      	beq.n	800643a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d923      	bls.n	8006408 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	b292      	uxth	r2, r2
 80063cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	1c9a      	adds	r2, r3, #2
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b02      	subs	r3, #2
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d81f      	bhi.n	8006436 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	e016      	b.n	8006436 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f103 020c 	add.w	r2, r3, #12
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	7812      	ldrb	r2, [r2, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006436:	2301      	movs	r3, #1
 8006438:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800643a:	f7fd f813 	bl	8003464 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006446:	429a      	cmp	r2, r3
 8006448:	d803      	bhi.n	8006452 <HAL_SPI_TransmitReceive+0x3c2>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006450:	d102      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x3c8>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800645e:	e01c      	b.n	800649a <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	f47f af5b 	bne.w	8006322 <HAL_SPI_TransmitReceive+0x292>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	f47f af54 	bne.w	8006322 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f8f0 	bl	8006664 <SPI_EndRxTxTransaction>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	661a      	str	r2, [r3, #96]	; 0x60
 8006496:	e000      	b.n	800649a <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006498:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	60f8      	str	r0, [r7, #12]
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	4613      	mov	r3, r2
 80064c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064c6:	e04c      	b.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ce:	d048      	beq.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80064d0:	f7fc ffc8 	bl	8003464 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d902      	bls.n	80064e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d13d      	bne.n	8006562 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80064f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064fe:	d111      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006508:	d004      	beq.n	8006514 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006512:	d107      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006522:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800652c:	d10f      	bne.n	800654e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800654c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e00f      	b.n	8006582 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d1a3      	bne.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006598:	e057      	b.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065a0:	d106      	bne.n	80065b0 <SPI_WaitFifoStateUntilTimeout+0x26>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	330c      	adds	r3, #12
 80065ae:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d048      	beq.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80065b8:	f7fc ff54 	bl	8003464 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d902      	bls.n	80065ce <SPI_WaitFifoStateUntilTimeout+0x44>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d13d      	bne.n	800664a <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065e6:	d111      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0x82>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f0:	d004      	beq.n	80065fc <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fa:	d107      	bne.n	800660c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800660a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006614:	d10f      	bne.n	8006636 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006634:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e008      	b.n	800665c <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4013      	ands	r3, r2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d19f      	bne.n	800659a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af02      	add	r7, sp, #8
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff ff84 	bl	800658a <SPI_WaitFifoStateUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	f043 0220 	orr.w	r2, r3, #32
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e027      	b.n	80066e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	2180      	movs	r1, #128	; 0x80
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f7ff ff07 	bl	80064b6 <SPI_WaitFlagStateUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e014      	b.n	80066e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f7ff ff5d 	bl	800658a <SPI_WaitFifoStateUntilTimeout>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066da:	f043 0220 	orr.w	r2, r3, #32
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	e000      	b.n	80066e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e01d      	b.n	800673e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7fc fc3c 	bl	8002f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2202      	movs	r2, #2
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3304      	adds	r3, #4
 800672c:	4619      	mov	r1, r3
 800672e:	4610      	mov	r0, r2
 8006730:	f000 fae8 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <HAL_TIM_Base_Start_IT+0x50>)
 8006768:	4013      	ands	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b06      	cmp	r3, #6
 8006770:	d00b      	beq.n	800678a <HAL_TIM_Base_Start_IT+0x42>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006778:	d007      	beq.n	800678a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0201 	orr.w	r2, r2, #1
 8006788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3714      	adds	r7, #20
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	00010007 	.word	0x00010007

0800679c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d101      	bne.n	80067ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e01d      	b.n	80067ea <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d106      	bne.n	80067c8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 f815 	bl	80067f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2202      	movs	r2, #2
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f000 fa92 	bl	8006d04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d122      	bne.n	8006862 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b02      	cmp	r3, #2
 8006828:	d11b      	bne.n	8006862 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0202 	mvn.w	r2, #2
 8006832:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fa3d 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 800684e:	e005      	b.n	800685c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fa2f 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fa40 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d122      	bne.n	80068b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0304 	and.w	r3, r3, #4
 800687a:	2b04      	cmp	r3, #4
 800687c:	d11b      	bne.n	80068b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f06f 0204 	mvn.w	r2, #4
 8006886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fa13 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80068a2:	e005      	b.n	80068b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fa05 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fa16 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d122      	bne.n	800690a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	2b08      	cmp	r3, #8
 80068d0:	d11b      	bne.n	800690a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0208 	mvn.w	r2, #8
 80068da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2204      	movs	r2, #4
 80068e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f003 0303 	and.w	r3, r3, #3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f9e9 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 80068f6:	e005      	b.n	8006904 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 f9db 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f9ec 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d122      	bne.n	800695e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b10      	cmp	r3, #16
 8006924:	d11b      	bne.n	800695e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f06f 0210 	mvn.w	r2, #16
 800692e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2208      	movs	r2, #8
 8006934:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006940:	2b00      	cmp	r3, #0
 8006942:	d003      	beq.n	800694c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f9bf 	bl	8006cc8 <HAL_TIM_IC_CaptureCallback>
 800694a:	e005      	b.n	8006958 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f9b1 	bl	8006cb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f9c2 	bl	8006cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d10e      	bne.n	800698a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b01      	cmp	r3, #1
 8006978:	d107      	bne.n	800698a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f06f 0201 	mvn.w	r2, #1
 8006982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fc f9f5 	bl	8002d74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d10e      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d107      	bne.n	80069b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fdd7 	bl	8007564 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c4:	d10e      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	d107      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fdca 	bl	8007578 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d10e      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fc:	2b40      	cmp	r3, #64	; 0x40
 80069fe:	d107      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f970 	bl	8006cf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d10e      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d107      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0220 	mvn.w	r2, #32
 8006a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fd8a 	bl	8007550 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e06c      	b.n	8006b38 <HAL_TIM_OC_ConfigChannel+0xf4>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2202      	movs	r2, #2
 8006a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b14      	cmp	r3, #20
 8006a72:	d857      	bhi.n	8006b24 <HAL_TIM_OC_ConfigChannel+0xe0>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006ad1 	.word	0x08006ad1
 8006a80:	08006b25 	.word	0x08006b25
 8006a84:	08006b25 	.word	0x08006b25
 8006a88:	08006b25 	.word	0x08006b25
 8006a8c:	08006adf 	.word	0x08006adf
 8006a90:	08006b25 	.word	0x08006b25
 8006a94:	08006b25 	.word	0x08006b25
 8006a98:	08006b25 	.word	0x08006b25
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006b25 	.word	0x08006b25
 8006aa4:	08006b25 	.word	0x08006b25
 8006aa8:	08006b25 	.word	0x08006b25
 8006aac:	08006afb 	.word	0x08006afb
 8006ab0:	08006b25 	.word	0x08006b25
 8006ab4:	08006b25 	.word	0x08006b25
 8006ab8:	08006b25 	.word	0x08006b25
 8006abc:	08006b09 	.word	0x08006b09
 8006ac0:	08006b25 	.word	0x08006b25
 8006ac4:	08006b25 	.word	0x08006b25
 8006ac8:	08006b25 	.word	0x08006b25
 8006acc:	08006b17 	.word	0x08006b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 f9b4 	bl	8006e44 <TIM_OC1_SetConfig>
      break;
 8006adc:	e023      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fa1f 	bl	8006f28 <TIM_OC2_SetConfig>
      break;
 8006aea:	e01c      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fa90 	bl	8007018 <TIM_OC3_SetConfig>
      break;
 8006af8:	e015      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 faff 	bl	8007104 <TIM_OC4_SetConfig>
      break;
 8006b06:	e00e      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fb50 	bl	80071b4 <TIM_OC5_SetConfig>
      break;
 8006b14:	e007      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68b9      	ldr	r1, [r7, #8]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fb9b 	bl	8007258 <TIM_OC6_SetConfig>
      break;
 8006b22:	e000      	b.n	8006b26 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8006b24:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_TIM_ConfigClockSource+0x18>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e0a6      	b.n	8006ca6 <HAL_TIM_ConfigClockSource+0x166>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4b4f      	ldr	r3, [pc, #316]	; (8006cb0 <HAL_TIM_ConfigClockSource+0x170>)
 8006b74:	4013      	ands	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d067      	beq.n	8006c60 <HAL_TIM_ConfigClockSource+0x120>
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	d80b      	bhi.n	8006bac <HAL_TIM_ConfigClockSource+0x6c>
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d073      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x140>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d802      	bhi.n	8006ba2 <HAL_TIM_ConfigClockSource+0x62>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d06f      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006ba0:	e078      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d06c      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x140>
 8006ba6:	2b30      	cmp	r3, #48	; 0x30
 8006ba8:	d06a      	beq.n	8006c80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006baa:	e073      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bac:	2b70      	cmp	r3, #112	; 0x70
 8006bae:	d00d      	beq.n	8006bcc <HAL_TIM_ConfigClockSource+0x8c>
 8006bb0:	2b70      	cmp	r3, #112	; 0x70
 8006bb2:	d804      	bhi.n	8006bbe <HAL_TIM_ConfigClockSource+0x7e>
 8006bb4:	2b50      	cmp	r3, #80	; 0x50
 8006bb6:	d033      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0xe0>
 8006bb8:	2b60      	cmp	r3, #96	; 0x60
 8006bba:	d041      	beq.n	8006c40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bbc:	e06a      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	d066      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x152>
 8006bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc8:	d017      	beq.n	8006bfa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bca:	e063      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6818      	ldr	r0, [r3, #0]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	6899      	ldr	r1, [r3, #8]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	f000 fc0a 	bl	80073f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	609a      	str	r2, [r3, #8]
      break;
 8006bf8:	e04c      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6818      	ldr	r0, [r3, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	6899      	ldr	r1, [r3, #8]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f000 fbf3 	bl	80073f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	609a      	str	r2, [r3, #8]
      break;
 8006c1e:	e039      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6859      	ldr	r1, [r3, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	f000 fb67 	bl	8007300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2150      	movs	r1, #80	; 0x50
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fbc0 	bl	80073be <TIM_ITRx_SetConfig>
      break;
 8006c3e:	e029      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	6859      	ldr	r1, [r3, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	f000 fb86 	bl	800735e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	2160      	movs	r1, #96	; 0x60
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f000 fbb0 	bl	80073be <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e019      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	6859      	ldr	r1, [r3, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f000 fb47 	bl	8007300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2140      	movs	r1, #64	; 0x40
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 fba0 	bl	80073be <TIM_ITRx_SetConfig>
      break;
 8006c7e:	e009      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f000 fb97 	bl	80073be <TIM_ITRx_SetConfig>
      break;
 8006c90:	e000      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	fffeff88 	.word	0xfffeff88

08006cb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a40      	ldr	r2, [pc, #256]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3b      	ldr	r2, [pc, #236]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a3a      	ldr	r2, [pc, #232]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a2f      	ldr	r2, [pc, #188]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d64:	d027      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <TIM_Base_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d023      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2b      	ldr	r2, [pc, #172]	; (8006e20 <TIM_Base_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a2a      	ldr	r2, [pc, #168]	; (8006e24 <TIM_Base_SetConfig+0x120>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a29      	ldr	r2, [pc, #164]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a28      	ldr	r2, [pc, #160]	; (8006e2c <TIM_Base_SetConfig+0x128>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a27      	ldr	r2, [pc, #156]	; (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a26      	ldr	r2, [pc, #152]	; (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a25      	ldr	r2, [pc, #148]	; (8006e38 <TIM_Base_SetConfig+0x134>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a24      	ldr	r2, [pc, #144]	; (8006e3c <TIM_Base_SetConfig+0x138>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a23      	ldr	r2, [pc, #140]	; (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a0c      	ldr	r2, [pc, #48]	; (8006e28 <TIM_Base_SetConfig+0x124>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40010400 	.word	0x40010400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40014400 	.word	0x40014400
 8006e34:	40014800 	.word	0x40014800
 8006e38:	40001800 	.word	0x40001800
 8006e3c:	40001c00 	.word	0x40001c00
 8006e40:	40002000 	.word	0x40002000

08006e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4b2b      	ldr	r3, [pc, #172]	; (8006f1c <TIM_OC1_SetConfig+0xd8>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0302 	bic.w	r3, r3, #2
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <TIM_OC1_SetConfig+0xdc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC1_SetConfig+0x64>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <TIM_OC1_SetConfig+0xe0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d10c      	bne.n	8006ec2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f023 0308 	bic.w	r3, r3, #8
 8006eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 0304 	bic.w	r3, r3, #4
 8006ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a16      	ldr	r2, [pc, #88]	; (8006f20 <TIM_OC1_SetConfig+0xdc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d003      	beq.n	8006ed2 <TIM_OC1_SetConfig+0x8e>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a15      	ldr	r2, [pc, #84]	; (8006f24 <TIM_OC1_SetConfig+0xe0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d111      	bne.n	8006ef6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	621a      	str	r2, [r3, #32]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr
 8006f1c:	fffeff8f 	.word	0xfffeff8f
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40010400 	.word	0x40010400

08006f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0210 	bic.w	r2, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4b2e      	ldr	r3, [pc, #184]	; (800700c <TIM_OC2_SetConfig+0xe4>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0320 	bic.w	r3, r3, #32
 8006f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a23      	ldr	r2, [pc, #140]	; (8007010 <TIM_OC2_SetConfig+0xe8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0x68>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <TIM_OC2_SetConfig+0xec>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10d      	bne.n	8006fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <TIM_OC2_SetConfig+0xe8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x94>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	; (8007014 <TIM_OC2_SetConfig+0xec>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d113      	bne.n	8006fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	feff8fff 	.word	0xfeff8fff
 8007010:	40010000 	.word	0x40010000
 8007014:	40010400 	.word	0x40010400

08007018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	4b2d      	ldr	r3, [pc, #180]	; (80070f8 <TIM_OC3_SetConfig+0xe0>)
 8007044:	4013      	ands	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	4313      	orrs	r3, r2
 800706c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a22      	ldr	r2, [pc, #136]	; (80070fc <TIM_OC3_SetConfig+0xe4>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d003      	beq.n	800707e <TIM_OC3_SetConfig+0x66>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a21      	ldr	r2, [pc, #132]	; (8007100 <TIM_OC3_SetConfig+0xe8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d10d      	bne.n	800709a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a17      	ldr	r2, [pc, #92]	; (80070fc <TIM_OC3_SetConfig+0xe4>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d003      	beq.n	80070aa <TIM_OC3_SetConfig+0x92>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a16      	ldr	r2, [pc, #88]	; (8007100 <TIM_OC3_SetConfig+0xe8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d113      	bne.n	80070d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	621a      	str	r2, [r3, #32]
}
 80070ec:	bf00      	nop
 80070ee:	371c      	adds	r7, #28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	fffeff8f 	.word	0xfffeff8f
 80070fc:	40010000 	.word	0x40010000
 8007100:	40010400 	.word	0x40010400

08007104 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4b1e      	ldr	r3, [pc, #120]	; (80071a8 <TIM_OC4_SetConfig+0xa4>)
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800713a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	021b      	lsls	r3, r3, #8
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	031b      	lsls	r3, r3, #12
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a13      	ldr	r2, [pc, #76]	; (80071ac <TIM_OC4_SetConfig+0xa8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <TIM_OC4_SetConfig+0x68>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a12      	ldr	r2, [pc, #72]	; (80071b0 <TIM_OC4_SetConfig+0xac>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d109      	bne.n	8007180 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	019b      	lsls	r3, r3, #6
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685a      	ldr	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	621a      	str	r2, [r3, #32]
}
 800719a:	bf00      	nop
 800719c:	371c      	adds	r7, #28
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	feff8fff 	.word	0xfeff8fff
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40010400 	.word	0x40010400

080071b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	4b1b      	ldr	r3, [pc, #108]	; (800724c <TIM_OC5_SetConfig+0x98>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a12      	ldr	r2, [pc, #72]	; (8007250 <TIM_OC5_SetConfig+0x9c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_OC5_SetConfig+0x5e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a11      	ldr	r2, [pc, #68]	; (8007254 <TIM_OC5_SetConfig+0xa0>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d109      	bne.n	8007226 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007218:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	4313      	orrs	r3, r2
 8007224:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	621a      	str	r2, [r3, #32]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	fffeff8f 	.word	0xfffeff8f
 8007250:	40010000 	.word	0x40010000
 8007254:	40010400 	.word	0x40010400

08007258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	4b1c      	ldr	r3, [pc, #112]	; (80072f4 <TIM_OC6_SetConfig+0x9c>)
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800729a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	051b      	lsls	r3, r3, #20
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <TIM_OC6_SetConfig+0xa0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC6_SetConfig+0x60>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a12      	ldr	r2, [pc, #72]	; (80072fc <TIM_OC6_SetConfig+0xa4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d109      	bne.n	80072cc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	029b      	lsls	r3, r3, #10
 80072c6:	697a      	ldr	r2, [r7, #20]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	621a      	str	r2, [r3, #32]
}
 80072e6:	bf00      	nop
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	feff8fff 	.word	0xfeff8fff
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400

08007300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	f023 0201 	bic.w	r2, r3, #1
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800732a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f023 030a 	bic.w	r3, r3, #10
 800733c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800735e:	b480      	push	{r7}
 8007360:	b087      	sub	sp, #28
 8007362:	af00      	add	r7, sp, #0
 8007364:	60f8      	str	r0, [r7, #12]
 8007366:	60b9      	str	r1, [r7, #8]
 8007368:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f023 0210 	bic.w	r2, r3, #16
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007388:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	031b      	lsls	r3, r3, #12
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	4313      	orrs	r3, r2
 8007392:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800739a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	621a      	str	r2, [r3, #32]
}
 80073b2:	bf00      	nop
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073be:	b480      	push	{r7}
 80073c0:	b085      	sub	sp, #20
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	f043 0307 	orr.w	r3, r3, #7
 80073e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	609a      	str	r2, [r3, #8]
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b087      	sub	sp, #28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800740e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	021a      	lsls	r2, r3, #8
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	431a      	orrs	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4313      	orrs	r3, r2
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	609a      	str	r2, [r3, #8]
}
 8007428:	bf00      	nop
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007448:	2302      	movs	r3, #2
 800744a:	e06d      	b.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a30      	ldr	r2, [pc, #192]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2f      	ldr	r2, [pc, #188]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d108      	bne.n	8007492 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007486:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d022      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d01d      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1d      	ldr	r2, [pc, #116]	; (800753c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1c      	ldr	r2, [pc, #112]	; (8007540 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a15      	ldr	r2, [pc, #84]	; (8007538 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a16      	ldr	r2, [pc, #88]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a15      	ldr	r2, [pc, #84]	; (800754c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d10c      	bne.n	8007516 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007502:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400
 800753c:	40000400 	.word	0x40000400
 8007540:	40000800 	.word	0x40000800
 8007544:	40000c00 	.word	0x40000c00
 8007548:	40014000 	.word	0x40014000
 800754c:	40001800 	.word	0x40001800

08007550 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e040      	b.n	8007620 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fb fd10 	bl	8002fd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2224      	movs	r2, #36	; 0x24
 80075b8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0201 	bic.w	r2, r2, #1
 80075c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8be 	bl	800774c <UART_SetConfig>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e022      	b.n	8007620 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d002      	beq.n	80075e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fb5c 	bl	8007ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007606:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fbe3 	bl	8007de4 <UART_CheckIdleState>
 800761e:	4603      	mov	r3, r0
}
 8007620:	4618      	mov	r0, r3
 8007622:	3708      	adds	r7, #8
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	4613      	mov	r3, r2
 8007636:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800763c:	2b20      	cmp	r3, #32
 800763e:	d17f      	bne.n	8007740 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Transmit+0x24>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e078      	b.n	8007742 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_UART_Transmit+0x36>
 800765a:	2302      	movs	r3, #2
 800765c:	e071      	b.n	8007742 <HAL_UART_Transmit+0x11a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2221      	movs	r2, #33	; 0x21
 8007670:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007672:	f7fb fef7 	bl	8003464 <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	88fa      	ldrh	r2, [r7, #6]
 800767c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007690:	d108      	bne.n	80076a4 <HAL_UART_Transmit+0x7c>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	61bb      	str	r3, [r7, #24]
 80076a2:	e003      	b.n	80076ac <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80076b4:	e02c      	b.n	8007710 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fbbe 	bl	8007e42 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e038      	b.n	8007742 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	3302      	adds	r3, #2
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e007      	b.n	80076fe <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	781a      	ldrb	r2, [r3, #0]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	3301      	adds	r3, #1
 80076fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007704:	b29b      	uxth	r3, r3
 8007706:	3b01      	subs	r3, #1
 8007708:	b29a      	uxth	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007716:	b29b      	uxth	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1cc      	bne.n	80076b6 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2200      	movs	r2, #0
 8007724:	2140      	movs	r1, #64	; 0x40
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fb8b 	bl	8007e42 <UART_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e005      	b.n	8007742 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2220      	movs	r2, #32
 800773a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800773c:	2300      	movs	r3, #0
 800773e:	e000      	b.n	8007742 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007740:	2302      	movs	r3, #2
  }
}
 8007742:	4618      	mov	r0, r3
 8007744:	3720      	adds	r7, #32
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b088      	sub	sp, #32
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007754:	2300      	movs	r3, #0
 8007756:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4bb1      	ldr	r3, [pc, #708]	; (8007a40 <UART_SetConfig+0x2f4>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6812      	ldr	r2, [r2, #0]
 8007782:	6939      	ldr	r1, [r7, #16]
 8007784:	430b      	orrs	r3, r1
 8007786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	430a      	orrs	r2, r1
 80077c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a9f      	ldr	r2, [pc, #636]	; (8007a44 <UART_SetConfig+0x2f8>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d121      	bne.n	8007810 <UART_SetConfig+0xc4>
 80077cc:	4b9e      	ldr	r3, [pc, #632]	; (8007a48 <UART_SetConfig+0x2fc>)
 80077ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d816      	bhi.n	8007808 <UART_SetConfig+0xbc>
 80077da:	a201      	add	r2, pc, #4	; (adr r2, 80077e0 <UART_SetConfig+0x94>)
 80077dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e0:	080077f1 	.word	0x080077f1
 80077e4:	080077fd 	.word	0x080077fd
 80077e8:	080077f7 	.word	0x080077f7
 80077ec:	08007803 	.word	0x08007803
 80077f0:	2301      	movs	r3, #1
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	e151      	b.n	8007a9a <UART_SetConfig+0x34e>
 80077f6:	2302      	movs	r3, #2
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e14e      	b.n	8007a9a <UART_SetConfig+0x34e>
 80077fc:	2304      	movs	r3, #4
 80077fe:	77fb      	strb	r3, [r7, #31]
 8007800:	e14b      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007802:	2308      	movs	r3, #8
 8007804:	77fb      	strb	r3, [r7, #31]
 8007806:	e148      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007808:	2310      	movs	r3, #16
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	bf00      	nop
 800780e:	e144      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a8d      	ldr	r2, [pc, #564]	; (8007a4c <UART_SetConfig+0x300>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d134      	bne.n	8007884 <UART_SetConfig+0x138>
 800781a:	4b8b      	ldr	r3, [pc, #556]	; (8007a48 <UART_SetConfig+0x2fc>)
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007820:	f003 030c 	and.w	r3, r3, #12
 8007824:	2b0c      	cmp	r3, #12
 8007826:	d829      	bhi.n	800787c <UART_SetConfig+0x130>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <UART_SetConfig+0xe4>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007865 	.word	0x08007865
 8007834:	0800787d 	.word	0x0800787d
 8007838:	0800787d 	.word	0x0800787d
 800783c:	0800787d 	.word	0x0800787d
 8007840:	08007871 	.word	0x08007871
 8007844:	0800787d 	.word	0x0800787d
 8007848:	0800787d 	.word	0x0800787d
 800784c:	0800787d 	.word	0x0800787d
 8007850:	0800786b 	.word	0x0800786b
 8007854:	0800787d 	.word	0x0800787d
 8007858:	0800787d 	.word	0x0800787d
 800785c:	0800787d 	.word	0x0800787d
 8007860:	08007877 	.word	0x08007877
 8007864:	2300      	movs	r3, #0
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e117      	b.n	8007a9a <UART_SetConfig+0x34e>
 800786a:	2302      	movs	r3, #2
 800786c:	77fb      	strb	r3, [r7, #31]
 800786e:	e114      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007870:	2304      	movs	r3, #4
 8007872:	77fb      	strb	r3, [r7, #31]
 8007874:	e111      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007876:	2308      	movs	r3, #8
 8007878:	77fb      	strb	r3, [r7, #31]
 800787a:	e10e      	b.n	8007a9a <UART_SetConfig+0x34e>
 800787c:	2310      	movs	r3, #16
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	bf00      	nop
 8007882:	e10a      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a71      	ldr	r2, [pc, #452]	; (8007a50 <UART_SetConfig+0x304>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d120      	bne.n	80078d0 <UART_SetConfig+0x184>
 800788e:	4b6e      	ldr	r3, [pc, #440]	; (8007a48 <UART_SetConfig+0x2fc>)
 8007890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007894:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007898:	2b10      	cmp	r3, #16
 800789a:	d00f      	beq.n	80078bc <UART_SetConfig+0x170>
 800789c:	2b10      	cmp	r3, #16
 800789e:	d802      	bhi.n	80078a6 <UART_SetConfig+0x15a>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d005      	beq.n	80078b0 <UART_SetConfig+0x164>
 80078a4:	e010      	b.n	80078c8 <UART_SetConfig+0x17c>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d005      	beq.n	80078b6 <UART_SetConfig+0x16a>
 80078aa:	2b30      	cmp	r3, #48	; 0x30
 80078ac:	d009      	beq.n	80078c2 <UART_SetConfig+0x176>
 80078ae:	e00b      	b.n	80078c8 <UART_SetConfig+0x17c>
 80078b0:	2300      	movs	r3, #0
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e0f1      	b.n	8007a9a <UART_SetConfig+0x34e>
 80078b6:	2302      	movs	r3, #2
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e0ee      	b.n	8007a9a <UART_SetConfig+0x34e>
 80078bc:	2304      	movs	r3, #4
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e0eb      	b.n	8007a9a <UART_SetConfig+0x34e>
 80078c2:	2308      	movs	r3, #8
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e0e8      	b.n	8007a9a <UART_SetConfig+0x34e>
 80078c8:	2310      	movs	r3, #16
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	bf00      	nop
 80078ce:	e0e4      	b.n	8007a9a <UART_SetConfig+0x34e>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a5f      	ldr	r2, [pc, #380]	; (8007a54 <UART_SetConfig+0x308>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d120      	bne.n	800791c <UART_SetConfig+0x1d0>
 80078da:	4b5b      	ldr	r3, [pc, #364]	; (8007a48 <UART_SetConfig+0x2fc>)
 80078dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d00f      	beq.n	8007908 <UART_SetConfig+0x1bc>
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d802      	bhi.n	80078f2 <UART_SetConfig+0x1a6>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <UART_SetConfig+0x1b0>
 80078f0:	e010      	b.n	8007914 <UART_SetConfig+0x1c8>
 80078f2:	2b80      	cmp	r3, #128	; 0x80
 80078f4:	d005      	beq.n	8007902 <UART_SetConfig+0x1b6>
 80078f6:	2bc0      	cmp	r3, #192	; 0xc0
 80078f8:	d009      	beq.n	800790e <UART_SetConfig+0x1c2>
 80078fa:	e00b      	b.n	8007914 <UART_SetConfig+0x1c8>
 80078fc:	2300      	movs	r3, #0
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e0cb      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007902:	2302      	movs	r3, #2
 8007904:	77fb      	strb	r3, [r7, #31]
 8007906:	e0c8      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007908:	2304      	movs	r3, #4
 800790a:	77fb      	strb	r3, [r7, #31]
 800790c:	e0c5      	b.n	8007a9a <UART_SetConfig+0x34e>
 800790e:	2308      	movs	r3, #8
 8007910:	77fb      	strb	r3, [r7, #31]
 8007912:	e0c2      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007914:	2310      	movs	r3, #16
 8007916:	77fb      	strb	r3, [r7, #31]
 8007918:	bf00      	nop
 800791a:	e0be      	b.n	8007a9a <UART_SetConfig+0x34e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a4d      	ldr	r2, [pc, #308]	; (8007a58 <UART_SetConfig+0x30c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d124      	bne.n	8007970 <UART_SetConfig+0x224>
 8007926:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <UART_SetConfig+0x2fc>)
 8007928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007934:	d012      	beq.n	800795c <UART_SetConfig+0x210>
 8007936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793a:	d802      	bhi.n	8007942 <UART_SetConfig+0x1f6>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <UART_SetConfig+0x204>
 8007940:	e012      	b.n	8007968 <UART_SetConfig+0x21c>
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d006      	beq.n	8007956 <UART_SetConfig+0x20a>
 8007948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800794c:	d009      	beq.n	8007962 <UART_SetConfig+0x216>
 800794e:	e00b      	b.n	8007968 <UART_SetConfig+0x21c>
 8007950:	2300      	movs	r3, #0
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e0a1      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007956:	2302      	movs	r3, #2
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e09e      	b.n	8007a9a <UART_SetConfig+0x34e>
 800795c:	2304      	movs	r3, #4
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e09b      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007962:	2308      	movs	r3, #8
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e098      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007968:	2310      	movs	r3, #16
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	bf00      	nop
 800796e:	e094      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a39      	ldr	r2, [pc, #228]	; (8007a5c <UART_SetConfig+0x310>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d124      	bne.n	80079c4 <UART_SetConfig+0x278>
 800797a:	4b33      	ldr	r3, [pc, #204]	; (8007a48 <UART_SetConfig+0x2fc>)
 800797c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007988:	d012      	beq.n	80079b0 <UART_SetConfig+0x264>
 800798a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798e:	d802      	bhi.n	8007996 <UART_SetConfig+0x24a>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <UART_SetConfig+0x258>
 8007994:	e012      	b.n	80079bc <UART_SetConfig+0x270>
 8007996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800799a:	d006      	beq.n	80079aa <UART_SetConfig+0x25e>
 800799c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079a0:	d009      	beq.n	80079b6 <UART_SetConfig+0x26a>
 80079a2:	e00b      	b.n	80079bc <UART_SetConfig+0x270>
 80079a4:	2301      	movs	r3, #1
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e077      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079aa:	2302      	movs	r3, #2
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e074      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079b0:	2304      	movs	r3, #4
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e071      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079b6:	2308      	movs	r3, #8
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e06e      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079bc:	2310      	movs	r3, #16
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	bf00      	nop
 80079c2:	e06a      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a25      	ldr	r2, [pc, #148]	; (8007a60 <UART_SetConfig+0x314>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d124      	bne.n	8007a18 <UART_SetConfig+0x2cc>
 80079ce:	4b1e      	ldr	r3, [pc, #120]	; (8007a48 <UART_SetConfig+0x2fc>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079dc:	d012      	beq.n	8007a04 <UART_SetConfig+0x2b8>
 80079de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079e2:	d802      	bhi.n	80079ea <UART_SetConfig+0x29e>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <UART_SetConfig+0x2ac>
 80079e8:	e012      	b.n	8007a10 <UART_SetConfig+0x2c4>
 80079ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ee:	d006      	beq.n	80079fe <UART_SetConfig+0x2b2>
 80079f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079f4:	d009      	beq.n	8007a0a <UART_SetConfig+0x2be>
 80079f6:	e00b      	b.n	8007a10 <UART_SetConfig+0x2c4>
 80079f8:	2300      	movs	r3, #0
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	e04d      	b.n	8007a9a <UART_SetConfig+0x34e>
 80079fe:	2302      	movs	r3, #2
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e04a      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a04:	2304      	movs	r3, #4
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e047      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e044      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a10:	2310      	movs	r3, #16
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	bf00      	nop
 8007a16:	e040      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <UART_SetConfig+0x318>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d139      	bne.n	8007a96 <UART_SetConfig+0x34a>
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <UART_SetConfig+0x2fc>)
 8007a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a30:	d027      	beq.n	8007a82 <UART_SetConfig+0x336>
 8007a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a36:	d817      	bhi.n	8007a68 <UART_SetConfig+0x31c>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d01c      	beq.n	8007a76 <UART_SetConfig+0x32a>
 8007a3c:	e027      	b.n	8007a8e <UART_SetConfig+0x342>
 8007a3e:	bf00      	nop
 8007a40:	efff69f3 	.word	0xefff69f3
 8007a44:	40011000 	.word	0x40011000
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40004400 	.word	0x40004400
 8007a50:	40004800 	.word	0x40004800
 8007a54:	40004c00 	.word	0x40004c00
 8007a58:	40005000 	.word	0x40005000
 8007a5c:	40011400 	.word	0x40011400
 8007a60:	40007800 	.word	0x40007800
 8007a64:	40007c00 	.word	0x40007c00
 8007a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a6c:	d006      	beq.n	8007a7c <UART_SetConfig+0x330>
 8007a6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a72:	d009      	beq.n	8007a88 <UART_SetConfig+0x33c>
 8007a74:	e00b      	b.n	8007a8e <UART_SetConfig+0x342>
 8007a76:	2300      	movs	r3, #0
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	e00e      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	77fb      	strb	r3, [r7, #31]
 8007a80:	e00b      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a82:	2304      	movs	r3, #4
 8007a84:	77fb      	strb	r3, [r7, #31]
 8007a86:	e008      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a88:	2308      	movs	r3, #8
 8007a8a:	77fb      	strb	r3, [r7, #31]
 8007a8c:	e005      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a8e:	2310      	movs	r3, #16
 8007a90:	77fb      	strb	r3, [r7, #31]
 8007a92:	bf00      	nop
 8007a94:	e001      	b.n	8007a9a <UART_SetConfig+0x34e>
 8007a96:	2310      	movs	r3, #16
 8007a98:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aa2:	d17f      	bne.n	8007ba4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007aa4:	7ffb      	ldrb	r3, [r7, #31]
 8007aa6:	2b08      	cmp	r3, #8
 8007aa8:	d85c      	bhi.n	8007b64 <UART_SetConfig+0x418>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <UART_SetConfig+0x364>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ad5 	.word	0x08007ad5
 8007ab4:	08007af5 	.word	0x08007af5
 8007ab8:	08007b15 	.word	0x08007b15
 8007abc:	08007b65 	.word	0x08007b65
 8007ac0:	08007b2d 	.word	0x08007b2d
 8007ac4:	08007b65 	.word	0x08007b65
 8007ac8:	08007b65 	.word	0x08007b65
 8007acc:	08007b65 	.word	0x08007b65
 8007ad0:	08007b4d 	.word	0x08007b4d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ad4:	f7fd fd42 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 8007ad8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	005a      	lsls	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	61bb      	str	r3, [r7, #24]
        break;
 8007af2:	e03a      	b.n	8007b6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af4:	f7fd fd46 	bl	8005584 <HAL_RCC_GetPCLK2Freq>
 8007af8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	005a      	lsls	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	61bb      	str	r3, [r7, #24]
        break;
 8007b12:	e02a      	b.n	8007b6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	085a      	lsrs	r2, r3, #1
 8007b1a:	4b5f      	ldr	r3, [pc, #380]	; (8007c98 <UART_SetConfig+0x54c>)
 8007b1c:	4413      	add	r3, r2
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6852      	ldr	r2, [r2, #4]
 8007b22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	61bb      	str	r3, [r7, #24]
        break;
 8007b2a:	e01e      	b.n	8007b6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2c:	f7fd fc32 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007b30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	005a      	lsls	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	61bb      	str	r3, [r7, #24]
        break;
 8007b4a:	e00e      	b.n	8007b6a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	085b      	lsrs	r3, r3, #1
 8007b52:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	61bb      	str	r3, [r7, #24]
        break;
 8007b62:	e002      	b.n	8007b6a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
        break;
 8007b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b0f      	cmp	r3, #15
 8007b6e:	d916      	bls.n	8007b9e <UART_SetConfig+0x452>
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b76:	d212      	bcs.n	8007b9e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	f023 030f 	bic.w	r3, r3, #15
 8007b80:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	897b      	ldrh	r3, [r7, #10]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	897a      	ldrh	r2, [r7, #10]
 8007b9a:	60da      	str	r2, [r3, #12]
 8007b9c:	e070      	b.n	8007c80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]
 8007ba2:	e06d      	b.n	8007c80 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007ba4:	7ffb      	ldrb	r3, [r7, #31]
 8007ba6:	2b08      	cmp	r3, #8
 8007ba8:	d859      	bhi.n	8007c5e <UART_SetConfig+0x512>
 8007baa:	a201      	add	r2, pc, #4	; (adr r2, 8007bb0 <UART_SetConfig+0x464>)
 8007bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bf3 	.word	0x08007bf3
 8007bb8:	08007c11 	.word	0x08007c11
 8007bbc:	08007c5f 	.word	0x08007c5f
 8007bc0:	08007c29 	.word	0x08007c29
 8007bc4:	08007c5f 	.word	0x08007c5f
 8007bc8:	08007c5f 	.word	0x08007c5f
 8007bcc:	08007c5f 	.word	0x08007c5f
 8007bd0:	08007c47 	.word	0x08007c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd4:	f7fd fcc2 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 8007bd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	085a      	lsrs	r2, r3, #1
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	441a      	add	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	61bb      	str	r3, [r7, #24]
        break;
 8007bf0:	e038      	b.n	8007c64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bf2:	f7fd fcc7 	bl	8005584 <HAL_RCC_GetPCLK2Freq>
 8007bf6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085a      	lsrs	r2, r3, #1
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	441a      	add	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	61bb      	str	r3, [r7, #24]
        break;
 8007c0e:	e029      	b.n	8007c64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	085a      	lsrs	r2, r3, #1
 8007c16:	4b21      	ldr	r3, [pc, #132]	; (8007c9c <UART_SetConfig+0x550>)
 8007c18:	4413      	add	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6852      	ldr	r2, [r2, #4]
 8007c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	61bb      	str	r3, [r7, #24]
        break;
 8007c26:	e01d      	b.n	8007c64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c28:	f7fd fbb4 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007c2c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085a      	lsrs	r2, r3, #1
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	441a      	add	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e00e      	b.n	8007c64 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	61bb      	str	r3, [r7, #24]
        break;
 8007c5c:	e002      	b.n	8007c64 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	75fb      	strb	r3, [r7, #23]
        break;
 8007c62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d908      	bls.n	8007c7c <UART_SetConfig+0x530>
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d204      	bcs.n	8007c7c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	e001      	b.n	8007c80 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3720      	adds	r7, #32
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	01e84800 	.word	0x01e84800
 8007c9c:	00f42400 	.word	0x00f42400

08007ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cac:	f003 0301 	and.w	r3, r3, #1
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d00a      	beq.n	8007cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00a      	beq.n	8007d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d12:	f003 0308 	and.w	r3, r3, #8
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	f003 0310 	and.w	r3, r3, #16
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d9e:	d10a      	bne.n	8007db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007df2:	f7fb fb37 	bl	8003464 <HAL_GetTick>
 8007df6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d10e      	bne.n	8007e24 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f814 	bl	8007e42 <UART_WaitOnFlagUntilTimeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e00a      	b.n	8007e3a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2220      	movs	r2, #32
 8007e28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e52:	e05d      	b.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5a:	d059      	beq.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5c:	f7fb fb02 	bl	8003464 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d11b      	bne.n	8007eaa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e80:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0201 	bic.w	r2, r2, #1
 8007e90:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e042      	b.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d02b      	beq.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ec6:	d123      	bne.n	8007f10 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ed0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ee0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2220      	movs	r2, #32
 8007efc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2220      	movs	r2, #32
 8007f02:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e00f      	b.n	8007f30 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69da      	ldr	r2, [r3, #28]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	bf0c      	ite	eq
 8007f20:	2301      	moveq	r3, #1
 8007f22:	2300      	movne	r3, #0
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	461a      	mov	r2, r3
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d092      	beq.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f38:	b084      	sub	sp, #16
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	f107 001c 	add.w	r0, r7, #28
 8007f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d126      	bne.n	8007f9e <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <USB_CoreInit+0xb8>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f043 0210 	orr.w	r2, r3, #16
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d105      	bne.n	8007f92 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa52 	bl	800843c <USB_CoreReset>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e010      	b.n	8007fc0 <USB_CoreInit+0x88>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 fa46 	bl	800843c <USB_CoreReset>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d10b      	bne.n	8007fde <USB_CoreInit+0xa6>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f043 0206 	orr.w	r2, r3, #6
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f043 0220 	orr.w	r2, r3, #32
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fea:	b004      	add	sp, #16
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	ffbdffbf 	.word	0xffbdffbf

08007ff4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f023 0201 	bic.w	r2, r3, #1
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	370c      	adds	r7, #12
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	460b      	mov	r3, r1
 8008020:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800802e:	78fb      	ldrb	r3, [r7, #3]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d106      	bne.n	8008042 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e00b      	b.n	800805a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]
 8008054:	e001      	b.n	800805a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e003      	b.n	8008062 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800805a:	2032      	movs	r0, #50	; 0x32
 800805c:	f7fb fa0e 	bl	800347c <HAL_Delay>

  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800806c:	b084      	sub	sp, #16
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800807a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800807e:	2300      	movs	r3, #0
 8008080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	e009      	b.n	80080a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	3340      	adds	r3, #64	; 0x40
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	2200      	movs	r2, #0
 8008098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	3301      	adds	r3, #1
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b0e      	cmp	r3, #14
 80080a4:	d9f2      	bls.n	800808c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d11c      	bne.n	80080e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ba:	f043 0302 	orr.w	r3, r3, #2
 80080be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e005      	b.n	80080f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080f8:	461a      	mov	r2, r3
 80080fa:	2300      	movs	r3, #0
 80080fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008104:	4619      	mov	r1, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810c:	461a      	mov	r2, r3
 800810e:	680b      	ldr	r3, [r1, #0]
 8008110:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10c      	bne.n	8008132 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d104      	bne.n	8008128 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f959 	bl	80083d8 <USB_SetDevSpeed>
 8008126:	e018      	b.n	800815a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008128:	2101      	movs	r1, #1
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f954 	bl	80083d8 <USB_SetDevSpeed>
 8008130:	e013      	b.n	800815a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	2b03      	cmp	r3, #3
 8008136:	d10c      	bne.n	8008152 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800813e:	2100      	movs	r1, #0
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f949 	bl	80083d8 <USB_SetDevSpeed>
 8008146:	e008      	b.n	800815a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f944 	bl	80083d8 <USB_SetDevSpeed>
 8008150:	e003      	b.n	800815a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008152:	2103      	movs	r1, #3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f93f 	bl	80083d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800815a:	2110      	movs	r1, #16
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f8f3 	bl	8008348 <USB_FlushTxFifo>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 f911 	bl	8008394 <USB_FlushRxFifo>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	461a      	mov	r2, r3
 8008184:	2300      	movs	r3, #0
 8008186:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819a:	461a      	mov	r2, r3
 800819c:	2300      	movs	r3, #0
 800819e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	e043      	b.n	800822e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081bc:	d118      	bne.n	80081f0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	015a      	lsls	r2, r3, #5
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4413      	add	r3, r2
 80081cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d0:	461a      	mov	r2, r3
 80081d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e013      	b.n	8008202 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	461a      	mov	r2, r3
 80081e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e008      	b.n	8008202 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081fc:	461a      	mov	r2, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800820e:	461a      	mov	r2, r3
 8008210:	2300      	movs	r3, #0
 8008212:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	461a      	mov	r2, r3
 8008222:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008226:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3301      	adds	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	429a      	cmp	r2, r3
 8008234:	d3b7      	bcc.n	80081a6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008236:	2300      	movs	r3, #0
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	e043      	b.n	80082c4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800824e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008252:	d118      	bne.n	8008286 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	015a      	lsls	r2, r3, #5
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4413      	add	r3, r2
 8008262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008266:	461a      	mov	r2, r3
 8008268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	e013      	b.n	8008298 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	461a      	mov	r2, r3
 800827e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	e008      	b.n	8008298 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	461a      	mov	r2, r3
 8008294:	2300      	movs	r3, #0
 8008296:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a4:	461a      	mov	r2, r3
 80082a6:	2300      	movs	r3, #0
 80082a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	3301      	adds	r3, #1
 80082c2:	613b      	str	r3, [r7, #16]
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d3b7      	bcc.n	800823c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80082ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80082ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	f043 0210 	orr.w	r2, r3, #16
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <USB_DevInit+0x2d4>)
 8008306:	4313      	orrs	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800830c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f043 0208 	orr.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800831e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d105      	bne.n	8008330 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699a      	ldr	r2, [r3, #24]
 8008328:	4b06      	ldr	r3, [pc, #24]	; (8008344 <USB_DevInit+0x2d8>)
 800832a:	4313      	orrs	r3, r2
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr
 8008340:	803c3800 	.word	0x803c3800
 8008344:	40000004 	.word	0x40000004

08008348 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	f043 0220 	orr.w	r2, r3, #32
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a09      	ldr	r2, [pc, #36]	; (8008390 <USB_FlushTxFifo+0x48>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d901      	bls.n	8008374 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e006      	b.n	8008382 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	f003 0320 	and.w	r3, r3, #32
 800837c:	2b20      	cmp	r3, #32
 800837e:	d0f0      	beq.n	8008362 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	00030d40 	.word	0x00030d40

08008394 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2210      	movs	r2, #16
 80083a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	3301      	adds	r3, #1
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <USB_FlushRxFifo+0x40>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d901      	bls.n	80083b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e006      	b.n	80083c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b10      	cmp	r3, #16
 80083c2:	d0f0      	beq.n	80083a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3714      	adds	r7, #20
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	00030d40 	.word	0x00030d40

080083d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	68f9      	ldr	r1, [r7, #12]
 80083f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f8:	4313      	orrs	r3, r2
 80083fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b084      	sub	sp, #16
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008424:	f043 0302 	orr.w	r3, r3, #2
 8008428:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800842a:	2003      	movs	r0, #3
 800842c:	f7fb f826 	bl	800347c <HAL_Delay>

  return HAL_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <USB_CoreReset+0x64>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e01b      	b.n	8008492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	daf2      	bge.n	8008448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f043 0201 	orr.w	r2, r3, #1
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a09      	ldr	r2, [pc, #36]	; (80084a0 <USB_CoreReset+0x64>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d901      	bls.n	8008484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e006      	b.n	8008492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d0f0      	beq.n	8008472 <USB_CoreReset+0x36>

  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	00030d40 	.word	0x00030d40

080084a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80084a8:	bf00      	nop
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ba:	f3ef 8305 	mrs	r3, IPSR
 80084be:	60bb      	str	r3, [r7, #8]
  return(result);
 80084c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10f      	bne.n	80084e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c6:	f3ef 8310 	mrs	r3, PRIMASK
 80084ca:	607b      	str	r3, [r7, #4]
  return(result);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d105      	bne.n	80084de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80084d2:	f3ef 8311 	mrs	r3, BASEPRI
 80084d6:	603b      	str	r3, [r7, #0]
  return(result);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d007      	beq.n	80084ee <osKernelInitialize+0x3a>
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <osKernelInitialize+0x64>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d103      	bne.n	80084ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80084e6:	f06f 0305 	mvn.w	r3, #5
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e00c      	b.n	8008508 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <osKernelInitialize+0x64>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d105      	bne.n	8008502 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <osKernelInitialize+0x64>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	e002      	b.n	8008508 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008506:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008508:	68fb      	ldr	r3, [r7, #12]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20000210 	.word	0x20000210

0800851c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008522:	f3ef 8305 	mrs	r3, IPSR
 8008526:	60bb      	str	r3, [r7, #8]
  return(result);
 8008528:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10f      	bne.n	800854e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852e:	f3ef 8310 	mrs	r3, PRIMASK
 8008532:	607b      	str	r3, [r7, #4]
  return(result);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d105      	bne.n	8008546 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800853a:	f3ef 8311 	mrs	r3, BASEPRI
 800853e:	603b      	str	r3, [r7, #0]
  return(result);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <osKernelStart+0x3a>
 8008546:	4b0f      	ldr	r3, [pc, #60]	; (8008584 <osKernelStart+0x68>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b02      	cmp	r3, #2
 800854c:	d103      	bne.n	8008556 <osKernelStart+0x3a>
    stat = osErrorISR;
 800854e:	f06f 0305 	mvn.w	r3, #5
 8008552:	60fb      	str	r3, [r7, #12]
 8008554:	e010      	b.n	8008578 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008556:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <osKernelStart+0x68>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d109      	bne.n	8008572 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800855e:	f7ff ffa1 	bl	80084a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <osKernelStart+0x68>)
 8008564:	2202      	movs	r2, #2
 8008566:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008568:	f001 f98e 	bl	8009888 <vTaskStartScheduler>
      stat = osOK;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e002      	b.n	8008578 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008576:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008578:	68fb      	ldr	r3, [r7, #12]
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000210 	.word	0x20000210

08008588 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800858e:	f3ef 8305 	mrs	r3, IPSR
 8008592:	60bb      	str	r3, [r7, #8]
  return(result);
 8008594:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10f      	bne.n	80085ba <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859a:	f3ef 8310 	mrs	r3, PRIMASK
 800859e:	607b      	str	r3, [r7, #4]
  return(result);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d105      	bne.n	80085b2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085a6:	f3ef 8311 	mrs	r3, BASEPRI
 80085aa:	603b      	str	r3, [r7, #0]
  return(result);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <osKernelGetTickCount+0x3a>
 80085b2:	4b08      	ldr	r3, [pc, #32]	; (80085d4 <osKernelGetTickCount+0x4c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d103      	bne.n	80085c2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80085ba:	f001 fa89 	bl	8009ad0 <xTaskGetTickCountFromISR>
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	e002      	b.n	80085c8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80085c2:	f001 fa75 	bl	8009ab0 <xTaskGetTickCount>
 80085c6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80085c8:	68fb      	ldr	r3, [r7, #12]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000210 	.word	0x20000210

080085d8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80085dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b090      	sub	sp, #64	; 0x40
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085fc:	f3ef 8305 	mrs	r3, IPSR
 8008600:	61fb      	str	r3, [r7, #28]
  return(result);
 8008602:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 808f 	bne.w	8008728 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800860a:	f3ef 8310 	mrs	r3, PRIMASK
 800860e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d105      	bne.n	8008622 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008616:	f3ef 8311 	mrs	r3, BASEPRI
 800861a:	617b      	str	r3, [r7, #20]
  return(result);
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <osThreadNew+0x3e>
 8008622:	4b44      	ldr	r3, [pc, #272]	; (8008734 <osThreadNew+0x148>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b02      	cmp	r3, #2
 8008628:	d07e      	beq.n	8008728 <osThreadNew+0x13c>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d07b      	beq.n	8008728 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008630:	2380      	movs	r3, #128	; 0x80
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008634:	2318      	movs	r3, #24
 8008636:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008638:	2300      	movs	r3, #0
 800863a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800863c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008640:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d045      	beq.n	80086d4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <osThreadNew+0x6a>
        name = attr->name;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d002      	beq.n	8008664 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	2b00      	cmp	r3, #0
 8008668:	d008      	beq.n	800867c <osThreadNew+0x90>
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2b38      	cmp	r3, #56	; 0x38
 800866e:	d805      	bhi.n	800867c <osThreadNew+0x90>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <osThreadNew+0x94>
        return (NULL);
 800867c:	2300      	movs	r3, #0
 800867e:	e054      	b.n	800872a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	089b      	lsrs	r3, r3, #2
 800868e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00e      	beq.n	80086b6 <osThreadNew+0xca>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b5b      	cmp	r3, #91	; 0x5b
 800869e:	d90a      	bls.n	80086b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d006      	beq.n	80086b6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <osThreadNew+0xca>
        mem = 1;
 80086b0:	2301      	movs	r3, #1
 80086b2:	623b      	str	r3, [r7, #32]
 80086b4:	e010      	b.n	80086d8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10c      	bne.n	80086d8 <osThreadNew+0xec>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d108      	bne.n	80086d8 <osThreadNew+0xec>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d104      	bne.n	80086d8 <osThreadNew+0xec>
          mem = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	623b      	str	r3, [r7, #32]
 80086d2:	e001      	b.n	80086d8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d110      	bne.n	8008700 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80086e6:	9202      	str	r2, [sp, #8]
 80086e8:	9301      	str	r3, [sp, #4]
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 fe6b 	bl	80093d0 <xTaskCreateStatic>
 80086fa:	4603      	mov	r3, r0
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	e013      	b.n	8008728 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008700:	6a3b      	ldr	r3, [r7, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d110      	bne.n	8008728 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	b29a      	uxth	r2, r3
 800870a:	f107 0310 	add.w	r3, r7, #16
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 feb9 	bl	8009490 <xTaskCreate>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d001      	beq.n	8008728 <osThreadNew+0x13c>
          hTask = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008728:	693b      	ldr	r3, [r7, #16]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3730      	adds	r7, #48	; 0x30
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	20000210 	.word	0x20000210

08008738 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008740:	f3ef 8305 	mrs	r3, IPSR
 8008744:	613b      	str	r3, [r7, #16]
  return(result);
 8008746:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10f      	bne.n	800876c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800874c:	f3ef 8310 	mrs	r3, PRIMASK
 8008750:	60fb      	str	r3, [r7, #12]
  return(result);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d105      	bne.n	8008764 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008758:	f3ef 8311 	mrs	r3, BASEPRI
 800875c:	60bb      	str	r3, [r7, #8]
  return(result);
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d007      	beq.n	8008774 <osDelay+0x3c>
 8008764:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <osDelay+0x58>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d103      	bne.n	8008774 <osDelay+0x3c>
    stat = osErrorISR;
 800876c:	f06f 0305 	mvn.w	r3, #5
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	e007      	b.n	8008784 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008774:	2300      	movs	r3, #0
 8008776:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d002      	beq.n	8008784 <osDelay+0x4c>
      vTaskDelay(ticks);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 f84c 	bl	800981c <vTaskDelay>
    }
  }

  return (stat);
 8008784:	697b      	ldr	r3, [r7, #20]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000210 	.word	0x20000210

08008794 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800879c:	f3ef 8305 	mrs	r3, IPSR
 80087a0:	617b      	str	r3, [r7, #20]
  return(result);
 80087a2:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10f      	bne.n	80087c8 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a8:	f3ef 8310 	mrs	r3, PRIMASK
 80087ac:	613b      	str	r3, [r7, #16]
  return(result);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087b4:	f3ef 8311 	mrs	r3, BASEPRI
 80087b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <osDelayUntil+0x3c>
 80087c0:	4b13      	ldr	r3, [pc, #76]	; (8008810 <osDelayUntil+0x7c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d103      	bne.n	80087d0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80087c8:	f06f 0305 	mvn.w	r3, #5
 80087cc:	61fb      	str	r3, [r7, #28]
 80087ce:	e019      	b.n	8008804 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80087d4:	f001 f96c 	bl	8009ab0 <xTaskGetTickCount>
 80087d8:	4603      	mov	r3, r0
 80087da:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d009      	beq.n	80087fe <osDelayUntil+0x6a>
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	db06      	blt.n	80087fe <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80087f0:	f107 0308 	add.w	r3, r7, #8
 80087f4:	69b9      	ldr	r1, [r7, #24]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 ff90 	bl	800971c <vTaskDelayUntil>
 80087fc:	e002      	b.n	8008804 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80087fe:	f06f 0303 	mvn.w	r3, #3
 8008802:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8008804:	69fb      	ldr	r3, [r7, #28]
}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000210 	.word	0x20000210

08008814 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a07      	ldr	r2, [pc, #28]	; (8008840 <vApplicationGetIdleTaskMemory+0x2c>)
 8008824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a06      	ldr	r2, [pc, #24]	; (8008844 <vApplicationGetIdleTaskMemory+0x30>)
 800882a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2280      	movs	r2, #128	; 0x80
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000214 	.word	0x20000214
 8008844:	20000270 	.word	0x20000270

08008848 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008848:	b480      	push	{r7}
 800884a:	b085      	sub	sp, #20
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4a07      	ldr	r2, [pc, #28]	; (8008874 <vApplicationGetTimerTaskMemory+0x2c>)
 8008858:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4a06      	ldr	r2, [pc, #24]	; (8008878 <vApplicationGetTimerTaskMemory+0x30>)
 800885e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008866:	601a      	str	r2, [r3, #0]
}
 8008868:	bf00      	nop
 800886a:	3714      	adds	r7, #20
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr
 8008874:	20000470 	.word	0x20000470
 8008878:	200004cc 	.word	0x200004cc

0800887c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f103 0208 	add.w	r2, r3, #8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008894:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f103 0208 	add.w	r2, r3, #8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f103 0208 	add.w	r2, r3, #8
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	1c5a      	adds	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	601a      	str	r2, [r3, #0]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800891e:	b480      	push	{r7}
 8008920:	b085      	sub	sp, #20
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008934:	d103      	bne.n	800893e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	e00c      	b.n	8008958 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	3308      	adds	r3, #8
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e002      	b.n	800894c <vListInsert+0x2e>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d2f6      	bcs.n	8008946 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	1c5a      	adds	r2, r3, #1
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	6892      	ldr	r2, [r2, #8]
 80089a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6852      	ldr	r2, [r2, #4]
 80089b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d103      	bne.n	80089c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	1e5a      	subs	r2, r3, #1
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	b672      	cpsid	i
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	b662      	cpsie	i
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	e7fe      	b.n	8008a0e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8008a10:	f002 f8da 	bl	800abc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1c:	68f9      	ldr	r1, [r7, #12]
 8008a1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	441a      	add	r2, r3
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a40:	3b01      	subs	r3, #1
 8008a42:	68f9      	ldr	r1, [r7, #12]
 8008a44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	441a      	add	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	22ff      	movs	r2, #255	; 0xff
 8008a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	22ff      	movs	r2, #255	; 0xff
 8008a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d114      	bne.n	8008a90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d01a      	beq.n	8008aa4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3310      	adds	r3, #16
 8008a72:	4618      	mov	r0, r3
 8008a74:	f001 f9a8 	bl	8009dc8 <xTaskRemoveFromEventList>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d012      	beq.n	8008aa4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a7e:	4b0d      	ldr	r3, [pc, #52]	; (8008ab4 <xQueueGenericReset+0xd0>)
 8008a80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	e009      	b.n	8008aa4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	3310      	adds	r3, #16
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fef1 	bl	800887c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3324      	adds	r3, #36	; 0x24
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff feec 	bl	800887c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008aa4:	f002 f8c2 	bl	800ac2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008aa8:	2301      	movs	r3, #1
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08e      	sub	sp, #56	; 0x38
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <xQueueGenericCreateStatic+0x2c>
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	b672      	cpsid	i
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	b662      	cpsie	i
 8008ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae2:	e7fe      	b.n	8008ae2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10b      	bne.n	8008b02 <xQueueGenericCreateStatic+0x4a>
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	b672      	cpsid	i
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	b662      	cpsie	i
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	e7fe      	b.n	8008b00 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <xQueueGenericCreateStatic+0x56>
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <xQueueGenericCreateStatic+0x5a>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <xQueueGenericCreateStatic+0x5c>
 8008b12:	2300      	movs	r3, #0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <xQueueGenericCreateStatic+0x78>
 8008b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1c:	b672      	cpsid	i
 8008b1e:	f383 8811 	msr	BASEPRI, r3
 8008b22:	f3bf 8f6f 	isb	sy
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	b662      	cpsie	i
 8008b2c:	623b      	str	r3, [r7, #32]
 8008b2e:	e7fe      	b.n	8008b2e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <xQueueGenericCreateStatic+0x84>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <xQueueGenericCreateStatic+0x88>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <xQueueGenericCreateStatic+0x8a>
 8008b40:	2300      	movs	r3, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10b      	bne.n	8008b5e <xQueueGenericCreateStatic+0xa6>
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	b672      	cpsid	i
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	b662      	cpsie	i
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	e7fe      	b.n	8008b5c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b5e:	2350      	movs	r3, #80	; 0x50
 8008b60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b50      	cmp	r3, #80	; 0x50
 8008b66:	d00b      	beq.n	8008b80 <xQueueGenericCreateStatic+0xc8>
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	b672      	cpsid	i
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	b662      	cpsie	i
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e7fe      	b.n	8008b7e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00d      	beq.n	8008ba8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b94:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	68b9      	ldr	r1, [r7, #8]
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 f805 	bl	8008bb2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3730      	adds	r7, #48	; 0x30
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	60f8      	str	r0, [r7, #12]
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	e002      	b.n	8008bd4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008be0:	2101      	movs	r1, #1
 8008be2:	69b8      	ldr	r0, [r7, #24]
 8008be4:	f7ff fefe 	bl	80089e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bf0:	bf00      	nop
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08e      	sub	sp, #56	; 0x38
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c06:	2300      	movs	r3, #0
 8008c08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <xQueueGenericSend+0x34>
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	b672      	cpsid	i
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	b662      	cpsie	i
 8008c28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c2a:	e7fe      	b.n	8008c2a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <xQueueGenericSend+0x42>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <xQueueGenericSend+0x46>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <xQueueGenericSend+0x48>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10b      	bne.n	8008c5c <xQueueGenericSend+0x64>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	b672      	cpsid	i
 8008c4a:	f383 8811 	msr	BASEPRI, r3
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	f3bf 8f4f 	dsb	sy
 8008c56:	b662      	cpsie	i
 8008c58:	627b      	str	r3, [r7, #36]	; 0x24
 8008c5a:	e7fe      	b.n	8008c5a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d103      	bne.n	8008c6a <xQueueGenericSend+0x72>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d101      	bne.n	8008c6e <xQueueGenericSend+0x76>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <xQueueGenericSend+0x78>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xQueueGenericSend+0x94>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	b672      	cpsid	i
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	b662      	cpsie	i
 8008c88:	623b      	str	r3, [r7, #32]
 8008c8a:	e7fe      	b.n	8008c8a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c8c:	f001 fa5a 	bl	800a144 <xTaskGetSchedulerState>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <xQueueGenericSend+0xa4>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <xQueueGenericSend+0xa8>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <xQueueGenericSend+0xaa>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <xQueueGenericSend+0xc6>
 8008ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008caa:	b672      	cpsid	i
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	b662      	cpsie	i
 8008cba:	61fb      	str	r3, [r7, #28]
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cbe:	f001 ff83 	bl	800abc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <xQueueGenericSend+0xdc>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d129      	bne.n	8008d28 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008cd4:	683a      	ldr	r2, [r7, #0]
 8008cd6:	68b9      	ldr	r1, [r7, #8]
 8008cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008cda:	f000 fa0d 	bl	80090f8 <prvCopyDataToQueue>
 8008cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cea:	3324      	adds	r3, #36	; 0x24
 8008cec:	4618      	mov	r0, r3
 8008cee:	f001 f86b 	bl	8009dc8 <xTaskRemoveFromEventList>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d013      	beq.n	8008d20 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cf8:	4b3f      	ldr	r3, [pc, #252]	; (8008df8 <xQueueGenericSend+0x200>)
 8008cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	f3bf 8f4f 	dsb	sy
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	e00a      	b.n	8008d20 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d007      	beq.n	8008d20 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d10:	4b39      	ldr	r3, [pc, #228]	; (8008df8 <xQueueGenericSend+0x200>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d20:	f001 ff84 	bl	800ac2c <vPortExitCritical>
				return pdPASS;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e063      	b.n	8008df0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d2e:	f001 ff7d 	bl	800ac2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d32:	2300      	movs	r3, #0
 8008d34:	e05c      	b.n	8008df0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d106      	bne.n	8008d4a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d3c:	f107 0314 	add.w	r3, r7, #20
 8008d40:	4618      	mov	r0, r3
 8008d42:	f001 f8a5 	bl	8009e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d4a:	f001 ff6f 	bl	800ac2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d4e:	f000 fe03 	bl	8009958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d52:	f001 ff39 	bl	800abc8 <vPortEnterCritical>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d5c:	b25b      	sxtb	r3, r3
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d62:	d103      	bne.n	8008d6c <xQueueGenericSend+0x174>
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d72:	b25b      	sxtb	r3, r3
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d78:	d103      	bne.n	8008d82 <xQueueGenericSend+0x18a>
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d82:	f001 ff53 	bl	800ac2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d86:	1d3a      	adds	r2, r7, #4
 8008d88:	f107 0314 	add.w	r3, r7, #20
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 f894 	bl	8009ebc <xTaskCheckForTimeOut>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d124      	bne.n	8008de4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d9c:	f000 faa4 	bl	80092e8 <prvIsQueueFull>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d018      	beq.n	8008dd8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da8:	3310      	adds	r3, #16
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 ffb8 	bl	8009d24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008db6:	f000 fa2f 	bl	8009218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008dba:	f000 fddb 	bl	8009974 <xTaskResumeAll>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	f47f af7c 	bne.w	8008cbe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <xQueueGenericSend+0x200>)
 8008dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	e772      	b.n	8008cbe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dda:	f000 fa1d 	bl	8009218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dde:	f000 fdc9 	bl	8009974 <xTaskResumeAll>
 8008de2:	e76c      	b.n	8008cbe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008de6:	f000 fa17 	bl	8009218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dea:	f000 fdc3 	bl	8009974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3738      	adds	r7, #56	; 0x38
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08e      	sub	sp, #56	; 0x38
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <xQueueGenericSendFromISR+0x30>
 8008e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e18:	b672      	cpsid	i
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	b662      	cpsie	i
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	e7fe      	b.n	8008e2a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d103      	bne.n	8008e3a <xQueueGenericSendFromISR+0x3e>
 8008e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d101      	bne.n	8008e3e <xQueueGenericSendFromISR+0x42>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e000      	b.n	8008e40 <xQueueGenericSendFromISR+0x44>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <xQueueGenericSendFromISR+0x60>
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	b672      	cpsid	i
 8008e4a:	f383 8811 	msr	BASEPRI, r3
 8008e4e:	f3bf 8f6f 	isb	sy
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	b662      	cpsie	i
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	e7fe      	b.n	8008e5a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d103      	bne.n	8008e6a <xQueueGenericSendFromISR+0x6e>
 8008e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d101      	bne.n	8008e6e <xQueueGenericSendFromISR+0x72>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <xQueueGenericSendFromISR+0x74>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xQueueGenericSendFromISR+0x90>
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	b672      	cpsid	i
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	b662      	cpsie	i
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	e7fe      	b.n	8008e8a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e8c:	f001 ff7c 	bl	800ad88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e90:	f3ef 8211 	mrs	r2, BASEPRI
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	b672      	cpsid	i
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	b662      	cpsie	i
 8008ea8:	61ba      	str	r2, [r7, #24]
 8008eaa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008eac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d302      	bcc.n	8008ec2 <xQueueGenericSendFromISR+0xc6>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d12c      	bne.n	8008f1c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	68b9      	ldr	r1, [r7, #8]
 8008ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed2:	f000 f911 	bl	80090f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ed6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ede:	d112      	bne.n	8008f06 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d016      	beq.n	8008f16 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	3324      	adds	r3, #36	; 0x24
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 ff6b 	bl	8009dc8 <xTaskRemoveFromEventList>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00e      	beq.n	8008f16 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00b      	beq.n	8008f16 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e007      	b.n	8008f16 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	b25a      	sxtb	r2, r3
 8008f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008f16:	2301      	movs	r3, #1
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008f1a:	e001      	b.n	8008f20 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3738      	adds	r7, #56	; 0x38
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b08c      	sub	sp, #48	; 0x30
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10b      	bne.n	8008f66 <xQueueReceive+0x32>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	b672      	cpsid	i
 8008f54:	f383 8811 	msr	BASEPRI, r3
 8008f58:	f3bf 8f6f 	isb	sy
 8008f5c:	f3bf 8f4f 	dsb	sy
 8008f60:	b662      	cpsie	i
 8008f62:	623b      	str	r3, [r7, #32]
 8008f64:	e7fe      	b.n	8008f64 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <xQueueReceive+0x40>
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <xQueueReceive+0x44>
 8008f74:	2301      	movs	r3, #1
 8008f76:	e000      	b.n	8008f7a <xQueueReceive+0x46>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <xQueueReceive+0x62>
 8008f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f82:	b672      	cpsid	i
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	b662      	cpsie	i
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	e7fe      	b.n	8008f94 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f96:	f001 f8d5 	bl	800a144 <xTaskGetSchedulerState>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d102      	bne.n	8008fa6 <xQueueReceive+0x72>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <xQueueReceive+0x76>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e000      	b.n	8008fac <xQueueReceive+0x78>
 8008faa:	2300      	movs	r3, #0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <xQueueReceive+0x94>
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	b672      	cpsid	i
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	b662      	cpsie	i
 8008fc4:	61bb      	str	r3, [r7, #24]
 8008fc6:	e7fe      	b.n	8008fc6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fc8:	f001 fdfe 	bl	800abc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01f      	beq.n	8009018 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fdc:	f000 f8f6 	bl	80091cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00f      	beq.n	8009010 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	3310      	adds	r3, #16
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fee7 	bl	8009dc8 <xTaskRemoveFromEventList>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009000:	4b3c      	ldr	r3, [pc, #240]	; (80090f4 <xQueueReceive+0x1c0>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009010:	f001 fe0c 	bl	800ac2c <vPortExitCritical>
				return pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	e069      	b.n	80090ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800901e:	f001 fe05 	bl	800ac2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009022:	2300      	movs	r3, #0
 8009024:	e062      	b.n	80090ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	4618      	mov	r0, r3
 8009032:	f000 ff2d 	bl	8009e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009036:	2301      	movs	r3, #1
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800903a:	f001 fdf7 	bl	800ac2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800903e:	f000 fc8b 	bl	8009958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009042:	f001 fdc1 	bl	800abc8 <vPortEnterCritical>
 8009046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800904c:	b25b      	sxtb	r3, r3
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009052:	d103      	bne.n	800905c <xQueueReceive+0x128>
 8009054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009062:	b25b      	sxtb	r3, r3
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009068:	d103      	bne.n	8009072 <xQueueReceive+0x13e>
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009072:	f001 fddb 	bl	800ac2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009076:	1d3a      	adds	r2, r7, #4
 8009078:	f107 0310 	add.w	r3, r7, #16
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f000 ff1c 	bl	8009ebc <xTaskCheckForTimeOut>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d123      	bne.n	80090d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800908a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800908c:	f000 f916 	bl	80092bc <prvIsQueueEmpty>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d017      	beq.n	80090c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009098:	3324      	adds	r3, #36	; 0x24
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fe40 	bl	8009d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090a6:	f000 f8b7 	bl	8009218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090aa:	f000 fc63 	bl	8009974 <xTaskResumeAll>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d189      	bne.n	8008fc8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80090b4:	4b0f      	ldr	r3, [pc, #60]	; (80090f4 <xQueueReceive+0x1c0>)
 80090b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	e780      	b.n	8008fc8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80090c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090c8:	f000 f8a6 	bl	8009218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090cc:	f000 fc52 	bl	8009974 <xTaskResumeAll>
 80090d0:	e77a      	b.n	8008fc8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d4:	f000 f8a0 	bl	8009218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090d8:	f000 fc4c 	bl	8009974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090de:	f000 f8ed 	bl	80092bc <prvIsQueueEmpty>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f43f af6f 	beq.w	8008fc8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3730      	adds	r7, #48	; 0x30
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed04 	.word	0xe000ed04

080090f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10d      	bne.n	8009132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d14d      	bne.n	80091ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	4618      	mov	r0, r3
 8009124:	f001 f82c 	bl	800a180 <xTaskPriorityDisinherit>
 8009128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	609a      	str	r2, [r3, #8]
 8009130:	e043      	b.n	80091ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d119      	bne.n	800916c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6858      	ldr	r0, [r3, #4]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	461a      	mov	r2, r3
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	f002 f90e 	bl	800b364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	429a      	cmp	r2, r3
 8009160:	d32b      	bcc.n	80091ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
 800916a:	e026      	b.n	80091ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	68d8      	ldr	r0, [r3, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009174:	461a      	mov	r2, r3
 8009176:	68b9      	ldr	r1, [r7, #8]
 8009178:	f002 f8f4 	bl	800b364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	425b      	negs	r3, r3
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	429a      	cmp	r2, r3
 8009196:	d207      	bcs.n	80091a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a0:	425b      	negs	r3, r3
 80091a2:	441a      	add	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d105      	bne.n	80091ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	3b01      	subs	r3, #1
 80091b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d018      	beq.n	8009210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68da      	ldr	r2, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e6:	441a      	add	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d303      	bcc.n	8009200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68d9      	ldr	r1, [r3, #12]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009208:	461a      	mov	r2, r3
 800920a:	6838      	ldr	r0, [r7, #0]
 800920c:	f002 f8aa 	bl	800b364 <memcpy>
	}
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009220:	f001 fcd2 	bl	800abc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800922a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800922c:	e011      	b.n	8009252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	2b00      	cmp	r3, #0
 8009234:	d012      	beq.n	800925c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3324      	adds	r3, #36	; 0x24
 800923a:	4618      	mov	r0, r3
 800923c:	f000 fdc4 	bl	8009dc8 <xTaskRemoveFromEventList>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009246:	f000 fe9d 	bl	8009f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	3b01      	subs	r3, #1
 800924e:	b2db      	uxtb	r3, r3
 8009250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009256:	2b00      	cmp	r3, #0
 8009258:	dce9      	bgt.n	800922e <prvUnlockQueue+0x16>
 800925a:	e000      	b.n	800925e <prvUnlockQueue+0x46>
					break;
 800925c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	22ff      	movs	r2, #255	; 0xff
 8009262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009266:	f001 fce1 	bl	800ac2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800926a:	f001 fcad 	bl	800abc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009276:	e011      	b.n	800929c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d012      	beq.n	80092a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3310      	adds	r3, #16
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fd9f 	bl	8009dc8 <xTaskRemoveFromEventList>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009290:	f000 fe78 	bl	8009f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	3b01      	subs	r3, #1
 8009298:	b2db      	uxtb	r3, r3
 800929a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800929c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dce9      	bgt.n	8009278 <prvUnlockQueue+0x60>
 80092a4:	e000      	b.n	80092a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	22ff      	movs	r2, #255	; 0xff
 80092ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092b0:	f001 fcbc 	bl	800ac2c <vPortExitCritical>
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c4:	f001 fc80 	bl	800abc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092d0:	2301      	movs	r3, #1
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e001      	b.n	80092da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092da:	f001 fca7 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 80092de:	68fb      	ldr	r3, [r7, #12]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092f0:	f001 fc6a 	bl	800abc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d102      	bne.n	8009306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	e001      	b.n	800930a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800930a:	f001 fc8f 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 800930e:	68fb      	ldr	r3, [r7, #12]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009322:	2300      	movs	r3, #0
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e014      	b.n	8009352 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009328:	4a0e      	ldr	r2, [pc, #56]	; (8009364 <vQueueAddToRegistry+0x4c>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009334:	490b      	ldr	r1, [pc, #44]	; (8009364 <vQueueAddToRegistry+0x4c>)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800933e:	4a09      	ldr	r2, [pc, #36]	; (8009364 <vQueueAddToRegistry+0x4c>)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800934a:	e005      	b.n	8009358 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b07      	cmp	r3, #7
 8009356:	d9e7      	bls.n	8009328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009358:	bf00      	nop
 800935a:	3714      	adds	r7, #20
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20005140 	.word	0x20005140

08009368 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009378:	f001 fc26 	bl	800abc8 <vPortEnterCritical>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009382:	b25b      	sxtb	r3, r3
 8009384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009388:	d103      	bne.n	8009392 <vQueueWaitForMessageRestricted+0x2a>
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009398:	b25b      	sxtb	r3, r3
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800939e:	d103      	bne.n	80093a8 <vQueueWaitForMessageRestricted+0x40>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a8:	f001 fc40 	bl	800ac2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3324      	adds	r3, #36	; 0x24
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	68b9      	ldr	r1, [r7, #8]
 80093bc:	4618      	mov	r0, r3
 80093be:	f000 fcd7 	bl	8009d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093c2:	6978      	ldr	r0, [r7, #20]
 80093c4:	f7ff ff28 	bl	8009218 <prvUnlockQueue>
	}
 80093c8:	bf00      	nop
 80093ca:	3718      	adds	r7, #24
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08e      	sub	sp, #56	; 0x38
 80093d4:	af04      	add	r7, sp, #16
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	607a      	str	r2, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10b      	bne.n	80093fc <xTaskCreateStatic+0x2c>
 80093e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e8:	b672      	cpsid	i
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	b662      	cpsie	i
 80093f8:	623b      	str	r3, [r7, #32]
 80093fa:	e7fe      	b.n	80093fa <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <xTaskCreateStatic+0x4a>
 8009402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009406:	b672      	cpsid	i
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	b662      	cpsie	i
 8009416:	61fb      	str	r3, [r7, #28]
 8009418:	e7fe      	b.n	8009418 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800941a:	235c      	movs	r3, #92	; 0x5c
 800941c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	2b5c      	cmp	r3, #92	; 0x5c
 8009422:	d00b      	beq.n	800943c <xTaskCreateStatic+0x6c>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	e7fe      	b.n	800943a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800943c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01e      	beq.n	8009482 <xTaskCreateStatic+0xb2>
 8009444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01b      	beq.n	8009482 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009452:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	2202      	movs	r2, #2
 8009458:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800945c:	2300      	movs	r3, #0
 800945e:	9303      	str	r3, [sp, #12]
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	9302      	str	r3, [sp, #8]
 8009464:	f107 0314 	add.w	r3, r7, #20
 8009468:	9301      	str	r3, [sp, #4]
 800946a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800946c:	9300      	str	r3, [sp, #0]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	68b9      	ldr	r1, [r7, #8]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f000 f850 	bl	800951a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800947a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800947c:	f000 f8de 	bl	800963c <prvAddNewTaskToReadyList>
 8009480:	e001      	b.n	8009486 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009486:	697b      	ldr	r3, [r7, #20]
	}
 8009488:	4618      	mov	r0, r3
 800948a:	3728      	adds	r7, #40	; 0x28
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08c      	sub	sp, #48	; 0x30
 8009494:	af04      	add	r7, sp, #16
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80094a0:	88fb      	ldrh	r3, [r7, #6]
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 fcb1 	bl	800ae0c <pvPortMalloc>
 80094aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00e      	beq.n	80094d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80094b2:	205c      	movs	r0, #92	; 0x5c
 80094b4:	f001 fcaa 	bl	800ae0c <pvPortMalloc>
 80094b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d003      	beq.n	80094c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	631a      	str	r2, [r3, #48]	; 0x30
 80094c6:	e005      	b.n	80094d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094c8:	6978      	ldr	r0, [r7, #20]
 80094ca:	f001 fd67 	bl	800af9c <vPortFree>
 80094ce:	e001      	b.n	80094d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094d0:	2300      	movs	r3, #0
 80094d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d017      	beq.n	800950a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094e2:	88fa      	ldrh	r2, [r7, #6]
 80094e4:	2300      	movs	r3, #0
 80094e6:	9303      	str	r3, [sp, #12]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	9302      	str	r3, [sp, #8]
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f000 f80e 	bl	800951a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094fe:	69f8      	ldr	r0, [r7, #28]
 8009500:	f000 f89c 	bl	800963c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009504:	2301      	movs	r3, #1
 8009506:	61bb      	str	r3, [r7, #24]
 8009508:	e002      	b.n	8009510 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800950a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800950e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009510:	69bb      	ldr	r3, [r7, #24]
	}
 8009512:	4618      	mov	r0, r3
 8009514:	3720      	adds	r7, #32
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b088      	sub	sp, #32
 800951e:	af00      	add	r7, sp, #0
 8009520:	60f8      	str	r0, [r7, #12]
 8009522:	60b9      	str	r1, [r7, #8]
 8009524:	607a      	str	r2, [r7, #4]
 8009526:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	461a      	mov	r2, r3
 8009532:	21a5      	movs	r1, #165	; 0xa5
 8009534:	f001 ff21 	bl	800b37a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009542:	440b      	add	r3, r1
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f003 0307 	and.w	r3, r3, #7
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00b      	beq.n	8009574 <prvInitialiseNewTask+0x5a>
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	b672      	cpsid	i
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	b662      	cpsie	i
 8009570:	617b      	str	r3, [r7, #20]
 8009572:	e7fe      	b.n	8009572 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01f      	beq.n	80095ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
 800957e:	e012      	b.n	80095a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	4413      	add	r3, r2
 8009586:	7819      	ldrb	r1, [r3, #0]
 8009588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	4413      	add	r3, r2
 800958e:	3334      	adds	r3, #52	; 0x34
 8009590:	460a      	mov	r2, r1
 8009592:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d006      	beq.n	80095ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	3301      	adds	r3, #1
 80095a4:	61fb      	str	r3, [r7, #28]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2b0f      	cmp	r3, #15
 80095aa:	d9e9      	bls.n	8009580 <prvInitialiseNewTask+0x66>
 80095ac:	e000      	b.n	80095b0 <prvInitialiseNewTask+0x96>
			{
				break;
 80095ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80095b8:	e003      	b.n	80095c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	2b37      	cmp	r3, #55	; 0x37
 80095c6:	d901      	bls.n	80095cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095c8:	2337      	movs	r3, #55	; 0x37
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80095d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095da:	2200      	movs	r2, #0
 80095dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e0:	3304      	adds	r3, #4
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff f96a 	bl	80088bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	3318      	adds	r3, #24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7ff f965 	bl	80088bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009606:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960a:	2200      	movs	r2, #0
 800960c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	2200      	movs	r2, #0
 8009612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	68f9      	ldr	r1, [r7, #12]
 800961a:	69b8      	ldr	r0, [r7, #24]
 800961c:	f001 f9c8 	bl	800a9b0 <pxPortInitialiseStack>
 8009620:	4602      	mov	r2, r0
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009630:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009632:	bf00      	nop
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009644:	f001 fac0 	bl	800abc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009648:	4b2d      	ldr	r3, [pc, #180]	; (8009700 <prvAddNewTaskToReadyList+0xc4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	4a2c      	ldr	r2, [pc, #176]	; (8009700 <prvAddNewTaskToReadyList+0xc4>)
 8009650:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009652:	4b2c      	ldr	r3, [pc, #176]	; (8009704 <prvAddNewTaskToReadyList+0xc8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d109      	bne.n	800966e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800965a:	4a2a      	ldr	r2, [pc, #168]	; (8009704 <prvAddNewTaskToReadyList+0xc8>)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009660:	4b27      	ldr	r3, [pc, #156]	; (8009700 <prvAddNewTaskToReadyList+0xc4>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d110      	bne.n	800968a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009668:	f000 fcb0 	bl	8009fcc <prvInitialiseTaskLists>
 800966c:	e00d      	b.n	800968a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800966e:	4b26      	ldr	r3, [pc, #152]	; (8009708 <prvAddNewTaskToReadyList+0xcc>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d109      	bne.n	800968a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009676:	4b23      	ldr	r3, [pc, #140]	; (8009704 <prvAddNewTaskToReadyList+0xc8>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	429a      	cmp	r2, r3
 8009682:	d802      	bhi.n	800968a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009684:	4a1f      	ldr	r2, [pc, #124]	; (8009704 <prvAddNewTaskToReadyList+0xc8>)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800968a:	4b20      	ldr	r3, [pc, #128]	; (800970c <prvAddNewTaskToReadyList+0xd0>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3301      	adds	r3, #1
 8009690:	4a1e      	ldr	r2, [pc, #120]	; (800970c <prvAddNewTaskToReadyList+0xd0>)
 8009692:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009694:	4b1d      	ldr	r3, [pc, #116]	; (800970c <prvAddNewTaskToReadyList+0xd0>)
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <prvAddNewTaskToReadyList+0xd4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d903      	bls.n	80096b0 <prvAddNewTaskToReadyList+0x74>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	4a18      	ldr	r2, [pc, #96]	; (8009710 <prvAddNewTaskToReadyList+0xd4>)
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4a15      	ldr	r2, [pc, #84]	; (8009714 <prvAddNewTaskToReadyList+0xd8>)
 80096be:	441a      	add	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	3304      	adds	r3, #4
 80096c4:	4619      	mov	r1, r3
 80096c6:	4610      	mov	r0, r2
 80096c8:	f7ff f905 	bl	80088d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096cc:	f001 faae 	bl	800ac2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <prvAddNewTaskToReadyList+0xcc>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00e      	beq.n	80096f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <prvAddNewTaskToReadyList+0xc8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d207      	bcs.n	80096f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096e6:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <prvAddNewTaskToReadyList+0xdc>)
 80096e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ec:	601a      	str	r2, [r3, #0]
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096f6:	bf00      	nop
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000da0 	.word	0x20000da0
 8009704:	200008cc 	.word	0x200008cc
 8009708:	20000dac 	.word	0x20000dac
 800970c:	20000dbc 	.word	0x20000dbc
 8009710:	20000da8 	.word	0x20000da8
 8009714:	200008d0 	.word	0x200008d0
 8009718:	e000ed04 	.word	0xe000ed04

0800971c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800971c:	b580      	push	{r7, lr}
 800971e:	b08a      	sub	sp, #40	; 0x28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009726:	2300      	movs	r3, #0
 8009728:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10b      	bne.n	8009748 <vTaskDelayUntil+0x2c>
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	b672      	cpsid	i
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	b662      	cpsie	i
 8009744:	617b      	str	r3, [r7, #20]
 8009746:	e7fe      	b.n	8009746 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10b      	bne.n	8009766 <vTaskDelayUntil+0x4a>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	e7fe      	b.n	8009764 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8009766:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <vTaskDelayUntil+0xf4>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <vTaskDelayUntil+0x6a>
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	60fb      	str	r3, [r7, #12]
 8009784:	e7fe      	b.n	8009784 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8009786:	f000 f8e7 	bl	8009958 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800978a:	4b22      	ldr	r3, [pc, #136]	; (8009814 <vTaskDelayUntil+0xf8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	4413      	add	r3, r2
 8009798:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	6a3a      	ldr	r2, [r7, #32]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d20b      	bcs.n	80097bc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d211      	bcs.n	80097d2 <vTaskDelayUntil+0xb6>
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d90d      	bls.n	80097d2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80097b6:	2301      	movs	r3, #1
 80097b8:	627b      	str	r3, [r7, #36]	; 0x24
 80097ba:	e00a      	b.n	80097d2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69fa      	ldr	r2, [r7, #28]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d303      	bcc.n	80097ce <vTaskDelayUntil+0xb2>
 80097c6:	69fa      	ldr	r2, [r7, #28]
 80097c8:	6a3b      	ldr	r3, [r7, #32]
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d901      	bls.n	80097d2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80097ce:	2301      	movs	r3, #1
 80097d0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d006      	beq.n	80097ec <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80097de:	69fa      	ldr	r2, [r7, #28]
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fd3a 	bl	800a260 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80097ec:	f000 f8c2 	bl	8009974 <xTaskResumeAll>
 80097f0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d107      	bne.n	8009808 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80097f8:	4b07      	ldr	r3, [pc, #28]	; (8009818 <vTaskDelayUntil+0xfc>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009808:	bf00      	nop
 800980a:	3728      	adds	r7, #40	; 0x28
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20000dc8 	.word	0x20000dc8
 8009814:	20000da4 	.word	0x20000da4
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d018      	beq.n	8009860 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800982e:	4b14      	ldr	r3, [pc, #80]	; (8009880 <vTaskDelay+0x64>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <vTaskDelay+0x32>
 8009836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983a:	b672      	cpsid	i
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	b662      	cpsie	i
 800984a:	60bb      	str	r3, [r7, #8]
 800984c:	e7fe      	b.n	800984c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800984e:	f000 f883 	bl	8009958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009852:	2100      	movs	r1, #0
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fd03 	bl	800a260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800985a:	f000 f88b 	bl	8009974 <xTaskResumeAll>
 800985e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d107      	bne.n	8009876 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <vTaskDelay+0x68>)
 8009868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000dc8 	.word	0x20000dc8
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800988e:	2300      	movs	r3, #0
 8009890:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009892:	2300      	movs	r3, #0
 8009894:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009896:	463a      	mov	r2, r7
 8009898:	1d39      	adds	r1, r7, #4
 800989a:	f107 0308 	add.w	r3, r7, #8
 800989e:	4618      	mov	r0, r3
 80098a0:	f7fe ffb8 	bl	8008814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	9202      	str	r2, [sp, #8]
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	2300      	movs	r3, #0
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	2300      	movs	r3, #0
 80098b4:	460a      	mov	r2, r1
 80098b6:	4922      	ldr	r1, [pc, #136]	; (8009940 <vTaskStartScheduler+0xb8>)
 80098b8:	4822      	ldr	r0, [pc, #136]	; (8009944 <vTaskStartScheduler+0xbc>)
 80098ba:	f7ff fd89 	bl	80093d0 <xTaskCreateStatic>
 80098be:	4602      	mov	r2, r0
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <vTaskStartScheduler+0xc0>)
 80098c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098c4:	4b20      	ldr	r3, [pc, #128]	; (8009948 <vTaskStartScheduler+0xc0>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098cc:	2301      	movs	r3, #1
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	e001      	b.n	80098d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d102      	bne.n	80098e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80098dc:	f000 fd14 	bl	800a308 <xTimerCreateTimerTask>
 80098e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d117      	bne.n	8009918 <vTaskStartScheduler+0x90>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	b672      	cpsid	i
 80098ee:	f383 8811 	msr	BASEPRI, r3
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	f3bf 8f4f 	dsb	sy
 80098fa:	b662      	cpsie	i
 80098fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80098fe:	4b13      	ldr	r3, [pc, #76]	; (800994c <vTaskStartScheduler+0xc4>)
 8009900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009904:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009906:	4b12      	ldr	r3, [pc, #72]	; (8009950 <vTaskStartScheduler+0xc8>)
 8009908:	2201      	movs	r2, #1
 800990a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800990c:	4b11      	ldr	r3, [pc, #68]	; (8009954 <vTaskStartScheduler+0xcc>)
 800990e:	2200      	movs	r2, #0
 8009910:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009912:	f001 f8dd 	bl	800aad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009916:	e00f      	b.n	8009938 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800991e:	d10b      	bne.n	8009938 <vTaskStartScheduler+0xb0>
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	e7fe      	b.n	8009936 <vTaskStartScheduler+0xae>
}
 8009938:	bf00      	nop
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	0800e8c8 	.word	0x0800e8c8
 8009944:	08009f9d 	.word	0x08009f9d
 8009948:	20000dc4 	.word	0x20000dc4
 800994c:	20000dc0 	.word	0x20000dc0
 8009950:	20000dac 	.word	0x20000dac
 8009954:	20000da4 	.word	0x20000da4

08009958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800995c:	4b04      	ldr	r3, [pc, #16]	; (8009970 <vTaskSuspendAll+0x18>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	4a03      	ldr	r2, [pc, #12]	; (8009970 <vTaskSuspendAll+0x18>)
 8009964:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009966:	bf00      	nop
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	20000dc8 	.word	0x20000dc8

08009974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009982:	4b42      	ldr	r3, [pc, #264]	; (8009a8c <xTaskResumeAll+0x118>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10b      	bne.n	80099a2 <xTaskResumeAll+0x2e>
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	b672      	cpsid	i
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	b662      	cpsie	i
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	e7fe      	b.n	80099a0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099a2:	f001 f911 	bl	800abc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099a6:	4b39      	ldr	r3, [pc, #228]	; (8009a8c <xTaskResumeAll+0x118>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	4a37      	ldr	r2, [pc, #220]	; (8009a8c <xTaskResumeAll+0x118>)
 80099ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099b0:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <xTaskResumeAll+0x118>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d162      	bne.n	8009a7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099b8:	4b35      	ldr	r3, [pc, #212]	; (8009a90 <xTaskResumeAll+0x11c>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d05e      	beq.n	8009a7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099c0:	e02f      	b.n	8009a22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c2:	4b34      	ldr	r3, [pc, #208]	; (8009a94 <xTaskResumeAll+0x120>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3318      	adds	r3, #24
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe ffde 	bl	8008990 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	3304      	adds	r3, #4
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe ffd9 	bl	8008990 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4b2d      	ldr	r3, [pc, #180]	; (8009a98 <xTaskResumeAll+0x124>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d903      	bls.n	80099f2 <xTaskResumeAll+0x7e>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ee:	4a2a      	ldr	r2, [pc, #168]	; (8009a98 <xTaskResumeAll+0x124>)
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f6:	4613      	mov	r3, r2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4a27      	ldr	r2, [pc, #156]	; (8009a9c <xTaskResumeAll+0x128>)
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4619      	mov	r1, r3
 8009a08:	4610      	mov	r0, r2
 8009a0a:	f7fe ff64 	bl	80088d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a12:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <xTaskResumeAll+0x12c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d302      	bcc.n	8009a22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009a1c:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <xTaskResumeAll+0x130>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a22:	4b1c      	ldr	r3, [pc, #112]	; (8009a94 <xTaskResumeAll+0x120>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1cb      	bne.n	80099c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d001      	beq.n	8009a34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a30:	f000 fb68 	bl	800a104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a34:	4b1c      	ldr	r3, [pc, #112]	; (8009aa8 <xTaskResumeAll+0x134>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d010      	beq.n	8009a62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a40:	f000 f858 	bl	8009af4 <xTaskIncrementTick>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <xTaskResumeAll+0x130>)
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3b01      	subs	r3, #1
 8009a54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d1f1      	bne.n	8009a40 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009a5c:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <xTaskResumeAll+0x134>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <xTaskResumeAll+0x130>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d009      	beq.n	8009a7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <xTaskResumeAll+0x138>)
 8009a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a7e:	f001 f8d5 	bl	800ac2c <vPortExitCritical>

	return xAlreadyYielded;
 8009a82:	68bb      	ldr	r3, [r7, #8]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000dc8 	.word	0x20000dc8
 8009a90:	20000da0 	.word	0x20000da0
 8009a94:	20000d60 	.word	0x20000d60
 8009a98:	20000da8 	.word	0x20000da8
 8009a9c:	200008d0 	.word	0x200008d0
 8009aa0:	200008cc 	.word	0x200008cc
 8009aa4:	20000db4 	.word	0x20000db4
 8009aa8:	20000db0 	.word	0x20000db0
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b083      	sub	sp, #12
 8009ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ab6:	4b05      	ldr	r3, [pc, #20]	; (8009acc <xTaskGetTickCount+0x1c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009abc:	687b      	ldr	r3, [r7, #4]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000da4 	.word	0x20000da4

08009ad0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ad6:	f001 f957 	bl	800ad88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009ada:	2300      	movs	r3, #0
 8009adc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009ade:	4b04      	ldr	r3, [pc, #16]	; (8009af0 <xTaskGetTickCountFromISR+0x20>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ae4:	683b      	ldr	r3, [r7, #0]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3708      	adds	r7, #8
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000da4 	.word	0x20000da4

08009af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009afa:	2300      	movs	r3, #0
 8009afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009afe:	4b4f      	ldr	r3, [pc, #316]	; (8009c3c <xTaskIncrementTick+0x148>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 808a 	bne.w	8009c1c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b08:	4b4d      	ldr	r3, [pc, #308]	; (8009c40 <xTaskIncrementTick+0x14c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b10:	4a4b      	ldr	r2, [pc, #300]	; (8009c40 <xTaskIncrementTick+0x14c>)
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d121      	bne.n	8009b60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b1c:	4b49      	ldr	r3, [pc, #292]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00b      	beq.n	8009b3e <xTaskIncrementTick+0x4a>
 8009b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2a:	b672      	cpsid	i
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	b662      	cpsie	i
 8009b3a:	603b      	str	r3, [r7, #0]
 8009b3c:	e7fe      	b.n	8009b3c <xTaskIncrementTick+0x48>
 8009b3e:	4b41      	ldr	r3, [pc, #260]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	4b40      	ldr	r3, [pc, #256]	; (8009c48 <xTaskIncrementTick+0x154>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a3e      	ldr	r2, [pc, #248]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b4a:	6013      	str	r3, [r2, #0]
 8009b4c:	4a3e      	ldr	r2, [pc, #248]	; (8009c48 <xTaskIncrementTick+0x154>)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	4b3e      	ldr	r3, [pc, #248]	; (8009c4c <xTaskIncrementTick+0x158>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3301      	adds	r3, #1
 8009b58:	4a3c      	ldr	r2, [pc, #240]	; (8009c4c <xTaskIncrementTick+0x158>)
 8009b5a:	6013      	str	r3, [r2, #0]
 8009b5c:	f000 fad2 	bl	800a104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b60:	4b3b      	ldr	r3, [pc, #236]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d349      	bcc.n	8009bfe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b6a:	4b36      	ldr	r3, [pc, #216]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b74:	4b36      	ldr	r3, [pc, #216]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b7a:	601a      	str	r2, [r3, #0]
					break;
 8009b7c:	e03f      	b.n	8009bfe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7e:	4b31      	ldr	r3, [pc, #196]	; (8009c44 <xTaskIncrementTick+0x150>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d203      	bcs.n	8009b9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b96:	4a2e      	ldr	r2, [pc, #184]	; (8009c50 <xTaskIncrementTick+0x15c>)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b9c:	e02f      	b.n	8009bfe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe fef4 	bl	8008990 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	3318      	adds	r3, #24
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fe feeb 	bl	8008990 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bbe:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <xTaskIncrementTick+0x160>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d903      	bls.n	8009bce <xTaskIncrementTick+0xda>
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bca:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <xTaskIncrementTick+0x160>)
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4613      	mov	r3, r2
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4a1f      	ldr	r2, [pc, #124]	; (8009c58 <xTaskIncrementTick+0x164>)
 8009bdc:	441a      	add	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	3304      	adds	r3, #4
 8009be2:	4619      	mov	r1, r3
 8009be4:	4610      	mov	r0, r2
 8009be6:	f7fe fe76 	bl	80088d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bee:	4b1b      	ldr	r3, [pc, #108]	; (8009c5c <xTaskIncrementTick+0x168>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d3b8      	bcc.n	8009b6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bfc:	e7b5      	b.n	8009b6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009bfe:	4b17      	ldr	r3, [pc, #92]	; (8009c5c <xTaskIncrementTick+0x168>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4914      	ldr	r1, [pc, #80]	; (8009c58 <xTaskIncrementTick+0x164>)
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	440b      	add	r3, r1
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d907      	bls.n	8009c26 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009c16:	2301      	movs	r3, #1
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	e004      	b.n	8009c26 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <xTaskIncrementTick+0x16c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	3301      	adds	r3, #1
 8009c22:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <xTaskIncrementTick+0x16c>)
 8009c24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <xTaskIncrementTick+0x170>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c32:	697b      	ldr	r3, [r7, #20]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	20000dc8 	.word	0x20000dc8
 8009c40:	20000da4 	.word	0x20000da4
 8009c44:	20000d58 	.word	0x20000d58
 8009c48:	20000d5c 	.word	0x20000d5c
 8009c4c:	20000db8 	.word	0x20000db8
 8009c50:	20000dc0 	.word	0x20000dc0
 8009c54:	20000da8 	.word	0x20000da8
 8009c58:	200008d0 	.word	0x200008d0
 8009c5c:	200008cc 	.word	0x200008cc
 8009c60:	20000db0 	.word	0x20000db0
 8009c64:	20000db4 	.word	0x20000db4

08009c68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c6e:	4b28      	ldr	r3, [pc, #160]	; (8009d10 <vTaskSwitchContext+0xa8>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c76:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <vTaskSwitchContext+0xac>)
 8009c78:	2201      	movs	r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c7c:	e042      	b.n	8009d04 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009c7e:	4b25      	ldr	r3, [pc, #148]	; (8009d14 <vTaskSwitchContext+0xac>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c84:	4b24      	ldr	r3, [pc, #144]	; (8009d18 <vTaskSwitchContext+0xb0>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e011      	b.n	8009cb0 <vTaskSwitchContext+0x48>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10b      	bne.n	8009caa <vTaskSwitchContext+0x42>
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
 8009ca8:	e7fe      	b.n	8009ca8 <vTaskSwitchContext+0x40>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	60fb      	str	r3, [r7, #12]
 8009cb0:	491a      	ldr	r1, [pc, #104]	; (8009d1c <vTaskSwitchContext+0xb4>)
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d0e3      	beq.n	8009c8c <vTaskSwitchContext+0x24>
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <vTaskSwitchContext+0xb4>)
 8009cd0:	4413      	add	r3, r2
 8009cd2:	60bb      	str	r3, [r7, #8]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	605a      	str	r2, [r3, #4]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	3308      	adds	r3, #8
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d104      	bne.n	8009cf4 <vTaskSwitchContext+0x8c>
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	4a09      	ldr	r2, [pc, #36]	; (8009d20 <vTaskSwitchContext+0xb8>)
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	4a06      	ldr	r2, [pc, #24]	; (8009d18 <vTaskSwitchContext+0xb0>)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6013      	str	r3, [r2, #0]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	20000dc8 	.word	0x20000dc8
 8009d14:	20000db4 	.word	0x20000db4
 8009d18:	20000da8 	.word	0x20000da8
 8009d1c:	200008d0 	.word	0x200008d0
 8009d20:	200008cc 	.word	0x200008cc

08009d24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10b      	bne.n	8009d4c <vTaskPlaceOnEventList+0x28>
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	b672      	cpsid	i
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	b662      	cpsie	i
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	e7fe      	b.n	8009d4a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d4c:	4b07      	ldr	r3, [pc, #28]	; (8009d6c <vTaskPlaceOnEventList+0x48>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3318      	adds	r3, #24
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7fe fde2 	bl	800891e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d5a:	2101      	movs	r1, #1
 8009d5c:	6838      	ldr	r0, [r7, #0]
 8009d5e:	f000 fa7f 	bl	800a260 <prvAddCurrentTaskToDelayedList>
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	200008cc 	.word	0x200008cc

08009d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10b      	bne.n	8009d9a <vTaskPlaceOnEventListRestricted+0x2a>
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	b672      	cpsid	i
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	b662      	cpsie	i
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e7fe      	b.n	8009d98 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d9a:	4b0a      	ldr	r3, [pc, #40]	; (8009dc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3318      	adds	r3, #24
 8009da0:	4619      	mov	r1, r3
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f7fe fd97 	bl	80088d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009db2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	68b8      	ldr	r0, [r7, #8]
 8009db8:	f000 fa52 	bl	800a260 <prvAddCurrentTaskToDelayedList>
	}
 8009dbc:	bf00      	nop
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	200008cc 	.word	0x200008cc

08009dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10b      	bne.n	8009df6 <xTaskRemoveFromEventList+0x2e>
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	b672      	cpsid	i
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	b662      	cpsie	i
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e7fe      	b.n	8009df4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3318      	adds	r3, #24
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fe fdc8 	bl	8008990 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e00:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <xTaskRemoveFromEventList+0xb0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d11d      	bne.n	8009e44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fdbf 	bl	8008990 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e16:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <xTaskRemoveFromEventList+0xb4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d903      	bls.n	8009e26 <xTaskRemoveFromEventList+0x5e>
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	4a16      	ldr	r2, [pc, #88]	; (8009e7c <xTaskRemoveFromEventList+0xb4>)
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2a:	4613      	mov	r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4a13      	ldr	r2, [pc, #76]	; (8009e80 <xTaskRemoveFromEventList+0xb8>)
 8009e34:	441a      	add	r2, r3
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fe fd4a 	bl	80088d6 <vListInsertEnd>
 8009e42:	e005      	b.n	8009e50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	3318      	adds	r3, #24
 8009e48:	4619      	mov	r1, r3
 8009e4a:	480e      	ldr	r0, [pc, #56]	; (8009e84 <xTaskRemoveFromEventList+0xbc>)
 8009e4c:	f7fe fd43 	bl	80088d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <xTaskRemoveFromEventList+0xc0>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d905      	bls.n	8009e6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e62:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <xTaskRemoveFromEventList+0xc4>)
 8009e64:	2201      	movs	r2, #1
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	e001      	b.n	8009e6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e6e:	697b      	ldr	r3, [r7, #20]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000dc8 	.word	0x20000dc8
 8009e7c:	20000da8 	.word	0x20000da8
 8009e80:	200008d0 	.word	0x200008d0
 8009e84:	20000d60 	.word	0x20000d60
 8009e88:	200008cc 	.word	0x200008cc
 8009e8c:	20000db4 	.word	0x20000db4

08009e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e98:	4b06      	ldr	r3, [pc, #24]	; (8009eb4 <vTaskInternalSetTimeOutState+0x24>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ea0:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <vTaskInternalSetTimeOutState+0x28>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	605a      	str	r2, [r3, #4]
}
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000db8 	.word	0x20000db8
 8009eb8:	20000da4 	.word	0x20000da4

08009ebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b088      	sub	sp, #32
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d10b      	bne.n	8009ee4 <xTaskCheckForTimeOut+0x28>
 8009ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed0:	b672      	cpsid	i
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	b662      	cpsie	i
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	e7fe      	b.n	8009ee2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10b      	bne.n	8009f02 <xTaskCheckForTimeOut+0x46>
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	b672      	cpsid	i
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	b662      	cpsie	i
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e7fe      	b.n	8009f00 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009f02:	f000 fe61 	bl	800abc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <xTaskCheckForTimeOut+0xc0>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	69ba      	ldr	r2, [r7, #24]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f1e:	d102      	bne.n	8009f26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61fb      	str	r3, [r7, #28]
 8009f24:	e023      	b.n	8009f6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <xTaskCheckForTimeOut+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d007      	beq.n	8009f42 <xTaskCheckForTimeOut+0x86>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d302      	bcc.n	8009f42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	61fb      	str	r3, [r7, #28]
 8009f40:	e015      	b.n	8009f6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d20b      	bcs.n	8009f64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	1ad2      	subs	r2, r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f7ff ff99 	bl	8009e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	61fb      	str	r3, [r7, #28]
 8009f62:	e004      	b.n	8009f6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f6e:	f000 fe5d 	bl	800ac2c <vPortExitCritical>

	return xReturn;
 8009f72:	69fb      	ldr	r3, [r7, #28]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3720      	adds	r7, #32
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	20000da4 	.word	0x20000da4
 8009f80:	20000db8 	.word	0x20000db8

08009f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f88:	4b03      	ldr	r3, [pc, #12]	; (8009f98 <vTaskMissedYield+0x14>)
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	20000db4 	.word	0x20000db4

08009f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009fa4:	f000 f852 	bl	800a04c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009fa8:	4b06      	ldr	r3, [pc, #24]	; (8009fc4 <prvIdleTask+0x28>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d9f9      	bls.n	8009fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009fb0:	4b05      	ldr	r3, [pc, #20]	; (8009fc8 <prvIdleTask+0x2c>)
 8009fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009fc0:	e7f0      	b.n	8009fa4 <prvIdleTask+0x8>
 8009fc2:	bf00      	nop
 8009fc4:	200008d0 	.word	0x200008d0
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e00c      	b.n	8009ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4a12      	ldr	r2, [pc, #72]	; (800a02c <prvInitialiseTaskLists+0x60>)
 8009fe4:	4413      	add	r3, r2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fc48 	bl	800887c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3301      	adds	r3, #1
 8009ff0:	607b      	str	r3, [r7, #4]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2b37      	cmp	r3, #55	; 0x37
 8009ff6:	d9ef      	bls.n	8009fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ff8:	480d      	ldr	r0, [pc, #52]	; (800a030 <prvInitialiseTaskLists+0x64>)
 8009ffa:	f7fe fc3f 	bl	800887c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009ffe:	480d      	ldr	r0, [pc, #52]	; (800a034 <prvInitialiseTaskLists+0x68>)
 800a000:	f7fe fc3c 	bl	800887c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a004:	480c      	ldr	r0, [pc, #48]	; (800a038 <prvInitialiseTaskLists+0x6c>)
 800a006:	f7fe fc39 	bl	800887c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a00a:	480c      	ldr	r0, [pc, #48]	; (800a03c <prvInitialiseTaskLists+0x70>)
 800a00c:	f7fe fc36 	bl	800887c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a010:	480b      	ldr	r0, [pc, #44]	; (800a040 <prvInitialiseTaskLists+0x74>)
 800a012:	f7fe fc33 	bl	800887c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a016:	4b0b      	ldr	r3, [pc, #44]	; (800a044 <prvInitialiseTaskLists+0x78>)
 800a018:	4a05      	ldr	r2, [pc, #20]	; (800a030 <prvInitialiseTaskLists+0x64>)
 800a01a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a01c:	4b0a      	ldr	r3, [pc, #40]	; (800a048 <prvInitialiseTaskLists+0x7c>)
 800a01e:	4a05      	ldr	r2, [pc, #20]	; (800a034 <prvInitialiseTaskLists+0x68>)
 800a020:	601a      	str	r2, [r3, #0]
}
 800a022:	bf00      	nop
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	200008d0 	.word	0x200008d0
 800a030:	20000d30 	.word	0x20000d30
 800a034:	20000d44 	.word	0x20000d44
 800a038:	20000d60 	.word	0x20000d60
 800a03c:	20000d74 	.word	0x20000d74
 800a040:	20000d8c 	.word	0x20000d8c
 800a044:	20000d58 	.word	0x20000d58
 800a048:	20000d5c 	.word	0x20000d5c

0800a04c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a052:	e019      	b.n	800a088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a054:	f000 fdb8 	bl	800abc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a058:	4b0f      	ldr	r3, [pc, #60]	; (800a098 <prvCheckTasksWaitingTermination+0x4c>)
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	3304      	adds	r3, #4
 800a064:	4618      	mov	r0, r3
 800a066:	f7fe fc93 	bl	8008990 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a06a:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <prvCheckTasksWaitingTermination+0x50>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3b01      	subs	r3, #1
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <prvCheckTasksWaitingTermination+0x50>)
 800a072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a074:	4b0a      	ldr	r3, [pc, #40]	; (800a0a0 <prvCheckTasksWaitingTermination+0x54>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	3b01      	subs	r3, #1
 800a07a:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <prvCheckTasksWaitingTermination+0x54>)
 800a07c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a07e:	f000 fdd5 	bl	800ac2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f80e 	bl	800a0a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <prvCheckTasksWaitingTermination+0x54>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e1      	bne.n	800a054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a090:	bf00      	nop
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	20000d74 	.word	0x20000d74
 800a09c:	20000da0 	.word	0x20000da0
 800a0a0:	20000d88 	.word	0x20000d88

0800a0a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d108      	bne.n	800a0c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 ff6e 	bl	800af9c <vPortFree>
				vPortFree( pxTCB );
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 ff6b 	bl	800af9c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0c6:	e019      	b.n	800a0fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d103      	bne.n	800a0da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 ff62 	bl	800af9c <vPortFree>
	}
 800a0d8:	e010      	b.n	800a0fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d00b      	beq.n	800a0fc <prvDeleteTCB+0x58>
 800a0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e8:	b672      	cpsid	i
 800a0ea:	f383 8811 	msr	BASEPRI, r3
 800a0ee:	f3bf 8f6f 	isb	sy
 800a0f2:	f3bf 8f4f 	dsb	sy
 800a0f6:	b662      	cpsie	i
 800a0f8:	60fb      	str	r3, [r7, #12]
 800a0fa:	e7fe      	b.n	800a0fa <prvDeleteTCB+0x56>
	}
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a10a:	4b0c      	ldr	r3, [pc, #48]	; (800a13c <prvResetNextTaskUnblockTime+0x38>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d104      	bne.n	800a11e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a114:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <prvResetNextTaskUnblockTime+0x3c>)
 800a116:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a11a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a11c:	e008      	b.n	800a130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a11e:	4b07      	ldr	r3, [pc, #28]	; (800a13c <prvResetNextTaskUnblockTime+0x38>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	4a04      	ldr	r2, [pc, #16]	; (800a140 <prvResetNextTaskUnblockTime+0x3c>)
 800a12e:	6013      	str	r3, [r2, #0]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr
 800a13c:	20000d58 	.word	0x20000d58
 800a140:	20000dc0 	.word	0x20000dc0

0800a144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a14a:	4b0b      	ldr	r3, [pc, #44]	; (800a178 <xTaskGetSchedulerState+0x34>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d102      	bne.n	800a158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a152:	2301      	movs	r3, #1
 800a154:	607b      	str	r3, [r7, #4]
 800a156:	e008      	b.n	800a16a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a158:	4b08      	ldr	r3, [pc, #32]	; (800a17c <xTaskGetSchedulerState+0x38>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a160:	2302      	movs	r3, #2
 800a162:	607b      	str	r3, [r7, #4]
 800a164:	e001      	b.n	800a16a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a166:	2300      	movs	r3, #0
 800a168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a16a:	687b      	ldr	r3, [r7, #4]
	}
 800a16c:	4618      	mov	r0, r3
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	20000dac 	.word	0x20000dac
 800a17c:	20000dc8 	.word	0x20000dc8

0800a180 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d058      	beq.n	800a248 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <xTaskPriorityDisinherit+0xd4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d00b      	beq.n	800a1b8 <xTaskPriorityDisinherit+0x38>
 800a1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a4:	b672      	cpsid	i
 800a1a6:	f383 8811 	msr	BASEPRI, r3
 800a1aa:	f3bf 8f6f 	isb	sy
 800a1ae:	f3bf 8f4f 	dsb	sy
 800a1b2:	b662      	cpsie	i
 800a1b4:	60fb      	str	r3, [r7, #12]
 800a1b6:	e7fe      	b.n	800a1b6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d10b      	bne.n	800a1d8 <xTaskPriorityDisinherit+0x58>
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	b672      	cpsid	i
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	b662      	cpsie	i
 800a1d4:	60bb      	str	r3, [r7, #8]
 800a1d6:	e7fe      	b.n	800a1d6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1dc:	1e5a      	subs	r2, r3, #1
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d02c      	beq.n	800a248 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d128      	bne.n	800a248 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7fe fbc8 	bl	8008990 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a20c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <xTaskPriorityDisinherit+0xd8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d903      	bls.n	800a228 <xTaskPriorityDisinherit+0xa8>
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a0c      	ldr	r2, [pc, #48]	; (800a258 <xTaskPriorityDisinherit+0xd8>)
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22c:	4613      	mov	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4a09      	ldr	r2, [pc, #36]	; (800a25c <xTaskPriorityDisinherit+0xdc>)
 800a236:	441a      	add	r2, r3
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	3304      	adds	r3, #4
 800a23c:	4619      	mov	r1, r3
 800a23e:	4610      	mov	r0, r2
 800a240:	f7fe fb49 	bl	80088d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a244:	2301      	movs	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a248:	697b      	ldr	r3, [r7, #20]
	}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	200008cc 	.word	0x200008cc
 800a258:	20000da8 	.word	0x20000da8
 800a25c:	200008d0 	.word	0x200008d0

0800a260 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a26a:	4b21      	ldr	r3, [pc, #132]	; (800a2f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a270:	4b20      	ldr	r3, [pc, #128]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3304      	adds	r3, #4
 800a276:	4618      	mov	r0, r3
 800a278:	f7fe fb8a 	bl	8008990 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a282:	d10a      	bne.n	800a29a <prvAddCurrentTaskToDelayedList+0x3a>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	3304      	adds	r3, #4
 800a290:	4619      	mov	r1, r3
 800a292:	4819      	ldr	r0, [pc, #100]	; (800a2f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a294:	f7fe fb1f 	bl	80088d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a298:	e026      	b.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4413      	add	r3, r2
 800a2a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2a2:	4b14      	ldr	r3, [pc, #80]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d209      	bcs.n	800a2c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	4b0f      	ldr	r3, [pc, #60]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7fe fb2d 	bl	800891e <vListInsert>
}
 800a2c4:	e010      	b.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2c6:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3304      	adds	r3, #4
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	4610      	mov	r0, r2
 800a2d4:	f7fe fb23 	bl	800891e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2d8:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d202      	bcs.n	800a2e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a2e2:	4a08      	ldr	r2, [pc, #32]	; (800a304 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6013      	str	r3, [r2, #0]
}
 800a2e8:	bf00      	nop
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20000da4 	.word	0x20000da4
 800a2f4:	200008cc 	.word	0x200008cc
 800a2f8:	20000d8c 	.word	0x20000d8c
 800a2fc:	20000d5c 	.word	0x20000d5c
 800a300:	20000d58 	.word	0x20000d58
 800a304:	20000dc0 	.word	0x20000dc0

0800a308 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a312:	f000 fb0d 	bl	800a930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a316:	4b1d      	ldr	r3, [pc, #116]	; (800a38c <xTimerCreateTimerTask+0x84>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d021      	beq.n	800a362 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a326:	1d3a      	adds	r2, r7, #4
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	f107 030c 	add.w	r3, r7, #12
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fa89 	bl	8008848 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	9202      	str	r2, [sp, #8]
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	2302      	movs	r3, #2
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	2300      	movs	r3, #0
 800a346:	460a      	mov	r2, r1
 800a348:	4911      	ldr	r1, [pc, #68]	; (800a390 <xTimerCreateTimerTask+0x88>)
 800a34a:	4812      	ldr	r0, [pc, #72]	; (800a394 <xTimerCreateTimerTask+0x8c>)
 800a34c:	f7ff f840 	bl	80093d0 <xTaskCreateStatic>
 800a350:	4602      	mov	r2, r0
 800a352:	4b11      	ldr	r3, [pc, #68]	; (800a398 <xTimerCreateTimerTask+0x90>)
 800a354:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a356:	4b10      	ldr	r3, [pc, #64]	; (800a398 <xTimerCreateTimerTask+0x90>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a35e:	2301      	movs	r3, #1
 800a360:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10b      	bne.n	800a380 <xTimerCreateTimerTask+0x78>
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	613b      	str	r3, [r7, #16]
 800a37e:	e7fe      	b.n	800a37e <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a380:	697b      	ldr	r3, [r7, #20]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3718      	adds	r7, #24
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20000dfc 	.word	0x20000dfc
 800a390:	0800e8d0 	.word	0x0800e8d0
 800a394:	0800a4d5 	.word	0x0800a4d5
 800a398:	20000e00 	.word	0x20000e00

0800a39c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08a      	sub	sp, #40	; 0x28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10b      	bne.n	800a3cc <xTimerGenericCommand+0x30>
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	b672      	cpsid	i
 800a3ba:	f383 8811 	msr	BASEPRI, r3
 800a3be:	f3bf 8f6f 	isb	sy
 800a3c2:	f3bf 8f4f 	dsb	sy
 800a3c6:	b662      	cpsie	i
 800a3c8:	623b      	str	r3, [r7, #32]
 800a3ca:	e7fe      	b.n	800a3ca <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a3cc:	4b19      	ldr	r3, [pc, #100]	; (800a434 <xTimerGenericCommand+0x98>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d02a      	beq.n	800a42a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	dc18      	bgt.n	800a418 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a3e6:	f7ff fead 	bl	800a144 <xTaskGetSchedulerState>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d109      	bne.n	800a404 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a3f0:	4b10      	ldr	r3, [pc, #64]	; (800a434 <xTimerGenericCommand+0x98>)
 800a3f2:	6818      	ldr	r0, [r3, #0]
 800a3f4:	f107 0110 	add.w	r1, r7, #16
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3fc:	f7fe fbfc 	bl	8008bf8 <xQueueGenericSend>
 800a400:	6278      	str	r0, [r7, #36]	; 0x24
 800a402:	e012      	b.n	800a42a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <xTimerGenericCommand+0x98>)
 800a406:	6818      	ldr	r0, [r3, #0]
 800a408:	f107 0110 	add.w	r1, r7, #16
 800a40c:	2300      	movs	r3, #0
 800a40e:	2200      	movs	r2, #0
 800a410:	f7fe fbf2 	bl	8008bf8 <xQueueGenericSend>
 800a414:	6278      	str	r0, [r7, #36]	; 0x24
 800a416:	e008      	b.n	800a42a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <xTimerGenericCommand+0x98>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	f107 0110 	add.w	r1, r7, #16
 800a420:	2300      	movs	r3, #0
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	f7fe fcea 	bl	8008dfc <xQueueGenericSendFromISR>
 800a428:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3728      	adds	r7, #40	; 0x28
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	20000dfc 	.word	0x20000dfc

0800a438 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a442:	4b23      	ldr	r3, [pc, #140]	; (800a4d0 <prvProcessExpiredTimer+0x98>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	3304      	adds	r3, #4
 800a450:	4618      	mov	r0, r3
 800a452:	f7fe fa9d 	bl	8008990 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d023      	beq.n	800a4ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	18d1      	adds	r1, r2, r3
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	6978      	ldr	r0, [r7, #20]
 800a472:	f000 f8d3 	bl	800a61c <prvInsertTimerInActiveList>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d020      	beq.n	800a4be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a47c:	2300      	movs	r3, #0
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	2300      	movs	r3, #0
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	2100      	movs	r1, #0
 800a486:	6978      	ldr	r0, [r7, #20]
 800a488:	f7ff ff88 	bl	800a39c <xTimerGenericCommand>
 800a48c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d114      	bne.n	800a4be <prvProcessExpiredTimer+0x86>
 800a494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a498:	b672      	cpsid	i
 800a49a:	f383 8811 	msr	BASEPRI, r3
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f3bf 8f4f 	dsb	sy
 800a4a6:	b662      	cpsie	i
 800a4a8:	60fb      	str	r3, [r7, #12]
 800a4aa:	e7fe      	b.n	800a4aa <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4b2:	f023 0301 	bic.w	r3, r3, #1
 800a4b6:	b2da      	uxtb	r2, r3
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	6a1b      	ldr	r3, [r3, #32]
 800a4c2:	6978      	ldr	r0, [r7, #20]
 800a4c4:	4798      	blx	r3
}
 800a4c6:	bf00      	nop
 800a4c8:	3718      	adds	r7, #24
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20000df4 	.word	0x20000df4

0800a4d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f857 	bl	800a594 <prvGetNextExpireTime>
 800a4e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f000 f803 	bl	800a4f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a4f2:	f000 f8d5 	bl	800a6a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4f6:	e7f1      	b.n	800a4dc <prvTimerTask+0x8>

0800a4f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a502:	f7ff fa29 	bl	8009958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a506:	f107 0308 	add.w	r3, r7, #8
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 f866 	bl	800a5dc <prvSampleTimeNow>
 800a510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d130      	bne.n	800a57a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <prvProcessTimerOrBlockTask+0x3c>
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	429a      	cmp	r2, r3
 800a524:	d806      	bhi.n	800a534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a526:	f7ff fa25 	bl	8009974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f7ff ff83 	bl	800a438 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a532:	e024      	b.n	800a57e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d008      	beq.n	800a54c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a53a:	4b13      	ldr	r3, [pc, #76]	; (800a588 <prvProcessTimerOrBlockTask+0x90>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <prvProcessTimerOrBlockTask+0x50>
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <prvProcessTimerOrBlockTask+0x52>
 800a548:	2300      	movs	r3, #0
 800a54a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a54c:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <prvProcessTimerOrBlockTask+0x94>)
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	683a      	ldr	r2, [r7, #0]
 800a558:	4619      	mov	r1, r3
 800a55a:	f7fe ff05 	bl	8009368 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a55e:	f7ff fa09 	bl	8009974 <xTaskResumeAll>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10a      	bne.n	800a57e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a568:	4b09      	ldr	r3, [pc, #36]	; (800a590 <prvProcessTimerOrBlockTask+0x98>)
 800a56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	f3bf 8f6f 	isb	sy
}
 800a578:	e001      	b.n	800a57e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a57a:	f7ff f9fb 	bl	8009974 <xTaskResumeAll>
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	20000df8 	.word	0x20000df8
 800a58c:	20000dfc 	.word	0x20000dfc
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <prvGetNextExpireTime+0x44>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <prvGetNextExpireTime+0x16>
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	e000      	b.n	800a5ac <prvGetNextExpireTime+0x18>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d105      	bne.n	800a5c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <prvGetNextExpireTime+0x44>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	60fb      	str	r3, [r7, #12]
 800a5c2:	e001      	b.n	800a5c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000df4 	.word	0x20000df4

0800a5dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a5e4:	f7ff fa64 	bl	8009ab0 <xTaskGetTickCount>
 800a5e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <prvSampleTimeNow+0x3c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d205      	bcs.n	800a600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a5f4:	f000 f936 	bl	800a864 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	e002      	b.n	800a606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a606:	4a04      	ldr	r2, [pc, #16]	; (800a618 <prvSampleTimeNow+0x3c>)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a60c:	68fb      	ldr	r3, [r7, #12]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20000e04 	.word	0x20000e04

0800a61c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d812      	bhi.n	800a668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	1ad2      	subs	r2, r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]
 800a654:	e01b      	b.n	800a68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a656:	4b10      	ldr	r3, [pc, #64]	; (800a698 <prvInsertTimerInActiveList+0x7c>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	3304      	adds	r3, #4
 800a65e:	4619      	mov	r1, r3
 800a660:	4610      	mov	r0, r2
 800a662:	f7fe f95c 	bl	800891e <vListInsert>
 800a666:	e012      	b.n	800a68e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d206      	bcs.n	800a67e <prvInsertTimerInActiveList+0x62>
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	d302      	bcc.n	800a67e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	e007      	b.n	800a68e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a67e:	4b07      	ldr	r3, [pc, #28]	; (800a69c <prvInsertTimerInActiveList+0x80>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	3304      	adds	r3, #4
 800a686:	4619      	mov	r1, r3
 800a688:	4610      	mov	r0, r2
 800a68a:	f7fe f948 	bl	800891e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a68e:	697b      	ldr	r3, [r7, #20]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3718      	adds	r7, #24
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	20000df8 	.word	0x20000df8
 800a69c:	20000df4 	.word	0x20000df4

0800a6a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08e      	sub	sp, #56	; 0x38
 800a6a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6a6:	e0cc      	b.n	800a842 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	da19      	bge.n	800a6e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a6ae:	1d3b      	adds	r3, r7, #4
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10b      	bne.n	800a6d2 <prvProcessReceivedCommands+0x32>
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	b672      	cpsid	i
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	b662      	cpsie	i
 800a6ce:	61fb      	str	r3, [r7, #28]
 800a6d0:	e7fe      	b.n	800a6d0 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6d8:	6850      	ldr	r0, [r2, #4]
 800a6da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6dc:	6892      	ldr	r2, [r2, #8]
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f2c0 80ab 	blt.w	800a840 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d004      	beq.n	800a700 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7fe f948 	bl	8008990 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a700:	463b      	mov	r3, r7
 800a702:	4618      	mov	r0, r3
 800a704:	f7ff ff6a 	bl	800a5dc <prvSampleTimeNow>
 800a708:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b09      	cmp	r3, #9
 800a70e:	f200 8098 	bhi.w	800a842 <prvProcessReceivedCommands+0x1a2>
 800a712:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <prvProcessReceivedCommands+0x78>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a741 	.word	0x0800a741
 800a724:	0800a7b7 	.word	0x0800a7b7
 800a728:	0800a7cb 	.word	0x0800a7cb
 800a72c:	0800a817 	.word	0x0800a817
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a741 	.word	0x0800a741
 800a738:	0800a7b7 	.word	0x0800a7b7
 800a73c:	0800a7cb 	.word	0x0800a7cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	18d1      	adds	r1, r2, r3
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a75e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a760:	f7ff ff5c 	bl	800a61c <prvInsertTimerInActiveList>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d06b      	beq.n	800a842 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d060      	beq.n	800a842 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	441a      	add	r2, r3
 800a788:	2300      	movs	r3, #0
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	2300      	movs	r3, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a792:	f7ff fe03 	bl	800a39c <xTimerGenericCommand>
 800a796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d151      	bne.n	800a842 <prvProcessReceivedCommands+0x1a2>
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	b672      	cpsid	i
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	b662      	cpsie	i
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	e7fe      	b.n	800a7b4 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7bc:	f023 0301 	bic.w	r3, r3, #1
 800a7c0:	b2da      	uxtb	r2, r3
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a7c8:	e03b      	b.n	800a842 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d0:	f043 0301 	orr.w	r3, r3, #1
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10b      	bne.n	800a802 <prvProcessReceivedCommands+0x162>
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	b672      	cpsid	i
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	b662      	cpsie	i
 800a7fe:	617b      	str	r3, [r7, #20]
 800a800:	e7fe      	b.n	800a800 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	699a      	ldr	r2, [r3, #24]
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	18d1      	adds	r1, r2, r3
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a810:	f7ff ff04 	bl	800a61c <prvInsertTimerInActiveList>
					break;
 800a814:	e015      	b.n	800a842 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a81c:	f003 0302 	and.w	r3, r3, #2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d103      	bne.n	800a82c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a826:	f000 fbb9 	bl	800af9c <vPortFree>
 800a82a:	e00a      	b.n	800a842 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a832:	f023 0301 	bic.w	r3, r3, #1
 800a836:	b2da      	uxtb	r2, r3
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a83e:	e000      	b.n	800a842 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a840:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a842:	4b07      	ldr	r3, [pc, #28]	; (800a860 <prvProcessReceivedCommands+0x1c0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	1d39      	adds	r1, r7, #4
 800a848:	2200      	movs	r2, #0
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe fb72 	bl	8008f34 <xQueueReceive>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	f47f af28 	bne.w	800a6a8 <prvProcessReceivedCommands+0x8>
	}
}
 800a858:	bf00      	nop
 800a85a:	3730      	adds	r7, #48	; 0x30
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20000dfc 	.word	0x20000dfc

0800a864 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a86a:	e049      	b.n	800a900 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a86c:	4b2e      	ldr	r3, [pc, #184]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a876:	4b2c      	ldr	r3, [pc, #176]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3304      	adds	r3, #4
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe f883 	bl	8008990 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d02f      	beq.n	800a900 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d90e      	bls.n	800a8d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8be:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4610      	mov	r0, r2
 800a8ca:	f7fe f828 	bl	800891e <vListInsert>
 800a8ce:	e017      	b.n	800a900 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	2100      	movs	r1, #0
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fd5e 	bl	800a39c <xTimerGenericCommand>
 800a8e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10b      	bne.n	800a900 <prvSwitchTimerLists+0x9c>
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	b672      	cpsid	i
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	b662      	cpsie	i
 800a8fc:	603b      	str	r3, [r7, #0]
 800a8fe:	e7fe      	b.n	800a8fe <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a900:	4b09      	ldr	r3, [pc, #36]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1b0      	bne.n	800a86c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a90a:	4b07      	ldr	r3, [pc, #28]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <prvSwitchTimerLists+0xc8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a04      	ldr	r2, [pc, #16]	; (800a928 <prvSwitchTimerLists+0xc4>)
 800a916:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a918:	4a04      	ldr	r2, [pc, #16]	; (800a92c <prvSwitchTimerLists+0xc8>)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	6013      	str	r3, [r2, #0]
}
 800a91e:	bf00      	nop
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	20000df4 	.word	0x20000df4
 800a92c:	20000df8 	.word	0x20000df8

0800a930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a936:	f000 f947 	bl	800abc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a93a:	4b15      	ldr	r3, [pc, #84]	; (800a990 <prvCheckForValidListAndQueue+0x60>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d120      	bne.n	800a984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a942:	4814      	ldr	r0, [pc, #80]	; (800a994 <prvCheckForValidListAndQueue+0x64>)
 800a944:	f7fd ff9a 	bl	800887c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a948:	4813      	ldr	r0, [pc, #76]	; (800a998 <prvCheckForValidListAndQueue+0x68>)
 800a94a:	f7fd ff97 	bl	800887c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a94e:	4b13      	ldr	r3, [pc, #76]	; (800a99c <prvCheckForValidListAndQueue+0x6c>)
 800a950:	4a10      	ldr	r2, [pc, #64]	; (800a994 <prvCheckForValidListAndQueue+0x64>)
 800a952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a954:	4b12      	ldr	r3, [pc, #72]	; (800a9a0 <prvCheckForValidListAndQueue+0x70>)
 800a956:	4a10      	ldr	r2, [pc, #64]	; (800a998 <prvCheckForValidListAndQueue+0x68>)
 800a958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a95a:	2300      	movs	r3, #0
 800a95c:	9300      	str	r3, [sp, #0]
 800a95e:	4b11      	ldr	r3, [pc, #68]	; (800a9a4 <prvCheckForValidListAndQueue+0x74>)
 800a960:	4a11      	ldr	r2, [pc, #68]	; (800a9a8 <prvCheckForValidListAndQueue+0x78>)
 800a962:	2110      	movs	r1, #16
 800a964:	200a      	movs	r0, #10
 800a966:	f7fe f8a7 	bl	8008ab8 <xQueueGenericCreateStatic>
 800a96a:	4602      	mov	r2, r0
 800a96c:	4b08      	ldr	r3, [pc, #32]	; (800a990 <prvCheckForValidListAndQueue+0x60>)
 800a96e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <prvCheckForValidListAndQueue+0x60>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d005      	beq.n	800a984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <prvCheckForValidListAndQueue+0x60>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	490b      	ldr	r1, [pc, #44]	; (800a9ac <prvCheckForValidListAndQueue+0x7c>)
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fcca 	bl	8009318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a984:	f000 f952 	bl	800ac2c <vPortExitCritical>
}
 800a988:	bf00      	nop
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	20000dfc 	.word	0x20000dfc
 800a994:	20000dcc 	.word	0x20000dcc
 800a998:	20000de0 	.word	0x20000de0
 800a99c:	20000df4 	.word	0x20000df4
 800a9a0:	20000df8 	.word	0x20000df8
 800a9a4:	20000ea8 	.word	0x20000ea8
 800a9a8:	20000e08 	.word	0x20000e08
 800a9ac:	0800e8d8 	.word	0x0800e8d8

0800a9b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3b04      	subs	r3, #4
 800a9c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3b04      	subs	r3, #4
 800a9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	f023 0201 	bic.w	r2, r3, #1
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	3b04      	subs	r3, #4
 800a9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a9e0:	4a0c      	ldr	r2, [pc, #48]	; (800aa14 <pxPortInitialiseStack+0x64>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3b14      	subs	r3, #20
 800a9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f06f 0202 	mvn.w	r2, #2
 800a9fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	3b20      	subs	r3, #32
 800aa04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aa06:	68fb      	ldr	r3, [r7, #12]
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr
 800aa14:	0800aa19 	.word	0x0800aa19

0800aa18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aa22:	4b13      	ldr	r3, [pc, #76]	; (800aa70 <prvTaskExitError+0x58>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa2a:	d00b      	beq.n	800aa44 <prvTaskExitError+0x2c>
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	b672      	cpsid	i
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	b662      	cpsie	i
 800aa40:	60fb      	str	r3, [r7, #12]
 800aa42:	e7fe      	b.n	800aa42 <prvTaskExitError+0x2a>
 800aa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa48:	b672      	cpsid	i
 800aa4a:	f383 8811 	msr	BASEPRI, r3
 800aa4e:	f3bf 8f6f 	isb	sy
 800aa52:	f3bf 8f4f 	dsb	sy
 800aa56:	b662      	cpsie	i
 800aa58:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aa5a:	bf00      	nop
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d0fc      	beq.n	800aa5c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	2000000c 	.word	0x2000000c
	...

0800aa80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa80:	4b07      	ldr	r3, [pc, #28]	; (800aaa0 <pxCurrentTCBConst2>)
 800aa82:	6819      	ldr	r1, [r3, #0]
 800aa84:	6808      	ldr	r0, [r1, #0]
 800aa86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8a:	f380 8809 	msr	PSP, r0
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f380 8811 	msr	BASEPRI, r0
 800aa9a:	4770      	bx	lr
 800aa9c:	f3af 8000 	nop.w

0800aaa0 <pxCurrentTCBConst2>:
 800aaa0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop

0800aaa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aaa8:	4808      	ldr	r0, [pc, #32]	; (800aacc <prvPortStartFirstTask+0x24>)
 800aaaa:	6800      	ldr	r0, [r0, #0]
 800aaac:	6800      	ldr	r0, [r0, #0]
 800aaae:	f380 8808 	msr	MSP, r0
 800aab2:	f04f 0000 	mov.w	r0, #0
 800aab6:	f380 8814 	msr	CONTROL, r0
 800aaba:	b662      	cpsie	i
 800aabc:	b661      	cpsie	f
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	df00      	svc	0
 800aac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aaca:	bf00      	nop
 800aacc:	e000ed08 	.word	0xe000ed08

0800aad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aad6:	4b36      	ldr	r3, [pc, #216]	; (800abb0 <xPortStartScheduler+0xe0>)
 800aad8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	22ff      	movs	r2, #255	; 0xff
 800aae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aaf0:	78fb      	ldrb	r3, [r7, #3]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	4b2e      	ldr	r3, [pc, #184]	; (800abb4 <xPortStartScheduler+0xe4>)
 800aafc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aafe:	4b2e      	ldr	r3, [pc, #184]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab00:	2207      	movs	r2, #7
 800ab02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab04:	e009      	b.n	800ab1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ab06:	4b2c      	ldr	r3, [pc, #176]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3b01      	subs	r3, #1
 800ab0c:	4a2a      	ldr	r2, [pc, #168]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab22:	2b80      	cmp	r3, #128	; 0x80
 800ab24:	d0ef      	beq.n	800ab06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ab26:	4b24      	ldr	r3, [pc, #144]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f1c3 0307 	rsb	r3, r3, #7
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d00b      	beq.n	800ab4a <xPortStartScheduler+0x7a>
 800ab32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab36:	b672      	cpsid	i
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	b662      	cpsie	i
 800ab46:	60bb      	str	r3, [r7, #8]
 800ab48:	e7fe      	b.n	800ab48 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	021b      	lsls	r3, r3, #8
 800ab50:	4a19      	ldr	r2, [pc, #100]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab52:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ab54:	4b18      	ldr	r3, [pc, #96]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab5c:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <xPortStartScheduler+0xe8>)
 800ab5e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab68:	4b14      	ldr	r3, [pc, #80]	; (800abbc <xPortStartScheduler+0xec>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a13      	ldr	r2, [pc, #76]	; (800abbc <xPortStartScheduler+0xec>)
 800ab6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab72:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab74:	4b11      	ldr	r3, [pc, #68]	; (800abbc <xPortStartScheduler+0xec>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a10      	ldr	r2, [pc, #64]	; (800abbc <xPortStartScheduler+0xec>)
 800ab7a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab7e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab80:	f000 f8d4 	bl	800ad2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab84:	4b0e      	ldr	r3, [pc, #56]	; (800abc0 <xPortStartScheduler+0xf0>)
 800ab86:	2200      	movs	r2, #0
 800ab88:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab8a:	f000 f8f3 	bl	800ad74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <xPortStartScheduler+0xf4>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a0c      	ldr	r2, [pc, #48]	; (800abc4 <xPortStartScheduler+0xf4>)
 800ab94:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab98:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab9a:	f7ff ff85 	bl	800aaa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab9e:	f7ff f863 	bl	8009c68 <vTaskSwitchContext>
	prvTaskExitError();
 800aba2:	f7ff ff39 	bl	800aa18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aba6:	2300      	movs	r3, #0
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}
 800abb0:	e000e400 	.word	0xe000e400
 800abb4:	20000ef8 	.word	0x20000ef8
 800abb8:	20000efc 	.word	0x20000efc
 800abbc:	e000ed20 	.word	0xe000ed20
 800abc0:	2000000c 	.word	0x2000000c
 800abc4:	e000ef34 	.word	0xe000ef34

0800abc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd2:	b672      	cpsid	i
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	b662      	cpsie	i
 800abe2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	3301      	adds	r3, #1
 800abea:	4a0e      	ldr	r2, [pc, #56]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800abee:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <vPortEnterCritical+0x5c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d110      	bne.n	800ac18 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800abf6:	4b0c      	ldr	r3, [pc, #48]	; (800ac28 <vPortEnterCritical+0x60>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d00b      	beq.n	800ac18 <vPortEnterCritical+0x50>
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	b672      	cpsid	i
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	f3bf 8f6f 	isb	sy
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	b662      	cpsie	i
 800ac14:	603b      	str	r3, [r7, #0]
 800ac16:	e7fe      	b.n	800ac16 <vPortEnterCritical+0x4e>
	}
}
 800ac18:	bf00      	nop
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	2000000c 	.word	0x2000000c
 800ac28:	e000ed04 	.word	0xe000ed04

0800ac2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ac32:	4b12      	ldr	r3, [pc, #72]	; (800ac7c <vPortExitCritical+0x50>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <vPortExitCritical+0x26>
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	b672      	cpsid	i
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	b662      	cpsie	i
 800ac4e:	607b      	str	r3, [r7, #4]
 800ac50:	e7fe      	b.n	800ac50 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800ac52:	4b0a      	ldr	r3, [pc, #40]	; (800ac7c <vPortExitCritical+0x50>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <vPortExitCritical+0x50>)
 800ac5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <vPortExitCritical+0x50>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d104      	bne.n	800ac6e <vPortExitCritical+0x42>
 800ac64:	2300      	movs	r3, #0
 800ac66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	2000000c 	.word	0x2000000c

0800ac80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac80:	f3ef 8009 	mrs	r0, PSP
 800ac84:	f3bf 8f6f 	isb	sy
 800ac88:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <pxCurrentTCBConst>)
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	f01e 0f10 	tst.w	lr, #16
 800ac90:	bf08      	it	eq
 800ac92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9a:	6010      	str	r0, [r2, #0]
 800ac9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aca4:	b672      	cpsid	i
 800aca6:	f380 8811 	msr	BASEPRI, r0
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	b662      	cpsie	i
 800acb4:	f7fe ffd8 	bl	8009c68 <vTaskSwitchContext>
 800acb8:	f04f 0000 	mov.w	r0, #0
 800acbc:	f380 8811 	msr	BASEPRI, r0
 800acc0:	bc09      	pop	{r0, r3}
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	6808      	ldr	r0, [r1, #0]
 800acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	f01e 0f10 	tst.w	lr, #16
 800acce:	bf08      	it	eq
 800acd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800acd4:	f380 8809 	msr	PSP, r0
 800acd8:	f3bf 8f6f 	isb	sy
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop

0800ace0 <pxCurrentTCBConst>:
 800ace0:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	b672      	cpsid	i
 800acf4:	f383 8811 	msr	BASEPRI, r3
 800acf8:	f3bf 8f6f 	isb	sy
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	b662      	cpsie	i
 800ad02:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ad04:	f7fe fef6 	bl	8009af4 <xTaskIncrementTick>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ad0e:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <SysTick_Handler+0x40>)
 800ad10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ad20:	bf00      	nop
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	e000ed04 	.word	0xe000ed04

0800ad2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ad30:	4b0b      	ldr	r3, [pc, #44]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad32:	2200      	movs	r2, #0
 800ad34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ad36:	4b0b      	ldr	r3, [pc, #44]	; (800ad64 <vPortSetupTimerInterrupt+0x38>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ad3c:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <vPortSetupTimerInterrupt+0x3c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a0a      	ldr	r2, [pc, #40]	; (800ad6c <vPortSetupTimerInterrupt+0x40>)
 800ad42:	fba2 2303 	umull	r2, r3, r2, r3
 800ad46:	099b      	lsrs	r3, r3, #6
 800ad48:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <vPortSetupTimerInterrupt+0x44>)
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <vPortSetupTimerInterrupt+0x34>)
 800ad50:	2207      	movs	r2, #7
 800ad52:	601a      	str	r2, [r3, #0]
}
 800ad54:	bf00      	nop
 800ad56:	46bd      	mov	sp, r7
 800ad58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	e000e010 	.word	0xe000e010
 800ad64:	e000e018 	.word	0xe000e018
 800ad68:	20000000 	.word	0x20000000
 800ad6c:	10624dd3 	.word	0x10624dd3
 800ad70:	e000e014 	.word	0xe000e014

0800ad74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad84 <vPortEnableVFP+0x10>
 800ad78:	6801      	ldr	r1, [r0, #0]
 800ad7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad7e:	6001      	str	r1, [r0, #0]
 800ad80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad82:	bf00      	nop
 800ad84:	e000ed88 	.word	0xe000ed88

0800ad88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad8e:	f3ef 8305 	mrs	r3, IPSR
 800ad92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d915      	bls.n	800adc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad9a:	4a18      	ldr	r2, [pc, #96]	; (800adfc <vPortValidateInterruptPriority+0x74>)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ada4:	4b16      	ldr	r3, [pc, #88]	; (800ae00 <vPortValidateInterruptPriority+0x78>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	7afa      	ldrb	r2, [r7, #11]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d20b      	bcs.n	800adc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	607b      	str	r3, [r7, #4]
 800adc4:	e7fe      	b.n	800adc4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800adc6:	4b0f      	ldr	r3, [pc, #60]	; (800ae04 <vPortValidateInterruptPriority+0x7c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800adce:	4b0e      	ldr	r3, [pc, #56]	; (800ae08 <vPortValidateInterruptPriority+0x80>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	429a      	cmp	r2, r3
 800add4:	d90b      	bls.n	800adee <vPortValidateInterruptPriority+0x66>
 800add6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adda:	b672      	cpsid	i
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	b662      	cpsie	i
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	e7fe      	b.n	800adec <vPortValidateInterruptPriority+0x64>
	}
 800adee:	bf00      	nop
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	e000e3f0 	.word	0xe000e3f0
 800ae00:	20000ef8 	.word	0x20000ef8
 800ae04:	e000ed0c 	.word	0xe000ed0c
 800ae08:	20000efc 	.word	0x20000efc

0800ae0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ae18:	f7fe fd9e 	bl	8009958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ae1c:	4b5a      	ldr	r3, [pc, #360]	; (800af88 <pvPortMalloc+0x17c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ae24:	f000 f916 	bl	800b054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ae28:	4b58      	ldr	r3, [pc, #352]	; (800af8c <pvPortMalloc+0x180>)
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4013      	ands	r3, r2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8090 	bne.w	800af56 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01e      	beq.n	800ae7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ae3c:	2208      	movs	r2, #8
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4413      	add	r3, r2
 800ae42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d015      	beq.n	800ae7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f023 0307 	bic.w	r3, r3, #7
 800ae54:	3308      	adds	r3, #8
 800ae56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f003 0307 	and.w	r3, r3, #7
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <pvPortMalloc+0x6e>
 800ae62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae66:	b672      	cpsid	i
 800ae68:	f383 8811 	msr	BASEPRI, r3
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f3bf 8f4f 	dsb	sy
 800ae74:	b662      	cpsie	i
 800ae76:	617b      	str	r3, [r7, #20]
 800ae78:	e7fe      	b.n	800ae78 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d06a      	beq.n	800af56 <pvPortMalloc+0x14a>
 800ae80:	4b43      	ldr	r3, [pc, #268]	; (800af90 <pvPortMalloc+0x184>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d865      	bhi.n	800af56 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae8a:	4b42      	ldr	r3, [pc, #264]	; (800af94 <pvPortMalloc+0x188>)
 800ae8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae8e:	4b41      	ldr	r3, [pc, #260]	; (800af94 <pvPortMalloc+0x188>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae94:	e004      	b.n	800aea0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d903      	bls.n	800aeb2 <pvPortMalloc+0xa6>
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f1      	bne.n	800ae96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aeb2:	4b35      	ldr	r3, [pc, #212]	; (800af88 <pvPortMalloc+0x17c>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d04c      	beq.n	800af56 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2208      	movs	r2, #8
 800aec2:	4413      	add	r3, r2
 800aec4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	1ad2      	subs	r2, r2, r3
 800aed6:	2308      	movs	r3, #8
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	429a      	cmp	r2, r3
 800aedc:	d920      	bls.n	800af20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	4413      	add	r3, r2
 800aee4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aee6:	69bb      	ldr	r3, [r7, #24]
 800aee8:	f003 0307 	and.w	r3, r3, #7
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d00b      	beq.n	800af08 <pvPortMalloc+0xfc>
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	b672      	cpsid	i
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	b662      	cpsie	i
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	e7fe      	b.n	800af06 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	1ad2      	subs	r2, r2, r3
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800af14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800af1a:	69b8      	ldr	r0, [r7, #24]
 800af1c:	f000 f8fc 	bl	800b118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800af20:	4b1b      	ldr	r3, [pc, #108]	; (800af90 <pvPortMalloc+0x184>)
 800af22:	681a      	ldr	r2, [r3, #0]
 800af24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	1ad3      	subs	r3, r2, r3
 800af2a:	4a19      	ldr	r2, [pc, #100]	; (800af90 <pvPortMalloc+0x184>)
 800af2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800af2e:	4b18      	ldr	r3, [pc, #96]	; (800af90 <pvPortMalloc+0x184>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4b19      	ldr	r3, [pc, #100]	; (800af98 <pvPortMalloc+0x18c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	429a      	cmp	r2, r3
 800af38:	d203      	bcs.n	800af42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800af3a:	4b15      	ldr	r3, [pc, #84]	; (800af90 <pvPortMalloc+0x184>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a16      	ldr	r2, [pc, #88]	; (800af98 <pvPortMalloc+0x18c>)
 800af40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	685a      	ldr	r2, [r3, #4]
 800af46:	4b11      	ldr	r3, [pc, #68]	; (800af8c <pvPortMalloc+0x180>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	431a      	orrs	r2, r3
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af56:	f7fe fd0d 	bl	8009974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f003 0307 	and.w	r3, r3, #7
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <pvPortMalloc+0x170>
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	b672      	cpsid	i
 800af6a:	f383 8811 	msr	BASEPRI, r3
 800af6e:	f3bf 8f6f 	isb	sy
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	b662      	cpsie	i
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e7fe      	b.n	800af7a <pvPortMalloc+0x16e>
	return pvReturn;
 800af7c:	69fb      	ldr	r3, [r7, #28]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3728      	adds	r7, #40	; 0x28
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20004b08 	.word	0x20004b08
 800af8c:	20004b14 	.word	0x20004b14
 800af90:	20004b0c 	.word	0x20004b0c
 800af94:	20004b00 	.word	0x20004b00
 800af98:	20004b10 	.word	0x20004b10

0800af9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d04a      	beq.n	800b044 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800afae:	2308      	movs	r3, #8
 800afb0:	425b      	negs	r3, r3
 800afb2:	697a      	ldr	r2, [r7, #20]
 800afb4:	4413      	add	r3, r2
 800afb6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	4b22      	ldr	r3, [pc, #136]	; (800b04c <vPortFree+0xb0>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4013      	ands	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10b      	bne.n	800afe2 <vPortFree+0x46>
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	b672      	cpsid	i
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	b662      	cpsie	i
 800afde:	60fb      	str	r3, [r7, #12]
 800afe0:	e7fe      	b.n	800afe0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00b      	beq.n	800b002 <vPortFree+0x66>
 800afea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afee:	b672      	cpsid	i
 800aff0:	f383 8811 	msr	BASEPRI, r3
 800aff4:	f3bf 8f6f 	isb	sy
 800aff8:	f3bf 8f4f 	dsb	sy
 800affc:	b662      	cpsie	i
 800affe:	60bb      	str	r3, [r7, #8]
 800b000:	e7fe      	b.n	800b000 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	4b11      	ldr	r3, [pc, #68]	; (800b04c <vPortFree+0xb0>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4013      	ands	r3, r2
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d019      	beq.n	800b044 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d115      	bne.n	800b044 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	4b0b      	ldr	r3, [pc, #44]	; (800b04c <vPortFree+0xb0>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	43db      	mvns	r3, r3
 800b022:	401a      	ands	r2, r3
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b028:	f7fe fc96 	bl	8009958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	685a      	ldr	r2, [r3, #4]
 800b030:	4b07      	ldr	r3, [pc, #28]	; (800b050 <vPortFree+0xb4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4413      	add	r3, r2
 800b036:	4a06      	ldr	r2, [pc, #24]	; (800b050 <vPortFree+0xb4>)
 800b038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b03a:	6938      	ldr	r0, [r7, #16]
 800b03c:	f000 f86c 	bl	800b118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b040:	f7fe fc98 	bl	8009974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b044:	bf00      	nop
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20004b14 	.word	0x20004b14
 800b050:	20004b0c 	.word	0x20004b0c

0800b054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <prvHeapInit+0xac>)
 800b062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00c      	beq.n	800b088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3307      	adds	r3, #7
 800b072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f023 0307 	bic.w	r3, r3, #7
 800b07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b07c:	68ba      	ldr	r2, [r7, #8]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <prvHeapInit+0xac>)
 800b084:	4413      	add	r3, r2
 800b086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b08c:	4a1d      	ldr	r2, [pc, #116]	; (800b104 <prvHeapInit+0xb0>)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b092:	4b1c      	ldr	r3, [pc, #112]	; (800b104 <prvHeapInit+0xb0>)
 800b094:	2200      	movs	r2, #0
 800b096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	4413      	add	r3, r2
 800b09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b0a0:	2208      	movs	r2, #8
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1a9b      	subs	r3, r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0307 	bic.w	r3, r3, #7
 800b0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	4a15      	ldr	r2, [pc, #84]	; (800b108 <prvHeapInit+0xb4>)
 800b0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <prvHeapInit+0xb4>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b0be:	4b12      	ldr	r3, [pc, #72]	; (800b108 <prvHeapInit+0xb4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b0d4:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <prvHeapInit+0xb4>)
 800b0d6:	681a      	ldr	r2, [r3, #0]
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	4a0a      	ldr	r2, [pc, #40]	; (800b10c <prvHeapInit+0xb8>)
 800b0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	4a09      	ldr	r2, [pc, #36]	; (800b110 <prvHeapInit+0xbc>)
 800b0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ec:	4b09      	ldr	r3, [pc, #36]	; (800b114 <prvHeapInit+0xc0>)
 800b0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0f2:	601a      	str	r2, [r3, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	20000f00 	.word	0x20000f00
 800b104:	20004b00 	.word	0x20004b00
 800b108:	20004b08 	.word	0x20004b08
 800b10c:	20004b10 	.word	0x20004b10
 800b110:	20004b0c 	.word	0x20004b0c
 800b114:	20004b14 	.word	0x20004b14

0800b118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b120:	4b28      	ldr	r3, [pc, #160]	; (800b1c4 <prvInsertBlockIntoFreeList+0xac>)
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e002      	b.n	800b12c <prvInsertBlockIntoFreeList+0x14>
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	60fb      	str	r3, [r7, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	429a      	cmp	r2, r3
 800b134:	d8f7      	bhi.n	800b126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	68ba      	ldr	r2, [r7, #8]
 800b140:	4413      	add	r3, r2
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	429a      	cmp	r2, r3
 800b146:	d108      	bne.n	800b15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	441a      	add	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	441a      	add	r2, r3
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d118      	bne.n	800b1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	4b15      	ldr	r3, [pc, #84]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d00d      	beq.n	800b196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	441a      	add	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	e008      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b196:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	e003      	b.n	800b1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d002      	beq.n	800b1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	20004b00 	.word	0x20004b00
 800b1c8:	20004b08 	.word	0x20004b08

0800b1cc <__cxa_pure_virtual>:
 800b1cc:	b508      	push	{r3, lr}
 800b1ce:	f000 f80d 	bl	800b1ec <_ZSt9terminatev>

0800b1d2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b1d2:	b508      	push	{r3, lr}
 800b1d4:	4780      	blx	r0
 800b1d6:	f000 f893 	bl	800b300 <abort>
	...

0800b1dc <_ZSt13get_terminatev>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <_ZSt13get_terminatev+0xc>)
 800b1de:	6818      	ldr	r0, [r3, #0]
 800b1e0:	f3bf 8f5b 	dmb	ish
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	20000010 	.word	0x20000010

0800b1ec <_ZSt9terminatev>:
 800b1ec:	b508      	push	{r3, lr}
 800b1ee:	f7ff fff5 	bl	800b1dc <_ZSt13get_terminatev>
 800b1f2:	f7ff ffee 	bl	800b1d2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b1f8 <floor>:
 800b1f8:	ec51 0b10 	vmov	r0, r1, d0
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b204:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b208:	2e13      	cmp	r6, #19
 800b20a:	460c      	mov	r4, r1
 800b20c:	ee10 5a10 	vmov	r5, s0
 800b210:	4680      	mov	r8, r0
 800b212:	dc34      	bgt.n	800b27e <floor+0x86>
 800b214:	2e00      	cmp	r6, #0
 800b216:	da16      	bge.n	800b246 <floor+0x4e>
 800b218:	a335      	add	r3, pc, #212	; (adr r3, 800b2f0 <floor+0xf8>)
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	f7f5 f85d 	bl	80002dc <__adddf3>
 800b222:	2200      	movs	r2, #0
 800b224:	2300      	movs	r3, #0
 800b226:	f7f5 fc9f 	bl	8000b68 <__aeabi_dcmpgt>
 800b22a:	b148      	cbz	r0, 800b240 <floor+0x48>
 800b22c:	2c00      	cmp	r4, #0
 800b22e:	da59      	bge.n	800b2e4 <floor+0xec>
 800b230:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b234:	4a30      	ldr	r2, [pc, #192]	; (800b2f8 <floor+0x100>)
 800b236:	432b      	orrs	r3, r5
 800b238:	2500      	movs	r5, #0
 800b23a:	42ab      	cmp	r3, r5
 800b23c:	bf18      	it	ne
 800b23e:	4614      	movne	r4, r2
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	e025      	b.n	800b292 <floor+0x9a>
 800b246:	4f2d      	ldr	r7, [pc, #180]	; (800b2fc <floor+0x104>)
 800b248:	4137      	asrs	r7, r6
 800b24a:	ea01 0307 	and.w	r3, r1, r7
 800b24e:	4303      	orrs	r3, r0
 800b250:	d01f      	beq.n	800b292 <floor+0x9a>
 800b252:	a327      	add	r3, pc, #156	; (adr r3, 800b2f0 <floor+0xf8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f840 	bl	80002dc <__adddf3>
 800b25c:	2200      	movs	r2, #0
 800b25e:	2300      	movs	r3, #0
 800b260:	f7f5 fc82 	bl	8000b68 <__aeabi_dcmpgt>
 800b264:	2800      	cmp	r0, #0
 800b266:	d0eb      	beq.n	800b240 <floor+0x48>
 800b268:	2c00      	cmp	r4, #0
 800b26a:	bfbe      	ittt	lt
 800b26c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b270:	fa43 f606 	asrlt.w	r6, r3, r6
 800b274:	19a4      	addlt	r4, r4, r6
 800b276:	ea24 0407 	bic.w	r4, r4, r7
 800b27a:	2500      	movs	r5, #0
 800b27c:	e7e0      	b.n	800b240 <floor+0x48>
 800b27e:	2e33      	cmp	r6, #51	; 0x33
 800b280:	dd0b      	ble.n	800b29a <floor+0xa2>
 800b282:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b286:	d104      	bne.n	800b292 <floor+0x9a>
 800b288:	ee10 2a10 	vmov	r2, s0
 800b28c:	460b      	mov	r3, r1
 800b28e:	f7f5 f825 	bl	80002dc <__adddf3>
 800b292:	ec41 0b10 	vmov	d0, r0, r1
 800b296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b29a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2a2:	fa23 f707 	lsr.w	r7, r3, r7
 800b2a6:	4207      	tst	r7, r0
 800b2a8:	d0f3      	beq.n	800b292 <floor+0x9a>
 800b2aa:	a311      	add	r3, pc, #68	; (adr r3, 800b2f0 <floor+0xf8>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f7f5 f814 	bl	80002dc <__adddf3>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	f7f5 fc56 	bl	8000b68 <__aeabi_dcmpgt>
 800b2bc:	2800      	cmp	r0, #0
 800b2be:	d0bf      	beq.n	800b240 <floor+0x48>
 800b2c0:	2c00      	cmp	r4, #0
 800b2c2:	da02      	bge.n	800b2ca <floor+0xd2>
 800b2c4:	2e14      	cmp	r6, #20
 800b2c6:	d103      	bne.n	800b2d0 <floor+0xd8>
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	ea25 0507 	bic.w	r5, r5, r7
 800b2ce:	e7b7      	b.n	800b240 <floor+0x48>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b2d6:	fa03 f606 	lsl.w	r6, r3, r6
 800b2da:	4435      	add	r5, r6
 800b2dc:	4545      	cmp	r5, r8
 800b2de:	bf38      	it	cc
 800b2e0:	18e4      	addcc	r4, r4, r3
 800b2e2:	e7f2      	b.n	800b2ca <floor+0xd2>
 800b2e4:	2500      	movs	r5, #0
 800b2e6:	462c      	mov	r4, r5
 800b2e8:	e7aa      	b.n	800b240 <floor+0x48>
 800b2ea:	bf00      	nop
 800b2ec:	f3af 8000 	nop.w
 800b2f0:	8800759c 	.word	0x8800759c
 800b2f4:	7e37e43c 	.word	0x7e37e43c
 800b2f8:	bff00000 	.word	0xbff00000
 800b2fc:	000fffff 	.word	0x000fffff

0800b300 <abort>:
 800b300:	b508      	push	{r3, lr}
 800b302:	2006      	movs	r0, #6
 800b304:	f000 fd42 	bl	800bd8c <raise>
 800b308:	2001      	movs	r0, #1
 800b30a:	f7f7 ff9d 	bl	8003248 <_exit>
	...

0800b310 <__errno>:
 800b310:	4b01      	ldr	r3, [pc, #4]	; (800b318 <__errno+0x8>)
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	20000014 	.word	0x20000014

0800b31c <__libc_init_array>:
 800b31c:	b570      	push	{r4, r5, r6, lr}
 800b31e:	4e0d      	ldr	r6, [pc, #52]	; (800b354 <__libc_init_array+0x38>)
 800b320:	4c0d      	ldr	r4, [pc, #52]	; (800b358 <__libc_init_array+0x3c>)
 800b322:	1ba4      	subs	r4, r4, r6
 800b324:	10a4      	asrs	r4, r4, #2
 800b326:	2500      	movs	r5, #0
 800b328:	42a5      	cmp	r5, r4
 800b32a:	d109      	bne.n	800b340 <__libc_init_array+0x24>
 800b32c:	4e0b      	ldr	r6, [pc, #44]	; (800b35c <__libc_init_array+0x40>)
 800b32e:	4c0c      	ldr	r4, [pc, #48]	; (800b360 <__libc_init_array+0x44>)
 800b330:	f002 fbf2 	bl	800db18 <_init>
 800b334:	1ba4      	subs	r4, r4, r6
 800b336:	10a4      	asrs	r4, r4, #2
 800b338:	2500      	movs	r5, #0
 800b33a:	42a5      	cmp	r5, r4
 800b33c:	d105      	bne.n	800b34a <__libc_init_array+0x2e>
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b344:	4798      	blx	r3
 800b346:	3501      	adds	r5, #1
 800b348:	e7ee      	b.n	800b328 <__libc_init_array+0xc>
 800b34a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b34e:	4798      	blx	r3
 800b350:	3501      	adds	r5, #1
 800b352:	e7f2      	b.n	800b33a <__libc_init_array+0x1e>
 800b354:	0800ec50 	.word	0x0800ec50
 800b358:	0800ec50 	.word	0x0800ec50
 800b35c:	0800ec50 	.word	0x0800ec50
 800b360:	0800ec54 	.word	0x0800ec54

0800b364 <memcpy>:
 800b364:	b510      	push	{r4, lr}
 800b366:	1e43      	subs	r3, r0, #1
 800b368:	440a      	add	r2, r1
 800b36a:	4291      	cmp	r1, r2
 800b36c:	d100      	bne.n	800b370 <memcpy+0xc>
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b378:	e7f7      	b.n	800b36a <memcpy+0x6>

0800b37a <memset>:
 800b37a:	4402      	add	r2, r0
 800b37c:	4603      	mov	r3, r0
 800b37e:	4293      	cmp	r3, r2
 800b380:	d100      	bne.n	800b384 <memset+0xa>
 800b382:	4770      	bx	lr
 800b384:	f803 1b01 	strb.w	r1, [r3], #1
 800b388:	e7f9      	b.n	800b37e <memset+0x4>

0800b38a <__cvt>:
 800b38a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b38e:	ec55 4b10 	vmov	r4, r5, d0
 800b392:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b394:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b398:	2d00      	cmp	r5, #0
 800b39a:	460e      	mov	r6, r1
 800b39c:	4691      	mov	r9, r2
 800b39e:	4619      	mov	r1, r3
 800b3a0:	bfb8      	it	lt
 800b3a2:	4622      	movlt	r2, r4
 800b3a4:	462b      	mov	r3, r5
 800b3a6:	f027 0720 	bic.w	r7, r7, #32
 800b3aa:	bfbb      	ittet	lt
 800b3ac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b3b0:	461d      	movlt	r5, r3
 800b3b2:	2300      	movge	r3, #0
 800b3b4:	232d      	movlt	r3, #45	; 0x2d
 800b3b6:	bfb8      	it	lt
 800b3b8:	4614      	movlt	r4, r2
 800b3ba:	2f46      	cmp	r7, #70	; 0x46
 800b3bc:	700b      	strb	r3, [r1, #0]
 800b3be:	d004      	beq.n	800b3ca <__cvt+0x40>
 800b3c0:	2f45      	cmp	r7, #69	; 0x45
 800b3c2:	d100      	bne.n	800b3c6 <__cvt+0x3c>
 800b3c4:	3601      	adds	r6, #1
 800b3c6:	2102      	movs	r1, #2
 800b3c8:	e000      	b.n	800b3cc <__cvt+0x42>
 800b3ca:	2103      	movs	r1, #3
 800b3cc:	ab03      	add	r3, sp, #12
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	ab02      	add	r3, sp, #8
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4653      	mov	r3, sl
 800b3d8:	ec45 4b10 	vmov	d0, r4, r5
 800b3dc:	f000 fe40 	bl	800c060 <_dtoa_r>
 800b3e0:	2f47      	cmp	r7, #71	; 0x47
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	d102      	bne.n	800b3ec <__cvt+0x62>
 800b3e6:	f019 0f01 	tst.w	r9, #1
 800b3ea:	d026      	beq.n	800b43a <__cvt+0xb0>
 800b3ec:	2f46      	cmp	r7, #70	; 0x46
 800b3ee:	eb08 0906 	add.w	r9, r8, r6
 800b3f2:	d111      	bne.n	800b418 <__cvt+0x8e>
 800b3f4:	f898 3000 	ldrb.w	r3, [r8]
 800b3f8:	2b30      	cmp	r3, #48	; 0x30
 800b3fa:	d10a      	bne.n	800b412 <__cvt+0x88>
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	2300      	movs	r3, #0
 800b400:	4620      	mov	r0, r4
 800b402:	4629      	mov	r1, r5
 800b404:	f7f5 fb88 	bl	8000b18 <__aeabi_dcmpeq>
 800b408:	b918      	cbnz	r0, 800b412 <__cvt+0x88>
 800b40a:	f1c6 0601 	rsb	r6, r6, #1
 800b40e:	f8ca 6000 	str.w	r6, [sl]
 800b412:	f8da 3000 	ldr.w	r3, [sl]
 800b416:	4499      	add	r9, r3
 800b418:	2200      	movs	r2, #0
 800b41a:	2300      	movs	r3, #0
 800b41c:	4620      	mov	r0, r4
 800b41e:	4629      	mov	r1, r5
 800b420:	f7f5 fb7a 	bl	8000b18 <__aeabi_dcmpeq>
 800b424:	b938      	cbnz	r0, 800b436 <__cvt+0xac>
 800b426:	2230      	movs	r2, #48	; 0x30
 800b428:	9b03      	ldr	r3, [sp, #12]
 800b42a:	454b      	cmp	r3, r9
 800b42c:	d205      	bcs.n	800b43a <__cvt+0xb0>
 800b42e:	1c59      	adds	r1, r3, #1
 800b430:	9103      	str	r1, [sp, #12]
 800b432:	701a      	strb	r2, [r3, #0]
 800b434:	e7f8      	b.n	800b428 <__cvt+0x9e>
 800b436:	f8cd 900c 	str.w	r9, [sp, #12]
 800b43a:	9b03      	ldr	r3, [sp, #12]
 800b43c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b43e:	eba3 0308 	sub.w	r3, r3, r8
 800b442:	4640      	mov	r0, r8
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	b004      	add	sp, #16
 800b448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b44c <__exponent>:
 800b44c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b44e:	2900      	cmp	r1, #0
 800b450:	4604      	mov	r4, r0
 800b452:	bfba      	itte	lt
 800b454:	4249      	neglt	r1, r1
 800b456:	232d      	movlt	r3, #45	; 0x2d
 800b458:	232b      	movge	r3, #43	; 0x2b
 800b45a:	2909      	cmp	r1, #9
 800b45c:	f804 2b02 	strb.w	r2, [r4], #2
 800b460:	7043      	strb	r3, [r0, #1]
 800b462:	dd20      	ble.n	800b4a6 <__exponent+0x5a>
 800b464:	f10d 0307 	add.w	r3, sp, #7
 800b468:	461f      	mov	r7, r3
 800b46a:	260a      	movs	r6, #10
 800b46c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b470:	fb06 1115 	mls	r1, r6, r5, r1
 800b474:	3130      	adds	r1, #48	; 0x30
 800b476:	2d09      	cmp	r5, #9
 800b478:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b47c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b480:	4629      	mov	r1, r5
 800b482:	dc09      	bgt.n	800b498 <__exponent+0x4c>
 800b484:	3130      	adds	r1, #48	; 0x30
 800b486:	3b02      	subs	r3, #2
 800b488:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b48c:	42bb      	cmp	r3, r7
 800b48e:	4622      	mov	r2, r4
 800b490:	d304      	bcc.n	800b49c <__exponent+0x50>
 800b492:	1a10      	subs	r0, r2, r0
 800b494:	b003      	add	sp, #12
 800b496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b498:	4613      	mov	r3, r2
 800b49a:	e7e7      	b.n	800b46c <__exponent+0x20>
 800b49c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a0:	f804 2b01 	strb.w	r2, [r4], #1
 800b4a4:	e7f2      	b.n	800b48c <__exponent+0x40>
 800b4a6:	2330      	movs	r3, #48	; 0x30
 800b4a8:	4419      	add	r1, r3
 800b4aa:	7083      	strb	r3, [r0, #2]
 800b4ac:	1d02      	adds	r2, r0, #4
 800b4ae:	70c1      	strb	r1, [r0, #3]
 800b4b0:	e7ef      	b.n	800b492 <__exponent+0x46>
	...

0800b4b4 <_printf_float>:
 800b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	b08d      	sub	sp, #52	; 0x34
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	461f      	mov	r7, r3
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	f001 fcfd 	bl	800cec4 <_localeconv_r>
 800b4ca:	6803      	ldr	r3, [r0, #0]
 800b4cc:	9304      	str	r3, [sp, #16]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7f4 fea6 	bl	8000220 <strlen>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b4d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4dc:	9005      	str	r0, [sp, #20]
 800b4de:	3307      	adds	r3, #7
 800b4e0:	f023 0307 	bic.w	r3, r3, #7
 800b4e4:	f103 0208 	add.w	r2, r3, #8
 800b4e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4ec:	f8d4 b000 	ldr.w	fp, [r4]
 800b4f0:	f8c8 2000 	str.w	r2, [r8]
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b4fc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b500:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	f8cd 8018 	str.w	r8, [sp, #24]
 800b50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b50e:	4ba7      	ldr	r3, [pc, #668]	; (800b7ac <_printf_float+0x2f8>)
 800b510:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b514:	f7f5 fb32 	bl	8000b7c <__aeabi_dcmpun>
 800b518:	bb70      	cbnz	r0, 800b578 <_printf_float+0xc4>
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b51e:	4ba3      	ldr	r3, [pc, #652]	; (800b7ac <_printf_float+0x2f8>)
 800b520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b524:	f7f5 fb0c 	bl	8000b40 <__aeabi_dcmple>
 800b528:	bb30      	cbnz	r0, 800b578 <_printf_float+0xc4>
 800b52a:	2200      	movs	r2, #0
 800b52c:	2300      	movs	r3, #0
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f5 fafb 	bl	8000b2c <__aeabi_dcmplt>
 800b536:	b110      	cbz	r0, 800b53e <_printf_float+0x8a>
 800b538:	232d      	movs	r3, #45	; 0x2d
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b53e:	4a9c      	ldr	r2, [pc, #624]	; (800b7b0 <_printf_float+0x2fc>)
 800b540:	4b9c      	ldr	r3, [pc, #624]	; (800b7b4 <_printf_float+0x300>)
 800b542:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b546:	bf8c      	ite	hi
 800b548:	4690      	movhi	r8, r2
 800b54a:	4698      	movls	r8, r3
 800b54c:	2303      	movs	r3, #3
 800b54e:	f02b 0204 	bic.w	r2, fp, #4
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	6022      	str	r2, [r4, #0]
 800b556:	f04f 0900 	mov.w	r9, #0
 800b55a:	9700      	str	r7, [sp, #0]
 800b55c:	4633      	mov	r3, r6
 800b55e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b560:	4621      	mov	r1, r4
 800b562:	4628      	mov	r0, r5
 800b564:	f000 f9e6 	bl	800b934 <_printf_common>
 800b568:	3001      	adds	r0, #1
 800b56a:	f040 808d 	bne.w	800b688 <_printf_float+0x1d4>
 800b56e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b572:	b00d      	add	sp, #52	; 0x34
 800b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	f7f5 fafc 	bl	8000b7c <__aeabi_dcmpun>
 800b584:	b110      	cbz	r0, 800b58c <_printf_float+0xd8>
 800b586:	4a8c      	ldr	r2, [pc, #560]	; (800b7b8 <_printf_float+0x304>)
 800b588:	4b8c      	ldr	r3, [pc, #560]	; (800b7bc <_printf_float+0x308>)
 800b58a:	e7da      	b.n	800b542 <_printf_float+0x8e>
 800b58c:	6861      	ldr	r1, [r4, #4]
 800b58e:	1c4b      	adds	r3, r1, #1
 800b590:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b594:	a80a      	add	r0, sp, #40	; 0x28
 800b596:	d13e      	bne.n	800b616 <_printf_float+0x162>
 800b598:	2306      	movs	r3, #6
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	2300      	movs	r3, #0
 800b59e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b5a2:	ab09      	add	r3, sp, #36	; 0x24
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	ec49 8b10 	vmov	d0, r8, r9
 800b5aa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b5ae:	6022      	str	r2, [r4, #0]
 800b5b0:	f8cd a004 	str.w	sl, [sp, #4]
 800b5b4:	6861      	ldr	r1, [r4, #4]
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	f7ff fee7 	bl	800b38a <__cvt>
 800b5bc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b5c0:	2b47      	cmp	r3, #71	; 0x47
 800b5c2:	4680      	mov	r8, r0
 800b5c4:	d109      	bne.n	800b5da <_printf_float+0x126>
 800b5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c8:	1cd8      	adds	r0, r3, #3
 800b5ca:	db02      	blt.n	800b5d2 <_printf_float+0x11e>
 800b5cc:	6862      	ldr	r2, [r4, #4]
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	dd47      	ble.n	800b662 <_printf_float+0x1ae>
 800b5d2:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5d6:	fa5f fa8a 	uxtb.w	sl, sl
 800b5da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b5de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b5e0:	d824      	bhi.n	800b62c <_printf_float+0x178>
 800b5e2:	3901      	subs	r1, #1
 800b5e4:	4652      	mov	r2, sl
 800b5e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5ea:	9109      	str	r1, [sp, #36]	; 0x24
 800b5ec:	f7ff ff2e 	bl	800b44c <__exponent>
 800b5f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5f2:	1813      	adds	r3, r2, r0
 800b5f4:	2a01      	cmp	r2, #1
 800b5f6:	4681      	mov	r9, r0
 800b5f8:	6123      	str	r3, [r4, #16]
 800b5fa:	dc02      	bgt.n	800b602 <_printf_float+0x14e>
 800b5fc:	6822      	ldr	r2, [r4, #0]
 800b5fe:	07d1      	lsls	r1, r2, #31
 800b600:	d501      	bpl.n	800b606 <_printf_float+0x152>
 800b602:	3301      	adds	r3, #1
 800b604:	6123      	str	r3, [r4, #16]
 800b606:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0a5      	beq.n	800b55a <_printf_float+0xa6>
 800b60e:	232d      	movs	r3, #45	; 0x2d
 800b610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b614:	e7a1      	b.n	800b55a <_printf_float+0xa6>
 800b616:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b61a:	f000 8177 	beq.w	800b90c <_printf_float+0x458>
 800b61e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b622:	d1bb      	bne.n	800b59c <_printf_float+0xe8>
 800b624:	2900      	cmp	r1, #0
 800b626:	d1b9      	bne.n	800b59c <_printf_float+0xe8>
 800b628:	2301      	movs	r3, #1
 800b62a:	e7b6      	b.n	800b59a <_printf_float+0xe6>
 800b62c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b630:	d119      	bne.n	800b666 <_printf_float+0x1b2>
 800b632:	2900      	cmp	r1, #0
 800b634:	6863      	ldr	r3, [r4, #4]
 800b636:	dd0c      	ble.n	800b652 <_printf_float+0x19e>
 800b638:	6121      	str	r1, [r4, #16]
 800b63a:	b913      	cbnz	r3, 800b642 <_printf_float+0x18e>
 800b63c:	6822      	ldr	r2, [r4, #0]
 800b63e:	07d2      	lsls	r2, r2, #31
 800b640:	d502      	bpl.n	800b648 <_printf_float+0x194>
 800b642:	3301      	adds	r3, #1
 800b644:	440b      	add	r3, r1
 800b646:	6123      	str	r3, [r4, #16]
 800b648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b64c:	f04f 0900 	mov.w	r9, #0
 800b650:	e7d9      	b.n	800b606 <_printf_float+0x152>
 800b652:	b913      	cbnz	r3, 800b65a <_printf_float+0x1a6>
 800b654:	6822      	ldr	r2, [r4, #0]
 800b656:	07d0      	lsls	r0, r2, #31
 800b658:	d501      	bpl.n	800b65e <_printf_float+0x1aa>
 800b65a:	3302      	adds	r3, #2
 800b65c:	e7f3      	b.n	800b646 <_printf_float+0x192>
 800b65e:	2301      	movs	r3, #1
 800b660:	e7f1      	b.n	800b646 <_printf_float+0x192>
 800b662:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b666:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b66a:	4293      	cmp	r3, r2
 800b66c:	db05      	blt.n	800b67a <_printf_float+0x1c6>
 800b66e:	6822      	ldr	r2, [r4, #0]
 800b670:	6123      	str	r3, [r4, #16]
 800b672:	07d1      	lsls	r1, r2, #31
 800b674:	d5e8      	bpl.n	800b648 <_printf_float+0x194>
 800b676:	3301      	adds	r3, #1
 800b678:	e7e5      	b.n	800b646 <_printf_float+0x192>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	bfd4      	ite	le
 800b67e:	f1c3 0302 	rsble	r3, r3, #2
 800b682:	2301      	movgt	r3, #1
 800b684:	4413      	add	r3, r2
 800b686:	e7de      	b.n	800b646 <_printf_float+0x192>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	055a      	lsls	r2, r3, #21
 800b68c:	d407      	bmi.n	800b69e <_printf_float+0x1ea>
 800b68e:	6923      	ldr	r3, [r4, #16]
 800b690:	4642      	mov	r2, r8
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	d12b      	bne.n	800b6f4 <_printf_float+0x240>
 800b69c:	e767      	b.n	800b56e <_printf_float+0xba>
 800b69e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b6a2:	f240 80dc 	bls.w	800b85e <_printf_float+0x3aa>
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6ae:	f7f5 fa33 	bl	8000b18 <__aeabi_dcmpeq>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d033      	beq.n	800b71e <_printf_float+0x26a>
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	4a41      	ldr	r2, [pc, #260]	; (800b7c0 <_printf_float+0x30c>)
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	f43f af54 	beq.w	800b56e <_printf_float+0xba>
 800b6c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	db02      	blt.n	800b6d4 <_printf_float+0x220>
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	07d8      	lsls	r0, r3, #31
 800b6d2:	d50f      	bpl.n	800b6f4 <_printf_float+0x240>
 800b6d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4628      	mov	r0, r5
 800b6dc:	47b8      	blx	r7
 800b6de:	3001      	adds	r0, #1
 800b6e0:	f43f af45 	beq.w	800b56e <_printf_float+0xba>
 800b6e4:	f04f 0800 	mov.w	r8, #0
 800b6e8:	f104 091a 	add.w	r9, r4, #26
 800b6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ee:	3b01      	subs	r3, #1
 800b6f0:	4543      	cmp	r3, r8
 800b6f2:	dc09      	bgt.n	800b708 <_printf_float+0x254>
 800b6f4:	6823      	ldr	r3, [r4, #0]
 800b6f6:	079b      	lsls	r3, r3, #30
 800b6f8:	f100 8103 	bmi.w	800b902 <_printf_float+0x44e>
 800b6fc:	68e0      	ldr	r0, [r4, #12]
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b700:	4298      	cmp	r0, r3
 800b702:	bfb8      	it	lt
 800b704:	4618      	movlt	r0, r3
 800b706:	e734      	b.n	800b572 <_printf_float+0xbe>
 800b708:	2301      	movs	r3, #1
 800b70a:	464a      	mov	r2, r9
 800b70c:	4631      	mov	r1, r6
 800b70e:	4628      	mov	r0, r5
 800b710:	47b8      	blx	r7
 800b712:	3001      	adds	r0, #1
 800b714:	f43f af2b 	beq.w	800b56e <_printf_float+0xba>
 800b718:	f108 0801 	add.w	r8, r8, #1
 800b71c:	e7e6      	b.n	800b6ec <_printf_float+0x238>
 800b71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b720:	2b00      	cmp	r3, #0
 800b722:	dc2b      	bgt.n	800b77c <_printf_float+0x2c8>
 800b724:	2301      	movs	r3, #1
 800b726:	4a26      	ldr	r2, [pc, #152]	; (800b7c0 <_printf_float+0x30c>)
 800b728:	4631      	mov	r1, r6
 800b72a:	4628      	mov	r0, r5
 800b72c:	47b8      	blx	r7
 800b72e:	3001      	adds	r0, #1
 800b730:	f43f af1d 	beq.w	800b56e <_printf_float+0xba>
 800b734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b736:	b923      	cbnz	r3, 800b742 <_printf_float+0x28e>
 800b738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73a:	b913      	cbnz	r3, 800b742 <_printf_float+0x28e>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	07d9      	lsls	r1, r3, #31
 800b740:	d5d8      	bpl.n	800b6f4 <_printf_float+0x240>
 800b742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b746:	4631      	mov	r1, r6
 800b748:	4628      	mov	r0, r5
 800b74a:	47b8      	blx	r7
 800b74c:	3001      	adds	r0, #1
 800b74e:	f43f af0e 	beq.w	800b56e <_printf_float+0xba>
 800b752:	f04f 0900 	mov.w	r9, #0
 800b756:	f104 0a1a 	add.w	sl, r4, #26
 800b75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b75c:	425b      	negs	r3, r3
 800b75e:	454b      	cmp	r3, r9
 800b760:	dc01      	bgt.n	800b766 <_printf_float+0x2b2>
 800b762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b764:	e794      	b.n	800b690 <_printf_float+0x1dc>
 800b766:	2301      	movs	r3, #1
 800b768:	4652      	mov	r2, sl
 800b76a:	4631      	mov	r1, r6
 800b76c:	4628      	mov	r0, r5
 800b76e:	47b8      	blx	r7
 800b770:	3001      	adds	r0, #1
 800b772:	f43f aefc 	beq.w	800b56e <_printf_float+0xba>
 800b776:	f109 0901 	add.w	r9, r9, #1
 800b77a:	e7ee      	b.n	800b75a <_printf_float+0x2a6>
 800b77c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b77e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b780:	429a      	cmp	r2, r3
 800b782:	bfa8      	it	ge
 800b784:	461a      	movge	r2, r3
 800b786:	2a00      	cmp	r2, #0
 800b788:	4691      	mov	r9, r2
 800b78a:	dd07      	ble.n	800b79c <_printf_float+0x2e8>
 800b78c:	4613      	mov	r3, r2
 800b78e:	4631      	mov	r1, r6
 800b790:	4642      	mov	r2, r8
 800b792:	4628      	mov	r0, r5
 800b794:	47b8      	blx	r7
 800b796:	3001      	adds	r0, #1
 800b798:	f43f aee9 	beq.w	800b56e <_printf_float+0xba>
 800b79c:	f104 031a 	add.w	r3, r4, #26
 800b7a0:	f04f 0b00 	mov.w	fp, #0
 800b7a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7a8:	9306      	str	r3, [sp, #24]
 800b7aa:	e015      	b.n	800b7d8 <_printf_float+0x324>
 800b7ac:	7fefffff 	.word	0x7fefffff
 800b7b0:	0800e990 	.word	0x0800e990
 800b7b4:	0800e98c 	.word	0x0800e98c
 800b7b8:	0800e998 	.word	0x0800e998
 800b7bc:	0800e994 	.word	0x0800e994
 800b7c0:	0800e99c 	.word	0x0800e99c
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	9a06      	ldr	r2, [sp, #24]
 800b7c8:	4631      	mov	r1, r6
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b8      	blx	r7
 800b7ce:	3001      	adds	r0, #1
 800b7d0:	f43f aecd 	beq.w	800b56e <_printf_float+0xba>
 800b7d4:	f10b 0b01 	add.w	fp, fp, #1
 800b7d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b7dc:	ebaa 0309 	sub.w	r3, sl, r9
 800b7e0:	455b      	cmp	r3, fp
 800b7e2:	dcef      	bgt.n	800b7c4 <_printf_float+0x310>
 800b7e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	44d0      	add	r8, sl
 800b7ec:	db15      	blt.n	800b81a <_printf_float+0x366>
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	07da      	lsls	r2, r3, #31
 800b7f2:	d412      	bmi.n	800b81a <_printf_float+0x366>
 800b7f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7f8:	eba3 020a 	sub.w	r2, r3, sl
 800b7fc:	eba3 0a01 	sub.w	sl, r3, r1
 800b800:	4592      	cmp	sl, r2
 800b802:	bfa8      	it	ge
 800b804:	4692      	movge	sl, r2
 800b806:	f1ba 0f00 	cmp.w	sl, #0
 800b80a:	dc0e      	bgt.n	800b82a <_printf_float+0x376>
 800b80c:	f04f 0800 	mov.w	r8, #0
 800b810:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b814:	f104 091a 	add.w	r9, r4, #26
 800b818:	e019      	b.n	800b84e <_printf_float+0x39a>
 800b81a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	d1e5      	bne.n	800b7f4 <_printf_float+0x340>
 800b828:	e6a1      	b.n	800b56e <_printf_float+0xba>
 800b82a:	4653      	mov	r3, sl
 800b82c:	4642      	mov	r2, r8
 800b82e:	4631      	mov	r1, r6
 800b830:	4628      	mov	r0, r5
 800b832:	47b8      	blx	r7
 800b834:	3001      	adds	r0, #1
 800b836:	d1e9      	bne.n	800b80c <_printf_float+0x358>
 800b838:	e699      	b.n	800b56e <_printf_float+0xba>
 800b83a:	2301      	movs	r3, #1
 800b83c:	464a      	mov	r2, r9
 800b83e:	4631      	mov	r1, r6
 800b840:	4628      	mov	r0, r5
 800b842:	47b8      	blx	r7
 800b844:	3001      	adds	r0, #1
 800b846:	f43f ae92 	beq.w	800b56e <_printf_float+0xba>
 800b84a:	f108 0801 	add.w	r8, r8, #1
 800b84e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b852:	1a9b      	subs	r3, r3, r2
 800b854:	eba3 030a 	sub.w	r3, r3, sl
 800b858:	4543      	cmp	r3, r8
 800b85a:	dcee      	bgt.n	800b83a <_printf_float+0x386>
 800b85c:	e74a      	b.n	800b6f4 <_printf_float+0x240>
 800b85e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b860:	2a01      	cmp	r2, #1
 800b862:	dc01      	bgt.n	800b868 <_printf_float+0x3b4>
 800b864:	07db      	lsls	r3, r3, #31
 800b866:	d53a      	bpl.n	800b8de <_printf_float+0x42a>
 800b868:	2301      	movs	r3, #1
 800b86a:	4642      	mov	r2, r8
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f ae7b 	beq.w	800b56e <_printf_float+0xba>
 800b878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b87c:	4631      	mov	r1, r6
 800b87e:	4628      	mov	r0, r5
 800b880:	47b8      	blx	r7
 800b882:	3001      	adds	r0, #1
 800b884:	f108 0801 	add.w	r8, r8, #1
 800b888:	f43f ae71 	beq.w	800b56e <_printf_float+0xba>
 800b88c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b88e:	2200      	movs	r2, #0
 800b890:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b898:	2300      	movs	r3, #0
 800b89a:	f7f5 f93d 	bl	8000b18 <__aeabi_dcmpeq>
 800b89e:	b9c8      	cbnz	r0, 800b8d4 <_printf_float+0x420>
 800b8a0:	4653      	mov	r3, sl
 800b8a2:	4642      	mov	r2, r8
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	47b8      	blx	r7
 800b8aa:	3001      	adds	r0, #1
 800b8ac:	d10e      	bne.n	800b8cc <_printf_float+0x418>
 800b8ae:	e65e      	b.n	800b56e <_printf_float+0xba>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	4652      	mov	r2, sl
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	f43f ae57 	beq.w	800b56e <_printf_float+0xba>
 800b8c0:	f108 0801 	add.w	r8, r8, #1
 800b8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	4543      	cmp	r3, r8
 800b8ca:	dcf1      	bgt.n	800b8b0 <_printf_float+0x3fc>
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8d2:	e6de      	b.n	800b692 <_printf_float+0x1de>
 800b8d4:	f04f 0800 	mov.w	r8, #0
 800b8d8:	f104 0a1a 	add.w	sl, r4, #26
 800b8dc:	e7f2      	b.n	800b8c4 <_printf_float+0x410>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7df      	b.n	800b8a2 <_printf_float+0x3ee>
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	464a      	mov	r2, r9
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	47b8      	blx	r7
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	f43f ae3e 	beq.w	800b56e <_printf_float+0xba>
 800b8f2:	f108 0801 	add.w	r8, r8, #1
 800b8f6:	68e3      	ldr	r3, [r4, #12]
 800b8f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8fa:	1a9b      	subs	r3, r3, r2
 800b8fc:	4543      	cmp	r3, r8
 800b8fe:	dcf0      	bgt.n	800b8e2 <_printf_float+0x42e>
 800b900:	e6fc      	b.n	800b6fc <_printf_float+0x248>
 800b902:	f04f 0800 	mov.w	r8, #0
 800b906:	f104 0919 	add.w	r9, r4, #25
 800b90a:	e7f4      	b.n	800b8f6 <_printf_float+0x442>
 800b90c:	2900      	cmp	r1, #0
 800b90e:	f43f ae8b 	beq.w	800b628 <_printf_float+0x174>
 800b912:	2300      	movs	r3, #0
 800b914:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b918:	ab09      	add	r3, sp, #36	; 0x24
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	ec49 8b10 	vmov	d0, r8, r9
 800b920:	6022      	str	r2, [r4, #0]
 800b922:	f8cd a004 	str.w	sl, [sp, #4]
 800b926:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b92a:	4628      	mov	r0, r5
 800b92c:	f7ff fd2d 	bl	800b38a <__cvt>
 800b930:	4680      	mov	r8, r0
 800b932:	e648      	b.n	800b5c6 <_printf_float+0x112>

0800b934 <_printf_common>:
 800b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	4691      	mov	r9, r2
 800b93a:	461f      	mov	r7, r3
 800b93c:	688a      	ldr	r2, [r1, #8]
 800b93e:	690b      	ldr	r3, [r1, #16]
 800b940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b944:	4293      	cmp	r3, r2
 800b946:	bfb8      	it	lt
 800b948:	4613      	movlt	r3, r2
 800b94a:	f8c9 3000 	str.w	r3, [r9]
 800b94e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b952:	4606      	mov	r6, r0
 800b954:	460c      	mov	r4, r1
 800b956:	b112      	cbz	r2, 800b95e <_printf_common+0x2a>
 800b958:	3301      	adds	r3, #1
 800b95a:	f8c9 3000 	str.w	r3, [r9]
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	0699      	lsls	r1, r3, #26
 800b962:	bf42      	ittt	mi
 800b964:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b968:	3302      	addmi	r3, #2
 800b96a:	f8c9 3000 	strmi.w	r3, [r9]
 800b96e:	6825      	ldr	r5, [r4, #0]
 800b970:	f015 0506 	ands.w	r5, r5, #6
 800b974:	d107      	bne.n	800b986 <_printf_common+0x52>
 800b976:	f104 0a19 	add.w	sl, r4, #25
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	f8d9 2000 	ldr.w	r2, [r9]
 800b980:	1a9b      	subs	r3, r3, r2
 800b982:	42ab      	cmp	r3, r5
 800b984:	dc28      	bgt.n	800b9d8 <_printf_common+0xa4>
 800b986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b98a:	6822      	ldr	r2, [r4, #0]
 800b98c:	3300      	adds	r3, #0
 800b98e:	bf18      	it	ne
 800b990:	2301      	movne	r3, #1
 800b992:	0692      	lsls	r2, r2, #26
 800b994:	d42d      	bmi.n	800b9f2 <_printf_common+0xbe>
 800b996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b99a:	4639      	mov	r1, r7
 800b99c:	4630      	mov	r0, r6
 800b99e:	47c0      	blx	r8
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d020      	beq.n	800b9e6 <_printf_common+0xb2>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	68e5      	ldr	r5, [r4, #12]
 800b9a8:	f8d9 2000 	ldr.w	r2, [r9]
 800b9ac:	f003 0306 	and.w	r3, r3, #6
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	bf08      	it	eq
 800b9b4:	1aad      	subeq	r5, r5, r2
 800b9b6:	68a3      	ldr	r3, [r4, #8]
 800b9b8:	6922      	ldr	r2, [r4, #16]
 800b9ba:	bf0c      	ite	eq
 800b9bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9c0:	2500      	movne	r5, #0
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	bfc4      	itt	gt
 800b9c6:	1a9b      	subgt	r3, r3, r2
 800b9c8:	18ed      	addgt	r5, r5, r3
 800b9ca:	f04f 0900 	mov.w	r9, #0
 800b9ce:	341a      	adds	r4, #26
 800b9d0:	454d      	cmp	r5, r9
 800b9d2:	d11a      	bne.n	800ba0a <_printf_common+0xd6>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	e008      	b.n	800b9ea <_printf_common+0xb6>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4652      	mov	r2, sl
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4630      	mov	r0, r6
 800b9e0:	47c0      	blx	r8
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	d103      	bne.n	800b9ee <_printf_common+0xba>
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ee:	3501      	adds	r5, #1
 800b9f0:	e7c3      	b.n	800b97a <_printf_common+0x46>
 800b9f2:	18e1      	adds	r1, r4, r3
 800b9f4:	1c5a      	adds	r2, r3, #1
 800b9f6:	2030      	movs	r0, #48	; 0x30
 800b9f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9fc:	4422      	add	r2, r4
 800b9fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ba02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ba06:	3302      	adds	r3, #2
 800ba08:	e7c5      	b.n	800b996 <_printf_common+0x62>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	4622      	mov	r2, r4
 800ba0e:	4639      	mov	r1, r7
 800ba10:	4630      	mov	r0, r6
 800ba12:	47c0      	blx	r8
 800ba14:	3001      	adds	r0, #1
 800ba16:	d0e6      	beq.n	800b9e6 <_printf_common+0xb2>
 800ba18:	f109 0901 	add.w	r9, r9, #1
 800ba1c:	e7d8      	b.n	800b9d0 <_printf_common+0x9c>
	...

0800ba20 <_printf_i>:
 800ba20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ba28:	460c      	mov	r4, r1
 800ba2a:	7e09      	ldrb	r1, [r1, #24]
 800ba2c:	b085      	sub	sp, #20
 800ba2e:	296e      	cmp	r1, #110	; 0x6e
 800ba30:	4617      	mov	r7, r2
 800ba32:	4606      	mov	r6, r0
 800ba34:	4698      	mov	r8, r3
 800ba36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba38:	f000 80b3 	beq.w	800bba2 <_printf_i+0x182>
 800ba3c:	d822      	bhi.n	800ba84 <_printf_i+0x64>
 800ba3e:	2963      	cmp	r1, #99	; 0x63
 800ba40:	d036      	beq.n	800bab0 <_printf_i+0x90>
 800ba42:	d80a      	bhi.n	800ba5a <_printf_i+0x3a>
 800ba44:	2900      	cmp	r1, #0
 800ba46:	f000 80b9 	beq.w	800bbbc <_printf_i+0x19c>
 800ba4a:	2958      	cmp	r1, #88	; 0x58
 800ba4c:	f000 8083 	beq.w	800bb56 <_printf_i+0x136>
 800ba50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ba58:	e032      	b.n	800bac0 <_printf_i+0xa0>
 800ba5a:	2964      	cmp	r1, #100	; 0x64
 800ba5c:	d001      	beq.n	800ba62 <_printf_i+0x42>
 800ba5e:	2969      	cmp	r1, #105	; 0x69
 800ba60:	d1f6      	bne.n	800ba50 <_printf_i+0x30>
 800ba62:	6820      	ldr	r0, [r4, #0]
 800ba64:	6813      	ldr	r3, [r2, #0]
 800ba66:	0605      	lsls	r5, r0, #24
 800ba68:	f103 0104 	add.w	r1, r3, #4
 800ba6c:	d52a      	bpl.n	800bac4 <_printf_i+0xa4>
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	da03      	bge.n	800ba7e <_printf_i+0x5e>
 800ba76:	222d      	movs	r2, #45	; 0x2d
 800ba78:	425b      	negs	r3, r3
 800ba7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ba7e:	486f      	ldr	r0, [pc, #444]	; (800bc3c <_printf_i+0x21c>)
 800ba80:	220a      	movs	r2, #10
 800ba82:	e039      	b.n	800baf8 <_printf_i+0xd8>
 800ba84:	2973      	cmp	r1, #115	; 0x73
 800ba86:	f000 809d 	beq.w	800bbc4 <_printf_i+0x1a4>
 800ba8a:	d808      	bhi.n	800ba9e <_printf_i+0x7e>
 800ba8c:	296f      	cmp	r1, #111	; 0x6f
 800ba8e:	d020      	beq.n	800bad2 <_printf_i+0xb2>
 800ba90:	2970      	cmp	r1, #112	; 0x70
 800ba92:	d1dd      	bne.n	800ba50 <_printf_i+0x30>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	f043 0320 	orr.w	r3, r3, #32
 800ba9a:	6023      	str	r3, [r4, #0]
 800ba9c:	e003      	b.n	800baa6 <_printf_i+0x86>
 800ba9e:	2975      	cmp	r1, #117	; 0x75
 800baa0:	d017      	beq.n	800bad2 <_printf_i+0xb2>
 800baa2:	2978      	cmp	r1, #120	; 0x78
 800baa4:	d1d4      	bne.n	800ba50 <_printf_i+0x30>
 800baa6:	2378      	movs	r3, #120	; 0x78
 800baa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800baac:	4864      	ldr	r0, [pc, #400]	; (800bc40 <_printf_i+0x220>)
 800baae:	e055      	b.n	800bb5c <_printf_i+0x13c>
 800bab0:	6813      	ldr	r3, [r2, #0]
 800bab2:	1d19      	adds	r1, r3, #4
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6011      	str	r1, [r2, #0]
 800bab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800babc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bac0:	2301      	movs	r3, #1
 800bac2:	e08c      	b.n	800bbde <_printf_i+0x1be>
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6011      	str	r1, [r2, #0]
 800bac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bacc:	bf18      	it	ne
 800bace:	b21b      	sxthne	r3, r3
 800bad0:	e7cf      	b.n	800ba72 <_printf_i+0x52>
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	6825      	ldr	r5, [r4, #0]
 800bad6:	1d18      	adds	r0, r3, #4
 800bad8:	6010      	str	r0, [r2, #0]
 800bada:	0628      	lsls	r0, r5, #24
 800badc:	d501      	bpl.n	800bae2 <_printf_i+0xc2>
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	e002      	b.n	800bae8 <_printf_i+0xc8>
 800bae2:	0668      	lsls	r0, r5, #25
 800bae4:	d5fb      	bpl.n	800bade <_printf_i+0xbe>
 800bae6:	881b      	ldrh	r3, [r3, #0]
 800bae8:	4854      	ldr	r0, [pc, #336]	; (800bc3c <_printf_i+0x21c>)
 800baea:	296f      	cmp	r1, #111	; 0x6f
 800baec:	bf14      	ite	ne
 800baee:	220a      	movne	r2, #10
 800baf0:	2208      	moveq	r2, #8
 800baf2:	2100      	movs	r1, #0
 800baf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baf8:	6865      	ldr	r5, [r4, #4]
 800bafa:	60a5      	str	r5, [r4, #8]
 800bafc:	2d00      	cmp	r5, #0
 800bafe:	f2c0 8095 	blt.w	800bc2c <_printf_i+0x20c>
 800bb02:	6821      	ldr	r1, [r4, #0]
 800bb04:	f021 0104 	bic.w	r1, r1, #4
 800bb08:	6021      	str	r1, [r4, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d13d      	bne.n	800bb8a <_printf_i+0x16a>
 800bb0e:	2d00      	cmp	r5, #0
 800bb10:	f040 808e 	bne.w	800bc30 <_printf_i+0x210>
 800bb14:	4665      	mov	r5, ip
 800bb16:	2a08      	cmp	r2, #8
 800bb18:	d10b      	bne.n	800bb32 <_printf_i+0x112>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	07db      	lsls	r3, r3, #31
 800bb1e:	d508      	bpl.n	800bb32 <_printf_i+0x112>
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	6862      	ldr	r2, [r4, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	bfde      	ittt	le
 800bb28:	2330      	movle	r3, #48	; 0x30
 800bb2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bb2e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bb32:	ebac 0305 	sub.w	r3, ip, r5
 800bb36:	6123      	str	r3, [r4, #16]
 800bb38:	f8cd 8000 	str.w	r8, [sp]
 800bb3c:	463b      	mov	r3, r7
 800bb3e:	aa03      	add	r2, sp, #12
 800bb40:	4621      	mov	r1, r4
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff fef6 	bl	800b934 <_printf_common>
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d14d      	bne.n	800bbe8 <_printf_i+0x1c8>
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb50:	b005      	add	sp, #20
 800bb52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb56:	4839      	ldr	r0, [pc, #228]	; (800bc3c <_printf_i+0x21c>)
 800bb58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bb5c:	6813      	ldr	r3, [r2, #0]
 800bb5e:	6821      	ldr	r1, [r4, #0]
 800bb60:	1d1d      	adds	r5, r3, #4
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	6015      	str	r5, [r2, #0]
 800bb66:	060a      	lsls	r2, r1, #24
 800bb68:	d50b      	bpl.n	800bb82 <_printf_i+0x162>
 800bb6a:	07ca      	lsls	r2, r1, #31
 800bb6c:	bf44      	itt	mi
 800bb6e:	f041 0120 	orrmi.w	r1, r1, #32
 800bb72:	6021      	strmi	r1, [r4, #0]
 800bb74:	b91b      	cbnz	r3, 800bb7e <_printf_i+0x15e>
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	f022 0220 	bic.w	r2, r2, #32
 800bb7c:	6022      	str	r2, [r4, #0]
 800bb7e:	2210      	movs	r2, #16
 800bb80:	e7b7      	b.n	800baf2 <_printf_i+0xd2>
 800bb82:	064d      	lsls	r5, r1, #25
 800bb84:	bf48      	it	mi
 800bb86:	b29b      	uxthmi	r3, r3
 800bb88:	e7ef      	b.n	800bb6a <_printf_i+0x14a>
 800bb8a:	4665      	mov	r5, ip
 800bb8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb90:	fb02 3311 	mls	r3, r2, r1, r3
 800bb94:	5cc3      	ldrb	r3, [r0, r3]
 800bb96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	2900      	cmp	r1, #0
 800bb9e:	d1f5      	bne.n	800bb8c <_printf_i+0x16c>
 800bba0:	e7b9      	b.n	800bb16 <_printf_i+0xf6>
 800bba2:	6813      	ldr	r3, [r2, #0]
 800bba4:	6825      	ldr	r5, [r4, #0]
 800bba6:	6961      	ldr	r1, [r4, #20]
 800bba8:	1d18      	adds	r0, r3, #4
 800bbaa:	6010      	str	r0, [r2, #0]
 800bbac:	0628      	lsls	r0, r5, #24
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	d501      	bpl.n	800bbb6 <_printf_i+0x196>
 800bbb2:	6019      	str	r1, [r3, #0]
 800bbb4:	e002      	b.n	800bbbc <_printf_i+0x19c>
 800bbb6:	066a      	lsls	r2, r5, #25
 800bbb8:	d5fb      	bpl.n	800bbb2 <_printf_i+0x192>
 800bbba:	8019      	strh	r1, [r3, #0]
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6123      	str	r3, [r4, #16]
 800bbc0:	4665      	mov	r5, ip
 800bbc2:	e7b9      	b.n	800bb38 <_printf_i+0x118>
 800bbc4:	6813      	ldr	r3, [r2, #0]
 800bbc6:	1d19      	adds	r1, r3, #4
 800bbc8:	6011      	str	r1, [r2, #0]
 800bbca:	681d      	ldr	r5, [r3, #0]
 800bbcc:	6862      	ldr	r2, [r4, #4]
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f7f4 fb2d 	bl	8000230 <memchr>
 800bbd6:	b108      	cbz	r0, 800bbdc <_printf_i+0x1bc>
 800bbd8:	1b40      	subs	r0, r0, r5
 800bbda:	6060      	str	r0, [r4, #4]
 800bbdc:	6863      	ldr	r3, [r4, #4]
 800bbde:	6123      	str	r3, [r4, #16]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbe6:	e7a7      	b.n	800bb38 <_printf_i+0x118>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	462a      	mov	r2, r5
 800bbec:	4639      	mov	r1, r7
 800bbee:	4630      	mov	r0, r6
 800bbf0:	47c0      	blx	r8
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d0aa      	beq.n	800bb4c <_printf_i+0x12c>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	079b      	lsls	r3, r3, #30
 800bbfa:	d413      	bmi.n	800bc24 <_printf_i+0x204>
 800bbfc:	68e0      	ldr	r0, [r4, #12]
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	4298      	cmp	r0, r3
 800bc02:	bfb8      	it	lt
 800bc04:	4618      	movlt	r0, r3
 800bc06:	e7a3      	b.n	800bb50 <_printf_i+0x130>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	464a      	mov	r2, r9
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	4630      	mov	r0, r6
 800bc10:	47c0      	blx	r8
 800bc12:	3001      	adds	r0, #1
 800bc14:	d09a      	beq.n	800bb4c <_printf_i+0x12c>
 800bc16:	3501      	adds	r5, #1
 800bc18:	68e3      	ldr	r3, [r4, #12]
 800bc1a:	9a03      	ldr	r2, [sp, #12]
 800bc1c:	1a9b      	subs	r3, r3, r2
 800bc1e:	42ab      	cmp	r3, r5
 800bc20:	dcf2      	bgt.n	800bc08 <_printf_i+0x1e8>
 800bc22:	e7eb      	b.n	800bbfc <_printf_i+0x1dc>
 800bc24:	2500      	movs	r5, #0
 800bc26:	f104 0919 	add.w	r9, r4, #25
 800bc2a:	e7f5      	b.n	800bc18 <_printf_i+0x1f8>
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d1ac      	bne.n	800bb8a <_printf_i+0x16a>
 800bc30:	7803      	ldrb	r3, [r0, #0]
 800bc32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc3a:	e76c      	b.n	800bb16 <_printf_i+0xf6>
 800bc3c:	0800e99e 	.word	0x0800e99e
 800bc40:	0800e9af 	.word	0x0800e9af

0800bc44 <iprintf>:
 800bc44:	b40f      	push	{r0, r1, r2, r3}
 800bc46:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <iprintf+0x2c>)
 800bc48:	b513      	push	{r0, r1, r4, lr}
 800bc4a:	681c      	ldr	r4, [r3, #0]
 800bc4c:	b124      	cbz	r4, 800bc58 <iprintf+0x14>
 800bc4e:	69a3      	ldr	r3, [r4, #24]
 800bc50:	b913      	cbnz	r3, 800bc58 <iprintf+0x14>
 800bc52:	4620      	mov	r0, r4
 800bc54:	f001 f8ac 	bl	800cdb0 <__sinit>
 800bc58:	ab05      	add	r3, sp, #20
 800bc5a:	9a04      	ldr	r2, [sp, #16]
 800bc5c:	68a1      	ldr	r1, [r4, #8]
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	4620      	mov	r0, r4
 800bc62:	f001 fd65 	bl	800d730 <_vfiprintf_r>
 800bc66:	b002      	add	sp, #8
 800bc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc6c:	b004      	add	sp, #16
 800bc6e:	4770      	bx	lr
 800bc70:	20000014 	.word	0x20000014

0800bc74 <_puts_r>:
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	460e      	mov	r6, r1
 800bc78:	4605      	mov	r5, r0
 800bc7a:	b118      	cbz	r0, 800bc84 <_puts_r+0x10>
 800bc7c:	6983      	ldr	r3, [r0, #24]
 800bc7e:	b90b      	cbnz	r3, 800bc84 <_puts_r+0x10>
 800bc80:	f001 f896 	bl	800cdb0 <__sinit>
 800bc84:	69ab      	ldr	r3, [r5, #24]
 800bc86:	68ac      	ldr	r4, [r5, #8]
 800bc88:	b913      	cbnz	r3, 800bc90 <_puts_r+0x1c>
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f001 f890 	bl	800cdb0 <__sinit>
 800bc90:	4b23      	ldr	r3, [pc, #140]	; (800bd20 <_puts_r+0xac>)
 800bc92:	429c      	cmp	r4, r3
 800bc94:	d117      	bne.n	800bcc6 <_puts_r+0x52>
 800bc96:	686c      	ldr	r4, [r5, #4]
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	071b      	lsls	r3, r3, #28
 800bc9c:	d51d      	bpl.n	800bcda <_puts_r+0x66>
 800bc9e:	6923      	ldr	r3, [r4, #16]
 800bca0:	b1db      	cbz	r3, 800bcda <_puts_r+0x66>
 800bca2:	3e01      	subs	r6, #1
 800bca4:	68a3      	ldr	r3, [r4, #8]
 800bca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	60a3      	str	r3, [r4, #8]
 800bcae:	b9e9      	cbnz	r1, 800bcec <_puts_r+0x78>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da2e      	bge.n	800bd12 <_puts_r+0x9e>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	210a      	movs	r1, #10
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 f883 	bl	800bdc4 <__swbuf_r>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d011      	beq.n	800bce6 <_puts_r+0x72>
 800bcc2:	200a      	movs	r0, #10
 800bcc4:	e011      	b.n	800bcea <_puts_r+0x76>
 800bcc6:	4b17      	ldr	r3, [pc, #92]	; (800bd24 <_puts_r+0xb0>)
 800bcc8:	429c      	cmp	r4, r3
 800bcca:	d101      	bne.n	800bcd0 <_puts_r+0x5c>
 800bccc:	68ac      	ldr	r4, [r5, #8]
 800bcce:	e7e3      	b.n	800bc98 <_puts_r+0x24>
 800bcd0:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <_puts_r+0xb4>)
 800bcd2:	429c      	cmp	r4, r3
 800bcd4:	bf08      	it	eq
 800bcd6:	68ec      	ldreq	r4, [r5, #12]
 800bcd8:	e7de      	b.n	800bc98 <_puts_r+0x24>
 800bcda:	4621      	mov	r1, r4
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f000 f8c3 	bl	800be68 <__swsetup_r>
 800bce2:	2800      	cmp	r0, #0
 800bce4:	d0dd      	beq.n	800bca2 <_puts_r+0x2e>
 800bce6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	da04      	bge.n	800bcfa <_puts_r+0x86>
 800bcf0:	69a2      	ldr	r2, [r4, #24]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	dc06      	bgt.n	800bd04 <_puts_r+0x90>
 800bcf6:	290a      	cmp	r1, #10
 800bcf8:	d004      	beq.n	800bd04 <_puts_r+0x90>
 800bcfa:	6823      	ldr	r3, [r4, #0]
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	6022      	str	r2, [r4, #0]
 800bd00:	7019      	strb	r1, [r3, #0]
 800bd02:	e7cf      	b.n	800bca4 <_puts_r+0x30>
 800bd04:	4622      	mov	r2, r4
 800bd06:	4628      	mov	r0, r5
 800bd08:	f000 f85c 	bl	800bdc4 <__swbuf_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d1c9      	bne.n	800bca4 <_puts_r+0x30>
 800bd10:	e7e9      	b.n	800bce6 <_puts_r+0x72>
 800bd12:	6823      	ldr	r3, [r4, #0]
 800bd14:	200a      	movs	r0, #10
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	6022      	str	r2, [r4, #0]
 800bd1a:	7018      	strb	r0, [r3, #0]
 800bd1c:	e7e5      	b.n	800bcea <_puts_r+0x76>
 800bd1e:	bf00      	nop
 800bd20:	0800e9f0 	.word	0x0800e9f0
 800bd24:	0800ea10 	.word	0x0800ea10
 800bd28:	0800e9d0 	.word	0x0800e9d0

0800bd2c <puts>:
 800bd2c:	4b02      	ldr	r3, [pc, #8]	; (800bd38 <puts+0xc>)
 800bd2e:	4601      	mov	r1, r0
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	f7ff bf9f 	b.w	800bc74 <_puts_r>
 800bd36:	bf00      	nop
 800bd38:	20000014 	.word	0x20000014

0800bd3c <_raise_r>:
 800bd3c:	291f      	cmp	r1, #31
 800bd3e:	b538      	push	{r3, r4, r5, lr}
 800bd40:	4604      	mov	r4, r0
 800bd42:	460d      	mov	r5, r1
 800bd44:	d904      	bls.n	800bd50 <_raise_r+0x14>
 800bd46:	2316      	movs	r3, #22
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bd52:	b112      	cbz	r2, 800bd5a <_raise_r+0x1e>
 800bd54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd58:	b94b      	cbnz	r3, 800bd6e <_raise_r+0x32>
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f000 f830 	bl	800bdc0 <_getpid_r>
 800bd60:	462a      	mov	r2, r5
 800bd62:	4601      	mov	r1, r0
 800bd64:	4620      	mov	r0, r4
 800bd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd6a:	f000 b817 	b.w	800bd9c <_kill_r>
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d00a      	beq.n	800bd88 <_raise_r+0x4c>
 800bd72:	1c59      	adds	r1, r3, #1
 800bd74:	d103      	bne.n	800bd7e <_raise_r+0x42>
 800bd76:	2316      	movs	r3, #22
 800bd78:	6003      	str	r3, [r0, #0]
 800bd7a:	2001      	movs	r0, #1
 800bd7c:	e7e7      	b.n	800bd4e <_raise_r+0x12>
 800bd7e:	2400      	movs	r4, #0
 800bd80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bd84:	4628      	mov	r0, r5
 800bd86:	4798      	blx	r3
 800bd88:	2000      	movs	r0, #0
 800bd8a:	e7e0      	b.n	800bd4e <_raise_r+0x12>

0800bd8c <raise>:
 800bd8c:	4b02      	ldr	r3, [pc, #8]	; (800bd98 <raise+0xc>)
 800bd8e:	4601      	mov	r1, r0
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	f7ff bfd3 	b.w	800bd3c <_raise_r>
 800bd96:	bf00      	nop
 800bd98:	20000014 	.word	0x20000014

0800bd9c <_kill_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4c07      	ldr	r4, [pc, #28]	; (800bdbc <_kill_r+0x20>)
 800bda0:	2300      	movs	r3, #0
 800bda2:	4605      	mov	r5, r0
 800bda4:	4608      	mov	r0, r1
 800bda6:	4611      	mov	r1, r2
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	f7f7 fa3d 	bl	8003228 <_kill>
 800bdae:	1c43      	adds	r3, r0, #1
 800bdb0:	d102      	bne.n	800bdb8 <_kill_r+0x1c>
 800bdb2:	6823      	ldr	r3, [r4, #0]
 800bdb4:	b103      	cbz	r3, 800bdb8 <_kill_r+0x1c>
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	bd38      	pop	{r3, r4, r5, pc}
 800bdba:	bf00      	nop
 800bdbc:	20005180 	.word	0x20005180

0800bdc0 <_getpid_r>:
 800bdc0:	f7f7 ba2a 	b.w	8003218 <_getpid>

0800bdc4 <__swbuf_r>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	460e      	mov	r6, r1
 800bdc8:	4614      	mov	r4, r2
 800bdca:	4605      	mov	r5, r0
 800bdcc:	b118      	cbz	r0, 800bdd6 <__swbuf_r+0x12>
 800bdce:	6983      	ldr	r3, [r0, #24]
 800bdd0:	b90b      	cbnz	r3, 800bdd6 <__swbuf_r+0x12>
 800bdd2:	f000 ffed 	bl	800cdb0 <__sinit>
 800bdd6:	4b21      	ldr	r3, [pc, #132]	; (800be5c <__swbuf_r+0x98>)
 800bdd8:	429c      	cmp	r4, r3
 800bdda:	d12a      	bne.n	800be32 <__swbuf_r+0x6e>
 800bddc:	686c      	ldr	r4, [r5, #4]
 800bdde:	69a3      	ldr	r3, [r4, #24]
 800bde0:	60a3      	str	r3, [r4, #8]
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	071a      	lsls	r2, r3, #28
 800bde6:	d52e      	bpl.n	800be46 <__swbuf_r+0x82>
 800bde8:	6923      	ldr	r3, [r4, #16]
 800bdea:	b363      	cbz	r3, 800be46 <__swbuf_r+0x82>
 800bdec:	6923      	ldr	r3, [r4, #16]
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1ac0      	subs	r0, r0, r3
 800bdf2:	6963      	ldr	r3, [r4, #20]
 800bdf4:	b2f6      	uxtb	r6, r6
 800bdf6:	4283      	cmp	r3, r0
 800bdf8:	4637      	mov	r7, r6
 800bdfa:	dc04      	bgt.n	800be06 <__swbuf_r+0x42>
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 ff6c 	bl	800ccdc <_fflush_r>
 800be04:	bb28      	cbnz	r0, 800be52 <__swbuf_r+0x8e>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	3b01      	subs	r3, #1
 800be0a:	60a3      	str	r3, [r4, #8]
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	6022      	str	r2, [r4, #0]
 800be12:	701e      	strb	r6, [r3, #0]
 800be14:	6963      	ldr	r3, [r4, #20]
 800be16:	3001      	adds	r0, #1
 800be18:	4283      	cmp	r3, r0
 800be1a:	d004      	beq.n	800be26 <__swbuf_r+0x62>
 800be1c:	89a3      	ldrh	r3, [r4, #12]
 800be1e:	07db      	lsls	r3, r3, #31
 800be20:	d519      	bpl.n	800be56 <__swbuf_r+0x92>
 800be22:	2e0a      	cmp	r6, #10
 800be24:	d117      	bne.n	800be56 <__swbuf_r+0x92>
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f000 ff57 	bl	800ccdc <_fflush_r>
 800be2e:	b190      	cbz	r0, 800be56 <__swbuf_r+0x92>
 800be30:	e00f      	b.n	800be52 <__swbuf_r+0x8e>
 800be32:	4b0b      	ldr	r3, [pc, #44]	; (800be60 <__swbuf_r+0x9c>)
 800be34:	429c      	cmp	r4, r3
 800be36:	d101      	bne.n	800be3c <__swbuf_r+0x78>
 800be38:	68ac      	ldr	r4, [r5, #8]
 800be3a:	e7d0      	b.n	800bdde <__swbuf_r+0x1a>
 800be3c:	4b09      	ldr	r3, [pc, #36]	; (800be64 <__swbuf_r+0xa0>)
 800be3e:	429c      	cmp	r4, r3
 800be40:	bf08      	it	eq
 800be42:	68ec      	ldreq	r4, [r5, #12]
 800be44:	e7cb      	b.n	800bdde <__swbuf_r+0x1a>
 800be46:	4621      	mov	r1, r4
 800be48:	4628      	mov	r0, r5
 800be4a:	f000 f80d 	bl	800be68 <__swsetup_r>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0cc      	beq.n	800bdec <__swbuf_r+0x28>
 800be52:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be56:	4638      	mov	r0, r7
 800be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be5a:	bf00      	nop
 800be5c:	0800e9f0 	.word	0x0800e9f0
 800be60:	0800ea10 	.word	0x0800ea10
 800be64:	0800e9d0 	.word	0x0800e9d0

0800be68 <__swsetup_r>:
 800be68:	4b32      	ldr	r3, [pc, #200]	; (800bf34 <__swsetup_r+0xcc>)
 800be6a:	b570      	push	{r4, r5, r6, lr}
 800be6c:	681d      	ldr	r5, [r3, #0]
 800be6e:	4606      	mov	r6, r0
 800be70:	460c      	mov	r4, r1
 800be72:	b125      	cbz	r5, 800be7e <__swsetup_r+0x16>
 800be74:	69ab      	ldr	r3, [r5, #24]
 800be76:	b913      	cbnz	r3, 800be7e <__swsetup_r+0x16>
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 ff99 	bl	800cdb0 <__sinit>
 800be7e:	4b2e      	ldr	r3, [pc, #184]	; (800bf38 <__swsetup_r+0xd0>)
 800be80:	429c      	cmp	r4, r3
 800be82:	d10f      	bne.n	800bea4 <__swsetup_r+0x3c>
 800be84:	686c      	ldr	r4, [r5, #4]
 800be86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be8a:	b29a      	uxth	r2, r3
 800be8c:	0715      	lsls	r5, r2, #28
 800be8e:	d42c      	bmi.n	800beea <__swsetup_r+0x82>
 800be90:	06d0      	lsls	r0, r2, #27
 800be92:	d411      	bmi.n	800beb8 <__swsetup_r+0x50>
 800be94:	2209      	movs	r2, #9
 800be96:	6032      	str	r2, [r6, #0]
 800be98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bea2:	e03e      	b.n	800bf22 <__swsetup_r+0xba>
 800bea4:	4b25      	ldr	r3, [pc, #148]	; (800bf3c <__swsetup_r+0xd4>)
 800bea6:	429c      	cmp	r4, r3
 800bea8:	d101      	bne.n	800beae <__swsetup_r+0x46>
 800beaa:	68ac      	ldr	r4, [r5, #8]
 800beac:	e7eb      	b.n	800be86 <__swsetup_r+0x1e>
 800beae:	4b24      	ldr	r3, [pc, #144]	; (800bf40 <__swsetup_r+0xd8>)
 800beb0:	429c      	cmp	r4, r3
 800beb2:	bf08      	it	eq
 800beb4:	68ec      	ldreq	r4, [r5, #12]
 800beb6:	e7e6      	b.n	800be86 <__swsetup_r+0x1e>
 800beb8:	0751      	lsls	r1, r2, #29
 800beba:	d512      	bpl.n	800bee2 <__swsetup_r+0x7a>
 800bebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bebe:	b141      	cbz	r1, 800bed2 <__swsetup_r+0x6a>
 800bec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bec4:	4299      	cmp	r1, r3
 800bec6:	d002      	beq.n	800bece <__swsetup_r+0x66>
 800bec8:	4630      	mov	r0, r6
 800beca:	f001 fb5f 	bl	800d58c <_free_r>
 800bece:	2300      	movs	r3, #0
 800bed0:	6363      	str	r3, [r4, #52]	; 0x34
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	2300      	movs	r3, #0
 800bedc:	6063      	str	r3, [r4, #4]
 800bede:	6923      	ldr	r3, [r4, #16]
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	89a3      	ldrh	r3, [r4, #12]
 800bee4:	f043 0308 	orr.w	r3, r3, #8
 800bee8:	81a3      	strh	r3, [r4, #12]
 800beea:	6923      	ldr	r3, [r4, #16]
 800beec:	b94b      	cbnz	r3, 800bf02 <__swsetup_r+0x9a>
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bef8:	d003      	beq.n	800bf02 <__swsetup_r+0x9a>
 800befa:	4621      	mov	r1, r4
 800befc:	4630      	mov	r0, r6
 800befe:	f001 f813 	bl	800cf28 <__smakebuf_r>
 800bf02:	89a2      	ldrh	r2, [r4, #12]
 800bf04:	f012 0301 	ands.w	r3, r2, #1
 800bf08:	d00c      	beq.n	800bf24 <__swsetup_r+0xbc>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60a3      	str	r3, [r4, #8]
 800bf0e:	6963      	ldr	r3, [r4, #20]
 800bf10:	425b      	negs	r3, r3
 800bf12:	61a3      	str	r3, [r4, #24]
 800bf14:	6923      	ldr	r3, [r4, #16]
 800bf16:	b953      	cbnz	r3, 800bf2e <__swsetup_r+0xc6>
 800bf18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bf20:	d1ba      	bne.n	800be98 <__swsetup_r+0x30>
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	0792      	lsls	r2, r2, #30
 800bf26:	bf58      	it	pl
 800bf28:	6963      	ldrpl	r3, [r4, #20]
 800bf2a:	60a3      	str	r3, [r4, #8]
 800bf2c:	e7f2      	b.n	800bf14 <__swsetup_r+0xac>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e7f7      	b.n	800bf22 <__swsetup_r+0xba>
 800bf32:	bf00      	nop
 800bf34:	20000014 	.word	0x20000014
 800bf38:	0800e9f0 	.word	0x0800e9f0
 800bf3c:	0800ea10 	.word	0x0800ea10
 800bf40:	0800e9d0 	.word	0x0800e9d0

0800bf44 <quorem>:
 800bf44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	6903      	ldr	r3, [r0, #16]
 800bf4a:	690c      	ldr	r4, [r1, #16]
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	4680      	mov	r8, r0
 800bf50:	f2c0 8082 	blt.w	800c058 <quorem+0x114>
 800bf54:	3c01      	subs	r4, #1
 800bf56:	f101 0714 	add.w	r7, r1, #20
 800bf5a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bf5e:	f100 0614 	add.w	r6, r0, #20
 800bf62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bf66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bf6a:	eb06 030c 	add.w	r3, r6, ip
 800bf6e:	3501      	adds	r5, #1
 800bf70:	eb07 090c 	add.w	r9, r7, ip
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	fbb0 f5f5 	udiv	r5, r0, r5
 800bf7a:	b395      	cbz	r5, 800bfe2 <quorem+0x9e>
 800bf7c:	f04f 0a00 	mov.w	sl, #0
 800bf80:	4638      	mov	r0, r7
 800bf82:	46b6      	mov	lr, r6
 800bf84:	46d3      	mov	fp, sl
 800bf86:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf8a:	b293      	uxth	r3, r2
 800bf8c:	fb05 a303 	mla	r3, r5, r3, sl
 800bf90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	ebab 0303 	sub.w	r3, fp, r3
 800bf9a:	0c12      	lsrs	r2, r2, #16
 800bf9c:	f8de b000 	ldr.w	fp, [lr]
 800bfa0:	fb05 a202 	mla	r2, r5, r2, sl
 800bfa4:	fa13 f38b 	uxtah	r3, r3, fp
 800bfa8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bfac:	fa1f fb82 	uxth.w	fp, r2
 800bfb0:	f8de 2000 	ldr.w	r2, [lr]
 800bfb4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bfb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfc2:	4581      	cmp	r9, r0
 800bfc4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bfc8:	f84e 3b04 	str.w	r3, [lr], #4
 800bfcc:	d2db      	bcs.n	800bf86 <quorem+0x42>
 800bfce:	f856 300c 	ldr.w	r3, [r6, ip]
 800bfd2:	b933      	cbnz	r3, 800bfe2 <quorem+0x9e>
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	3b04      	subs	r3, #4
 800bfd8:	429e      	cmp	r6, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	d330      	bcc.n	800c040 <quorem+0xfc>
 800bfde:	f8c8 4010 	str.w	r4, [r8, #16]
 800bfe2:	4640      	mov	r0, r8
 800bfe4:	f001 f9fe 	bl	800d3e4 <__mcmp>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	db25      	blt.n	800c038 <quorem+0xf4>
 800bfec:	3501      	adds	r5, #1
 800bfee:	4630      	mov	r0, r6
 800bff0:	f04f 0c00 	mov.w	ip, #0
 800bff4:	f857 2b04 	ldr.w	r2, [r7], #4
 800bff8:	f8d0 e000 	ldr.w	lr, [r0]
 800bffc:	b293      	uxth	r3, r2
 800bffe:	ebac 0303 	sub.w	r3, ip, r3
 800c002:	0c12      	lsrs	r2, r2, #16
 800c004:	fa13 f38e 	uxtah	r3, r3, lr
 800c008:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c010:	b29b      	uxth	r3, r3
 800c012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c016:	45b9      	cmp	r9, r7
 800c018:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c01c:	f840 3b04 	str.w	r3, [r0], #4
 800c020:	d2e8      	bcs.n	800bff4 <quorem+0xb0>
 800c022:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c026:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c02a:	b92a      	cbnz	r2, 800c038 <quorem+0xf4>
 800c02c:	3b04      	subs	r3, #4
 800c02e:	429e      	cmp	r6, r3
 800c030:	461a      	mov	r2, r3
 800c032:	d30b      	bcc.n	800c04c <quorem+0x108>
 800c034:	f8c8 4010 	str.w	r4, [r8, #16]
 800c038:	4628      	mov	r0, r5
 800c03a:	b003      	add	sp, #12
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	6812      	ldr	r2, [r2, #0]
 800c042:	3b04      	subs	r3, #4
 800c044:	2a00      	cmp	r2, #0
 800c046:	d1ca      	bne.n	800bfde <quorem+0x9a>
 800c048:	3c01      	subs	r4, #1
 800c04a:	e7c5      	b.n	800bfd8 <quorem+0x94>
 800c04c:	6812      	ldr	r2, [r2, #0]
 800c04e:	3b04      	subs	r3, #4
 800c050:	2a00      	cmp	r2, #0
 800c052:	d1ef      	bne.n	800c034 <quorem+0xf0>
 800c054:	3c01      	subs	r4, #1
 800c056:	e7ea      	b.n	800c02e <quorem+0xea>
 800c058:	2000      	movs	r0, #0
 800c05a:	e7ee      	b.n	800c03a <quorem+0xf6>
 800c05c:	0000      	movs	r0, r0
	...

0800c060 <_dtoa_r>:
 800c060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c064:	ec57 6b10 	vmov	r6, r7, d0
 800c068:	b097      	sub	sp, #92	; 0x5c
 800c06a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c06c:	9106      	str	r1, [sp, #24]
 800c06e:	4604      	mov	r4, r0
 800c070:	920b      	str	r2, [sp, #44]	; 0x2c
 800c072:	9312      	str	r3, [sp, #72]	; 0x48
 800c074:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c078:	e9cd 6700 	strd	r6, r7, [sp]
 800c07c:	b93d      	cbnz	r5, 800c08e <_dtoa_r+0x2e>
 800c07e:	2010      	movs	r0, #16
 800c080:	f000 ff92 	bl	800cfa8 <malloc>
 800c084:	6260      	str	r0, [r4, #36]	; 0x24
 800c086:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c08a:	6005      	str	r5, [r0, #0]
 800c08c:	60c5      	str	r5, [r0, #12]
 800c08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c090:	6819      	ldr	r1, [r3, #0]
 800c092:	b151      	cbz	r1, 800c0aa <_dtoa_r+0x4a>
 800c094:	685a      	ldr	r2, [r3, #4]
 800c096:	604a      	str	r2, [r1, #4]
 800c098:	2301      	movs	r3, #1
 800c09a:	4093      	lsls	r3, r2
 800c09c:	608b      	str	r3, [r1, #8]
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 ffbe 	bl	800d020 <_Bfree>
 800c0a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	601a      	str	r2, [r3, #0]
 800c0aa:	1e3b      	subs	r3, r7, #0
 800c0ac:	bfbb      	ittet	lt
 800c0ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	9301      	strlt	r3, [sp, #4]
 800c0b4:	2300      	movge	r3, #0
 800c0b6:	2201      	movlt	r2, #1
 800c0b8:	bfac      	ite	ge
 800c0ba:	f8c8 3000 	strge.w	r3, [r8]
 800c0be:	f8c8 2000 	strlt.w	r2, [r8]
 800c0c2:	4baf      	ldr	r3, [pc, #700]	; (800c380 <_dtoa_r+0x320>)
 800c0c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c0c8:	ea33 0308 	bics.w	r3, r3, r8
 800c0cc:	d114      	bne.n	800c0f8 <_dtoa_r+0x98>
 800c0ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c0d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0d4:	6013      	str	r3, [r2, #0]
 800c0d6:	9b00      	ldr	r3, [sp, #0]
 800c0d8:	b923      	cbnz	r3, 800c0e4 <_dtoa_r+0x84>
 800c0da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f000 8542 	beq.w	800cb68 <_dtoa_r+0xb08>
 800c0e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c394 <_dtoa_r+0x334>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 8544 	beq.w	800cb78 <_dtoa_r+0xb18>
 800c0f0:	f10b 0303 	add.w	r3, fp, #3
 800c0f4:	f000 bd3e 	b.w	800cb74 <_dtoa_r+0xb14>
 800c0f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2300      	movs	r3, #0
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fd08 	bl	8000b18 <__aeabi_dcmpeq>
 800c108:	4681      	mov	r9, r0
 800c10a:	b168      	cbz	r0, 800c128 <_dtoa_r+0xc8>
 800c10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c10e:	2301      	movs	r3, #1
 800c110:	6013      	str	r3, [r2, #0]
 800c112:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c114:	2b00      	cmp	r3, #0
 800c116:	f000 8524 	beq.w	800cb62 <_dtoa_r+0xb02>
 800c11a:	4b9a      	ldr	r3, [pc, #616]	; (800c384 <_dtoa_r+0x324>)
 800c11c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c11e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c122:	6013      	str	r3, [r2, #0]
 800c124:	f000 bd28 	b.w	800cb78 <_dtoa_r+0xb18>
 800c128:	aa14      	add	r2, sp, #80	; 0x50
 800c12a:	a915      	add	r1, sp, #84	; 0x54
 800c12c:	ec47 6b10 	vmov	d0, r6, r7
 800c130:	4620      	mov	r0, r4
 800c132:	f001 f9ce 	bl	800d4d2 <__d2b>
 800c136:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c13a:	9004      	str	r0, [sp, #16]
 800c13c:	2d00      	cmp	r5, #0
 800c13e:	d07c      	beq.n	800c23a <_dtoa_r+0x1da>
 800c140:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c144:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c148:	46b2      	mov	sl, r6
 800c14a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c14e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c152:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c156:	2200      	movs	r2, #0
 800c158:	4b8b      	ldr	r3, [pc, #556]	; (800c388 <_dtoa_r+0x328>)
 800c15a:	4650      	mov	r0, sl
 800c15c:	4659      	mov	r1, fp
 800c15e:	f7f4 f8bb 	bl	80002d8 <__aeabi_dsub>
 800c162:	a381      	add	r3, pc, #516	; (adr r3, 800c368 <_dtoa_r+0x308>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 fa6e 	bl	8000648 <__aeabi_dmul>
 800c16c:	a380      	add	r3, pc, #512	; (adr r3, 800c370 <_dtoa_r+0x310>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	f7f4 f8b3 	bl	80002dc <__adddf3>
 800c176:	4606      	mov	r6, r0
 800c178:	4628      	mov	r0, r5
 800c17a:	460f      	mov	r7, r1
 800c17c:	f7f4 f9fa 	bl	8000574 <__aeabi_i2d>
 800c180:	a37d      	add	r3, pc, #500	; (adr r3, 800c378 <_dtoa_r+0x318>)
 800c182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c186:	f7f4 fa5f 	bl	8000648 <__aeabi_dmul>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4630      	mov	r0, r6
 800c190:	4639      	mov	r1, r7
 800c192:	f7f4 f8a3 	bl	80002dc <__adddf3>
 800c196:	4606      	mov	r6, r0
 800c198:	460f      	mov	r7, r1
 800c19a:	f7f4 fd05 	bl	8000ba8 <__aeabi_d2iz>
 800c19e:	2200      	movs	r2, #0
 800c1a0:	4682      	mov	sl, r0
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 fcc0 	bl	8000b2c <__aeabi_dcmplt>
 800c1ac:	b148      	cbz	r0, 800c1c2 <_dtoa_r+0x162>
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	f7f4 f9e0 	bl	8000574 <__aeabi_i2d>
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	f7f4 fcae 	bl	8000b18 <__aeabi_dcmpeq>
 800c1bc:	b908      	cbnz	r0, 800c1c2 <_dtoa_r+0x162>
 800c1be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1c2:	f1ba 0f16 	cmp.w	sl, #22
 800c1c6:	d859      	bhi.n	800c27c <_dtoa_r+0x21c>
 800c1c8:	4970      	ldr	r1, [pc, #448]	; (800c38c <_dtoa_r+0x32c>)
 800c1ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1d6:	f7f4 fcc7 	bl	8000b68 <__aeabi_dcmpgt>
 800c1da:	2800      	cmp	r0, #0
 800c1dc:	d050      	beq.n	800c280 <_dtoa_r+0x220>
 800c1de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1e8:	1b5d      	subs	r5, r3, r5
 800c1ea:	f1b5 0801 	subs.w	r8, r5, #1
 800c1ee:	bf49      	itett	mi
 800c1f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c1f4:	2300      	movpl	r3, #0
 800c1f6:	9305      	strmi	r3, [sp, #20]
 800c1f8:	f04f 0800 	movmi.w	r8, #0
 800c1fc:	bf58      	it	pl
 800c1fe:	9305      	strpl	r3, [sp, #20]
 800c200:	f1ba 0f00 	cmp.w	sl, #0
 800c204:	db3e      	blt.n	800c284 <_dtoa_r+0x224>
 800c206:	2300      	movs	r3, #0
 800c208:	44d0      	add	r8, sl
 800c20a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c20e:	9307      	str	r3, [sp, #28]
 800c210:	9b06      	ldr	r3, [sp, #24]
 800c212:	2b09      	cmp	r3, #9
 800c214:	f200 8090 	bhi.w	800c338 <_dtoa_r+0x2d8>
 800c218:	2b05      	cmp	r3, #5
 800c21a:	bfc4      	itt	gt
 800c21c:	3b04      	subgt	r3, #4
 800c21e:	9306      	strgt	r3, [sp, #24]
 800c220:	9b06      	ldr	r3, [sp, #24]
 800c222:	f1a3 0302 	sub.w	r3, r3, #2
 800c226:	bfcc      	ite	gt
 800c228:	2500      	movgt	r5, #0
 800c22a:	2501      	movle	r5, #1
 800c22c:	2b03      	cmp	r3, #3
 800c22e:	f200 808f 	bhi.w	800c350 <_dtoa_r+0x2f0>
 800c232:	e8df f003 	tbb	[pc, r3]
 800c236:	7f7d      	.short	0x7f7d
 800c238:	7131      	.short	0x7131
 800c23a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c23e:	441d      	add	r5, r3
 800c240:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c244:	2820      	cmp	r0, #32
 800c246:	dd13      	ble.n	800c270 <_dtoa_r+0x210>
 800c248:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c24c:	9b00      	ldr	r3, [sp, #0]
 800c24e:	fa08 f800 	lsl.w	r8, r8, r0
 800c252:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c256:	fa23 f000 	lsr.w	r0, r3, r0
 800c25a:	ea48 0000 	orr.w	r0, r8, r0
 800c25e:	f7f4 f979 	bl	8000554 <__aeabi_ui2d>
 800c262:	2301      	movs	r3, #1
 800c264:	4682      	mov	sl, r0
 800c266:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c26a:	3d01      	subs	r5, #1
 800c26c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c26e:	e772      	b.n	800c156 <_dtoa_r+0xf6>
 800c270:	9b00      	ldr	r3, [sp, #0]
 800c272:	f1c0 0020 	rsb	r0, r0, #32
 800c276:	fa03 f000 	lsl.w	r0, r3, r0
 800c27a:	e7f0      	b.n	800c25e <_dtoa_r+0x1fe>
 800c27c:	2301      	movs	r3, #1
 800c27e:	e7b1      	b.n	800c1e4 <_dtoa_r+0x184>
 800c280:	900f      	str	r0, [sp, #60]	; 0x3c
 800c282:	e7b0      	b.n	800c1e6 <_dtoa_r+0x186>
 800c284:	9b05      	ldr	r3, [sp, #20]
 800c286:	eba3 030a 	sub.w	r3, r3, sl
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	f1ca 0300 	rsb	r3, sl, #0
 800c290:	9307      	str	r3, [sp, #28]
 800c292:	2300      	movs	r3, #0
 800c294:	930e      	str	r3, [sp, #56]	; 0x38
 800c296:	e7bb      	b.n	800c210 <_dtoa_r+0x1b0>
 800c298:	2301      	movs	r3, #1
 800c29a:	930a      	str	r3, [sp, #40]	; 0x28
 800c29c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	dd59      	ble.n	800c356 <_dtoa_r+0x2f6>
 800c2a2:	9302      	str	r3, [sp, #8]
 800c2a4:	4699      	mov	r9, r3
 800c2a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	6072      	str	r2, [r6, #4]
 800c2ac:	2204      	movs	r2, #4
 800c2ae:	f102 0014 	add.w	r0, r2, #20
 800c2b2:	4298      	cmp	r0, r3
 800c2b4:	6871      	ldr	r1, [r6, #4]
 800c2b6:	d953      	bls.n	800c360 <_dtoa_r+0x300>
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fe7d 	bl	800cfb8 <_Balloc>
 800c2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2c0:	6030      	str	r0, [r6, #0]
 800c2c2:	f1b9 0f0e 	cmp.w	r9, #14
 800c2c6:	f8d3 b000 	ldr.w	fp, [r3]
 800c2ca:	f200 80e6 	bhi.w	800c49a <_dtoa_r+0x43a>
 800c2ce:	2d00      	cmp	r5, #0
 800c2d0:	f000 80e3 	beq.w	800c49a <_dtoa_r+0x43a>
 800c2d4:	ed9d 7b00 	vldr	d7, [sp]
 800c2d8:	f1ba 0f00 	cmp.w	sl, #0
 800c2dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c2e0:	dd74      	ble.n	800c3cc <_dtoa_r+0x36c>
 800c2e2:	4a2a      	ldr	r2, [pc, #168]	; (800c38c <_dtoa_r+0x32c>)
 800c2e4:	f00a 030f 	and.w	r3, sl, #15
 800c2e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c2ec:	ed93 7b00 	vldr	d7, [r3]
 800c2f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c2f4:	06f0      	lsls	r0, r6, #27
 800c2f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c2fa:	d565      	bpl.n	800c3c8 <_dtoa_r+0x368>
 800c2fc:	4b24      	ldr	r3, [pc, #144]	; (800c390 <_dtoa_r+0x330>)
 800c2fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c302:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c306:	f7f4 fac9 	bl	800089c <__aeabi_ddiv>
 800c30a:	e9cd 0100 	strd	r0, r1, [sp]
 800c30e:	f006 060f 	and.w	r6, r6, #15
 800c312:	2503      	movs	r5, #3
 800c314:	4f1e      	ldr	r7, [pc, #120]	; (800c390 <_dtoa_r+0x330>)
 800c316:	e04c      	b.n	800c3b2 <_dtoa_r+0x352>
 800c318:	2301      	movs	r3, #1
 800c31a:	930a      	str	r3, [sp, #40]	; 0x28
 800c31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c31e:	4453      	add	r3, sl
 800c320:	f103 0901 	add.w	r9, r3, #1
 800c324:	9302      	str	r3, [sp, #8]
 800c326:	464b      	mov	r3, r9
 800c328:	2b01      	cmp	r3, #1
 800c32a:	bfb8      	it	lt
 800c32c:	2301      	movlt	r3, #1
 800c32e:	e7ba      	b.n	800c2a6 <_dtoa_r+0x246>
 800c330:	2300      	movs	r3, #0
 800c332:	e7b2      	b.n	800c29a <_dtoa_r+0x23a>
 800c334:	2300      	movs	r3, #0
 800c336:	e7f0      	b.n	800c31a <_dtoa_r+0x2ba>
 800c338:	2501      	movs	r5, #1
 800c33a:	2300      	movs	r3, #0
 800c33c:	9306      	str	r3, [sp, #24]
 800c33e:	950a      	str	r5, [sp, #40]	; 0x28
 800c340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	4699      	mov	r9, r3
 800c348:	2200      	movs	r2, #0
 800c34a:	2312      	movs	r3, #18
 800c34c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c34e:	e7aa      	b.n	800c2a6 <_dtoa_r+0x246>
 800c350:	2301      	movs	r3, #1
 800c352:	930a      	str	r3, [sp, #40]	; 0x28
 800c354:	e7f4      	b.n	800c340 <_dtoa_r+0x2e0>
 800c356:	2301      	movs	r3, #1
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	4699      	mov	r9, r3
 800c35c:	461a      	mov	r2, r3
 800c35e:	e7f5      	b.n	800c34c <_dtoa_r+0x2ec>
 800c360:	3101      	adds	r1, #1
 800c362:	6071      	str	r1, [r6, #4]
 800c364:	0052      	lsls	r2, r2, #1
 800c366:	e7a2      	b.n	800c2ae <_dtoa_r+0x24e>
 800c368:	636f4361 	.word	0x636f4361
 800c36c:	3fd287a7 	.word	0x3fd287a7
 800c370:	8b60c8b3 	.word	0x8b60c8b3
 800c374:	3fc68a28 	.word	0x3fc68a28
 800c378:	509f79fb 	.word	0x509f79fb
 800c37c:	3fd34413 	.word	0x3fd34413
 800c380:	7ff00000 	.word	0x7ff00000
 800c384:	0800e99d 	.word	0x0800e99d
 800c388:	3ff80000 	.word	0x3ff80000
 800c38c:	0800ea58 	.word	0x0800ea58
 800c390:	0800ea30 	.word	0x0800ea30
 800c394:	0800e9c9 	.word	0x0800e9c9
 800c398:	07f1      	lsls	r1, r6, #31
 800c39a:	d508      	bpl.n	800c3ae <_dtoa_r+0x34e>
 800c39c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3a4:	f7f4 f950 	bl	8000648 <__aeabi_dmul>
 800c3a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3ac:	3501      	adds	r5, #1
 800c3ae:	1076      	asrs	r6, r6, #1
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	2e00      	cmp	r6, #0
 800c3b4:	d1f0      	bne.n	800c398 <_dtoa_r+0x338>
 800c3b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3be:	f7f4 fa6d 	bl	800089c <__aeabi_ddiv>
 800c3c2:	e9cd 0100 	strd	r0, r1, [sp]
 800c3c6:	e01a      	b.n	800c3fe <_dtoa_r+0x39e>
 800c3c8:	2502      	movs	r5, #2
 800c3ca:	e7a3      	b.n	800c314 <_dtoa_r+0x2b4>
 800c3cc:	f000 80a0 	beq.w	800c510 <_dtoa_r+0x4b0>
 800c3d0:	f1ca 0600 	rsb	r6, sl, #0
 800c3d4:	4b9f      	ldr	r3, [pc, #636]	; (800c654 <_dtoa_r+0x5f4>)
 800c3d6:	4fa0      	ldr	r7, [pc, #640]	; (800c658 <_dtoa_r+0x5f8>)
 800c3d8:	f006 020f 	and.w	r2, r6, #15
 800c3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c3e8:	f7f4 f92e 	bl	8000648 <__aeabi_dmul>
 800c3ec:	e9cd 0100 	strd	r0, r1, [sp]
 800c3f0:	1136      	asrs	r6, r6, #4
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	2502      	movs	r5, #2
 800c3f6:	2e00      	cmp	r6, #0
 800c3f8:	d17f      	bne.n	800c4fa <_dtoa_r+0x49a>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d1e1      	bne.n	800c3c2 <_dtoa_r+0x362>
 800c3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 8087 	beq.w	800c514 <_dtoa_r+0x4b4>
 800c406:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c40a:	2200      	movs	r2, #0
 800c40c:	4b93      	ldr	r3, [pc, #588]	; (800c65c <_dtoa_r+0x5fc>)
 800c40e:	4630      	mov	r0, r6
 800c410:	4639      	mov	r1, r7
 800c412:	f7f4 fb8b 	bl	8000b2c <__aeabi_dcmplt>
 800c416:	2800      	cmp	r0, #0
 800c418:	d07c      	beq.n	800c514 <_dtoa_r+0x4b4>
 800c41a:	f1b9 0f00 	cmp.w	r9, #0
 800c41e:	d079      	beq.n	800c514 <_dtoa_r+0x4b4>
 800c420:	9b02      	ldr	r3, [sp, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	dd35      	ble.n	800c492 <_dtoa_r+0x432>
 800c426:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c42a:	9308      	str	r3, [sp, #32]
 800c42c:	4639      	mov	r1, r7
 800c42e:	2200      	movs	r2, #0
 800c430:	4b8b      	ldr	r3, [pc, #556]	; (800c660 <_dtoa_r+0x600>)
 800c432:	4630      	mov	r0, r6
 800c434:	f7f4 f908 	bl	8000648 <__aeabi_dmul>
 800c438:	e9cd 0100 	strd	r0, r1, [sp]
 800c43c:	9f02      	ldr	r7, [sp, #8]
 800c43e:	3501      	adds	r5, #1
 800c440:	4628      	mov	r0, r5
 800c442:	f7f4 f897 	bl	8000574 <__aeabi_i2d>
 800c446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c44a:	f7f4 f8fd 	bl	8000648 <__aeabi_dmul>
 800c44e:	2200      	movs	r2, #0
 800c450:	4b84      	ldr	r3, [pc, #528]	; (800c664 <_dtoa_r+0x604>)
 800c452:	f7f3 ff43 	bl	80002dc <__adddf3>
 800c456:	4605      	mov	r5, r0
 800c458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c45c:	2f00      	cmp	r7, #0
 800c45e:	d15d      	bne.n	800c51c <_dtoa_r+0x4bc>
 800c460:	2200      	movs	r2, #0
 800c462:	4b81      	ldr	r3, [pc, #516]	; (800c668 <_dtoa_r+0x608>)
 800c464:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c468:	f7f3 ff36 	bl	80002d8 <__aeabi_dsub>
 800c46c:	462a      	mov	r2, r5
 800c46e:	4633      	mov	r3, r6
 800c470:	e9cd 0100 	strd	r0, r1, [sp]
 800c474:	f7f4 fb78 	bl	8000b68 <__aeabi_dcmpgt>
 800c478:	2800      	cmp	r0, #0
 800c47a:	f040 8288 	bne.w	800c98e <_dtoa_r+0x92e>
 800c47e:	462a      	mov	r2, r5
 800c480:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c484:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c488:	f7f4 fb50 	bl	8000b2c <__aeabi_dcmplt>
 800c48c:	2800      	cmp	r0, #0
 800c48e:	f040 827c 	bne.w	800c98a <_dtoa_r+0x92a>
 800c492:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c496:	e9cd 2300 	strd	r2, r3, [sp]
 800c49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f2c0 8150 	blt.w	800c742 <_dtoa_r+0x6e2>
 800c4a2:	f1ba 0f0e 	cmp.w	sl, #14
 800c4a6:	f300 814c 	bgt.w	800c742 <_dtoa_r+0x6e2>
 800c4aa:	4b6a      	ldr	r3, [pc, #424]	; (800c654 <_dtoa_r+0x5f4>)
 800c4ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c4b0:	ed93 7b00 	vldr	d7, [r3]
 800c4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c4bc:	f280 80d8 	bge.w	800c670 <_dtoa_r+0x610>
 800c4c0:	f1b9 0f00 	cmp.w	r9, #0
 800c4c4:	f300 80d4 	bgt.w	800c670 <_dtoa_r+0x610>
 800c4c8:	f040 825e 	bne.w	800c988 <_dtoa_r+0x928>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	4b66      	ldr	r3, [pc, #408]	; (800c668 <_dtoa_r+0x608>)
 800c4d0:	ec51 0b17 	vmov	r0, r1, d7
 800c4d4:	f7f4 f8b8 	bl	8000648 <__aeabi_dmul>
 800c4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4dc:	f7f4 fb3a 	bl	8000b54 <__aeabi_dcmpge>
 800c4e0:	464f      	mov	r7, r9
 800c4e2:	464e      	mov	r6, r9
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f040 8234 	bne.w	800c952 <_dtoa_r+0x8f2>
 800c4ea:	2331      	movs	r3, #49	; 0x31
 800c4ec:	f10b 0501 	add.w	r5, fp, #1
 800c4f0:	f88b 3000 	strb.w	r3, [fp]
 800c4f4:	f10a 0a01 	add.w	sl, sl, #1
 800c4f8:	e22f      	b.n	800c95a <_dtoa_r+0x8fa>
 800c4fa:	07f2      	lsls	r2, r6, #31
 800c4fc:	d505      	bpl.n	800c50a <_dtoa_r+0x4aa>
 800c4fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c502:	f7f4 f8a1 	bl	8000648 <__aeabi_dmul>
 800c506:	3501      	adds	r5, #1
 800c508:	2301      	movs	r3, #1
 800c50a:	1076      	asrs	r6, r6, #1
 800c50c:	3708      	adds	r7, #8
 800c50e:	e772      	b.n	800c3f6 <_dtoa_r+0x396>
 800c510:	2502      	movs	r5, #2
 800c512:	e774      	b.n	800c3fe <_dtoa_r+0x39e>
 800c514:	f8cd a020 	str.w	sl, [sp, #32]
 800c518:	464f      	mov	r7, r9
 800c51a:	e791      	b.n	800c440 <_dtoa_r+0x3e0>
 800c51c:	4b4d      	ldr	r3, [pc, #308]	; (800c654 <_dtoa_r+0x5f4>)
 800c51e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c522:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d047      	beq.n	800c5bc <_dtoa_r+0x55c>
 800c52c:	4602      	mov	r2, r0
 800c52e:	460b      	mov	r3, r1
 800c530:	2000      	movs	r0, #0
 800c532:	494e      	ldr	r1, [pc, #312]	; (800c66c <_dtoa_r+0x60c>)
 800c534:	f7f4 f9b2 	bl	800089c <__aeabi_ddiv>
 800c538:	462a      	mov	r2, r5
 800c53a:	4633      	mov	r3, r6
 800c53c:	f7f3 fecc 	bl	80002d8 <__aeabi_dsub>
 800c540:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c544:	465d      	mov	r5, fp
 800c546:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c54a:	f7f4 fb2d 	bl	8000ba8 <__aeabi_d2iz>
 800c54e:	4606      	mov	r6, r0
 800c550:	f7f4 f810 	bl	8000574 <__aeabi_i2d>
 800c554:	4602      	mov	r2, r0
 800c556:	460b      	mov	r3, r1
 800c558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c55c:	f7f3 febc 	bl	80002d8 <__aeabi_dsub>
 800c560:	3630      	adds	r6, #48	; 0x30
 800c562:	f805 6b01 	strb.w	r6, [r5], #1
 800c566:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c56a:	e9cd 0100 	strd	r0, r1, [sp]
 800c56e:	f7f4 fadd 	bl	8000b2c <__aeabi_dcmplt>
 800c572:	2800      	cmp	r0, #0
 800c574:	d163      	bne.n	800c63e <_dtoa_r+0x5de>
 800c576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57a:	2000      	movs	r0, #0
 800c57c:	4937      	ldr	r1, [pc, #220]	; (800c65c <_dtoa_r+0x5fc>)
 800c57e:	f7f3 feab 	bl	80002d8 <__aeabi_dsub>
 800c582:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c586:	f7f4 fad1 	bl	8000b2c <__aeabi_dcmplt>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f040 80b7 	bne.w	800c6fe <_dtoa_r+0x69e>
 800c590:	eba5 030b 	sub.w	r3, r5, fp
 800c594:	429f      	cmp	r7, r3
 800c596:	f77f af7c 	ble.w	800c492 <_dtoa_r+0x432>
 800c59a:	2200      	movs	r2, #0
 800c59c:	4b30      	ldr	r3, [pc, #192]	; (800c660 <_dtoa_r+0x600>)
 800c59e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c5a2:	f7f4 f851 	bl	8000648 <__aeabi_dmul>
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c5ac:	4b2c      	ldr	r3, [pc, #176]	; (800c660 <_dtoa_r+0x600>)
 800c5ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5b2:	f7f4 f849 	bl	8000648 <__aeabi_dmul>
 800c5b6:	e9cd 0100 	strd	r0, r1, [sp]
 800c5ba:	e7c4      	b.n	800c546 <_dtoa_r+0x4e6>
 800c5bc:	462a      	mov	r2, r5
 800c5be:	4633      	mov	r3, r6
 800c5c0:	f7f4 f842 	bl	8000648 <__aeabi_dmul>
 800c5c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c5c8:	eb0b 0507 	add.w	r5, fp, r7
 800c5cc:	465e      	mov	r6, fp
 800c5ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5d2:	f7f4 fae9 	bl	8000ba8 <__aeabi_d2iz>
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	f7f3 ffcc 	bl	8000574 <__aeabi_i2d>
 800c5dc:	3730      	adds	r7, #48	; 0x30
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5e6:	f7f3 fe77 	bl	80002d8 <__aeabi_dsub>
 800c5ea:	f806 7b01 	strb.w	r7, [r6], #1
 800c5ee:	42ae      	cmp	r6, r5
 800c5f0:	e9cd 0100 	strd	r0, r1, [sp]
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	d126      	bne.n	800c648 <_dtoa_r+0x5e8>
 800c5fa:	4b1c      	ldr	r3, [pc, #112]	; (800c66c <_dtoa_r+0x60c>)
 800c5fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c600:	f7f3 fe6c 	bl	80002dc <__adddf3>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c60c:	f7f4 faac 	bl	8000b68 <__aeabi_dcmpgt>
 800c610:	2800      	cmp	r0, #0
 800c612:	d174      	bne.n	800c6fe <_dtoa_r+0x69e>
 800c614:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c618:	2000      	movs	r0, #0
 800c61a:	4914      	ldr	r1, [pc, #80]	; (800c66c <_dtoa_r+0x60c>)
 800c61c:	f7f3 fe5c 	bl	80002d8 <__aeabi_dsub>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c628:	f7f4 fa80 	bl	8000b2c <__aeabi_dcmplt>
 800c62c:	2800      	cmp	r0, #0
 800c62e:	f43f af30 	beq.w	800c492 <_dtoa_r+0x432>
 800c632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c636:	2b30      	cmp	r3, #48	; 0x30
 800c638:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c63c:	d002      	beq.n	800c644 <_dtoa_r+0x5e4>
 800c63e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c642:	e04a      	b.n	800c6da <_dtoa_r+0x67a>
 800c644:	4615      	mov	r5, r2
 800c646:	e7f4      	b.n	800c632 <_dtoa_r+0x5d2>
 800c648:	4b05      	ldr	r3, [pc, #20]	; (800c660 <_dtoa_r+0x600>)
 800c64a:	f7f3 fffd 	bl	8000648 <__aeabi_dmul>
 800c64e:	e9cd 0100 	strd	r0, r1, [sp]
 800c652:	e7bc      	b.n	800c5ce <_dtoa_r+0x56e>
 800c654:	0800ea58 	.word	0x0800ea58
 800c658:	0800ea30 	.word	0x0800ea30
 800c65c:	3ff00000 	.word	0x3ff00000
 800c660:	40240000 	.word	0x40240000
 800c664:	401c0000 	.word	0x401c0000
 800c668:	40140000 	.word	0x40140000
 800c66c:	3fe00000 	.word	0x3fe00000
 800c670:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c674:	465d      	mov	r5, fp
 800c676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c67a:	4630      	mov	r0, r6
 800c67c:	4639      	mov	r1, r7
 800c67e:	f7f4 f90d 	bl	800089c <__aeabi_ddiv>
 800c682:	f7f4 fa91 	bl	8000ba8 <__aeabi_d2iz>
 800c686:	4680      	mov	r8, r0
 800c688:	f7f3 ff74 	bl	8000574 <__aeabi_i2d>
 800c68c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c690:	f7f3 ffda 	bl	8000648 <__aeabi_dmul>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c6a0:	f7f3 fe1a 	bl	80002d8 <__aeabi_dsub>
 800c6a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c6a8:	eba5 060b 	sub.w	r6, r5, fp
 800c6ac:	45b1      	cmp	r9, r6
 800c6ae:	4602      	mov	r2, r0
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	d139      	bne.n	800c728 <_dtoa_r+0x6c8>
 800c6b4:	f7f3 fe12 	bl	80002dc <__adddf3>
 800c6b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	f7f4 fa52 	bl	8000b68 <__aeabi_dcmpgt>
 800c6c4:	b9c8      	cbnz	r0, 800c6fa <_dtoa_r+0x69a>
 800c6c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	f7f4 fa23 	bl	8000b18 <__aeabi_dcmpeq>
 800c6d2:	b110      	cbz	r0, 800c6da <_dtoa_r+0x67a>
 800c6d4:	f018 0f01 	tst.w	r8, #1
 800c6d8:	d10f      	bne.n	800c6fa <_dtoa_r+0x69a>
 800c6da:	9904      	ldr	r1, [sp, #16]
 800c6dc:	4620      	mov	r0, r4
 800c6de:	f000 fc9f 	bl	800d020 <_Bfree>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c6e6:	702b      	strb	r3, [r5, #0]
 800c6e8:	f10a 0301 	add.w	r3, sl, #1
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f000 8241 	beq.w	800cb78 <_dtoa_r+0xb18>
 800c6f6:	601d      	str	r5, [r3, #0]
 800c6f8:	e23e      	b.n	800cb78 <_dtoa_r+0xb18>
 800c6fa:	f8cd a020 	str.w	sl, [sp, #32]
 800c6fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c702:	2a39      	cmp	r2, #57	; 0x39
 800c704:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c708:	d108      	bne.n	800c71c <_dtoa_r+0x6bc>
 800c70a:	459b      	cmp	fp, r3
 800c70c:	d10a      	bne.n	800c724 <_dtoa_r+0x6c4>
 800c70e:	9b08      	ldr	r3, [sp, #32]
 800c710:	3301      	adds	r3, #1
 800c712:	9308      	str	r3, [sp, #32]
 800c714:	2330      	movs	r3, #48	; 0x30
 800c716:	f88b 3000 	strb.w	r3, [fp]
 800c71a:	465b      	mov	r3, fp
 800c71c:	781a      	ldrb	r2, [r3, #0]
 800c71e:	3201      	adds	r2, #1
 800c720:	701a      	strb	r2, [r3, #0]
 800c722:	e78c      	b.n	800c63e <_dtoa_r+0x5de>
 800c724:	461d      	mov	r5, r3
 800c726:	e7ea      	b.n	800c6fe <_dtoa_r+0x69e>
 800c728:	2200      	movs	r2, #0
 800c72a:	4b9b      	ldr	r3, [pc, #620]	; (800c998 <_dtoa_r+0x938>)
 800c72c:	f7f3 ff8c 	bl	8000648 <__aeabi_dmul>
 800c730:	2200      	movs	r2, #0
 800c732:	2300      	movs	r3, #0
 800c734:	4606      	mov	r6, r0
 800c736:	460f      	mov	r7, r1
 800c738:	f7f4 f9ee 	bl	8000b18 <__aeabi_dcmpeq>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d09a      	beq.n	800c676 <_dtoa_r+0x616>
 800c740:	e7cb      	b.n	800c6da <_dtoa_r+0x67a>
 800c742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c744:	2a00      	cmp	r2, #0
 800c746:	f000 808b 	beq.w	800c860 <_dtoa_r+0x800>
 800c74a:	9a06      	ldr	r2, [sp, #24]
 800c74c:	2a01      	cmp	r2, #1
 800c74e:	dc6e      	bgt.n	800c82e <_dtoa_r+0x7ce>
 800c750:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c752:	2a00      	cmp	r2, #0
 800c754:	d067      	beq.n	800c826 <_dtoa_r+0x7c6>
 800c756:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c75a:	9f07      	ldr	r7, [sp, #28]
 800c75c:	9d05      	ldr	r5, [sp, #20]
 800c75e:	9a05      	ldr	r2, [sp, #20]
 800c760:	2101      	movs	r1, #1
 800c762:	441a      	add	r2, r3
 800c764:	4620      	mov	r0, r4
 800c766:	9205      	str	r2, [sp, #20]
 800c768:	4498      	add	r8, r3
 800c76a:	f000 fcf9 	bl	800d160 <__i2b>
 800c76e:	4606      	mov	r6, r0
 800c770:	2d00      	cmp	r5, #0
 800c772:	dd0c      	ble.n	800c78e <_dtoa_r+0x72e>
 800c774:	f1b8 0f00 	cmp.w	r8, #0
 800c778:	dd09      	ble.n	800c78e <_dtoa_r+0x72e>
 800c77a:	4545      	cmp	r5, r8
 800c77c:	9a05      	ldr	r2, [sp, #20]
 800c77e:	462b      	mov	r3, r5
 800c780:	bfa8      	it	ge
 800c782:	4643      	movge	r3, r8
 800c784:	1ad2      	subs	r2, r2, r3
 800c786:	9205      	str	r2, [sp, #20]
 800c788:	1aed      	subs	r5, r5, r3
 800c78a:	eba8 0803 	sub.w	r8, r8, r3
 800c78e:	9b07      	ldr	r3, [sp, #28]
 800c790:	b1eb      	cbz	r3, 800c7ce <_dtoa_r+0x76e>
 800c792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c794:	2b00      	cmp	r3, #0
 800c796:	d067      	beq.n	800c868 <_dtoa_r+0x808>
 800c798:	b18f      	cbz	r7, 800c7be <_dtoa_r+0x75e>
 800c79a:	4631      	mov	r1, r6
 800c79c:	463a      	mov	r2, r7
 800c79e:	4620      	mov	r0, r4
 800c7a0:	f000 fd7e 	bl	800d2a0 <__pow5mult>
 800c7a4:	9a04      	ldr	r2, [sp, #16]
 800c7a6:	4601      	mov	r1, r0
 800c7a8:	4606      	mov	r6, r0
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f000 fce1 	bl	800d172 <__multiply>
 800c7b0:	9904      	ldr	r1, [sp, #16]
 800c7b2:	9008      	str	r0, [sp, #32]
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	f000 fc33 	bl	800d020 <_Bfree>
 800c7ba:	9b08      	ldr	r3, [sp, #32]
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9b07      	ldr	r3, [sp, #28]
 800c7c0:	1bda      	subs	r2, r3, r7
 800c7c2:	d004      	beq.n	800c7ce <_dtoa_r+0x76e>
 800c7c4:	9904      	ldr	r1, [sp, #16]
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f000 fd6a 	bl	800d2a0 <__pow5mult>
 800c7cc:	9004      	str	r0, [sp, #16]
 800c7ce:	2101      	movs	r1, #1
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 fcc5 	bl	800d160 <__i2b>
 800c7d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7d8:	4607      	mov	r7, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	f000 81d0 	beq.w	800cb80 <_dtoa_r+0xb20>
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4601      	mov	r1, r0
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	f000 fd5b 	bl	800d2a0 <__pow5mult>
 800c7ea:	9b06      	ldr	r3, [sp, #24]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	dc40      	bgt.n	800c874 <_dtoa_r+0x814>
 800c7f2:	9b00      	ldr	r3, [sp, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d139      	bne.n	800c86c <_dtoa_r+0x80c>
 800c7f8:	9b01      	ldr	r3, [sp, #4]
 800c7fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d136      	bne.n	800c870 <_dtoa_r+0x810>
 800c802:	9b01      	ldr	r3, [sp, #4]
 800c804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c808:	0d1b      	lsrs	r3, r3, #20
 800c80a:	051b      	lsls	r3, r3, #20
 800c80c:	b12b      	cbz	r3, 800c81a <_dtoa_r+0x7ba>
 800c80e:	9b05      	ldr	r3, [sp, #20]
 800c810:	3301      	adds	r3, #1
 800c812:	9305      	str	r3, [sp, #20]
 800c814:	f108 0801 	add.w	r8, r8, #1
 800c818:	2301      	movs	r3, #1
 800c81a:	9307      	str	r3, [sp, #28]
 800c81c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d12a      	bne.n	800c878 <_dtoa_r+0x818>
 800c822:	2001      	movs	r0, #1
 800c824:	e030      	b.n	800c888 <_dtoa_r+0x828>
 800c826:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c828:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c82c:	e795      	b.n	800c75a <_dtoa_r+0x6fa>
 800c82e:	9b07      	ldr	r3, [sp, #28]
 800c830:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c834:	42bb      	cmp	r3, r7
 800c836:	bfbf      	itttt	lt
 800c838:	9b07      	ldrlt	r3, [sp, #28]
 800c83a:	9707      	strlt	r7, [sp, #28]
 800c83c:	1afa      	sublt	r2, r7, r3
 800c83e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c840:	bfbb      	ittet	lt
 800c842:	189b      	addlt	r3, r3, r2
 800c844:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c846:	1bdf      	subge	r7, r3, r7
 800c848:	2700      	movlt	r7, #0
 800c84a:	f1b9 0f00 	cmp.w	r9, #0
 800c84e:	bfb5      	itete	lt
 800c850:	9b05      	ldrlt	r3, [sp, #20]
 800c852:	9d05      	ldrge	r5, [sp, #20]
 800c854:	eba3 0509 	sublt.w	r5, r3, r9
 800c858:	464b      	movge	r3, r9
 800c85a:	bfb8      	it	lt
 800c85c:	2300      	movlt	r3, #0
 800c85e:	e77e      	b.n	800c75e <_dtoa_r+0x6fe>
 800c860:	9f07      	ldr	r7, [sp, #28]
 800c862:	9d05      	ldr	r5, [sp, #20]
 800c864:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c866:	e783      	b.n	800c770 <_dtoa_r+0x710>
 800c868:	9a07      	ldr	r2, [sp, #28]
 800c86a:	e7ab      	b.n	800c7c4 <_dtoa_r+0x764>
 800c86c:	2300      	movs	r3, #0
 800c86e:	e7d4      	b.n	800c81a <_dtoa_r+0x7ba>
 800c870:	9b00      	ldr	r3, [sp, #0]
 800c872:	e7d2      	b.n	800c81a <_dtoa_r+0x7ba>
 800c874:	2300      	movs	r3, #0
 800c876:	9307      	str	r3, [sp, #28]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c87e:	6918      	ldr	r0, [r3, #16]
 800c880:	f000 fc20 	bl	800d0c4 <__hi0bits>
 800c884:	f1c0 0020 	rsb	r0, r0, #32
 800c888:	4440      	add	r0, r8
 800c88a:	f010 001f 	ands.w	r0, r0, #31
 800c88e:	d047      	beq.n	800c920 <_dtoa_r+0x8c0>
 800c890:	f1c0 0320 	rsb	r3, r0, #32
 800c894:	2b04      	cmp	r3, #4
 800c896:	dd3b      	ble.n	800c910 <_dtoa_r+0x8b0>
 800c898:	9b05      	ldr	r3, [sp, #20]
 800c89a:	f1c0 001c 	rsb	r0, r0, #28
 800c89e:	4403      	add	r3, r0
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	4405      	add	r5, r0
 800c8a4:	4480      	add	r8, r0
 800c8a6:	9b05      	ldr	r3, [sp, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	dd05      	ble.n	800c8b8 <_dtoa_r+0x858>
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	9904      	ldr	r1, [sp, #16]
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 fd43 	bl	800d33c <__lshift>
 800c8b6:	9004      	str	r0, [sp, #16]
 800c8b8:	f1b8 0f00 	cmp.w	r8, #0
 800c8bc:	dd05      	ble.n	800c8ca <_dtoa_r+0x86a>
 800c8be:	4639      	mov	r1, r7
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 fd3a 	bl	800d33c <__lshift>
 800c8c8:	4607      	mov	r7, r0
 800c8ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8cc:	b353      	cbz	r3, 800c924 <_dtoa_r+0x8c4>
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	9804      	ldr	r0, [sp, #16]
 800c8d2:	f000 fd87 	bl	800d3e4 <__mcmp>
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	da24      	bge.n	800c924 <_dtoa_r+0x8c4>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	220a      	movs	r2, #10
 800c8de:	9904      	ldr	r1, [sp, #16]
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fbb4 	bl	800d04e <__multadd>
 800c8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8e8:	9004      	str	r0, [sp, #16]
 800c8ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 814d 	beq.w	800cb8e <_dtoa_r+0xb2e>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	4631      	mov	r1, r6
 800c8f8:	220a      	movs	r2, #10
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 fba7 	bl	800d04e <__multadd>
 800c900:	9b02      	ldr	r3, [sp, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	4606      	mov	r6, r0
 800c906:	dc4f      	bgt.n	800c9a8 <_dtoa_r+0x948>
 800c908:	9b06      	ldr	r3, [sp, #24]
 800c90a:	2b02      	cmp	r3, #2
 800c90c:	dd4c      	ble.n	800c9a8 <_dtoa_r+0x948>
 800c90e:	e011      	b.n	800c934 <_dtoa_r+0x8d4>
 800c910:	d0c9      	beq.n	800c8a6 <_dtoa_r+0x846>
 800c912:	9a05      	ldr	r2, [sp, #20]
 800c914:	331c      	adds	r3, #28
 800c916:	441a      	add	r2, r3
 800c918:	9205      	str	r2, [sp, #20]
 800c91a:	441d      	add	r5, r3
 800c91c:	4498      	add	r8, r3
 800c91e:	e7c2      	b.n	800c8a6 <_dtoa_r+0x846>
 800c920:	4603      	mov	r3, r0
 800c922:	e7f6      	b.n	800c912 <_dtoa_r+0x8b2>
 800c924:	f1b9 0f00 	cmp.w	r9, #0
 800c928:	dc38      	bgt.n	800c99c <_dtoa_r+0x93c>
 800c92a:	9b06      	ldr	r3, [sp, #24]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	dd35      	ble.n	800c99c <_dtoa_r+0x93c>
 800c930:	f8cd 9008 	str.w	r9, [sp, #8]
 800c934:	9b02      	ldr	r3, [sp, #8]
 800c936:	b963      	cbnz	r3, 800c952 <_dtoa_r+0x8f2>
 800c938:	4639      	mov	r1, r7
 800c93a:	2205      	movs	r2, #5
 800c93c:	4620      	mov	r0, r4
 800c93e:	f000 fb86 	bl	800d04e <__multadd>
 800c942:	4601      	mov	r1, r0
 800c944:	4607      	mov	r7, r0
 800c946:	9804      	ldr	r0, [sp, #16]
 800c948:	f000 fd4c 	bl	800d3e4 <__mcmp>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	f73f adcc 	bgt.w	800c4ea <_dtoa_r+0x48a>
 800c952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c954:	465d      	mov	r5, fp
 800c956:	ea6f 0a03 	mvn.w	sl, r3
 800c95a:	f04f 0900 	mov.w	r9, #0
 800c95e:	4639      	mov	r1, r7
 800c960:	4620      	mov	r0, r4
 800c962:	f000 fb5d 	bl	800d020 <_Bfree>
 800c966:	2e00      	cmp	r6, #0
 800c968:	f43f aeb7 	beq.w	800c6da <_dtoa_r+0x67a>
 800c96c:	f1b9 0f00 	cmp.w	r9, #0
 800c970:	d005      	beq.n	800c97e <_dtoa_r+0x91e>
 800c972:	45b1      	cmp	r9, r6
 800c974:	d003      	beq.n	800c97e <_dtoa_r+0x91e>
 800c976:	4649      	mov	r1, r9
 800c978:	4620      	mov	r0, r4
 800c97a:	f000 fb51 	bl	800d020 <_Bfree>
 800c97e:	4631      	mov	r1, r6
 800c980:	4620      	mov	r0, r4
 800c982:	f000 fb4d 	bl	800d020 <_Bfree>
 800c986:	e6a8      	b.n	800c6da <_dtoa_r+0x67a>
 800c988:	2700      	movs	r7, #0
 800c98a:	463e      	mov	r6, r7
 800c98c:	e7e1      	b.n	800c952 <_dtoa_r+0x8f2>
 800c98e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c992:	463e      	mov	r6, r7
 800c994:	e5a9      	b.n	800c4ea <_dtoa_r+0x48a>
 800c996:	bf00      	nop
 800c998:	40240000 	.word	0x40240000
 800c99c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c99e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f000 80fa 	beq.w	800cb9c <_dtoa_r+0xb3c>
 800c9a8:	2d00      	cmp	r5, #0
 800c9aa:	dd05      	ble.n	800c9b8 <_dtoa_r+0x958>
 800c9ac:	4631      	mov	r1, r6
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 fcc3 	bl	800d33c <__lshift>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	9b07      	ldr	r3, [sp, #28]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d04c      	beq.n	800ca58 <_dtoa_r+0x9f8>
 800c9be:	6871      	ldr	r1, [r6, #4]
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 faf9 	bl	800cfb8 <_Balloc>
 800c9c6:	6932      	ldr	r2, [r6, #16]
 800c9c8:	3202      	adds	r2, #2
 800c9ca:	4605      	mov	r5, r0
 800c9cc:	0092      	lsls	r2, r2, #2
 800c9ce:	f106 010c 	add.w	r1, r6, #12
 800c9d2:	300c      	adds	r0, #12
 800c9d4:	f7fe fcc6 	bl	800b364 <memcpy>
 800c9d8:	2201      	movs	r2, #1
 800c9da:	4629      	mov	r1, r5
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f000 fcad 	bl	800d33c <__lshift>
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	f8cd b014 	str.w	fp, [sp, #20]
 800c9e8:	f003 0301 	and.w	r3, r3, #1
 800c9ec:	46b1      	mov	r9, r6
 800c9ee:	9307      	str	r3, [sp, #28]
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	4639      	mov	r1, r7
 800c9f4:	9804      	ldr	r0, [sp, #16]
 800c9f6:	f7ff faa5 	bl	800bf44 <quorem>
 800c9fa:	4649      	mov	r1, r9
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ca02:	9804      	ldr	r0, [sp, #16]
 800ca04:	f000 fcee 	bl	800d3e4 <__mcmp>
 800ca08:	4632      	mov	r2, r6
 800ca0a:	9000      	str	r0, [sp, #0]
 800ca0c:	4639      	mov	r1, r7
 800ca0e:	4620      	mov	r0, r4
 800ca10:	f000 fd02 	bl	800d418 <__mdiff>
 800ca14:	68c3      	ldr	r3, [r0, #12]
 800ca16:	4602      	mov	r2, r0
 800ca18:	bb03      	cbnz	r3, 800ca5c <_dtoa_r+0x9fc>
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	9008      	str	r0, [sp, #32]
 800ca1e:	9804      	ldr	r0, [sp, #16]
 800ca20:	f000 fce0 	bl	800d3e4 <__mcmp>
 800ca24:	9a08      	ldr	r2, [sp, #32]
 800ca26:	4603      	mov	r3, r0
 800ca28:	4611      	mov	r1, r2
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	9308      	str	r3, [sp, #32]
 800ca2e:	f000 faf7 	bl	800d020 <_Bfree>
 800ca32:	9b08      	ldr	r3, [sp, #32]
 800ca34:	b9a3      	cbnz	r3, 800ca60 <_dtoa_r+0xa00>
 800ca36:	9a06      	ldr	r2, [sp, #24]
 800ca38:	b992      	cbnz	r2, 800ca60 <_dtoa_r+0xa00>
 800ca3a:	9a07      	ldr	r2, [sp, #28]
 800ca3c:	b982      	cbnz	r2, 800ca60 <_dtoa_r+0xa00>
 800ca3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ca42:	d029      	beq.n	800ca98 <_dtoa_r+0xa38>
 800ca44:	9b00      	ldr	r3, [sp, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	dd01      	ble.n	800ca4e <_dtoa_r+0x9ee>
 800ca4a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ca4e:	9b05      	ldr	r3, [sp, #20]
 800ca50:	1c5d      	adds	r5, r3, #1
 800ca52:	f883 8000 	strb.w	r8, [r3]
 800ca56:	e782      	b.n	800c95e <_dtoa_r+0x8fe>
 800ca58:	4630      	mov	r0, r6
 800ca5a:	e7c2      	b.n	800c9e2 <_dtoa_r+0x982>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e7e3      	b.n	800ca28 <_dtoa_r+0x9c8>
 800ca60:	9a00      	ldr	r2, [sp, #0]
 800ca62:	2a00      	cmp	r2, #0
 800ca64:	db04      	blt.n	800ca70 <_dtoa_r+0xa10>
 800ca66:	d125      	bne.n	800cab4 <_dtoa_r+0xa54>
 800ca68:	9a06      	ldr	r2, [sp, #24]
 800ca6a:	bb1a      	cbnz	r2, 800cab4 <_dtoa_r+0xa54>
 800ca6c:	9a07      	ldr	r2, [sp, #28]
 800ca6e:	bb0a      	cbnz	r2, 800cab4 <_dtoa_r+0xa54>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	ddec      	ble.n	800ca4e <_dtoa_r+0x9ee>
 800ca74:	2201      	movs	r2, #1
 800ca76:	9904      	ldr	r1, [sp, #16]
 800ca78:	4620      	mov	r0, r4
 800ca7a:	f000 fc5f 	bl	800d33c <__lshift>
 800ca7e:	4639      	mov	r1, r7
 800ca80:	9004      	str	r0, [sp, #16]
 800ca82:	f000 fcaf 	bl	800d3e4 <__mcmp>
 800ca86:	2800      	cmp	r0, #0
 800ca88:	dc03      	bgt.n	800ca92 <_dtoa_r+0xa32>
 800ca8a:	d1e0      	bne.n	800ca4e <_dtoa_r+0x9ee>
 800ca8c:	f018 0f01 	tst.w	r8, #1
 800ca90:	d0dd      	beq.n	800ca4e <_dtoa_r+0x9ee>
 800ca92:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ca96:	d1d8      	bne.n	800ca4a <_dtoa_r+0x9ea>
 800ca98:	9b05      	ldr	r3, [sp, #20]
 800ca9a:	9a05      	ldr	r2, [sp, #20]
 800ca9c:	1c5d      	adds	r5, r3, #1
 800ca9e:	2339      	movs	r3, #57	; 0x39
 800caa0:	7013      	strb	r3, [r2, #0]
 800caa2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800caa6:	2b39      	cmp	r3, #57	; 0x39
 800caa8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800caac:	d04f      	beq.n	800cb4e <_dtoa_r+0xaee>
 800caae:	3301      	adds	r3, #1
 800cab0:	7013      	strb	r3, [r2, #0]
 800cab2:	e754      	b.n	800c95e <_dtoa_r+0x8fe>
 800cab4:	9a05      	ldr	r2, [sp, #20]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f102 0501 	add.w	r5, r2, #1
 800cabc:	dd06      	ble.n	800cacc <_dtoa_r+0xa6c>
 800cabe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cac2:	d0e9      	beq.n	800ca98 <_dtoa_r+0xa38>
 800cac4:	f108 0801 	add.w	r8, r8, #1
 800cac8:	9b05      	ldr	r3, [sp, #20]
 800caca:	e7c2      	b.n	800ca52 <_dtoa_r+0x9f2>
 800cacc:	9a02      	ldr	r2, [sp, #8]
 800cace:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cad2:	eba5 030b 	sub.w	r3, r5, fp
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d021      	beq.n	800cb1e <_dtoa_r+0xabe>
 800cada:	2300      	movs	r3, #0
 800cadc:	220a      	movs	r2, #10
 800cade:	9904      	ldr	r1, [sp, #16]
 800cae0:	4620      	mov	r0, r4
 800cae2:	f000 fab4 	bl	800d04e <__multadd>
 800cae6:	45b1      	cmp	r9, r6
 800cae8:	9004      	str	r0, [sp, #16]
 800caea:	f04f 0300 	mov.w	r3, #0
 800caee:	f04f 020a 	mov.w	r2, #10
 800caf2:	4649      	mov	r1, r9
 800caf4:	4620      	mov	r0, r4
 800caf6:	d105      	bne.n	800cb04 <_dtoa_r+0xaa4>
 800caf8:	f000 faa9 	bl	800d04e <__multadd>
 800cafc:	4681      	mov	r9, r0
 800cafe:	4606      	mov	r6, r0
 800cb00:	9505      	str	r5, [sp, #20]
 800cb02:	e776      	b.n	800c9f2 <_dtoa_r+0x992>
 800cb04:	f000 faa3 	bl	800d04e <__multadd>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4681      	mov	r9, r0
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	220a      	movs	r2, #10
 800cb10:	4620      	mov	r0, r4
 800cb12:	f000 fa9c 	bl	800d04e <__multadd>
 800cb16:	4606      	mov	r6, r0
 800cb18:	e7f2      	b.n	800cb00 <_dtoa_r+0xaa0>
 800cb1a:	f04f 0900 	mov.w	r9, #0
 800cb1e:	2201      	movs	r2, #1
 800cb20:	9904      	ldr	r1, [sp, #16]
 800cb22:	4620      	mov	r0, r4
 800cb24:	f000 fc0a 	bl	800d33c <__lshift>
 800cb28:	4639      	mov	r1, r7
 800cb2a:	9004      	str	r0, [sp, #16]
 800cb2c:	f000 fc5a 	bl	800d3e4 <__mcmp>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	dcb6      	bgt.n	800caa2 <_dtoa_r+0xa42>
 800cb34:	d102      	bne.n	800cb3c <_dtoa_r+0xadc>
 800cb36:	f018 0f01 	tst.w	r8, #1
 800cb3a:	d1b2      	bne.n	800caa2 <_dtoa_r+0xa42>
 800cb3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cb40:	2b30      	cmp	r3, #48	; 0x30
 800cb42:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cb46:	f47f af0a 	bne.w	800c95e <_dtoa_r+0x8fe>
 800cb4a:	4615      	mov	r5, r2
 800cb4c:	e7f6      	b.n	800cb3c <_dtoa_r+0xadc>
 800cb4e:	4593      	cmp	fp, r2
 800cb50:	d105      	bne.n	800cb5e <_dtoa_r+0xafe>
 800cb52:	2331      	movs	r3, #49	; 0x31
 800cb54:	f10a 0a01 	add.w	sl, sl, #1
 800cb58:	f88b 3000 	strb.w	r3, [fp]
 800cb5c:	e6ff      	b.n	800c95e <_dtoa_r+0x8fe>
 800cb5e:	4615      	mov	r5, r2
 800cb60:	e79f      	b.n	800caa2 <_dtoa_r+0xa42>
 800cb62:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cbc8 <_dtoa_r+0xb68>
 800cb66:	e007      	b.n	800cb78 <_dtoa_r+0xb18>
 800cb68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cbcc <_dtoa_r+0xb6c>
 800cb6e:	b11b      	cbz	r3, 800cb78 <_dtoa_r+0xb18>
 800cb70:	f10b 0308 	add.w	r3, fp, #8
 800cb74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	4658      	mov	r0, fp
 800cb7a:	b017      	add	sp, #92	; 0x5c
 800cb7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb80:	9b06      	ldr	r3, [sp, #24]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	f77f ae35 	ble.w	800c7f2 <_dtoa_r+0x792>
 800cb88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb8a:	9307      	str	r3, [sp, #28]
 800cb8c:	e649      	b.n	800c822 <_dtoa_r+0x7c2>
 800cb8e:	9b02      	ldr	r3, [sp, #8]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	dc03      	bgt.n	800cb9c <_dtoa_r+0xb3c>
 800cb94:	9b06      	ldr	r3, [sp, #24]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	f73f aecc 	bgt.w	800c934 <_dtoa_r+0x8d4>
 800cb9c:	465d      	mov	r5, fp
 800cb9e:	4639      	mov	r1, r7
 800cba0:	9804      	ldr	r0, [sp, #16]
 800cba2:	f7ff f9cf 	bl	800bf44 <quorem>
 800cba6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cbaa:	f805 8b01 	strb.w	r8, [r5], #1
 800cbae:	9a02      	ldr	r2, [sp, #8]
 800cbb0:	eba5 030b 	sub.w	r3, r5, fp
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	ddb0      	ble.n	800cb1a <_dtoa_r+0xaba>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	220a      	movs	r2, #10
 800cbbc:	9904      	ldr	r1, [sp, #16]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	f000 fa45 	bl	800d04e <__multadd>
 800cbc4:	9004      	str	r0, [sp, #16]
 800cbc6:	e7ea      	b.n	800cb9e <_dtoa_r+0xb3e>
 800cbc8:	0800e99c 	.word	0x0800e99c
 800cbcc:	0800e9c0 	.word	0x0800e9c0

0800cbd0 <__sflush_r>:
 800cbd0:	898a      	ldrh	r2, [r1, #12]
 800cbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd6:	4605      	mov	r5, r0
 800cbd8:	0710      	lsls	r0, r2, #28
 800cbda:	460c      	mov	r4, r1
 800cbdc:	d458      	bmi.n	800cc90 <__sflush_r+0xc0>
 800cbde:	684b      	ldr	r3, [r1, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	dc05      	bgt.n	800cbf0 <__sflush_r+0x20>
 800cbe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	dc02      	bgt.n	800cbf0 <__sflush_r+0x20>
 800cbea:	2000      	movs	r0, #0
 800cbec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cbf2:	2e00      	cmp	r6, #0
 800cbf4:	d0f9      	beq.n	800cbea <__sflush_r+0x1a>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cbfc:	682f      	ldr	r7, [r5, #0]
 800cbfe:	6a21      	ldr	r1, [r4, #32]
 800cc00:	602b      	str	r3, [r5, #0]
 800cc02:	d032      	beq.n	800cc6a <__sflush_r+0x9a>
 800cc04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	075a      	lsls	r2, r3, #29
 800cc0a:	d505      	bpl.n	800cc18 <__sflush_r+0x48>
 800cc0c:	6863      	ldr	r3, [r4, #4]
 800cc0e:	1ac0      	subs	r0, r0, r3
 800cc10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc12:	b10b      	cbz	r3, 800cc18 <__sflush_r+0x48>
 800cc14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc16:	1ac0      	subs	r0, r0, r3
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc1e:	6a21      	ldr	r1, [r4, #32]
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b0      	blx	r6
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	d106      	bne.n	800cc38 <__sflush_r+0x68>
 800cc2a:	6829      	ldr	r1, [r5, #0]
 800cc2c:	291d      	cmp	r1, #29
 800cc2e:	d848      	bhi.n	800ccc2 <__sflush_r+0xf2>
 800cc30:	4a29      	ldr	r2, [pc, #164]	; (800ccd8 <__sflush_r+0x108>)
 800cc32:	40ca      	lsrs	r2, r1
 800cc34:	07d6      	lsls	r6, r2, #31
 800cc36:	d544      	bpl.n	800ccc2 <__sflush_r+0xf2>
 800cc38:	2200      	movs	r2, #0
 800cc3a:	6062      	str	r2, [r4, #4]
 800cc3c:	04d9      	lsls	r1, r3, #19
 800cc3e:	6922      	ldr	r2, [r4, #16]
 800cc40:	6022      	str	r2, [r4, #0]
 800cc42:	d504      	bpl.n	800cc4e <__sflush_r+0x7e>
 800cc44:	1c42      	adds	r2, r0, #1
 800cc46:	d101      	bne.n	800cc4c <__sflush_r+0x7c>
 800cc48:	682b      	ldr	r3, [r5, #0]
 800cc4a:	b903      	cbnz	r3, 800cc4e <__sflush_r+0x7e>
 800cc4c:	6560      	str	r0, [r4, #84]	; 0x54
 800cc4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc50:	602f      	str	r7, [r5, #0]
 800cc52:	2900      	cmp	r1, #0
 800cc54:	d0c9      	beq.n	800cbea <__sflush_r+0x1a>
 800cc56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc5a:	4299      	cmp	r1, r3
 800cc5c:	d002      	beq.n	800cc64 <__sflush_r+0x94>
 800cc5e:	4628      	mov	r0, r5
 800cc60:	f000 fc94 	bl	800d58c <_free_r>
 800cc64:	2000      	movs	r0, #0
 800cc66:	6360      	str	r0, [r4, #52]	; 0x34
 800cc68:	e7c0      	b.n	800cbec <__sflush_r+0x1c>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	47b0      	blx	r6
 800cc70:	1c41      	adds	r1, r0, #1
 800cc72:	d1c8      	bne.n	800cc06 <__sflush_r+0x36>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d0c5      	beq.n	800cc06 <__sflush_r+0x36>
 800cc7a:	2b1d      	cmp	r3, #29
 800cc7c:	d001      	beq.n	800cc82 <__sflush_r+0xb2>
 800cc7e:	2b16      	cmp	r3, #22
 800cc80:	d101      	bne.n	800cc86 <__sflush_r+0xb6>
 800cc82:	602f      	str	r7, [r5, #0]
 800cc84:	e7b1      	b.n	800cbea <__sflush_r+0x1a>
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	e7ad      	b.n	800cbec <__sflush_r+0x1c>
 800cc90:	690f      	ldr	r7, [r1, #16]
 800cc92:	2f00      	cmp	r7, #0
 800cc94:	d0a9      	beq.n	800cbea <__sflush_r+0x1a>
 800cc96:	0793      	lsls	r3, r2, #30
 800cc98:	680e      	ldr	r6, [r1, #0]
 800cc9a:	bf08      	it	eq
 800cc9c:	694b      	ldreq	r3, [r1, #20]
 800cc9e:	600f      	str	r7, [r1, #0]
 800cca0:	bf18      	it	ne
 800cca2:	2300      	movne	r3, #0
 800cca4:	eba6 0807 	sub.w	r8, r6, r7
 800cca8:	608b      	str	r3, [r1, #8]
 800ccaa:	f1b8 0f00 	cmp.w	r8, #0
 800ccae:	dd9c      	ble.n	800cbea <__sflush_r+0x1a>
 800ccb0:	4643      	mov	r3, r8
 800ccb2:	463a      	mov	r2, r7
 800ccb4:	6a21      	ldr	r1, [r4, #32]
 800ccb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b0      	blx	r6
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	dc06      	bgt.n	800ccce <__sflush_r+0xfe>
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc6:	81a3      	strh	r3, [r4, #12]
 800ccc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cccc:	e78e      	b.n	800cbec <__sflush_r+0x1c>
 800ccce:	4407      	add	r7, r0
 800ccd0:	eba8 0800 	sub.w	r8, r8, r0
 800ccd4:	e7e9      	b.n	800ccaa <__sflush_r+0xda>
 800ccd6:	bf00      	nop
 800ccd8:	20400001 	.word	0x20400001

0800ccdc <_fflush_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	690b      	ldr	r3, [r1, #16]
 800cce0:	4605      	mov	r5, r0
 800cce2:	460c      	mov	r4, r1
 800cce4:	b1db      	cbz	r3, 800cd1e <_fflush_r+0x42>
 800cce6:	b118      	cbz	r0, 800ccf0 <_fflush_r+0x14>
 800cce8:	6983      	ldr	r3, [r0, #24]
 800ccea:	b90b      	cbnz	r3, 800ccf0 <_fflush_r+0x14>
 800ccec:	f000 f860 	bl	800cdb0 <__sinit>
 800ccf0:	4b0c      	ldr	r3, [pc, #48]	; (800cd24 <_fflush_r+0x48>)
 800ccf2:	429c      	cmp	r4, r3
 800ccf4:	d109      	bne.n	800cd0a <_fflush_r+0x2e>
 800ccf6:	686c      	ldr	r4, [r5, #4]
 800ccf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccfc:	b17b      	cbz	r3, 800cd1e <_fflush_r+0x42>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4628      	mov	r0, r5
 800cd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd06:	f7ff bf63 	b.w	800cbd0 <__sflush_r>
 800cd0a:	4b07      	ldr	r3, [pc, #28]	; (800cd28 <_fflush_r+0x4c>)
 800cd0c:	429c      	cmp	r4, r3
 800cd0e:	d101      	bne.n	800cd14 <_fflush_r+0x38>
 800cd10:	68ac      	ldr	r4, [r5, #8]
 800cd12:	e7f1      	b.n	800ccf8 <_fflush_r+0x1c>
 800cd14:	4b05      	ldr	r3, [pc, #20]	; (800cd2c <_fflush_r+0x50>)
 800cd16:	429c      	cmp	r4, r3
 800cd18:	bf08      	it	eq
 800cd1a:	68ec      	ldreq	r4, [r5, #12]
 800cd1c:	e7ec      	b.n	800ccf8 <_fflush_r+0x1c>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	bd38      	pop	{r3, r4, r5, pc}
 800cd22:	bf00      	nop
 800cd24:	0800e9f0 	.word	0x0800e9f0
 800cd28:	0800ea10 	.word	0x0800ea10
 800cd2c:	0800e9d0 	.word	0x0800e9d0

0800cd30 <std>:
 800cd30:	2300      	movs	r3, #0
 800cd32:	b510      	push	{r4, lr}
 800cd34:	4604      	mov	r4, r0
 800cd36:	e9c0 3300 	strd	r3, r3, [r0]
 800cd3a:	6083      	str	r3, [r0, #8]
 800cd3c:	8181      	strh	r1, [r0, #12]
 800cd3e:	6643      	str	r3, [r0, #100]	; 0x64
 800cd40:	81c2      	strh	r2, [r0, #14]
 800cd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd46:	6183      	str	r3, [r0, #24]
 800cd48:	4619      	mov	r1, r3
 800cd4a:	2208      	movs	r2, #8
 800cd4c:	305c      	adds	r0, #92	; 0x5c
 800cd4e:	f7fe fb14 	bl	800b37a <memset>
 800cd52:	4b05      	ldr	r3, [pc, #20]	; (800cd68 <std+0x38>)
 800cd54:	6263      	str	r3, [r4, #36]	; 0x24
 800cd56:	4b05      	ldr	r3, [pc, #20]	; (800cd6c <std+0x3c>)
 800cd58:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd5a:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <std+0x40>)
 800cd5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd5e:	4b05      	ldr	r3, [pc, #20]	; (800cd74 <std+0x44>)
 800cd60:	6224      	str	r4, [r4, #32]
 800cd62:	6323      	str	r3, [r4, #48]	; 0x30
 800cd64:	bd10      	pop	{r4, pc}
 800cd66:	bf00      	nop
 800cd68:	0800d97d 	.word	0x0800d97d
 800cd6c:	0800d99f 	.word	0x0800d99f
 800cd70:	0800d9d7 	.word	0x0800d9d7
 800cd74:	0800d9fb 	.word	0x0800d9fb

0800cd78 <_cleanup_r>:
 800cd78:	4901      	ldr	r1, [pc, #4]	; (800cd80 <_cleanup_r+0x8>)
 800cd7a:	f000 b885 	b.w	800ce88 <_fwalk_reent>
 800cd7e:	bf00      	nop
 800cd80:	0800ccdd 	.word	0x0800ccdd

0800cd84 <__sfmoreglue>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	1e4a      	subs	r2, r1, #1
 800cd88:	2568      	movs	r5, #104	; 0x68
 800cd8a:	4355      	muls	r5, r2
 800cd8c:	460e      	mov	r6, r1
 800cd8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd92:	f000 fc49 	bl	800d628 <_malloc_r>
 800cd96:	4604      	mov	r4, r0
 800cd98:	b140      	cbz	r0, 800cdac <__sfmoreglue+0x28>
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	e9c0 1600 	strd	r1, r6, [r0]
 800cda0:	300c      	adds	r0, #12
 800cda2:	60a0      	str	r0, [r4, #8]
 800cda4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cda8:	f7fe fae7 	bl	800b37a <memset>
 800cdac:	4620      	mov	r0, r4
 800cdae:	bd70      	pop	{r4, r5, r6, pc}

0800cdb0 <__sinit>:
 800cdb0:	6983      	ldr	r3, [r0, #24]
 800cdb2:	b510      	push	{r4, lr}
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	bb33      	cbnz	r3, 800ce06 <__sinit+0x56>
 800cdb8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800cdbc:	6503      	str	r3, [r0, #80]	; 0x50
 800cdbe:	4b12      	ldr	r3, [pc, #72]	; (800ce08 <__sinit+0x58>)
 800cdc0:	4a12      	ldr	r2, [pc, #72]	; (800ce0c <__sinit+0x5c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	6282      	str	r2, [r0, #40]	; 0x28
 800cdc6:	4298      	cmp	r0, r3
 800cdc8:	bf04      	itt	eq
 800cdca:	2301      	moveq	r3, #1
 800cdcc:	6183      	streq	r3, [r0, #24]
 800cdce:	f000 f81f 	bl	800ce10 <__sfp>
 800cdd2:	6060      	str	r0, [r4, #4]
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 f81b 	bl	800ce10 <__sfp>
 800cdda:	60a0      	str	r0, [r4, #8]
 800cddc:	4620      	mov	r0, r4
 800cdde:	f000 f817 	bl	800ce10 <__sfp>
 800cde2:	2200      	movs	r2, #0
 800cde4:	60e0      	str	r0, [r4, #12]
 800cde6:	2104      	movs	r1, #4
 800cde8:	6860      	ldr	r0, [r4, #4]
 800cdea:	f7ff ffa1 	bl	800cd30 <std>
 800cdee:	2201      	movs	r2, #1
 800cdf0:	2109      	movs	r1, #9
 800cdf2:	68a0      	ldr	r0, [r4, #8]
 800cdf4:	f7ff ff9c 	bl	800cd30 <std>
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	2112      	movs	r1, #18
 800cdfc:	68e0      	ldr	r0, [r4, #12]
 800cdfe:	f7ff ff97 	bl	800cd30 <std>
 800ce02:	2301      	movs	r3, #1
 800ce04:	61a3      	str	r3, [r4, #24]
 800ce06:	bd10      	pop	{r4, pc}
 800ce08:	0800e988 	.word	0x0800e988
 800ce0c:	0800cd79 	.word	0x0800cd79

0800ce10 <__sfp>:
 800ce10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce12:	4b1b      	ldr	r3, [pc, #108]	; (800ce80 <__sfp+0x70>)
 800ce14:	681e      	ldr	r6, [r3, #0]
 800ce16:	69b3      	ldr	r3, [r6, #24]
 800ce18:	4607      	mov	r7, r0
 800ce1a:	b913      	cbnz	r3, 800ce22 <__sfp+0x12>
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f7ff ffc7 	bl	800cdb0 <__sinit>
 800ce22:	3648      	adds	r6, #72	; 0x48
 800ce24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	d503      	bpl.n	800ce34 <__sfp+0x24>
 800ce2c:	6833      	ldr	r3, [r6, #0]
 800ce2e:	b133      	cbz	r3, 800ce3e <__sfp+0x2e>
 800ce30:	6836      	ldr	r6, [r6, #0]
 800ce32:	e7f7      	b.n	800ce24 <__sfp+0x14>
 800ce34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce38:	b16d      	cbz	r5, 800ce56 <__sfp+0x46>
 800ce3a:	3468      	adds	r4, #104	; 0x68
 800ce3c:	e7f4      	b.n	800ce28 <__sfp+0x18>
 800ce3e:	2104      	movs	r1, #4
 800ce40:	4638      	mov	r0, r7
 800ce42:	f7ff ff9f 	bl	800cd84 <__sfmoreglue>
 800ce46:	6030      	str	r0, [r6, #0]
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	d1f1      	bne.n	800ce30 <__sfp+0x20>
 800ce4c:	230c      	movs	r3, #12
 800ce4e:	603b      	str	r3, [r7, #0]
 800ce50:	4604      	mov	r4, r0
 800ce52:	4620      	mov	r0, r4
 800ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce56:	4b0b      	ldr	r3, [pc, #44]	; (800ce84 <__sfp+0x74>)
 800ce58:	6665      	str	r5, [r4, #100]	; 0x64
 800ce5a:	e9c4 5500 	strd	r5, r5, [r4]
 800ce5e:	60a5      	str	r5, [r4, #8]
 800ce60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ce68:	2208      	movs	r2, #8
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce70:	f7fe fa83 	bl	800b37a <memset>
 800ce74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce7c:	e7e9      	b.n	800ce52 <__sfp+0x42>
 800ce7e:	bf00      	nop
 800ce80:	0800e988 	.word	0x0800e988
 800ce84:	ffff0001 	.word	0xffff0001

0800ce88 <_fwalk_reent>:
 800ce88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce8c:	4680      	mov	r8, r0
 800ce8e:	4689      	mov	r9, r1
 800ce90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce94:	2600      	movs	r6, #0
 800ce96:	b914      	cbnz	r4, 800ce9e <_fwalk_reent+0x16>
 800ce98:	4630      	mov	r0, r6
 800ce9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800cea2:	3f01      	subs	r7, #1
 800cea4:	d501      	bpl.n	800ceaa <_fwalk_reent+0x22>
 800cea6:	6824      	ldr	r4, [r4, #0]
 800cea8:	e7f5      	b.n	800ce96 <_fwalk_reent+0xe>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d907      	bls.n	800cec0 <_fwalk_reent+0x38>
 800ceb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ceb4:	3301      	adds	r3, #1
 800ceb6:	d003      	beq.n	800cec0 <_fwalk_reent+0x38>
 800ceb8:	4629      	mov	r1, r5
 800ceba:	4640      	mov	r0, r8
 800cebc:	47c8      	blx	r9
 800cebe:	4306      	orrs	r6, r0
 800cec0:	3568      	adds	r5, #104	; 0x68
 800cec2:	e7ee      	b.n	800cea2 <_fwalk_reent+0x1a>

0800cec4 <_localeconv_r>:
 800cec4:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <_localeconv_r+0x14>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6a18      	ldr	r0, [r3, #32]
 800ceca:	4b04      	ldr	r3, [pc, #16]	; (800cedc <_localeconv_r+0x18>)
 800cecc:	2800      	cmp	r0, #0
 800cece:	bf08      	it	eq
 800ced0:	4618      	moveq	r0, r3
 800ced2:	30f0      	adds	r0, #240	; 0xf0
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20000014 	.word	0x20000014
 800cedc:	20000078 	.word	0x20000078

0800cee0 <__swhatbuf_r>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	460e      	mov	r6, r1
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	2900      	cmp	r1, #0
 800ceea:	b096      	sub	sp, #88	; 0x58
 800ceec:	4614      	mov	r4, r2
 800ceee:	461d      	mov	r5, r3
 800cef0:	da07      	bge.n	800cf02 <__swhatbuf_r+0x22>
 800cef2:	2300      	movs	r3, #0
 800cef4:	602b      	str	r3, [r5, #0]
 800cef6:	89b3      	ldrh	r3, [r6, #12]
 800cef8:	061a      	lsls	r2, r3, #24
 800cefa:	d410      	bmi.n	800cf1e <__swhatbuf_r+0x3e>
 800cefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf00:	e00e      	b.n	800cf20 <__swhatbuf_r+0x40>
 800cf02:	466a      	mov	r2, sp
 800cf04:	f000 fda0 	bl	800da48 <_fstat_r>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	dbf2      	blt.n	800cef2 <__swhatbuf_r+0x12>
 800cf0c:	9a01      	ldr	r2, [sp, #4]
 800cf0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf16:	425a      	negs	r2, r3
 800cf18:	415a      	adcs	r2, r3
 800cf1a:	602a      	str	r2, [r5, #0]
 800cf1c:	e7ee      	b.n	800cefc <__swhatbuf_r+0x1c>
 800cf1e:	2340      	movs	r3, #64	; 0x40
 800cf20:	2000      	movs	r0, #0
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	b016      	add	sp, #88	; 0x58
 800cf26:	bd70      	pop	{r4, r5, r6, pc}

0800cf28 <__smakebuf_r>:
 800cf28:	898b      	ldrh	r3, [r1, #12]
 800cf2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf2c:	079d      	lsls	r5, r3, #30
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460c      	mov	r4, r1
 800cf32:	d507      	bpl.n	800cf44 <__smakebuf_r+0x1c>
 800cf34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	6123      	str	r3, [r4, #16]
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	6163      	str	r3, [r4, #20]
 800cf40:	b002      	add	sp, #8
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	ab01      	add	r3, sp, #4
 800cf46:	466a      	mov	r2, sp
 800cf48:	f7ff ffca 	bl	800cee0 <__swhatbuf_r>
 800cf4c:	9900      	ldr	r1, [sp, #0]
 800cf4e:	4605      	mov	r5, r0
 800cf50:	4630      	mov	r0, r6
 800cf52:	f000 fb69 	bl	800d628 <_malloc_r>
 800cf56:	b948      	cbnz	r0, 800cf6c <__smakebuf_r+0x44>
 800cf58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf5c:	059a      	lsls	r2, r3, #22
 800cf5e:	d4ef      	bmi.n	800cf40 <__smakebuf_r+0x18>
 800cf60:	f023 0303 	bic.w	r3, r3, #3
 800cf64:	f043 0302 	orr.w	r3, r3, #2
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	e7e3      	b.n	800cf34 <__smakebuf_r+0xc>
 800cf6c:	4b0d      	ldr	r3, [pc, #52]	; (800cfa4 <__smakebuf_r+0x7c>)
 800cf6e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	9b00      	ldr	r3, [sp, #0]
 800cf7c:	6163      	str	r3, [r4, #20]
 800cf7e:	9b01      	ldr	r3, [sp, #4]
 800cf80:	6120      	str	r0, [r4, #16]
 800cf82:	b15b      	cbz	r3, 800cf9c <__smakebuf_r+0x74>
 800cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f000 fd6f 	bl	800da6c <_isatty_r>
 800cf8e:	b128      	cbz	r0, 800cf9c <__smakebuf_r+0x74>
 800cf90:	89a3      	ldrh	r3, [r4, #12]
 800cf92:	f023 0303 	bic.w	r3, r3, #3
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	81a3      	strh	r3, [r4, #12]
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	431d      	orrs	r5, r3
 800cfa0:	81a5      	strh	r5, [r4, #12]
 800cfa2:	e7cd      	b.n	800cf40 <__smakebuf_r+0x18>
 800cfa4:	0800cd79 	.word	0x0800cd79

0800cfa8 <malloc>:
 800cfa8:	4b02      	ldr	r3, [pc, #8]	; (800cfb4 <malloc+0xc>)
 800cfaa:	4601      	mov	r1, r0
 800cfac:	6818      	ldr	r0, [r3, #0]
 800cfae:	f000 bb3b 	b.w	800d628 <_malloc_r>
 800cfb2:	bf00      	nop
 800cfb4:	20000014 	.word	0x20000014

0800cfb8 <_Balloc>:
 800cfb8:	b570      	push	{r4, r5, r6, lr}
 800cfba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460e      	mov	r6, r1
 800cfc0:	b93d      	cbnz	r5, 800cfd2 <_Balloc+0x1a>
 800cfc2:	2010      	movs	r0, #16
 800cfc4:	f7ff fff0 	bl	800cfa8 <malloc>
 800cfc8:	6260      	str	r0, [r4, #36]	; 0x24
 800cfca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfce:	6005      	str	r5, [r0, #0]
 800cfd0:	60c5      	str	r5, [r0, #12]
 800cfd2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cfd4:	68eb      	ldr	r3, [r5, #12]
 800cfd6:	b183      	cbz	r3, 800cffa <_Balloc+0x42>
 800cfd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cfe0:	b9b8      	cbnz	r0, 800d012 <_Balloc+0x5a>
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	fa01 f506 	lsl.w	r5, r1, r6
 800cfe8:	1d6a      	adds	r2, r5, #5
 800cfea:	0092      	lsls	r2, r2, #2
 800cfec:	4620      	mov	r0, r4
 800cfee:	f000 fabf 	bl	800d570 <_calloc_r>
 800cff2:	b160      	cbz	r0, 800d00e <_Balloc+0x56>
 800cff4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cff8:	e00e      	b.n	800d018 <_Balloc+0x60>
 800cffa:	2221      	movs	r2, #33	; 0x21
 800cffc:	2104      	movs	r1, #4
 800cffe:	4620      	mov	r0, r4
 800d000:	f000 fab6 	bl	800d570 <_calloc_r>
 800d004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d006:	60e8      	str	r0, [r5, #12]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1e4      	bne.n	800cfd8 <_Balloc+0x20>
 800d00e:	2000      	movs	r0, #0
 800d010:	bd70      	pop	{r4, r5, r6, pc}
 800d012:	6802      	ldr	r2, [r0, #0]
 800d014:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d018:	2300      	movs	r3, #0
 800d01a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d01e:	e7f7      	b.n	800d010 <_Balloc+0x58>

0800d020 <_Bfree>:
 800d020:	b570      	push	{r4, r5, r6, lr}
 800d022:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d024:	4606      	mov	r6, r0
 800d026:	460d      	mov	r5, r1
 800d028:	b93c      	cbnz	r4, 800d03a <_Bfree+0x1a>
 800d02a:	2010      	movs	r0, #16
 800d02c:	f7ff ffbc 	bl	800cfa8 <malloc>
 800d030:	6270      	str	r0, [r6, #36]	; 0x24
 800d032:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d036:	6004      	str	r4, [r0, #0]
 800d038:	60c4      	str	r4, [r0, #12]
 800d03a:	b13d      	cbz	r5, 800d04c <_Bfree+0x2c>
 800d03c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d03e:	686a      	ldr	r2, [r5, #4]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d046:	6029      	str	r1, [r5, #0]
 800d048:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d04c:	bd70      	pop	{r4, r5, r6, pc}

0800d04e <__multadd>:
 800d04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d052:	690d      	ldr	r5, [r1, #16]
 800d054:	461f      	mov	r7, r3
 800d056:	4606      	mov	r6, r0
 800d058:	460c      	mov	r4, r1
 800d05a:	f101 0c14 	add.w	ip, r1, #20
 800d05e:	2300      	movs	r3, #0
 800d060:	f8dc 0000 	ldr.w	r0, [ip]
 800d064:	b281      	uxth	r1, r0
 800d066:	fb02 7101 	mla	r1, r2, r1, r7
 800d06a:	0c0f      	lsrs	r7, r1, #16
 800d06c:	0c00      	lsrs	r0, r0, #16
 800d06e:	fb02 7000 	mla	r0, r2, r0, r7
 800d072:	b289      	uxth	r1, r1
 800d074:	3301      	adds	r3, #1
 800d076:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d07a:	429d      	cmp	r5, r3
 800d07c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d080:	f84c 1b04 	str.w	r1, [ip], #4
 800d084:	dcec      	bgt.n	800d060 <__multadd+0x12>
 800d086:	b1d7      	cbz	r7, 800d0be <__multadd+0x70>
 800d088:	68a3      	ldr	r3, [r4, #8]
 800d08a:	42ab      	cmp	r3, r5
 800d08c:	dc12      	bgt.n	800d0b4 <__multadd+0x66>
 800d08e:	6861      	ldr	r1, [r4, #4]
 800d090:	4630      	mov	r0, r6
 800d092:	3101      	adds	r1, #1
 800d094:	f7ff ff90 	bl	800cfb8 <_Balloc>
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	3202      	adds	r2, #2
 800d09c:	f104 010c 	add.w	r1, r4, #12
 800d0a0:	4680      	mov	r8, r0
 800d0a2:	0092      	lsls	r2, r2, #2
 800d0a4:	300c      	adds	r0, #12
 800d0a6:	f7fe f95d 	bl	800b364 <memcpy>
 800d0aa:	4621      	mov	r1, r4
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f7ff ffb7 	bl	800d020 <_Bfree>
 800d0b2:	4644      	mov	r4, r8
 800d0b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0b8:	3501      	adds	r5, #1
 800d0ba:	615f      	str	r7, [r3, #20]
 800d0bc:	6125      	str	r5, [r4, #16]
 800d0be:	4620      	mov	r0, r4
 800d0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d0c4 <__hi0bits>:
 800d0c4:	0c02      	lsrs	r2, r0, #16
 800d0c6:	0412      	lsls	r2, r2, #16
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	b9b2      	cbnz	r2, 800d0fa <__hi0bits+0x36>
 800d0cc:	0403      	lsls	r3, r0, #16
 800d0ce:	2010      	movs	r0, #16
 800d0d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d0d4:	bf04      	itt	eq
 800d0d6:	021b      	lsleq	r3, r3, #8
 800d0d8:	3008      	addeq	r0, #8
 800d0da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d0de:	bf04      	itt	eq
 800d0e0:	011b      	lsleq	r3, r3, #4
 800d0e2:	3004      	addeq	r0, #4
 800d0e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d0e8:	bf04      	itt	eq
 800d0ea:	009b      	lsleq	r3, r3, #2
 800d0ec:	3002      	addeq	r0, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	db06      	blt.n	800d100 <__hi0bits+0x3c>
 800d0f2:	005b      	lsls	r3, r3, #1
 800d0f4:	d503      	bpl.n	800d0fe <__hi0bits+0x3a>
 800d0f6:	3001      	adds	r0, #1
 800d0f8:	4770      	bx	lr
 800d0fa:	2000      	movs	r0, #0
 800d0fc:	e7e8      	b.n	800d0d0 <__hi0bits+0xc>
 800d0fe:	2020      	movs	r0, #32
 800d100:	4770      	bx	lr

0800d102 <__lo0bits>:
 800d102:	6803      	ldr	r3, [r0, #0]
 800d104:	f013 0207 	ands.w	r2, r3, #7
 800d108:	4601      	mov	r1, r0
 800d10a:	d00b      	beq.n	800d124 <__lo0bits+0x22>
 800d10c:	07da      	lsls	r2, r3, #31
 800d10e:	d423      	bmi.n	800d158 <__lo0bits+0x56>
 800d110:	0798      	lsls	r0, r3, #30
 800d112:	bf49      	itett	mi
 800d114:	085b      	lsrmi	r3, r3, #1
 800d116:	089b      	lsrpl	r3, r3, #2
 800d118:	2001      	movmi	r0, #1
 800d11a:	600b      	strmi	r3, [r1, #0]
 800d11c:	bf5c      	itt	pl
 800d11e:	600b      	strpl	r3, [r1, #0]
 800d120:	2002      	movpl	r0, #2
 800d122:	4770      	bx	lr
 800d124:	b298      	uxth	r0, r3
 800d126:	b9a8      	cbnz	r0, 800d154 <__lo0bits+0x52>
 800d128:	0c1b      	lsrs	r3, r3, #16
 800d12a:	2010      	movs	r0, #16
 800d12c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d130:	bf04      	itt	eq
 800d132:	0a1b      	lsreq	r3, r3, #8
 800d134:	3008      	addeq	r0, #8
 800d136:	071a      	lsls	r2, r3, #28
 800d138:	bf04      	itt	eq
 800d13a:	091b      	lsreq	r3, r3, #4
 800d13c:	3004      	addeq	r0, #4
 800d13e:	079a      	lsls	r2, r3, #30
 800d140:	bf04      	itt	eq
 800d142:	089b      	lsreq	r3, r3, #2
 800d144:	3002      	addeq	r0, #2
 800d146:	07da      	lsls	r2, r3, #31
 800d148:	d402      	bmi.n	800d150 <__lo0bits+0x4e>
 800d14a:	085b      	lsrs	r3, r3, #1
 800d14c:	d006      	beq.n	800d15c <__lo0bits+0x5a>
 800d14e:	3001      	adds	r0, #1
 800d150:	600b      	str	r3, [r1, #0]
 800d152:	4770      	bx	lr
 800d154:	4610      	mov	r0, r2
 800d156:	e7e9      	b.n	800d12c <__lo0bits+0x2a>
 800d158:	2000      	movs	r0, #0
 800d15a:	4770      	bx	lr
 800d15c:	2020      	movs	r0, #32
 800d15e:	4770      	bx	lr

0800d160 <__i2b>:
 800d160:	b510      	push	{r4, lr}
 800d162:	460c      	mov	r4, r1
 800d164:	2101      	movs	r1, #1
 800d166:	f7ff ff27 	bl	800cfb8 <_Balloc>
 800d16a:	2201      	movs	r2, #1
 800d16c:	6144      	str	r4, [r0, #20]
 800d16e:	6102      	str	r2, [r0, #16]
 800d170:	bd10      	pop	{r4, pc}

0800d172 <__multiply>:
 800d172:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d176:	4614      	mov	r4, r2
 800d178:	690a      	ldr	r2, [r1, #16]
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	bfb8      	it	lt
 800d180:	460b      	movlt	r3, r1
 800d182:	4688      	mov	r8, r1
 800d184:	bfbc      	itt	lt
 800d186:	46a0      	movlt	r8, r4
 800d188:	461c      	movlt	r4, r3
 800d18a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d18e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d192:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d196:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d19a:	eb07 0609 	add.w	r6, r7, r9
 800d19e:	42b3      	cmp	r3, r6
 800d1a0:	bfb8      	it	lt
 800d1a2:	3101      	addlt	r1, #1
 800d1a4:	f7ff ff08 	bl	800cfb8 <_Balloc>
 800d1a8:	f100 0514 	add.w	r5, r0, #20
 800d1ac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d1b0:	462b      	mov	r3, r5
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	4573      	cmp	r3, lr
 800d1b6:	d316      	bcc.n	800d1e6 <__multiply+0x74>
 800d1b8:	f104 0214 	add.w	r2, r4, #20
 800d1bc:	f108 0114 	add.w	r1, r8, #20
 800d1c0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d1c4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	9b00      	ldr	r3, [sp, #0]
 800d1cc:	9201      	str	r2, [sp, #4]
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d80c      	bhi.n	800d1ec <__multiply+0x7a>
 800d1d2:	2e00      	cmp	r6, #0
 800d1d4:	dd03      	ble.n	800d1de <__multiply+0x6c>
 800d1d6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d05d      	beq.n	800d29a <__multiply+0x128>
 800d1de:	6106      	str	r6, [r0, #16]
 800d1e0:	b003      	add	sp, #12
 800d1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e6:	f843 2b04 	str.w	r2, [r3], #4
 800d1ea:	e7e3      	b.n	800d1b4 <__multiply+0x42>
 800d1ec:	f8b2 b000 	ldrh.w	fp, [r2]
 800d1f0:	f1bb 0f00 	cmp.w	fp, #0
 800d1f4:	d023      	beq.n	800d23e <__multiply+0xcc>
 800d1f6:	4689      	mov	r9, r1
 800d1f8:	46ac      	mov	ip, r5
 800d1fa:	f04f 0800 	mov.w	r8, #0
 800d1fe:	f859 4b04 	ldr.w	r4, [r9], #4
 800d202:	f8dc a000 	ldr.w	sl, [ip]
 800d206:	b2a3      	uxth	r3, r4
 800d208:	fa1f fa8a 	uxth.w	sl, sl
 800d20c:	fb0b a303 	mla	r3, fp, r3, sl
 800d210:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d214:	f8dc 4000 	ldr.w	r4, [ip]
 800d218:	4443      	add	r3, r8
 800d21a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d21e:	fb0b 840a 	mla	r4, fp, sl, r8
 800d222:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d226:	46e2      	mov	sl, ip
 800d228:	b29b      	uxth	r3, r3
 800d22a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d22e:	454f      	cmp	r7, r9
 800d230:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d234:	f84a 3b04 	str.w	r3, [sl], #4
 800d238:	d82b      	bhi.n	800d292 <__multiply+0x120>
 800d23a:	f8cc 8004 	str.w	r8, [ip, #4]
 800d23e:	9b01      	ldr	r3, [sp, #4]
 800d240:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d244:	3204      	adds	r2, #4
 800d246:	f1ba 0f00 	cmp.w	sl, #0
 800d24a:	d020      	beq.n	800d28e <__multiply+0x11c>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	4689      	mov	r9, r1
 800d250:	46a8      	mov	r8, r5
 800d252:	f04f 0b00 	mov.w	fp, #0
 800d256:	f8b9 c000 	ldrh.w	ip, [r9]
 800d25a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d25e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d262:	445c      	add	r4, fp
 800d264:	46c4      	mov	ip, r8
 800d266:	b29b      	uxth	r3, r3
 800d268:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d26c:	f84c 3b04 	str.w	r3, [ip], #4
 800d270:	f859 3b04 	ldr.w	r3, [r9], #4
 800d274:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d278:	0c1b      	lsrs	r3, r3, #16
 800d27a:	fb0a b303 	mla	r3, sl, r3, fp
 800d27e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d282:	454f      	cmp	r7, r9
 800d284:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d288:	d805      	bhi.n	800d296 <__multiply+0x124>
 800d28a:	f8c8 3004 	str.w	r3, [r8, #4]
 800d28e:	3504      	adds	r5, #4
 800d290:	e79b      	b.n	800d1ca <__multiply+0x58>
 800d292:	46d4      	mov	ip, sl
 800d294:	e7b3      	b.n	800d1fe <__multiply+0x8c>
 800d296:	46e0      	mov	r8, ip
 800d298:	e7dd      	b.n	800d256 <__multiply+0xe4>
 800d29a:	3e01      	subs	r6, #1
 800d29c:	e799      	b.n	800d1d2 <__multiply+0x60>
	...

0800d2a0 <__pow5mult>:
 800d2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2a4:	4615      	mov	r5, r2
 800d2a6:	f012 0203 	ands.w	r2, r2, #3
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	d007      	beq.n	800d2c0 <__pow5mult+0x20>
 800d2b0:	3a01      	subs	r2, #1
 800d2b2:	4c21      	ldr	r4, [pc, #132]	; (800d338 <__pow5mult+0x98>)
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d2ba:	f7ff fec8 	bl	800d04e <__multadd>
 800d2be:	4607      	mov	r7, r0
 800d2c0:	10ad      	asrs	r5, r5, #2
 800d2c2:	d035      	beq.n	800d330 <__pow5mult+0x90>
 800d2c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d2c6:	b93c      	cbnz	r4, 800d2d8 <__pow5mult+0x38>
 800d2c8:	2010      	movs	r0, #16
 800d2ca:	f7ff fe6d 	bl	800cfa8 <malloc>
 800d2ce:	6270      	str	r0, [r6, #36]	; 0x24
 800d2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2d4:	6004      	str	r4, [r0, #0]
 800d2d6:	60c4      	str	r4, [r0, #12]
 800d2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2e0:	b94c      	cbnz	r4, 800d2f6 <__pow5mult+0x56>
 800d2e2:	f240 2171 	movw	r1, #625	; 0x271
 800d2e6:	4630      	mov	r0, r6
 800d2e8:	f7ff ff3a 	bl	800d160 <__i2b>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	6003      	str	r3, [r0, #0]
 800d2f6:	f04f 0800 	mov.w	r8, #0
 800d2fa:	07eb      	lsls	r3, r5, #31
 800d2fc:	d50a      	bpl.n	800d314 <__pow5mult+0x74>
 800d2fe:	4639      	mov	r1, r7
 800d300:	4622      	mov	r2, r4
 800d302:	4630      	mov	r0, r6
 800d304:	f7ff ff35 	bl	800d172 <__multiply>
 800d308:	4639      	mov	r1, r7
 800d30a:	4681      	mov	r9, r0
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7ff fe87 	bl	800d020 <_Bfree>
 800d312:	464f      	mov	r7, r9
 800d314:	106d      	asrs	r5, r5, #1
 800d316:	d00b      	beq.n	800d330 <__pow5mult+0x90>
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	b938      	cbnz	r0, 800d32c <__pow5mult+0x8c>
 800d31c:	4622      	mov	r2, r4
 800d31e:	4621      	mov	r1, r4
 800d320:	4630      	mov	r0, r6
 800d322:	f7ff ff26 	bl	800d172 <__multiply>
 800d326:	6020      	str	r0, [r4, #0]
 800d328:	f8c0 8000 	str.w	r8, [r0]
 800d32c:	4604      	mov	r4, r0
 800d32e:	e7e4      	b.n	800d2fa <__pow5mult+0x5a>
 800d330:	4638      	mov	r0, r7
 800d332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d336:	bf00      	nop
 800d338:	0800eb20 	.word	0x0800eb20

0800d33c <__lshift>:
 800d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	460c      	mov	r4, r1
 800d342:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	6849      	ldr	r1, [r1, #4]
 800d34a:	eb0a 0903 	add.w	r9, sl, r3
 800d34e:	68a3      	ldr	r3, [r4, #8]
 800d350:	4607      	mov	r7, r0
 800d352:	4616      	mov	r6, r2
 800d354:	f109 0501 	add.w	r5, r9, #1
 800d358:	42ab      	cmp	r3, r5
 800d35a:	db32      	blt.n	800d3c2 <__lshift+0x86>
 800d35c:	4638      	mov	r0, r7
 800d35e:	f7ff fe2b 	bl	800cfb8 <_Balloc>
 800d362:	2300      	movs	r3, #0
 800d364:	4680      	mov	r8, r0
 800d366:	f100 0114 	add.w	r1, r0, #20
 800d36a:	461a      	mov	r2, r3
 800d36c:	4553      	cmp	r3, sl
 800d36e:	db2b      	blt.n	800d3c8 <__lshift+0x8c>
 800d370:	6920      	ldr	r0, [r4, #16]
 800d372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d376:	f104 0314 	add.w	r3, r4, #20
 800d37a:	f016 021f 	ands.w	r2, r6, #31
 800d37e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d382:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d386:	d025      	beq.n	800d3d4 <__lshift+0x98>
 800d388:	f1c2 0e20 	rsb	lr, r2, #32
 800d38c:	2000      	movs	r0, #0
 800d38e:	681e      	ldr	r6, [r3, #0]
 800d390:	468a      	mov	sl, r1
 800d392:	4096      	lsls	r6, r2
 800d394:	4330      	orrs	r0, r6
 800d396:	f84a 0b04 	str.w	r0, [sl], #4
 800d39a:	f853 0b04 	ldr.w	r0, [r3], #4
 800d39e:	459c      	cmp	ip, r3
 800d3a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800d3a4:	d814      	bhi.n	800d3d0 <__lshift+0x94>
 800d3a6:	6048      	str	r0, [r1, #4]
 800d3a8:	b108      	cbz	r0, 800d3ae <__lshift+0x72>
 800d3aa:	f109 0502 	add.w	r5, r9, #2
 800d3ae:	3d01      	subs	r5, #1
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	f7ff fe32 	bl	800d020 <_Bfree>
 800d3bc:	4640      	mov	r0, r8
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	3101      	adds	r1, #1
 800d3c4:	005b      	lsls	r3, r3, #1
 800d3c6:	e7c7      	b.n	800d358 <__lshift+0x1c>
 800d3c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	e7cd      	b.n	800d36c <__lshift+0x30>
 800d3d0:	4651      	mov	r1, sl
 800d3d2:	e7dc      	b.n	800d38e <__lshift+0x52>
 800d3d4:	3904      	subs	r1, #4
 800d3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3da:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3de:	459c      	cmp	ip, r3
 800d3e0:	d8f9      	bhi.n	800d3d6 <__lshift+0x9a>
 800d3e2:	e7e4      	b.n	800d3ae <__lshift+0x72>

0800d3e4 <__mcmp>:
 800d3e4:	6903      	ldr	r3, [r0, #16]
 800d3e6:	690a      	ldr	r2, [r1, #16]
 800d3e8:	1a9b      	subs	r3, r3, r2
 800d3ea:	b530      	push	{r4, r5, lr}
 800d3ec:	d10c      	bne.n	800d408 <__mcmp+0x24>
 800d3ee:	0092      	lsls	r2, r2, #2
 800d3f0:	3014      	adds	r0, #20
 800d3f2:	3114      	adds	r1, #20
 800d3f4:	1884      	adds	r4, r0, r2
 800d3f6:	4411      	add	r1, r2
 800d3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d400:	4295      	cmp	r5, r2
 800d402:	d003      	beq.n	800d40c <__mcmp+0x28>
 800d404:	d305      	bcc.n	800d412 <__mcmp+0x2e>
 800d406:	2301      	movs	r3, #1
 800d408:	4618      	mov	r0, r3
 800d40a:	bd30      	pop	{r4, r5, pc}
 800d40c:	42a0      	cmp	r0, r4
 800d40e:	d3f3      	bcc.n	800d3f8 <__mcmp+0x14>
 800d410:	e7fa      	b.n	800d408 <__mcmp+0x24>
 800d412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d416:	e7f7      	b.n	800d408 <__mcmp+0x24>

0800d418 <__mdiff>:
 800d418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d41c:	460d      	mov	r5, r1
 800d41e:	4607      	mov	r7, r0
 800d420:	4611      	mov	r1, r2
 800d422:	4628      	mov	r0, r5
 800d424:	4614      	mov	r4, r2
 800d426:	f7ff ffdd 	bl	800d3e4 <__mcmp>
 800d42a:	1e06      	subs	r6, r0, #0
 800d42c:	d108      	bne.n	800d440 <__mdiff+0x28>
 800d42e:	4631      	mov	r1, r6
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff fdc1 	bl	800cfb8 <_Balloc>
 800d436:	2301      	movs	r3, #1
 800d438:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d440:	bfa4      	itt	ge
 800d442:	4623      	movge	r3, r4
 800d444:	462c      	movge	r4, r5
 800d446:	4638      	mov	r0, r7
 800d448:	6861      	ldr	r1, [r4, #4]
 800d44a:	bfa6      	itte	ge
 800d44c:	461d      	movge	r5, r3
 800d44e:	2600      	movge	r6, #0
 800d450:	2601      	movlt	r6, #1
 800d452:	f7ff fdb1 	bl	800cfb8 <_Balloc>
 800d456:	692b      	ldr	r3, [r5, #16]
 800d458:	60c6      	str	r6, [r0, #12]
 800d45a:	6926      	ldr	r6, [r4, #16]
 800d45c:	f105 0914 	add.w	r9, r5, #20
 800d460:	f104 0214 	add.w	r2, r4, #20
 800d464:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d468:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d46c:	f100 0514 	add.w	r5, r0, #20
 800d470:	f04f 0e00 	mov.w	lr, #0
 800d474:	f852 ab04 	ldr.w	sl, [r2], #4
 800d478:	f859 4b04 	ldr.w	r4, [r9], #4
 800d47c:	fa1e f18a 	uxtah	r1, lr, sl
 800d480:	b2a3      	uxth	r3, r4
 800d482:	1ac9      	subs	r1, r1, r3
 800d484:	0c23      	lsrs	r3, r4, #16
 800d486:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d48a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d48e:	b289      	uxth	r1, r1
 800d490:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d494:	45c8      	cmp	r8, r9
 800d496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d49a:	4694      	mov	ip, r2
 800d49c:	f845 3b04 	str.w	r3, [r5], #4
 800d4a0:	d8e8      	bhi.n	800d474 <__mdiff+0x5c>
 800d4a2:	45bc      	cmp	ip, r7
 800d4a4:	d304      	bcc.n	800d4b0 <__mdiff+0x98>
 800d4a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d4aa:	b183      	cbz	r3, 800d4ce <__mdiff+0xb6>
 800d4ac:	6106      	str	r6, [r0, #16]
 800d4ae:	e7c5      	b.n	800d43c <__mdiff+0x24>
 800d4b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d4b4:	fa1e f381 	uxtah	r3, lr, r1
 800d4b8:	141a      	asrs	r2, r3, #16
 800d4ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d4c8:	f845 3b04 	str.w	r3, [r5], #4
 800d4cc:	e7e9      	b.n	800d4a2 <__mdiff+0x8a>
 800d4ce:	3e01      	subs	r6, #1
 800d4d0:	e7e9      	b.n	800d4a6 <__mdiff+0x8e>

0800d4d2 <__d2b>:
 800d4d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4d6:	460e      	mov	r6, r1
 800d4d8:	2101      	movs	r1, #1
 800d4da:	ec59 8b10 	vmov	r8, r9, d0
 800d4de:	4615      	mov	r5, r2
 800d4e0:	f7ff fd6a 	bl	800cfb8 <_Balloc>
 800d4e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d4e8:	4607      	mov	r7, r0
 800d4ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4ee:	bb34      	cbnz	r4, 800d53e <__d2b+0x6c>
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	f1b8 0300 	subs.w	r3, r8, #0
 800d4f6:	d027      	beq.n	800d548 <__d2b+0x76>
 800d4f8:	a802      	add	r0, sp, #8
 800d4fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d4fe:	f7ff fe00 	bl	800d102 <__lo0bits>
 800d502:	9900      	ldr	r1, [sp, #0]
 800d504:	b1f0      	cbz	r0, 800d544 <__d2b+0x72>
 800d506:	9a01      	ldr	r2, [sp, #4]
 800d508:	f1c0 0320 	rsb	r3, r0, #32
 800d50c:	fa02 f303 	lsl.w	r3, r2, r3
 800d510:	430b      	orrs	r3, r1
 800d512:	40c2      	lsrs	r2, r0
 800d514:	617b      	str	r3, [r7, #20]
 800d516:	9201      	str	r2, [sp, #4]
 800d518:	9b01      	ldr	r3, [sp, #4]
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bf14      	ite	ne
 800d520:	2102      	movne	r1, #2
 800d522:	2101      	moveq	r1, #1
 800d524:	6139      	str	r1, [r7, #16]
 800d526:	b1c4      	cbz	r4, 800d55a <__d2b+0x88>
 800d528:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d52c:	4404      	add	r4, r0
 800d52e:	6034      	str	r4, [r6, #0]
 800d530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d534:	6028      	str	r0, [r5, #0]
 800d536:	4638      	mov	r0, r7
 800d538:	b003      	add	sp, #12
 800d53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d53e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d542:	e7d5      	b.n	800d4f0 <__d2b+0x1e>
 800d544:	6179      	str	r1, [r7, #20]
 800d546:	e7e7      	b.n	800d518 <__d2b+0x46>
 800d548:	a801      	add	r0, sp, #4
 800d54a:	f7ff fdda 	bl	800d102 <__lo0bits>
 800d54e:	9b01      	ldr	r3, [sp, #4]
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	2101      	movs	r1, #1
 800d554:	6139      	str	r1, [r7, #16]
 800d556:	3020      	adds	r0, #32
 800d558:	e7e5      	b.n	800d526 <__d2b+0x54>
 800d55a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d55e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d562:	6030      	str	r0, [r6, #0]
 800d564:	6918      	ldr	r0, [r3, #16]
 800d566:	f7ff fdad 	bl	800d0c4 <__hi0bits>
 800d56a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d56e:	e7e1      	b.n	800d534 <__d2b+0x62>

0800d570 <_calloc_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	fb02 f401 	mul.w	r4, r2, r1
 800d576:	4621      	mov	r1, r4
 800d578:	f000 f856 	bl	800d628 <_malloc_r>
 800d57c:	4605      	mov	r5, r0
 800d57e:	b118      	cbz	r0, 800d588 <_calloc_r+0x18>
 800d580:	4622      	mov	r2, r4
 800d582:	2100      	movs	r1, #0
 800d584:	f7fd fef9 	bl	800b37a <memset>
 800d588:	4628      	mov	r0, r5
 800d58a:	bd38      	pop	{r3, r4, r5, pc}

0800d58c <_free_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	4605      	mov	r5, r0
 800d590:	2900      	cmp	r1, #0
 800d592:	d045      	beq.n	800d620 <_free_r+0x94>
 800d594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d598:	1f0c      	subs	r4, r1, #4
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	bfb8      	it	lt
 800d59e:	18e4      	addlt	r4, r4, r3
 800d5a0:	f000 fa98 	bl	800dad4 <__malloc_lock>
 800d5a4:	4a1f      	ldr	r2, [pc, #124]	; (800d624 <_free_r+0x98>)
 800d5a6:	6813      	ldr	r3, [r2, #0]
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	b933      	cbnz	r3, 800d5ba <_free_r+0x2e>
 800d5ac:	6063      	str	r3, [r4, #4]
 800d5ae:	6014      	str	r4, [r2, #0]
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5b6:	f000 ba8e 	b.w	800dad6 <__malloc_unlock>
 800d5ba:	42a3      	cmp	r3, r4
 800d5bc:	d90c      	bls.n	800d5d8 <_free_r+0x4c>
 800d5be:	6821      	ldr	r1, [r4, #0]
 800d5c0:	1862      	adds	r2, r4, r1
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	bf04      	itt	eq
 800d5c6:	681a      	ldreq	r2, [r3, #0]
 800d5c8:	685b      	ldreq	r3, [r3, #4]
 800d5ca:	6063      	str	r3, [r4, #4]
 800d5cc:	bf04      	itt	eq
 800d5ce:	1852      	addeq	r2, r2, r1
 800d5d0:	6022      	streq	r2, [r4, #0]
 800d5d2:	6004      	str	r4, [r0, #0]
 800d5d4:	e7ec      	b.n	800d5b0 <_free_r+0x24>
 800d5d6:	4613      	mov	r3, r2
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	b10a      	cbz	r2, 800d5e0 <_free_r+0x54>
 800d5dc:	42a2      	cmp	r2, r4
 800d5de:	d9fa      	bls.n	800d5d6 <_free_r+0x4a>
 800d5e0:	6819      	ldr	r1, [r3, #0]
 800d5e2:	1858      	adds	r0, r3, r1
 800d5e4:	42a0      	cmp	r0, r4
 800d5e6:	d10b      	bne.n	800d600 <_free_r+0x74>
 800d5e8:	6820      	ldr	r0, [r4, #0]
 800d5ea:	4401      	add	r1, r0
 800d5ec:	1858      	adds	r0, r3, r1
 800d5ee:	4282      	cmp	r2, r0
 800d5f0:	6019      	str	r1, [r3, #0]
 800d5f2:	d1dd      	bne.n	800d5b0 <_free_r+0x24>
 800d5f4:	6810      	ldr	r0, [r2, #0]
 800d5f6:	6852      	ldr	r2, [r2, #4]
 800d5f8:	605a      	str	r2, [r3, #4]
 800d5fa:	4401      	add	r1, r0
 800d5fc:	6019      	str	r1, [r3, #0]
 800d5fe:	e7d7      	b.n	800d5b0 <_free_r+0x24>
 800d600:	d902      	bls.n	800d608 <_free_r+0x7c>
 800d602:	230c      	movs	r3, #12
 800d604:	602b      	str	r3, [r5, #0]
 800d606:	e7d3      	b.n	800d5b0 <_free_r+0x24>
 800d608:	6820      	ldr	r0, [r4, #0]
 800d60a:	1821      	adds	r1, r4, r0
 800d60c:	428a      	cmp	r2, r1
 800d60e:	bf04      	itt	eq
 800d610:	6811      	ldreq	r1, [r2, #0]
 800d612:	6852      	ldreq	r2, [r2, #4]
 800d614:	6062      	str	r2, [r4, #4]
 800d616:	bf04      	itt	eq
 800d618:	1809      	addeq	r1, r1, r0
 800d61a:	6021      	streq	r1, [r4, #0]
 800d61c:	605c      	str	r4, [r3, #4]
 800d61e:	e7c7      	b.n	800d5b0 <_free_r+0x24>
 800d620:	bd38      	pop	{r3, r4, r5, pc}
 800d622:	bf00      	nop
 800d624:	20004b18 	.word	0x20004b18

0800d628 <_malloc_r>:
 800d628:	b570      	push	{r4, r5, r6, lr}
 800d62a:	1ccd      	adds	r5, r1, #3
 800d62c:	f025 0503 	bic.w	r5, r5, #3
 800d630:	3508      	adds	r5, #8
 800d632:	2d0c      	cmp	r5, #12
 800d634:	bf38      	it	cc
 800d636:	250c      	movcc	r5, #12
 800d638:	2d00      	cmp	r5, #0
 800d63a:	4606      	mov	r6, r0
 800d63c:	db01      	blt.n	800d642 <_malloc_r+0x1a>
 800d63e:	42a9      	cmp	r1, r5
 800d640:	d903      	bls.n	800d64a <_malloc_r+0x22>
 800d642:	230c      	movs	r3, #12
 800d644:	6033      	str	r3, [r6, #0]
 800d646:	2000      	movs	r0, #0
 800d648:	bd70      	pop	{r4, r5, r6, pc}
 800d64a:	f000 fa43 	bl	800dad4 <__malloc_lock>
 800d64e:	4a21      	ldr	r2, [pc, #132]	; (800d6d4 <_malloc_r+0xac>)
 800d650:	6814      	ldr	r4, [r2, #0]
 800d652:	4621      	mov	r1, r4
 800d654:	b991      	cbnz	r1, 800d67c <_malloc_r+0x54>
 800d656:	4c20      	ldr	r4, [pc, #128]	; (800d6d8 <_malloc_r+0xb0>)
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	b91b      	cbnz	r3, 800d664 <_malloc_r+0x3c>
 800d65c:	4630      	mov	r0, r6
 800d65e:	f000 f97d 	bl	800d95c <_sbrk_r>
 800d662:	6020      	str	r0, [r4, #0]
 800d664:	4629      	mov	r1, r5
 800d666:	4630      	mov	r0, r6
 800d668:	f000 f978 	bl	800d95c <_sbrk_r>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d124      	bne.n	800d6ba <_malloc_r+0x92>
 800d670:	230c      	movs	r3, #12
 800d672:	6033      	str	r3, [r6, #0]
 800d674:	4630      	mov	r0, r6
 800d676:	f000 fa2e 	bl	800dad6 <__malloc_unlock>
 800d67a:	e7e4      	b.n	800d646 <_malloc_r+0x1e>
 800d67c:	680b      	ldr	r3, [r1, #0]
 800d67e:	1b5b      	subs	r3, r3, r5
 800d680:	d418      	bmi.n	800d6b4 <_malloc_r+0x8c>
 800d682:	2b0b      	cmp	r3, #11
 800d684:	d90f      	bls.n	800d6a6 <_malloc_r+0x7e>
 800d686:	600b      	str	r3, [r1, #0]
 800d688:	50cd      	str	r5, [r1, r3]
 800d68a:	18cc      	adds	r4, r1, r3
 800d68c:	4630      	mov	r0, r6
 800d68e:	f000 fa22 	bl	800dad6 <__malloc_unlock>
 800d692:	f104 000b 	add.w	r0, r4, #11
 800d696:	1d23      	adds	r3, r4, #4
 800d698:	f020 0007 	bic.w	r0, r0, #7
 800d69c:	1ac3      	subs	r3, r0, r3
 800d69e:	d0d3      	beq.n	800d648 <_malloc_r+0x20>
 800d6a0:	425a      	negs	r2, r3
 800d6a2:	50e2      	str	r2, [r4, r3]
 800d6a4:	e7d0      	b.n	800d648 <_malloc_r+0x20>
 800d6a6:	428c      	cmp	r4, r1
 800d6a8:	684b      	ldr	r3, [r1, #4]
 800d6aa:	bf16      	itet	ne
 800d6ac:	6063      	strne	r3, [r4, #4]
 800d6ae:	6013      	streq	r3, [r2, #0]
 800d6b0:	460c      	movne	r4, r1
 800d6b2:	e7eb      	b.n	800d68c <_malloc_r+0x64>
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	6849      	ldr	r1, [r1, #4]
 800d6b8:	e7cc      	b.n	800d654 <_malloc_r+0x2c>
 800d6ba:	1cc4      	adds	r4, r0, #3
 800d6bc:	f024 0403 	bic.w	r4, r4, #3
 800d6c0:	42a0      	cmp	r0, r4
 800d6c2:	d005      	beq.n	800d6d0 <_malloc_r+0xa8>
 800d6c4:	1a21      	subs	r1, r4, r0
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f000 f948 	bl	800d95c <_sbrk_r>
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d0cf      	beq.n	800d670 <_malloc_r+0x48>
 800d6d0:	6025      	str	r5, [r4, #0]
 800d6d2:	e7db      	b.n	800d68c <_malloc_r+0x64>
 800d6d4:	20004b18 	.word	0x20004b18
 800d6d8:	20004b1c 	.word	0x20004b1c

0800d6dc <__sfputc_r>:
 800d6dc:	6893      	ldr	r3, [r2, #8]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	b410      	push	{r4}
 800d6e4:	6093      	str	r3, [r2, #8]
 800d6e6:	da08      	bge.n	800d6fa <__sfputc_r+0x1e>
 800d6e8:	6994      	ldr	r4, [r2, #24]
 800d6ea:	42a3      	cmp	r3, r4
 800d6ec:	db01      	blt.n	800d6f2 <__sfputc_r+0x16>
 800d6ee:	290a      	cmp	r1, #10
 800d6f0:	d103      	bne.n	800d6fa <__sfputc_r+0x1e>
 800d6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f6:	f7fe bb65 	b.w	800bdc4 <__swbuf_r>
 800d6fa:	6813      	ldr	r3, [r2, #0]
 800d6fc:	1c58      	adds	r0, r3, #1
 800d6fe:	6010      	str	r0, [r2, #0]
 800d700:	7019      	strb	r1, [r3, #0]
 800d702:	4608      	mov	r0, r1
 800d704:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <__sfputs_r>:
 800d70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d70c:	4606      	mov	r6, r0
 800d70e:	460f      	mov	r7, r1
 800d710:	4614      	mov	r4, r2
 800d712:	18d5      	adds	r5, r2, r3
 800d714:	42ac      	cmp	r4, r5
 800d716:	d101      	bne.n	800d71c <__sfputs_r+0x12>
 800d718:	2000      	movs	r0, #0
 800d71a:	e007      	b.n	800d72c <__sfputs_r+0x22>
 800d71c:	463a      	mov	r2, r7
 800d71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d722:	4630      	mov	r0, r6
 800d724:	f7ff ffda 	bl	800d6dc <__sfputc_r>
 800d728:	1c43      	adds	r3, r0, #1
 800d72a:	d1f3      	bne.n	800d714 <__sfputs_r+0xa>
 800d72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d730 <_vfiprintf_r>:
 800d730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	b09d      	sub	sp, #116	; 0x74
 800d738:	4617      	mov	r7, r2
 800d73a:	461d      	mov	r5, r3
 800d73c:	4606      	mov	r6, r0
 800d73e:	b118      	cbz	r0, 800d748 <_vfiprintf_r+0x18>
 800d740:	6983      	ldr	r3, [r0, #24]
 800d742:	b90b      	cbnz	r3, 800d748 <_vfiprintf_r+0x18>
 800d744:	f7ff fb34 	bl	800cdb0 <__sinit>
 800d748:	4b7c      	ldr	r3, [pc, #496]	; (800d93c <_vfiprintf_r+0x20c>)
 800d74a:	429c      	cmp	r4, r3
 800d74c:	d158      	bne.n	800d800 <_vfiprintf_r+0xd0>
 800d74e:	6874      	ldr	r4, [r6, #4]
 800d750:	89a3      	ldrh	r3, [r4, #12]
 800d752:	0718      	lsls	r0, r3, #28
 800d754:	d55e      	bpl.n	800d814 <_vfiprintf_r+0xe4>
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d05b      	beq.n	800d814 <_vfiprintf_r+0xe4>
 800d75c:	2300      	movs	r3, #0
 800d75e:	9309      	str	r3, [sp, #36]	; 0x24
 800d760:	2320      	movs	r3, #32
 800d762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d766:	2330      	movs	r3, #48	; 0x30
 800d768:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d76c:	9503      	str	r5, [sp, #12]
 800d76e:	f04f 0b01 	mov.w	fp, #1
 800d772:	46b8      	mov	r8, r7
 800d774:	4645      	mov	r5, r8
 800d776:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d77a:	b10b      	cbz	r3, 800d780 <_vfiprintf_r+0x50>
 800d77c:	2b25      	cmp	r3, #37	; 0x25
 800d77e:	d154      	bne.n	800d82a <_vfiprintf_r+0xfa>
 800d780:	ebb8 0a07 	subs.w	sl, r8, r7
 800d784:	d00b      	beq.n	800d79e <_vfiprintf_r+0x6e>
 800d786:	4653      	mov	r3, sl
 800d788:	463a      	mov	r2, r7
 800d78a:	4621      	mov	r1, r4
 800d78c:	4630      	mov	r0, r6
 800d78e:	f7ff ffbc 	bl	800d70a <__sfputs_r>
 800d792:	3001      	adds	r0, #1
 800d794:	f000 80c2 	beq.w	800d91c <_vfiprintf_r+0x1ec>
 800d798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d79a:	4453      	add	r3, sl
 800d79c:	9309      	str	r3, [sp, #36]	; 0x24
 800d79e:	f898 3000 	ldrb.w	r3, [r8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 80ba 	beq.w	800d91c <_vfiprintf_r+0x1ec>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d7ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7b2:	9304      	str	r3, [sp, #16]
 800d7b4:	9307      	str	r3, [sp, #28]
 800d7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800d7bc:	46a8      	mov	r8, r5
 800d7be:	2205      	movs	r2, #5
 800d7c0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d7c4:	485e      	ldr	r0, [pc, #376]	; (800d940 <_vfiprintf_r+0x210>)
 800d7c6:	f7f2 fd33 	bl	8000230 <memchr>
 800d7ca:	9b04      	ldr	r3, [sp, #16]
 800d7cc:	bb78      	cbnz	r0, 800d82e <_vfiprintf_r+0xfe>
 800d7ce:	06d9      	lsls	r1, r3, #27
 800d7d0:	bf44      	itt	mi
 800d7d2:	2220      	movmi	r2, #32
 800d7d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d7d8:	071a      	lsls	r2, r3, #28
 800d7da:	bf44      	itt	mi
 800d7dc:	222b      	movmi	r2, #43	; 0x2b
 800d7de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d7e2:	782a      	ldrb	r2, [r5, #0]
 800d7e4:	2a2a      	cmp	r2, #42	; 0x2a
 800d7e6:	d02a      	beq.n	800d83e <_vfiprintf_r+0x10e>
 800d7e8:	9a07      	ldr	r2, [sp, #28]
 800d7ea:	46a8      	mov	r8, r5
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	250a      	movs	r5, #10
 800d7f0:	4641      	mov	r1, r8
 800d7f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f6:	3b30      	subs	r3, #48	; 0x30
 800d7f8:	2b09      	cmp	r3, #9
 800d7fa:	d969      	bls.n	800d8d0 <_vfiprintf_r+0x1a0>
 800d7fc:	b360      	cbz	r0, 800d858 <_vfiprintf_r+0x128>
 800d7fe:	e024      	b.n	800d84a <_vfiprintf_r+0x11a>
 800d800:	4b50      	ldr	r3, [pc, #320]	; (800d944 <_vfiprintf_r+0x214>)
 800d802:	429c      	cmp	r4, r3
 800d804:	d101      	bne.n	800d80a <_vfiprintf_r+0xda>
 800d806:	68b4      	ldr	r4, [r6, #8]
 800d808:	e7a2      	b.n	800d750 <_vfiprintf_r+0x20>
 800d80a:	4b4f      	ldr	r3, [pc, #316]	; (800d948 <_vfiprintf_r+0x218>)
 800d80c:	429c      	cmp	r4, r3
 800d80e:	bf08      	it	eq
 800d810:	68f4      	ldreq	r4, [r6, #12]
 800d812:	e79d      	b.n	800d750 <_vfiprintf_r+0x20>
 800d814:	4621      	mov	r1, r4
 800d816:	4630      	mov	r0, r6
 800d818:	f7fe fb26 	bl	800be68 <__swsetup_r>
 800d81c:	2800      	cmp	r0, #0
 800d81e:	d09d      	beq.n	800d75c <_vfiprintf_r+0x2c>
 800d820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d824:	b01d      	add	sp, #116	; 0x74
 800d826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d82a:	46a8      	mov	r8, r5
 800d82c:	e7a2      	b.n	800d774 <_vfiprintf_r+0x44>
 800d82e:	4a44      	ldr	r2, [pc, #272]	; (800d940 <_vfiprintf_r+0x210>)
 800d830:	1a80      	subs	r0, r0, r2
 800d832:	fa0b f000 	lsl.w	r0, fp, r0
 800d836:	4318      	orrs	r0, r3
 800d838:	9004      	str	r0, [sp, #16]
 800d83a:	4645      	mov	r5, r8
 800d83c:	e7be      	b.n	800d7bc <_vfiprintf_r+0x8c>
 800d83e:	9a03      	ldr	r2, [sp, #12]
 800d840:	1d11      	adds	r1, r2, #4
 800d842:	6812      	ldr	r2, [r2, #0]
 800d844:	9103      	str	r1, [sp, #12]
 800d846:	2a00      	cmp	r2, #0
 800d848:	db01      	blt.n	800d84e <_vfiprintf_r+0x11e>
 800d84a:	9207      	str	r2, [sp, #28]
 800d84c:	e004      	b.n	800d858 <_vfiprintf_r+0x128>
 800d84e:	4252      	negs	r2, r2
 800d850:	f043 0302 	orr.w	r3, r3, #2
 800d854:	9207      	str	r2, [sp, #28]
 800d856:	9304      	str	r3, [sp, #16]
 800d858:	f898 3000 	ldrb.w	r3, [r8]
 800d85c:	2b2e      	cmp	r3, #46	; 0x2e
 800d85e:	d10e      	bne.n	800d87e <_vfiprintf_r+0x14e>
 800d860:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d864:	2b2a      	cmp	r3, #42	; 0x2a
 800d866:	d138      	bne.n	800d8da <_vfiprintf_r+0x1aa>
 800d868:	9b03      	ldr	r3, [sp, #12]
 800d86a:	1d1a      	adds	r2, r3, #4
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	9203      	str	r2, [sp, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	bfb8      	it	lt
 800d874:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d878:	f108 0802 	add.w	r8, r8, #2
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	4d33      	ldr	r5, [pc, #204]	; (800d94c <_vfiprintf_r+0x21c>)
 800d880:	f898 1000 	ldrb.w	r1, [r8]
 800d884:	2203      	movs	r2, #3
 800d886:	4628      	mov	r0, r5
 800d888:	f7f2 fcd2 	bl	8000230 <memchr>
 800d88c:	b140      	cbz	r0, 800d8a0 <_vfiprintf_r+0x170>
 800d88e:	2340      	movs	r3, #64	; 0x40
 800d890:	1b40      	subs	r0, r0, r5
 800d892:	fa03 f000 	lsl.w	r0, r3, r0
 800d896:	9b04      	ldr	r3, [sp, #16]
 800d898:	4303      	orrs	r3, r0
 800d89a:	f108 0801 	add.w	r8, r8, #1
 800d89e:	9304      	str	r3, [sp, #16]
 800d8a0:	f898 1000 	ldrb.w	r1, [r8]
 800d8a4:	482a      	ldr	r0, [pc, #168]	; (800d950 <_vfiprintf_r+0x220>)
 800d8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8aa:	2206      	movs	r2, #6
 800d8ac:	f108 0701 	add.w	r7, r8, #1
 800d8b0:	f7f2 fcbe 	bl	8000230 <memchr>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d037      	beq.n	800d928 <_vfiprintf_r+0x1f8>
 800d8b8:	4b26      	ldr	r3, [pc, #152]	; (800d954 <_vfiprintf_r+0x224>)
 800d8ba:	bb1b      	cbnz	r3, 800d904 <_vfiprintf_r+0x1d4>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	3307      	adds	r3, #7
 800d8c0:	f023 0307 	bic.w	r3, r3, #7
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	9303      	str	r3, [sp, #12]
 800d8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ca:	444b      	add	r3, r9
 800d8cc:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ce:	e750      	b.n	800d772 <_vfiprintf_r+0x42>
 800d8d0:	fb05 3202 	mla	r2, r5, r2, r3
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	4688      	mov	r8, r1
 800d8d8:	e78a      	b.n	800d7f0 <_vfiprintf_r+0xc0>
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f108 0801 	add.w	r8, r8, #1
 800d8e0:	9305      	str	r3, [sp, #20]
 800d8e2:	4619      	mov	r1, r3
 800d8e4:	250a      	movs	r5, #10
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8ec:	3a30      	subs	r2, #48	; 0x30
 800d8ee:	2a09      	cmp	r2, #9
 800d8f0:	d903      	bls.n	800d8fa <_vfiprintf_r+0x1ca>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d0c3      	beq.n	800d87e <_vfiprintf_r+0x14e>
 800d8f6:	9105      	str	r1, [sp, #20]
 800d8f8:	e7c1      	b.n	800d87e <_vfiprintf_r+0x14e>
 800d8fa:	fb05 2101 	mla	r1, r5, r1, r2
 800d8fe:	2301      	movs	r3, #1
 800d900:	4680      	mov	r8, r0
 800d902:	e7f0      	b.n	800d8e6 <_vfiprintf_r+0x1b6>
 800d904:	ab03      	add	r3, sp, #12
 800d906:	9300      	str	r3, [sp, #0]
 800d908:	4622      	mov	r2, r4
 800d90a:	4b13      	ldr	r3, [pc, #76]	; (800d958 <_vfiprintf_r+0x228>)
 800d90c:	a904      	add	r1, sp, #16
 800d90e:	4630      	mov	r0, r6
 800d910:	f7fd fdd0 	bl	800b4b4 <_printf_float>
 800d914:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d918:	4681      	mov	r9, r0
 800d91a:	d1d5      	bne.n	800d8c8 <_vfiprintf_r+0x198>
 800d91c:	89a3      	ldrh	r3, [r4, #12]
 800d91e:	065b      	lsls	r3, r3, #25
 800d920:	f53f af7e 	bmi.w	800d820 <_vfiprintf_r+0xf0>
 800d924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d926:	e77d      	b.n	800d824 <_vfiprintf_r+0xf4>
 800d928:	ab03      	add	r3, sp, #12
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	4622      	mov	r2, r4
 800d92e:	4b0a      	ldr	r3, [pc, #40]	; (800d958 <_vfiprintf_r+0x228>)
 800d930:	a904      	add	r1, sp, #16
 800d932:	4630      	mov	r0, r6
 800d934:	f7fe f874 	bl	800ba20 <_printf_i>
 800d938:	e7ec      	b.n	800d914 <_vfiprintf_r+0x1e4>
 800d93a:	bf00      	nop
 800d93c:	0800e9f0 	.word	0x0800e9f0
 800d940:	0800eb2c 	.word	0x0800eb2c
 800d944:	0800ea10 	.word	0x0800ea10
 800d948:	0800e9d0 	.word	0x0800e9d0
 800d94c:	0800eb32 	.word	0x0800eb32
 800d950:	0800eb36 	.word	0x0800eb36
 800d954:	0800b4b5 	.word	0x0800b4b5
 800d958:	0800d70b 	.word	0x0800d70b

0800d95c <_sbrk_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4c06      	ldr	r4, [pc, #24]	; (800d978 <_sbrk_r+0x1c>)
 800d960:	2300      	movs	r3, #0
 800d962:	4605      	mov	r5, r0
 800d964:	4608      	mov	r0, r1
 800d966:	6023      	str	r3, [r4, #0]
 800d968:	f7f5 fce6 	bl	8003338 <_sbrk>
 800d96c:	1c43      	adds	r3, r0, #1
 800d96e:	d102      	bne.n	800d976 <_sbrk_r+0x1a>
 800d970:	6823      	ldr	r3, [r4, #0]
 800d972:	b103      	cbz	r3, 800d976 <_sbrk_r+0x1a>
 800d974:	602b      	str	r3, [r5, #0]
 800d976:	bd38      	pop	{r3, r4, r5, pc}
 800d978:	20005180 	.word	0x20005180

0800d97c <__sread>:
 800d97c:	b510      	push	{r4, lr}
 800d97e:	460c      	mov	r4, r1
 800d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d984:	f000 f8a8 	bl	800dad8 <_read_r>
 800d988:	2800      	cmp	r0, #0
 800d98a:	bfab      	itete	ge
 800d98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d98e:	89a3      	ldrhlt	r3, [r4, #12]
 800d990:	181b      	addge	r3, r3, r0
 800d992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d996:	bfac      	ite	ge
 800d998:	6563      	strge	r3, [r4, #84]	; 0x54
 800d99a:	81a3      	strhlt	r3, [r4, #12]
 800d99c:	bd10      	pop	{r4, pc}

0800d99e <__swrite>:
 800d99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a2:	461f      	mov	r7, r3
 800d9a4:	898b      	ldrh	r3, [r1, #12]
 800d9a6:	05db      	lsls	r3, r3, #23
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	460c      	mov	r4, r1
 800d9ac:	4616      	mov	r6, r2
 800d9ae:	d505      	bpl.n	800d9bc <__swrite+0x1e>
 800d9b0:	2302      	movs	r3, #2
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9b8:	f000 f868 	bl	800da8c <_lseek_r>
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9c6:	81a3      	strh	r3, [r4, #12]
 800d9c8:	4632      	mov	r2, r6
 800d9ca:	463b      	mov	r3, r7
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9d2:	f000 b817 	b.w	800da04 <_write_r>

0800d9d6 <__sseek>:
 800d9d6:	b510      	push	{r4, lr}
 800d9d8:	460c      	mov	r4, r1
 800d9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9de:	f000 f855 	bl	800da8c <_lseek_r>
 800d9e2:	1c43      	adds	r3, r0, #1
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	bf15      	itete	ne
 800d9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9f2:	81a3      	strheq	r3, [r4, #12]
 800d9f4:	bf18      	it	ne
 800d9f6:	81a3      	strhne	r3, [r4, #12]
 800d9f8:	bd10      	pop	{r4, pc}

0800d9fa <__sclose>:
 800d9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9fe:	f000 b813 	b.w	800da28 <_close_r>
	...

0800da04 <_write_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4c07      	ldr	r4, [pc, #28]	; (800da24 <_write_r+0x20>)
 800da08:	4605      	mov	r5, r0
 800da0a:	4608      	mov	r0, r1
 800da0c:	4611      	mov	r1, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	6022      	str	r2, [r4, #0]
 800da12:	461a      	mov	r2, r3
 800da14:	f7f5 fc3f 	bl	8003296 <_write>
 800da18:	1c43      	adds	r3, r0, #1
 800da1a:	d102      	bne.n	800da22 <_write_r+0x1e>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	b103      	cbz	r3, 800da22 <_write_r+0x1e>
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	20005180 	.word	0x20005180

0800da28 <_close_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4c06      	ldr	r4, [pc, #24]	; (800da44 <_close_r+0x1c>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4605      	mov	r5, r0
 800da30:	4608      	mov	r0, r1
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	f7f5 fc4b 	bl	80032ce <_close>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_close_r+0x1a>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_close_r+0x1a>
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	20005180 	.word	0x20005180

0800da48 <_fstat_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4c07      	ldr	r4, [pc, #28]	; (800da68 <_fstat_r+0x20>)
 800da4c:	2300      	movs	r3, #0
 800da4e:	4605      	mov	r5, r0
 800da50:	4608      	mov	r0, r1
 800da52:	4611      	mov	r1, r2
 800da54:	6023      	str	r3, [r4, #0]
 800da56:	f7f5 fc46 	bl	80032e6 <_fstat>
 800da5a:	1c43      	adds	r3, r0, #1
 800da5c:	d102      	bne.n	800da64 <_fstat_r+0x1c>
 800da5e:	6823      	ldr	r3, [r4, #0]
 800da60:	b103      	cbz	r3, 800da64 <_fstat_r+0x1c>
 800da62:	602b      	str	r3, [r5, #0]
 800da64:	bd38      	pop	{r3, r4, r5, pc}
 800da66:	bf00      	nop
 800da68:	20005180 	.word	0x20005180

0800da6c <_isatty_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4c06      	ldr	r4, [pc, #24]	; (800da88 <_isatty_r+0x1c>)
 800da70:	2300      	movs	r3, #0
 800da72:	4605      	mov	r5, r0
 800da74:	4608      	mov	r0, r1
 800da76:	6023      	str	r3, [r4, #0]
 800da78:	f7f5 fc45 	bl	8003306 <_isatty>
 800da7c:	1c43      	adds	r3, r0, #1
 800da7e:	d102      	bne.n	800da86 <_isatty_r+0x1a>
 800da80:	6823      	ldr	r3, [r4, #0]
 800da82:	b103      	cbz	r3, 800da86 <_isatty_r+0x1a>
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	bd38      	pop	{r3, r4, r5, pc}
 800da88:	20005180 	.word	0x20005180

0800da8c <_lseek_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4c07      	ldr	r4, [pc, #28]	; (800daac <_lseek_r+0x20>)
 800da90:	4605      	mov	r5, r0
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	2200      	movs	r2, #0
 800da98:	6022      	str	r2, [r4, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	f7f5 fc3e 	bl	800331c <_lseek>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_lseek_r+0x1e>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_lseek_r+0x1e>
 800daa8:	602b      	str	r3, [r5, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	20005180 	.word	0x20005180

0800dab0 <__ascii_mbtowc>:
 800dab0:	b082      	sub	sp, #8
 800dab2:	b901      	cbnz	r1, 800dab6 <__ascii_mbtowc+0x6>
 800dab4:	a901      	add	r1, sp, #4
 800dab6:	b142      	cbz	r2, 800daca <__ascii_mbtowc+0x1a>
 800dab8:	b14b      	cbz	r3, 800dace <__ascii_mbtowc+0x1e>
 800daba:	7813      	ldrb	r3, [r2, #0]
 800dabc:	600b      	str	r3, [r1, #0]
 800dabe:	7812      	ldrb	r2, [r2, #0]
 800dac0:	1c10      	adds	r0, r2, #0
 800dac2:	bf18      	it	ne
 800dac4:	2001      	movne	r0, #1
 800dac6:	b002      	add	sp, #8
 800dac8:	4770      	bx	lr
 800daca:	4610      	mov	r0, r2
 800dacc:	e7fb      	b.n	800dac6 <__ascii_mbtowc+0x16>
 800dace:	f06f 0001 	mvn.w	r0, #1
 800dad2:	e7f8      	b.n	800dac6 <__ascii_mbtowc+0x16>

0800dad4 <__malloc_lock>:
 800dad4:	4770      	bx	lr

0800dad6 <__malloc_unlock>:
 800dad6:	4770      	bx	lr

0800dad8 <_read_r>:
 800dad8:	b538      	push	{r3, r4, r5, lr}
 800dada:	4c07      	ldr	r4, [pc, #28]	; (800daf8 <_read_r+0x20>)
 800dadc:	4605      	mov	r5, r0
 800dade:	4608      	mov	r0, r1
 800dae0:	4611      	mov	r1, r2
 800dae2:	2200      	movs	r2, #0
 800dae4:	6022      	str	r2, [r4, #0]
 800dae6:	461a      	mov	r2, r3
 800dae8:	f7f5 fbb8 	bl	800325c <_read>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d102      	bne.n	800daf6 <_read_r+0x1e>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	b103      	cbz	r3, 800daf6 <_read_r+0x1e>
 800daf4:	602b      	str	r3, [r5, #0]
 800daf6:	bd38      	pop	{r3, r4, r5, pc}
 800daf8:	20005180 	.word	0x20005180

0800dafc <__ascii_wctomb>:
 800dafc:	b149      	cbz	r1, 800db12 <__ascii_wctomb+0x16>
 800dafe:	2aff      	cmp	r2, #255	; 0xff
 800db00:	bf85      	ittet	hi
 800db02:	238a      	movhi	r3, #138	; 0x8a
 800db04:	6003      	strhi	r3, [r0, #0]
 800db06:	700a      	strbls	r2, [r1, #0]
 800db08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800db0c:	bf98      	it	ls
 800db0e:	2001      	movls	r0, #1
 800db10:	4770      	bx	lr
 800db12:	4608      	mov	r0, r1
 800db14:	4770      	bx	lr
	...

0800db18 <_init>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr

0800db24 <_fini>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr
